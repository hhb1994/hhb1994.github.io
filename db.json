{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"source/Staticfile","path":"Staticfile","modified":1,"renderable":0},{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/leancloud.memo","path":"leancloud.memo","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/affix.js","path":"js/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/exturl.js","path":"js/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/js.cookie.js","path":"js/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/post-details.js","path":"js/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/scroll-cookie.js","path":"js/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/scrollspy.js","path":"js/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/LICENSE","path":"lib/canvas-nest/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/README.md","path":"lib/canvas-nest/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest-nomobile.min.js","path":"lib/canvas-nest/canvas-nest-nomobile.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/LICENSE","path":"lib/canvas-ribbon/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/README.md","path":"lib/canvas-ribbon/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/LICENSE","path":"lib/three/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/README.md","path":"lib/three/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/gulpfile.js","path":"lib/three/gulpfile.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/package.json","path":"lib/three/package.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/yarn.lock","path":"lib/three/yarn.lock","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/lib/CanvasRenderer.js","path":"lib/three/lib/CanvasRenderer.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/lib/Projector.js","path":"lib/three/lib/Projector.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/src/canvas_lines.js","path":"lib/three/src/canvas_lines.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/src/canvas_sphere.js","path":"lib/three/src/canvas_sphere.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/src/three-waves.js","path":"lib/three/src/three-waves.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/Staticfile","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1492524306000},{"_id":"source/.DS_Store","hash":"4cca110ecf08df87315e324ea9afd2623cc5387c","modified":1585640597807},{"_id":"source/CNAME","hash":"89c2f6cfa8f880f1b566394b42199163511f1d4e","modified":1567069833179},{"_id":"source/leancloud.memo","hash":"fbcf9923150ca1d90ddc0788f5f32bbeab38fe2f","modified":1585551346601},{"_id":"themes/next/.all-contributorsrc","hash":"d139a3b623b2e40bbff5c96ad44adf7dbdbc5be1","modified":1560475999586},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1560475999586},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1560475999586},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1560475999586},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1560475999586},{"_id":"themes/next/.gitignore","hash":"b80cec1d5e6a73d1cec382aad8046d1352a1e963","modified":1560475999588},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1560475999588},{"_id":"themes/next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1560475999589},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1560475999589},{"_id":"themes/next/_config.yml","hash":"1dd92e64c8c4f49a0f852b8aa4129fd0f4332700","modified":1585531963679},{"_id":"themes/next/bower.json","hash":"dbabc4b5b186070d425777562587de19848b1d56","modified":1560475999590},{"_id":"themes/next/README.md","hash":"7958c3f70b2133b479ddaf525cc4b6d87a37e04a","modified":1560475999589},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1560475999590},{"_id":"themes/next/gulpfile.coffee","hash":"23bd9587807edc4dbecb5c5a29ab96ade24458b5","modified":1560475999593},{"_id":"themes/next/package.json","hash":"d1fc59c32d27178d53f9d2c479443ed682e5bd91","modified":1560475999613},{"_id":"source/_posts/.DS_Store","hash":"9114c12707682ca5aaad9271cd4c8536560c0358","modified":1585638809939},{"_id":"source/_posts/2017-04-03httpcode.md","hash":"7ffc061097c8aed5261e056db1a19e77c7aaa7f8","modified":1491220206000},{"_id":"source/_posts/2017.03.26-bibao.md","hash":"0da619691d29f93d8f6c7bc15b3f2e034b82acce","modified":1585551638044},{"_id":"source/_posts/2017.03.26.md","hash":"06d400a282676b08d68823163b8aff0d0d16d358","modified":1490611274000},{"_id":"source/_posts/2017.03.27workflow.md","hash":"b6748a4eb00e1107c3ccc629e1a6fedfd106f530","modified":1490616842000},{"_id":"source/_posts/2017.04.02bootstrap.md","hash":"69a9178c0c8a6e55d21a7516dfaa18817c54ae35","modified":1491137460000},{"_id":"source/_posts/2017.04.05cookie&session.md","hash":"4dfc29a52620644023aeeff360287910e4047dbc","modified":1491394518000},{"_id":"source/_posts/2017.04.06mysql.md","hash":"1ad4c98f659e5ca90386d0e839fbf2578cdfb100","modified":1491555288000},{"_id":"source/_posts/2017.04.21.git.md","hash":"4a0de9f91a3651fd4e101677860b46a930e06158","modified":1492842656000},{"_id":"source/_posts/2017.04.24.html&xml&xhtml.md","hash":"7105d3c2434610891c9f68336b2764325a90835b","modified":1493040040000},{"_id":"source/_posts/2017.05.23.md","hash":"d783194ea48e8ba80f6caf6099afb20a262a1277","modified":1495552606000},{"_id":"source/_posts/2017.05.24speedup.md","hash":"bbfab3bf1817d3591a4658e4c726d7056ef48448","modified":1495596644000},{"_id":"source/_posts/2017.05.25.box.md","hash":"f4aa9e5c8cac3613c43478e0a90d8fa8758a25a6","modified":1495687138000},{"_id":"source/_posts/2017.05.2huayu.md","hash":"5eeccde3bf7d15877904b39d67afb06897d84f37","modified":1495622654000},{"_id":"source/_posts/2018.11.16SSR.md","hash":"d538f5008ddb05204eaa834aab6193d8798bf25e","modified":1547283376300},{"_id":"source/_posts/2018.11.19CSS-selector.md","hash":"ab95fa09c3ea4b8105dacf54cc61d2e9fab45491","modified":1543394672732},{"_id":"source/_posts/2018.11.20semver.md","hash":"063932a99270fd40270368c92b6d82c7b26af68f","modified":1542702755345},{"_id":"source/_posts/2018.11.21.deployHexo.md","hash":"e8a6843eda5658cf51f09e19e40b0eab3396e116","modified":1542792468694},{"_id":"source/_posts/2018.11.21plg.md","hash":"b3d556f04d6e0865a1f7e5e8ebaa456cfa5598d1","modified":1542790500169},{"_id":"source/_posts/2018.11.23.HTTP.md","hash":"d8f56e978bbe23ca32ffd0a23e5571bea52ba20f","modified":1543195396604},{"_id":"source/_posts/2018.11.29portal.md","hash":"b2c674c9ee73d312b98171e7e08326949bd043ae","modified":1543475469150},{"_id":"source/_posts/2018.11.30.ScrollWatch.md","hash":"0066903ad64ebdcdf9b45f063175bb989e71b829","modified":1543544844518},{"_id":"source/_posts/2018.12.07.pseudo.md","hash":"6a3dfcf4fecb4fddb94be7c13bfaf2be10d53d3d","modified":1544164620105},{"_id":"source/_posts/2018.12.09.vertical.md","hash":"89ee5062f3905cd8b5d7be169786e782ae2fe489","modified":1544349915314},{"_id":"source/_posts/2018.12.12.broswercheck.md","hash":"626846c727f5b096c3471984dede4a549def9573","modified":1544607515477},{"_id":"source/_posts/2018.12.19.impress.js.md","hash":"321e6dd191ba27b1e974645fe82dbabf4eb61e00","modified":1545195391579},{"_id":"source/_posts/2018.12.24.es6-promise.md","hash":"f75523a5d530cf26ca8caa516b161669537ab6c0","modified":1545643739737},{"_id":"source/_posts/2018.12.27.es6-import.md","hash":"0ca9787b5cd6fa0ce52a7340d699398299fc3b95","modified":1545903378245},{"_id":"source/_posts/2019.01.09.linuxCommand.md","hash":"d3be357dd1a47242622b70b526b8f6fdf2abb062","modified":1559030715985},{"_id":"source/_posts/2019.02.01.NAS.md","hash":"d01ffd88ec0c47563a799344f31c9599aecdb693","modified":1549013008807},{"_id":"source/_posts/2019.01.09.webpack-4.md","hash":"7312b76f2597ffc8e0694bb0f93e6e7a0a413011","modified":1547436619496},{"_id":"source/_posts/2019.05.13.encrypt.md","hash":"85adf4eae04638469c8b32be6e21d115fd4f6b72","modified":1557730103834},{"_id":"source/_posts/2019.05.14.cn2.md","hash":"ccfd52570f20fad7fec2215bf4b5e7e2eb4ab131","modified":1557884393243},{"_id":"source/_posts/2019.05.24.sort.md","hash":"c65bc4040a42eb7f93bf217a559229b95b1c983e","modified":1567136548345},{"_id":"source/_posts/2019.05.25.colorfulMacTerminal.md","hash":"185a03059d37ca8caff511cc0dc9b012c37006e6","modified":1559027138899},{"_id":"source/_posts/2019.05.28.asf.md","hash":"0a6eb70c17e6fcdcaf67c14c327a7a54be42d29f","modified":1559029571926},{"_id":"source/_posts/2019.05.29.ycy.md","hash":"dbccf8297213144f441dc8a6e73bf6fd5942c211","modified":1559108603614},{"_id":"source/_posts/2019.05.29.vscodesync.md","hash":"0718a6942ae9a70dd03ad45541194869253adbe9","modified":1559107915612},{"_id":"source/_posts/2019.06.28.gcp.md","hash":"a14c0c25d325a35516b62bb08c91f9bfbf5898e9","modified":1561708577701},{"_id":"source/_posts/2019.06.13.nginx.md","hash":"8be07dbe273318b2496d1d34db37b6afd64b7b48","modified":1560477743723},{"_id":"source/_posts/2019.07.01.linux-screen.md","hash":"5c98f00503338b03f5ea9bfc7d354ea6c758fe1b","modified":1561967869149},{"_id":"source/_posts/2019.07.03.mac.chmod.md","hash":"ffe04662e4fc02e89694f4db87e91e73cb1a40d5","modified":1562123121556},{"_id":"source/_posts/2019.08.13.es6.class.md","hash":"ce0a25804dc32db4ed25ac3d54398c3279ea795a","modified":1567136430452},{"_id":"source/_posts/2019.08.14.npx.md","hash":"a9cfab84f90c3d4816938318a8a2766fe073d0bb","modified":1565749719015},{"_id":"source/_posts/2019.08.26.elUpload.md","hash":"f75bf5049f0e3f5cdf3c30329c9158c131e8594c","modified":1567136245853},{"_id":"source/_posts/2019.08.27.nodejs.ftp.md","hash":"40a25d908e371011b3d6cb01fce42229e5d4c30f","modified":1566870792095},{"_id":"source/_posts/2019.08.27.nodejs.path.md","hash":"0c6da8b1230b93a274cadb93ed84ac8a4dad3afe","modified":1566871866635},{"_id":"source/_posts/2019.08.28.ios12.4jailbrake.md","hash":"91f240a61ebc2036135108ff9442c7b49e2e8b7e","modified":1567043711535},{"_id":"source/_posts/2019.08.29.cname.md","hash":"6706cf0430e128f3664159c2780690e49a631e2a","modified":1567087296724},{"_id":"source/_posts/2019.08.29.koa-body.md","hash":"2711e2ec8a946e3345ce02d6c516c213ad5641a5","modified":1568094458521},{"_id":"source/_posts/2019.08.29.nvm.md","hash":"b12819002655ec0121d47250e607ce1a516655d9","modified":1567064595791},{"_id":"source/_posts/2019.09.04.flux.md","hash":"44735ad9c8cb014ff64ca3e9064a9dfd65ba4c88","modified":1567578535230},{"_id":"source/_posts/2019.09.05.ipv6.md","hash":"dabaec99a59b1afc7b85c7a990b6960fddd01166","modified":1567654412149},{"_id":"source/_posts/2019.09.12.frp.md","hash":"bcdb8fccd66fa810659b9510eeffd68231d6dc76","modified":1568601779974},{"_id":"source/_posts/2019.09.29.koaMysql1.md","hash":"87e5c223c4cc59f50b80be01e44c27e61c19494a","modified":1569749412051},{"_id":"source/_posts/2019.09.30.jwtVerify.md","hash":"b071eca8364b79b9e9b2fcb3548c084fca7761b4","modified":1569811003878},{"_id":"source/_posts/2019.09.30.koaLdap.md","hash":"6a8d361a56e147467db09451d7a8a5525a5f4b79","modified":1569814136721},{"_id":"source/_posts/2019.11.06.debounce.md","hash":"c74b01766b542c3e7c315487916d02775de815b3","modified":1573023073403},{"_id":"source/_posts/2019.11.15.nodejsAxios.md","hash":"d45bf5da642c1e4759162c485f179fef3d186f25","modified":1573809632512},{"_id":"source/_posts/2019.11.08.axios.md","hash":"73defcf021c13c687521d1407084668661ec31e3","modified":1573195274497},{"_id":"source/_posts/2019.11.14.dockerMysql.md","hash":"5ec1a15f6b985ee17d9a40b105b146502e359b65","modified":1573695373010},{"_id":"source/_posts/2019.11.20.arraybuffer.md","hash":"8538f0f00af60089bd80df90b715e800a0a83f01","modified":1574219541884},{"_id":"source/_posts/2019.11.20.wx_taro.md","hash":"95a85e4b64a77339c0d32104492fb75f0a7b2ef8","modified":1574238811630},{"_id":"source/_posts/2019.12.13.mediarecorder.md","hash":"653ec89db9cb86ef04a56daf6fbd2f08a47c0552","modified":1577085175215},{"_id":"source/_posts/2019.12.23.voiceAnalysis.md","hash":"30521da0cd38f35d13ed26cc1c8ce59e46d83272","modified":1577087165731},{"_id":"source/_posts/2020.01.03.lcdFont.md","hash":"facc25e0bca6637c67cc47d295f07f0c4b0c12f0","modified":1578027632173},{"_id":"source/_posts/2020.01.09.px2vw.md","hash":"ae0e29aca5f16fe96e281024ad01ef910327667e","modified":1578548908116},{"_id":"source/_posts/2020.01.13.reactAntd.md","hash":"ab81f0007f1e5fa357caddc99a8b3e156ee9594a","modified":1579078718695},{"_id":"source/_posts/2020.01.21.wxjssdk.md","hash":"501b64cc249e9bc4f6b6b2f7914e731f37e79e86","modified":1579580334999},{"_id":"source/_posts/2020.02.03.enableHttpOverHttpsWebpage.md","hash":"b0de2ed697d103c070346d4dcc50d8c280cea0fe","modified":1581134837131},{"_id":"source/_posts/2020.02.11.echart.md","hash":"8b564d1a4f572fc9e22b07d1133d75ba2b6bfbd5","modified":1586933767441},{"_id":"source/_posts/2020.03.06.listenScroll.md","hash":"7a770f58b3a0cfcc4f03149f6661e1639127aa03","modified":1583477746478},{"_id":"source/_posts/2020.03.10.useSassInWeApp.md","hash":"0ee71a55b3b564db560da95de63efdd43b9aea88","modified":1583824100351},{"_id":"source/_posts/2020.03.12.v2ray+traffic_mask.md","hash":"1aaf2dab5d6a68a8fc1f7c81f49b5463cf76c4e7","modified":1584669295671},{"_id":"source/_posts/2020.03.20.addHttpsOnDs.md","hash":"1d63beab79f79d1728a1994af52624132130be2d","modified":1584672244793},{"_id":"source/_posts/2020.04.01.alfred_sm.ms.md","hash":"eadf0b2c765c0e070278c88009ec4c6a80c0da26","modified":1585905881229},{"_id":"source/_posts/2020.03.31.js-this.md","hash":"536708c6c0dac89599a665c870aaa1099687b643","modified":1585639420540},{"_id":"source/_posts/2020.04.03.webpack-bundle-analyzer.md","hash":"39196479e60602a56d5259868094bd13b1f8aab6","modified":1585901535927},{"_id":"source/_posts/2020.04.08.mac配置virtualenv.md","hash":"22c0b8ede8db9e11967f5e9015f5cb94d95e3eed","modified":1586333788037},{"_id":"source/_posts/docker.md","hash":"5481dd1b29787de3027eca945dbc0165d9e0ff17","modified":1542940869327},{"_id":"source/_posts/es6.md","hash":"c1a80a515f4b10e02b57fa8b6017e1ede6922b96","modified":1547282849270},{"_id":"source/about/index.md","hash":"6faa1e0edd19858e5dfea59a565f3a7931a655c5","modified":1542358206456},{"_id":"source/categories/index-1.md","hash":"82cb7da5596d9a6800085e77f9f17f9e9b5cb26f","modified":1560478419955},{"_id":"source/categories/index.md","hash":"d7067bbd0d4b98920146cbdc126aec2c346f5ef8","modified":1560478410344},{"_id":"source/tags/index.md","hash":"f20fa8142054f5664d31576cc82ba0f32d038c25","modified":1560477942457},{"_id":"source/tags/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1560477922854},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"7ce6cdc8adcbfda68fcbcc54c8b9fd3434a37993","modified":1560475999587},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1560475999587},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"c149f003d03501565e7688915cd8f2e99fbf8f42","modified":1560475999586},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"3239625bb2573e61f7bcce27a74882a9ff7021e9","modified":1560475999587},{"_id":"themes/next/.github/auto_assign.yml","hash":"cb68a1dca1c4623448c2ca899614a9f21df1b036","modified":1560475999587},{"_id":"themes/next/.github/config.yml","hash":"8a5cbf5aa9529390fe0a782758aca9c3a02f9dcf","modified":1560475999587},{"_id":"themes/next/.github/eslint-disable-bot.yml","hash":"16541fb7b80f5ab90135db96285badb63c4d7d3e","modified":1560475999588},{"_id":"themes/next/.github/release-drafter.yml","hash":"c9fdbbdf712327a8ae1ed5972973a75802e245bc","modified":1560475999588},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1560475999588},{"_id":"themes/next/.github/lock.yml","hash":"585d2c471047be320aa62f2b74dad797bf09c530","modified":1560475999588},{"_id":"themes/next/.github/stale.yml","hash":"41bf97ee86b8940a0b2e754499ec77fd2b44b717","modified":1560475999588},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1560475999588},{"_id":"themes/next/.github/topissuebot.yml","hash":"10665bf2b5aba351725715c71e94ad183a0e8f18","modified":1560475999588},{"_id":"themes/next/.github/weekly-digest.yml","hash":"404e4ccb7fcd6587bc9b0247a7a7ff256d21f2cb","modified":1560475999588},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1560475999590},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"0d2f22ea09dd1ef63c66164e048d8239d2ccb2b8","modified":1560475999590},{"_id":"themes/next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1560475999590},{"_id":"themes/next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1560475999590},{"_id":"themes/next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1560475999591},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"212a36d57495990b5f56e46ca8dce1d76c199660","modified":1560475999591},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1560475999591},{"_id":"themes/next/docs/MATH.md","hash":"026d2cff73c22a30ea39c50783557ff4913aceac","modified":1560475999591},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1560475999591},{"_id":"themes/next/languages/de.yml","hash":"9e524b2bdfb848504b93a51c5650e76bba5fa9e0","modified":1560475999593},{"_id":"themes/next/languages/en.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1560475999594},{"_id":"themes/next/languages/default.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1560475999594},{"_id":"themes/next/languages/es.yml","hash":"1752429687861b5cedd063c6ebe5dacefbe7e5a7","modified":1560475999594},{"_id":"themes/next/languages/fa.yml","hash":"cd41db832af5e399590b70a5227cfe0b0e98e101","modified":1560475999594},{"_id":"themes/next/languages/fr.yml","hash":"7005c2b42c2c6e82bd7a1be5cc2f443b5fc79105","modified":1560475999594},{"_id":"themes/next/languages/id.yml","hash":"1c4868837f5109f1df863b04fe627352c31d404b","modified":1560475999594},{"_id":"themes/next/languages/it.yml","hash":"b30ff77ad8044e3b021a3b09187cd377dc789fd2","modified":1560475999594},{"_id":"themes/next/languages/ja.yml","hash":"1dc35e436da6214cdb3c2ff44bc4a06d0be5b9a0","modified":1560475999594},{"_id":"themes/next/languages/ko.yml","hash":"20bfaa7600d35235996c18e5c13dcef89c119626","modified":1560475999594},{"_id":"themes/next/languages/nl.yml","hash":"1c44b3cb2f817808607f3bf6ef47f58ce7599995","modified":1560475999594},{"_id":"themes/next/languages/pt-BR.yml","hash":"08b913a5cf4cc160083069cb4dfb2d66eecd1218","modified":1560475999595},{"_id":"themes/next/languages/pt.yml","hash":"8ddac820e2c17b484b56c0da8881e142b10e221b","modified":1560475999595},{"_id":"themes/next/languages/ru.yml","hash":"db0644e738d2306ac38567aa183ca3e859a3980f","modified":1560475999595},{"_id":"themes/next/languages/tr.yml","hash":"c5f0c20743b1dd52ccb256050b1397d023e6bcd9","modified":1560475999595},{"_id":"themes/next/languages/uk.yml","hash":"1eb59e581568da9a81d6e20541b4ada5fc1c55c0","modified":1560475999596},{"_id":"themes/next/languages/vi.yml","hash":"ba7aff8f88e03f69a0acf7f1b90ee03e077ee88e","modified":1560475999596},{"_id":"themes/next/languages/zh-CN.yml","hash":"fbbf3a0b664ae8e927c700b0a813692b94345156","modified":1560475999596},{"_id":"themes/next/languages/zh-HK.yml","hash":"7903b96912c605e630fb695534012501b2fad805","modified":1560475999596},{"_id":"themes/next/languages/zh-TW.yml","hash":"6e6d2cd8f4244cb1b349b94904cb4770935acefd","modified":1560475999596},{"_id":"themes/next/layout/_layout.swig","hash":"74701fcf2303d59400587436ab4c244e04df7ad9","modified":1560475999597},{"_id":"themes/next/layout/archive.swig","hash":"7e8f3a41a68e912f2b2aaba905d314306ccaf794","modified":1560475999612},{"_id":"themes/next/layout/category.swig","hash":"dda0e6b2139decaf5e865d22ec9d45fdb615a703","modified":1560475999612},{"_id":"themes/next/layout/index.swig","hash":"c2a3896c64e96790edc10426ef586b6186a87f46","modified":1560475999612},{"_id":"themes/next/layout/page.swig","hash":"d8a6cbf6f611c5d68d5da430cb6dc7010ff2c7e0","modified":1560475999613},{"_id":"themes/next/layout/post.swig","hash":"f74929fd792541916eb25c2addfb35431be071ba","modified":1560475999613},{"_id":"themes/next/layout/schedule.swig","hash":"3268dd3d90d8b0e142cfa1a2ebb23355baeda148","modified":1560475999613},{"_id":"themes/next/layout/tag.swig","hash":"a6be69a90924c9d2f4d90fb4867234859bd2c2e9","modified":1560475999613},{"_id":"themes/next/scripts/merge-configs.js","hash":"33afe97284d34542015d358a720823feeebef120","modified":1560475999614},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1560475999615},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1560475999660},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1560475999660},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1560475999660},{"_id":"source/_posts/2017.07.01.md","hash":"32b3c87d1ebc6b6b4ccc4ef4964f7b0d5d0cb114","modified":1498882470000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1560475999641},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c37a60580c901c79ccb22564b228a46e06207445","modified":1560475999587},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"07c423cce4157b8e2dbf60907ccbf3f18c4cf98a","modified":1560475999587},{"_id":"themes/next/.github/ISSUE_TEMPLATE/custom-issue-template.md","hash":"57e1e06e845193e80c7df4a4454af28352526f7a","modified":1560475999587},{"_id":"themes/next/.github/ISSUE_TEMPLATE/non-english.md","hash":"0b0727ff4d5180ae67f930fb4f8e9488e33eda9f","modified":1560475999587},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1560475999591},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1560475999591},{"_id":"themes/next/docs/ru/README.md","hash":"4d7ef717d0b57288e606996ee56c20ffd59d5a99","modified":1560475999592},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1560475999592},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"caa624092175d44e3d3a8c6ca23922718da2354c","modified":1560475999592},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"b218e30df4126b6adc87684775ac4c86ea7f7958","modified":1560475999592},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"650fcb9135b6f09d48e866c19e0dbccd831367f1","modified":1560475999592},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1560475999592},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1560475999593},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"115ffbde2b3ce01ef1f8c2b3833e6f6794650132","modified":1560475999593},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"83feca62190abcca0332915ffe0eefe582573085","modified":1560475999593},{"_id":"themes/next/docs/zh-CN/README.md","hash":"cdd7a8bdcf4a83ff4c74ee6c95c6bcc0b8c1831c","modified":1560475999593},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"5da70d7fa0c988a66a469b9795d33d471a4a4433","modified":1560475999593},{"_id":"themes/next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1560475999597},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1560475999597},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1560475999597},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"89b0a0e64637bf5b0cfea0a23642df3d95eedfa4","modified":1560475999598},{"_id":"themes/next/layout/_macro/post.swig","hash":"c6ca1a3d89660e8d09dd75cf98d032f3cb3b79b4","modified":1560475999599},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"480d93619479dcfcbec6906803bb38b2dfbeae53","modified":1560475999599},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5352f96f4544c1520babf1cec7b44ddf2f8057b3","modified":1560475999599},{"_id":"themes/next/layout/_partials/footer.swig","hash":"589f545333e21a8c7823bce89ab45cf1eb7db6e2","modified":1560475999600},{"_id":"themes/next/layout/_partials/github-banner.swig","hash":"6357537ac0bb114aed4d61bafb39e6690a413697","modified":1560475999600},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1560475999602},{"_id":"themes/next/layout/_partials/post-edit.swig","hash":"06dac109504812b63766a80ede9ddacbd42d227d","modified":1560475999602},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"50be1762f60222379a8bef5e42ab1a0f3872b7ff","modified":1560475999603},{"_id":"themes/next/layout/_scripts/exturl.swig","hash":"61ae10d41f67ece004a025077fdb28724af05090","modified":1560475999604},{"_id":"themes/next/layout/_scripts/next-boot.swig","hash":"012e3ece672cc3b13d5e032139f328d3426d7d65","modified":1560475999604},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"edaff4766e0c05fd5c889d9dd32884d376bef9d9","modified":1560475999604},{"_id":"themes/next/layout/_scripts/scroll-cookie.swig","hash":"ccd13d73429ef91ef5e8b7d9fa43c8188facdf41","modified":1560475999605},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9cd491b8ff2dc9d6976cd9e89c4e56678e3bcefa","modified":1560475999605},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"4ccf2abbfd070874265b0436a3eff21f7c998dfb","modified":1560475999607},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"10b61a8bac671e375916a4d234c120117098a78f","modified":1560475999607},{"_id":"themes/next/layout/_third-party/chatra.swig","hash":"eefb68b69b4b0ed558ee0324ccd711990059b20d","modified":1560475999607},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"a7126355227236f9433615edfd89e86fd51ed676","modified":1560475999609},{"_id":"themes/next/layout/_third-party/mermaid.swig","hash":"d6e6ddda836bd9e2e8d9767a910c7d3280080e81","modified":1560475999610},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"2c4a66be4677d3e4dec3f169ac8a769098dad1fe","modified":1560475999611},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"c28f9dc96ab735daeb7f599f86470aa5a83c03cf","modified":1560475999611},{"_id":"themes/next/layout/_third-party/pdf.swig","hash":"810a9b2a6059f46c4a2ddb178f1eaa4c5e23750b","modified":1560475999611},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"7757bd285732e857996b99af9d917953589fac5e","modified":1560475999611},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"cbe40cb67dad15ade967b0f396c1a95b6871f76a","modified":1560475999611},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"2398e5cd0cb466953b6e7a42c2b2caddebf3c348","modified":1560475999611},{"_id":"themes/next/layout/_third-party/tidio.swig","hash":"912368c41de675f458b267a49a99ae3e7e420ebb","modified":1560475999612},{"_id":"themes/next/scripts/filters/exturl.js","hash":"79ad823ca803cb00e0bfc648aa6c9d59711e0519","modified":1560475999614},{"_id":"themes/next/scripts/helpers/engine.js","hash":"60eb1554456d9d0e5afc4a2d16f1580a0aa02da8","modified":1560475999614},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"799a042bbf497a4c7a2981aa2014ff28fa1bb382","modified":1560475999614},{"_id":"themes/next/scripts/tags/button.js","hash":"f3b4f7ae7e58072bbf410d950a99a0b53cbc866d","modified":1560475999615},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1560475999615},{"_id":"themes/next/scripts/tags/exturl.js","hash":"d605918cf819887e9555212dbe12da97fd887a0b","modified":1560475999615},{"_id":"themes/next/scripts/tags/full-image.js","hash":"fcb41c1c81560ed49dc4024654388a28ee7d32b0","modified":1560475999615},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"598220fa92ff3540dcab74f633ba41523daa8364","modified":1560475999616},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"5db59d56f4f4082382bf1c16722e6c383892b0c5","modified":1560475999616},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1560475999616},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1560475999616},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1560475999616},{"_id":"themes/next/scripts/tags/pdf.js","hash":"f780cc72bff91d2720626e7af69eed25e9c12a29","modified":1560475999616},{"_id":"themes/next/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1560475999616},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1560475999617},{"_id":"themes/next/source/css/main.styl","hash":"e010ec8ac73268a0f137204c89e0080ab8d59b3d","modified":1560475999640},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1560475999641},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1560475999641},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1560475999641},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1560475999642},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1560475999642},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1560475999642},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1560475999643},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1560475999643},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1560475999643},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1560475999643},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1560475999643},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1560475999644},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1560475999644},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1560475999644},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1560475999644},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1560475999645},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1560475999645},{"_id":"themes/next/source/images/searchicon.png","hash":"025d64ba0160a3a2257dd2b3032b5f7c9dd9b82b","modified":1560475999645},{"_id":"themes/next/source/js/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1560475999645},{"_id":"themes/next/source/js/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1560475999646},{"_id":"themes/next/source/js/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1560475999646},{"_id":"themes/next/source/js/js.cookie.js","hash":"e0afce539f1fb81d59e3c6f0a68d736e2fb45d93","modified":1560475999646},{"_id":"themes/next/source/js/motion.js","hash":"a16bc0b701646bf6653484675f4d5dc0f892d184","modified":1560475999647},{"_id":"themes/next/source/js/next-boot.js","hash":"e0615efab5f81ba0fd39c0527eac31144deac7ce","modified":1560475999647},{"_id":"themes/next/source/js/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1560475999647},{"_id":"themes/next/source/js/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1560475999647},{"_id":"themes/next/source/js/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1560475999648},{"_id":"themes/next/source/js/utils.js","hash":"81913c5f75d0949443833cf4269ad63bd7f9be6f","modified":1560475999648},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1560475999635},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1560475999635},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1560475999635},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1560475999639},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1560475999640},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1560475999598},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"fb33f499022cd02722f834fcef1a0e193362cfde","modified":1560475999598},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"fc6bafc8c633afadc538c5afa5620ea2a1cdcb84","modified":1560475999600},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"02bb5748e8540b024e7f4008a9e640890b45280f","modified":1560475999600},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"53221c4c9cc8a50e9224f4b0c5f186cb5587d2a5","modified":1560475999600},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"648bf7eda66629592cb915c4004534b3913cbc22","modified":1560475999601},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"2082f5077551123e695e8afec471c9c44b436acb","modified":1560475999601},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"71af31fea5913fd30c233e555ef13cf2c9768f72","modified":1560475999601},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"5adc60100e129c1d0307bdcaa0c7b8e8375a6ea4","modified":1560475999601},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"0fa4fadb39467b01cede49f21b22e86b1a2da805","modified":1560475999602},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"2940df694fff28e8bf71b6546b4162f1e38227db","modified":1560475999602},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"3615db591dd910fb9fa96542734c7ec0ef05019c","modified":1560475999602},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"eea95b785c9c36d28e1839619793f66e89773bee","modified":1560475999602},{"_id":"themes/next/layout/_partials/post/reward.swig","hash":"d44f025eb93c99ddf90202d8293ccf80689a00c7","modified":1560475999602},{"_id":"themes/next/layout/_partials/post/wechat-subscriber.swig","hash":"ef11b5be5bfb2f0affe82cf521c002b37fef9819","modified":1560475999602},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1560475999603},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"7d1693416a5dc098f4723a53da2e2d1fc2d6e075","modified":1560475999603},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1560475999603},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a5587bd1f60d35e58618576cec45e662aa44ea1f","modified":1560475999603},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"15b542f5b06b7532234af367340b9ed9fcebb0ac","modified":1560475999603},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"6f181cc188ecbe5e607fd989756e470d4cb9765d","modified":1560475999603},{"_id":"themes/next/layout/_partials/share/likely.swig","hash":"b45e934d24d76ec6b6a790e92bdb3d56186b0e2a","modified":1560475999603},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"5b05f165547391bf231e52f56f3d925efc09bc44","modified":1560475999604},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"ffc8e8836714ea79abeb77b75859634615652877","modified":1560475999604},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"108b157fbd1ac3baaf19ae87234fa8728ab79556","modified":1560475999604},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0097e45e7b671f8006b8b2d3c4f95cacc76a983c","modified":1560475999604},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"e42604fbb17648484e5f12afe230d826de089388","modified":1560475999605},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"a5723950c343d220270bfd27bd30050eda6c3fb3","modified":1560475999605},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"798d67e4a736613ab899eabe6529091bbcda7850","modified":1560475999605},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"591b2ccd9713ccb922b9fcf5e278b6de9c5ec30b","modified":1560475999605},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"8eadb929c9e50e58502ccad2dc2657746f8c592a","modified":1560475999605},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"08cd47ef8572121b7811342d3c9a84a338a18191","modified":1560475999605},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"3d01fa6edc0ad73f81813613f2e8a610777f1852","modified":1560475999606},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"fae69a0e1a1d42f7bb44e594a29857d94594698b","modified":1560475999606},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"9fa1ca7059243197d8fbbd35108c36629a254570","modified":1560475999606},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"4a966b7ffe2d80ff1b3dd0fd14b355766dc5c70f","modified":1560475999606},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"438c6f5e6665d72f4ea7ee206011d669246f6102","modified":1560475999606},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"c754f699c90f6278b9159eff1855c17bc713ee96","modified":1560475999606},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"f240a50cd9b627620d9a374a29cf95f0c5e99d7c","modified":1560475999606},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"92e04a2b9e0c3df594bc22235d1894e5ad458dfc","modified":1560475999606},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"0dd5b315d1da55dbfc10f51a1f8952f72eba2720","modified":1560475999607},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"3533167c4295637b91d90f3bae7c651cd128bb6e","modified":1560475999607},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"1a00b1b78c429721d6477c2d8f6f68f005285cc8","modified":1560475999607},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"074a995cd630f56fc4a3135173515c86f2cb34b6","modified":1560475999607},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"e8f91c571ceb4b80aafebc4d36b89fb41b1ae040","modified":1560475999607},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"388efc86af7f19c05ad0e26720cd24ee012d20b9","modified":1560475999608},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"2cbaae65a020bbb0e9265364488aff8bf84fa48d","modified":1560475999608},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"5856d5f701e51dfae1fd6fb486cefde67effd555","modified":1560475999608},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4a908b613518878b9b69576c5dba4a5185f552ab","modified":1560475999608},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"a7e304b05a44279d3e4f611908d7faef9dc14d7c","modified":1560475999609},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"c2cb2f384bc30d31cdccf9794a729c03e687b45c","modified":1560475999609},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"601774d8672577aefbcefac82c94b01f0338da31","modified":1560475999610},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"0a13dfd2de52a96901039098c6fc7b515edfc50b","modified":1560475999612},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"ea94aa85034c6d1b6bb865aecea55c73f8a14501","modified":1560475999612},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"b3eaab6a269aa3fcbafe24fd06f0c9206dc12716","modified":1560475999612},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1560475999634},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1560475999635},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"2e8fb29aa92325df39054b5450757858c6cebc41","modified":1560475999635},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"2036bbb73afd43251982ce824f06c6e88d35a2ef","modified":1560475999635},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"a8aa41625b94cf17a7f473ed10dcbe683b1db705","modified":1560475999639},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1560475999639},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"fc15e277d1504532a09b7b1bd31f900ad95ec4b8","modified":1560475999640},{"_id":"themes/next/source/js/schemes/muse.js","hash":"e9bfa6b343b67625f58757efce46ccdaac8f308c","modified":1560475999647},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"9eb63cba0327d3d11b6cbfcbe40b88e97a8378a3","modified":1560475999647},{"_id":"themes/next/source/lib/canvas-nest/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1560479045217},{"_id":"themes/next/source/lib/canvas-nest/README.md","hash":"70a34de41d0736f3727c98b6f17c0a24c9cc3537","modified":1560479045217},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest-nomobile.min.js","hash":"956eada198babd00f028e8908767cb158926c3f3","modified":1560479045217},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1560479045218},{"_id":"themes/next/source/lib/canvas-ribbon/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1560479235854},{"_id":"themes/next/source/lib/canvas-ribbon/README.md","hash":"07e86d67c508a3f974c45ff61cd0760d79bcebc5","modified":1560479235854},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1560479235854},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1560475999649},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1560475999650},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1560475999650},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1560475999650},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1560475999651},{"_id":"themes/next/source/lib/three/.gitignore","hash":"e691fe9e685cbd50bcd7e138f4ca3503e7b0eaa4","modified":1561367662209},{"_id":"themes/next/source/lib/three/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1561367662210},{"_id":"themes/next/source/lib/three/README.md","hash":"5096005b6bfa0e554b245c6c1ffe10e7edc8130d","modified":1561367662210},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"97f0e67570574dc8597c5819970508d4e7f7af25","modified":1561367662210},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"333fed4c256c7081e07c7844c097b7970b45b248","modified":1561367662210},{"_id":"themes/next/source/lib/three/gulpfile.js","hash":"edd1868be72fde796b0b1f3a7a0316b3c896962a","modified":1561367662211},{"_id":"themes/next/source/lib/three/package.json","hash":"68c5104de7461d425a5dbe521cea0cf00af289c3","modified":1561367662212},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"704e860183acbaaf8de1be65fe5c958e8105f4bf","modified":1561367662213},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1560475999659},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1560475999659},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1560475999659},{"_id":"themes/next/source/css/_variables/base.styl","hash":"640f25a63770af5566ccc9cec79c40a4f1c0b29e","modified":1560475999640},{"_id":"themes/next/source/lib/jquery/index.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1560475999657},{"_id":"themes/next/source/lib/three/yarn.lock","hash":"9c71c0a7c033fc709c1e683157b1f12037024694","modified":1561367662218},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"fe5ff961b86004a306778c7d33a85b32e5e00e48","modified":1560475999617},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"c8b3225396cb444d8baeb94bac78e5216b992a81","modified":1560475999618},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"b98c65006e2546fbf3870c16fbbcbc009dbaab15","modified":1560475999618},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"9d71f34fa13a41b8c8cd2fbdf3fdea608385277c","modified":1560475999618},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1560475999618},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"ce826aedf42b9eca424a044452f5d193866726a6","modified":1560475999622},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"ce2aae8f3ed8ceac3a2417e0481044cf69c788aa","modified":1560475999625},{"_id":"themes/next/source/css/_common/components/scrollbar.styl","hash":"d7b8bcf2a6031296c84bb4f4ecfb037af01d2d82","modified":1560475999625},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7e51ea64611ab5d678c112b4688d4db4fd2737e2","modified":1560475999633},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"6d900b4159eeb869196a619602578bf4d83a117b","modified":1560475999633},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"8e0740a9ad349ce5555122325da872923135a698","modified":1560475999633},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"9a190ef2f49bdbf69604b48ad1dc7197895ee9b6","modified":1560475999634},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"7ffde343bdf10add1f052f3c4308a15180eb4404","modified":1560475999634},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1560475999634},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"33456264a74d1bba38264d14713544d67d003733","modified":1560475999634},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"9a2d298dbdcbfd758518fd74b63897bc80ce15a5","modified":1560475999636},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1560475999636},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1560475999636},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"24230e46fc9fb7b8551f97bb36e9bc1f7423098e","modified":1560475999636},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"75d2d92af070eb10273558b2436972d3f12b361c","modified":1560475999636},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fa33213aceed7bf4bf25437ca9c1a00f7734ae65","modified":1560475999637},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"7359880e8d85312861fe0871f58b662e627dae0c","modified":1560475999637},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a96e46a6ae86c423f932bc2bc78b9f7453e4e4e5","modified":1560475999637},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6565b4a309325596768d0d32e022c80ef23066cb","modified":1560475999637},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"fc160583f742c94316a0fee05c18468033173534","modified":1560475999638},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"1edf4e69d0ec0dc9cefed6c35d3e803e0da4093d","modified":1560475999638},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"7359880e8d85312861fe0871f58b662e627dae0c","modified":1560475999638},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1560475999638},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"57044a6d19eb418c1c3d28787e82c69efa9e0ca6","modified":1560475999638},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"75737591682a2bafa71db4c03fb79e970ac0e7aa","modified":1560475999638},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"6400c98a9fd2b9a8502269f33355bd7ab3ff793b","modified":1560475999639},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"b6dac5bbf20f090cf4b67d156f030d7170dfb39c","modified":1560475999639},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b5b936dddb7b4de4720cd1e8428b30a2f06d63fb","modified":1560475999639},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"232aedbd44243b3b80c4503c947060d3269c1afc","modified":1560475999639},{"_id":"themes/next/source/lib/canvas-nest/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1560479045211},{"_id":"themes/next/source/lib/canvas-nest/.git/config","hash":"6aef6bbfcb8ccf9d042bf26defe7d08167b6d81e","modified":1560479045213},{"_id":"themes/next/source/lib/canvas-nest/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1560479042362},{"_id":"themes/next/source/lib/canvas-nest/.git/index","hash":"c6ab529effaa8528aefbbd899e5f091cfdbf233b","modified":1560479045218},{"_id":"themes/next/source/lib/canvas-nest/.git/packed-refs","hash":"949c61b7ce3b6e582b7d47f985a3d13ddfbb82ca","modified":1560479045209},{"_id":"themes/next/source/lib/canvas-nest/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1560479045217},{"_id":"themes/next/source/lib/canvas-ribbon/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1560479235847},{"_id":"themes/next/source/lib/canvas-ribbon/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1560479233715},{"_id":"themes/next/source/lib/canvas-ribbon/.git/config","hash":"f79e33176f8d3e893553102df6eb347a74fd078f","modified":1560479235849},{"_id":"themes/next/source/lib/canvas-ribbon/.git/index","hash":"6ec56c58fd112f9cec4ac59247eb23b1db805433","modified":1560479235854},{"_id":"themes/next/source/lib/canvas-ribbon/.git/packed-refs","hash":"e9b32db6334e83336cbca343dedc5b9cc64e8e66","modified":1560479235846},{"_id":"themes/next/source/lib/canvas-ribbon/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1560479235853},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1560475999651},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1560475999651},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1560475999652},{"_id":"themes/next/source/lib/three/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1561367662203},{"_id":"themes/next/source/lib/three/.git/config","hash":"65f90ae2568e8c72066580065d3e1df0d03f415c","modified":1561367662204},{"_id":"themes/next/source/lib/three/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1561367659580},{"_id":"themes/next/source/lib/three/.git/index","hash":"e3cc37fb27f2c2fa452cb50c84f2ce50eeef0270","modified":1561367662218},{"_id":"themes/next/source/lib/three/.git/packed-refs","hash":"80f306bc50c4e170079893f500f62e95a726249c","modified":1561367662201},{"_id":"themes/next/source/lib/three/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1561367662209},{"_id":"themes/next/source/lib/three/lib/CanvasRenderer.js","hash":"cf8e1ce6e884023ad0d692cf30f399862407fb40","modified":1561367662211},{"_id":"themes/next/source/lib/three/lib/Projector.js","hash":"1ad16e96cea2a8a9155bb429c83ef9bdd341ce99","modified":1561367662212},{"_id":"themes/next/source/lib/three/src/canvas_lines.js","hash":"650310ff6783671f8ceccf01f840b20d9c87b491","modified":1561367662212},{"_id":"themes/next/source/lib/three/src/canvas_sphere.js","hash":"7614790c67d3e79e3390fe688f6b01afad7e3bb1","modified":1561367662213},{"_id":"themes/next/source/lib/three/src/three-waves.js","hash":"e98e442f14920e9fb8691846dca3a2225d403048","modified":1561367662213},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1560475999656},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1560475999656},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4cfeec9434a72d5efc6ca225d3445d084d4590f7","modified":1560475999619},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"ca97f0b6990eef947039faede80c56d9c4381ee1","modified":1560475999619},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"6c4990d375b640ee4551e62c48c1cbe4c3d62212","modified":1560475999619},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1560475999619},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"a410ed529afd46ddf4a96ecf0de6599488716887","modified":1560475999620},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"cc6ee18f47f2e1e06df6fa0eadb37079e580fd11","modified":1560475999620},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"c0d9e18a9210fdcaf33e488518b3b288eb58c0a1","modified":1560475999620},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"6904fd7ea6455e008d9884558b68254608af9a3c","modified":1560475999621},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"2d142c6f39853916256ad8fc79eb6b85f4001ae8","modified":1560475999621},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1560475999621},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f1d52954b9a5d1ca8e224382349f525e598dd923","modified":1560475999622},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1560475999622},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"80addb9b725e329915c05c27b9fadaf56457a9b3","modified":1560475999622},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"61ca40856e5cacd48e0fa9728fde4605c7dd4c94","modified":1560475999622},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"71d8d1cc22a2a7627a6db7240f0c4902a14f9bea","modified":1560475999620},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"e9dd8de7d98f1478ac7d351624fffd3d8738c905","modified":1560475999621},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1560475999621},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1560475999622},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"6a75bb1f2435f4e895cbbb5abbddf6e8f7257804","modified":1560475999623},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"2356226157e8068b0e9bbe2f7d0f74e1ab49199b","modified":1560475999623},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"c961d37190d9bec58a36306c7e716c4e72c4582f","modified":1560475999623},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"1385862a5c0bd845015d165aadbd1a6add7b72d7","modified":1560475999623},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0bf899fab331add63f0c8ead31ca3a3db2ad74d9","modified":1560475999623},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"b082d07b13a3d55b4c032fd351dfa9a4fd74edec","modified":1560475999623},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"3f33bb862c2aa993f54987fbb345da067b79b112","modified":1560475999624},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"496f931e3a7e313ba8088fb91bb20789cace72c9","modified":1560475999623},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"5440013a081201ca791582db98159dce93ea9e75","modified":1560475999624},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1560475999624},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1560475999624},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"8e058c99dd7d41f0bd34c7c28b6ac9fbb17dcb5e","modified":1560475999624},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"d5c8ffed7f2c701052b7a53abaf5ef437374ea72","modified":1560475999624},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"a6c24393dffbdd94dd5c01cdbec5e180b0bfbbbd","modified":1560475999625},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a3170630d8e085889a4bdc20eb7f09c5a0479c47","modified":1560475999625},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"9224b566cd2632f64c1a964e2c786cee93b93286","modified":1560475999625},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"707527c9950a7459355c8abcf4751c0964de0bc1","modified":1560475999625},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"cc83816614f21c7e1d8d3f867d547ff7c658cec4","modified":1560475999626},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-button.styl","hash":"517d541a80d59ad99a3f648be74891e0c7bc72a8","modified":1560475999626},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"c2d9c3b6fbfa65544e6b5a55d3cb2149df04a8a9","modified":1560475999626},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"9a3bfc878ca797946815bed23cd6f92b24a16358","modified":1560475999626},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"8a24b56524a388fbabd408ffc8ba9b56eb9e01ce","modified":1560475999626},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"c01609176929590f8f347075a9a12b661acd661e","modified":1560475999626},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"8e5c884fb950937afa350c608545455c87aa6129","modified":1560475999627},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"967fb3a3c6c851b34ec5df2d945dc266ed63d146","modified":1560475999627},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"58ec00eebe68d0eebd2eea435c710063877447df","modified":1560475999627},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"6ec8ea7b11a146777b6b8da0f71f0cc1dbd129df","modified":1560475999627},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1560475999628},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"d7501ae01fc45fa15b00d1bc5233b9fffa20a3c9","modified":1560475999628},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"21b32840d8b3a14b10770153114778304ba6d1b0","modified":1560475999629},{"_id":"themes/next/source/css/_common/components/tags/pdf.styl","hash":"da8d34729fb6eb0fcb8ee81e67d2be3c02bc1bc4","modified":1560475999629},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"6e4400d6704dee076434726b7a03ac464eb7bcb4","modified":1560475999629},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"cbc0be5a3285b469858ec9ead48e2ea90bd47ae1","modified":1560475999630},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fc58498d4f5081fcf6218e9e18c5bf2328275bef","modified":1560475999631},{"_id":"themes/next/source/css/_common/components/third-party/copy-code.styl","hash":"688ca3eccc26727d050ad098b32b40934719588a","modified":1560475999631},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"ac7753d536341aa824d7bce0332735e838916995","modified":1560475999631},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"f1d9ee1f86a179741f2478f8c70ca11ab578810e","modified":1560475999631},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"7059e24235b7c57a07f3f8abaa06b0bd6a7eda2f","modified":1560475999631},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"9fac89c8146eb2675721a26f528d7d0f8be7debe","modified":1560475999632},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"ef66c0a08e4243a25e41408d70ca66682b8dcea1","modified":1560475999632},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"61466e3e5459960b5802a267751a0c8018918b0b","modified":1560475999632},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"3ae3f3c276d444862033fd3434c632ad0d2f84e6","modified":1560475999632},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"03c4fa9573fddd930552784cf484fd2ee7825323","modified":1560475999633},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1560475999637},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1560475999637},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1560475999638},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1560479042362},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1560479042362},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1560479042363},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1560479042363},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1560479042363},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1560479042362},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1560479042363},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1560479042362},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1560479042363},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1560479042363},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1560479042363},{"_id":"themes/next/source/lib/canvas-nest/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1560479042361},{"_id":"themes/next/source/lib/canvas-nest/.git/logs/HEAD","hash":"30bca8c08fdcf78daf79eff3b19d8c6f0f5c9cf9","modified":1560479045212},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1560479233716},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1560479233715},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1560479233716},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1560479233716},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1560479233716},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1560479233716},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1560479233716},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1560479233715},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1560479233716},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1560479233716},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1560479233717},{"_id":"themes/next/source/lib/canvas-ribbon/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1560479233715},{"_id":"themes/next/source/lib/canvas-ribbon/.git/logs/HEAD","hash":"e0ef9c2a38cb425a5797d6598cf858d3366b8c83","modified":1560479235848},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1560475999655},{"_id":"themes/next/source/lib/three/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1561367659582},{"_id":"themes/next/source/lib/three/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1561367659581},{"_id":"themes/next/source/lib/three/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1561367659582},{"_id":"themes/next/source/lib/three/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1561367659583},{"_id":"themes/next/source/lib/three/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1561367659583},{"_id":"themes/next/source/lib/three/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1561367659582},{"_id":"themes/next/source/lib/three/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1561367659581},{"_id":"themes/next/source/lib/three/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1561367659582},{"_id":"themes/next/source/lib/three/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1561367659583},{"_id":"themes/next/source/lib/three/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1561367659583},{"_id":"themes/next/source/lib/three/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1561367659584},{"_id":"themes/next/source/lib/three/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1561367659580},{"_id":"themes/next/source/lib/three/.git/logs/HEAD","hash":"70393accb1afbbc32f5f75821c92a02224a42854","modified":1561367662203},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1560475999658},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1560479045196},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/2a/f622a4d7df40a2708946e91d6d7a0df1dc468c","hash":"3da7207fb18d361b83c56f4e35f67e9e945abd82","modified":1560479045202},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1560479045197},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/44/6ddf9b6c0e5ade17ca5cb99f9b3a5300919c57","hash":"fb72799ff98445f72fda041337da4cf105d9dcba","modified":1560479045199},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/46/cad4f872aa93e813aed99547c4705322ca483f","hash":"b0465d3186e2d58a8a99c56c6e68aa2965a396d4","modified":1560479045191},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/45/9262fe92f0115707bf8d8764f1886bc5e7c9e0","hash":"36040483f8af76775b7e4b6d87cec53729625399","modified":1560479045203},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/50/dd2a6539498a70226c81a587db486b47e839ff","hash":"3844b0c815d0b4b32c6312c751a826bf9dc2c945","modified":1560479045192},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/51/7c5eb7dcc2cb9769efea2e7375ff6e04123150","hash":"ec53157077d47430f4729bf164999d18d370aeab","modified":1560479045200},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/5a/69ce9c2e4a1a34f6063ae9a121af1555669c69","hash":"dad25cc0f450e2827b5676975f4a70636e3fd2c8","modified":1560479045198},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/5e/8ae972c99b04af7dd56dabfc485e8fdae5094d","hash":"791b3349c5696ccacae00bffbdbb8d88a03e61a9","modified":1560479045193},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/69/39233ece53c9bdb9a1faf3271ed5768b034aad","hash":"5a770d418c1bb7b0f031f4d5416530002032fcf3","modified":1560479045199},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1560479045197},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/75/de2b8fa62d52690de32c351c63ab6446104ed5","hash":"52d10122d633ce4895a0690c5955e1b356f5a391","modified":1560479045203},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/7b/c7e3186212b6f2e06d3370502565e2c6326890","hash":"379f3c6486f589fc9c1ab07d0382adacf4f655a2","modified":1560479045193},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/86/1c9f4241fe0eb6af02ad770d5ce04c1f68972b","hash":"7005c3e36015a4af30d4b91bd5a849a7861a073e","modified":1560479045202},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/90/f6477118d05f5f96ce0a63c6f18b7b2baea200","hash":"385f58e92981f27fa54eb52bf60424e87c70a9d8","modified":1560479045195},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/91/f99a0c53b26dd54f56b9e452c68f56b06f8f7e","hash":"3dca8a5629e66599b6e0f146aa32f1b7ce023d89","modified":1560479045201},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/98/67d1132e0e50bbb7df754a63358d70741df6d5","hash":"3cb710a1faee73c08036f5e2df7df3a7ce29e9dd","modified":1560479045194},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/99/be66a33ab4ebc34f62f2880a0e0cc6d334d0f2","hash":"f2346fe8ddd7d7abf38f2946f3083d8150f502d2","modified":1560479045196},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/aa/da83ad9aa55faa2b34ede31b1d41e16966f80b","hash":"b304541ab95b7969a63ba2ec4f60f5391bd8bb44","modified":1560479045194},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/b1/bb278ca2e50dff1b343f9d5ca025272859432f","hash":"74f0afa72a30268d84613fb0d1d893bba866f01d","modified":1560479045201},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/bb/5755c22b6c1b7461319624f0f000bc947882ee","hash":"2b87a2a354a0fa77cbddf461b03b0b8e43c16a4f","modified":1560479045198},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/d4/95d28a8fab74d23908f6ccef9e4db2625fbacb","hash":"59e6067b0a806deee7bda6460b36c0f63e2e1db5","modified":1560479045200},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/ca/3466a8cbf05c2982c58199d6ee71ec6d0271ca","hash":"a9b80b5d827b5e84229b1afd7920d9218dce610f","modified":1560479045195},{"_id":"themes/next/source/lib/canvas-nest/.git/refs/heads/master","hash":"42b96d49f5eae1a58b8413a60a0c2699e94df28d","modified":1560479045212},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/02/5cf882fc75a324b1d71b0921eb52ea427387fd","hash":"4a0f15d00f50c629f01c2274e26ef05b3779b6c6","modified":1560479235833},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1560479235835},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/15/9cfb8a3050111dfb3e6635e3f37fe68de2ab30","hash":"f4e1752896135edd6c9a36164b45893a59839548","modified":1560479235836},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/20/47d8728f7950fcc2276c339ee199302805838d","hash":"813e7f6c3b8954c40b250e6ba592d6bac7874397","modified":1560479235839},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/25/3593d429ba9f66eb536d2577e4aa8b74ed7dfa","hash":"b68bb1519d36e82753367a811009e5850db4ddce","modified":1560479235832},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1560479235837},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/56/4913335d11e112ac80e8d550c8347016007f6d","hash":"50e9db730ceac6b2d0c8e8d5a3fec450290fdd8e","modified":1560479235839},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/57/6d268825c6e7b3892828b61b9b408600faa1f2","hash":"2ca9617d2459b9e010e71b3b221fec42d76cae32","modified":1560479235837},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1560479235838},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/6c/34e310dd41c6bfa8db842190388ab83e6d4fa2","hash":"b327c0ce763240a6a8bd2f3fb55ace6b9e3df671","modified":1560479235834},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/7e/871dba93cad35ffcec76a936259ae9a3641bc7","hash":"957e9e7db09ee72fc49ca852d3cc67242567fa45","modified":1560479235840},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/ab/2197a6f5baffdd1d2895c169f4777921cc4027","hash":"81a75ca40bcfd278d6a9d67dedc8d61d959e2baa","modified":1560479235837},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/b9/07949515b208cc605b513ff9d5b8153cbe2fe1","hash":"8fb6e8f2e6b4df8787239335ef9777a6c888d3c0","modified":1560479235840},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/c5/8416b72bd371aaf3bc8952f819c1afd3e4c0b4","hash":"aa8e6e340697fc6d9697c1ab8213ee40aca4ea82","modified":1560479235835},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/c6/d0381e6cd08086561110f76b5f921bf81a6f87","hash":"be98eb9329c91132e90d942a44d05a41c78b4470","modified":1560479235834},{"_id":"themes/next/source/lib/canvas-ribbon/.git/refs/heads/master","hash":"03b53be10249625c87e7cf7311b225cb145e3039","modified":1560479235848},{"_id":"themes/next/source/lib/three/.git/objects/09/3d290f60c3b467d503633531d7ce7cdd42dd75","hash":"ab09bc8bfc9079e408dc6facc1bfd9aa5d6bdef9","modified":1561367662192},{"_id":"themes/next/source/lib/three/.git/objects/0b/de10292fcd5dd4b66d1bf60f62ea7d7a30b310","hash":"37710386189fe435ea20541a69c1a9b833b5f50b","modified":1561367661906},{"_id":"themes/next/source/lib/three/.git/objects/03/c40a4b50e21c63a0e27b1fbcd014168ae3f6da","hash":"987ca2a1169e875a5ac73e8a1a906b9ae88d4d22","modified":1561367661708},{"_id":"themes/next/source/lib/three/.git/objects/03/eb19e6b3194a820c462bc63177b6fc2bda245f","hash":"0be88820832fa6ea30d56905e98b27798805dc92","modified":1561367661903},{"_id":"themes/next/source/lib/three/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1561367661691},{"_id":"themes/next/source/lib/three/.git/objects/1a/f9d30697fd2194a4132a3a6647722be2eb75dc","hash":"0f686b4e26b1e751509ded8a2db697b1d7938004","modified":1561367661685},{"_id":"themes/next/source/lib/three/.git/objects/1b/3d1cd16f3e6ce99ea92c7e9c0b78ee30a8c346","hash":"16569e1c4912fd762f32b13de839d05b9c319e54","modified":1561367661688},{"_id":"themes/next/source/lib/three/.git/objects/1f/0b95a965630f47a7264fe9e9456ed7da36c2aa","hash":"6e98b6d7740bf53074339ce383089320fe1962b9","modified":1561367662178},{"_id":"themes/next/source/lib/three/.git/objects/21/77c1416c8e91ed918b6d3cf7f333d99d659a24","hash":"7330016805a652c2153bfcfbdd4c3c50e5b5a642","modified":1561367662193},{"_id":"themes/next/source/lib/three/.git/objects/29/4f11136ee13277ee96ec3bb56d810f43655298","hash":"a294c3770aa5e7ed386075202f5b88048e1d170d","modified":1561367662190},{"_id":"themes/next/source/lib/three/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1561367661691},{"_id":"themes/next/source/lib/three/.git/objects/3a/4c8581b3aa0d4f9192de158bd4223a90d646b5","hash":"a64efe9f8e2db0ff3cfb7b5e71fedf229ce290fd","modified":1561367661692},{"_id":"themes/next/source/lib/three/.git/objects/3a/cef7449b991ee78bb5b7f2f121996b9ec9bba4","hash":"d9165d5939be17750b9edad5d0fc32029e4a23d6","modified":1561367661907},{"_id":"themes/next/source/lib/three/.git/objects/36/3db3ce197d25b8c64db663aa9000a181511461","hash":"f87bc2ce87e37d0ee60eceef8be89dae4c52e01d","modified":1561367661753},{"_id":"themes/next/source/lib/three/.git/objects/3f/f2616b188ab71e1abf2029d7d55834c5643fc5","hash":"65bbc360ee3cc66fba71b9fb0baa3cff744327b9","modified":1561367661710},{"_id":"themes/next/source/lib/three/.git/objects/3c/6fef4314903036253335d4550346f6b927c721","hash":"1ee4e7d110363dc5e2676b675c7f7030731cf3a5","modified":1561367662185},{"_id":"themes/next/source/lib/three/.git/objects/52/71f18c203d24b27ec7bd977c2d5c61300cea1a","hash":"cdae53ba376df246585a2f44a86d0c7da98bca1f","modified":1561367662182},{"_id":"themes/next/source/lib/three/.git/objects/67/6b9f6189356d0201fd72dd6f98db19628a2ff5","hash":"250795ea0af79524945e66b28f233eb8bd9ee7dd","modified":1561367662181},{"_id":"themes/next/source/lib/three/.git/objects/6b/128053933889f264c239abe0d381523daa8fa5","hash":"23df1e6daed83528bc2f36980678ecc31e17f09e","modified":1561367661753},{"_id":"themes/next/source/lib/three/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1561367661692},{"_id":"themes/next/source/lib/three/.git/objects/70/0960a662785b70b5c72909810794e1c18e9891","hash":"ea3c3330dd0a213a3cebdc42ee57d43fb8f9813c","modified":1561367662179},{"_id":"themes/next/source/lib/three/.git/objects/6e/a4473e91dc2dbc452ff446e7cb04cb2ff16da0","hash":"710066cce498e372a932ff272d3d0eb4345fe3cf","modified":1561367661686},{"_id":"themes/next/source/lib/three/.git/objects/79/ae5f64ea4be7e1a108b2f1fc8afbca7bfa1fba","hash":"4e28517d80599b1a6051b1d3f657654aca6333b9","modified":1561367661693},{"_id":"themes/next/source/lib/three/.git/objects/7d/d7c1e8f79dc9a9a99e290147528d7a47d46830","hash":"c2104c89bcf686b243061b456ddc86d916b84360","modified":1561367661908},{"_id":"themes/next/source/lib/three/.git/objects/7f/6a7ddb8a04644dc980d83c9878b4621acf82f5","hash":"c517caf5d47c9f1eba2ced6800dab03e2e29a130","modified":1561367661689},{"_id":"themes/next/source/lib/three/.git/objects/80/5e5d92b903742c45e359b26a06cf86376301d8","hash":"6d39f5d10ed1e3acaaef5ac5999945b65ab12b88","modified":1561367662178},{"_id":"themes/next/source/lib/three/.git/objects/87/782e1008d1f88a9cb63d59407b1cb9e47b0861","hash":"0af5c5e17b27d8114fddd53d7cae8bb3284ae9af","modified":1561367661687},{"_id":"themes/next/source/lib/three/.git/objects/82/69b6fd29a514f9bd746497b298176228bd4061","hash":"cf527c08b5d88d72939a61446d128eba2fb94be2","modified":1561367662180},{"_id":"themes/next/source/lib/three/.git/objects/89/b7ae569312ae577534d7b58647232fb48bfb08","hash":"a265c0a7e24267bd82d11a48f091d2241edc0080","modified":1561367662191},{"_id":"themes/next/source/lib/three/.git/objects/8a/2159d7a0c70d394071e8dcc79502d5cd1fc5e4","hash":"58ff19b7a9a65c9e562b9e1c7ee0ed3ac005b15d","modified":1561367662188},{"_id":"themes/next/source/lib/three/.git/objects/8e/3ea1a067348d2a9c066fbf201663b462a3ed6c","hash":"f3168176590ac08570ef75b73ecae2b4a455d753","modified":1561367661752},{"_id":"themes/next/source/lib/three/.git/objects/a4/6866ca175f7c27daaf6b39c94d930bc27d4ce5","hash":"fc416f7f3f62c338bda28bb56bfa6f8fb49421ff","modified":1561367662177},{"_id":"themes/next/source/lib/three/.git/objects/a9/27aca23c7f27f5d1ebf2c4baea3aa5d8676143","hash":"dc3e5c853a502fbe7ea3e35c2f7a2bf94318ade4","modified":1561367661685},{"_id":"themes/next/source/lib/three/.git/objects/ae/8fa980e909988af2ebd9423658213d2e7e6bba","hash":"9978e4f223de97e23a047986bf21cbf48663a150","modified":1561367661686},{"_id":"themes/next/source/lib/three/.git/objects/b0/2d36d33210bc68d3e6451c663eb567ebc5721c","hash":"8d3bac2fa021a8f4609a134167edb84fd46254b2","modified":1561367661751},{"_id":"themes/next/source/lib/three/.git/objects/ce/175226253f7f31da632b93ab6560debab1bf6d","hash":"55c41b0948cb31fad3a52ab7ac91ba93e6c22751","modified":1561367661688},{"_id":"themes/next/source/lib/three/.git/objects/d2/a00ca1067b93b81dae8ea7d0c9838e935595e8","hash":"4b1ecd5271cdf94c10c2e413c7378adb22e940bb","modified":1561367662189},{"_id":"themes/next/source/lib/three/.git/objects/d0/32ce3fe05be57b72cc925f86149497229cda13","hash":"59e5036e95b496852ad3b918eac2e4b28a5951f2","modified":1561367662192},{"_id":"themes/next/source/lib/three/.git/objects/d8/8d5765694f92039daac0f944405d4cf61a0d13","hash":"70d2b236fcd955aa4fa95efc2e18c98919003ec6","modified":1561367661690},{"_id":"themes/next/source/lib/three/.git/objects/d9/0026fb76d55bba50ee4a221c887a0f1a8e8102","hash":"ac0ac5756be4b24f2249be101665ff29ed93d1f9","modified":1561367662186},{"_id":"themes/next/source/lib/three/.git/objects/d9/90e2654ec49768cd50d630db99ee00bee2b13c","hash":"6c5cc041391cb5a6b3e0f2f15f30bd62735ac7fa","modified":1561367661906},{"_id":"themes/next/source/lib/three/.git/objects/e0/52c7542703df4969a95779bd4dc58b568bcb5e","hash":"b1ccf1650011f74939f07233834bdff21baf4952","modified":1561367661689},{"_id":"themes/next/source/lib/three/.git/objects/e0/ced7e71c43a729f9653b1c4434b95724fc02ed","hash":"98c61b57d8e5e03cf30d402cfcb840c6e610aaa6","modified":1561367662183},{"_id":"themes/next/source/lib/three/.git/objects/df/932438893faefc6b9f5ba9191913dfeedc2a1c","hash":"ac939ae39ab04abc99c0caaef00849585ff4886d","modified":1561367662191},{"_id":"themes/next/source/lib/three/.git/objects/e5/6e96bd99ebe3f0dc8f02c979703c3666f6dd9e","hash":"b971fcaae8424ea1b507379afdcdff74359a1525","modified":1561367662193},{"_id":"themes/next/source/lib/three/.git/objects/ea/7a1bbd08eb930b5f777ec025493ae0c8cb12d4","hash":"3c428fd65f982afbabbf683163bcc88a4eb4cda0","modified":1561367661687},{"_id":"themes/next/source/lib/three/.git/objects/ec/00e107b97a0b7a9850219894bf4e533c68bf87","hash":"5b7f94788c3c19c8a0f73f1b712d5d79e0236668","modified":1561367661904},{"_id":"themes/next/source/lib/three/.git/objects/f4/5d8f110c3034162a1091dafe4b03d2e56b323e","hash":"963dad8248030a8d7b185f4726e40a65a0583c0e","modified":1561367661905},{"_id":"themes/next/source/lib/three/.git/objects/fa/be1d6949c228188d07df0f4b99b217c7b7f92e","hash":"de53b76740aff0953bcd79853d8addfabfc29f95","modified":1561367661690},{"_id":"themes/next/source/lib/three/.git/objects/fe/47fa8f2d9edef52a8ea859537c9286363ee168","hash":"dfaa57c592a229b220a7241bbd0567ec38f4e578","modified":1561367661751},{"_id":"themes/next/source/lib/three/.git/refs/heads/master","hash":"c4eb74ff2d41c043f28b886ac88aa60782e75c9e","modified":1561367662203},{"_id":"themes/next/source/lib/canvas-nest/.git/logs/refs/heads/master","hash":"30bca8c08fdcf78daf79eff3b19d8c6f0f5c9cf9","modified":1560479045212},{"_id":"themes/next/source/lib/canvas-nest/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1560479045211},{"_id":"themes/next/source/lib/canvas-ribbon/.git/logs/refs/heads/master","hash":"e0ef9c2a38cb425a5797d6598cf858d3366b8c83","modified":1560479235848},{"_id":"themes/next/source/lib/canvas-ribbon/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1560479235847},{"_id":"themes/next/source/lib/three/.git/logs/refs/heads/master","hash":"70393accb1afbbc32f5f75821c92a02224a42854","modified":1561367662204},{"_id":"themes/next/source/lib/three/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1561367662202},{"_id":"themes/next/source/lib/three/.git/objects/76/310b5a7e93e66e7d98aaab2960d6354b2288c5","hash":"84de52193b47c83d01eb8800b063ccd83ad42cf9","modified":1561367662176},{"_id":"themes/next/source/lib/canvas-nest/.git/logs/refs/remotes/origin/HEAD","hash":"30bca8c08fdcf78daf79eff3b19d8c6f0f5c9cf9","modified":1560479045211},{"_id":"themes/next/source/lib/canvas-ribbon/.git/logs/refs/remotes/origin/HEAD","hash":"e0ef9c2a38cb425a5797d6598cf858d3366b8c83","modified":1560479235847},{"_id":"themes/next/source/lib/three/.git/logs/refs/remotes/origin/HEAD","hash":"70393accb1afbbc32f5f75821c92a02224a42854","modified":1561367662202},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1561367662217},{"_id":"public/search.json","hash":"3cd2dbc6c9f85e8c10ea07a77b1f8ece1a2c8b5f","modified":1586933973107},{"_id":"public/leancloud_counter_security_urls.json","hash":"b582bfa11ded7db03635c1d8b8c48d82dd86bc6e","modified":1586933973107},{"_id":"public/about/index.html","hash":"e289512189f6ca67cfdd98bc915e2bfbd4b75d85","modified":1586933973107},{"_id":"public/categories/index.html","hash":"3e7ae64f3b2d6efa63a68b563cbbd8e3ec283844","modified":1586933973107},{"_id":"public/tags/index.html","hash":"32ce231e37346e3a14c4dfd6e23f508f4b11085b","modified":1586933973107},{"_id":"public/categories/index-1.html","hash":"7cdf53188505b86f4673eb6a3497b076363048a3","modified":1586933973107},{"_id":"public/2020/04/08/2020.04.08.mac配置virtualenv/index.html","hash":"df42d6ea3e57b651d93912c633301500270e22a6","modified":1586933973107},{"_id":"public/2020/04/03/2020.04.03.webpack-bundle-analyzer/index.html","hash":"39c482d6302cd595f59a6cee35f0f9e89ef654e1","modified":1586933973107},{"_id":"public/2020/04/01/2020.04.01.alfred_sm.ms/index.html","hash":"6ed418cee4bc31d692f6fc3210b2a4a9ae153fd6","modified":1586933973107},{"_id":"public/2020/03/31/2020.03.31.js-this/index.html","hash":"5b7b2e3805dbff1e3a264ad969ef63e039164668","modified":1586933973107},{"_id":"public/2020/03/20/2020.03.12.v2ray+traffic_mask/index.html","hash":"bf0c040f0674a00f44fac2adaca09239439a0fda","modified":1586933973107},{"_id":"public/2020/03/20/2020.03.20.addHttpsOnDs/index.html","hash":"7dcacdaa5da3722ba1e424d0aadaea1dc7eebe9d","modified":1586933973107},{"_id":"public/2020/03/10/2020.03.10.useSassInWeApp/index.html","hash":"c1fa959dda251672fb7f74d3e8d863d2ea18ceb9","modified":1586933973107},{"_id":"public/2020/03/06/2020.03.06.listenScroll/index.html","hash":"667082016768c732ce6b01ab0b746a20ac6db993","modified":1586933973107},{"_id":"public/2020/02/11/2020.02.11.echart/index.html","hash":"79d754ac4804ec35013a59baf09c6eff194a54f1","modified":1586933973107},{"_id":"public/2020/02/03/2020.02.03.enableHttpOverHttpsWebpage/index.html","hash":"155d0345a0f5ab29bc09b669c54dc885fd2456ec","modified":1586933973107},{"_id":"public/2020/01/21/2020.01.21.wxjssdk/index.html","hash":"e50e12ffcdc1f8e060621721282a30269476343f","modified":1586933973107},{"_id":"public/2020/01/13/2020.01.13.reactAntd/index.html","hash":"ae873f3385e893fc54a6c7f7ca4fa2b48bb48b57","modified":1586933973107},{"_id":"public/2020/01/09/2020.01.09.px2vw/index.html","hash":"a05ee08223283a511dd66c068752847919632bad","modified":1586933973107},{"_id":"public/2020/01/03/2020.01.03.lcdFont/index.html","hash":"acc15fc79714a08b0ce9465296517f62a392a778","modified":1586933973107},{"_id":"public/2019/12/23/2019.12.23.voiceAnalysis/index.html","hash":"2df3bcdf891fe757ad9cc1e4ada31fd20f904740","modified":1586933973107},{"_id":"public/2019/12/13/2019.12.13.mediarecorder/index.html","hash":"7e22d75743ab513ce48b2dc0063df29c6b8228cb","modified":1586933973107},{"_id":"public/2019/11/20/2019.11.20.wx_taro/index.html","hash":"d821cf2843805281496713d6339218667ccb1d68","modified":1586933973107},{"_id":"public/2019/11/20/2019.11.20.arraybuffer/index.html","hash":"31589cdf983fe11e2a8bc6c5f950afffac65c29c","modified":1586933973107},{"_id":"public/2019/11/15/2019.11.15.nodejsAxios/index.html","hash":"ada33e0b8861d6a45648af29ca44446f911b84f1","modified":1586933973107},{"_id":"public/2019/11/14/2019.11.14.dockerMysql/index.html","hash":"c546938efc243abe45048fe5b326aac94f3eeef0","modified":1586933973107},{"_id":"public/2019/11/08/2019.11.08.axios/index.html","hash":"748a07afe2e035f3963ef59b7e3bbb40d1f5dc38","modified":1586933973107},{"_id":"public/2019/11/06/2019.11.06.debounce/index.html","hash":"175c8723db2eb74741b3f93c384ee219a6c026a1","modified":1586933973107},{"_id":"public/2019/09/30/2019.09.30.koaLdap/index.html","hash":"4f55ba326ed132de6602e3c9003bec52114f7ca4","modified":1586933973107},{"_id":"public/2019/09/30/2019.09.30.jwtVerify/index.html","hash":"7da8f237e4b4e16e01c4db730c31f4d15aa291d0","modified":1586933973107},{"_id":"public/2019/09/29/2019.09.29.koaMysql1/index.html","hash":"d9ecc107ebc742e11a92601bc39c735e5a9c285a","modified":1586933973107},{"_id":"public/2019/09/12/2019.09.12.frp/index.html","hash":"7a42d96a71f458b45dff270dc7a28d7823c15cf0","modified":1586933973107},{"_id":"public/2019/09/05/2019.09.05.ipv6/index.html","hash":"06009acb23f344c8d405fbc07658b1a9fa335b0f","modified":1586933973107},{"_id":"public/2019/09/04/2019.09.04.flux/index.html","hash":"7a4bec4b4ef8555ef07587b2d4d2ef5e75b7b4cf","modified":1586933973107},{"_id":"public/2019/08/29/2019.08.29.cname/index.html","hash":"51a357762faab4fa26f2a8a896e8c5cf46728544","modified":1586933973107},{"_id":"public/2019/08/29/2019.08.29.nvm/index.html","hash":"65e57bfa2f3158171faeeedb646e4242895f4b1b","modified":1586933973107},{"_id":"public/2019/08/29/2019.08.29.koa-body/index.html","hash":"93df646e4484099329bdd6396f8cf553b8b51ba2","modified":1586933973107},{"_id":"public/2019/08/27/2019.08.27.nodejs.path/index.html","hash":"008c7720a7b40b3dd65dd9ccab06ea4984bf0aba","modified":1586933973107},{"_id":"public/2019/08/28/2019.08.28.ios12.4jailbrake/index.html","hash":"5459f2ee70d0ab9ce7c0450c5bf98e10331ceb58","modified":1586933973107},{"_id":"public/2019/08/27/2019.08.27.nodejs.ftp/index.html","hash":"42d2854ad2d14c12fcbbd085578a4224990bb183","modified":1586933973107},{"_id":"public/2019/08/26/2019.08.26.elUpload/index.html","hash":"3cf355be34d545561c05817e2db0ff8497c0022d","modified":1586933973107},{"_id":"public/2019/08/14/2019.08.14.npx/index.html","hash":"01ba9fb82f037ff45613b782290e08331fc7508f","modified":1586933973107},{"_id":"public/2019/08/13/2019.08.13.es6.class/index.html","hash":"2f68ef0ca4d172159fc4d2ec3c2161ff6f1ffc82","modified":1586933973107},{"_id":"public/2019/07/03/2019.07.03.mac.chmod/index.html","hash":"015f03310ae11ba7de3a6fee2b5e5ce9bef907ee","modified":1586933973107},{"_id":"public/2019/07/01/2019.07.01.linux-screen/index.html","hash":"d929c3c3a630129ec0aac661300ace8dad4029fd","modified":1586933973107},{"_id":"public/2019/06/28/2019.06.28.gcp/index.html","hash":"8234173dbc41f93b667d5c1503630b0713809abf","modified":1586933973107},{"_id":"public/2019/06/13/2019.06.13.nginx/index.html","hash":"437b87505436a32670b519145848314bc61f7a7b","modified":1586933973107},{"_id":"public/2019/05/29/2019.05.29.ycy/index.html","hash":"050ad09356096830972586fd105292855eede07b","modified":1586933973107},{"_id":"public/2019/05/29/2019.05.29.vscodesync/index.html","hash":"344035ac9a03af36c30591b6990fefc78da8e4e9","modified":1586933973107},{"_id":"public/2019/05/28/2019.05.28.asf/index.html","hash":"b2b8d9173c7568325cbaf7e13717e0e472da3699","modified":1586933973107},{"_id":"public/2019/05/25/2019.05.25.colorfulMacTerminal/index.html","hash":"4300f3119b952a873652b5ef1f0243035aa7f876","modified":1586933973107},{"_id":"public/2019/05/24/2019.05.24.sort/index.html","hash":"e3a5121ca6f8d3809296ad8727c1d21ed6fb8617","modified":1586933973107},{"_id":"public/2019/05/14/2019.05.14.cn2/index.html","hash":"e2c7151175461ae213abf04a6c92f77b6d212801","modified":1586933973107},{"_id":"public/2019/05/13/2019.05.13.encrypt/index.html","hash":"0c03990e97d8a8e6e470ccce0ba0be1946812c97","modified":1586933973107},{"_id":"public/2019/02/01/2019.02.01.NAS/index.html","hash":"3efcf49d23c1bd4cabbac702797e65e601c6ce57","modified":1586933973107},{"_id":"public/2019/01/09/2018.11.16SSR/index.html","hash":"1bc6244d508c2fd578bc4b222d88ba5022761cdf","modified":1586933973107},{"_id":"public/2019/01/09/2019.01.09.linuxCommand/index.html","hash":"76a267f0b1f1b9f2ba43455c19a153d3e83f392d","modified":1586933973107},{"_id":"public/2019/01/09/2019.01.09.webpack-4/index.html","hash":"a7f3cde8b1a40c9930b211356668de3b27ab5755","modified":1586933973107},{"_id":"public/2018/12/27/2018.12.27.es6-import/index.html","hash":"2dc6384f2bfb208645cea39af1e8b06771d4a724","modified":1586933973107},{"_id":"public/2018/12/24/2018.12.24.es6-promise/index.html","hash":"36d7391ca424a337c115fe202abbca823756264c","modified":1586933973107},{"_id":"public/2018/12/19/2018.12.19.impress.js/index.html","hash":"55a6b7713502310184784c0b4c8cf7e5cdaed1e7","modified":1586933973107},{"_id":"public/2018/12/12/2018.12.12.broswercheck/index.html","hash":"6debc723f2e7557afedad8faa9184d5cd9e10b27","modified":1586933973107},{"_id":"public/2018/12/09/2018.12.09.vertical/index.html","hash":"0cd1723fe982cc51723440bd672e7e30a9c951fa","modified":1586933973107},{"_id":"public/2018/12/07/2018.12.07.pseudo/index.html","hash":"65b9437067b2deb66ed9f95bc868137fb95906ba","modified":1586933973107},{"_id":"public/2018/11/30/2018.11.30.ScrollWatch/index.html","hash":"2268c6ab666a1b1700114744afd77cc495a2736a","modified":1586933973107},{"_id":"public/2018/11/29/2018.11.29portal/index.html","hash":"d452c1d3f2c03425991c09c36928f40b0c077457","modified":1586933973107},{"_id":"public/2018/11/23/2018.11.23.HTTP/index.html","hash":"be431e1d171121ca6560efbc0b0dc5c84d0b283d","modified":1586933973107},{"_id":"public/2018/11/23/docker/index.html","hash":"7d5cc9ee3141e6b1b54fdf27683739dcaea41405","modified":1586933973107},{"_id":"public/2018/11/21/es6/index.html","hash":"dc12a66332b41cd95d80510179d846a9f4429cd4","modified":1586933973107},{"_id":"public/2018/11/21/2018.11.21.deployHexo/index.html","hash":"f9a7f6d36f6082f7fb86c65d3045c891ba0415fa","modified":1586933973107},{"_id":"public/2018/11/21/2018.11.21plg/index.html","hash":"6f007852bab9c2caf944e7db85c0deeb720731ba","modified":1586933973107},{"_id":"public/2018/11/20/2018.11.20semver/index.html","hash":"485745d04ac866cde02b1c14a2de536bbe198e64","modified":1586933973107},{"_id":"public/2018/11/19/2018.11.19CSS-selector/index.html","hash":"5f25f80867d840bbe249f3467fe0b65bad2945aa","modified":1586933973107},{"_id":"public/2017/07/01/2017.07.01/index.html","hash":"607537826f8e7728e71dbe007b5afe4f2a8e48ea","modified":1586933973107},{"_id":"public/2017/05/25/2017.05.25.box/index.html","hash":"c78089c77ca1bd35c57e64cd09f38833e92b567c","modified":1586933973107},{"_id":"public/2017/05/24/2017.05.2huayu/index.html","hash":"b23207af9afee7f7058f39def3b58ccedeb2e87d","modified":1586933973107},{"_id":"public/2017/05/24/2017.05.24speedup/index.html","hash":"9f283705d90fd95e846268ab0a928feb736f0ca2","modified":1586933973107},{"_id":"public/2017/05/23/2017.05.23/index.html","hash":"364f2c64aed646e51ebcb1d80de47afe36ef2066","modified":1586933973107},{"_id":"public/2017/04/24/2017.04.24.html&xml&xhtml/index.html","hash":"e575f738b013782a5a438716f89f35fd2ab8a68d","modified":1586933973107},{"_id":"public/2017/04/22/2017.04.21.git/index.html","hash":"c455babee59fd48d395c3d1120cf86a066293067","modified":1586933973107},{"_id":"public/2017/04/07/2017.04.06mysql/index.html","hash":"8661f46a7a5b32de7503b983fb14287572681773","modified":1586933973107},{"_id":"public/2017/04/05/2017.04.05cookie&session/index.html","hash":"25f134039a85e9704ad99b22e591b5feaf24cef5","modified":1586933973107},{"_id":"public/2017/04/03/2017-04-03httpcode/index.html","hash":"a92bd7a2599b3a1b7418fef3ba1621a749dc1da7","modified":1586933973107},{"_id":"public/2017/04/02/2017.04.02bootstrap/index.html","hash":"13610b8ff3938a9bd88500f4f8d64031f067ca0e","modified":1586933973107},{"_id":"public/2017/03/27/2017.03.27workflow/index.html","hash":"a42007b614661559be0ed0ba9207de67571cfef1","modified":1586933973107},{"_id":"public/2017/03/27/2017.03.26-bibao/index.html","hash":"f94d3000acb8d9f8ccc70109f80d03c5ca35666d","modified":1586933973107},{"_id":"public/2017/03/27/2017.03.26/index.html","hash":"3933a15caa7f5cc323a8dcfa99d2fff117c498ba","modified":1586933973107},{"_id":"public/archives/index.html","hash":"3f767f24ef6f80ed9dd0b53e30e316dc3047d6b3","modified":1586933973107},{"_id":"public/archives/page/2/index.html","hash":"dfeb4288105b1e64b3e81ea5b1cb82f4e87d2273","modified":1586933973107},{"_id":"public/archives/page/3/index.html","hash":"f0aa494992ab53bdcaf1f575523f6129d86a37d0","modified":1586933973107},{"_id":"public/archives/page/4/index.html","hash":"57e29dfb20519f3fdb603131c56dbd0a68faa1ba","modified":1586933973107},{"_id":"public/archives/page/5/index.html","hash":"9b47252d0f6da6ae50e7eec11ce016f68ca89a03","modified":1586933973107},{"_id":"public/archives/page/6/index.html","hash":"caeade62d389b0c15bc7f786c21ac7c7b7799f83","modified":1586933973107},{"_id":"public/archives/page/7/index.html","hash":"54ced68fb8c0bffb8a54e035dc9aac46812c5d81","modified":1586933973107},{"_id":"public/archives/page/8/index.html","hash":"30d3b325e0c3c92f29135818e2564bdc4e94036c","modified":1586933973107},{"_id":"public/archives/page/9/index.html","hash":"642930468e3d116529981979b3b2aa16b6f19e08","modified":1586933973107},{"_id":"public/archives/2017/index.html","hash":"db21e97742935326a0bc4a8a9dbc5d486c3bdda8","modified":1586933973107},{"_id":"public/archives/2017/page/2/index.html","hash":"3570e7fc063b02e7e81fe2b7e13117af0edc9456","modified":1586933973107},{"_id":"public/archives/2017/03/index.html","hash":"bf92c6147dd7070fd30feace74d1d4bcc9a3e7d6","modified":1586933973107},{"_id":"public/archives/2017/04/index.html","hash":"50fad005feffbc0ce6ab59135c0b30230fec8a2b","modified":1586933973107},{"_id":"public/archives/2017/05/index.html","hash":"1b56da80148c6fa06031b9a3e66fac546da81f5a","modified":1586933973107},{"_id":"public/archives/2017/07/index.html","hash":"156c0e80b44ae9b5229b8745d8369d529e801376","modified":1586933973107},{"_id":"public/archives/2018/index.html","hash":"6bbea33a078126f9c123f955f83f9d62093506eb","modified":1586933973107},{"_id":"public/archives/2018/page/2/index.html","hash":"3e2734e7cb422d996dceb6e6a9c7172ee312636f","modified":1586933973107},{"_id":"public/archives/2018/11/index.html","hash":"1ed6cdcf552a7e90131abd71a54329a782dcb511","modified":1586933973107},{"_id":"public/archives/2018/12/index.html","hash":"96f92f3b18d25bb0a058cf85c4184ba830a3a574","modified":1586933973107},{"_id":"public/archives/2019/index.html","hash":"337292a616fefba2e02a2ee1ed9c7846e609032b","modified":1586933973107},{"_id":"public/archives/2019/page/2/index.html","hash":"cf8cfb0c2b78422f3073ab2f49eb8a045566e89c","modified":1586933973107},{"_id":"public/archives/2019/page/3/index.html","hash":"3055e424649f1e8ce1691d326529c8b35390a33b","modified":1586933973107},{"_id":"public/archives/2019/page/4/index.html","hash":"31a34350d0f58e0036582150b125bad2b6e9e6c1","modified":1586933973107},{"_id":"public/archives/2019/01/index.html","hash":"23f54e1aa21e5af175149a8c51d5f4e5e7dcfad6","modified":1586933973107},{"_id":"public/archives/2019/02/index.html","hash":"5c27f6a743dc477df58fd01ac19120253467c830","modified":1586933973107},{"_id":"public/archives/2019/05/index.html","hash":"18bc9727f4f1996d6b25839add313280ecca33ea","modified":1586933973107},{"_id":"public/archives/2019/06/index.html","hash":"72f788b3c33c4c660c88c13cb56de7965aa6095e","modified":1586933973107},{"_id":"public/archives/2019/07/index.html","hash":"dfcb36abbf2ca526fb6ea10d302949f44edea2d2","modified":1586933973107},{"_id":"public/archives/2019/08/index.html","hash":"6dc658a411f05507454e8bfed7b86557e80894f4","modified":1586933973107},{"_id":"public/archives/2019/09/index.html","hash":"29fb55203515ae54c66a5b7ef1dec9557a32d019","modified":1586933973107},{"_id":"public/archives/2019/11/index.html","hash":"7d82b950cd224ece144da5b69a59f17cc575d24d","modified":1586933973107},{"_id":"public/archives/2019/12/index.html","hash":"9ec0b98a16981742840fffb9a38d80b75b282010","modified":1586933973107},{"_id":"public/archives/2020/index.html","hash":"7876e5ba048ca5af13adc9e9f952c988fbfe5fc4","modified":1586933973107},{"_id":"public/archives/2020/page/2/index.html","hash":"6a305e4fc2c3ef97d62888670f9ee253dfb776ac","modified":1586933973107},{"_id":"public/archives/2020/01/index.html","hash":"2a0647768da0dfd45e9c7272179d6a657b1376f7","modified":1586933973107},{"_id":"public/archives/2020/02/index.html","hash":"8a85683ec61d41838d8244331fe7cec062e9d2cc","modified":1586933973107},{"_id":"public/archives/2020/03/index.html","hash":"8ecef997a0b88b007b1bb6abdf006074326ad20d","modified":1586933973107},{"_id":"public/archives/2020/04/index.html","hash":"6e8bcaa946b1ad1a5706c02b456280ac68146f5b","modified":1586933973107},{"_id":"public/categories/知识/index.html","hash":"fa5d771b0aed18c55537c65dc1526a64ea2d334e","modified":1586933973107},{"_id":"public/categories/知识/page/2/index.html","hash":"db787995a407516ca060b467f7a31255d137fda1","modified":1586933973107},{"_id":"public/categories/知识/page/3/index.html","hash":"ed9afcaac897518ba3f183a34a11f7110e304592","modified":1586933973107},{"_id":"public/categories/教程/index.html","hash":"dd55eb3b12cc0c2c8ca953e439cb50df96420669","modified":1586933973107},{"_id":"public/categories/软件/index.html","hash":"a782bb79c327f74a54c94e1002cee659125997df","modified":1586933973107},{"_id":"public/categories/随笔/index.html","hash":"da6caf7e07ca6669a0b37681049d864863493d3f","modified":1586933973107},{"_id":"public/categories/随笔/page/2/index.html","hash":"baa504d2229c1e1eb221a0840a13a1f6e854424d","modified":1586933973107},{"_id":"public/categories/随笔/page/3/index.html","hash":"113066a5fba1e5e6e860cc4f6642266995a906b6","modified":1586933973107},{"_id":"public/categories/随笔/page/4/index.html","hash":"bda4bd0bd572766515955d74db37d91a0238bf7b","modified":1586933973107},{"_id":"public/categories/插件/index.html","hash":"4a535228a569e147c97a52ffe608af9b0714c048","modified":1586933973107},{"_id":"public/categories/技术/index.html","hash":"dc71279916150eb7bd4d17823374d492a8471b8e","modified":1586933973107},{"_id":"public/categories/技术/page/2/index.html","hash":"a4ade563763845d0161d341f84565630553703cf","modified":1586933973107},{"_id":"public/categories/小说/index.html","hash":"25b3ec8d387ea9e37125a42b312cc2118b0607ea","modified":1586933973107},{"_id":"public/index.html","hash":"e56cb136bdad4378dc755c59d5701b537d261ad0","modified":1586933973107},{"_id":"public/page/2/index.html","hash":"5b18e6be6592f717051830c0ab60b32fedcfbd5a","modified":1586933973107},{"_id":"public/page/3/index.html","hash":"4317ebbf547cd7cdf9924cab1141dc713ab8b866","modified":1586933973107},{"_id":"public/page/4/index.html","hash":"b8ec571ac41930d7684f17426c3cb0a1dcecc54b","modified":1586933973107},{"_id":"public/page/5/index.html","hash":"5fc95ffdd6994ee481146811ad89c28355a4e112","modified":1586933973107},{"_id":"public/page/6/index.html","hash":"70201a9bf32f5cfd909b420bc5d9aa3d3fb71aeb","modified":1586933973107},{"_id":"public/page/7/index.html","hash":"01336ac5d23287860edeb090a52e3bc61218ab21","modified":1586933973107},{"_id":"public/page/8/index.html","hash":"7c56c212024055b27f07fc2e857c531fb17b516d","modified":1586933973107},{"_id":"public/page/9/index.html","hash":"d0651780286a68452ede5eb9d9a9df894a75a749","modified":1586933973107},{"_id":"public/tags/http/index.html","hash":"597562246365db466077ffc2756f4575a80a7ffe","modified":1586933973107},{"_id":"public/tags/javascript/index.html","hash":"b8a70ac4e98127d53ff0b488d906034c9e4510d8","modified":1586933973107},{"_id":"public/tags/hexo/index.html","hash":"1b20d1d173f3f5b01dbd9e77798ad6849817d551","modified":1586933973107},{"_id":"public/tags/git/index.html","hash":"953f056c5507da49734544fbd3ca311dba2f74f5","modified":1586933973107},{"_id":"public/tags/workflow/index.html","hash":"6ab82f41e788fc9df77ae4fc24d6c6596303dd96","modified":1586933973107},{"_id":"public/tags/bootstrap/index.html","hash":"ae4326b2783a8c686abf18fe1e409626ac93ba7f","modified":1586933973107},{"_id":"public/tags/node-js/index.html","hash":"c7b23a09c0bc4120eab49a38b1e9412d722b731e","modified":1586933973107},{"_id":"public/tags/express/index.html","hash":"abe33cc1618182fea8591325edd01e0a38967444","modified":1586933973107},{"_id":"public/tags/mysql/index.html","hash":"97a16e14c9647689835e2f5f6931c5fc63c38764","modified":1586933973107},{"_id":"public/tags/HTML/index.html","hash":"915e346551fb226f04f7f2128d17c0294db9202a","modified":1586933973107},{"_id":"public/tags/XML/index.html","hash":"aef50de206cf57ef8bdc21a303b9c352064112f4","modified":1586933973107},{"_id":"public/tags/XHTML/index.html","hash":"8594558e3ba7a29055724263b8156930a4a3dc6e","modified":1586933973107},{"_id":"public/tags/dns/index.html","hash":"a6cde013d77991d6fc85ac63e7aee48cbbb66d32","modified":1586933973107},{"_id":"public/tags/tcp-ip/index.html","hash":"842d6dbf352ef1d6a5f475c54bee392acb680084","modified":1586933973107},{"_id":"public/tags/css/index.html","hash":"f07e7e61108a21909c756da99608c06b6f7242e8","modified":1586933973107},{"_id":"public/tags/box/index.html","hash":"0b5527176bf3a66e3959f4789c83ad21daeddb11","modified":1586933973107},{"_id":"public/tags/SSR/index.html","hash":"e2e28a298f42167419271968fd50472e6468bc55","modified":1586933973107},{"_id":"public/tags/Semver/index.html","hash":"35f3be9571cab9626b2980297cb7e288f1d362bc","modified":1586933973107},{"_id":"public/tags/CSS/index.html","hash":"40570760899882490c450e9d1b52f97e65aaf613","modified":1586933973107},{"_id":"public/tags/Plugin/index.html","hash":"5118f18d3dd7ae6fae0387dc33d120c2cd302e01","modified":1586933973107},{"_id":"public/tags/HTTP/index.html","hash":"2883bcf58515a18820d65fd5cff575f54cdf464e","modified":1586933973107},{"_id":"public/tags/portal/index.html","hash":"d4bc68cfe801f0c37ee9f07abc6fe4568c3b2180","modified":1586933973107},{"_id":"public/tags/ScrollWatch/index.html","hash":"3ee15673fa186e80491e479955d98e4dd9bb48c1","modified":1586933973107},{"_id":"public/tags/浏览器/index.html","hash":"aa8c98b077ee833e0856168155798865e7e105de","modified":1586933973107},{"_id":"public/tags/JS/index.html","hash":"60effa5f7882acfc90b5a28b115027188493bbf7","modified":1586933973107},{"_id":"public/tags/es6/index.html","hash":"dea7f73f2eca7f044cf3c201c27fcd2e8fbb0ff6","modified":1586933973107},{"_id":"public/tags/Linux/index.html","hash":"6202b1daee7aaaac6fe0971da5d500f4176454ec","modified":1586933973107},{"_id":"public/tags/NAS/index.html","hash":"841e5b5a04a5a1f2577e46300ea4b4ce0774fd0f","modified":1586933973107},{"_id":"public/tags/webpack/index.html","hash":"66f74c34c278824a41f32dad2c5eb490a787c57d","modified":1586933973107},{"_id":"public/tags/加密/index.html","hash":"c5b0f030c8f913d51411b0984cebae975d1736bb","modified":1586933973107},{"_id":"public/tags/翻墙/index.html","hash":"27efec1c5e0957d5d28a0d64c537933e97124035","modified":1586933973107},{"_id":"public/tags/JavaScript/index.html","hash":"0998d8710462996df3f74cb6c5cbd23454ff2e4b","modified":1586933973107},{"_id":"public/tags/mac/index.html","hash":"1e132beaba44707bf9d367d00be641c0c27843c7","modified":1586933973107},{"_id":"public/tags/vscode/index.html","hash":"4b9d999d951d0c556a526c399bc46c78c3f10e96","modified":1586933973107},{"_id":"public/tags/steam/index.html","hash":"4c67400948a7244b459bce815b21d9d4ba288d53","modified":1586933973107},{"_id":"public/tags/服务器/index.html","hash":"fb86aca84b7b4fe9cc01065ab0174fc0653b20d4","modified":1586933973107},{"_id":"public/tags/linux/index.html","hash":"d6148b152a7e6eeb3b75324be6c7fa22212d4385","modified":1586933973107},{"_id":"public/tags/vue/index.html","hash":"645e987fe6c2e54a3a1b783b5e1892af6c89d147","modified":1586933973107},{"_id":"public/tags/element/index.html","hash":"8fcda0bc1e00f3c1104c7ef52641e6e93a49d1b2","modified":1586933973107},{"_id":"public/tags/nodejs/index.html","hash":"310692e430b10f94ce1eda16d12891c0f04a472f","modified":1586933973107},{"_id":"public/tags/koa/index.html","hash":"a0d18e895da3f13668661caf42bf7c88391be398","modified":1586933973107},{"_id":"public/tags/npm/index.html","hash":"f3a4d15b87ee9658724d647c0e83a01ebaa9bdab","modified":1586933973107},{"_id":"public/tags/网络/index.html","hash":"0f507d188be0000ef20e4067401216d6c5aa993e","modified":1586933973107},{"_id":"public/tags/nas/index.html","hash":"91c59b7a257cb3ec0851963a12aac418d6e56de1","modified":1586933973107},{"_id":"public/tags/frp/index.html","hash":"0742120f0c588ca96a92bb929cc3397afa8bdcc7","modified":1586933973107},{"_id":"public/tags/jwt/index.html","hash":"8d9bc48a49879c20e504d00dc2634e406d3a770d","modified":1586933973107},{"_id":"public/tags/ldap/index.html","hash":"550222d9f933088441f4b04cf92cd9fe6594333a","modified":1586933973107},{"_id":"public/tags/axios/index.html","hash":"e6137aa8997d273298ade17fe5407da04d09b373","modified":1586933973107},{"_id":"public/tags/docker/index.html","hash":"e6e0d01052e3055d2b8902d14defe76e47feef25","modified":1586933973107},{"_id":"public/tags/taro/index.html","hash":"64722fb5c7df13b484a94cd78bcff85b3966a28c","modified":1586933973107},{"_id":"public/tags/微信/index.html","hash":"8761ee713588b5d51482551d351acc0aca0da35e","modified":1586933973107},{"_id":"public/tags/font/index.html","hash":"e29a45746509acf6b017bfbb1c766abb55954877","modified":1586933973107},{"_id":"public/tags/chrome/index.html","hash":"8c1017d35cadd0a0ecf48b35287afba1f1a894ac","modified":1586933973107},{"_id":"public/tags/wechat/index.html","hash":"0cdb0c02c6ff082fc535b11ed984eb47de8b3c1d","modified":1586933973107},{"_id":"public/tags/echarts/index.html","hash":"0dc5f8638630404d1fc8bd425452688cc9640b35","modified":1586933973107},{"_id":"public/tags/小程序/index.html","hash":"81453f4e3e68aa3f00d515e925ddf49688d82380","modified":1586933973107},{"_id":"public/tags/scss/index.html","hash":"2fc15563acf64d4fb9dbaf54ff3a1c639db0490f","modified":1586933973107},{"_id":"public/tags/less/index.html","hash":"eaf4956550631f84c2f4cf5115f5b0f2abf9d66a","modified":1586933973107},{"_id":"public/tags/v2ray/index.html","hash":"9ff1b4ea05c04f6e7f6c28e9ad0b1d47dbf89e52","modified":1586933973107},{"_id":"public/tags/nginx/index.html","hash":"08fa766be02592fe7882b59b8529a2ebebe56bd3","modified":1586933973107},{"_id":"public/tags/https/index.html","hash":"64ae30b2f73a3c2e06ef86ffda37040f9c1578ad","modified":1586933973107},{"_id":"public/tags/群辉/index.html","hash":"28790b00676596f7663d98814935434efa516bc8","modified":1586933973107},{"_id":"public/tags/alfred/index.html","hash":"ed3463293b901a1473c4673c6a1494df4148c17e","modified":1586933973107},{"_id":"public/tags/this/index.html","hash":"41f640b6b284b3d7737b4f4f5621f8411e36cf33","modified":1586933973107},{"_id":"public/tags/python/index.html","hash":"ed5bfbc249427cbfaf7a6bc7e6a3a3a584d617d5","modified":1586933973107},{"_id":"public/tags/ES6/index.html","hash":"3b758d5014b4052c1535ab2cbd6184f32dc7b2e5","modified":1586933973107},{"_id":"public/Staticfile","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1586933973107},{"_id":"public/CNAME","hash":"89c2f6cfa8f880f1b566394b42199163511f1d4e","modified":1586933973107},{"_id":"public/leancloud.memo","hash":"fbcf9923150ca1d90ddc0788f5f32bbeab38fe2f","modified":1586933973107},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1586933973107},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1586933973107},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1586933973107},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1586933973107},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1586933973107},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1586933973107},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1586933973107},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1586933973107},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1586933973107},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1586933973107},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1586933973107},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1586933973107},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1586933973107},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1586933973107},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1586933973107},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1586933973107},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1586933973107},{"_id":"public/images/searchicon.png","hash":"025d64ba0160a3a2257dd2b3032b5f7c9dd9b82b","modified":1586933973107},{"_id":"public/lib/canvas-nest/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1586933973107},{"_id":"public/lib/canvas-ribbon/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1586933973107},{"_id":"public/lib/three/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1586933973107},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1586933973107},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1586933973107},{"_id":"public/lib/three/yarn.lock","hash":"9c71c0a7c033fc709c1e683157b1f12037024694","modified":1586933973107},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1586933973107},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1586933973107},{"_id":"public/js/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1586933973107},{"_id":"public/js/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1586933973107},{"_id":"public/js/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1586933973107},{"_id":"public/js/js.cookie.js","hash":"e0afce539f1fb81d59e3c6f0a68d736e2fb45d93","modified":1586933973107},{"_id":"public/js/motion.js","hash":"a16bc0b701646bf6653484675f4d5dc0f892d184","modified":1586933973107},{"_id":"public/js/next-boot.js","hash":"e0615efab5f81ba0fd39c0527eac31144deac7ce","modified":1586933973107},{"_id":"public/js/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1586933973107},{"_id":"public/js/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1586933973107},{"_id":"public/js/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1586933973107},{"_id":"public/js/schemes/pisces.js","hash":"9eb63cba0327d3d11b6cbfcbe40b88e97a8378a3","modified":1586933973107},{"_id":"public/js/utils.js","hash":"81913c5f75d0949443833cf4269ad63bd7f9be6f","modified":1586933973107},{"_id":"public/js/schemes/muse.js","hash":"e9bfa6b343b67625f58757efce46ccdaac8f308c","modified":1586933973107},{"_id":"public/lib/canvas-nest/canvas-nest-nomobile.min.js","hash":"956eada198babd00f028e8908767cb158926c3f3","modified":1586933973107},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1586933973107},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1586933973107},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1586933973107},{"_id":"public/lib/three/gulpfile.js","hash":"edd1868be72fde796b0b1f3a7a0316b3c896962a","modified":1586933973107},{"_id":"public/lib/three/package.json","hash":"d64e9f4ce441b50e48aa0993e190481223665989","modified":1586933973107},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1586933973107},{"_id":"public/lib/three/src/canvas_lines.js","hash":"650310ff6783671f8ceccf01f840b20d9c87b491","modified":1586933973107},{"_id":"public/lib/three/src/canvas_sphere.js","hash":"7614790c67d3e79e3390fe688f6b01afad7e3bb1","modified":1586933973107},{"_id":"public/lib/three/src/three-waves.js","hash":"e98e442f14920e9fb8691846dca3a2225d403048","modified":1586933973107},{"_id":"public/lib/canvas-nest/README.html","hash":"42a66f539a2e792ba8cf61dfdf589e4879abfecb","modified":1586933973107},{"_id":"public/lib/canvas-ribbon/README.html","hash":"2beaf642daa8535a91f0e6139bc65ef38a82a053","modified":1586933973107},{"_id":"public/lib/three/README.html","hash":"bc5820c15153ca5f138261b600410ec928160381","modified":1586933973107},{"_id":"public/css/main.css","hash":"aa0eeb012cbb4a95e58d57a3a576b761e5ad3321","modified":1586933973107},{"_id":"public/lib/three/canvas_lines.min.js","hash":"97f0e67570574dc8597c5819970508d4e7f7af25","modified":1586933973107},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"333fed4c256c7081e07c7844c097b7970b45b248","modified":1586933973107},{"_id":"public/lib/three/three-waves.min.js","hash":"704e860183acbaaf8de1be65fe5c958e8105f4bf","modified":1586933973107},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1586933973107},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1586933973107},{"_id":"public/lib/jquery/index.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1586933973107},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1586933973107},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1586933973107},{"_id":"public/lib/three/lib/CanvasRenderer.js","hash":"cf8e1ce6e884023ad0d692cf30f399862407fb40","modified":1586933973107},{"_id":"public/lib/three/lib/Projector.js","hash":"1ad16e96cea2a8a9155bb429c83ef9bdd341ce99","modified":1586933973107},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1586933973107},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1586933973107},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1586933973107}],"Category":[{"name":"知识","_id":"ck90ziiud002brh9zgjjieveu"},{"name":"教程","_id":"ck90ziiuo002hrh9z83y93sz8"},{"name":"软件","_id":"ck90ziiuo002jrh9z77lq6th6"},{"name":"随笔","_id":"ck90ziiuq002prh9zd52b0u8r"},{"name":"插件","_id":"ck90ziiux003arh9zf7na8z19"},{"name":"技术","_id":"ck90ziivd004frh9z7dln94f3"},{"name":"小说","_id":"ck90ziix4007mrh9z5lh8bzi9"}],"Data":[],"Page":[{"title":"关于我","date":"2017-03-27T09:29:55.000Z","_content":"## 韩宏斌    \n#### 立志成为前端engineer的前端learner\n### WeChat\t\t\t    \nhanhb1994924  \n### E-mail\nhanhb1994924@qq.com\n\n","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2017-03-27 17:29:55\n---\n## 韩宏斌    \n#### 立志成为前端engineer的前端learner\n### WeChat\t\t\t    \nhanhb1994924  \n### E-mail\nhanhb1994924@qq.com\n\n","updated":"2018-11-16T08:50:06.456Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck90ziipm0000rh9z655mbbh2","content":"<h2 id=\"韩宏斌\"><a href=\"#韩宏斌\" class=\"headerlink\" title=\"韩宏斌\"></a>韩宏斌</h2><h4 id=\"立志成为前端engineer的前端learner\"><a href=\"#立志成为前端engineer的前端learner\" class=\"headerlink\" title=\"立志成为前端engineer的前端learner\"></a>立志成为前端engineer的前端learner</h4><h3 id=\"WeChat\"><a href=\"#WeChat\" class=\"headerlink\" title=\"WeChat\"></a>WeChat</h3><p>hanhb1994924  </p>\n<h3 id=\"E-mail\"><a href=\"#E-mail\" class=\"headerlink\" title=\"E-mail\"></a>E-mail</h3><p>hanhb1994924@qq.com</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"韩宏斌\"><a href=\"#韩宏斌\" class=\"headerlink\" title=\"韩宏斌\"></a>韩宏斌</h2><h4 id=\"立志成为前端engineer的前端learner\"><a href=\"#立志成为前端engineer的前端learner\" class=\"headerlink\" title=\"立志成为前端engineer的前端learner\"></a>立志成为前端engineer的前端learner</h4><h3 id=\"WeChat\"><a href=\"#WeChat\" class=\"headerlink\" title=\"WeChat\"></a>WeChat</h3><p>hanhb1994924  </p>\n<h3 id=\"E-mail\"><a href=\"#E-mail\" class=\"headerlink\" title=\"E-mail\"></a>E-mail</h3><p>hanhb1994924@qq.com</p>\n"},{"title":"categories","date":"2019-06-14T02:12:49.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-06-14 10:12:49\ntype: \"categories\"\n---\n","updated":"2019-06-14T02:13:30.344Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ck90ziipr0002rh9z8h6d0o5d","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2019-06-14T02:13:39.000Z","_content":"","source":"categories/index-1.md","raw":"---\ntitle: categories\ndate: 2019-06-14 10:13:39\n---\n","updated":"2019-06-14T02:13:39.955Z","path":"categories/index-1.html","comments":1,"layout":"page","_id":"ck90ziips0004rh9z1l2c8263","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2019-06-14T02:05:42.457Z","layout":"tags","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate:\nlayout: tags\ntype: tags\n---\n","updated":"2019-06-14T02:05:42.457Z","path":"tags/index.html","comments":1,"_id":"ck90ziiul002drh9z91155trm","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"HTTP状态码总结","_content":"## http状态码\n\nhttp状态码是表示服务器对请求的响应状态，主要分为以下几个部分\n\n* 1**：这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束\n\n* 2**：表示请求成功，\n\n* 3**：表示重定向\n\n* 4**：表示客户端错误\n\n* 5**：表示服务器端错误\n  \n## 具体内容  \n\n100（continue），客户端应当继续发送请求。这个临时响应是用来通知客户端它的部分请求已经被服务器接收\n\n200（OK），表示请求成功，请求所希望的响应头或数据体将随此响应返回。\n\n202（Accepted），服务器已接受请求，但尚未处理。\n\n204（No-Content），服务器成功处理了请求，但不需要返回任何实体内容\n\n205（Reset-Content），服务器成功处理了请求，且没有返回任何内容。但是与204响应不同，返回此状态码的响应要求请求者重置文档视图。该响应主要是被用于接受用户输入后，立即重置表单，以便用户能够轻松地开始另一次输入。\n\n206（Partial-Content），服务器已经成功处理了部分 GET 请求。\n\n301（Moved-Permanently），永久性重定向\n\n302（Moved-Temporarily），暂时性重定向\n\n304（Not-Modified），浏览器端缓存的资源依然有效\n\n400（Bad-Reques），请求有误，当前请求无法被服务器理解。\n\n401（Unauthorized），当前请求需要用户验证。\n\n403（Forbidden），服务器已经理解请求，但是拒绝执行它。\n\n404（Not-Found），请求的资源没有被找到\n\n500（Interval Server Error），服务器内部错误\n\n502（Bad GateWay），网关出错\n\n503（Service Unavailable），由于临时的服务器维护或者过载，服务器当前无法处理请求。\n\n504（Gateway Timeout），作为网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器（URI标识出的服务器，例如HTTP、FTP、LDAP）或者辅助服务器（例如DNS）收到响应。","source":"_posts/2017-04-03httpcode.md","raw":"---\ntitle: HTTP状态码总结 \ncategories: 知识\ntags: [http]\n---\n## http状态码\n\nhttp状态码是表示服务器对请求的响应状态，主要分为以下几个部分\n\n* 1**：这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束\n\n* 2**：表示请求成功，\n\n* 3**：表示重定向\n\n* 4**：表示客户端错误\n\n* 5**：表示服务器端错误\n  \n## 具体内容  \n\n100（continue），客户端应当继续发送请求。这个临时响应是用来通知客户端它的部分请求已经被服务器接收\n\n200（OK），表示请求成功，请求所希望的响应头或数据体将随此响应返回。\n\n202（Accepted），服务器已接受请求，但尚未处理。\n\n204（No-Content），服务器成功处理了请求，但不需要返回任何实体内容\n\n205（Reset-Content），服务器成功处理了请求，且没有返回任何内容。但是与204响应不同，返回此状态码的响应要求请求者重置文档视图。该响应主要是被用于接受用户输入后，立即重置表单，以便用户能够轻松地开始另一次输入。\n\n206（Partial-Content），服务器已经成功处理了部分 GET 请求。\n\n301（Moved-Permanently），永久性重定向\n\n302（Moved-Temporarily），暂时性重定向\n\n304（Not-Modified），浏览器端缓存的资源依然有效\n\n400（Bad-Reques），请求有误，当前请求无法被服务器理解。\n\n401（Unauthorized），当前请求需要用户验证。\n\n403（Forbidden），服务器已经理解请求，但是拒绝执行它。\n\n404（Not-Found），请求的资源没有被找到\n\n500（Interval Server Error），服务器内部错误\n\n502（Bad GateWay），网关出错\n\n503（Service Unavailable），由于临时的服务器维护或者过载，服务器当前无法处理请求。\n\n504（Gateway Timeout），作为网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器（URI标识出的服务器，例如HTTP、FTP、LDAP）或者辅助服务器（例如DNS）收到响应。","slug":"2017-04-03httpcode","published":1,"date":"2017-04-03T11:50:06.000Z","updated":"2017-04-03T11:50:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziipp0001rh9zcanpf09s","content":"<h2 id=\"http状态码\"><a href=\"#http状态码\" class=\"headerlink\" title=\"http状态码\"></a>http状态码</h2><p>http状态码是表示服务器对请求的响应状态，主要分为以下几个部分</p>\n<ul>\n<li><p>1**：这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束</p>\n</li>\n<li><p>2**：表示请求成功，</p>\n</li>\n<li><p>3**：表示重定向</p>\n</li>\n<li><p>4**：表示客户端错误</p>\n</li>\n<li><p>5**：表示服务器端错误</p>\n</li>\n</ul>\n<h2 id=\"具体内容\"><a href=\"#具体内容\" class=\"headerlink\" title=\"具体内容\"></a>具体内容</h2><p>100（continue），客户端应当继续发送请求。这个临时响应是用来通知客户端它的部分请求已经被服务器接收</p>\n<p>200（OK），表示请求成功，请求所希望的响应头或数据体将随此响应返回。</p>\n<p>202（Accepted），服务器已接受请求，但尚未处理。</p>\n<p>204（No-Content），服务器成功处理了请求，但不需要返回任何实体内容</p>\n<p>205（Reset-Content），服务器成功处理了请求，且没有返回任何内容。但是与204响应不同，返回此状态码的响应要求请求者重置文档视图。该响应主要是被用于接受用户输入后，立即重置表单，以便用户能够轻松地开始另一次输入。</p>\n<p>206（Partial-Content），服务器已经成功处理了部分 GET 请求。</p>\n<p>301（Moved-Permanently），永久性重定向</p>\n<p>302（Moved-Temporarily），暂时性重定向</p>\n<p>304（Not-Modified），浏览器端缓存的资源依然有效</p>\n<p>400（Bad-Reques），请求有误，当前请求无法被服务器理解。</p>\n<p>401（Unauthorized），当前请求需要用户验证。</p>\n<p>403（Forbidden），服务器已经理解请求，但是拒绝执行它。</p>\n<p>404（Not-Found），请求的资源没有被找到</p>\n<p>500（Interval Server Error），服务器内部错误</p>\n<p>502（Bad GateWay），网关出错</p>\n<p>503（Service Unavailable），由于临时的服务器维护或者过载，服务器当前无法处理请求。</p>\n<p>504（Gateway Timeout），作为网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器（URI标识出的服务器，例如HTTP、FTP、LDAP）或者辅助服务器（例如DNS）收到响应。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"http状态码\"><a href=\"#http状态码\" class=\"headerlink\" title=\"http状态码\"></a>http状态码</h2><p>http状态码是表示服务器对请求的响应状态，主要分为以下几个部分</p>\n<ul>\n<li><p>1**：这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束</p>\n</li>\n<li><p>2**：表示请求成功，</p>\n</li>\n<li><p>3**：表示重定向</p>\n</li>\n<li><p>4**：表示客户端错误</p>\n</li>\n<li><p>5**：表示服务器端错误</p>\n</li>\n</ul>\n<h2 id=\"具体内容\"><a href=\"#具体内容\" class=\"headerlink\" title=\"具体内容\"></a>具体内容</h2><p>100（continue），客户端应当继续发送请求。这个临时响应是用来通知客户端它的部分请求已经被服务器接收</p>\n<p>200（OK），表示请求成功，请求所希望的响应头或数据体将随此响应返回。</p>\n<p>202（Accepted），服务器已接受请求，但尚未处理。</p>\n<p>204（No-Content），服务器成功处理了请求，但不需要返回任何实体内容</p>\n<p>205（Reset-Content），服务器成功处理了请求，且没有返回任何内容。但是与204响应不同，返回此状态码的响应要求请求者重置文档视图。该响应主要是被用于接受用户输入后，立即重置表单，以便用户能够轻松地开始另一次输入。</p>\n<p>206（Partial-Content），服务器已经成功处理了部分 GET 请求。</p>\n<p>301（Moved-Permanently），永久性重定向</p>\n<p>302（Moved-Temporarily），暂时性重定向</p>\n<p>304（Not-Modified），浏览器端缓存的资源依然有效</p>\n<p>400（Bad-Reques），请求有误，当前请求无法被服务器理解。</p>\n<p>401（Unauthorized），当前请求需要用户验证。</p>\n<p>403（Forbidden），服务器已经理解请求，但是拒绝执行它。</p>\n<p>404（Not-Found），请求的资源没有被找到</p>\n<p>500（Interval Server Error），服务器内部错误</p>\n<p>502（Bad GateWay），网关出错</p>\n<p>503（Service Unavailable），由于临时的服务器维护或者过载，服务器当前无法处理请求。</p>\n<p>504（Gateway Timeout），作为网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器（URI标识出的服务器，例如HTTP、FTP、LDAP）或者辅助服务器（例如DNS）收到响应。</p>\n"},{"title":"详细解释javascript中闭包的概念","_content":"## 闭包是什么\n在 JavaScript 中，闭包是一个让人很难弄懂的概念。ECMAScript 中给闭包的定义是：闭包，指的是词法表示包括不被计算的变量的函数，也就是说，函数可以使用函数之外定义的变量。\n\n\n\n* 闭包是一个函数\n* 闭包可以使用在它外面定义的变量\n* 闭包存在定义该变量的作用域中\n\n\n## 变量作用域\n变量可分为全局变量和局部变量。  \n\n* 全局变量的作用域就是全局性的，在 js 的任何地方都可以使用全局变量。 \n* 在函数中使用 var 关键字声明变量，这时的变量即是局部变量，它的作用域只在声明该变量的函数内，在函数外面是访问不到该变量的。    \n\n\n\n## 变量生存周期  \n\n* 全局变量，生命周期是永久的。  \n* 局部变量，当定义该变量的函数调用结束时，该变量就会被垃圾回收机制回收而销毁。再次调用该函数时又会重新定义了一个新变量.。 \n\n        var func = function()\n        {\n        var a = 'linxin';\n        console.log(a);\n        }\n        func();  \n\n\na 为局部变量，在 func 调用完之后，a 就会被销毁了。\n\n    var func = function(){\n     var a = 'linxin';\n    var func1 = function(){\n    a += ' a';\n    console.log(a);\n    }\n    return func1;\n    }\n    var func2 = func();\n    func2();                    // linxin a\n    func2();                    // linxin a a\n    func2();                    // linxin a a a  \n\n\n\n可以看出，在第一次调用完 func2 之后，func 中的变量 a 变成 'linxin a'，而没有被销毁。因为此时 func1 形成了一个闭包，导致了 a 的生命周期延续了。\n\n\n闭包是一个函数，比如上面的 func1 函数\n闭包使用其他函数定义的变量，使其不被销毁。比如上面 func1 调用了变量 a  \n\n闭包存在定义该变量的作用域中，变量 a 存在 func 的作用域中，那么 func1 也必然存在这个作用域中。\n现在可以说，满足这三个条件的就是闭包了。  \n## 进阶\n\n下面我们通过一个简单而又经典的例子来进一步熟悉闭包。\n\n    for (var i = 0; i < 4; i++) {\n        setTimeout(function () {\n            console.log(i)\n        }, 0)\n    }\n我们可能会简单的以为控制台会打印出 0 1 2 3，可事实却打印出了 4 4 4 4，这又是为什么呢？我们发现，setTimeout 函数时异步的，等到函数执行时，for循环已经结束了，此时的 i 的值为 4，所以 function() { console.log(i) } 去找变量 i，只能拿到 4。\n\n我想起上一个例子中，闭包使 a 变量的值被保存起来了，那么这里我们也可以用闭包把 0 1 2 3 保存起来。\n\n    for (var i = 0; i < 4; i++) {\n        (function (i) {\n            setTimeout(function () {\n                console.log(i)\n            }, 0)\n        })(i)\n    }\n当 i=0 时，把 0 作为参数传进匿名函数中，此时 function(i){} 此匿名函数中的 i 的值为 0，等到 setTimeout 执行时顺着外层去找 i，这时就能拿到 0。如此循环，就能拿到想要的 0 1 2 3。\n\n## 内存管理\n在闭包中调用局部变量，会导致这个局部变量无法及时被销毁，相当于全局变量一样会一直占用着内存。如果需要回收这些变量占用的内存，可以手动将变量设置为null。\n\n然而在使用闭包的过程中，比较容易形成 JavaScript 对象和 DOM 对象的循环引用，就有可能造成内存泄露。这是因为浏览器的垃圾回收机制中，如果两个对象之间形成了循环引用，那么它们都无法被回收。\n\n    function func() {\n        var test = document.getElementById('test');\n        test.onclick = function () {\n            console.log('hello world');\n        }\n    }\n在上面例子中，func 函数中用匿名函数创建了一个闭包。变量 test 是 JavaScript 对象，引用了 id 为 test 的 DOM 对象，DOM 对象的 onclick 属性又引用了闭包，而闭包又可以调用 test ，因而形成了循环引用，导致两个对象都无法被回收。要解决这个问题，只需要把循环引用中的变量设为 null 即可。\n\n    function func() {\n        var test = document.getElementById('test');\n        test.onclick = function () {\n            console.log('hello world');\n        }\n        test = null;\n    }\n如果在 func 函数中不使用匿名函数创建闭包，而是通过引用一个外部函数，也不会出现循环引用的问题。\n\n    function func() {\n        var test = document.getElementById('test');\n        test.onclick = funcTest;\n    }\n    function funcTest(){\n        console.log('hello world');\n    }\n","source":"_posts/2017.03.26-bibao.md","raw":"---\ntitle: 详细解释javascript中闭包的概念\ncategories: 知识\ntags: [javascript]\n---\n## 闭包是什么\n在 JavaScript 中，闭包是一个让人很难弄懂的概念。ECMAScript 中给闭包的定义是：闭包，指的是词法表示包括不被计算的变量的函数，也就是说，函数可以使用函数之外定义的变量。\n\n\n\n* 闭包是一个函数\n* 闭包可以使用在它外面定义的变量\n* 闭包存在定义该变量的作用域中\n\n\n## 变量作用域\n变量可分为全局变量和局部变量。  \n\n* 全局变量的作用域就是全局性的，在 js 的任何地方都可以使用全局变量。 \n* 在函数中使用 var 关键字声明变量，这时的变量即是局部变量，它的作用域只在声明该变量的函数内，在函数外面是访问不到该变量的。    \n\n\n\n## 变量生存周期  \n\n* 全局变量，生命周期是永久的。  \n* 局部变量，当定义该变量的函数调用结束时，该变量就会被垃圾回收机制回收而销毁。再次调用该函数时又会重新定义了一个新变量.。 \n\n        var func = function()\n        {\n        var a = 'linxin';\n        console.log(a);\n        }\n        func();  \n\n\na 为局部变量，在 func 调用完之后，a 就会被销毁了。\n\n    var func = function(){\n     var a = 'linxin';\n    var func1 = function(){\n    a += ' a';\n    console.log(a);\n    }\n    return func1;\n    }\n    var func2 = func();\n    func2();                    // linxin a\n    func2();                    // linxin a a\n    func2();                    // linxin a a a  \n\n\n\n可以看出，在第一次调用完 func2 之后，func 中的变量 a 变成 'linxin a'，而没有被销毁。因为此时 func1 形成了一个闭包，导致了 a 的生命周期延续了。\n\n\n闭包是一个函数，比如上面的 func1 函数\n闭包使用其他函数定义的变量，使其不被销毁。比如上面 func1 调用了变量 a  \n\n闭包存在定义该变量的作用域中，变量 a 存在 func 的作用域中，那么 func1 也必然存在这个作用域中。\n现在可以说，满足这三个条件的就是闭包了。  \n## 进阶\n\n下面我们通过一个简单而又经典的例子来进一步熟悉闭包。\n\n    for (var i = 0; i < 4; i++) {\n        setTimeout(function () {\n            console.log(i)\n        }, 0)\n    }\n我们可能会简单的以为控制台会打印出 0 1 2 3，可事实却打印出了 4 4 4 4，这又是为什么呢？我们发现，setTimeout 函数时异步的，等到函数执行时，for循环已经结束了，此时的 i 的值为 4，所以 function() { console.log(i) } 去找变量 i，只能拿到 4。\n\n我想起上一个例子中，闭包使 a 变量的值被保存起来了，那么这里我们也可以用闭包把 0 1 2 3 保存起来。\n\n    for (var i = 0; i < 4; i++) {\n        (function (i) {\n            setTimeout(function () {\n                console.log(i)\n            }, 0)\n        })(i)\n    }\n当 i=0 时，把 0 作为参数传进匿名函数中，此时 function(i){} 此匿名函数中的 i 的值为 0，等到 setTimeout 执行时顺着外层去找 i，这时就能拿到 0。如此循环，就能拿到想要的 0 1 2 3。\n\n## 内存管理\n在闭包中调用局部变量，会导致这个局部变量无法及时被销毁，相当于全局变量一样会一直占用着内存。如果需要回收这些变量占用的内存，可以手动将变量设置为null。\n\n然而在使用闭包的过程中，比较容易形成 JavaScript 对象和 DOM 对象的循环引用，就有可能造成内存泄露。这是因为浏览器的垃圾回收机制中，如果两个对象之间形成了循环引用，那么它们都无法被回收。\n\n    function func() {\n        var test = document.getElementById('test');\n        test.onclick = function () {\n            console.log('hello world');\n        }\n    }\n在上面例子中，func 函数中用匿名函数创建了一个闭包。变量 test 是 JavaScript 对象，引用了 id 为 test 的 DOM 对象，DOM 对象的 onclick 属性又引用了闭包，而闭包又可以调用 test ，因而形成了循环引用，导致两个对象都无法被回收。要解决这个问题，只需要把循环引用中的变量设为 null 即可。\n\n    function func() {\n        var test = document.getElementById('test');\n        test.onclick = function () {\n            console.log('hello world');\n        }\n        test = null;\n    }\n如果在 func 函数中不使用匿名函数创建闭包，而是通过引用一个外部函数，也不会出现循环引用的问题。\n\n    function func() {\n        var test = document.getElementById('test');\n        test.onclick = funcTest;\n    }\n    function funcTest(){\n        console.log('hello world');\n    }\n","slug":"2017.03.26-bibao","published":1,"date":"2017-03-27T10:42:04.000Z","updated":"2020-03-30T07:00:38.044Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziipr0003rh9z9opd3l79","content":"<h2 id=\"闭包是什么\"><a href=\"#闭包是什么\" class=\"headerlink\" title=\"闭包是什么\"></a>闭包是什么</h2><p>在 JavaScript 中，闭包是一个让人很难弄懂的概念。ECMAScript 中给闭包的定义是：闭包，指的是词法表示包括不被计算的变量的函数，也就是说，函数可以使用函数之外定义的变量。</p>\n<ul>\n<li>闭包是一个函数</li>\n<li>闭包可以使用在它外面定义的变量</li>\n<li>闭包存在定义该变量的作用域中</li>\n</ul>\n<h2 id=\"变量作用域\"><a href=\"#变量作用域\" class=\"headerlink\" title=\"变量作用域\"></a>变量作用域</h2><p>变量可分为全局变量和局部变量。  </p>\n<ul>\n<li>全局变量的作用域就是全局性的，在 js 的任何地方都可以使用全局变量。 </li>\n<li>在函数中使用 var 关键字声明变量，这时的变量即是局部变量，它的作用域只在声明该变量的函数内，在函数外面是访问不到该变量的。    </li>\n</ul>\n<h2 id=\"变量生存周期\"><a href=\"#变量生存周期\" class=\"headerlink\" title=\"变量生存周期\"></a>变量生存周期</h2><ul>\n<li>全局变量，生命周期是永久的。  </li>\n<li><p>局部变量，当定义该变量的函数调用结束时，该变量就会被垃圾回收机制回收而销毁。再次调用该函数时又会重新定义了一个新变量.。 </p>\n<pre><code>var func = function()\n{\nvar a = &apos;linxin&apos;;\nconsole.log(a);\n}\nfunc();  \n</code></pre></li>\n</ul>\n<p>a 为局部变量，在 func 调用完之后，a 就会被销毁了。</p>\n<pre><code>var func = function(){\n var a = &apos;linxin&apos;;\nvar func1 = function(){\na += &apos; a&apos;;\nconsole.log(a);\n}\nreturn func1;\n}\nvar func2 = func();\nfunc2();                    // linxin a\nfunc2();                    // linxin a a\nfunc2();                    // linxin a a a  \n</code></pre><p>可以看出，在第一次调用完 func2 之后，func 中的变量 a 变成 ‘linxin a’，而没有被销毁。因为此时 func1 形成了一个闭包，导致了 a 的生命周期延续了。</p>\n<p>闭包是一个函数，比如上面的 func1 函数<br>闭包使用其他函数定义的变量，使其不被销毁。比如上面 func1 调用了变量 a  </p>\n<p>闭包存在定义该变量的作用域中，变量 a 存在 func 的作用域中，那么 func1 也必然存在这个作用域中。<br>现在可以说，满足这三个条件的就是闭包了。  </p>\n<h2 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h2><p>下面我们通过一个简单而又经典的例子来进一步熟悉闭包。</p>\n<pre><code>for (var i = 0; i &lt; 4; i++) {\n    setTimeout(function () {\n        console.log(i)\n    }, 0)\n}\n</code></pre><p>我们可能会简单的以为控制台会打印出 0 1 2 3，可事实却打印出了 4 4 4 4，这又是为什么呢？我们发现，setTimeout 函数时异步的，等到函数执行时，for循环已经结束了，此时的 i 的值为 4，所以 function() { console.log(i) } 去找变量 i，只能拿到 4。</p>\n<p>我想起上一个例子中，闭包使 a 变量的值被保存起来了，那么这里我们也可以用闭包把 0 1 2 3 保存起来。</p>\n<pre><code>for (var i = 0; i &lt; 4; i++) {\n    (function (i) {\n        setTimeout(function () {\n            console.log(i)\n        }, 0)\n    })(i)\n}\n</code></pre><p>当 i=0 时，把 0 作为参数传进匿名函数中，此时 function(i){} 此匿名函数中的 i 的值为 0，等到 setTimeout 执行时顺着外层去找 i，这时就能拿到 0。如此循环，就能拿到想要的 0 1 2 3。</p>\n<h2 id=\"内存管理\"><a href=\"#内存管理\" class=\"headerlink\" title=\"内存管理\"></a>内存管理</h2><p>在闭包中调用局部变量，会导致这个局部变量无法及时被销毁，相当于全局变量一样会一直占用着内存。如果需要回收这些变量占用的内存，可以手动将变量设置为null。</p>\n<p>然而在使用闭包的过程中，比较容易形成 JavaScript 对象和 DOM 对象的循环引用，就有可能造成内存泄露。这是因为浏览器的垃圾回收机制中，如果两个对象之间形成了循环引用，那么它们都无法被回收。</p>\n<pre><code>function func() {\n    var test = document.getElementById(&apos;test&apos;);\n    test.onclick = function () {\n        console.log(&apos;hello world&apos;);\n    }\n}\n</code></pre><p>在上面例子中，func 函数中用匿名函数创建了一个闭包。变量 test 是 JavaScript 对象，引用了 id 为 test 的 DOM 对象，DOM 对象的 onclick 属性又引用了闭包，而闭包又可以调用 test ，因而形成了循环引用，导致两个对象都无法被回收。要解决这个问题，只需要把循环引用中的变量设为 null 即可。</p>\n<pre><code>function func() {\n    var test = document.getElementById(&apos;test&apos;);\n    test.onclick = function () {\n        console.log(&apos;hello world&apos;);\n    }\n    test = null;\n}\n</code></pre><p>如果在 func 函数中不使用匿名函数创建闭包，而是通过引用一个外部函数，也不会出现循环引用的问题。</p>\n<pre><code>function func() {\n    var test = document.getElementById(&apos;test&apos;);\n    test.onclick = funcTest;\n}\nfunction funcTest(){\n    console.log(&apos;hello world&apos;);\n}\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"闭包是什么\"><a href=\"#闭包是什么\" class=\"headerlink\" title=\"闭包是什么\"></a>闭包是什么</h2><p>在 JavaScript 中，闭包是一个让人很难弄懂的概念。ECMAScript 中给闭包的定义是：闭包，指的是词法表示包括不被计算的变量的函数，也就是说，函数可以使用函数之外定义的变量。</p>\n<ul>\n<li>闭包是一个函数</li>\n<li>闭包可以使用在它外面定义的变量</li>\n<li>闭包存在定义该变量的作用域中</li>\n</ul>\n<h2 id=\"变量作用域\"><a href=\"#变量作用域\" class=\"headerlink\" title=\"变量作用域\"></a>变量作用域</h2><p>变量可分为全局变量和局部变量。  </p>\n<ul>\n<li>全局变量的作用域就是全局性的，在 js 的任何地方都可以使用全局变量。 </li>\n<li>在函数中使用 var 关键字声明变量，这时的变量即是局部变量，它的作用域只在声明该变量的函数内，在函数外面是访问不到该变量的。    </li>\n</ul>\n<h2 id=\"变量生存周期\"><a href=\"#变量生存周期\" class=\"headerlink\" title=\"变量生存周期\"></a>变量生存周期</h2><ul>\n<li>全局变量，生命周期是永久的。  </li>\n<li><p>局部变量，当定义该变量的函数调用结束时，该变量就会被垃圾回收机制回收而销毁。再次调用该函数时又会重新定义了一个新变量.。 </p>\n<pre><code>var func = function()\n{\nvar a = &apos;linxin&apos;;\nconsole.log(a);\n}\nfunc();  \n</code></pre></li>\n</ul>\n<p>a 为局部变量，在 func 调用完之后，a 就会被销毁了。</p>\n<pre><code>var func = function(){\n var a = &apos;linxin&apos;;\nvar func1 = function(){\na += &apos; a&apos;;\nconsole.log(a);\n}\nreturn func1;\n}\nvar func2 = func();\nfunc2();                    // linxin a\nfunc2();                    // linxin a a\nfunc2();                    // linxin a a a  \n</code></pre><p>可以看出，在第一次调用完 func2 之后，func 中的变量 a 变成 ‘linxin a’，而没有被销毁。因为此时 func1 形成了一个闭包，导致了 a 的生命周期延续了。</p>\n<p>闭包是一个函数，比如上面的 func1 函数<br>闭包使用其他函数定义的变量，使其不被销毁。比如上面 func1 调用了变量 a  </p>\n<p>闭包存在定义该变量的作用域中，变量 a 存在 func 的作用域中，那么 func1 也必然存在这个作用域中。<br>现在可以说，满足这三个条件的就是闭包了。  </p>\n<h2 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h2><p>下面我们通过一个简单而又经典的例子来进一步熟悉闭包。</p>\n<pre><code>for (var i = 0; i &lt; 4; i++) {\n    setTimeout(function () {\n        console.log(i)\n    }, 0)\n}\n</code></pre><p>我们可能会简单的以为控制台会打印出 0 1 2 3，可事实却打印出了 4 4 4 4，这又是为什么呢？我们发现，setTimeout 函数时异步的，等到函数执行时，for循环已经结束了，此时的 i 的值为 4，所以 function() { console.log(i) } 去找变量 i，只能拿到 4。</p>\n<p>我想起上一个例子中，闭包使 a 变量的值被保存起来了，那么这里我们也可以用闭包把 0 1 2 3 保存起来。</p>\n<pre><code>for (var i = 0; i &lt; 4; i++) {\n    (function (i) {\n        setTimeout(function () {\n            console.log(i)\n        }, 0)\n    })(i)\n}\n</code></pre><p>当 i=0 时，把 0 作为参数传进匿名函数中，此时 function(i){} 此匿名函数中的 i 的值为 0，等到 setTimeout 执行时顺着外层去找 i，这时就能拿到 0。如此循环，就能拿到想要的 0 1 2 3。</p>\n<h2 id=\"内存管理\"><a href=\"#内存管理\" class=\"headerlink\" title=\"内存管理\"></a>内存管理</h2><p>在闭包中调用局部变量，会导致这个局部变量无法及时被销毁，相当于全局变量一样会一直占用着内存。如果需要回收这些变量占用的内存，可以手动将变量设置为null。</p>\n<p>然而在使用闭包的过程中，比较容易形成 JavaScript 对象和 DOM 对象的循环引用，就有可能造成内存泄露。这是因为浏览器的垃圾回收机制中，如果两个对象之间形成了循环引用，那么它们都无法被回收。</p>\n<pre><code>function func() {\n    var test = document.getElementById(&apos;test&apos;);\n    test.onclick = function () {\n        console.log(&apos;hello world&apos;);\n    }\n}\n</code></pre><p>在上面例子中，func 函数中用匿名函数创建了一个闭包。变量 test 是 JavaScript 对象，引用了 id 为 test 的 DOM 对象，DOM 对象的 onclick 属性又引用了闭包，而闭包又可以调用 test ，因而形成了循环引用，导致两个对象都无法被回收。要解决这个问题，只需要把循环引用中的变量设为 null 即可。</p>\n<pre><code>function func() {\n    var test = document.getElementById(&apos;test&apos;);\n    test.onclick = function () {\n        console.log(&apos;hello world&apos;);\n    }\n    test = null;\n}\n</code></pre><p>如果在 func 函数中不使用匿名函数创建闭包，而是通过引用一个外部函数，也不会出现循环引用的问题。</p>\n<pre><code>function func() {\n    var test = document.getElementById(&apos;test&apos;);\n    test.onclick = funcTest;\n}\nfunction funcTest(){\n    console.log(&apos;hello world&apos;);\n}\n</code></pre>"},{"title":"使用hexo搭建静态个人博客","_content":"## 简单介绍hexo\n[hexo](https://hexo.io/)是一个开源的静态博客生成器,用node.js开发,作者是台湾大学生tommy351。这篇文章主要介绍在windows平台上用node.js框架搭建blog的方法。\n## 为什么使用静态博客\n不少人选择在虚拟主机或vps上面搭建动态博客。但是这些主机商通常“免费的不稳定,稳定的不免费”。之前我图方便在淘宝上购买了香港的免备案服务器，除了网络带宽，流量受到限制，还随时会面临服务器商跑路的风险。如果我们能够找到这样的空间,在自己保留最大控制权前提下,由别人托管,会省去不少事情。 \n\n\n静态博客编译之后是纯html页面,优点就是支持它的环境十分好找,例如github、gitcafe、七牛云存储等站点都支持静态页面托管,自然是我们的首选了。我自己的[博客](hhb123.top)就是托管在github仓库上的。  \n  \n   \n但是静态博客并非没有缺点。动态博客更新文章时,脚本是不变的,只需要更新数据库。静态博客要频繁改动文件,不支持增量式上传的东西,比如ftp,就难于管理。此外,还要十分熟悉git各种命令,才能部署页面，接下来我们就开始blog的部署。\n## 配置环境\n* node.js框架\n* gitbub账户&仓库\n* git  \n* 域名\n\n## 开始搭建  \n\n### 1.node.js框架的安装  \n\nnode.js框架的安装可以到[node.js官网](http://nodejs.cn/download/),对于windows平台，下载安装包之后直接点击安装即可.  \n![](http://onep1caa3.bkt.clouddn.com/node.js%E4%B8%8B%E8%BD%BD.png)\n安装完成以后按window+r，输入cmd打开命令行窗口，输入 `npm`，这时若弹出node.js 的使用指南说明安装完成。 \n![](http://onep1caa3.bkt.clouddn.com/%E6%A3%80%E9%AA%8Cnode.js%E5%AE%89%E8%A3%85.png)\n### 2.hexo的安装\n* 1.在命令提示窗口中使用命令  `npm install -g hexo `  \n 来安装 hexo。\n*  2.在你喜欢的位置创建文件夹用来存放网页内容，如：D/hexo，接着转到这个文件夹，使用命令提示行输入 hexo init。 这个文件夹就是你的 blog 的源文件夹;  \n\n\n*  3.生成静态页面，执行命令   `npm generate` （或者`npm g`);\n*  4.执行命令   `hexo server`   \n在本地建立网站，默认端口为4000，打开任意浏览器，键入 http://localhost:4000 (或者127.0.0.1：4000)，这是就可以在本地访问搭建好的网页了；  \n![http://onep1caa3.bkt.clouddn.com/hexo%20server.png](http://onep1caa3.bkt.clouddn.com/hexo%20server.png)\n\n\n### 3.github仓库的建立\ngithub仓库的建立比较简单，大家可以参照[这篇文章](http://www.cnblogs.com/keZhenxu94/p/5288488.html)；注意建立的仓库的名字必须与你自己的用户名对应，即仓库名必须为【your_user_name.github.io】。 \n![](http://onep1caa3.bkt.clouddn.com/github%E4%BB%93%E5%BA%93.png)\n\n\n### 4.准备将本地网站clone到你的github仓库中   \n\n  在本地预览自己的网页感觉没什么问题以后，就可以开始把自己的个人博客clone到github仓库上。  \n \n建立关联，需要修改之前建立网站的源文件夹的一个名为_config.yml的文件，这个文件可以用大多数文本编辑器打开，我用的是brackets，这个软件很适合初学者学习前端的基本知识，因为它有即时预览模式，在编辑网页的同时可以看到网页的变化。闲话不多说，打开这个文件之后，看到前面有些设置选项，这些暂时都不管，拉到最下面，添加如下代码   \n\n    deploy:\n            \n    type: git\n            \n    repo: https://github.com/hhb1994/hhb1994.github.io.git\n        \n    branch: master  \n 其中repo后面跟的应该是你的github仓库的地址。请注意，type，repo，branch冒号后面一定要加一个半角空格，不加的话不能上传。之前没有注意到这个问题，弄了很久都没有成功。  \n \n \n### 5.使用SSH登陆\n使用ssh可以免去每次更新网站都输入账户密码的麻烦，详细的本地生成ssh并绑定你的github账户的教程请看[这里](http://blog.csdn.net/keyboardota/article/details/7603630)，需要注意的是，如果你有一个以上的仓库，必须把ssh绑定到你要上传网站的那个仓库里面，如果你直接从设置里面绑定，执行 `hexo deploy`时会报错。正确的做法时选择你上传网站的仓库，在这个仓库的setting里面绑定ssh。如果之前是全局绑定了ssh，需要先解绑，再在你选择的仓库进行绑定。\n![](http://onep1caa3.bkt.clouddn.com/ssh%E3%80%82github.png)\n\n\n### 6.开始上传\n执行命令  \n`hexo deploy`(或者`hexo d`)，就开始了上传流程，上传完毕之后，就可以打开网页hhb1994.github.io（换成你的仓库地址）访问你的博客了。  \n\n## 域名的重定向\n如果你想把这个博客和你购买的域名绑定在一起（可以到万网购买域名，价格也比较实惠，在这里我是绑定万网购买的域名），请打开万网，登陆你的账户以后找到域名设置-域名解析，添加三条解析。\n\n* 1.记录类型：CNAME，主机记录：www，记录值：hhb1994924.github.io；\n*  2.记录类型：A，主机记录：@，记录值：192.30.252.154；\n*  3.记录类型：A，主机记录：@，记录值：192.30.252.153； \n![](http://onep1caa3.bkt.clouddn.com/%E6%B7%BB%E5%8A%A0%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90.png)\n\n\n添加之后，还需要在hexo/source中添加CNAME文件，文件名为CNAME，注意没有缩略名，用文本编辑器打开这个文件，输入hhb123.top(换成你自己购买的域名)，接着用命令提示行输入   \n\n\n    hexo clean  \n        \n    hexo deploy  \n\n稍等一会，就可以在浏览器输入hhb123.top来访问个人博客了。 \n\n## 添加文章\n可以直接在D:\\hexo\\source\\_posts中添加.md文件，再执行   \n\n    hexo clean  \n    hexo deploy\n就可以上传文章了，.md文件使用markdown格式，这种格式注重内容而不是形式，语法结构也比较简单，很快就可以学会，[这里](http://www.jianshu.com/p/q81RER)有教程。编辑markdown格式的编辑器有很多，windows平台上的markpad，markdownpad都是不错的选择，另外还有一些网页上面的markdown编辑器，效果也不错。  \n![](http://onep1caa3.bkt.clouddn.com/markpad.png)\n\n## 更换主题&个性化\n  hexo提供了很方便的更换主题的方式，[选择你喜欢的主题](https://www.zhihu.com/question/24422335)，打开存储你的网页的文件夹，然后使用命令提示行键入  \n  \n  `git clone https://github.com/iissnan/hexo-theme-next themes/next`  \n  \n  这样就可以把“next”主题的文件拷贝到hexo/themes文件夹了。\n  接着在hexo文件夹的_config.ylm文件夹中找到主题设置，  \n ` theme：landscape ` \n  landscape是默认的主题，这里我们把默认的主题改为  \n  `theme：next `   \n  接着执行    \n  \n    hexo clean  \n    hexo deploy  \n  就可以看到新主题的效果了，主题的设置在 D:\\hexo\\themes\\next\\_config.yml中。\n  \n  \n  \n        ","source":"_posts/2017.03.26.md","raw":"----\ntitle: 使用hexo搭建静态个人博客\ncategories: 教程\ntags: [hexo,git]\n----\n## 简单介绍hexo\n[hexo](https://hexo.io/)是一个开源的静态博客生成器,用node.js开发,作者是台湾大学生tommy351。这篇文章主要介绍在windows平台上用node.js框架搭建blog的方法。\n## 为什么使用静态博客\n不少人选择在虚拟主机或vps上面搭建动态博客。但是这些主机商通常“免费的不稳定,稳定的不免费”。之前我图方便在淘宝上购买了香港的免备案服务器，除了网络带宽，流量受到限制，还随时会面临服务器商跑路的风险。如果我们能够找到这样的空间,在自己保留最大控制权前提下,由别人托管,会省去不少事情。 \n\n\n静态博客编译之后是纯html页面,优点就是支持它的环境十分好找,例如github、gitcafe、七牛云存储等站点都支持静态页面托管,自然是我们的首选了。我自己的[博客](hhb123.top)就是托管在github仓库上的。  \n  \n   \n但是静态博客并非没有缺点。动态博客更新文章时,脚本是不变的,只需要更新数据库。静态博客要频繁改动文件,不支持增量式上传的东西,比如ftp,就难于管理。此外,还要十分熟悉git各种命令,才能部署页面，接下来我们就开始blog的部署。\n## 配置环境\n* node.js框架\n* gitbub账户&仓库\n* git  \n* 域名\n\n## 开始搭建  \n\n### 1.node.js框架的安装  \n\nnode.js框架的安装可以到[node.js官网](http://nodejs.cn/download/),对于windows平台，下载安装包之后直接点击安装即可.  \n![](http://onep1caa3.bkt.clouddn.com/node.js%E4%B8%8B%E8%BD%BD.png)\n安装完成以后按window+r，输入cmd打开命令行窗口，输入 `npm`，这时若弹出node.js 的使用指南说明安装完成。 \n![](http://onep1caa3.bkt.clouddn.com/%E6%A3%80%E9%AA%8Cnode.js%E5%AE%89%E8%A3%85.png)\n### 2.hexo的安装\n* 1.在命令提示窗口中使用命令  `npm install -g hexo `  \n 来安装 hexo。\n*  2.在你喜欢的位置创建文件夹用来存放网页内容，如：D/hexo，接着转到这个文件夹，使用命令提示行输入 hexo init。 这个文件夹就是你的 blog 的源文件夹;  \n\n\n*  3.生成静态页面，执行命令   `npm generate` （或者`npm g`);\n*  4.执行命令   `hexo server`   \n在本地建立网站，默认端口为4000，打开任意浏览器，键入 http://localhost:4000 (或者127.0.0.1：4000)，这是就可以在本地访问搭建好的网页了；  \n![http://onep1caa3.bkt.clouddn.com/hexo%20server.png](http://onep1caa3.bkt.clouddn.com/hexo%20server.png)\n\n\n### 3.github仓库的建立\ngithub仓库的建立比较简单，大家可以参照[这篇文章](http://www.cnblogs.com/keZhenxu94/p/5288488.html)；注意建立的仓库的名字必须与你自己的用户名对应，即仓库名必须为【your_user_name.github.io】。 \n![](http://onep1caa3.bkt.clouddn.com/github%E4%BB%93%E5%BA%93.png)\n\n\n### 4.准备将本地网站clone到你的github仓库中   \n\n  在本地预览自己的网页感觉没什么问题以后，就可以开始把自己的个人博客clone到github仓库上。  \n \n建立关联，需要修改之前建立网站的源文件夹的一个名为_config.yml的文件，这个文件可以用大多数文本编辑器打开，我用的是brackets，这个软件很适合初学者学习前端的基本知识，因为它有即时预览模式，在编辑网页的同时可以看到网页的变化。闲话不多说，打开这个文件之后，看到前面有些设置选项，这些暂时都不管，拉到最下面，添加如下代码   \n\n    deploy:\n            \n    type: git\n            \n    repo: https://github.com/hhb1994/hhb1994.github.io.git\n        \n    branch: master  \n 其中repo后面跟的应该是你的github仓库的地址。请注意，type，repo，branch冒号后面一定要加一个半角空格，不加的话不能上传。之前没有注意到这个问题，弄了很久都没有成功。  \n \n \n### 5.使用SSH登陆\n使用ssh可以免去每次更新网站都输入账户密码的麻烦，详细的本地生成ssh并绑定你的github账户的教程请看[这里](http://blog.csdn.net/keyboardota/article/details/7603630)，需要注意的是，如果你有一个以上的仓库，必须把ssh绑定到你要上传网站的那个仓库里面，如果你直接从设置里面绑定，执行 `hexo deploy`时会报错。正确的做法时选择你上传网站的仓库，在这个仓库的setting里面绑定ssh。如果之前是全局绑定了ssh，需要先解绑，再在你选择的仓库进行绑定。\n![](http://onep1caa3.bkt.clouddn.com/ssh%E3%80%82github.png)\n\n\n### 6.开始上传\n执行命令  \n`hexo deploy`(或者`hexo d`)，就开始了上传流程，上传完毕之后，就可以打开网页hhb1994.github.io（换成你的仓库地址）访问你的博客了。  \n\n## 域名的重定向\n如果你想把这个博客和你购买的域名绑定在一起（可以到万网购买域名，价格也比较实惠，在这里我是绑定万网购买的域名），请打开万网，登陆你的账户以后找到域名设置-域名解析，添加三条解析。\n\n* 1.记录类型：CNAME，主机记录：www，记录值：hhb1994924.github.io；\n*  2.记录类型：A，主机记录：@，记录值：192.30.252.154；\n*  3.记录类型：A，主机记录：@，记录值：192.30.252.153； \n![](http://onep1caa3.bkt.clouddn.com/%E6%B7%BB%E5%8A%A0%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90.png)\n\n\n添加之后，还需要在hexo/source中添加CNAME文件，文件名为CNAME，注意没有缩略名，用文本编辑器打开这个文件，输入hhb123.top(换成你自己购买的域名)，接着用命令提示行输入   \n\n\n    hexo clean  \n        \n    hexo deploy  \n\n稍等一会，就可以在浏览器输入hhb123.top来访问个人博客了。 \n\n## 添加文章\n可以直接在D:\\hexo\\source\\_posts中添加.md文件，再执行   \n\n    hexo clean  \n    hexo deploy\n就可以上传文章了，.md文件使用markdown格式，这种格式注重内容而不是形式，语法结构也比较简单，很快就可以学会，[这里](http://www.jianshu.com/p/q81RER)有教程。编辑markdown格式的编辑器有很多，windows平台上的markpad，markdownpad都是不错的选择，另外还有一些网页上面的markdown编辑器，效果也不错。  \n![](http://onep1caa3.bkt.clouddn.com/markpad.png)\n\n## 更换主题&个性化\n  hexo提供了很方便的更换主题的方式，[选择你喜欢的主题](https://www.zhihu.com/question/24422335)，打开存储你的网页的文件夹，然后使用命令提示行键入  \n  \n  `git clone https://github.com/iissnan/hexo-theme-next themes/next`  \n  \n  这样就可以把“next”主题的文件拷贝到hexo/themes文件夹了。\n  接着在hexo文件夹的_config.ylm文件夹中找到主题设置，  \n ` theme：landscape ` \n  landscape是默认的主题，这里我们把默认的主题改为  \n  `theme：next `   \n  接着执行    \n  \n    hexo clean  \n    hexo deploy  \n  就可以看到新主题的效果了，主题的设置在 D:\\hexo\\themes\\next\\_config.yml中。\n  \n  \n  \n        ","slug":"2017.03.26","published":1,"date":"2017-03-27T10:41:14.000Z","updated":"2017-03-27T10:41:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziips0005rh9z9zn81pnt","content":"<h2 id=\"简单介绍hexo\"><a href=\"#简单介绍hexo\" class=\"headerlink\" title=\"简单介绍hexo\"></a>简单介绍hexo</h2><p><a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">hexo</a>是一个开源的静态博客生成器,用node.js开发,作者是台湾大学生tommy351。这篇文章主要介绍在windows平台上用node.js框架搭建blog的方法。</p>\n<h2 id=\"为什么使用静态博客\"><a href=\"#为什么使用静态博客\" class=\"headerlink\" title=\"为什么使用静态博客\"></a>为什么使用静态博客</h2><p>不少人选择在虚拟主机或vps上面搭建动态博客。但是这些主机商通常“免费的不稳定,稳定的不免费”。之前我图方便在淘宝上购买了香港的免备案服务器，除了网络带宽，流量受到限制，还随时会面临服务器商跑路的风险。如果我们能够找到这样的空间,在自己保留最大控制权前提下,由别人托管,会省去不少事情。 </p>\n<p>静态博客编译之后是纯html页面,优点就是支持它的环境十分好找,例如github、gitcafe、七牛云存储等站点都支持静态页面托管,自然是我们的首选了。我自己的<a href=\"hhb123.top\">博客</a>就是托管在github仓库上的。  </p>\n<p>但是静态博客并非没有缺点。动态博客更新文章时,脚本是不变的,只需要更新数据库。静态博客要频繁改动文件,不支持增量式上传的东西,比如ftp,就难于管理。此外,还要十分熟悉git各种命令,才能部署页面，接下来我们就开始blog的部署。</p>\n<h2 id=\"配置环境\"><a href=\"#配置环境\" class=\"headerlink\" title=\"配置环境\"></a>配置环境</h2><ul>\n<li>node.js框架</li>\n<li>gitbub账户&amp;仓库</li>\n<li>git  </li>\n<li>域名</li>\n</ul>\n<h2 id=\"开始搭建\"><a href=\"#开始搭建\" class=\"headerlink\" title=\"开始搭建\"></a>开始搭建</h2><h3 id=\"1-node-js框架的安装\"><a href=\"#1-node-js框架的安装\" class=\"headerlink\" title=\"1.node.js框架的安装\"></a>1.node.js框架的安装</h3><p>node.js框架的安装可以到<a href=\"http://nodejs.cn/download/\" target=\"_blank\" rel=\"noopener\">node.js官网</a>,对于windows平台，下载安装包之后直接点击安装即可.<br><img src=\"http://onep1caa3.bkt.clouddn.com/node.js%E4%B8%8B%E8%BD%BD.png\" alt=\"\"><br>安装完成以后按window+r，输入cmd打开命令行窗口，输入 <code>npm</code>，这时若弹出node.js 的使用指南说明安装完成。<br><img src=\"http://onep1caa3.bkt.clouddn.com/%E6%A3%80%E9%AA%8Cnode.js%E5%AE%89%E8%A3%85.png\" alt=\"\"></p>\n<h3 id=\"2-hexo的安装\"><a href=\"#2-hexo的安装\" class=\"headerlink\" title=\"2.hexo的安装\"></a>2.hexo的安装</h3><ul>\n<li>1.在命令提示窗口中使用命令  <code>npm install -g hexo</code><br>来安装 hexo。</li>\n<li>2.在你喜欢的位置创建文件夹用来存放网页内容，如：D/hexo，接着转到这个文件夹，使用命令提示行输入 hexo init。 这个文件夹就是你的 blog 的源文件夹;  </li>\n</ul>\n<ul>\n<li>3.生成静态页面，执行命令   <code>npm generate</code> （或者<code>npm g</code>);</li>\n<li>4.执行命令   <code>hexo server</code><br>在本地建立网站，默认端口为4000，打开任意浏览器，键入 <a href=\"http://localhost:4000\" target=\"_blank\" rel=\"noopener\">http://localhost:4000</a> (或者127.0.0.1：4000)，这是就可以在本地访问搭建好的网页了；<br><img src=\"http://onep1caa3.bkt.clouddn.com/hexo%20server.png\" alt=\"http://onep1caa3.bkt.clouddn.com/hexo%20server.png\"></li>\n</ul>\n<h3 id=\"3-github仓库的建立\"><a href=\"#3-github仓库的建立\" class=\"headerlink\" title=\"3.github仓库的建立\"></a>3.github仓库的建立</h3><p>github仓库的建立比较简单，大家可以参照<a href=\"http://www.cnblogs.com/keZhenxu94/p/5288488.html\" target=\"_blank\" rel=\"noopener\">这篇文章</a>；注意建立的仓库的名字必须与你自己的用户名对应，即仓库名必须为【your_user_name.github.io】。<br><img src=\"http://onep1caa3.bkt.clouddn.com/github%E4%BB%93%E5%BA%93.png\" alt=\"\"></p>\n<h3 id=\"4-准备将本地网站clone到你的github仓库中\"><a href=\"#4-准备将本地网站clone到你的github仓库中\" class=\"headerlink\" title=\"4.准备将本地网站clone到你的github仓库中\"></a>4.准备将本地网站clone到你的github仓库中</h3><p>  在本地预览自己的网页感觉没什么问题以后，就可以开始把自己的个人博客clone到github仓库上。  </p>\n<p>建立关联，需要修改之前建立网站的源文件夹的一个名为_config.yml的文件，这个文件可以用大多数文本编辑器打开，我用的是brackets，这个软件很适合初学者学习前端的基本知识，因为它有即时预览模式，在编辑网页的同时可以看到网页的变化。闲话不多说，打开这个文件之后，看到前面有些设置选项，这些暂时都不管，拉到最下面，添加如下代码   </p>\n<pre><code>deploy:\n\ntype: git\n\nrepo: https://github.com/hhb1994/hhb1994.github.io.git\n\nbranch: master  \n</code></pre><p> 其中repo后面跟的应该是你的github仓库的地址。请注意，type，repo，branch冒号后面一定要加一个半角空格，不加的话不能上传。之前没有注意到这个问题，弄了很久都没有成功。  </p>\n<h3 id=\"5-使用SSH登陆\"><a href=\"#5-使用SSH登陆\" class=\"headerlink\" title=\"5.使用SSH登陆\"></a>5.使用SSH登陆</h3><p>使用ssh可以免去每次更新网站都输入账户密码的麻烦，详细的本地生成ssh并绑定你的github账户的教程请看<a href=\"http://blog.csdn.net/keyboardota/article/details/7603630\" target=\"_blank\" rel=\"noopener\">这里</a>，需要注意的是，如果你有一个以上的仓库，必须把ssh绑定到你要上传网站的那个仓库里面，如果你直接从设置里面绑定，执行 <code>hexo deploy</code>时会报错。正确的做法时选择你上传网站的仓库，在这个仓库的setting里面绑定ssh。如果之前是全局绑定了ssh，需要先解绑，再在你选择的仓库进行绑定。<br><img src=\"http://onep1caa3.bkt.clouddn.com/ssh%E3%80%82github.png\" alt=\"\"></p>\n<h3 id=\"6-开始上传\"><a href=\"#6-开始上传\" class=\"headerlink\" title=\"6.开始上传\"></a>6.开始上传</h3><p>执行命令<br><code>hexo deploy</code>(或者<code>hexo d</code>)，就开始了上传流程，上传完毕之后，就可以打开网页hhb1994.github.io（换成你的仓库地址）访问你的博客了。  </p>\n<h2 id=\"域名的重定向\"><a href=\"#域名的重定向\" class=\"headerlink\" title=\"域名的重定向\"></a>域名的重定向</h2><p>如果你想把这个博客和你购买的域名绑定在一起（可以到万网购买域名，价格也比较实惠，在这里我是绑定万网购买的域名），请打开万网，登陆你的账户以后找到域名设置-域名解析，添加三条解析。</p>\n<ul>\n<li>1.记录类型：CNAME，主机记录：www，记录值：hhb1994924.github.io；</li>\n<li>2.记录类型：A，主机记录：@，记录值：192.30.252.154；</li>\n<li>3.记录类型：A，主机记录：@，记录值：192.30.252.153；<br><img src=\"http://onep1caa3.bkt.clouddn.com/%E6%B7%BB%E5%8A%A0%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90.png\" alt=\"\"></li>\n</ul>\n<p>添加之后，还需要在hexo/source中添加CNAME文件，文件名为CNAME，注意没有缩略名，用文本编辑器打开这个文件，输入hhb123.top(换成你自己购买的域名)，接着用命令提示行输入   </p>\n<pre><code>hexo clean  \n\nhexo deploy  \n</code></pre><p>稍等一会，就可以在浏览器输入hhb123.top来访问个人博客了。 </p>\n<h2 id=\"添加文章\"><a href=\"#添加文章\" class=\"headerlink\" title=\"添加文章\"></a>添加文章</h2><p>可以直接在D:\\hexo\\source_posts中添加.md文件，再执行   </p>\n<pre><code>hexo clean  \nhexo deploy\n</code></pre><p>就可以上传文章了，.md文件使用markdown格式，这种格式注重内容而不是形式，语法结构也比较简单，很快就可以学会，<a href=\"http://www.jianshu.com/p/q81RER\" target=\"_blank\" rel=\"noopener\">这里</a>有教程。编辑markdown格式的编辑器有很多，windows平台上的markpad，markdownpad都是不错的选择，另外还有一些网页上面的markdown编辑器，效果也不错。<br><img src=\"http://onep1caa3.bkt.clouddn.com/markpad.png\" alt=\"\"></p>\n<h2 id=\"更换主题-amp-个性化\"><a href=\"#更换主题-amp-个性化\" class=\"headerlink\" title=\"更换主题&amp;个性化\"></a>更换主题&amp;个性化</h2><p>  hexo提供了很方便的更换主题的方式，<a href=\"https://www.zhihu.com/question/24422335\" target=\"_blank\" rel=\"noopener\">选择你喜欢的主题</a>，打开存储你的网页的文件夹，然后使用命令提示行键入  </p>\n<p>  <code>git clone https://github.com/iissnan/hexo-theme-next themes/next</code>  </p>\n<p>  这样就可以把“next”主题的文件拷贝到hexo/themes文件夹了。<br>  接着在hexo文件夹的_config.ylm文件夹中找到主题设置，<br> <code>theme：landscape</code><br>  landscape是默认的主题，这里我们把默认的主题改为<br>  <code>theme：next</code><br>  接着执行    </p>\n<pre><code>hexo clean  \nhexo deploy  \n</code></pre><p>  就可以看到新主题的效果了，主题的设置在 D:\\hexo\\themes\\next_config.yml中。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"简单介绍hexo\"><a href=\"#简单介绍hexo\" class=\"headerlink\" title=\"简单介绍hexo\"></a>简单介绍hexo</h2><p><a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">hexo</a>是一个开源的静态博客生成器,用node.js开发,作者是台湾大学生tommy351。这篇文章主要介绍在windows平台上用node.js框架搭建blog的方法。</p>\n<h2 id=\"为什么使用静态博客\"><a href=\"#为什么使用静态博客\" class=\"headerlink\" title=\"为什么使用静态博客\"></a>为什么使用静态博客</h2><p>不少人选择在虚拟主机或vps上面搭建动态博客。但是这些主机商通常“免费的不稳定,稳定的不免费”。之前我图方便在淘宝上购买了香港的免备案服务器，除了网络带宽，流量受到限制，还随时会面临服务器商跑路的风险。如果我们能够找到这样的空间,在自己保留最大控制权前提下,由别人托管,会省去不少事情。 </p>\n<p>静态博客编译之后是纯html页面,优点就是支持它的环境十分好找,例如github、gitcafe、七牛云存储等站点都支持静态页面托管,自然是我们的首选了。我自己的<a href=\"hhb123.top\">博客</a>就是托管在github仓库上的。  </p>\n<p>但是静态博客并非没有缺点。动态博客更新文章时,脚本是不变的,只需要更新数据库。静态博客要频繁改动文件,不支持增量式上传的东西,比如ftp,就难于管理。此外,还要十分熟悉git各种命令,才能部署页面，接下来我们就开始blog的部署。</p>\n<h2 id=\"配置环境\"><a href=\"#配置环境\" class=\"headerlink\" title=\"配置环境\"></a>配置环境</h2><ul>\n<li>node.js框架</li>\n<li>gitbub账户&amp;仓库</li>\n<li>git  </li>\n<li>域名</li>\n</ul>\n<h2 id=\"开始搭建\"><a href=\"#开始搭建\" class=\"headerlink\" title=\"开始搭建\"></a>开始搭建</h2><h3 id=\"1-node-js框架的安装\"><a href=\"#1-node-js框架的安装\" class=\"headerlink\" title=\"1.node.js框架的安装\"></a>1.node.js框架的安装</h3><p>node.js框架的安装可以到<a href=\"http://nodejs.cn/download/\" target=\"_blank\" rel=\"noopener\">node.js官网</a>,对于windows平台，下载安装包之后直接点击安装即可.<br><img src=\"http://onep1caa3.bkt.clouddn.com/node.js%E4%B8%8B%E8%BD%BD.png\" alt=\"\"><br>安装完成以后按window+r，输入cmd打开命令行窗口，输入 <code>npm</code>，这时若弹出node.js 的使用指南说明安装完成。<br><img src=\"http://onep1caa3.bkt.clouddn.com/%E6%A3%80%E9%AA%8Cnode.js%E5%AE%89%E8%A3%85.png\" alt=\"\"></p>\n<h3 id=\"2-hexo的安装\"><a href=\"#2-hexo的安装\" class=\"headerlink\" title=\"2.hexo的安装\"></a>2.hexo的安装</h3><ul>\n<li>1.在命令提示窗口中使用命令  <code>npm install -g hexo</code><br>来安装 hexo。</li>\n<li>2.在你喜欢的位置创建文件夹用来存放网页内容，如：D/hexo，接着转到这个文件夹，使用命令提示行输入 hexo init。 这个文件夹就是你的 blog 的源文件夹;  </li>\n</ul>\n<ul>\n<li>3.生成静态页面，执行命令   <code>npm generate</code> （或者<code>npm g</code>);</li>\n<li>4.执行命令   <code>hexo server</code><br>在本地建立网站，默认端口为4000，打开任意浏览器，键入 <a href=\"http://localhost:4000\" target=\"_blank\" rel=\"noopener\">http://localhost:4000</a> (或者127.0.0.1：4000)，这是就可以在本地访问搭建好的网页了；<br><img src=\"http://onep1caa3.bkt.clouddn.com/hexo%20server.png\" alt=\"http://onep1caa3.bkt.clouddn.com/hexo%20server.png\"></li>\n</ul>\n<h3 id=\"3-github仓库的建立\"><a href=\"#3-github仓库的建立\" class=\"headerlink\" title=\"3.github仓库的建立\"></a>3.github仓库的建立</h3><p>github仓库的建立比较简单，大家可以参照<a href=\"http://www.cnblogs.com/keZhenxu94/p/5288488.html\" target=\"_blank\" rel=\"noopener\">这篇文章</a>；注意建立的仓库的名字必须与你自己的用户名对应，即仓库名必须为【your_user_name.github.io】。<br><img src=\"http://onep1caa3.bkt.clouddn.com/github%E4%BB%93%E5%BA%93.png\" alt=\"\"></p>\n<h3 id=\"4-准备将本地网站clone到你的github仓库中\"><a href=\"#4-准备将本地网站clone到你的github仓库中\" class=\"headerlink\" title=\"4.准备将本地网站clone到你的github仓库中\"></a>4.准备将本地网站clone到你的github仓库中</h3><p>  在本地预览自己的网页感觉没什么问题以后，就可以开始把自己的个人博客clone到github仓库上。  </p>\n<p>建立关联，需要修改之前建立网站的源文件夹的一个名为_config.yml的文件，这个文件可以用大多数文本编辑器打开，我用的是brackets，这个软件很适合初学者学习前端的基本知识，因为它有即时预览模式，在编辑网页的同时可以看到网页的变化。闲话不多说，打开这个文件之后，看到前面有些设置选项，这些暂时都不管，拉到最下面，添加如下代码   </p>\n<pre><code>deploy:\n\ntype: git\n\nrepo: https://github.com/hhb1994/hhb1994.github.io.git\n\nbranch: master  \n</code></pre><p> 其中repo后面跟的应该是你的github仓库的地址。请注意，type，repo，branch冒号后面一定要加一个半角空格，不加的话不能上传。之前没有注意到这个问题，弄了很久都没有成功。  </p>\n<h3 id=\"5-使用SSH登陆\"><a href=\"#5-使用SSH登陆\" class=\"headerlink\" title=\"5.使用SSH登陆\"></a>5.使用SSH登陆</h3><p>使用ssh可以免去每次更新网站都输入账户密码的麻烦，详细的本地生成ssh并绑定你的github账户的教程请看<a href=\"http://blog.csdn.net/keyboardota/article/details/7603630\" target=\"_blank\" rel=\"noopener\">这里</a>，需要注意的是，如果你有一个以上的仓库，必须把ssh绑定到你要上传网站的那个仓库里面，如果你直接从设置里面绑定，执行 <code>hexo deploy</code>时会报错。正确的做法时选择你上传网站的仓库，在这个仓库的setting里面绑定ssh。如果之前是全局绑定了ssh，需要先解绑，再在你选择的仓库进行绑定。<br><img src=\"http://onep1caa3.bkt.clouddn.com/ssh%E3%80%82github.png\" alt=\"\"></p>\n<h3 id=\"6-开始上传\"><a href=\"#6-开始上传\" class=\"headerlink\" title=\"6.开始上传\"></a>6.开始上传</h3><p>执行命令<br><code>hexo deploy</code>(或者<code>hexo d</code>)，就开始了上传流程，上传完毕之后，就可以打开网页hhb1994.github.io（换成你的仓库地址）访问你的博客了。  </p>\n<h2 id=\"域名的重定向\"><a href=\"#域名的重定向\" class=\"headerlink\" title=\"域名的重定向\"></a>域名的重定向</h2><p>如果你想把这个博客和你购买的域名绑定在一起（可以到万网购买域名，价格也比较实惠，在这里我是绑定万网购买的域名），请打开万网，登陆你的账户以后找到域名设置-域名解析，添加三条解析。</p>\n<ul>\n<li>1.记录类型：CNAME，主机记录：www，记录值：hhb1994924.github.io；</li>\n<li>2.记录类型：A，主机记录：@，记录值：192.30.252.154；</li>\n<li>3.记录类型：A，主机记录：@，记录值：192.30.252.153；<br><img src=\"http://onep1caa3.bkt.clouddn.com/%E6%B7%BB%E5%8A%A0%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90.png\" alt=\"\"></li>\n</ul>\n<p>添加之后，还需要在hexo/source中添加CNAME文件，文件名为CNAME，注意没有缩略名，用文本编辑器打开这个文件，输入hhb123.top(换成你自己购买的域名)，接着用命令提示行输入   </p>\n<pre><code>hexo clean  \n\nhexo deploy  \n</code></pre><p>稍等一会，就可以在浏览器输入hhb123.top来访问个人博客了。 </p>\n<h2 id=\"添加文章\"><a href=\"#添加文章\" class=\"headerlink\" title=\"添加文章\"></a>添加文章</h2><p>可以直接在D:\\hexo\\source_posts中添加.md文件，再执行   </p>\n<pre><code>hexo clean  \nhexo deploy\n</code></pre><p>就可以上传文章了，.md文件使用markdown格式，这种格式注重内容而不是形式，语法结构也比较简单，很快就可以学会，<a href=\"http://www.jianshu.com/p/q81RER\" target=\"_blank\" rel=\"noopener\">这里</a>有教程。编辑markdown格式的编辑器有很多，windows平台上的markpad，markdownpad都是不错的选择，另外还有一些网页上面的markdown编辑器，效果也不错。<br><img src=\"http://onep1caa3.bkt.clouddn.com/markpad.png\" alt=\"\"></p>\n<h2 id=\"更换主题-amp-个性化\"><a href=\"#更换主题-amp-个性化\" class=\"headerlink\" title=\"更换主题&amp;个性化\"></a>更换主题&amp;个性化</h2><p>  hexo提供了很方便的更换主题的方式，<a href=\"https://www.zhihu.com/question/24422335\" target=\"_blank\" rel=\"noopener\">选择你喜欢的主题</a>，打开存储你的网页的文件夹，然后使用命令提示行键入  </p>\n<p>  <code>git clone https://github.com/iissnan/hexo-theme-next themes/next</code>  </p>\n<p>  这样就可以把“next”主题的文件拷贝到hexo/themes文件夹了。<br>  接着在hexo文件夹的_config.ylm文件夹中找到主题设置，<br> <code>theme：landscape</code><br>  landscape是默认的主题，这里我们把默认的主题改为<br>  <code>theme：next</code><br>  接着执行    </p>\n<pre><code>hexo clean  \nhexo deploy  \n</code></pre><p>  就可以看到新主题的效果了，主题的设置在 D:\\hexo\\themes\\next_config.yml中。</p>\n"},{"title":"神器workflow介绍","_content":"## 神器workflow\n### workflow是什么\n\nWorkflow 是一款 iOS 端的付费应用，通过流程化自动处理各种事情，内置 150+ 动作，如开启相机、获取当前 GPS 位置、生成 PDF、打开 URL 链接、新建 EeverNote 笔记等等，只要能巧妙组合，搭配合理，几乎能实现使用者任何的复杂任务流程。前段时间Apple把workflow团队收购，这款软件从18RMB售价变为免费。将来Apple可能把workflow整合进ios11，简单来说，workflow在不越狱的情况下，可以完成在ios封闭环境下几乎不可能完成的任务。  \n\n举个例子，对于分享截图这一功能。虽然我早已能一气呵成地打出整套动作“手机截屏－打开照片.app－翻找截图－编辑图片－分享至他人－删除截屏”，但无奈的地方在于：其实整套动作中只有两个环节需要投入思考：“截图如何编辑？”＋“分享对象是谁？”，但仍不得不例行公事般重复其余操作，不仅毫无技术含量可言，更糟糕的是来回跳转 APP 总会生硬打断连贯性，效率低下。如果，在生活中你遇到类似的烦恼，那么肯定也曾幻想过有这么一款工具，能够帮助用户在手机上将重心集中在解决任务的关键步骤，而其他次要动作则直接自动执行，无需人为干预，进而达成任务目的，使之形成一套高效率的完整工作流（类似于 Apple 在 Mac 平台推出的 Automator）。这就是workflow的作用所在。它可以在一步操作的前提下帮你完成一整套上述操作。\n![](http://onep1caa3.bkt.clouddn.com/workflow.png)   \n\n------\n　\n### workflow的优点  \n\n* 效率为王：通过 Workflow 创建的工作流程，使得原本在手机上需要繁琐步骤才能完成的任务，现在很可能只需一键搞定；\n* 四通发达：Workflow 内置的 150+ 动作(不断更新中)涵盖了大部分手机功能，并进一步延伸至第三方 APP，如 开启相机、获取当前 GPS 位置、生成 PDF、打开 URL 链接、新建 EeverNote 笔记等等，只要能巧妙组合，搭配合理，几乎能实现使用者任何的复杂任务流程；\n* 化繁为简：图形化的美观界面将复杂的代码部分完全隐藏至背后，极大降低了使用门槛。通过简单的拖曳操作来设定想要实现的功能步骤，而无需用户懂得任何代码；\n* 凌波微步：创建后的任务流程可以保存至桌面、摆放至“共享”菜单中、甚至能将自己的作品共享至他人使用，极大拓宽了 Workflow 适用场景；\n* 大有可为：高级用户调用 Workflow 内置的特殊功能 ( SSH 运行脚本、API 等) 后，还能创造更多可能，如与对接并控制网站服务器。这也恰恰说明 Workflow 具有极强的拓展性。 \n\n------------  \n### 如何创建workflow工作流\n比如我要完成截屏-打开相册-选择照片-分享给好友-删除这一系列操作，使用workflow的话，我们需要先定义这个动作。即创建workflow工作流，下面是详细的步骤。  \n\n* 可以看到workflow会给出很多动作，我们的目标是选择相册最后一张图片分享给别人，第一步就是选择分享最后一张照片还是最后一张截图；\n* 由于ios权限设置，我们必须设置一个获得相片访问权限的步骤，接着获取相册最后一张图片，也就是第二步；\n![](http://onep1caa3.bkt.clouddn.com/workflow1.png)  \n* 接着选择分享方式，可以通过分享菜单或者airdrop分享；\n* 第四步就是分享；\n![](http://onep1caa3.bkt.clouddn.com/workflow2.png) \n* 分享完成之后就是删除照片的步骤了。\n![](http://onep1caa3.bkt.clouddn.com/workflow3.png)  \n##### 在保存这个工作流之后，我们只需要截屏，打开工作流widget，点击这个工作流，选择分享方式和分享对象，工作流就开始自己运作了，在分享完成之后，工作流会删除最后一张照片并自动关闭。 \n----------\n### 提供一些额外的工作流\nworkflow中有很多工作流，你也可以创作自己的工作流，分享自己的工作流，下面就是我收集的一些工作流，点击网址以后选择用workflow打开，添加工作流之后就可以使用了。workflow暂时不支持icloud同步，但是注册一个workflow账号在不同设备登陆也可以实现工作流的同步。  \n\n多用途通用视频下载 https://workflow.is/workflows/54f8d777636e430fb901d5a2e4ccfe56 多引擎搜索https://workflow.is/workflows/7921f8c6ca7b48529cfe9b8d0f17466d  图片处理   \n\n﻿\nhttps://workflow.is/workflows/89a39d40eb0543d29202e7e0a30f27bf﻿\n﻿\n快捷开关﻿\nhttps://workflow.is/workflows/fef60e8bed1446f6bf1284ddd6e3e05e﻿\n﻿\n多功能扫码工具箱﻿\nhttps://workflow.is/workflows/4bb0a613d4cb464e879050448f05fcfe多用途通用﻿\n﻿\n视频下载﻿\nhttps://workflow.is/workflows/54f8d777636e430fb901d5a2e4ccfe56﻿\n﻿\n多引擎搜索﻿\nhttps://workflow.is/workflows/7921f8c6ca7b48529cfe9b8d0f17466d﻿\n﻿\n图片处理﻿\nhttps://workflow.is/workflows/89a39d40eb0543d29202e7e0a30f27bf﻿\n﻿\n快捷开关﻿\nhttps://workflow.is/workflows/fef60e8bed1446f6bf1284ddd6e3e05e﻿\n﻿\n多功能扫码工具箱﻿\nhttps://workflow.is/workflows/4bb0a613d4cb464e879050448f05fcfe﻿\n﻿\n﻿\nworkflow下载类型  规则﻿\n﻿\n下载YouTube视频﻿\nhttps://workflow.is/workflows/73971870942c49da96cae6a490aea8e0﻿\n﻿\nhttps://workflow.is/workflows/617578d73f8244a5afed2a1665c8e320﻿\n﻿\n下载视频的tumblr﻿\nhttps://workflow.is/workflows/f8656cbb90524dffa1fe2eba8975946e﻿\n﻿\n展开网址的tumblr﻿\nhttps://workflow.is/workflows/62a9534d3ee1467080cd4136578d3d35﻿\n﻿\n下载Twitter的GIF﻿\nhttps://workflow.is/workflows/aa9821c4bce44b6f8febcbda6245c1f0﻿\n﻿\n获取Twitter的视频﻿\nhttps://workflow.is/workflows/087a0abf12c049dd9ab256afaec790c0﻿\n﻿\n从保存的Instagram﻿\nhttps://workflow.is/workflows/3a4f22ce8e794c7489a059224f3bc0b0﻿\n﻿\n应用图像至相机胶卷﻿\nhttps://workflow.is/workflows/613a8f5e6e714cc9aecaa4e76d981248﻿\n﻿\n新浪微博视频  先复制视频页地址 在运行﻿\nhttps://workflow.is/workflows/fd7fe0b7548046e689e9776b2182a8b1﻿\n﻿\n保存网页为pdf到ibook﻿\nhttps://workflow.is/workflows/2027271452ce4712853838f43550d326﻿\n﻿\n保存了几张照片﻿\nhttps://workflow.is/workflows/a6487b004917494b88fe0fc01f0ffbc6﻿\n﻿\n﻿\nworkflow分享类型  规则﻿\n﻿\n分享音乐到Instagram的﻿\nhttps://workflow.is/workflows/402507226b8844258dee694d58b126e9﻿\n﻿\n分享最新照片﻿\nhttps://workflow.is/workflows/5f9c56bfe6de447598a6d0440697c470﻿\n﻿\n分享音乐到Instagram的﻿\nhttps://workflow.is/workflows/402507226b8844258dee694d58b126e9﻿\n﻿\nworkflow备份类型  规则﻿\n﻿\nAB Backup备份﻿\nhttps://workflow.is/workflows/3db6bdcda3104b3b9bbaea8ddf655670﻿\n﻿\n备份workflow工作流﻿\nhttps://workflow.is/workflows/c5421ebe19bd4bf885da8b74d2cbaded﻿\n﻿\n保存到iCloud﻿\nhttps://workflow.is/workflows/08f3cc0e184844339eb2f5caa58a316b﻿\n﻿\nworkflow音乐类型  规则﻿\n﻿\n播放我的音乐﻿\nhttps://workflow.is/workflows/39d58771c84c4a50af50b3a0e1f7bda7﻿\n﻿\n加入我的音乐﻿\nhttps://workflow.is/workflows/5bf4367cdef74e3cbe5d4078bdac9882﻿\n﻿\n添加一些歌曲﻿\nhttps://workflow.is/workflows/c5f6d0b19e7e4463af581c0011860443﻿\n﻿\n获取歌曲信息﻿\nhttps://workflow.is/workflows/70900391fdd6423ab2e6d925abf148cc﻿\n﻿\n随机播放﻿\nhttps://workflow.is/workflows/7e2dab4135c24808b36a5384cde60b7d﻿\n﻿\n现在播放﻿\nhttps://workflow.is/workflows/3d954aa947474ed8b93d13f5b9d18625﻿\n﻿\nworkflow搜索类型  规则﻿\n﻿\n搜索电话号码﻿\nhttps://workflow.is/workflows/aa509941b57d48d4b51a0c2b1c06cf8c﻿\n﻿\n谷歌高级搜索﻿\nhttps://workflow.is/workflows/6e7e0853ae664c5ea7a0bae7dad6941e﻿\n﻿\n﻿\n自定义搜索﻿\nhttps://workflow.is/workflows/ac4b4abac0a2490e872b7134f5f9ca8a﻿\n﻿\nworkflow手电筒类型  规则﻿\n﻿\n﻿\n手电筒﻿\nhttps://workflow.is/workflows/31699d9bf6054e028c69286cdf932ce6﻿\n﻿\n莫尔斯电码编码器手电筒﻿\nhttps://workflow.is/workflows/3f723d2d0e0a4c45b920281cf7d30284﻿\n﻿\nworkflow距离类型  规则﻿\n﻿\n旅行距离﻿\nhttps://workflow.is/workflows/5e86637a392147449e7f0aebb3b18cf4﻿\n﻿\nBiking Distance（骑行距离）﻿\nhttps://workflow.is/workflows/90b54056340742f2bd24ed45f894d22e﻿\n﻿\nworkflow剪切板/书签类型  规则﻿\n﻿\n﻿\n剪切板列表﻿\nhttps://workflow.is/workflows/db3321f2eec84c4eb2caf29a6df81286﻿\n﻿\n剪贴板翻译﻿\nhttps://workflow.is/workflows/5de0062c54c041a386be048dd84fa361﻿\n﻿\n﻿\n复制到剪贴板﻿\nhttps://workflow.is/workflows/3242da310c4a45ec8270a09e49e6aa37﻿\n﻿\n书签﻿\nhttps://workflow.is/workflows/86a36fe10ac54a0cbe21c0016e762dee﻿\n﻿\n插接板书签离线﻿\nhttps://workflow.is/workflows/78e3d1afef39487db3d4a96d55e9a131﻿\n﻿\n﻿\nworkflow电池类型  规则﻿\n电池﻿\nhttps://workflow.is/workflows/febeed3ed07a4c78b9e77c2f48136a2a﻿\n﻿\n低功耗模式﻿\nhttps://workflow.is/workflows/640ae7eb22f143a093c77215a6e373e2﻿\n﻿\nworkflow未分类类  规则﻿\n﻿\nIP和位置﻿\n从通知中心中轻松找到你的IP和地理位置。﻿\nhttps://workflow.is/workflows/ea529c591a2740169388c0d2b8ca6505﻿\n﻿\n调整照片和删除原始﻿\n调整的原始照片，然后删除了原稿。非常适合在手机上节省磁盘空间。﻿\nhttps://workflow.is/workflows/014c0e9d263247979bc6a1c9894e07e4﻿\n﻿\n删除多张图片﻿\nhttps://workflow.is/workflows/c545d9c33b0f40d8a80712b282a19eb3﻿\n﻿\n更新浪涌/ shadowrocket主配置﻿\nhttps://workflow.is/workflows/55ecb14722f94d7c8c44ce3ce24d81c8﻿\n﻿\n计时器﻿\nhttps://workflow.is/workflows/93fd0318d0e14cdaa32c5d021effaa8b﻿\n﻿\n扩展和共享网址﻿\nhttps://workflow.is/workflows/acad8115a5564d6ea336b70b87dcab72﻿\n﻿\n合并PDF文件﻿\nhttps://workflow.is/workflows/adbb5f464fba4bc68a42a31bf91d1c4c﻿\n﻿\n抛硬币﻿\nhttps://workflow.is/workflows/4e37faab34864e1883c533754c788066﻿\n﻿\n货币换算﻿\nhttps://workflow.is/workflows/50f0132cbe654370bc35189e1cf31b86﻿\n﻿\n今天的天气﻿\nhttps://workflow.is/workflows/cf6db9a3c90c4bc7adec27f739480937﻿\n﻿\n翻译﻿\nhttps://workflow.is/workflows/a51df78f80414edf8469727f892d662d﻿\n﻿\n打开链接并复制密码﻿\nhttps://workflow.is/workflows/e5846d5f70db404a914db7c6ae07e6c8﻿\n﻿\n通知中心翻页﻿\nhttps://workflow.is/workflows/7afbf6fa09204e5e837d52cab41f0497﻿\n﻿\n读书打卡﻿\nhttps://workflow.is/workflows/051cbf0e7741444b88ba1c77d35bd08d﻿\n﻿\n﻿\n流量查询﻿\nhttps://workflow.is/workflows/068d7774623245a8849b5a051c41ee6d﻿\n﻿\n查询和访问﻿\nhttps://workflow.is/workflows/dd00747828a14ebfbddb9aac32432acd﻿\n﻿\n翻译文本﻿\nhttps://workflow.is/workflows/8d478a36a8eb41c782cbb74769eeb9b1﻿\n﻿\n安装字体﻿\nhttps://workflow.is/workflows/f9da142fe53946cd985459f96d2637e9﻿\n﻿\n网易音乐分享到推特﻿\nhttps://workflow.is/workflows/dc191b2487e147e489072c801592b10f﻿\n﻿\n通用下载﻿\nhttps://workflow.is/workflows/e645d621172347dabbe177fa24ef6a4b﻿\n﻿\n举报 iMessage 垃圾短信﻿\nhttps://workflow.is/workflows/98fa7fba0e104daab0c7473d3519cfcd﻿\n﻿\n分享最新一张图片﻿\nhttps://workflow.is/workflows/4b5e92f0777d4f59a37dbf2de267b79f﻿\n﻿\n扫描二维码﻿\nhttps://workflow.is/workflows/2be2c6a4cb1348c684d51075adba803b﻿\n﻿\n向同一个剪贴板里添加内容﻿\nhttps://workflow.is/workflows/40f931a7526d4243bb703571565edf9c\n\n","source":"_posts/2017.03.27workflow.md","raw":"----\ntitle: 神器workflow介绍\ncategories: 软件\ntags: [workflow]\n----\n## 神器workflow\n### workflow是什么\n\nWorkflow 是一款 iOS 端的付费应用，通过流程化自动处理各种事情，内置 150+ 动作，如开启相机、获取当前 GPS 位置、生成 PDF、打开 URL 链接、新建 EeverNote 笔记等等，只要能巧妙组合，搭配合理，几乎能实现使用者任何的复杂任务流程。前段时间Apple把workflow团队收购，这款软件从18RMB售价变为免费。将来Apple可能把workflow整合进ios11，简单来说，workflow在不越狱的情况下，可以完成在ios封闭环境下几乎不可能完成的任务。  \n\n举个例子，对于分享截图这一功能。虽然我早已能一气呵成地打出整套动作“手机截屏－打开照片.app－翻找截图－编辑图片－分享至他人－删除截屏”，但无奈的地方在于：其实整套动作中只有两个环节需要投入思考：“截图如何编辑？”＋“分享对象是谁？”，但仍不得不例行公事般重复其余操作，不仅毫无技术含量可言，更糟糕的是来回跳转 APP 总会生硬打断连贯性，效率低下。如果，在生活中你遇到类似的烦恼，那么肯定也曾幻想过有这么一款工具，能够帮助用户在手机上将重心集中在解决任务的关键步骤，而其他次要动作则直接自动执行，无需人为干预，进而达成任务目的，使之形成一套高效率的完整工作流（类似于 Apple 在 Mac 平台推出的 Automator）。这就是workflow的作用所在。它可以在一步操作的前提下帮你完成一整套上述操作。\n![](http://onep1caa3.bkt.clouddn.com/workflow.png)   \n\n------\n　\n### workflow的优点  \n\n* 效率为王：通过 Workflow 创建的工作流程，使得原本在手机上需要繁琐步骤才能完成的任务，现在很可能只需一键搞定；\n* 四通发达：Workflow 内置的 150+ 动作(不断更新中)涵盖了大部分手机功能，并进一步延伸至第三方 APP，如 开启相机、获取当前 GPS 位置、生成 PDF、打开 URL 链接、新建 EeverNote 笔记等等，只要能巧妙组合，搭配合理，几乎能实现使用者任何的复杂任务流程；\n* 化繁为简：图形化的美观界面将复杂的代码部分完全隐藏至背后，极大降低了使用门槛。通过简单的拖曳操作来设定想要实现的功能步骤，而无需用户懂得任何代码；\n* 凌波微步：创建后的任务流程可以保存至桌面、摆放至“共享”菜单中、甚至能将自己的作品共享至他人使用，极大拓宽了 Workflow 适用场景；\n* 大有可为：高级用户调用 Workflow 内置的特殊功能 ( SSH 运行脚本、API 等) 后，还能创造更多可能，如与对接并控制网站服务器。这也恰恰说明 Workflow 具有极强的拓展性。 \n\n------------  \n### 如何创建workflow工作流\n比如我要完成截屏-打开相册-选择照片-分享给好友-删除这一系列操作，使用workflow的话，我们需要先定义这个动作。即创建workflow工作流，下面是详细的步骤。  \n\n* 可以看到workflow会给出很多动作，我们的目标是选择相册最后一张图片分享给别人，第一步就是选择分享最后一张照片还是最后一张截图；\n* 由于ios权限设置，我们必须设置一个获得相片访问权限的步骤，接着获取相册最后一张图片，也就是第二步；\n![](http://onep1caa3.bkt.clouddn.com/workflow1.png)  \n* 接着选择分享方式，可以通过分享菜单或者airdrop分享；\n* 第四步就是分享；\n![](http://onep1caa3.bkt.clouddn.com/workflow2.png) \n* 分享完成之后就是删除照片的步骤了。\n![](http://onep1caa3.bkt.clouddn.com/workflow3.png)  \n##### 在保存这个工作流之后，我们只需要截屏，打开工作流widget，点击这个工作流，选择分享方式和分享对象，工作流就开始自己运作了，在分享完成之后，工作流会删除最后一张照片并自动关闭。 \n----------\n### 提供一些额外的工作流\nworkflow中有很多工作流，你也可以创作自己的工作流，分享自己的工作流，下面就是我收集的一些工作流，点击网址以后选择用workflow打开，添加工作流之后就可以使用了。workflow暂时不支持icloud同步，但是注册一个workflow账号在不同设备登陆也可以实现工作流的同步。  \n\n多用途通用视频下载 https://workflow.is/workflows/54f8d777636e430fb901d5a2e4ccfe56 多引擎搜索https://workflow.is/workflows/7921f8c6ca7b48529cfe9b8d0f17466d  图片处理   \n\n﻿\nhttps://workflow.is/workflows/89a39d40eb0543d29202e7e0a30f27bf﻿\n﻿\n快捷开关﻿\nhttps://workflow.is/workflows/fef60e8bed1446f6bf1284ddd6e3e05e﻿\n﻿\n多功能扫码工具箱﻿\nhttps://workflow.is/workflows/4bb0a613d4cb464e879050448f05fcfe多用途通用﻿\n﻿\n视频下载﻿\nhttps://workflow.is/workflows/54f8d777636e430fb901d5a2e4ccfe56﻿\n﻿\n多引擎搜索﻿\nhttps://workflow.is/workflows/7921f8c6ca7b48529cfe9b8d0f17466d﻿\n﻿\n图片处理﻿\nhttps://workflow.is/workflows/89a39d40eb0543d29202e7e0a30f27bf﻿\n﻿\n快捷开关﻿\nhttps://workflow.is/workflows/fef60e8bed1446f6bf1284ddd6e3e05e﻿\n﻿\n多功能扫码工具箱﻿\nhttps://workflow.is/workflows/4bb0a613d4cb464e879050448f05fcfe﻿\n﻿\n﻿\nworkflow下载类型  规则﻿\n﻿\n下载YouTube视频﻿\nhttps://workflow.is/workflows/73971870942c49da96cae6a490aea8e0﻿\n﻿\nhttps://workflow.is/workflows/617578d73f8244a5afed2a1665c8e320﻿\n﻿\n下载视频的tumblr﻿\nhttps://workflow.is/workflows/f8656cbb90524dffa1fe2eba8975946e﻿\n﻿\n展开网址的tumblr﻿\nhttps://workflow.is/workflows/62a9534d3ee1467080cd4136578d3d35﻿\n﻿\n下载Twitter的GIF﻿\nhttps://workflow.is/workflows/aa9821c4bce44b6f8febcbda6245c1f0﻿\n﻿\n获取Twitter的视频﻿\nhttps://workflow.is/workflows/087a0abf12c049dd9ab256afaec790c0﻿\n﻿\n从保存的Instagram﻿\nhttps://workflow.is/workflows/3a4f22ce8e794c7489a059224f3bc0b0﻿\n﻿\n应用图像至相机胶卷﻿\nhttps://workflow.is/workflows/613a8f5e6e714cc9aecaa4e76d981248﻿\n﻿\n新浪微博视频  先复制视频页地址 在运行﻿\nhttps://workflow.is/workflows/fd7fe0b7548046e689e9776b2182a8b1﻿\n﻿\n保存网页为pdf到ibook﻿\nhttps://workflow.is/workflows/2027271452ce4712853838f43550d326﻿\n﻿\n保存了几张照片﻿\nhttps://workflow.is/workflows/a6487b004917494b88fe0fc01f0ffbc6﻿\n﻿\n﻿\nworkflow分享类型  规则﻿\n﻿\n分享音乐到Instagram的﻿\nhttps://workflow.is/workflows/402507226b8844258dee694d58b126e9﻿\n﻿\n分享最新照片﻿\nhttps://workflow.is/workflows/5f9c56bfe6de447598a6d0440697c470﻿\n﻿\n分享音乐到Instagram的﻿\nhttps://workflow.is/workflows/402507226b8844258dee694d58b126e9﻿\n﻿\nworkflow备份类型  规则﻿\n﻿\nAB Backup备份﻿\nhttps://workflow.is/workflows/3db6bdcda3104b3b9bbaea8ddf655670﻿\n﻿\n备份workflow工作流﻿\nhttps://workflow.is/workflows/c5421ebe19bd4bf885da8b74d2cbaded﻿\n﻿\n保存到iCloud﻿\nhttps://workflow.is/workflows/08f3cc0e184844339eb2f5caa58a316b﻿\n﻿\nworkflow音乐类型  规则﻿\n﻿\n播放我的音乐﻿\nhttps://workflow.is/workflows/39d58771c84c4a50af50b3a0e1f7bda7﻿\n﻿\n加入我的音乐﻿\nhttps://workflow.is/workflows/5bf4367cdef74e3cbe5d4078bdac9882﻿\n﻿\n添加一些歌曲﻿\nhttps://workflow.is/workflows/c5f6d0b19e7e4463af581c0011860443﻿\n﻿\n获取歌曲信息﻿\nhttps://workflow.is/workflows/70900391fdd6423ab2e6d925abf148cc﻿\n﻿\n随机播放﻿\nhttps://workflow.is/workflows/7e2dab4135c24808b36a5384cde60b7d﻿\n﻿\n现在播放﻿\nhttps://workflow.is/workflows/3d954aa947474ed8b93d13f5b9d18625﻿\n﻿\nworkflow搜索类型  规则﻿\n﻿\n搜索电话号码﻿\nhttps://workflow.is/workflows/aa509941b57d48d4b51a0c2b1c06cf8c﻿\n﻿\n谷歌高级搜索﻿\nhttps://workflow.is/workflows/6e7e0853ae664c5ea7a0bae7dad6941e﻿\n﻿\n﻿\n自定义搜索﻿\nhttps://workflow.is/workflows/ac4b4abac0a2490e872b7134f5f9ca8a﻿\n﻿\nworkflow手电筒类型  规则﻿\n﻿\n﻿\n手电筒﻿\nhttps://workflow.is/workflows/31699d9bf6054e028c69286cdf932ce6﻿\n﻿\n莫尔斯电码编码器手电筒﻿\nhttps://workflow.is/workflows/3f723d2d0e0a4c45b920281cf7d30284﻿\n﻿\nworkflow距离类型  规则﻿\n﻿\n旅行距离﻿\nhttps://workflow.is/workflows/5e86637a392147449e7f0aebb3b18cf4﻿\n﻿\nBiking Distance（骑行距离）﻿\nhttps://workflow.is/workflows/90b54056340742f2bd24ed45f894d22e﻿\n﻿\nworkflow剪切板/书签类型  规则﻿\n﻿\n﻿\n剪切板列表﻿\nhttps://workflow.is/workflows/db3321f2eec84c4eb2caf29a6df81286﻿\n﻿\n剪贴板翻译﻿\nhttps://workflow.is/workflows/5de0062c54c041a386be048dd84fa361﻿\n﻿\n﻿\n复制到剪贴板﻿\nhttps://workflow.is/workflows/3242da310c4a45ec8270a09e49e6aa37﻿\n﻿\n书签﻿\nhttps://workflow.is/workflows/86a36fe10ac54a0cbe21c0016e762dee﻿\n﻿\n插接板书签离线﻿\nhttps://workflow.is/workflows/78e3d1afef39487db3d4a96d55e9a131﻿\n﻿\n﻿\nworkflow电池类型  规则﻿\n电池﻿\nhttps://workflow.is/workflows/febeed3ed07a4c78b9e77c2f48136a2a﻿\n﻿\n低功耗模式﻿\nhttps://workflow.is/workflows/640ae7eb22f143a093c77215a6e373e2﻿\n﻿\nworkflow未分类类  规则﻿\n﻿\nIP和位置﻿\n从通知中心中轻松找到你的IP和地理位置。﻿\nhttps://workflow.is/workflows/ea529c591a2740169388c0d2b8ca6505﻿\n﻿\n调整照片和删除原始﻿\n调整的原始照片，然后删除了原稿。非常适合在手机上节省磁盘空间。﻿\nhttps://workflow.is/workflows/014c0e9d263247979bc6a1c9894e07e4﻿\n﻿\n删除多张图片﻿\nhttps://workflow.is/workflows/c545d9c33b0f40d8a80712b282a19eb3﻿\n﻿\n更新浪涌/ shadowrocket主配置﻿\nhttps://workflow.is/workflows/55ecb14722f94d7c8c44ce3ce24d81c8﻿\n﻿\n计时器﻿\nhttps://workflow.is/workflows/93fd0318d0e14cdaa32c5d021effaa8b﻿\n﻿\n扩展和共享网址﻿\nhttps://workflow.is/workflows/acad8115a5564d6ea336b70b87dcab72﻿\n﻿\n合并PDF文件﻿\nhttps://workflow.is/workflows/adbb5f464fba4bc68a42a31bf91d1c4c﻿\n﻿\n抛硬币﻿\nhttps://workflow.is/workflows/4e37faab34864e1883c533754c788066﻿\n﻿\n货币换算﻿\nhttps://workflow.is/workflows/50f0132cbe654370bc35189e1cf31b86﻿\n﻿\n今天的天气﻿\nhttps://workflow.is/workflows/cf6db9a3c90c4bc7adec27f739480937﻿\n﻿\n翻译﻿\nhttps://workflow.is/workflows/a51df78f80414edf8469727f892d662d﻿\n﻿\n打开链接并复制密码﻿\nhttps://workflow.is/workflows/e5846d5f70db404a914db7c6ae07e6c8﻿\n﻿\n通知中心翻页﻿\nhttps://workflow.is/workflows/7afbf6fa09204e5e837d52cab41f0497﻿\n﻿\n读书打卡﻿\nhttps://workflow.is/workflows/051cbf0e7741444b88ba1c77d35bd08d﻿\n﻿\n﻿\n流量查询﻿\nhttps://workflow.is/workflows/068d7774623245a8849b5a051c41ee6d﻿\n﻿\n查询和访问﻿\nhttps://workflow.is/workflows/dd00747828a14ebfbddb9aac32432acd﻿\n﻿\n翻译文本﻿\nhttps://workflow.is/workflows/8d478a36a8eb41c782cbb74769eeb9b1﻿\n﻿\n安装字体﻿\nhttps://workflow.is/workflows/f9da142fe53946cd985459f96d2637e9﻿\n﻿\n网易音乐分享到推特﻿\nhttps://workflow.is/workflows/dc191b2487e147e489072c801592b10f﻿\n﻿\n通用下载﻿\nhttps://workflow.is/workflows/e645d621172347dabbe177fa24ef6a4b﻿\n﻿\n举报 iMessage 垃圾短信﻿\nhttps://workflow.is/workflows/98fa7fba0e104daab0c7473d3519cfcd﻿\n﻿\n分享最新一张图片﻿\nhttps://workflow.is/workflows/4b5e92f0777d4f59a37dbf2de267b79f﻿\n﻿\n扫描二维码﻿\nhttps://workflow.is/workflows/2be2c6a4cb1348c684d51075adba803b﻿\n﻿\n向同一个剪贴板里添加内容﻿\nhttps://workflow.is/workflows/40f931a7526d4243bb703571565edf9c\n\n","slug":"2017.03.27workflow","published":1,"date":"2017-03-27T12:14:02.000Z","updated":"2017-03-27T12:14:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziipt0006rh9zgvb40quz","content":"<h2 id=\"神器workflow\"><a href=\"#神器workflow\" class=\"headerlink\" title=\"神器workflow\"></a>神器workflow</h2><h3 id=\"workflow是什么\"><a href=\"#workflow是什么\" class=\"headerlink\" title=\"workflow是什么\"></a>workflow是什么</h3><p>Workflow 是一款 iOS 端的付费应用，通过流程化自动处理各种事情，内置 150+ 动作，如开启相机、获取当前 GPS 位置、生成 PDF、打开 URL 链接、新建 EeverNote 笔记等等，只要能巧妙组合，搭配合理，几乎能实现使用者任何的复杂任务流程。前段时间Apple把workflow团队收购，这款软件从18RMB售价变为免费。将来Apple可能把workflow整合进ios11，简单来说，workflow在不越狱的情况下，可以完成在ios封闭环境下几乎不可能完成的任务。  </p>\n<p>举个例子，对于分享截图这一功能。虽然我早已能一气呵成地打出整套动作“手机截屏－打开照片.app－翻找截图－编辑图片－分享至他人－删除截屏”，但无奈的地方在于：其实整套动作中只有两个环节需要投入思考：“截图如何编辑？”＋“分享对象是谁？”，但仍不得不例行公事般重复其余操作，不仅毫无技术含量可言，更糟糕的是来回跳转 APP 总会生硬打断连贯性，效率低下。如果，在生活中你遇到类似的烦恼，那么肯定也曾幻想过有这么一款工具，能够帮助用户在手机上将重心集中在解决任务的关键步骤，而其他次要动作则直接自动执行，无需人为干预，进而达成任务目的，使之形成一套高效率的完整工作流（类似于 Apple 在 Mac 平台推出的 Automator）。这就是workflow的作用所在。它可以在一步操作的前提下帮你完成一整套上述操作。<br><img src=\"http://onep1caa3.bkt.clouddn.com/workflow.png\" alt=\"\">   </p>\n<hr>\n<p>　</p>\n<h3 id=\"workflow的优点\"><a href=\"#workflow的优点\" class=\"headerlink\" title=\"workflow的优点\"></a>workflow的优点</h3><ul>\n<li>效率为王：通过 Workflow 创建的工作流程，使得原本在手机上需要繁琐步骤才能完成的任务，现在很可能只需一键搞定；</li>\n<li>四通发达：Workflow 内置的 150+ 动作(不断更新中)涵盖了大部分手机功能，并进一步延伸至第三方 APP，如 开启相机、获取当前 GPS 位置、生成 PDF、打开 URL 链接、新建 EeverNote 笔记等等，只要能巧妙组合，搭配合理，几乎能实现使用者任何的复杂任务流程；</li>\n<li>化繁为简：图形化的美观界面将复杂的代码部分完全隐藏至背后，极大降低了使用门槛。通过简单的拖曳操作来设定想要实现的功能步骤，而无需用户懂得任何代码；</li>\n<li>凌波微步：创建后的任务流程可以保存至桌面、摆放至“共享”菜单中、甚至能将自己的作品共享至他人使用，极大拓宽了 Workflow 适用场景；</li>\n<li>大有可为：高级用户调用 Workflow 内置的特殊功能 ( SSH 运行脚本、API 等) 后，还能创造更多可能，如与对接并控制网站服务器。这也恰恰说明 Workflow 具有极强的拓展性。 </li>\n</ul>\n<hr>\n<h3 id=\"如何创建workflow工作流\"><a href=\"#如何创建workflow工作流\" class=\"headerlink\" title=\"如何创建workflow工作流\"></a>如何创建workflow工作流</h3><p>比如我要完成截屏-打开相册-选择照片-分享给好友-删除这一系列操作，使用workflow的话，我们需要先定义这个动作。即创建workflow工作流，下面是详细的步骤。  </p>\n<ul>\n<li>可以看到workflow会给出很多动作，我们的目标是选择相册最后一张图片分享给别人，第一步就是选择分享最后一张照片还是最后一张截图；</li>\n<li>由于ios权限设置，我们必须设置一个获得相片访问权限的步骤，接着获取相册最后一张图片，也就是第二步；<br><img src=\"http://onep1caa3.bkt.clouddn.com/workflow1.png\" alt=\"\">  </li>\n<li>接着选择分享方式，可以通过分享菜单或者airdrop分享；</li>\n<li>第四步就是分享；<br><img src=\"http://onep1caa3.bkt.clouddn.com/workflow2.png\" alt=\"\"> </li>\n<li>分享完成之后就是删除照片的步骤了。<br><img src=\"http://onep1caa3.bkt.clouddn.com/workflow3.png\" alt=\"\">  <h5 id=\"在保存这个工作流之后，我们只需要截屏，打开工作流widget，点击这个工作流，选择分享方式和分享对象，工作流就开始自己运作了，在分享完成之后，工作流会删除最后一张照片并自动关闭。\"><a href=\"#在保存这个工作流之后，我们只需要截屏，打开工作流widget，点击这个工作流，选择分享方式和分享对象，工作流就开始自己运作了，在分享完成之后，工作流会删除最后一张照片并自动关闭。\" class=\"headerlink\" title=\"在保存这个工作流之后，我们只需要截屏，打开工作流widget，点击这个工作流，选择分享方式和分享对象，工作流就开始自己运作了，在分享完成之后，工作流会删除最后一张照片并自动关闭。\"></a>在保存这个工作流之后，我们只需要截屏，打开工作流widget，点击这个工作流，选择分享方式和分享对象，工作流就开始自己运作了，在分享完成之后，工作流会删除最后一张照片并自动关闭。</h5></li>\n</ul>\n<hr>\n<h3 id=\"提供一些额外的工作流\"><a href=\"#提供一些额外的工作流\" class=\"headerlink\" title=\"提供一些额外的工作流\"></a>提供一些额外的工作流</h3><p>workflow中有很多工作流，你也可以创作自己的工作流，分享自己的工作流，下面就是我收集的一些工作流，点击网址以后选择用workflow打开，添加工作流之后就可以使用了。workflow暂时不支持icloud同步，但是注册一个workflow账号在不同设备登陆也可以实现工作流的同步。  </p>\n<p>多用途通用视频下载 <a href=\"https://workflow.is/workflows/54f8d777636e430fb901d5a2e4ccfe56\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/54f8d777636e430fb901d5a2e4ccfe56</a> 多引擎搜索<a href=\"https://workflow.is/workflows/7921f8c6ca7b48529cfe9b8d0f17466d\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/7921f8c6ca7b48529cfe9b8d0f17466d</a>  图片处理   </p>\n<p>﻿<br><a href=\"https://workflow.is/workflows/89a39d40eb0543d29202e7e0a30f27bf\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/89a39d40eb0543d29202e7e0a30f27bf</a>﻿<br>﻿<br>快捷开关﻿<br><a href=\"https://workflow.is/workflows/fef60e8bed1446f6bf1284ddd6e3e05e\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/fef60e8bed1446f6bf1284ddd6e3e05e</a>﻿<br>﻿<br>多功能扫码工具箱﻿<br><a href=\"https://workflow.is/workflows/4bb0a613d4cb464e879050448f05fcfe多用途通用\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/4bb0a613d4cb464e879050448f05fcfe多用途通用</a>﻿<br>﻿<br>视频下载﻿<br><a href=\"https://workflow.is/workflows/54f8d777636e430fb901d5a2e4ccfe56\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/54f8d777636e430fb901d5a2e4ccfe56</a>﻿<br>﻿<br>多引擎搜索﻿<br><a href=\"https://workflow.is/workflows/7921f8c6ca7b48529cfe9b8d0f17466d\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/7921f8c6ca7b48529cfe9b8d0f17466d</a>﻿<br>﻿<br>图片处理﻿<br><a href=\"https://workflow.is/workflows/89a39d40eb0543d29202e7e0a30f27bf\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/89a39d40eb0543d29202e7e0a30f27bf</a>﻿<br>﻿<br>快捷开关﻿<br><a href=\"https://workflow.is/workflows/fef60e8bed1446f6bf1284ddd6e3e05e\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/fef60e8bed1446f6bf1284ddd6e3e05e</a>﻿<br>﻿<br>多功能扫码工具箱﻿<br><a href=\"https://workflow.is/workflows/4bb0a613d4cb464e879050448f05fcfe\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/4bb0a613d4cb464e879050448f05fcfe</a>﻿<br>﻿<br>﻿<br>workflow下载类型  规则﻿<br>﻿<br>下载YouTube视频﻿<br><a href=\"https://workflow.is/workflows/73971870942c49da96cae6a490aea8e0\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/73971870942c49da96cae6a490aea8e0</a>﻿<br>﻿<br><a href=\"https://workflow.is/workflows/617578d73f8244a5afed2a1665c8e320\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/617578d73f8244a5afed2a1665c8e320</a>﻿<br>﻿<br>下载视频的tumblr﻿<br><a href=\"https://workflow.is/workflows/f8656cbb90524dffa1fe2eba8975946e\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/f8656cbb90524dffa1fe2eba8975946e</a>﻿<br>﻿<br>展开网址的tumblr﻿<br><a href=\"https://workflow.is/workflows/62a9534d3ee1467080cd4136578d3d35\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/62a9534d3ee1467080cd4136578d3d35</a>﻿<br>﻿<br>下载Twitter的GIF﻿<br><a href=\"https://workflow.is/workflows/aa9821c4bce44b6f8febcbda6245c1f0\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/aa9821c4bce44b6f8febcbda6245c1f0</a>﻿<br>﻿<br>获取Twitter的视频﻿<br><a href=\"https://workflow.is/workflows/087a0abf12c049dd9ab256afaec790c0\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/087a0abf12c049dd9ab256afaec790c0</a>﻿<br>﻿<br>从保存的Instagram﻿<br><a href=\"https://workflow.is/workflows/3a4f22ce8e794c7489a059224f3bc0b0\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/3a4f22ce8e794c7489a059224f3bc0b0</a>﻿<br>﻿<br>应用图像至相机胶卷﻿<br><a href=\"https://workflow.is/workflows/613a8f5e6e714cc9aecaa4e76d981248\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/613a8f5e6e714cc9aecaa4e76d981248</a>﻿<br>﻿<br>新浪微博视频  先复制视频页地址 在运行﻿<br><a href=\"https://workflow.is/workflows/fd7fe0b7548046e689e9776b2182a8b1\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/fd7fe0b7548046e689e9776b2182a8b1</a>﻿<br>﻿<br>保存网页为pdf到ibook﻿<br><a href=\"https://workflow.is/workflows/2027271452ce4712853838f43550d326\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/2027271452ce4712853838f43550d326</a>﻿<br>﻿<br>保存了几张照片﻿<br><a href=\"https://workflow.is/workflows/a6487b004917494b88fe0fc01f0ffbc6\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/a6487b004917494b88fe0fc01f0ffbc6</a>﻿<br>﻿<br>﻿<br>workflow分享类型  规则﻿<br>﻿<br>分享音乐到Instagram的﻿<br><a href=\"https://workflow.is/workflows/402507226b8844258dee694d58b126e9\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/402507226b8844258dee694d58b126e9</a>﻿<br>﻿<br>分享最新照片﻿<br><a href=\"https://workflow.is/workflows/5f9c56bfe6de447598a6d0440697c470\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/5f9c56bfe6de447598a6d0440697c470</a>﻿<br>﻿<br>分享音乐到Instagram的﻿<br><a href=\"https://workflow.is/workflows/402507226b8844258dee694d58b126e9\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/402507226b8844258dee694d58b126e9</a>﻿<br>﻿<br>workflow备份类型  规则﻿<br>﻿<br>AB Backup备份﻿<br><a href=\"https://workflow.is/workflows/3db6bdcda3104b3b9bbaea8ddf655670\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/3db6bdcda3104b3b9bbaea8ddf655670</a>﻿<br>﻿<br>备份workflow工作流﻿<br><a href=\"https://workflow.is/workflows/c5421ebe19bd4bf885da8b74d2cbaded\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/c5421ebe19bd4bf885da8b74d2cbaded</a>﻿<br>﻿<br>保存到iCloud﻿<br><a href=\"https://workflow.is/workflows/08f3cc0e184844339eb2f5caa58a316b\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/08f3cc0e184844339eb2f5caa58a316b</a>﻿<br>﻿<br>workflow音乐类型  规则﻿<br>﻿<br>播放我的音乐﻿<br><a href=\"https://workflow.is/workflows/39d58771c84c4a50af50b3a0e1f7bda7\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/39d58771c84c4a50af50b3a0e1f7bda7</a>﻿<br>﻿<br>加入我的音乐﻿<br><a href=\"https://workflow.is/workflows/5bf4367cdef74e3cbe5d4078bdac9882\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/5bf4367cdef74e3cbe5d4078bdac9882</a>﻿<br>﻿<br>添加一些歌曲﻿<br><a href=\"https://workflow.is/workflows/c5f6d0b19e7e4463af581c0011860443\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/c5f6d0b19e7e4463af581c0011860443</a>﻿<br>﻿<br>获取歌曲信息﻿<br><a href=\"https://workflow.is/workflows/70900391fdd6423ab2e6d925abf148cc\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/70900391fdd6423ab2e6d925abf148cc</a>﻿<br>﻿<br>随机播放﻿<br><a href=\"https://workflow.is/workflows/7e2dab4135c24808b36a5384cde60b7d\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/7e2dab4135c24808b36a5384cde60b7d</a>﻿<br>﻿<br>现在播放﻿<br><a href=\"https://workflow.is/workflows/3d954aa947474ed8b93d13f5b9d18625\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/3d954aa947474ed8b93d13f5b9d18625</a>﻿<br>﻿<br>workflow搜索类型  规则﻿<br>﻿<br>搜索电话号码﻿<br><a href=\"https://workflow.is/workflows/aa509941b57d48d4b51a0c2b1c06cf8c\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/aa509941b57d48d4b51a0c2b1c06cf8c</a>﻿<br>﻿<br>谷歌高级搜索﻿<br><a href=\"https://workflow.is/workflows/6e7e0853ae664c5ea7a0bae7dad6941e\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/6e7e0853ae664c5ea7a0bae7dad6941e</a>﻿<br>﻿<br>﻿<br>自定义搜索﻿<br><a href=\"https://workflow.is/workflows/ac4b4abac0a2490e872b7134f5f9ca8a\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/ac4b4abac0a2490e872b7134f5f9ca8a</a>﻿<br>﻿<br>workflow手电筒类型  规则﻿<br>﻿<br>﻿<br>手电筒﻿<br><a href=\"https://workflow.is/workflows/31699d9bf6054e028c69286cdf932ce6\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/31699d9bf6054e028c69286cdf932ce6</a>﻿<br>﻿<br>莫尔斯电码编码器手电筒﻿<br><a href=\"https://workflow.is/workflows/3f723d2d0e0a4c45b920281cf7d30284\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/3f723d2d0e0a4c45b920281cf7d30284</a>﻿<br>﻿<br>workflow距离类型  规则﻿<br>﻿<br>旅行距离﻿<br><a href=\"https://workflow.is/workflows/5e86637a392147449e7f0aebb3b18cf4\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/5e86637a392147449e7f0aebb3b18cf4</a>﻿<br>﻿<br>Biking Distance（骑行距离）﻿<br><a href=\"https://workflow.is/workflows/90b54056340742f2bd24ed45f894d22e\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/90b54056340742f2bd24ed45f894d22e</a>﻿<br>﻿<br>workflow剪切板/书签类型  规则﻿<br>﻿<br>﻿<br>剪切板列表﻿<br><a href=\"https://workflow.is/workflows/db3321f2eec84c4eb2caf29a6df81286\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/db3321f2eec84c4eb2caf29a6df81286</a>﻿<br>﻿<br>剪贴板翻译﻿<br><a href=\"https://workflow.is/workflows/5de0062c54c041a386be048dd84fa361\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/5de0062c54c041a386be048dd84fa361</a>﻿<br>﻿<br>﻿<br>复制到剪贴板﻿<br><a href=\"https://workflow.is/workflows/3242da310c4a45ec8270a09e49e6aa37\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/3242da310c4a45ec8270a09e49e6aa37</a>﻿<br>﻿<br>书签﻿<br><a href=\"https://workflow.is/workflows/86a36fe10ac54a0cbe21c0016e762dee\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/86a36fe10ac54a0cbe21c0016e762dee</a>﻿<br>﻿<br>插接板书签离线﻿<br><a href=\"https://workflow.is/workflows/78e3d1afef39487db3d4a96d55e9a131\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/78e3d1afef39487db3d4a96d55e9a131</a>﻿<br>﻿<br>﻿<br>workflow电池类型  规则﻿<br>电池﻿<br><a href=\"https://workflow.is/workflows/febeed3ed07a4c78b9e77c2f48136a2a\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/febeed3ed07a4c78b9e77c2f48136a2a</a>﻿<br>﻿<br>低功耗模式﻿<br><a href=\"https://workflow.is/workflows/640ae7eb22f143a093c77215a6e373e2\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/640ae7eb22f143a093c77215a6e373e2</a>﻿<br>﻿<br>workflow未分类类  规则﻿<br>﻿<br>IP和位置﻿<br>从通知中心中轻松找到你的IP和地理位置。﻿<br><a href=\"https://workflow.is/workflows/ea529c591a2740169388c0d2b8ca6505\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/ea529c591a2740169388c0d2b8ca6505</a>﻿<br>﻿<br>调整照片和删除原始﻿<br>调整的原始照片，然后删除了原稿。非常适合在手机上节省磁盘空间。﻿<br><a href=\"https://workflow.is/workflows/014c0e9d263247979bc6a1c9894e07e4\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/014c0e9d263247979bc6a1c9894e07e4</a>﻿<br>﻿<br>删除多张图片﻿<br><a href=\"https://workflow.is/workflows/c545d9c33b0f40d8a80712b282a19eb3\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/c545d9c33b0f40d8a80712b282a19eb3</a>﻿<br>﻿<br>更新浪涌/ shadowrocket主配置﻿<br><a href=\"https://workflow.is/workflows/55ecb14722f94d7c8c44ce3ce24d81c8\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/55ecb14722f94d7c8c44ce3ce24d81c8</a>﻿<br>﻿<br>计时器﻿<br><a href=\"https://workflow.is/workflows/93fd0318d0e14cdaa32c5d021effaa8b\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/93fd0318d0e14cdaa32c5d021effaa8b</a>﻿<br>﻿<br>扩展和共享网址﻿<br><a href=\"https://workflow.is/workflows/acad8115a5564d6ea336b70b87dcab72\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/acad8115a5564d6ea336b70b87dcab72</a>﻿<br>﻿<br>合并PDF文件﻿<br><a href=\"https://workflow.is/workflows/adbb5f464fba4bc68a42a31bf91d1c4c\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/adbb5f464fba4bc68a42a31bf91d1c4c</a>﻿<br>﻿<br>抛硬币﻿<br><a href=\"https://workflow.is/workflows/4e37faab34864e1883c533754c788066\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/4e37faab34864e1883c533754c788066</a>﻿<br>﻿<br>货币换算﻿<br><a href=\"https://workflow.is/workflows/50f0132cbe654370bc35189e1cf31b86\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/50f0132cbe654370bc35189e1cf31b86</a>﻿<br>﻿<br>今天的天气﻿<br><a href=\"https://workflow.is/workflows/cf6db9a3c90c4bc7adec27f739480937\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/cf6db9a3c90c4bc7adec27f739480937</a>﻿<br>﻿<br>翻译﻿<br><a href=\"https://workflow.is/workflows/a51df78f80414edf8469727f892d662d\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/a51df78f80414edf8469727f892d662d</a>﻿<br>﻿<br>打开链接并复制密码﻿<br><a href=\"https://workflow.is/workflows/e5846d5f70db404a914db7c6ae07e6c8\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/e5846d5f70db404a914db7c6ae07e6c8</a>﻿<br>﻿<br>通知中心翻页﻿<br><a href=\"https://workflow.is/workflows/7afbf6fa09204e5e837d52cab41f0497\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/7afbf6fa09204e5e837d52cab41f0497</a>﻿<br>﻿<br>读书打卡﻿<br><a href=\"https://workflow.is/workflows/051cbf0e7741444b88ba1c77d35bd08d\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/051cbf0e7741444b88ba1c77d35bd08d</a>﻿<br>﻿<br>﻿<br>流量查询﻿<br><a href=\"https://workflow.is/workflows/068d7774623245a8849b5a051c41ee6d\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/068d7774623245a8849b5a051c41ee6d</a>﻿<br>﻿<br>查询和访问﻿<br><a href=\"https://workflow.is/workflows/dd00747828a14ebfbddb9aac32432acd\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/dd00747828a14ebfbddb9aac32432acd</a>﻿<br>﻿<br>翻译文本﻿<br><a href=\"https://workflow.is/workflows/8d478a36a8eb41c782cbb74769eeb9b1\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/8d478a36a8eb41c782cbb74769eeb9b1</a>﻿<br>﻿<br>安装字体﻿<br><a href=\"https://workflow.is/workflows/f9da142fe53946cd985459f96d2637e9\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/f9da142fe53946cd985459f96d2637e9</a>﻿<br>﻿<br>网易音乐分享到推特﻿<br><a href=\"https://workflow.is/workflows/dc191b2487e147e489072c801592b10f\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/dc191b2487e147e489072c801592b10f</a>﻿<br>﻿<br>通用下载﻿<br><a href=\"https://workflow.is/workflows/e645d621172347dabbe177fa24ef6a4b\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/e645d621172347dabbe177fa24ef6a4b</a>﻿<br>﻿<br>举报 iMessage 垃圾短信﻿<br><a href=\"https://workflow.is/workflows/98fa7fba0e104daab0c7473d3519cfcd\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/98fa7fba0e104daab0c7473d3519cfcd</a>﻿<br>﻿<br>分享最新一张图片﻿<br><a href=\"https://workflow.is/workflows/4b5e92f0777d4f59a37dbf2de267b79f\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/4b5e92f0777d4f59a37dbf2de267b79f</a>﻿<br>﻿<br>扫描二维码﻿<br><a href=\"https://workflow.is/workflows/2be2c6a4cb1348c684d51075adba803b\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/2be2c6a4cb1348c684d51075adba803b</a>﻿<br>﻿<br>向同一个剪贴板里添加内容﻿<br><a href=\"https://workflow.is/workflows/40f931a7526d4243bb703571565edf9c\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/40f931a7526d4243bb703571565edf9c</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"神器workflow\"><a href=\"#神器workflow\" class=\"headerlink\" title=\"神器workflow\"></a>神器workflow</h2><h3 id=\"workflow是什么\"><a href=\"#workflow是什么\" class=\"headerlink\" title=\"workflow是什么\"></a>workflow是什么</h3><p>Workflow 是一款 iOS 端的付费应用，通过流程化自动处理各种事情，内置 150+ 动作，如开启相机、获取当前 GPS 位置、生成 PDF、打开 URL 链接、新建 EeverNote 笔记等等，只要能巧妙组合，搭配合理，几乎能实现使用者任何的复杂任务流程。前段时间Apple把workflow团队收购，这款软件从18RMB售价变为免费。将来Apple可能把workflow整合进ios11，简单来说，workflow在不越狱的情况下，可以完成在ios封闭环境下几乎不可能完成的任务。  </p>\n<p>举个例子，对于分享截图这一功能。虽然我早已能一气呵成地打出整套动作“手机截屏－打开照片.app－翻找截图－编辑图片－分享至他人－删除截屏”，但无奈的地方在于：其实整套动作中只有两个环节需要投入思考：“截图如何编辑？”＋“分享对象是谁？”，但仍不得不例行公事般重复其余操作，不仅毫无技术含量可言，更糟糕的是来回跳转 APP 总会生硬打断连贯性，效率低下。如果，在生活中你遇到类似的烦恼，那么肯定也曾幻想过有这么一款工具，能够帮助用户在手机上将重心集中在解决任务的关键步骤，而其他次要动作则直接自动执行，无需人为干预，进而达成任务目的，使之形成一套高效率的完整工作流（类似于 Apple 在 Mac 平台推出的 Automator）。这就是workflow的作用所在。它可以在一步操作的前提下帮你完成一整套上述操作。<br><img src=\"http://onep1caa3.bkt.clouddn.com/workflow.png\" alt=\"\">   </p>\n<hr>\n<p>　</p>\n<h3 id=\"workflow的优点\"><a href=\"#workflow的优点\" class=\"headerlink\" title=\"workflow的优点\"></a>workflow的优点</h3><ul>\n<li>效率为王：通过 Workflow 创建的工作流程，使得原本在手机上需要繁琐步骤才能完成的任务，现在很可能只需一键搞定；</li>\n<li>四通发达：Workflow 内置的 150+ 动作(不断更新中)涵盖了大部分手机功能，并进一步延伸至第三方 APP，如 开启相机、获取当前 GPS 位置、生成 PDF、打开 URL 链接、新建 EeverNote 笔记等等，只要能巧妙组合，搭配合理，几乎能实现使用者任何的复杂任务流程；</li>\n<li>化繁为简：图形化的美观界面将复杂的代码部分完全隐藏至背后，极大降低了使用门槛。通过简单的拖曳操作来设定想要实现的功能步骤，而无需用户懂得任何代码；</li>\n<li>凌波微步：创建后的任务流程可以保存至桌面、摆放至“共享”菜单中、甚至能将自己的作品共享至他人使用，极大拓宽了 Workflow 适用场景；</li>\n<li>大有可为：高级用户调用 Workflow 内置的特殊功能 ( SSH 运行脚本、API 等) 后，还能创造更多可能，如与对接并控制网站服务器。这也恰恰说明 Workflow 具有极强的拓展性。 </li>\n</ul>\n<hr>\n<h3 id=\"如何创建workflow工作流\"><a href=\"#如何创建workflow工作流\" class=\"headerlink\" title=\"如何创建workflow工作流\"></a>如何创建workflow工作流</h3><p>比如我要完成截屏-打开相册-选择照片-分享给好友-删除这一系列操作，使用workflow的话，我们需要先定义这个动作。即创建workflow工作流，下面是详细的步骤。  </p>\n<ul>\n<li>可以看到workflow会给出很多动作，我们的目标是选择相册最后一张图片分享给别人，第一步就是选择分享最后一张照片还是最后一张截图；</li>\n<li>由于ios权限设置，我们必须设置一个获得相片访问权限的步骤，接着获取相册最后一张图片，也就是第二步；<br><img src=\"http://onep1caa3.bkt.clouddn.com/workflow1.png\" alt=\"\">  </li>\n<li>接着选择分享方式，可以通过分享菜单或者airdrop分享；</li>\n<li>第四步就是分享；<br><img src=\"http://onep1caa3.bkt.clouddn.com/workflow2.png\" alt=\"\"> </li>\n<li>分享完成之后就是删除照片的步骤了。<br><img src=\"http://onep1caa3.bkt.clouddn.com/workflow3.png\" alt=\"\">  <h5 id=\"在保存这个工作流之后，我们只需要截屏，打开工作流widget，点击这个工作流，选择分享方式和分享对象，工作流就开始自己运作了，在分享完成之后，工作流会删除最后一张照片并自动关闭。\"><a href=\"#在保存这个工作流之后，我们只需要截屏，打开工作流widget，点击这个工作流，选择分享方式和分享对象，工作流就开始自己运作了，在分享完成之后，工作流会删除最后一张照片并自动关闭。\" class=\"headerlink\" title=\"在保存这个工作流之后，我们只需要截屏，打开工作流widget，点击这个工作流，选择分享方式和分享对象，工作流就开始自己运作了，在分享完成之后，工作流会删除最后一张照片并自动关闭。\"></a>在保存这个工作流之后，我们只需要截屏，打开工作流widget，点击这个工作流，选择分享方式和分享对象，工作流就开始自己运作了，在分享完成之后，工作流会删除最后一张照片并自动关闭。</h5></li>\n</ul>\n<hr>\n<h3 id=\"提供一些额外的工作流\"><a href=\"#提供一些额外的工作流\" class=\"headerlink\" title=\"提供一些额外的工作流\"></a>提供一些额外的工作流</h3><p>workflow中有很多工作流，你也可以创作自己的工作流，分享自己的工作流，下面就是我收集的一些工作流，点击网址以后选择用workflow打开，添加工作流之后就可以使用了。workflow暂时不支持icloud同步，但是注册一个workflow账号在不同设备登陆也可以实现工作流的同步。  </p>\n<p>多用途通用视频下载 <a href=\"https://workflow.is/workflows/54f8d777636e430fb901d5a2e4ccfe56\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/54f8d777636e430fb901d5a2e4ccfe56</a> 多引擎搜索<a href=\"https://workflow.is/workflows/7921f8c6ca7b48529cfe9b8d0f17466d\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/7921f8c6ca7b48529cfe9b8d0f17466d</a>  图片处理   </p>\n<p>﻿<br><a href=\"https://workflow.is/workflows/89a39d40eb0543d29202e7e0a30f27bf\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/89a39d40eb0543d29202e7e0a30f27bf</a>﻿<br>﻿<br>快捷开关﻿<br><a href=\"https://workflow.is/workflows/fef60e8bed1446f6bf1284ddd6e3e05e\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/fef60e8bed1446f6bf1284ddd6e3e05e</a>﻿<br>﻿<br>多功能扫码工具箱﻿<br><a href=\"https://workflow.is/workflows/4bb0a613d4cb464e879050448f05fcfe多用途通用\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/4bb0a613d4cb464e879050448f05fcfe多用途通用</a>﻿<br>﻿<br>视频下载﻿<br><a href=\"https://workflow.is/workflows/54f8d777636e430fb901d5a2e4ccfe56\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/54f8d777636e430fb901d5a2e4ccfe56</a>﻿<br>﻿<br>多引擎搜索﻿<br><a href=\"https://workflow.is/workflows/7921f8c6ca7b48529cfe9b8d0f17466d\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/7921f8c6ca7b48529cfe9b8d0f17466d</a>﻿<br>﻿<br>图片处理﻿<br><a href=\"https://workflow.is/workflows/89a39d40eb0543d29202e7e0a30f27bf\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/89a39d40eb0543d29202e7e0a30f27bf</a>﻿<br>﻿<br>快捷开关﻿<br><a href=\"https://workflow.is/workflows/fef60e8bed1446f6bf1284ddd6e3e05e\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/fef60e8bed1446f6bf1284ddd6e3e05e</a>﻿<br>﻿<br>多功能扫码工具箱﻿<br><a href=\"https://workflow.is/workflows/4bb0a613d4cb464e879050448f05fcfe\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/4bb0a613d4cb464e879050448f05fcfe</a>﻿<br>﻿<br>﻿<br>workflow下载类型  规则﻿<br>﻿<br>下载YouTube视频﻿<br><a href=\"https://workflow.is/workflows/73971870942c49da96cae6a490aea8e0\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/73971870942c49da96cae6a490aea8e0</a>﻿<br>﻿<br><a href=\"https://workflow.is/workflows/617578d73f8244a5afed2a1665c8e320\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/617578d73f8244a5afed2a1665c8e320</a>﻿<br>﻿<br>下载视频的tumblr﻿<br><a href=\"https://workflow.is/workflows/f8656cbb90524dffa1fe2eba8975946e\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/f8656cbb90524dffa1fe2eba8975946e</a>﻿<br>﻿<br>展开网址的tumblr﻿<br><a href=\"https://workflow.is/workflows/62a9534d3ee1467080cd4136578d3d35\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/62a9534d3ee1467080cd4136578d3d35</a>﻿<br>﻿<br>下载Twitter的GIF﻿<br><a href=\"https://workflow.is/workflows/aa9821c4bce44b6f8febcbda6245c1f0\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/aa9821c4bce44b6f8febcbda6245c1f0</a>﻿<br>﻿<br>获取Twitter的视频﻿<br><a href=\"https://workflow.is/workflows/087a0abf12c049dd9ab256afaec790c0\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/087a0abf12c049dd9ab256afaec790c0</a>﻿<br>﻿<br>从保存的Instagram﻿<br><a href=\"https://workflow.is/workflows/3a4f22ce8e794c7489a059224f3bc0b0\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/3a4f22ce8e794c7489a059224f3bc0b0</a>﻿<br>﻿<br>应用图像至相机胶卷﻿<br><a href=\"https://workflow.is/workflows/613a8f5e6e714cc9aecaa4e76d981248\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/613a8f5e6e714cc9aecaa4e76d981248</a>﻿<br>﻿<br>新浪微博视频  先复制视频页地址 在运行﻿<br><a href=\"https://workflow.is/workflows/fd7fe0b7548046e689e9776b2182a8b1\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/fd7fe0b7548046e689e9776b2182a8b1</a>﻿<br>﻿<br>保存网页为pdf到ibook﻿<br><a href=\"https://workflow.is/workflows/2027271452ce4712853838f43550d326\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/2027271452ce4712853838f43550d326</a>﻿<br>﻿<br>保存了几张照片﻿<br><a href=\"https://workflow.is/workflows/a6487b004917494b88fe0fc01f0ffbc6\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/a6487b004917494b88fe0fc01f0ffbc6</a>﻿<br>﻿<br>﻿<br>workflow分享类型  规则﻿<br>﻿<br>分享音乐到Instagram的﻿<br><a href=\"https://workflow.is/workflows/402507226b8844258dee694d58b126e9\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/402507226b8844258dee694d58b126e9</a>﻿<br>﻿<br>分享最新照片﻿<br><a href=\"https://workflow.is/workflows/5f9c56bfe6de447598a6d0440697c470\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/5f9c56bfe6de447598a6d0440697c470</a>﻿<br>﻿<br>分享音乐到Instagram的﻿<br><a href=\"https://workflow.is/workflows/402507226b8844258dee694d58b126e9\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/402507226b8844258dee694d58b126e9</a>﻿<br>﻿<br>workflow备份类型  规则﻿<br>﻿<br>AB Backup备份﻿<br><a href=\"https://workflow.is/workflows/3db6bdcda3104b3b9bbaea8ddf655670\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/3db6bdcda3104b3b9bbaea8ddf655670</a>﻿<br>﻿<br>备份workflow工作流﻿<br><a href=\"https://workflow.is/workflows/c5421ebe19bd4bf885da8b74d2cbaded\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/c5421ebe19bd4bf885da8b74d2cbaded</a>﻿<br>﻿<br>保存到iCloud﻿<br><a href=\"https://workflow.is/workflows/08f3cc0e184844339eb2f5caa58a316b\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/08f3cc0e184844339eb2f5caa58a316b</a>﻿<br>﻿<br>workflow音乐类型  规则﻿<br>﻿<br>播放我的音乐﻿<br><a href=\"https://workflow.is/workflows/39d58771c84c4a50af50b3a0e1f7bda7\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/39d58771c84c4a50af50b3a0e1f7bda7</a>﻿<br>﻿<br>加入我的音乐﻿<br><a href=\"https://workflow.is/workflows/5bf4367cdef74e3cbe5d4078bdac9882\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/5bf4367cdef74e3cbe5d4078bdac9882</a>﻿<br>﻿<br>添加一些歌曲﻿<br><a href=\"https://workflow.is/workflows/c5f6d0b19e7e4463af581c0011860443\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/c5f6d0b19e7e4463af581c0011860443</a>﻿<br>﻿<br>获取歌曲信息﻿<br><a href=\"https://workflow.is/workflows/70900391fdd6423ab2e6d925abf148cc\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/70900391fdd6423ab2e6d925abf148cc</a>﻿<br>﻿<br>随机播放﻿<br><a href=\"https://workflow.is/workflows/7e2dab4135c24808b36a5384cde60b7d\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/7e2dab4135c24808b36a5384cde60b7d</a>﻿<br>﻿<br>现在播放﻿<br><a href=\"https://workflow.is/workflows/3d954aa947474ed8b93d13f5b9d18625\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/3d954aa947474ed8b93d13f5b9d18625</a>﻿<br>﻿<br>workflow搜索类型  规则﻿<br>﻿<br>搜索电话号码﻿<br><a href=\"https://workflow.is/workflows/aa509941b57d48d4b51a0c2b1c06cf8c\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/aa509941b57d48d4b51a0c2b1c06cf8c</a>﻿<br>﻿<br>谷歌高级搜索﻿<br><a href=\"https://workflow.is/workflows/6e7e0853ae664c5ea7a0bae7dad6941e\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/6e7e0853ae664c5ea7a0bae7dad6941e</a>﻿<br>﻿<br>﻿<br>自定义搜索﻿<br><a href=\"https://workflow.is/workflows/ac4b4abac0a2490e872b7134f5f9ca8a\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/ac4b4abac0a2490e872b7134f5f9ca8a</a>﻿<br>﻿<br>workflow手电筒类型  规则﻿<br>﻿<br>﻿<br>手电筒﻿<br><a href=\"https://workflow.is/workflows/31699d9bf6054e028c69286cdf932ce6\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/31699d9bf6054e028c69286cdf932ce6</a>﻿<br>﻿<br>莫尔斯电码编码器手电筒﻿<br><a href=\"https://workflow.is/workflows/3f723d2d0e0a4c45b920281cf7d30284\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/3f723d2d0e0a4c45b920281cf7d30284</a>﻿<br>﻿<br>workflow距离类型  规则﻿<br>﻿<br>旅行距离﻿<br><a href=\"https://workflow.is/workflows/5e86637a392147449e7f0aebb3b18cf4\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/5e86637a392147449e7f0aebb3b18cf4</a>﻿<br>﻿<br>Biking Distance（骑行距离）﻿<br><a href=\"https://workflow.is/workflows/90b54056340742f2bd24ed45f894d22e\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/90b54056340742f2bd24ed45f894d22e</a>﻿<br>﻿<br>workflow剪切板/书签类型  规则﻿<br>﻿<br>﻿<br>剪切板列表﻿<br><a href=\"https://workflow.is/workflows/db3321f2eec84c4eb2caf29a6df81286\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/db3321f2eec84c4eb2caf29a6df81286</a>﻿<br>﻿<br>剪贴板翻译﻿<br><a href=\"https://workflow.is/workflows/5de0062c54c041a386be048dd84fa361\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/5de0062c54c041a386be048dd84fa361</a>﻿<br>﻿<br>﻿<br>复制到剪贴板﻿<br><a href=\"https://workflow.is/workflows/3242da310c4a45ec8270a09e49e6aa37\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/3242da310c4a45ec8270a09e49e6aa37</a>﻿<br>﻿<br>书签﻿<br><a href=\"https://workflow.is/workflows/86a36fe10ac54a0cbe21c0016e762dee\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/86a36fe10ac54a0cbe21c0016e762dee</a>﻿<br>﻿<br>插接板书签离线﻿<br><a href=\"https://workflow.is/workflows/78e3d1afef39487db3d4a96d55e9a131\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/78e3d1afef39487db3d4a96d55e9a131</a>﻿<br>﻿<br>﻿<br>workflow电池类型  规则﻿<br>电池﻿<br><a href=\"https://workflow.is/workflows/febeed3ed07a4c78b9e77c2f48136a2a\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/febeed3ed07a4c78b9e77c2f48136a2a</a>﻿<br>﻿<br>低功耗模式﻿<br><a href=\"https://workflow.is/workflows/640ae7eb22f143a093c77215a6e373e2\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/640ae7eb22f143a093c77215a6e373e2</a>﻿<br>﻿<br>workflow未分类类  规则﻿<br>﻿<br>IP和位置﻿<br>从通知中心中轻松找到你的IP和地理位置。﻿<br><a href=\"https://workflow.is/workflows/ea529c591a2740169388c0d2b8ca6505\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/ea529c591a2740169388c0d2b8ca6505</a>﻿<br>﻿<br>调整照片和删除原始﻿<br>调整的原始照片，然后删除了原稿。非常适合在手机上节省磁盘空间。﻿<br><a href=\"https://workflow.is/workflows/014c0e9d263247979bc6a1c9894e07e4\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/014c0e9d263247979bc6a1c9894e07e4</a>﻿<br>﻿<br>删除多张图片﻿<br><a href=\"https://workflow.is/workflows/c545d9c33b0f40d8a80712b282a19eb3\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/c545d9c33b0f40d8a80712b282a19eb3</a>﻿<br>﻿<br>更新浪涌/ shadowrocket主配置﻿<br><a href=\"https://workflow.is/workflows/55ecb14722f94d7c8c44ce3ce24d81c8\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/55ecb14722f94d7c8c44ce3ce24d81c8</a>﻿<br>﻿<br>计时器﻿<br><a href=\"https://workflow.is/workflows/93fd0318d0e14cdaa32c5d021effaa8b\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/93fd0318d0e14cdaa32c5d021effaa8b</a>﻿<br>﻿<br>扩展和共享网址﻿<br><a href=\"https://workflow.is/workflows/acad8115a5564d6ea336b70b87dcab72\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/acad8115a5564d6ea336b70b87dcab72</a>﻿<br>﻿<br>合并PDF文件﻿<br><a href=\"https://workflow.is/workflows/adbb5f464fba4bc68a42a31bf91d1c4c\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/adbb5f464fba4bc68a42a31bf91d1c4c</a>﻿<br>﻿<br>抛硬币﻿<br><a href=\"https://workflow.is/workflows/4e37faab34864e1883c533754c788066\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/4e37faab34864e1883c533754c788066</a>﻿<br>﻿<br>货币换算﻿<br><a href=\"https://workflow.is/workflows/50f0132cbe654370bc35189e1cf31b86\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/50f0132cbe654370bc35189e1cf31b86</a>﻿<br>﻿<br>今天的天气﻿<br><a href=\"https://workflow.is/workflows/cf6db9a3c90c4bc7adec27f739480937\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/cf6db9a3c90c4bc7adec27f739480937</a>﻿<br>﻿<br>翻译﻿<br><a href=\"https://workflow.is/workflows/a51df78f80414edf8469727f892d662d\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/a51df78f80414edf8469727f892d662d</a>﻿<br>﻿<br>打开链接并复制密码﻿<br><a href=\"https://workflow.is/workflows/e5846d5f70db404a914db7c6ae07e6c8\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/e5846d5f70db404a914db7c6ae07e6c8</a>﻿<br>﻿<br>通知中心翻页﻿<br><a href=\"https://workflow.is/workflows/7afbf6fa09204e5e837d52cab41f0497\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/7afbf6fa09204e5e837d52cab41f0497</a>﻿<br>﻿<br>读书打卡﻿<br><a href=\"https://workflow.is/workflows/051cbf0e7741444b88ba1c77d35bd08d\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/051cbf0e7741444b88ba1c77d35bd08d</a>﻿<br>﻿<br>﻿<br>流量查询﻿<br><a href=\"https://workflow.is/workflows/068d7774623245a8849b5a051c41ee6d\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/068d7774623245a8849b5a051c41ee6d</a>﻿<br>﻿<br>查询和访问﻿<br><a href=\"https://workflow.is/workflows/dd00747828a14ebfbddb9aac32432acd\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/dd00747828a14ebfbddb9aac32432acd</a>﻿<br>﻿<br>翻译文本﻿<br><a href=\"https://workflow.is/workflows/8d478a36a8eb41c782cbb74769eeb9b1\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/8d478a36a8eb41c782cbb74769eeb9b1</a>﻿<br>﻿<br>安装字体﻿<br><a href=\"https://workflow.is/workflows/f9da142fe53946cd985459f96d2637e9\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/f9da142fe53946cd985459f96d2637e9</a>﻿<br>﻿<br>网易音乐分享到推特﻿<br><a href=\"https://workflow.is/workflows/dc191b2487e147e489072c801592b10f\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/dc191b2487e147e489072c801592b10f</a>﻿<br>﻿<br>通用下载﻿<br><a href=\"https://workflow.is/workflows/e645d621172347dabbe177fa24ef6a4b\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/e645d621172347dabbe177fa24ef6a4b</a>﻿<br>﻿<br>举报 iMessage 垃圾短信﻿<br><a href=\"https://workflow.is/workflows/98fa7fba0e104daab0c7473d3519cfcd\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/98fa7fba0e104daab0c7473d3519cfcd</a>﻿<br>﻿<br>分享最新一张图片﻿<br><a href=\"https://workflow.is/workflows/4b5e92f0777d4f59a37dbf2de267b79f\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/4b5e92f0777d4f59a37dbf2de267b79f</a>﻿<br>﻿<br>扫描二维码﻿<br><a href=\"https://workflow.is/workflows/2be2c6a4cb1348c684d51075adba803b\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/2be2c6a4cb1348c684d51075adba803b</a>﻿<br>﻿<br>向同一个剪贴板里添加内容﻿<br><a href=\"https://workflow.is/workflows/40f931a7526d4243bb703571565edf9c\" target=\"_blank\" rel=\"noopener\">https://workflow.is/workflows/40f931a7526d4243bb703571565edf9c</a></p>\n"},{"title":"使用bootstrap实现图片轮播效果","_content":"\n## 什么是bootstrap？\nBootstrap，来自 Twitter，是目前很受欢迎的前端框架。Bootstrap 是基于 HTML、CSS、JAVASCRIPT 的，它简洁灵活，使得 Web 开发更加快捷。它由Twitter的设计师Mark Otto和Jacob Thornton合作开发，是一个CSS/HTML框架。Bootstrap提供了优雅的HTML和CSS规范，它即是由动态CSS语言Less写成。Bootstrap一经推出后颇受欢迎，一直是GitHub上的热门开源项目，包括NASA的MSNBC（微软全国广播公司）的Breaking News都使用了该项目。使用bootstrap的缺点是设计出来的网页给人一种钦定的感觉。。。  \n## 使用bootstrap实现轮播效果\n* 由于bootstrap中有HTML5特性，所以要添加 `<!DOCTYPE html> `属性；\n### 基本轮播  \n代码如下：  \n>     <!DOCTYPE html>\n>     <script src=\"http://how2j.cn/study/js/jquery/2.0.0/jquery.min.js\"></script>\n>     <link href=\"http://how2j.cn/study/css/bootstrap/3.3.6/bootstrap.min.css\" rel=\"stylesheet\">\n>     <script src=\"http://how2j.cn/study/js/bootstrap/3.3.6/bootstrap.min.js\"></script>\n>     <style>\n>       div.item img{\n>     width:100%;\n>        }\n>       div#carousel-example-generic{\n>     width:80%;\n>     margin:0 auto;\n>       }\n>     </style>\n>     <div id=\"carousel-example-generic\" class=\"carousel slide\" data-ride=\"carousel\">\n>     <ol class=\"carousel-indicators\">\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"0\" class=\"active\"></li>\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"1\"></li>\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"2\"></li>\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"3\"></li>\n>     </ol>\n>     <div class=\"carousel-inner\" role=\"listbox\">\n>     <div class=\"item active\">\n>      <img src=\"http://onep1caa3.bkt.clouddn.com/1.jpg\" >\n>     </div>\n>     <div class=\"item\">\n>     <img src=\"http://onep1caa3.bkt.clouddn.com/2.jpg\" >\n>     </div>\n>     <div class=\"item\">\n>     <img src=\"http://onep1caa3.bkt.clouddn.com/3.jpg\" >\n>     </div>      \n>     <div class=\"item\">\n>     <img src=\"http://onep1caa3.bkt.clouddn.com/4.jpg\" >\n>     </div>\n>     </div>\n>     </div>  \n \n\n### 带标题轮播  \n代码如下：  \n>     <!DOCTYPE html>\n>     <script src=\"http://how2j.cn/study/js/jquery/2.0.0/jquery.min.js\"></script>\n>     <link href=\"http://how2j.cn/study/css/bootstrap/3.3.6/bootstrap.min.css\" rel=\"stylesheet\">\n>     <script src=\"http://how2j.cn/study/js/bootstrap/3.3.6/bootstrap.min.js\"></script>\n>     <style>\n>       div.item img{\n>     width:100%;\n>        }\n>       div#carousel-example-generic{\n>     width:80%;\n>     margin:0 auto;\n>       }\n>     </style>\n>     <div id=\"carousel-example-generic\" class=\"carousel slide\" data-ride=\"carousel\">\n>       <!-- Indicators -->\n>       <ol class=\"carousel-indicators\">\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"0\" class=\"active\"></li>\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"1\"></li>\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"2\"></li>\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"3\"></li>\n>       </ol>\n>      \n>       <!-- Wrapper for slides -->\n>       <div class=\"carousel-inner\" role=\"listbox\">\n>     <div class=\"item active\">\n>     <img src=\"http://onep1caa3.bkt.clouddn.com/1.jpg\" >\n>     <div class=\"carousel-caption\">\n>     scene 1\n>     </div>\n>     </div>\n>     <div class=\"item\">\n>     <img src=\"http://onep1caa3.bkt.clouddn.com/2.jpg\" >\n>     <div class=\"carousel-caption\">\n>     scene 2\n>     </div>\n>     </div>\n>     <div class=\"item\">\n>     <img src=\"http://onep1caa3.bkt.clouddn.com/3.jpg\" >\n>     <div class=\"carousel-caption\">\n>     scene 3\n>     </div>\n>     </div>\n>      \n>     <div class=\"item\">\n>     <img src=\"http://onep1caa3.bkt.clouddn.com/4.jpg\" >\n>     <div class=\"carousel-caption\">\n>     scene 4\n>     </div>\n>     </div>      \n>     </div>\n>     </div>  \n         \n### 设置轮播速度  \n代码如下：  \n>     <!DOCTYPE html>\n>     <script src=\"http://how2j.cn/study/js/jquery/2.0.0/jquery.min.js\"></script>\n>     <link href=\"http://how2j.cn/study/css/bootstrap/3.3.6/bootstrap.min.css\" rel=\"stylesheet\">\n>     <script src=\"http://how2j.cn/study/js/bootstrap/3.3.6/bootstrap.min.js\"></script>\n>     <style>\n>       div.item img{\n>     width:100%;\n>        }\n>       div#carousel-example-generic{\n>     width:80%;\n>     margin:0 auto;\n>       }\n>     </style>\n>     <div id=\"carousel-example-generic\" class=\"carousel slide\" data-ride=\"carousel\" data-interval=\"1000\">\n>       <!-- Indicators -->\n>       <ol class=\"carousel-indicators\">\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"0\" class=\"active\"></li>\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"1\"></li>\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"2\"></li>\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"3\"></li>\n>       </ol>\n>      \n>       <!-- Wrapper for slides -->\n>       <div class=\"carousel-inner\" role=\"listbox\">\n>     <div class=\"item active\">\n>       <img src=\"http://onep1caa3.bkt.clouddn.com/1.jpg\" >\n>     </div>\n>     <div class=\"item\">\n>     <img src=\"http://onep1caa3.bkt.clouddn.com/2.jpg\" >\n>     </div>\n>     <div class=\"item\">\n>     <img src=\"http://onep1caa3.bkt.clouddn.com/3.jpg\" >\n>     </div>\n>      \n>     <div class=\"item\">\n>     <img src=\"http://onep1caa3.bkt.clouddn.com/4.jpg\" >\n>     </div>\n>      \n>       </div>\n>     </div>   \n \n### 控制前后的轮播  \n代码如下：   \n>     <!DOCTYPE html>\n>     <script src=\"http://how2j.cn/study/js/jquery/2.0.0/jquery.min.js\"></script>\n>     <link href=\"http://how2j.cn/study/css/bootstrap/3.3.6/bootstrap.min.css\" \n>     rel=\"stylesheet\">\n>     <script src=\"http://how2j.cn/study/js/bootstrap/3.3.6/bootstrap.min.js\"></\n>     script>\n>     <style>\n>       div.item img{\n>     width:100%;\n>        }\n>       div#carousel-example-generic{\n>     width:80%;\n>     margin:0 auto;\n>       }\n>     </style>\n>     <div id=\"carousel-example-generic\" class=\"carousel slide\" data-\n>     ride=\"carousel\" data-interval=\"1000\">\n>       <!-- Indicators -->\n>       <ol class=\"carousel-indicators\">\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"0\" \n>     class=\"active\"></li>\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"1\"></li>\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"2\"></li>\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"3\"></li>\n>       </ol>\n>      \n>      <!-- Wrapper for slides -->\n>      <div class=\"carousel-inner\" role=\"listbox\">\n>     <div class=\"item active\">\n>     <img src=\"http://onep1caa3.bkt.clouddn.com/1.jpg\" >\n>     </div>\n>     <div class=\"item\">\n>     <img src=\"http://onep1caa3.bkt.clouddn.com/2.jpg\" >\n>     </div>\n>     <div class=\"item\">\n>     <img src=\"http://onep1caa3.bkt.clouddn.com/3.jpg\" >\n>     </div>\n>      \n>     <div class=\"item\">\n>     <img src=\"http://onep1caa3.bkt.clouddn.com/4.jpg\" >\n>     </div>\n>      \n>       </div>\n>     </div> \n>     <!-- Controls -->\n>     <a class=\"left carousel-control\" href=\"#carousel-example-generic\" \n>     role=\"button\" data-slide=\"prev\">\n>     <span class=\"glyphicon glyphicon-chevron-left\" aria-hidden=\"true\"></span>\n>  \n>     </a>\n>     <a class=\"right carousel-control\" href=\"#carousel-example-generic\" \n>     role=\"button\" data-slide=\"next\">\n>      <span class=\"glyphicon glyphicon-chevron-right\" aria-hidden=\"true\"></span>  \n>     </a>\n>     </div>  \n--------------\n\n\n","source":"_posts/2017.04.02bootstrap.md","raw":"---\ntitle: 使用bootstrap实现图片轮播效果 \ncategories: 教程\ntags: [bootstrap]\n---\n\n## 什么是bootstrap？\nBootstrap，来自 Twitter，是目前很受欢迎的前端框架。Bootstrap 是基于 HTML、CSS、JAVASCRIPT 的，它简洁灵活，使得 Web 开发更加快捷。它由Twitter的设计师Mark Otto和Jacob Thornton合作开发，是一个CSS/HTML框架。Bootstrap提供了优雅的HTML和CSS规范，它即是由动态CSS语言Less写成。Bootstrap一经推出后颇受欢迎，一直是GitHub上的热门开源项目，包括NASA的MSNBC（微软全国广播公司）的Breaking News都使用了该项目。使用bootstrap的缺点是设计出来的网页给人一种钦定的感觉。。。  \n## 使用bootstrap实现轮播效果\n* 由于bootstrap中有HTML5特性，所以要添加 `<!DOCTYPE html> `属性；\n### 基本轮播  \n代码如下：  \n>     <!DOCTYPE html>\n>     <script src=\"http://how2j.cn/study/js/jquery/2.0.0/jquery.min.js\"></script>\n>     <link href=\"http://how2j.cn/study/css/bootstrap/3.3.6/bootstrap.min.css\" rel=\"stylesheet\">\n>     <script src=\"http://how2j.cn/study/js/bootstrap/3.3.6/bootstrap.min.js\"></script>\n>     <style>\n>       div.item img{\n>     width:100%;\n>        }\n>       div#carousel-example-generic{\n>     width:80%;\n>     margin:0 auto;\n>       }\n>     </style>\n>     <div id=\"carousel-example-generic\" class=\"carousel slide\" data-ride=\"carousel\">\n>     <ol class=\"carousel-indicators\">\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"0\" class=\"active\"></li>\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"1\"></li>\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"2\"></li>\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"3\"></li>\n>     </ol>\n>     <div class=\"carousel-inner\" role=\"listbox\">\n>     <div class=\"item active\">\n>      <img src=\"http://onep1caa3.bkt.clouddn.com/1.jpg\" >\n>     </div>\n>     <div class=\"item\">\n>     <img src=\"http://onep1caa3.bkt.clouddn.com/2.jpg\" >\n>     </div>\n>     <div class=\"item\">\n>     <img src=\"http://onep1caa3.bkt.clouddn.com/3.jpg\" >\n>     </div>      \n>     <div class=\"item\">\n>     <img src=\"http://onep1caa3.bkt.clouddn.com/4.jpg\" >\n>     </div>\n>     </div>\n>     </div>  \n \n\n### 带标题轮播  \n代码如下：  \n>     <!DOCTYPE html>\n>     <script src=\"http://how2j.cn/study/js/jquery/2.0.0/jquery.min.js\"></script>\n>     <link href=\"http://how2j.cn/study/css/bootstrap/3.3.6/bootstrap.min.css\" rel=\"stylesheet\">\n>     <script src=\"http://how2j.cn/study/js/bootstrap/3.3.6/bootstrap.min.js\"></script>\n>     <style>\n>       div.item img{\n>     width:100%;\n>        }\n>       div#carousel-example-generic{\n>     width:80%;\n>     margin:0 auto;\n>       }\n>     </style>\n>     <div id=\"carousel-example-generic\" class=\"carousel slide\" data-ride=\"carousel\">\n>       <!-- Indicators -->\n>       <ol class=\"carousel-indicators\">\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"0\" class=\"active\"></li>\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"1\"></li>\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"2\"></li>\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"3\"></li>\n>       </ol>\n>      \n>       <!-- Wrapper for slides -->\n>       <div class=\"carousel-inner\" role=\"listbox\">\n>     <div class=\"item active\">\n>     <img src=\"http://onep1caa3.bkt.clouddn.com/1.jpg\" >\n>     <div class=\"carousel-caption\">\n>     scene 1\n>     </div>\n>     </div>\n>     <div class=\"item\">\n>     <img src=\"http://onep1caa3.bkt.clouddn.com/2.jpg\" >\n>     <div class=\"carousel-caption\">\n>     scene 2\n>     </div>\n>     </div>\n>     <div class=\"item\">\n>     <img src=\"http://onep1caa3.bkt.clouddn.com/3.jpg\" >\n>     <div class=\"carousel-caption\">\n>     scene 3\n>     </div>\n>     </div>\n>      \n>     <div class=\"item\">\n>     <img src=\"http://onep1caa3.bkt.clouddn.com/4.jpg\" >\n>     <div class=\"carousel-caption\">\n>     scene 4\n>     </div>\n>     </div>      \n>     </div>\n>     </div>  \n         \n### 设置轮播速度  \n代码如下：  \n>     <!DOCTYPE html>\n>     <script src=\"http://how2j.cn/study/js/jquery/2.0.0/jquery.min.js\"></script>\n>     <link href=\"http://how2j.cn/study/css/bootstrap/3.3.6/bootstrap.min.css\" rel=\"stylesheet\">\n>     <script src=\"http://how2j.cn/study/js/bootstrap/3.3.6/bootstrap.min.js\"></script>\n>     <style>\n>       div.item img{\n>     width:100%;\n>        }\n>       div#carousel-example-generic{\n>     width:80%;\n>     margin:0 auto;\n>       }\n>     </style>\n>     <div id=\"carousel-example-generic\" class=\"carousel slide\" data-ride=\"carousel\" data-interval=\"1000\">\n>       <!-- Indicators -->\n>       <ol class=\"carousel-indicators\">\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"0\" class=\"active\"></li>\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"1\"></li>\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"2\"></li>\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"3\"></li>\n>       </ol>\n>      \n>       <!-- Wrapper for slides -->\n>       <div class=\"carousel-inner\" role=\"listbox\">\n>     <div class=\"item active\">\n>       <img src=\"http://onep1caa3.bkt.clouddn.com/1.jpg\" >\n>     </div>\n>     <div class=\"item\">\n>     <img src=\"http://onep1caa3.bkt.clouddn.com/2.jpg\" >\n>     </div>\n>     <div class=\"item\">\n>     <img src=\"http://onep1caa3.bkt.clouddn.com/3.jpg\" >\n>     </div>\n>      \n>     <div class=\"item\">\n>     <img src=\"http://onep1caa3.bkt.clouddn.com/4.jpg\" >\n>     </div>\n>      \n>       </div>\n>     </div>   \n \n### 控制前后的轮播  \n代码如下：   \n>     <!DOCTYPE html>\n>     <script src=\"http://how2j.cn/study/js/jquery/2.0.0/jquery.min.js\"></script>\n>     <link href=\"http://how2j.cn/study/css/bootstrap/3.3.6/bootstrap.min.css\" \n>     rel=\"stylesheet\">\n>     <script src=\"http://how2j.cn/study/js/bootstrap/3.3.6/bootstrap.min.js\"></\n>     script>\n>     <style>\n>       div.item img{\n>     width:100%;\n>        }\n>       div#carousel-example-generic{\n>     width:80%;\n>     margin:0 auto;\n>       }\n>     </style>\n>     <div id=\"carousel-example-generic\" class=\"carousel slide\" data-\n>     ride=\"carousel\" data-interval=\"1000\">\n>       <!-- Indicators -->\n>       <ol class=\"carousel-indicators\">\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"0\" \n>     class=\"active\"></li>\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"1\"></li>\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"2\"></li>\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"3\"></li>\n>       </ol>\n>      \n>      <!-- Wrapper for slides -->\n>      <div class=\"carousel-inner\" role=\"listbox\">\n>     <div class=\"item active\">\n>     <img src=\"http://onep1caa3.bkt.clouddn.com/1.jpg\" >\n>     </div>\n>     <div class=\"item\">\n>     <img src=\"http://onep1caa3.bkt.clouddn.com/2.jpg\" >\n>     </div>\n>     <div class=\"item\">\n>     <img src=\"http://onep1caa3.bkt.clouddn.com/3.jpg\" >\n>     </div>\n>      \n>     <div class=\"item\">\n>     <img src=\"http://onep1caa3.bkt.clouddn.com/4.jpg\" >\n>     </div>\n>      \n>       </div>\n>     </div> \n>     <!-- Controls -->\n>     <a class=\"left carousel-control\" href=\"#carousel-example-generic\" \n>     role=\"button\" data-slide=\"prev\">\n>     <span class=\"glyphicon glyphicon-chevron-left\" aria-hidden=\"true\"></span>\n>  \n>     </a>\n>     <a class=\"right carousel-control\" href=\"#carousel-example-generic\" \n>     role=\"button\" data-slide=\"next\">\n>      <span class=\"glyphicon glyphicon-chevron-right\" aria-hidden=\"true\"></span>  \n>     </a>\n>     </div>  \n--------------\n\n\n","slug":"2017.04.02bootstrap","published":1,"date":"2017-04-02T12:51:00.000Z","updated":"2017-04-02T12:51:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziipt0007rh9zhpa3fmzu","content":"<h2 id=\"什么是bootstrap？\"><a href=\"#什么是bootstrap？\" class=\"headerlink\" title=\"什么是bootstrap？\"></a>什么是bootstrap？</h2><p>Bootstrap，来自 Twitter，是目前很受欢迎的前端框架。Bootstrap 是基于 HTML、CSS、JAVASCRIPT 的，它简洁灵活，使得 Web 开发更加快捷。它由Twitter的设计师Mark Otto和Jacob Thornton合作开发，是一个CSS/HTML框架。Bootstrap提供了优雅的HTML和CSS规范，它即是由动态CSS语言Less写成。Bootstrap一经推出后颇受欢迎，一直是GitHub上的热门开源项目，包括NASA的MSNBC（微软全国广播公司）的Breaking News都使用了该项目。使用bootstrap的缺点是设计出来的网页给人一种钦定的感觉。。。  </p>\n<h2 id=\"使用bootstrap实现轮播效果\"><a href=\"#使用bootstrap实现轮播效果\" class=\"headerlink\" title=\"使用bootstrap实现轮播效果\"></a>使用bootstrap实现轮播效果</h2><ul>\n<li>由于bootstrap中有HTML5特性，所以要添加 <code>&lt;!DOCTYPE html&gt;</code>属性；<h3 id=\"基本轮播\"><a href=\"#基本轮播\" class=\"headerlink\" title=\"基本轮播\"></a>基本轮播</h3>代码如下：  <blockquote>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;script src=&quot;http://how2j.cn/study/js/jquery/2.0.0/jquery.min.js&quot;&gt;&lt;/script&gt;\n&lt;link href=&quot;http://how2j.cn/study/css/bootstrap/3.3.6/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;\n&lt;script src=&quot;http://how2j.cn/study/js/bootstrap/3.3.6/bootstrap.min.js&quot;&gt;&lt;/script&gt;\n&lt;style&gt;\n  div.item img{\nwidth:100%;\n   }\n  div#carousel-example-generic{\nwidth:80%;\nmargin:0 auto;\n  }\n&lt;/style&gt;\n&lt;div id=&quot;carousel-example-generic&quot; class=&quot;carousel slide&quot; data-ride=&quot;carousel&quot;&gt;\n&lt;ol class=&quot;carousel-indicators&quot;&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;0&quot; class=&quot;active&quot;&gt;&lt;/li&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;1&quot;&gt;&lt;/li&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;2&quot;&gt;&lt;/li&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;3&quot;&gt;&lt;/li&gt;\n&lt;/ol&gt;\n&lt;div class=&quot;carousel-inner&quot; role=&quot;listbox&quot;&gt;\n&lt;div class=&quot;item active&quot;&gt;\n &lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/1.jpg&quot; &gt;\n&lt;/div&gt;\n&lt;div class=&quot;item&quot;&gt;\n&lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/2.jpg&quot; &gt;\n&lt;/div&gt;\n&lt;div class=&quot;item&quot;&gt;\n&lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/3.jpg&quot; &gt;\n&lt;/div&gt;      \n&lt;div class=&quot;item&quot;&gt;\n&lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/4.jpg&quot; &gt;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;/div&gt;  \n</code></pre></blockquote>\n</li>\n</ul>\n<h3 id=\"带标题轮播\"><a href=\"#带标题轮播\" class=\"headerlink\" title=\"带标题轮播\"></a>带标题轮播</h3><p>代码如下：  </p>\n<blockquote>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;script src=&quot;http://how2j.cn/study/js/jquery/2.0.0/jquery.min.js&quot;&gt;&lt;/script&gt;\n&lt;link href=&quot;http://how2j.cn/study/css/bootstrap/3.3.6/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;\n&lt;script src=&quot;http://how2j.cn/study/js/bootstrap/3.3.6/bootstrap.min.js&quot;&gt;&lt;/script&gt;\n&lt;style&gt;\n  div.item img{\nwidth:100%;\n   }\n  div#carousel-example-generic{\nwidth:80%;\nmargin:0 auto;\n  }\n&lt;/style&gt;\n&lt;div id=&quot;carousel-example-generic&quot; class=&quot;carousel slide&quot; data-ride=&quot;carousel&quot;&gt;\n  &lt;!-- Indicators --&gt;\n  &lt;ol class=&quot;carousel-indicators&quot;&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;0&quot; class=&quot;active&quot;&gt;&lt;/li&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;1&quot;&gt;&lt;/li&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;2&quot;&gt;&lt;/li&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;3&quot;&gt;&lt;/li&gt;\n  &lt;/ol&gt;\n\n  &lt;!-- Wrapper for slides --&gt;\n  &lt;div class=&quot;carousel-inner&quot; role=&quot;listbox&quot;&gt;\n&lt;div class=&quot;item active&quot;&gt;\n&lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/1.jpg&quot; &gt;\n&lt;div class=&quot;carousel-caption&quot;&gt;\nscene 1\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;div class=&quot;item&quot;&gt;\n&lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/2.jpg&quot; &gt;\n&lt;div class=&quot;carousel-caption&quot;&gt;\nscene 2\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;div class=&quot;item&quot;&gt;\n&lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/3.jpg&quot; &gt;\n&lt;div class=&quot;carousel-caption&quot;&gt;\nscene 3\n&lt;/div&gt;\n&lt;/div&gt;\n\n&lt;div class=&quot;item&quot;&gt;\n&lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/4.jpg&quot; &gt;\n&lt;div class=&quot;carousel-caption&quot;&gt;\nscene 4\n&lt;/div&gt;\n&lt;/div&gt;      \n&lt;/div&gt;\n&lt;/div&gt;  \n</code></pre></blockquote>\n<h3 id=\"设置轮播速度\"><a href=\"#设置轮播速度\" class=\"headerlink\" title=\"设置轮播速度\"></a>设置轮播速度</h3><p>代码如下：  </p>\n<blockquote>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;script src=&quot;http://how2j.cn/study/js/jquery/2.0.0/jquery.min.js&quot;&gt;&lt;/script&gt;\n&lt;link href=&quot;http://how2j.cn/study/css/bootstrap/3.3.6/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;\n&lt;script src=&quot;http://how2j.cn/study/js/bootstrap/3.3.6/bootstrap.min.js&quot;&gt;&lt;/script&gt;\n&lt;style&gt;\n  div.item img{\nwidth:100%;\n   }\n  div#carousel-example-generic{\nwidth:80%;\nmargin:0 auto;\n  }\n&lt;/style&gt;\n&lt;div id=&quot;carousel-example-generic&quot; class=&quot;carousel slide&quot; data-ride=&quot;carousel&quot; data-interval=&quot;1000&quot;&gt;\n  &lt;!-- Indicators --&gt;\n  &lt;ol class=&quot;carousel-indicators&quot;&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;0&quot; class=&quot;active&quot;&gt;&lt;/li&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;1&quot;&gt;&lt;/li&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;2&quot;&gt;&lt;/li&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;3&quot;&gt;&lt;/li&gt;\n  &lt;/ol&gt;\n\n  &lt;!-- Wrapper for slides --&gt;\n  &lt;div class=&quot;carousel-inner&quot; role=&quot;listbox&quot;&gt;\n&lt;div class=&quot;item active&quot;&gt;\n  &lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/1.jpg&quot; &gt;\n&lt;/div&gt;\n&lt;div class=&quot;item&quot;&gt;\n&lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/2.jpg&quot; &gt;\n&lt;/div&gt;\n&lt;div class=&quot;item&quot;&gt;\n&lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/3.jpg&quot; &gt;\n&lt;/div&gt;\n\n&lt;div class=&quot;item&quot;&gt;\n&lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/4.jpg&quot; &gt;\n&lt;/div&gt;\n\n  &lt;/div&gt;\n&lt;/div&gt;   \n</code></pre></blockquote>\n<h3 id=\"控制前后的轮播\"><a href=\"#控制前后的轮播\" class=\"headerlink\" title=\"控制前后的轮播\"></a>控制前后的轮播</h3><p>代码如下：   </p>\n<blockquote>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;script src=&quot;http://how2j.cn/study/js/jquery/2.0.0/jquery.min.js&quot;&gt;&lt;/script&gt;\n&lt;link href=&quot;http://how2j.cn/study/css/bootstrap/3.3.6/bootstrap.min.css&quot; \nrel=&quot;stylesheet&quot;&gt;\n&lt;script src=&quot;http://how2j.cn/study/js/bootstrap/3.3.6/bootstrap.min.js&quot;&gt;&lt;/\nscript&gt;\n&lt;style&gt;\n  div.item img{\nwidth:100%;\n   }\n  div#carousel-example-generic{\nwidth:80%;\nmargin:0 auto;\n  }\n&lt;/style&gt;\n&lt;div id=&quot;carousel-example-generic&quot; class=&quot;carousel slide&quot; data-\nride=&quot;carousel&quot; data-interval=&quot;1000&quot;&gt;\n  &lt;!-- Indicators --&gt;\n  &lt;ol class=&quot;carousel-indicators&quot;&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;0&quot; \nclass=&quot;active&quot;&gt;&lt;/li&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;1&quot;&gt;&lt;/li&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;2&quot;&gt;&lt;/li&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;3&quot;&gt;&lt;/li&gt;\n  &lt;/ol&gt;\n\n &lt;!-- Wrapper for slides --&gt;\n &lt;div class=&quot;carousel-inner&quot; role=&quot;listbox&quot;&gt;\n&lt;div class=&quot;item active&quot;&gt;\n&lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/1.jpg&quot; &gt;\n&lt;/div&gt;\n&lt;div class=&quot;item&quot;&gt;\n&lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/2.jpg&quot; &gt;\n&lt;/div&gt;\n&lt;div class=&quot;item&quot;&gt;\n&lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/3.jpg&quot; &gt;\n&lt;/div&gt;\n\n&lt;div class=&quot;item&quot;&gt;\n&lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/4.jpg&quot; &gt;\n&lt;/div&gt;\n\n  &lt;/div&gt;\n&lt;/div&gt; \n&lt;!-- Controls --&gt;\n&lt;a class=&quot;left carousel-control&quot; href=&quot;#carousel-example-generic&quot; \nrole=&quot;button&quot; data-slide=&quot;prev&quot;&gt;\n&lt;span class=&quot;glyphicon glyphicon-chevron-left&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt;\n\n&lt;/a&gt;\n&lt;a class=&quot;right carousel-control&quot; href=&quot;#carousel-example-generic&quot; \nrole=&quot;button&quot; data-slide=&quot;next&quot;&gt;\n &lt;span class=&quot;glyphicon glyphicon-chevron-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt;  \n&lt;/a&gt;\n&lt;/div&gt;  \n</code></pre><hr>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是bootstrap？\"><a href=\"#什么是bootstrap？\" class=\"headerlink\" title=\"什么是bootstrap？\"></a>什么是bootstrap？</h2><p>Bootstrap，来自 Twitter，是目前很受欢迎的前端框架。Bootstrap 是基于 HTML、CSS、JAVASCRIPT 的，它简洁灵活，使得 Web 开发更加快捷。它由Twitter的设计师Mark Otto和Jacob Thornton合作开发，是一个CSS/HTML框架。Bootstrap提供了优雅的HTML和CSS规范，它即是由动态CSS语言Less写成。Bootstrap一经推出后颇受欢迎，一直是GitHub上的热门开源项目，包括NASA的MSNBC（微软全国广播公司）的Breaking News都使用了该项目。使用bootstrap的缺点是设计出来的网页给人一种钦定的感觉。。。  </p>\n<h2 id=\"使用bootstrap实现轮播效果\"><a href=\"#使用bootstrap实现轮播效果\" class=\"headerlink\" title=\"使用bootstrap实现轮播效果\"></a>使用bootstrap实现轮播效果</h2><ul>\n<li>由于bootstrap中有HTML5特性，所以要添加 <code>&lt;!DOCTYPE html&gt;</code>属性；<h3 id=\"基本轮播\"><a href=\"#基本轮播\" class=\"headerlink\" title=\"基本轮播\"></a>基本轮播</h3>代码如下：  <blockquote>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;script src=&quot;http://how2j.cn/study/js/jquery/2.0.0/jquery.min.js&quot;&gt;&lt;/script&gt;\n&lt;link href=&quot;http://how2j.cn/study/css/bootstrap/3.3.6/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;\n&lt;script src=&quot;http://how2j.cn/study/js/bootstrap/3.3.6/bootstrap.min.js&quot;&gt;&lt;/script&gt;\n&lt;style&gt;\n  div.item img{\nwidth:100%;\n   }\n  div#carousel-example-generic{\nwidth:80%;\nmargin:0 auto;\n  }\n&lt;/style&gt;\n&lt;div id=&quot;carousel-example-generic&quot; class=&quot;carousel slide&quot; data-ride=&quot;carousel&quot;&gt;\n&lt;ol class=&quot;carousel-indicators&quot;&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;0&quot; class=&quot;active&quot;&gt;&lt;/li&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;1&quot;&gt;&lt;/li&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;2&quot;&gt;&lt;/li&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;3&quot;&gt;&lt;/li&gt;\n&lt;/ol&gt;\n&lt;div class=&quot;carousel-inner&quot; role=&quot;listbox&quot;&gt;\n&lt;div class=&quot;item active&quot;&gt;\n &lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/1.jpg&quot; &gt;\n&lt;/div&gt;\n&lt;div class=&quot;item&quot;&gt;\n&lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/2.jpg&quot; &gt;\n&lt;/div&gt;\n&lt;div class=&quot;item&quot;&gt;\n&lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/3.jpg&quot; &gt;\n&lt;/div&gt;      \n&lt;div class=&quot;item&quot;&gt;\n&lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/4.jpg&quot; &gt;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;/div&gt;  \n</code></pre></blockquote>\n</li>\n</ul>\n<h3 id=\"带标题轮播\"><a href=\"#带标题轮播\" class=\"headerlink\" title=\"带标题轮播\"></a>带标题轮播</h3><p>代码如下：  </p>\n<blockquote>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;script src=&quot;http://how2j.cn/study/js/jquery/2.0.0/jquery.min.js&quot;&gt;&lt;/script&gt;\n&lt;link href=&quot;http://how2j.cn/study/css/bootstrap/3.3.6/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;\n&lt;script src=&quot;http://how2j.cn/study/js/bootstrap/3.3.6/bootstrap.min.js&quot;&gt;&lt;/script&gt;\n&lt;style&gt;\n  div.item img{\nwidth:100%;\n   }\n  div#carousel-example-generic{\nwidth:80%;\nmargin:0 auto;\n  }\n&lt;/style&gt;\n&lt;div id=&quot;carousel-example-generic&quot; class=&quot;carousel slide&quot; data-ride=&quot;carousel&quot;&gt;\n  &lt;!-- Indicators --&gt;\n  &lt;ol class=&quot;carousel-indicators&quot;&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;0&quot; class=&quot;active&quot;&gt;&lt;/li&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;1&quot;&gt;&lt;/li&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;2&quot;&gt;&lt;/li&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;3&quot;&gt;&lt;/li&gt;\n  &lt;/ol&gt;\n\n  &lt;!-- Wrapper for slides --&gt;\n  &lt;div class=&quot;carousel-inner&quot; role=&quot;listbox&quot;&gt;\n&lt;div class=&quot;item active&quot;&gt;\n&lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/1.jpg&quot; &gt;\n&lt;div class=&quot;carousel-caption&quot;&gt;\nscene 1\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;div class=&quot;item&quot;&gt;\n&lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/2.jpg&quot; &gt;\n&lt;div class=&quot;carousel-caption&quot;&gt;\nscene 2\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;div class=&quot;item&quot;&gt;\n&lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/3.jpg&quot; &gt;\n&lt;div class=&quot;carousel-caption&quot;&gt;\nscene 3\n&lt;/div&gt;\n&lt;/div&gt;\n\n&lt;div class=&quot;item&quot;&gt;\n&lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/4.jpg&quot; &gt;\n&lt;div class=&quot;carousel-caption&quot;&gt;\nscene 4\n&lt;/div&gt;\n&lt;/div&gt;      \n&lt;/div&gt;\n&lt;/div&gt;  \n</code></pre></blockquote>\n<h3 id=\"设置轮播速度\"><a href=\"#设置轮播速度\" class=\"headerlink\" title=\"设置轮播速度\"></a>设置轮播速度</h3><p>代码如下：  </p>\n<blockquote>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;script src=&quot;http://how2j.cn/study/js/jquery/2.0.0/jquery.min.js&quot;&gt;&lt;/script&gt;\n&lt;link href=&quot;http://how2j.cn/study/css/bootstrap/3.3.6/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;\n&lt;script src=&quot;http://how2j.cn/study/js/bootstrap/3.3.6/bootstrap.min.js&quot;&gt;&lt;/script&gt;\n&lt;style&gt;\n  div.item img{\nwidth:100%;\n   }\n  div#carousel-example-generic{\nwidth:80%;\nmargin:0 auto;\n  }\n&lt;/style&gt;\n&lt;div id=&quot;carousel-example-generic&quot; class=&quot;carousel slide&quot; data-ride=&quot;carousel&quot; data-interval=&quot;1000&quot;&gt;\n  &lt;!-- Indicators --&gt;\n  &lt;ol class=&quot;carousel-indicators&quot;&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;0&quot; class=&quot;active&quot;&gt;&lt;/li&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;1&quot;&gt;&lt;/li&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;2&quot;&gt;&lt;/li&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;3&quot;&gt;&lt;/li&gt;\n  &lt;/ol&gt;\n\n  &lt;!-- Wrapper for slides --&gt;\n  &lt;div class=&quot;carousel-inner&quot; role=&quot;listbox&quot;&gt;\n&lt;div class=&quot;item active&quot;&gt;\n  &lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/1.jpg&quot; &gt;\n&lt;/div&gt;\n&lt;div class=&quot;item&quot;&gt;\n&lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/2.jpg&quot; &gt;\n&lt;/div&gt;\n&lt;div class=&quot;item&quot;&gt;\n&lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/3.jpg&quot; &gt;\n&lt;/div&gt;\n\n&lt;div class=&quot;item&quot;&gt;\n&lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/4.jpg&quot; &gt;\n&lt;/div&gt;\n\n  &lt;/div&gt;\n&lt;/div&gt;   \n</code></pre></blockquote>\n<h3 id=\"控制前后的轮播\"><a href=\"#控制前后的轮播\" class=\"headerlink\" title=\"控制前后的轮播\"></a>控制前后的轮播</h3><p>代码如下：   </p>\n<blockquote>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;script src=&quot;http://how2j.cn/study/js/jquery/2.0.0/jquery.min.js&quot;&gt;&lt;/script&gt;\n&lt;link href=&quot;http://how2j.cn/study/css/bootstrap/3.3.6/bootstrap.min.css&quot; \nrel=&quot;stylesheet&quot;&gt;\n&lt;script src=&quot;http://how2j.cn/study/js/bootstrap/3.3.6/bootstrap.min.js&quot;&gt;&lt;/\nscript&gt;\n&lt;style&gt;\n  div.item img{\nwidth:100%;\n   }\n  div#carousel-example-generic{\nwidth:80%;\nmargin:0 auto;\n  }\n&lt;/style&gt;\n&lt;div id=&quot;carousel-example-generic&quot; class=&quot;carousel slide&quot; data-\nride=&quot;carousel&quot; data-interval=&quot;1000&quot;&gt;\n  &lt;!-- Indicators --&gt;\n  &lt;ol class=&quot;carousel-indicators&quot;&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;0&quot; \nclass=&quot;active&quot;&gt;&lt;/li&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;1&quot;&gt;&lt;/li&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;2&quot;&gt;&lt;/li&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;3&quot;&gt;&lt;/li&gt;\n  &lt;/ol&gt;\n\n &lt;!-- Wrapper for slides --&gt;\n &lt;div class=&quot;carousel-inner&quot; role=&quot;listbox&quot;&gt;\n&lt;div class=&quot;item active&quot;&gt;\n&lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/1.jpg&quot; &gt;\n&lt;/div&gt;\n&lt;div class=&quot;item&quot;&gt;\n&lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/2.jpg&quot; &gt;\n&lt;/div&gt;\n&lt;div class=&quot;item&quot;&gt;\n&lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/3.jpg&quot; &gt;\n&lt;/div&gt;\n\n&lt;div class=&quot;item&quot;&gt;\n&lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/4.jpg&quot; &gt;\n&lt;/div&gt;\n\n  &lt;/div&gt;\n&lt;/div&gt; \n&lt;!-- Controls --&gt;\n&lt;a class=&quot;left carousel-control&quot; href=&quot;#carousel-example-generic&quot; \nrole=&quot;button&quot; data-slide=&quot;prev&quot;&gt;\n&lt;span class=&quot;glyphicon glyphicon-chevron-left&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt;\n\n&lt;/a&gt;\n&lt;a class=&quot;right carousel-control&quot; href=&quot;#carousel-example-generic&quot; \nrole=&quot;button&quot; data-slide=&quot;next&quot;&gt;\n &lt;span class=&quot;glyphicon glyphicon-chevron-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt;  \n&lt;/a&gt;\n&lt;/div&gt;  \n</code></pre><hr>\n</blockquote>\n"},{"title":"cookie与session的区别","_content":"## cookie与session的定义  \n当浏览网站的时候，WEB 服务器会先送一小小资料放在你的计算机上，Cookie 会帮你在网站上所打的文字或是一些选择，都纪录下来。当下次你再光临同一个网站，WEB 服务器会先看看有没有它上次留下的 Cookie 资料，有的话，就会依据 Cookie里的内容来判断使用者，送出特定的网页内容给你。 Cookie 的使用很普遍，许多有提供个人化服务的网站，都是利用 Cookie来辨认使用者，以方便送出使用者量身定做的内容，像是 Web 接口的免费 email 网站，都要用到 Cookie。具体来说cookie机制采用的是在客户端保持状态的方案，而session机制采用的是在服务器端保持状态的方案。  \n## cookie与session的机制  \n### cookie的机制  \n正统的cookie分发是通过扩展HTTP协议来实现的，服务器通过在HTTP的响应头中加上一行特殊的指示以提示浏览器按照指示生成相应的cookie。然而纯粹的客户端脚本如JavaScript或者VBScript也可以生成cookie。而cookie的使用是由浏览器按照一定的原则在后台自动发送给服务器的。浏览器检查所有存储的cookie，如果某个cookie所声明的作用范围大于等于将要请求的资源所在的位置，则把该cookie附在请求资源的HTTP请求头上发送给服务器。cookie的内容主要包括：名字，值，过期时间，路径和域。路径与域一起构成cookie的作用范围。若不设置过期时间，则表示这个cookie的生命期为浏览器会话期间，关闭浏览器窗口，cookie就消失。这种生命期为浏览器会话期的cookie被称为会话cookie。会话cookie一般不存储在硬盘上而是保存在内存里，当然这种行为并不是规范规定的。若设置了过期时间，浏览器就会把cookie保存到硬盘上，关闭后再次打开浏览器，这些cookie仍然有效直到超过设定的过期时间。存储在硬盘上的cookie可以在不同的浏览器进程间共享，比如两个IE窗口。而对于保存在内存里的cookie，不同的浏览器有不同的处理方式。  \n### session的机制  \nsession机制是一种服务器端的机制，服务器使用一种类似于散列表的结构（也可能就是使用散列表）来保存信息。当程序需要为某个客户端的请求创建一个session时，服务器首先检查这个客户端的请求里是否已包含了一个session标识（称为session id），如果已包含则说明以前已经为此客户端创建过session，服务器就按照session id把这个session检索出来使用（检索不到，会新建一个），如果客户端请求不包含session id，则为此客户端创建一个session并且生成一个与此session相关联的session id，session id的值应该是一个既不会重复，又不容易被找到规律以仿造的字符串，这个session id将被在本次响应中返回给客户端保存。保存这个session id的方式可以采用cookie，这样在交互过程中浏览器可以自动的按照规则把这个标识发送给服务器。一般这个cookie的名字都是类似于SEEESIONID。但cookie可以被人为的禁止，则必须有其他机制以便在cookie被禁止时仍然能够把session id传递回服务器。经常被使用的一种技术叫做URL重写，就是把session id直接附加在URL路径的后面。还有一种技术叫做表单隐藏字段。就是服务器会自动修改表单，添加一个隐藏字段，以便在表单提交时能够把session id传递回服务器。  \n## cookie与session的区别  \n* 1、cookie数据存放在客户的浏览器上，session数据放在服务器上。\n\n* 2、cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗\n   考虑到安全应当使用session。\n\n* 3、session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能\n   考虑到减轻服务器性能方面，应当使用COOKIE。\n\n* 4、单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。\n\n## 建议\n* 将登陆信息等重要信息存放为SESSION\n* 其他信息如果需要保留，可以放在COOKIE中","source":"_posts/2017.04.05cookie&session.md","raw":"---\ntitle: cookie与session的区别 \ncategories: 知识\ntags: [http]\n---\n## cookie与session的定义  \n当浏览网站的时候，WEB 服务器会先送一小小资料放在你的计算机上，Cookie 会帮你在网站上所打的文字或是一些选择，都纪录下来。当下次你再光临同一个网站，WEB 服务器会先看看有没有它上次留下的 Cookie 资料，有的话，就会依据 Cookie里的内容来判断使用者，送出特定的网页内容给你。 Cookie 的使用很普遍，许多有提供个人化服务的网站，都是利用 Cookie来辨认使用者，以方便送出使用者量身定做的内容，像是 Web 接口的免费 email 网站，都要用到 Cookie。具体来说cookie机制采用的是在客户端保持状态的方案，而session机制采用的是在服务器端保持状态的方案。  \n## cookie与session的机制  \n### cookie的机制  \n正统的cookie分发是通过扩展HTTP协议来实现的，服务器通过在HTTP的响应头中加上一行特殊的指示以提示浏览器按照指示生成相应的cookie。然而纯粹的客户端脚本如JavaScript或者VBScript也可以生成cookie。而cookie的使用是由浏览器按照一定的原则在后台自动发送给服务器的。浏览器检查所有存储的cookie，如果某个cookie所声明的作用范围大于等于将要请求的资源所在的位置，则把该cookie附在请求资源的HTTP请求头上发送给服务器。cookie的内容主要包括：名字，值，过期时间，路径和域。路径与域一起构成cookie的作用范围。若不设置过期时间，则表示这个cookie的生命期为浏览器会话期间，关闭浏览器窗口，cookie就消失。这种生命期为浏览器会话期的cookie被称为会话cookie。会话cookie一般不存储在硬盘上而是保存在内存里，当然这种行为并不是规范规定的。若设置了过期时间，浏览器就会把cookie保存到硬盘上，关闭后再次打开浏览器，这些cookie仍然有效直到超过设定的过期时间。存储在硬盘上的cookie可以在不同的浏览器进程间共享，比如两个IE窗口。而对于保存在内存里的cookie，不同的浏览器有不同的处理方式。  \n### session的机制  \nsession机制是一种服务器端的机制，服务器使用一种类似于散列表的结构（也可能就是使用散列表）来保存信息。当程序需要为某个客户端的请求创建一个session时，服务器首先检查这个客户端的请求里是否已包含了一个session标识（称为session id），如果已包含则说明以前已经为此客户端创建过session，服务器就按照session id把这个session检索出来使用（检索不到，会新建一个），如果客户端请求不包含session id，则为此客户端创建一个session并且生成一个与此session相关联的session id，session id的值应该是一个既不会重复，又不容易被找到规律以仿造的字符串，这个session id将被在本次响应中返回给客户端保存。保存这个session id的方式可以采用cookie，这样在交互过程中浏览器可以自动的按照规则把这个标识发送给服务器。一般这个cookie的名字都是类似于SEEESIONID。但cookie可以被人为的禁止，则必须有其他机制以便在cookie被禁止时仍然能够把session id传递回服务器。经常被使用的一种技术叫做URL重写，就是把session id直接附加在URL路径的后面。还有一种技术叫做表单隐藏字段。就是服务器会自动修改表单，添加一个隐藏字段，以便在表单提交时能够把session id传递回服务器。  \n## cookie与session的区别  \n* 1、cookie数据存放在客户的浏览器上，session数据放在服务器上。\n\n* 2、cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗\n   考虑到安全应当使用session。\n\n* 3、session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能\n   考虑到减轻服务器性能方面，应当使用COOKIE。\n\n* 4、单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。\n\n## 建议\n* 将登陆信息等重要信息存放为SESSION\n* 其他信息如果需要保留，可以放在COOKIE中","slug":"2017.04.05cookie&session","published":1,"date":"2017-04-05T12:15:18.000Z","updated":"2017-04-05T12:15:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziipt0008rh9z71isa60c","content":"<h2 id=\"cookie与session的定义\"><a href=\"#cookie与session的定义\" class=\"headerlink\" title=\"cookie与session的定义\"></a>cookie与session的定义</h2><p>当浏览网站的时候，WEB 服务器会先送一小小资料放在你的计算机上，Cookie 会帮你在网站上所打的文字或是一些选择，都纪录下来。当下次你再光临同一个网站，WEB 服务器会先看看有没有它上次留下的 Cookie 资料，有的话，就会依据 Cookie里的内容来判断使用者，送出特定的网页内容给你。 Cookie 的使用很普遍，许多有提供个人化服务的网站，都是利用 Cookie来辨认使用者，以方便送出使用者量身定做的内容，像是 Web 接口的免费 email 网站，都要用到 Cookie。具体来说cookie机制采用的是在客户端保持状态的方案，而session机制采用的是在服务器端保持状态的方案。  </p>\n<h2 id=\"cookie与session的机制\"><a href=\"#cookie与session的机制\" class=\"headerlink\" title=\"cookie与session的机制\"></a>cookie与session的机制</h2><h3 id=\"cookie的机制\"><a href=\"#cookie的机制\" class=\"headerlink\" title=\"cookie的机制\"></a>cookie的机制</h3><p>正统的cookie分发是通过扩展HTTP协议来实现的，服务器通过在HTTP的响应头中加上一行特殊的指示以提示浏览器按照指示生成相应的cookie。然而纯粹的客户端脚本如JavaScript或者VBScript也可以生成cookie。而cookie的使用是由浏览器按照一定的原则在后台自动发送给服务器的。浏览器检查所有存储的cookie，如果某个cookie所声明的作用范围大于等于将要请求的资源所在的位置，则把该cookie附在请求资源的HTTP请求头上发送给服务器。cookie的内容主要包括：名字，值，过期时间，路径和域。路径与域一起构成cookie的作用范围。若不设置过期时间，则表示这个cookie的生命期为浏览器会话期间，关闭浏览器窗口，cookie就消失。这种生命期为浏览器会话期的cookie被称为会话cookie。会话cookie一般不存储在硬盘上而是保存在内存里，当然这种行为并不是规范规定的。若设置了过期时间，浏览器就会把cookie保存到硬盘上，关闭后再次打开浏览器，这些cookie仍然有效直到超过设定的过期时间。存储在硬盘上的cookie可以在不同的浏览器进程间共享，比如两个IE窗口。而对于保存在内存里的cookie，不同的浏览器有不同的处理方式。  </p>\n<h3 id=\"session的机制\"><a href=\"#session的机制\" class=\"headerlink\" title=\"session的机制\"></a>session的机制</h3><p>session机制是一种服务器端的机制，服务器使用一种类似于散列表的结构（也可能就是使用散列表）来保存信息。当程序需要为某个客户端的请求创建一个session时，服务器首先检查这个客户端的请求里是否已包含了一个session标识（称为session id），如果已包含则说明以前已经为此客户端创建过session，服务器就按照session id把这个session检索出来使用（检索不到，会新建一个），如果客户端请求不包含session id，则为此客户端创建一个session并且生成一个与此session相关联的session id，session id的值应该是一个既不会重复，又不容易被找到规律以仿造的字符串，这个session id将被在本次响应中返回给客户端保存。保存这个session id的方式可以采用cookie，这样在交互过程中浏览器可以自动的按照规则把这个标识发送给服务器。一般这个cookie的名字都是类似于SEEESIONID。但cookie可以被人为的禁止，则必须有其他机制以便在cookie被禁止时仍然能够把session id传递回服务器。经常被使用的一种技术叫做URL重写，就是把session id直接附加在URL路径的后面。还有一种技术叫做表单隐藏字段。就是服务器会自动修改表单，添加一个隐藏字段，以便在表单提交时能够把session id传递回服务器。  </p>\n<h2 id=\"cookie与session的区别\"><a href=\"#cookie与session的区别\" class=\"headerlink\" title=\"cookie与session的区别\"></a>cookie与session的区别</h2><ul>\n<li><p>1、cookie数据存放在客户的浏览器上，session数据放在服务器上。</p>\n</li>\n<li><p>2、cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗<br> 考虑到安全应当使用session。</p>\n</li>\n<li><p>3、session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能<br> 考虑到减轻服务器性能方面，应当使用COOKIE。</p>\n</li>\n<li><p>4、单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。</p>\n</li>\n</ul>\n<h2 id=\"建议\"><a href=\"#建议\" class=\"headerlink\" title=\"建议\"></a>建议</h2><ul>\n<li>将登陆信息等重要信息存放为SESSION</li>\n<li>其他信息如果需要保留，可以放在COOKIE中</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"cookie与session的定义\"><a href=\"#cookie与session的定义\" class=\"headerlink\" title=\"cookie与session的定义\"></a>cookie与session的定义</h2><p>当浏览网站的时候，WEB 服务器会先送一小小资料放在你的计算机上，Cookie 会帮你在网站上所打的文字或是一些选择，都纪录下来。当下次你再光临同一个网站，WEB 服务器会先看看有没有它上次留下的 Cookie 资料，有的话，就会依据 Cookie里的内容来判断使用者，送出特定的网页内容给你。 Cookie 的使用很普遍，许多有提供个人化服务的网站，都是利用 Cookie来辨认使用者，以方便送出使用者量身定做的内容，像是 Web 接口的免费 email 网站，都要用到 Cookie。具体来说cookie机制采用的是在客户端保持状态的方案，而session机制采用的是在服务器端保持状态的方案。  </p>\n<h2 id=\"cookie与session的机制\"><a href=\"#cookie与session的机制\" class=\"headerlink\" title=\"cookie与session的机制\"></a>cookie与session的机制</h2><h3 id=\"cookie的机制\"><a href=\"#cookie的机制\" class=\"headerlink\" title=\"cookie的机制\"></a>cookie的机制</h3><p>正统的cookie分发是通过扩展HTTP协议来实现的，服务器通过在HTTP的响应头中加上一行特殊的指示以提示浏览器按照指示生成相应的cookie。然而纯粹的客户端脚本如JavaScript或者VBScript也可以生成cookie。而cookie的使用是由浏览器按照一定的原则在后台自动发送给服务器的。浏览器检查所有存储的cookie，如果某个cookie所声明的作用范围大于等于将要请求的资源所在的位置，则把该cookie附在请求资源的HTTP请求头上发送给服务器。cookie的内容主要包括：名字，值，过期时间，路径和域。路径与域一起构成cookie的作用范围。若不设置过期时间，则表示这个cookie的生命期为浏览器会话期间，关闭浏览器窗口，cookie就消失。这种生命期为浏览器会话期的cookie被称为会话cookie。会话cookie一般不存储在硬盘上而是保存在内存里，当然这种行为并不是规范规定的。若设置了过期时间，浏览器就会把cookie保存到硬盘上，关闭后再次打开浏览器，这些cookie仍然有效直到超过设定的过期时间。存储在硬盘上的cookie可以在不同的浏览器进程间共享，比如两个IE窗口。而对于保存在内存里的cookie，不同的浏览器有不同的处理方式。  </p>\n<h3 id=\"session的机制\"><a href=\"#session的机制\" class=\"headerlink\" title=\"session的机制\"></a>session的机制</h3><p>session机制是一种服务器端的机制，服务器使用一种类似于散列表的结构（也可能就是使用散列表）来保存信息。当程序需要为某个客户端的请求创建一个session时，服务器首先检查这个客户端的请求里是否已包含了一个session标识（称为session id），如果已包含则说明以前已经为此客户端创建过session，服务器就按照session id把这个session检索出来使用（检索不到，会新建一个），如果客户端请求不包含session id，则为此客户端创建一个session并且生成一个与此session相关联的session id，session id的值应该是一个既不会重复，又不容易被找到规律以仿造的字符串，这个session id将被在本次响应中返回给客户端保存。保存这个session id的方式可以采用cookie，这样在交互过程中浏览器可以自动的按照规则把这个标识发送给服务器。一般这个cookie的名字都是类似于SEEESIONID。但cookie可以被人为的禁止，则必须有其他机制以便在cookie被禁止时仍然能够把session id传递回服务器。经常被使用的一种技术叫做URL重写，就是把session id直接附加在URL路径的后面。还有一种技术叫做表单隐藏字段。就是服务器会自动修改表单，添加一个隐藏字段，以便在表单提交时能够把session id传递回服务器。  </p>\n<h2 id=\"cookie与session的区别\"><a href=\"#cookie与session的区别\" class=\"headerlink\" title=\"cookie与session的区别\"></a>cookie与session的区别</h2><ul>\n<li><p>1、cookie数据存放在客户的浏览器上，session数据放在服务器上。</p>\n</li>\n<li><p>2、cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗<br> 考虑到安全应当使用session。</p>\n</li>\n<li><p>3、session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能<br> 考虑到减轻服务器性能方面，应当使用COOKIE。</p>\n</li>\n<li><p>4、单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。</p>\n</li>\n</ul>\n<h2 id=\"建议\"><a href=\"#建议\" class=\"headerlink\" title=\"建议\"></a>建议</h2><ul>\n<li>将登陆信息等重要信息存放为SESSION</li>\n<li>其他信息如果需要保留，可以放在COOKIE中</li>\n</ul>\n"},{"title":"使用node.js+express+mysql实现简单的网页数据写入到数据库功能","_content":"## 前言  \n最近几天一直在搞这个东西，越学越发现自己的知识太少。从express搭建网页结构开始，发现需要掌握jade的缩进书写规则，真的蛋疼，一不小心就写错了。接着看怎么把数据导入到mysql，又需要ajax方法，由于我没有基础，只能先去看使用jquery封装的ajax方法，本身jquery也不太熟悉，又恶补了一波jquery。另外数据库这方面我也是小白，所以又去看了mysql的基本语句，前后用了将近一星期时间。写下这篇文章，便于以后翻到看看自己有多菜哈哈。  \n## 实现的功能\n简单的网页数据保存到mysql数据库的功能。（在windows平台）  \n## 项目环境准备  \n### 1.node.js和npm的安装\n### 2.express的安装\n* express的安装可以使用npm，可以使用命令 `npm install express -g` 来进行express的全局安装。express是构建网页基本框架的工具。\n## mysql数据库的设计  \n### 1.mysql下载安装与启动\nmysql的下载安装可以到mysql官网进行，具体的安装流程要取决于你的电脑，安装方法网上有很多，这里给出一篇我随便在百度搜索到的[文章](http://www.cnblogs.com/fnlingnzb-learner/p/6009153.html)，需要注意到的是注册的时候要填写数据库用户名和密码，请牢记你的用户名和密码，同时建议把mysql添加到系统启动目录，这样可以实现开机自启，避免了每次开机在命令行输入`net start mysql` 的繁琐步骤。当开机以后在系统进程里面看到一个叫mysqld.exe的进程时，说明mysql启动成功了. ![](http://onep1caa3.bkt.clouddn.com/1.png)\n### 2.数据库可视化工具的使用  \n为了减少操作的难度，我使用了可视化的数据库操作工具，这里推荐一款名为Navicat for MySql的可视化工具，使用起来十分方便。操作也很简单，登陆数据库的时候，用户填root,密码就是配置数据库时的密码， 链接名可以随便起，端口号为3306，主机名默认localhost不用修改。登陆以后可以实现增删数据库，增删表的操作。  \n\n![](http://onep1caa3.bkt.clouddn.com/2.png)  \n\n### 3.配置mysql\n以我自己的数据库为例，新建数据库azkaban（这是我学弟项目的名字），在这个数据库里新建表excutors。   \n![](http://onep1caa3.bkt.clouddn.com/3.png)  \n接着设计表元素，这里我添加了id，host,port,active四个选项接着保存表。     \n![](http://onep1caa3.bkt.clouddn.com/4.png)  \n\n## 项目设计 \n我们要实现的目的比较简单。使用`express demo1`可以新建名为demo1的工程，工程目录如下.  \n![](http://onep1caa3.bkt.clouddn.com/5.png)  \n \n\n接下来的步骤：  \n \n* 在package.json中田间mysql依赖： `\"mysql\":\"latest\"` ,使用node.js中的`npm install` 命令安装依赖包。  \n* 编写录入信息界面register.jade文件,用来实现简单的信息录入界面以及使用$.ajax()的post方法向服务器发起登陆请求。代码如下：  \n\n>     doctype html\n>     html\n>     head\n>     title\n>     link(rel='stylesheet', href='/bootstrap-3.3.7-dist/css/bootstrap.min.css')\n>     script(src='/javascripts/jquery-3.1.1.min.js')\n>     script(src='/bootstrap-3.3.7-dist/js/bootstrap.min.js')\n>     body(style='background: #dcd9da')\n>     .container\n>       .row\n>         .col-md-4.col-md-offset-4\n>           .panel.panel-default(style='margin-top: 60px')\n>             .panel-heading(style='background: #0d6aad')\n>               h3(align='center', style='color: #ffffff;')\n>                 | azkaban\n>             .panel-body(style='background: #e0e1ea')\n>               .form-group\n>                 .input-group\n>                   span.input-group-addon host\n>                   input#host.form-control(type='text')\n>               .form-group\n>                 .input-group\n>                   span.input-group-addon port\n>                   input#port.form-control(type='port')\n>               \n>               .form-group\n>                 .input-group\n>                   span.input-group-addon active\n>                   input#active.form-control(type='text')\n>               .form-group\n>                 button#register.btn.btn-success.btn-block(type='button')\n>                   | log in\n>               #popup.alert.alert-warning\n>                 a#close.close(href='#') &times;\n>                 div(align='center')\n>                   strong#popup-content(style='color: #b12e30;')\n>     script(type='text/javascript').\n>       $(document).ready(function () {\n>         var host = $(\"#host\");\n>         var port = $(\"#port\");\n>         var active = $(\"#active\");\n>         var register = $(\"#register\");\n>         var popup = $(\"#popup\");\n>         var popupContent = $(\"#popup-content\");\n>         var close = $(\"#close\");\n>         popup.hide();\n>         close.click(function () {\n>           popup.hide();\n>         });\n>         register.click(function () {\n>           if (host.val() == \"\" || port.val() == \"\" || active.val() == \"\") {\n>             popup.show();\n>             popupContent.html(\"can't be empty！\");}  \n>           else {\n>             $.ajax({\n>               url: \"/register/userRegister\",\n>               data: {\n>                 host: $(\"#host\").val(),\n>                 port: $(\"#port\").val(),\n>                 active: $(\"#active\").val()\n>                     },\n>               type: \"POST\",\n>               timeout: 36000,\n>               dataType: \"text\",\n>               success: function (data, textStatus) {\n>                 var dataJson = eval(\"(\" + data + \")\");\n>                 if (dataJson.code == 200) {\n>                   alert(\"success\");\n>                 } else if (dataJson.code == 400) {\n>                   popup.show();\n>                   popupContent.html(\"fail,please retry！\");\n>                 } else {\n>                   popup.show();\n>                   popupContent.html(\"error！\");\n>                 }\n>               },\n>               error: function (XMLHttpRequest, textStatus, errorThrown) {\n>                 alert(\"error:\" + textStatus);\n>               }\n>             });\n>           }\n>         });\n>       });\n\n\n* 编写录入信息路由register.js文件  \n\n\n----------\n   \n>     var express = require('express');\n>     var router = express.Router();\n>     \n>     var mysql = require('mysql');\n>     var config = require('../model/config');\n>     \n>     var pool = mysql.createPool(config.mysql);\n>     /* GET home page. */\n>     router.get('/', function (req, res, next) {\n>       res.render('register', {title: 'register'});\n>     });\n>     router.post('/userRegister', function (req, res, next) {\n>       var host = req.body.host;\n>       var port = req.body.port;\n>       var active = req.body.active; \n>       pool.getConnection(function (err, connection) {\n>     var $sql1 = \"INSERT INTO executors(id, host, port, active) VALUES(0,?,?,?)\";\n>     connection.query($sql1, [host, port, active], function (err, result) {\n>       console.log(result);\n>       if (result) {\n>     result = {\n>       code: 200,\n>       msg: 'success'\n>     };\n>       } else {\n>     result = {\n>       code: 400,\n>       msg: 'fail'\n>     };\n>       }\n>       res.json(result);\n>       connection.release();\n>     });\n>       \n>     });\n>       });\n>     module.exports = router;  \n\n  \n* 在app.js中增加register的界面和路由  \n \n![](http://onep1caa3.bkt.clouddn.com/7.png) \n\n* 设置连接数据库参数model/config.js 。在这里我使用用户azkaban创建了数据库azkaban。 \n>     module.exports = {\n>       mysql: {\n>     host: '127.0.0.1',\n>     user: 'azkaban',\n>     password: '',\n>     database: 'azkaban',\n>     port: 3306\n>       }\n>     };\n \n* 项目运行，在命令行输入`npm start`来启动应用，接着访问http://localhost:3000/register  \n查看网页。  \n![](http://onep1caa3.bkt.clouddn.com/8.png)  \n* 输入数据查看是否能录入到数据库  \n![](http://onep1caa3.bkt.clouddn.com/9.png)  \n![](http://onep1caa3.bkt.clouddn.com/10.png)  \n![](http://onep1caa3.bkt.clouddn.com/11.png)  \n这样我们就完成一个简单的功能的实现！\n","source":"_posts/2017.04.06mysql.md","raw":"---\ntitle: 使用node.js+express+mysql实现简单的网页数据写入到数据库功能 \ncategories: 随笔\ntags: [node.js,express,mysql]\n---\n## 前言  \n最近几天一直在搞这个东西，越学越发现自己的知识太少。从express搭建网页结构开始，发现需要掌握jade的缩进书写规则，真的蛋疼，一不小心就写错了。接着看怎么把数据导入到mysql，又需要ajax方法，由于我没有基础，只能先去看使用jquery封装的ajax方法，本身jquery也不太熟悉，又恶补了一波jquery。另外数据库这方面我也是小白，所以又去看了mysql的基本语句，前后用了将近一星期时间。写下这篇文章，便于以后翻到看看自己有多菜哈哈。  \n## 实现的功能\n简单的网页数据保存到mysql数据库的功能。（在windows平台）  \n## 项目环境准备  \n### 1.node.js和npm的安装\n### 2.express的安装\n* express的安装可以使用npm，可以使用命令 `npm install express -g` 来进行express的全局安装。express是构建网页基本框架的工具。\n## mysql数据库的设计  \n### 1.mysql下载安装与启动\nmysql的下载安装可以到mysql官网进行，具体的安装流程要取决于你的电脑，安装方法网上有很多，这里给出一篇我随便在百度搜索到的[文章](http://www.cnblogs.com/fnlingnzb-learner/p/6009153.html)，需要注意到的是注册的时候要填写数据库用户名和密码，请牢记你的用户名和密码，同时建议把mysql添加到系统启动目录，这样可以实现开机自启，避免了每次开机在命令行输入`net start mysql` 的繁琐步骤。当开机以后在系统进程里面看到一个叫mysqld.exe的进程时，说明mysql启动成功了. ![](http://onep1caa3.bkt.clouddn.com/1.png)\n### 2.数据库可视化工具的使用  \n为了减少操作的难度，我使用了可视化的数据库操作工具，这里推荐一款名为Navicat for MySql的可视化工具，使用起来十分方便。操作也很简单，登陆数据库的时候，用户填root,密码就是配置数据库时的密码， 链接名可以随便起，端口号为3306，主机名默认localhost不用修改。登陆以后可以实现增删数据库，增删表的操作。  \n\n![](http://onep1caa3.bkt.clouddn.com/2.png)  \n\n### 3.配置mysql\n以我自己的数据库为例，新建数据库azkaban（这是我学弟项目的名字），在这个数据库里新建表excutors。   \n![](http://onep1caa3.bkt.clouddn.com/3.png)  \n接着设计表元素，这里我添加了id，host,port,active四个选项接着保存表。     \n![](http://onep1caa3.bkt.clouddn.com/4.png)  \n\n## 项目设计 \n我们要实现的目的比较简单。使用`express demo1`可以新建名为demo1的工程，工程目录如下.  \n![](http://onep1caa3.bkt.clouddn.com/5.png)  \n \n\n接下来的步骤：  \n \n* 在package.json中田间mysql依赖： `\"mysql\":\"latest\"` ,使用node.js中的`npm install` 命令安装依赖包。  \n* 编写录入信息界面register.jade文件,用来实现简单的信息录入界面以及使用$.ajax()的post方法向服务器发起登陆请求。代码如下：  \n\n>     doctype html\n>     html\n>     head\n>     title\n>     link(rel='stylesheet', href='/bootstrap-3.3.7-dist/css/bootstrap.min.css')\n>     script(src='/javascripts/jquery-3.1.1.min.js')\n>     script(src='/bootstrap-3.3.7-dist/js/bootstrap.min.js')\n>     body(style='background: #dcd9da')\n>     .container\n>       .row\n>         .col-md-4.col-md-offset-4\n>           .panel.panel-default(style='margin-top: 60px')\n>             .panel-heading(style='background: #0d6aad')\n>               h3(align='center', style='color: #ffffff;')\n>                 | azkaban\n>             .panel-body(style='background: #e0e1ea')\n>               .form-group\n>                 .input-group\n>                   span.input-group-addon host\n>                   input#host.form-control(type='text')\n>               .form-group\n>                 .input-group\n>                   span.input-group-addon port\n>                   input#port.form-control(type='port')\n>               \n>               .form-group\n>                 .input-group\n>                   span.input-group-addon active\n>                   input#active.form-control(type='text')\n>               .form-group\n>                 button#register.btn.btn-success.btn-block(type='button')\n>                   | log in\n>               #popup.alert.alert-warning\n>                 a#close.close(href='#') &times;\n>                 div(align='center')\n>                   strong#popup-content(style='color: #b12e30;')\n>     script(type='text/javascript').\n>       $(document).ready(function () {\n>         var host = $(\"#host\");\n>         var port = $(\"#port\");\n>         var active = $(\"#active\");\n>         var register = $(\"#register\");\n>         var popup = $(\"#popup\");\n>         var popupContent = $(\"#popup-content\");\n>         var close = $(\"#close\");\n>         popup.hide();\n>         close.click(function () {\n>           popup.hide();\n>         });\n>         register.click(function () {\n>           if (host.val() == \"\" || port.val() == \"\" || active.val() == \"\") {\n>             popup.show();\n>             popupContent.html(\"can't be empty！\");}  \n>           else {\n>             $.ajax({\n>               url: \"/register/userRegister\",\n>               data: {\n>                 host: $(\"#host\").val(),\n>                 port: $(\"#port\").val(),\n>                 active: $(\"#active\").val()\n>                     },\n>               type: \"POST\",\n>               timeout: 36000,\n>               dataType: \"text\",\n>               success: function (data, textStatus) {\n>                 var dataJson = eval(\"(\" + data + \")\");\n>                 if (dataJson.code == 200) {\n>                   alert(\"success\");\n>                 } else if (dataJson.code == 400) {\n>                   popup.show();\n>                   popupContent.html(\"fail,please retry！\");\n>                 } else {\n>                   popup.show();\n>                   popupContent.html(\"error！\");\n>                 }\n>               },\n>               error: function (XMLHttpRequest, textStatus, errorThrown) {\n>                 alert(\"error:\" + textStatus);\n>               }\n>             });\n>           }\n>         });\n>       });\n\n\n* 编写录入信息路由register.js文件  \n\n\n----------\n   \n>     var express = require('express');\n>     var router = express.Router();\n>     \n>     var mysql = require('mysql');\n>     var config = require('../model/config');\n>     \n>     var pool = mysql.createPool(config.mysql);\n>     /* GET home page. */\n>     router.get('/', function (req, res, next) {\n>       res.render('register', {title: 'register'});\n>     });\n>     router.post('/userRegister', function (req, res, next) {\n>       var host = req.body.host;\n>       var port = req.body.port;\n>       var active = req.body.active; \n>       pool.getConnection(function (err, connection) {\n>     var $sql1 = \"INSERT INTO executors(id, host, port, active) VALUES(0,?,?,?)\";\n>     connection.query($sql1, [host, port, active], function (err, result) {\n>       console.log(result);\n>       if (result) {\n>     result = {\n>       code: 200,\n>       msg: 'success'\n>     };\n>       } else {\n>     result = {\n>       code: 400,\n>       msg: 'fail'\n>     };\n>       }\n>       res.json(result);\n>       connection.release();\n>     });\n>       \n>     });\n>       });\n>     module.exports = router;  \n\n  \n* 在app.js中增加register的界面和路由  \n \n![](http://onep1caa3.bkt.clouddn.com/7.png) \n\n* 设置连接数据库参数model/config.js 。在这里我使用用户azkaban创建了数据库azkaban。 \n>     module.exports = {\n>       mysql: {\n>     host: '127.0.0.1',\n>     user: 'azkaban',\n>     password: '',\n>     database: 'azkaban',\n>     port: 3306\n>       }\n>     };\n \n* 项目运行，在命令行输入`npm start`来启动应用，接着访问http://localhost:3000/register  \n查看网页。  \n![](http://onep1caa3.bkt.clouddn.com/8.png)  \n* 输入数据查看是否能录入到数据库  \n![](http://onep1caa3.bkt.clouddn.com/9.png)  \n![](http://onep1caa3.bkt.clouddn.com/10.png)  \n![](http://onep1caa3.bkt.clouddn.com/11.png)  \n这样我们就完成一个简单的功能的实现！\n","slug":"2017.04.06mysql","published":1,"date":"2017-04-07T08:54:48.000Z","updated":"2017-04-07T08:54:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziipu0009rh9z8tug00oo","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近几天一直在搞这个东西，越学越发现自己的知识太少。从express搭建网页结构开始，发现需要掌握jade的缩进书写规则，真的蛋疼，一不小心就写错了。接着看怎么把数据导入到mysql，又需要ajax方法，由于我没有基础，只能先去看使用jquery封装的ajax方法，本身jquery也不太熟悉，又恶补了一波jquery。另外数据库这方面我也是小白，所以又去看了mysql的基本语句，前后用了将近一星期时间。写下这篇文章，便于以后翻到看看自己有多菜哈哈。  </p>\n<h2 id=\"实现的功能\"><a href=\"#实现的功能\" class=\"headerlink\" title=\"实现的功能\"></a>实现的功能</h2><p>简单的网页数据保存到mysql数据库的功能。（在windows平台）  </p>\n<h2 id=\"项目环境准备\"><a href=\"#项目环境准备\" class=\"headerlink\" title=\"项目环境准备\"></a>项目环境准备</h2><h3 id=\"1-node-js和npm的安装\"><a href=\"#1-node-js和npm的安装\" class=\"headerlink\" title=\"1.node.js和npm的安装\"></a>1.node.js和npm的安装</h3><h3 id=\"2-express的安装\"><a href=\"#2-express的安装\" class=\"headerlink\" title=\"2.express的安装\"></a>2.express的安装</h3><ul>\n<li>express的安装可以使用npm，可以使用命令 <code>npm install express -g</code> 来进行express的全局安装。express是构建网页基本框架的工具。<h2 id=\"mysql数据库的设计\"><a href=\"#mysql数据库的设计\" class=\"headerlink\" title=\"mysql数据库的设计\"></a>mysql数据库的设计</h2><h3 id=\"1-mysql下载安装与启动\"><a href=\"#1-mysql下载安装与启动\" class=\"headerlink\" title=\"1.mysql下载安装与启动\"></a>1.mysql下载安装与启动</h3>mysql的下载安装可以到mysql官网进行，具体的安装流程要取决于你的电脑，安装方法网上有很多，这里给出一篇我随便在百度搜索到的<a href=\"http://www.cnblogs.com/fnlingnzb-learner/p/6009153.html\" target=\"_blank\" rel=\"noopener\">文章</a>，需要注意到的是注册的时候要填写数据库用户名和密码，请牢记你的用户名和密码，同时建议把mysql添加到系统启动目录，这样可以实现开机自启，避免了每次开机在命令行输入<code>net start mysql</code> 的繁琐步骤。当开机以后在系统进程里面看到一个叫mysqld.exe的进程时，说明mysql启动成功了. <img src=\"http://onep1caa3.bkt.clouddn.com/1.png\" alt=\"\"><h3 id=\"2-数据库可视化工具的使用\"><a href=\"#2-数据库可视化工具的使用\" class=\"headerlink\" title=\"2.数据库可视化工具的使用\"></a>2.数据库可视化工具的使用</h3>为了减少操作的难度，我使用了可视化的数据库操作工具，这里推荐一款名为Navicat for MySql的可视化工具，使用起来十分方便。操作也很简单，登陆数据库的时候，用户填root,密码就是配置数据库时的密码， 链接名可以随便起，端口号为3306，主机名默认localhost不用修改。登陆以后可以实现增删数据库，增删表的操作。  </li>\n</ul>\n<p><img src=\"http://onep1caa3.bkt.clouddn.com/2.png\" alt=\"\">  </p>\n<h3 id=\"3-配置mysql\"><a href=\"#3-配置mysql\" class=\"headerlink\" title=\"3.配置mysql\"></a>3.配置mysql</h3><p>以我自己的数据库为例，新建数据库azkaban（这是我学弟项目的名字），在这个数据库里新建表excutors。<br><img src=\"http://onep1caa3.bkt.clouddn.com/3.png\" alt=\"\"><br>接着设计表元素，这里我添加了id，host,port,active四个选项接着保存表。<br><img src=\"http://onep1caa3.bkt.clouddn.com/4.png\" alt=\"\">  </p>\n<h2 id=\"项目设计\"><a href=\"#项目设计\" class=\"headerlink\" title=\"项目设计\"></a>项目设计</h2><p>我们要实现的目的比较简单。使用<code>express demo1</code>可以新建名为demo1的工程，工程目录如下.<br><img src=\"http://onep1caa3.bkt.clouddn.com/5.png\" alt=\"\">  </p>\n<p>接下来的步骤：  </p>\n<ul>\n<li>在package.json中田间mysql依赖： <code>&quot;mysql&quot;:&quot;latest&quot;</code> ,使用node.js中的<code>npm install</code> 命令安装依赖包。  </li>\n<li>编写录入信息界面register.jade文件,用来实现简单的信息录入界面以及使用$.ajax()的post方法向服务器发起登陆请求。代码如下：  </li>\n</ul>\n<blockquote>\n<pre><code>doctype html\nhtml\nhead\ntitle\nlink(rel=&apos;stylesheet&apos;, href=&apos;/bootstrap-3.3.7-dist/css/bootstrap.min.css&apos;)\nscript(src=&apos;/javascripts/jquery-3.1.1.min.js&apos;)\nscript(src=&apos;/bootstrap-3.3.7-dist/js/bootstrap.min.js&apos;)\nbody(style=&apos;background: #dcd9da&apos;)\n.container\n  .row\n    .col-md-4.col-md-offset-4\n      .panel.panel-default(style=&apos;margin-top: 60px&apos;)\n        .panel-heading(style=&apos;background: #0d6aad&apos;)\n          h3(align=&apos;center&apos;, style=&apos;color: #ffffff;&apos;)\n            | azkaban\n        .panel-body(style=&apos;background: #e0e1ea&apos;)\n          .form-group\n            .input-group\n              span.input-group-addon host\n              input#host.form-control(type=&apos;text&apos;)\n          .form-group\n            .input-group\n              span.input-group-addon port\n              input#port.form-control(type=&apos;port&apos;)\n\n          .form-group\n            .input-group\n              span.input-group-addon active\n              input#active.form-control(type=&apos;text&apos;)\n          .form-group\n            button#register.btn.btn-success.btn-block(type=&apos;button&apos;)\n              | log in\n          #popup.alert.alert-warning\n            a#close.close(href=&apos;#&apos;) &amp;times;\n            div(align=&apos;center&apos;)\n              strong#popup-content(style=&apos;color: #b12e30;&apos;)\nscript(type=&apos;text/javascript&apos;).\n  $(document).ready(function () {\n    var host = $(&quot;#host&quot;);\n    var port = $(&quot;#port&quot;);\n    var active = $(&quot;#active&quot;);\n    var register = $(&quot;#register&quot;);\n    var popup = $(&quot;#popup&quot;);\n    var popupContent = $(&quot;#popup-content&quot;);\n    var close = $(&quot;#close&quot;);\n    popup.hide();\n    close.click(function () {\n      popup.hide();\n    });\n    register.click(function () {\n      if (host.val() == &quot;&quot; || port.val() == &quot;&quot; || active.val() == &quot;&quot;) {\n        popup.show();\n        popupContent.html(&quot;can&apos;t be empty！&quot;);}  \n      else {\n        $.ajax({\n          url: &quot;/register/userRegister&quot;,\n          data: {\n            host: $(&quot;#host&quot;).val(),\n            port: $(&quot;#port&quot;).val(),\n            active: $(&quot;#active&quot;).val()\n                },\n          type: &quot;POST&quot;,\n          timeout: 36000,\n          dataType: &quot;text&quot;,\n          success: function (data, textStatus) {\n            var dataJson = eval(&quot;(&quot; + data + &quot;)&quot;);\n            if (dataJson.code == 200) {\n              alert(&quot;success&quot;);\n            } else if (dataJson.code == 400) {\n              popup.show();\n              popupContent.html(&quot;fail,please retry！&quot;);\n            } else {\n              popup.show();\n              popupContent.html(&quot;error！&quot;);\n            }\n          },\n          error: function (XMLHttpRequest, textStatus, errorThrown) {\n            alert(&quot;error:&quot; + textStatus);\n          }\n        });\n      }\n    });\n  });\n</code></pre></blockquote>\n<ul>\n<li>编写录入信息路由register.js文件  </li>\n</ul>\n<hr>\n<blockquote>\n<pre><code>var express = require(&apos;express&apos;);\nvar router = express.Router();\n\nvar mysql = require(&apos;mysql&apos;);\nvar config = require(&apos;../model/config&apos;);\n\nvar pool = mysql.createPool(config.mysql);\n/* GET home page. */\nrouter.get(&apos;/&apos;, function (req, res, next) {\n  res.render(&apos;register&apos;, {title: &apos;register&apos;});\n});\nrouter.post(&apos;/userRegister&apos;, function (req, res, next) {\n  var host = req.body.host;\n  var port = req.body.port;\n  var active = req.body.active; \n  pool.getConnection(function (err, connection) {\nvar $sql1 = &quot;INSERT INTO executors(id, host, port, active) VALUES(0,?,?,?)&quot;;\nconnection.query($sql1, [host, port, active], function (err, result) {\n  console.log(result);\n  if (result) {\nresult = {\n  code: 200,\n  msg: &apos;success&apos;\n};\n  } else {\nresult = {\n  code: 400,\n  msg: &apos;fail&apos;\n};\n  }\n  res.json(result);\n  connection.release();\n});\n\n});\n  });\nmodule.exports = router;  \n</code></pre></blockquote>\n<ul>\n<li>在app.js中增加register的界面和路由  </li>\n</ul>\n<p><img src=\"http://onep1caa3.bkt.clouddn.com/7.png\" alt=\"\"> </p>\n<ul>\n<li><p>设置连接数据库参数model/config.js 。在这里我使用用户azkaban创建了数据库azkaban。 </p>\n<blockquote>\n<pre><code>module.exports = {\n  mysql: {\nhost: &apos;127.0.0.1&apos;,\nuser: &apos;azkaban&apos;,\npassword: &apos;&apos;,\ndatabase: &apos;azkaban&apos;,\nport: 3306\n  }\n};\n</code></pre></blockquote>\n</li>\n<li><p>项目运行，在命令行输入<code>npm start</code>来启动应用，接着访问<a href=\"http://localhost:3000/register\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/register</a><br>查看网页。<br><img src=\"http://onep1caa3.bkt.clouddn.com/8.png\" alt=\"\">  </p>\n</li>\n<li>输入数据查看是否能录入到数据库<br><img src=\"http://onep1caa3.bkt.clouddn.com/9.png\" alt=\"\"><br><img src=\"http://onep1caa3.bkt.clouddn.com/10.png\" alt=\"\"><br><img src=\"http://onep1caa3.bkt.clouddn.com/11.png\" alt=\"\"><br>这样我们就完成一个简单的功能的实现！</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近几天一直在搞这个东西，越学越发现自己的知识太少。从express搭建网页结构开始，发现需要掌握jade的缩进书写规则，真的蛋疼，一不小心就写错了。接着看怎么把数据导入到mysql，又需要ajax方法，由于我没有基础，只能先去看使用jquery封装的ajax方法，本身jquery也不太熟悉，又恶补了一波jquery。另外数据库这方面我也是小白，所以又去看了mysql的基本语句，前后用了将近一星期时间。写下这篇文章，便于以后翻到看看自己有多菜哈哈。  </p>\n<h2 id=\"实现的功能\"><a href=\"#实现的功能\" class=\"headerlink\" title=\"实现的功能\"></a>实现的功能</h2><p>简单的网页数据保存到mysql数据库的功能。（在windows平台）  </p>\n<h2 id=\"项目环境准备\"><a href=\"#项目环境准备\" class=\"headerlink\" title=\"项目环境准备\"></a>项目环境准备</h2><h3 id=\"1-node-js和npm的安装\"><a href=\"#1-node-js和npm的安装\" class=\"headerlink\" title=\"1.node.js和npm的安装\"></a>1.node.js和npm的安装</h3><h3 id=\"2-express的安装\"><a href=\"#2-express的安装\" class=\"headerlink\" title=\"2.express的安装\"></a>2.express的安装</h3><ul>\n<li>express的安装可以使用npm，可以使用命令 <code>npm install express -g</code> 来进行express的全局安装。express是构建网页基本框架的工具。<h2 id=\"mysql数据库的设计\"><a href=\"#mysql数据库的设计\" class=\"headerlink\" title=\"mysql数据库的设计\"></a>mysql数据库的设计</h2><h3 id=\"1-mysql下载安装与启动\"><a href=\"#1-mysql下载安装与启动\" class=\"headerlink\" title=\"1.mysql下载安装与启动\"></a>1.mysql下载安装与启动</h3>mysql的下载安装可以到mysql官网进行，具体的安装流程要取决于你的电脑，安装方法网上有很多，这里给出一篇我随便在百度搜索到的<a href=\"http://www.cnblogs.com/fnlingnzb-learner/p/6009153.html\" target=\"_blank\" rel=\"noopener\">文章</a>，需要注意到的是注册的时候要填写数据库用户名和密码，请牢记你的用户名和密码，同时建议把mysql添加到系统启动目录，这样可以实现开机自启，避免了每次开机在命令行输入<code>net start mysql</code> 的繁琐步骤。当开机以后在系统进程里面看到一个叫mysqld.exe的进程时，说明mysql启动成功了. <img src=\"http://onep1caa3.bkt.clouddn.com/1.png\" alt=\"\"><h3 id=\"2-数据库可视化工具的使用\"><a href=\"#2-数据库可视化工具的使用\" class=\"headerlink\" title=\"2.数据库可视化工具的使用\"></a>2.数据库可视化工具的使用</h3>为了减少操作的难度，我使用了可视化的数据库操作工具，这里推荐一款名为Navicat for MySql的可视化工具，使用起来十分方便。操作也很简单，登陆数据库的时候，用户填root,密码就是配置数据库时的密码， 链接名可以随便起，端口号为3306，主机名默认localhost不用修改。登陆以后可以实现增删数据库，增删表的操作。  </li>\n</ul>\n<p><img src=\"http://onep1caa3.bkt.clouddn.com/2.png\" alt=\"\">  </p>\n<h3 id=\"3-配置mysql\"><a href=\"#3-配置mysql\" class=\"headerlink\" title=\"3.配置mysql\"></a>3.配置mysql</h3><p>以我自己的数据库为例，新建数据库azkaban（这是我学弟项目的名字），在这个数据库里新建表excutors。<br><img src=\"http://onep1caa3.bkt.clouddn.com/3.png\" alt=\"\"><br>接着设计表元素，这里我添加了id，host,port,active四个选项接着保存表。<br><img src=\"http://onep1caa3.bkt.clouddn.com/4.png\" alt=\"\">  </p>\n<h2 id=\"项目设计\"><a href=\"#项目设计\" class=\"headerlink\" title=\"项目设计\"></a>项目设计</h2><p>我们要实现的目的比较简单。使用<code>express demo1</code>可以新建名为demo1的工程，工程目录如下.<br><img src=\"http://onep1caa3.bkt.clouddn.com/5.png\" alt=\"\">  </p>\n<p>接下来的步骤：  </p>\n<ul>\n<li>在package.json中田间mysql依赖： <code>&quot;mysql&quot;:&quot;latest&quot;</code> ,使用node.js中的<code>npm install</code> 命令安装依赖包。  </li>\n<li>编写录入信息界面register.jade文件,用来实现简单的信息录入界面以及使用$.ajax()的post方法向服务器发起登陆请求。代码如下：  </li>\n</ul>\n<blockquote>\n<pre><code>doctype html\nhtml\nhead\ntitle\nlink(rel=&apos;stylesheet&apos;, href=&apos;/bootstrap-3.3.7-dist/css/bootstrap.min.css&apos;)\nscript(src=&apos;/javascripts/jquery-3.1.1.min.js&apos;)\nscript(src=&apos;/bootstrap-3.3.7-dist/js/bootstrap.min.js&apos;)\nbody(style=&apos;background: #dcd9da&apos;)\n.container\n  .row\n    .col-md-4.col-md-offset-4\n      .panel.panel-default(style=&apos;margin-top: 60px&apos;)\n        .panel-heading(style=&apos;background: #0d6aad&apos;)\n          h3(align=&apos;center&apos;, style=&apos;color: #ffffff;&apos;)\n            | azkaban\n        .panel-body(style=&apos;background: #e0e1ea&apos;)\n          .form-group\n            .input-group\n              span.input-group-addon host\n              input#host.form-control(type=&apos;text&apos;)\n          .form-group\n            .input-group\n              span.input-group-addon port\n              input#port.form-control(type=&apos;port&apos;)\n\n          .form-group\n            .input-group\n              span.input-group-addon active\n              input#active.form-control(type=&apos;text&apos;)\n          .form-group\n            button#register.btn.btn-success.btn-block(type=&apos;button&apos;)\n              | log in\n          #popup.alert.alert-warning\n            a#close.close(href=&apos;#&apos;) &amp;times;\n            div(align=&apos;center&apos;)\n              strong#popup-content(style=&apos;color: #b12e30;&apos;)\nscript(type=&apos;text/javascript&apos;).\n  $(document).ready(function () {\n    var host = $(&quot;#host&quot;);\n    var port = $(&quot;#port&quot;);\n    var active = $(&quot;#active&quot;);\n    var register = $(&quot;#register&quot;);\n    var popup = $(&quot;#popup&quot;);\n    var popupContent = $(&quot;#popup-content&quot;);\n    var close = $(&quot;#close&quot;);\n    popup.hide();\n    close.click(function () {\n      popup.hide();\n    });\n    register.click(function () {\n      if (host.val() == &quot;&quot; || port.val() == &quot;&quot; || active.val() == &quot;&quot;) {\n        popup.show();\n        popupContent.html(&quot;can&apos;t be empty！&quot;);}  \n      else {\n        $.ajax({\n          url: &quot;/register/userRegister&quot;,\n          data: {\n            host: $(&quot;#host&quot;).val(),\n            port: $(&quot;#port&quot;).val(),\n            active: $(&quot;#active&quot;).val()\n                },\n          type: &quot;POST&quot;,\n          timeout: 36000,\n          dataType: &quot;text&quot;,\n          success: function (data, textStatus) {\n            var dataJson = eval(&quot;(&quot; + data + &quot;)&quot;);\n            if (dataJson.code == 200) {\n              alert(&quot;success&quot;);\n            } else if (dataJson.code == 400) {\n              popup.show();\n              popupContent.html(&quot;fail,please retry！&quot;);\n            } else {\n              popup.show();\n              popupContent.html(&quot;error！&quot;);\n            }\n          },\n          error: function (XMLHttpRequest, textStatus, errorThrown) {\n            alert(&quot;error:&quot; + textStatus);\n          }\n        });\n      }\n    });\n  });\n</code></pre></blockquote>\n<ul>\n<li>编写录入信息路由register.js文件  </li>\n</ul>\n<hr>\n<blockquote>\n<pre><code>var express = require(&apos;express&apos;);\nvar router = express.Router();\n\nvar mysql = require(&apos;mysql&apos;);\nvar config = require(&apos;../model/config&apos;);\n\nvar pool = mysql.createPool(config.mysql);\n/* GET home page. */\nrouter.get(&apos;/&apos;, function (req, res, next) {\n  res.render(&apos;register&apos;, {title: &apos;register&apos;});\n});\nrouter.post(&apos;/userRegister&apos;, function (req, res, next) {\n  var host = req.body.host;\n  var port = req.body.port;\n  var active = req.body.active; \n  pool.getConnection(function (err, connection) {\nvar $sql1 = &quot;INSERT INTO executors(id, host, port, active) VALUES(0,?,?,?)&quot;;\nconnection.query($sql1, [host, port, active], function (err, result) {\n  console.log(result);\n  if (result) {\nresult = {\n  code: 200,\n  msg: &apos;success&apos;\n};\n  } else {\nresult = {\n  code: 400,\n  msg: &apos;fail&apos;\n};\n  }\n  res.json(result);\n  connection.release();\n});\n\n});\n  });\nmodule.exports = router;  \n</code></pre></blockquote>\n<ul>\n<li>在app.js中增加register的界面和路由  </li>\n</ul>\n<p><img src=\"http://onep1caa3.bkt.clouddn.com/7.png\" alt=\"\"> </p>\n<ul>\n<li><p>设置连接数据库参数model/config.js 。在这里我使用用户azkaban创建了数据库azkaban。 </p>\n<blockquote>\n<pre><code>module.exports = {\n  mysql: {\nhost: &apos;127.0.0.1&apos;,\nuser: &apos;azkaban&apos;,\npassword: &apos;&apos;,\ndatabase: &apos;azkaban&apos;,\nport: 3306\n  }\n};\n</code></pre></blockquote>\n</li>\n<li><p>项目运行，在命令行输入<code>npm start</code>来启动应用，接着访问<a href=\"http://localhost:3000/register\" target=\"_blank\" rel=\"noopener\">http://localhost:3000/register</a><br>查看网页。<br><img src=\"http://onep1caa3.bkt.clouddn.com/8.png\" alt=\"\">  </p>\n</li>\n<li>输入数据查看是否能录入到数据库<br><img src=\"http://onep1caa3.bkt.clouddn.com/9.png\" alt=\"\"><br><img src=\"http://onep1caa3.bkt.clouddn.com/10.png\" alt=\"\"><br><img src=\"http://onep1caa3.bkt.clouddn.com/11.png\" alt=\"\"><br>这样我们就完成一个简单的功能的实现！</li>\n</ul>\n"},{"title":"git的介绍和使用","_content":"## git的介绍 \n\ngit是世界上最先进的分布式版本控制系统，可以实现协作编辑，记录文件改动等功能，由linus公司于2005年开发，接着git迅速成为最流行的分布式版本控制系统，在2008年GitHub上线，git为GitHub提供免费git存储，无数开源项目开始迁移至GitHub，包括jQuery，php，ruby等。git属于分布式版本控制系统，它没有所谓的中央服务器，每个人的电脑都有完整的版本库。这样不会因为中央服务器宕机导致网络瘫痪。\n## 创建版本库 \n\n 版本库又名仓库，英文名repository，可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。  \n创建一个版本库十分简单，首先选择一个合适的位置，windows下最好选择英文目录，接着打开指定git bash，cd到指定目录，我的是`D:\\gitrepository`，接着通过`git init`命令把这个目录变成git可以管理的仓库。系统会告诉你这是一个空的仓库，同时目录里面多了一个.git目录，这个目录是用来跟踪管理版本的，没事不要去修改，同时这个目录默认是隐藏的。  \n![](http://onep1caa3.bkt.clouddn.com/04.21.1.png)  \n \n## 把文件添加到版本库\n\n所有的版本控制系统，其实只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等，Git也不例外。版本控制系统可以告诉你每次的改动，比如在第5行加了一个单词“Linux”，在第8行删了一个单词“Windows”。而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是只知道图片从100KB改成了120KB，但到底改了啥，版本控制系统不知道，也没法知道。\n\n不幸的是，Microsoft的Word格式是二进制格式，因此，版本控制系统是没法跟踪Word文件的改动的。因为文本是有编码的，比如中文有常用的GBK编码，日文有Shift_JIS编码，如果没有历史遗留问题，强烈建议使用标准的UTF-8编码，所有语言使用同一种编码，既没有冲突，又被所有平台所支持。 \n同时强烈建议Windows平台用户不要使用自带的记事本编辑任何文本文件，这样经常会引起各种报错。推荐一个文本编辑工具叫做nodepad++，功能强大且免费，同时需要把默认编码设置为UTF-8 without BOM。  \n接下来我们添加文件的功能。  \n首先我们在gitrepository文件夹下新建一个名为readme.txt的文件，内容如下：  \n> Git is a version control system.  \n> Git is free software.\n  \n接着执行`git add readme.txt`命令，执行之后没没有任何反应，说明命令执行成功！  \n接下来，用命令git commit 告诉git，把文件提交到仓库。`git commit -m\"wrote a readme file\"`,这样文件就成功提交了。-m之后是本次提交的声明，可以输入任何内容，这样可以从历史纪录中方便地找到改动的记录。另外，commit一次性地可以提交很多文件。  \n\n\n![](http://onep1caa3.bkt.clouddn.com/04.21.2.png)  \n \n## 时光穿梭机   \n \n我们继续修改readme.txt中的内容，修改为  \n> Git is a distributed version control system.  \n> Git is free software.  \n\n然后运行`git status`，查看结果：  \n![](http://onep1caa3.bkt.clouddn.com/04.22.1.png)  \n这个命令告诉我们，readme.txt已经被修改了，但是还没有准备提交的修改。  \n通过`git diff`命令可以查看具体的修改内容：  \n![](http://onep1caa3.bkt.clouddn.com/04.22.2.png)  \n接着就是`git add` 和`git commit -m`命令来提交提交以后的文件了。  \n### 版本回退  \n \n现在我们有两个版本的readme.txt了，使用`git log`命令可以查看历史纪录：  \n\n![](http://onep1caa3.bkt.clouddn.com/04.22.3.png)  \n使用可视化git工具，可以看到git会把版本变化记录串成一条时间线。接着我们要使用“时光穿梭机”功能，head表示当前版本，也就是最新的版本，上一个版本就是head^，或者head~1，以此类推。\n我们使用`git reset -- hard HEAD^`来回退到上一个版本。  \n![](http://onep1caa3.bkt.clouddn.com/04.22.4.png)  \n这时第二个版本已经不存在了，可以通过前面的commit id来查找，接着执行g`it reset --hrad commit id`命令来恢复，前提是你没有关闭命令窗口。关闭之后也有办法，执行`git reflog`用来记录你的每一次命令，就可以找到每次的commit id：  \n![](http://onep1caa3.bkt.clouddn.com/04.22.5.png)  \n### 工作区和暂存区  \n#### 工作区  \n指在电脑上可以看到的目录。 \n#### 版本库  \n工作区中隐藏的.git目录，称为git的版本库。版本库中包含一个叫stage（或者index）的暂存区，还有git为我们创建的一第个分支master，以及指向master的一个名为head的指针。  \n把文件向git版本库中添加时，是分两步执行的：  \n第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；\n\n第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。\n\n因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。  \n### 管理修改  \ngit管理的是修改，而不是文件。需要注意的是，每次修改之后，如果不add到暂存区，是不会加入到commit中的。 \n### 撤销修改  \n使用`git checkout --readme.txt`命令可以撤销修改。这里有两种情况：  \n一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；\n\n一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。  \n总之，就是让这个文件回到最近一次git commit或git add时的状态。  \ngit checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到git checkout命令。  \n![](https://marklodato.github.io/visual-git-guide/basic-usage.svg)    \n\n* git add files 把当前文件放入暂存区域。\n* git commit 给暂存区域生成快照并提交。\n* git reset -- files 用来撤销最后一次git add files，你也可以用git reset 撤销所有暂存区域文件。\n* git checkout -- files 把文件从暂存区域复制到工作目录，用来丢弃本地修改。   \n\n \n### 删除文件  \n命令`git rm`可以用于删除一个文件，如果这个文件已经提交到版本库，那么你永远不会担心会误删，可以进行一键还原操作。执行git status命令可以告诉你那个文件被删除了。执行`git rm`之后，再执行`git commit`就可以从版本库中删除该文件了。  \n## 远程仓库  \n对于github这种远程仓库，本地的git仓库与GitHub之间的传输是通过ssh加密的，所以需要添加ssh key，然后绑定在自己的github仓库上。   \n现在的情景是，你已经在本地创建了一个Git仓库后，又想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步，这样，GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作。  \n首先，登陆github，创建新仓库，填入名称gitrepository，替他保持默认设置。  \n接着执行`git remote add origin git@github.com:hhb1994/gitrepository`命令来关联，远程仓库的名字就是origin，下一步就是推送内容：`git push -u origin master`  \n ![](http://onep1caa3.bkt.clouddn.com/04.22.6.png)  \n把本地库的内容推送到远程，使用`git push`命令，实际上是把master分支推送到远程。由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。  \n推送成功后，可以立刻在GitHub页面中看到远程库的内容已经和本地一模一样：  \n![](http://onep1caa3.bkt.clouddn.com/04.22.7.png)  \n从现在开始，只要本地做了提交，就可以通过命令git push origin master把本地的master分支的最新内容推送到github！\n## 从远程仓库克隆  \n使用命令git clone来克隆一个本地库：  \n\n    git clone git@github.com:hhb1994/hhb1994.github.io.git  \n![](http://onep1caa3.bkt.clouddn.com/04.22.8.png)  \n\n## 分支管理  \n分支在实际中有什么用呢？假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。现在有了分支，就不用怕了。你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。其他版本控制系统如SVN等都有分支管理，但是用过之后你会发现，这些版本控制系统创建和切换分支比蜗牛还慢，简直让人无法忍受，结果分支功能成了摆设，大家都不去用。但Git的分支是与众不同的，无论创建、切换和删除分支，Git在1秒钟之内就能完成！无论你的版本库是1个文件还是1万个文件。  \n### 创建与管理分支  \n  \nGit鼓励大量使用分支：\n\n查看分支：git branch\n\n创建分支：git branch <name>\n\n切换分支：git checkout <name>\n\n创建+切换分支：git checkout -b <name>\n\n合并某分支到当前分支：git merge <name>\n\n删除分支：git branch -d <name>","source":"_posts/2017.04.21.git.md","raw":"---\ntitle: git的介绍和使用\ntags: [git]\ncategories: 知识 \n---\n## git的介绍 \n\ngit是世界上最先进的分布式版本控制系统，可以实现协作编辑，记录文件改动等功能，由linus公司于2005年开发，接着git迅速成为最流行的分布式版本控制系统，在2008年GitHub上线，git为GitHub提供免费git存储，无数开源项目开始迁移至GitHub，包括jQuery，php，ruby等。git属于分布式版本控制系统，它没有所谓的中央服务器，每个人的电脑都有完整的版本库。这样不会因为中央服务器宕机导致网络瘫痪。\n## 创建版本库 \n\n 版本库又名仓库，英文名repository，可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。  \n创建一个版本库十分简单，首先选择一个合适的位置，windows下最好选择英文目录，接着打开指定git bash，cd到指定目录，我的是`D:\\gitrepository`，接着通过`git init`命令把这个目录变成git可以管理的仓库。系统会告诉你这是一个空的仓库，同时目录里面多了一个.git目录，这个目录是用来跟踪管理版本的，没事不要去修改，同时这个目录默认是隐藏的。  \n![](http://onep1caa3.bkt.clouddn.com/04.21.1.png)  \n \n## 把文件添加到版本库\n\n所有的版本控制系统，其实只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等，Git也不例外。版本控制系统可以告诉你每次的改动，比如在第5行加了一个单词“Linux”，在第8行删了一个单词“Windows”。而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是只知道图片从100KB改成了120KB，但到底改了啥，版本控制系统不知道，也没法知道。\n\n不幸的是，Microsoft的Word格式是二进制格式，因此，版本控制系统是没法跟踪Word文件的改动的。因为文本是有编码的，比如中文有常用的GBK编码，日文有Shift_JIS编码，如果没有历史遗留问题，强烈建议使用标准的UTF-8编码，所有语言使用同一种编码，既没有冲突，又被所有平台所支持。 \n同时强烈建议Windows平台用户不要使用自带的记事本编辑任何文本文件，这样经常会引起各种报错。推荐一个文本编辑工具叫做nodepad++，功能强大且免费，同时需要把默认编码设置为UTF-8 without BOM。  \n接下来我们添加文件的功能。  \n首先我们在gitrepository文件夹下新建一个名为readme.txt的文件，内容如下：  \n> Git is a version control system.  \n> Git is free software.\n  \n接着执行`git add readme.txt`命令，执行之后没没有任何反应，说明命令执行成功！  \n接下来，用命令git commit 告诉git，把文件提交到仓库。`git commit -m\"wrote a readme file\"`,这样文件就成功提交了。-m之后是本次提交的声明，可以输入任何内容，这样可以从历史纪录中方便地找到改动的记录。另外，commit一次性地可以提交很多文件。  \n\n\n![](http://onep1caa3.bkt.clouddn.com/04.21.2.png)  \n \n## 时光穿梭机   \n \n我们继续修改readme.txt中的内容，修改为  \n> Git is a distributed version control system.  \n> Git is free software.  \n\n然后运行`git status`，查看结果：  \n![](http://onep1caa3.bkt.clouddn.com/04.22.1.png)  \n这个命令告诉我们，readme.txt已经被修改了，但是还没有准备提交的修改。  \n通过`git diff`命令可以查看具体的修改内容：  \n![](http://onep1caa3.bkt.clouddn.com/04.22.2.png)  \n接着就是`git add` 和`git commit -m`命令来提交提交以后的文件了。  \n### 版本回退  \n \n现在我们有两个版本的readme.txt了，使用`git log`命令可以查看历史纪录：  \n\n![](http://onep1caa3.bkt.clouddn.com/04.22.3.png)  \n使用可视化git工具，可以看到git会把版本变化记录串成一条时间线。接着我们要使用“时光穿梭机”功能，head表示当前版本，也就是最新的版本，上一个版本就是head^，或者head~1，以此类推。\n我们使用`git reset -- hard HEAD^`来回退到上一个版本。  \n![](http://onep1caa3.bkt.clouddn.com/04.22.4.png)  \n这时第二个版本已经不存在了，可以通过前面的commit id来查找，接着执行g`it reset --hrad commit id`命令来恢复，前提是你没有关闭命令窗口。关闭之后也有办法，执行`git reflog`用来记录你的每一次命令，就可以找到每次的commit id：  \n![](http://onep1caa3.bkt.clouddn.com/04.22.5.png)  \n### 工作区和暂存区  \n#### 工作区  \n指在电脑上可以看到的目录。 \n#### 版本库  \n工作区中隐藏的.git目录，称为git的版本库。版本库中包含一个叫stage（或者index）的暂存区，还有git为我们创建的一第个分支master，以及指向master的一个名为head的指针。  \n把文件向git版本库中添加时，是分两步执行的：  \n第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；\n\n第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。\n\n因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。  \n### 管理修改  \ngit管理的是修改，而不是文件。需要注意的是，每次修改之后，如果不add到暂存区，是不会加入到commit中的。 \n### 撤销修改  \n使用`git checkout --readme.txt`命令可以撤销修改。这里有两种情况：  \n一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；\n\n一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。  \n总之，就是让这个文件回到最近一次git commit或git add时的状态。  \ngit checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到git checkout命令。  \n![](https://marklodato.github.io/visual-git-guide/basic-usage.svg)    \n\n* git add files 把当前文件放入暂存区域。\n* git commit 给暂存区域生成快照并提交。\n* git reset -- files 用来撤销最后一次git add files，你也可以用git reset 撤销所有暂存区域文件。\n* git checkout -- files 把文件从暂存区域复制到工作目录，用来丢弃本地修改。   \n\n \n### 删除文件  \n命令`git rm`可以用于删除一个文件，如果这个文件已经提交到版本库，那么你永远不会担心会误删，可以进行一键还原操作。执行git status命令可以告诉你那个文件被删除了。执行`git rm`之后，再执行`git commit`就可以从版本库中删除该文件了。  \n## 远程仓库  \n对于github这种远程仓库，本地的git仓库与GitHub之间的传输是通过ssh加密的，所以需要添加ssh key，然后绑定在自己的github仓库上。   \n现在的情景是，你已经在本地创建了一个Git仓库后，又想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步，这样，GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作。  \n首先，登陆github，创建新仓库，填入名称gitrepository，替他保持默认设置。  \n接着执行`git remote add origin git@github.com:hhb1994/gitrepository`命令来关联，远程仓库的名字就是origin，下一步就是推送内容：`git push -u origin master`  \n ![](http://onep1caa3.bkt.clouddn.com/04.22.6.png)  \n把本地库的内容推送到远程，使用`git push`命令，实际上是把master分支推送到远程。由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。  \n推送成功后，可以立刻在GitHub页面中看到远程库的内容已经和本地一模一样：  \n![](http://onep1caa3.bkt.clouddn.com/04.22.7.png)  \n从现在开始，只要本地做了提交，就可以通过命令git push origin master把本地的master分支的最新内容推送到github！\n## 从远程仓库克隆  \n使用命令git clone来克隆一个本地库：  \n\n    git clone git@github.com:hhb1994/hhb1994.github.io.git  \n![](http://onep1caa3.bkt.clouddn.com/04.22.8.png)  \n\n## 分支管理  \n分支在实际中有什么用呢？假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。现在有了分支，就不用怕了。你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。其他版本控制系统如SVN等都有分支管理，但是用过之后你会发现，这些版本控制系统创建和切换分支比蜗牛还慢，简直让人无法忍受，结果分支功能成了摆设，大家都不去用。但Git的分支是与众不同的，无论创建、切换和删除分支，Git在1秒钟之内就能完成！无论你的版本库是1个文件还是1万个文件。  \n### 创建与管理分支  \n  \nGit鼓励大量使用分支：\n\n查看分支：git branch\n\n创建分支：git branch <name>\n\n切换分支：git checkout <name>\n\n创建+切换分支：git checkout -b <name>\n\n合并某分支到当前分支：git merge <name>\n\n删除分支：git branch -d <name>","slug":"2017.04.21.git","published":1,"date":"2017-04-22T06:30:56.000Z","updated":"2017-04-22T06:30:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziipu000arh9z7pfx9xjo","content":"<h2 id=\"git的介绍\"><a href=\"#git的介绍\" class=\"headerlink\" title=\"git的介绍\"></a>git的介绍</h2><p>git是世界上最先进的分布式版本控制系统，可以实现协作编辑，记录文件改动等功能，由linus公司于2005年开发，接着git迅速成为最流行的分布式版本控制系统，在2008年GitHub上线，git为GitHub提供免费git存储，无数开源项目开始迁移至GitHub，包括jQuery，php，ruby等。git属于分布式版本控制系统，它没有所谓的中央服务器，每个人的电脑都有完整的版本库。这样不会因为中央服务器宕机导致网络瘫痪。</p>\n<h2 id=\"创建版本库\"><a href=\"#创建版本库\" class=\"headerlink\" title=\"创建版本库\"></a>创建版本库</h2><p> 版本库又名仓库，英文名repository，可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。<br>创建一个版本库十分简单，首先选择一个合适的位置，windows下最好选择英文目录，接着打开指定git bash，cd到指定目录，我的是<code>D:\\gitrepository</code>，接着通过<code>git init</code>命令把这个目录变成git可以管理的仓库。系统会告诉你这是一个空的仓库，同时目录里面多了一个.git目录，这个目录是用来跟踪管理版本的，没事不要去修改，同时这个目录默认是隐藏的。<br><img src=\"http://onep1caa3.bkt.clouddn.com/04.21.1.png\" alt=\"\">  </p>\n<h2 id=\"把文件添加到版本库\"><a href=\"#把文件添加到版本库\" class=\"headerlink\" title=\"把文件添加到版本库\"></a>把文件添加到版本库</h2><p>所有的版本控制系统，其实只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等，Git也不例外。版本控制系统可以告诉你每次的改动，比如在第5行加了一个单词“Linux”，在第8行删了一个单词“Windows”。而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是只知道图片从100KB改成了120KB，但到底改了啥，版本控制系统不知道，也没法知道。</p>\n<p>不幸的是，Microsoft的Word格式是二进制格式，因此，版本控制系统是没法跟踪Word文件的改动的。因为文本是有编码的，比如中文有常用的GBK编码，日文有Shift_JIS编码，如果没有历史遗留问题，强烈建议使用标准的UTF-8编码，所有语言使用同一种编码，既没有冲突，又被所有平台所支持。<br>同时强烈建议Windows平台用户不要使用自带的记事本编辑任何文本文件，这样经常会引起各种报错。推荐一个文本编辑工具叫做nodepad++，功能强大且免费，同时需要把默认编码设置为UTF-8 without BOM。<br>接下来我们添加文件的功能。<br>首先我们在gitrepository文件夹下新建一个名为readme.txt的文件，内容如下：  </p>\n<blockquote>\n<p>Git is a version control system.<br>Git is free software.</p>\n</blockquote>\n<p>接着执行<code>git add readme.txt</code>命令，执行之后没没有任何反应，说明命令执行成功！<br>接下来，用命令git commit 告诉git，把文件提交到仓库。<code>git commit -m&quot;wrote a readme file&quot;</code>,这样文件就成功提交了。-m之后是本次提交的声明，可以输入任何内容，这样可以从历史纪录中方便地找到改动的记录。另外，commit一次性地可以提交很多文件。  </p>\n<p><img src=\"http://onep1caa3.bkt.clouddn.com/04.21.2.png\" alt=\"\">  </p>\n<h2 id=\"时光穿梭机\"><a href=\"#时光穿梭机\" class=\"headerlink\" title=\"时光穿梭机\"></a>时光穿梭机</h2><p>我们继续修改readme.txt中的内容，修改为  </p>\n<blockquote>\n<p>Git is a distributed version control system.<br>Git is free software.  </p>\n</blockquote>\n<p>然后运行<code>git status</code>，查看结果：<br><img src=\"http://onep1caa3.bkt.clouddn.com/04.22.1.png\" alt=\"\"><br>这个命令告诉我们，readme.txt已经被修改了，但是还没有准备提交的修改。<br>通过<code>git diff</code>命令可以查看具体的修改内容：<br><img src=\"http://onep1caa3.bkt.clouddn.com/04.22.2.png\" alt=\"\"><br>接着就是<code>git add</code> 和<code>git commit -m</code>命令来提交提交以后的文件了。  </p>\n<h3 id=\"版本回退\"><a href=\"#版本回退\" class=\"headerlink\" title=\"版本回退\"></a>版本回退</h3><p>现在我们有两个版本的readme.txt了，使用<code>git log</code>命令可以查看历史纪录：  </p>\n<p><img src=\"http://onep1caa3.bkt.clouddn.com/04.22.3.png\" alt=\"\"><br>使用可视化git工具，可以看到git会把版本变化记录串成一条时间线。接着我们要使用“时光穿梭机”功能，head表示当前版本，也就是最新的版本，上一个版本就是head^，或者head~1，以此类推。<br>我们使用<code>git reset -- hard HEAD^</code>来回退到上一个版本。<br><img src=\"http://onep1caa3.bkt.clouddn.com/04.22.4.png\" alt=\"\"><br>这时第二个版本已经不存在了，可以通过前面的commit id来查找，接着执行g<code>it reset --hrad commit id</code>命令来恢复，前提是你没有关闭命令窗口。关闭之后也有办法，执行<code>git reflog</code>用来记录你的每一次命令，就可以找到每次的commit id：<br><img src=\"http://onep1caa3.bkt.clouddn.com/04.22.5.png\" alt=\"\">  </p>\n<h3 id=\"工作区和暂存区\"><a href=\"#工作区和暂存区\" class=\"headerlink\" title=\"工作区和暂存区\"></a>工作区和暂存区</h3><h4 id=\"工作区\"><a href=\"#工作区\" class=\"headerlink\" title=\"工作区\"></a>工作区</h4><p>指在电脑上可以看到的目录。 </p>\n<h4 id=\"版本库\"><a href=\"#版本库\" class=\"headerlink\" title=\"版本库\"></a>版本库</h4><p>工作区中隐藏的.git目录，称为git的版本库。版本库中包含一个叫stage（或者index）的暂存区，还有git为我们创建的一第个分支master，以及指向master的一个名为head的指针。<br>把文件向git版本库中添加时，是分两步执行的：<br>第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；</p>\n<p>第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。</p>\n<p>因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。  </p>\n<h3 id=\"管理修改\"><a href=\"#管理修改\" class=\"headerlink\" title=\"管理修改\"></a>管理修改</h3><p>git管理的是修改，而不是文件。需要注意的是，每次修改之后，如果不add到暂存区，是不会加入到commit中的。 </p>\n<h3 id=\"撤销修改\"><a href=\"#撤销修改\" class=\"headerlink\" title=\"撤销修改\"></a>撤销修改</h3><p>使用<code>git checkout --readme.txt</code>命令可以撤销修改。这里有两种情况：<br>一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</p>\n<p>一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。<br>总之，就是让这个文件回到最近一次git commit或git add时的状态。<br>git checkout – file命令中的–很重要，没有–，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到git checkout命令。<br><img src=\"https://marklodato.github.io/visual-git-guide/basic-usage.svg\" alt=\"\">    </p>\n<ul>\n<li>git add files 把当前文件放入暂存区域。</li>\n<li>git commit 给暂存区域生成快照并提交。</li>\n<li>git reset – files 用来撤销最后一次git add files，你也可以用git reset 撤销所有暂存区域文件。</li>\n<li>git checkout – files 把文件从暂存区域复制到工作目录，用来丢弃本地修改。   </li>\n</ul>\n<h3 id=\"删除文件\"><a href=\"#删除文件\" class=\"headerlink\" title=\"删除文件\"></a>删除文件</h3><p>命令<code>git rm</code>可以用于删除一个文件，如果这个文件已经提交到版本库，那么你永远不会担心会误删，可以进行一键还原操作。执行git status命令可以告诉你那个文件被删除了。执行<code>git rm</code>之后，再执行<code>git commit</code>就可以从版本库中删除该文件了。  </p>\n<h2 id=\"远程仓库\"><a href=\"#远程仓库\" class=\"headerlink\" title=\"远程仓库\"></a>远程仓库</h2><p>对于github这种远程仓库，本地的git仓库与GitHub之间的传输是通过ssh加密的，所以需要添加ssh key，然后绑定在自己的github仓库上。<br>现在的情景是，你已经在本地创建了一个Git仓库后，又想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步，这样，GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作。<br>首先，登陆github，创建新仓库，填入名称gitrepository，替他保持默认设置。<br>接着执行<code>git remote add origin git@github.com:hhb1994/gitrepository</code>命令来关联，远程仓库的名字就是origin，下一步就是推送内容：<code>git push -u origin master</code><br> <img src=\"http://onep1caa3.bkt.clouddn.com/04.22.6.png\" alt=\"\"><br>把本地库的内容推送到远程，使用<code>git push</code>命令，实际上是把master分支推送到远程。由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。<br>推送成功后，可以立刻在GitHub页面中看到远程库的内容已经和本地一模一样：<br><img src=\"http://onep1caa3.bkt.clouddn.com/04.22.7.png\" alt=\"\"><br>从现在开始，只要本地做了提交，就可以通过命令git push origin master把本地的master分支的最新内容推送到github！</p>\n<h2 id=\"从远程仓库克隆\"><a href=\"#从远程仓库克隆\" class=\"headerlink\" title=\"从远程仓库克隆\"></a>从远程仓库克隆</h2><p>使用命令git clone来克隆一个本地库：  </p>\n<pre><code>git clone git@github.com:hhb1994/hhb1994.github.io.git  \n</code></pre><p><img src=\"http://onep1caa3.bkt.clouddn.com/04.22.8.png\" alt=\"\">  </p>\n<h2 id=\"分支管理\"><a href=\"#分支管理\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h2><p>分支在实际中有什么用呢？假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。现在有了分支，就不用怕了。你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。其他版本控制系统如SVN等都有分支管理，但是用过之后你会发现，这些版本控制系统创建和切换分支比蜗牛还慢，简直让人无法忍受，结果分支功能成了摆设，大家都不去用。但Git的分支是与众不同的，无论创建、切换和删除分支，Git在1秒钟之内就能完成！无论你的版本库是1个文件还是1万个文件。  </p>\n<h3 id=\"创建与管理分支\"><a href=\"#创建与管理分支\" class=\"headerlink\" title=\"创建与管理分支\"></a>创建与管理分支</h3><p>Git鼓励大量使用分支：</p>\n<p>查看分支：git branch</p>\n<p>创建分支：git branch <name></p>\n<p>切换分支：git checkout <name></p>\n<p>创建+切换分支：git checkout -b <name></p>\n<p>合并某分支到当前分支：git merge <name></p>\n<p>删除分支：git branch -d <name></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"git的介绍\"><a href=\"#git的介绍\" class=\"headerlink\" title=\"git的介绍\"></a>git的介绍</h2><p>git是世界上最先进的分布式版本控制系统，可以实现协作编辑，记录文件改动等功能，由linus公司于2005年开发，接着git迅速成为最流行的分布式版本控制系统，在2008年GitHub上线，git为GitHub提供免费git存储，无数开源项目开始迁移至GitHub，包括jQuery，php，ruby等。git属于分布式版本控制系统，它没有所谓的中央服务器，每个人的电脑都有完整的版本库。这样不会因为中央服务器宕机导致网络瘫痪。</p>\n<h2 id=\"创建版本库\"><a href=\"#创建版本库\" class=\"headerlink\" title=\"创建版本库\"></a>创建版本库</h2><p> 版本库又名仓库，英文名repository，可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。<br>创建一个版本库十分简单，首先选择一个合适的位置，windows下最好选择英文目录，接着打开指定git bash，cd到指定目录，我的是<code>D:\\gitrepository</code>，接着通过<code>git init</code>命令把这个目录变成git可以管理的仓库。系统会告诉你这是一个空的仓库，同时目录里面多了一个.git目录，这个目录是用来跟踪管理版本的，没事不要去修改，同时这个目录默认是隐藏的。<br><img src=\"http://onep1caa3.bkt.clouddn.com/04.21.1.png\" alt=\"\">  </p>\n<h2 id=\"把文件添加到版本库\"><a href=\"#把文件添加到版本库\" class=\"headerlink\" title=\"把文件添加到版本库\"></a>把文件添加到版本库</h2><p>所有的版本控制系统，其实只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等，Git也不例外。版本控制系统可以告诉你每次的改动，比如在第5行加了一个单词“Linux”，在第8行删了一个单词“Windows”。而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是只知道图片从100KB改成了120KB，但到底改了啥，版本控制系统不知道，也没法知道。</p>\n<p>不幸的是，Microsoft的Word格式是二进制格式，因此，版本控制系统是没法跟踪Word文件的改动的。因为文本是有编码的，比如中文有常用的GBK编码，日文有Shift_JIS编码，如果没有历史遗留问题，强烈建议使用标准的UTF-8编码，所有语言使用同一种编码，既没有冲突，又被所有平台所支持。<br>同时强烈建议Windows平台用户不要使用自带的记事本编辑任何文本文件，这样经常会引起各种报错。推荐一个文本编辑工具叫做nodepad++，功能强大且免费，同时需要把默认编码设置为UTF-8 without BOM。<br>接下来我们添加文件的功能。<br>首先我们在gitrepository文件夹下新建一个名为readme.txt的文件，内容如下：  </p>\n<blockquote>\n<p>Git is a version control system.<br>Git is free software.</p>\n</blockquote>\n<p>接着执行<code>git add readme.txt</code>命令，执行之后没没有任何反应，说明命令执行成功！<br>接下来，用命令git commit 告诉git，把文件提交到仓库。<code>git commit -m&quot;wrote a readme file&quot;</code>,这样文件就成功提交了。-m之后是本次提交的声明，可以输入任何内容，这样可以从历史纪录中方便地找到改动的记录。另外，commit一次性地可以提交很多文件。  </p>\n<p><img src=\"http://onep1caa3.bkt.clouddn.com/04.21.2.png\" alt=\"\">  </p>\n<h2 id=\"时光穿梭机\"><a href=\"#时光穿梭机\" class=\"headerlink\" title=\"时光穿梭机\"></a>时光穿梭机</h2><p>我们继续修改readme.txt中的内容，修改为  </p>\n<blockquote>\n<p>Git is a distributed version control system.<br>Git is free software.  </p>\n</blockquote>\n<p>然后运行<code>git status</code>，查看结果：<br><img src=\"http://onep1caa3.bkt.clouddn.com/04.22.1.png\" alt=\"\"><br>这个命令告诉我们，readme.txt已经被修改了，但是还没有准备提交的修改。<br>通过<code>git diff</code>命令可以查看具体的修改内容：<br><img src=\"http://onep1caa3.bkt.clouddn.com/04.22.2.png\" alt=\"\"><br>接着就是<code>git add</code> 和<code>git commit -m</code>命令来提交提交以后的文件了。  </p>\n<h3 id=\"版本回退\"><a href=\"#版本回退\" class=\"headerlink\" title=\"版本回退\"></a>版本回退</h3><p>现在我们有两个版本的readme.txt了，使用<code>git log</code>命令可以查看历史纪录：  </p>\n<p><img src=\"http://onep1caa3.bkt.clouddn.com/04.22.3.png\" alt=\"\"><br>使用可视化git工具，可以看到git会把版本变化记录串成一条时间线。接着我们要使用“时光穿梭机”功能，head表示当前版本，也就是最新的版本，上一个版本就是head^，或者head~1，以此类推。<br>我们使用<code>git reset -- hard HEAD^</code>来回退到上一个版本。<br><img src=\"http://onep1caa3.bkt.clouddn.com/04.22.4.png\" alt=\"\"><br>这时第二个版本已经不存在了，可以通过前面的commit id来查找，接着执行g<code>it reset --hrad commit id</code>命令来恢复，前提是你没有关闭命令窗口。关闭之后也有办法，执行<code>git reflog</code>用来记录你的每一次命令，就可以找到每次的commit id：<br><img src=\"http://onep1caa3.bkt.clouddn.com/04.22.5.png\" alt=\"\">  </p>\n<h3 id=\"工作区和暂存区\"><a href=\"#工作区和暂存区\" class=\"headerlink\" title=\"工作区和暂存区\"></a>工作区和暂存区</h3><h4 id=\"工作区\"><a href=\"#工作区\" class=\"headerlink\" title=\"工作区\"></a>工作区</h4><p>指在电脑上可以看到的目录。 </p>\n<h4 id=\"版本库\"><a href=\"#版本库\" class=\"headerlink\" title=\"版本库\"></a>版本库</h4><p>工作区中隐藏的.git目录，称为git的版本库。版本库中包含一个叫stage（或者index）的暂存区，还有git为我们创建的一第个分支master，以及指向master的一个名为head的指针。<br>把文件向git版本库中添加时，是分两步执行的：<br>第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；</p>\n<p>第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。</p>\n<p>因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。  </p>\n<h3 id=\"管理修改\"><a href=\"#管理修改\" class=\"headerlink\" title=\"管理修改\"></a>管理修改</h3><p>git管理的是修改，而不是文件。需要注意的是，每次修改之后，如果不add到暂存区，是不会加入到commit中的。 </p>\n<h3 id=\"撤销修改\"><a href=\"#撤销修改\" class=\"headerlink\" title=\"撤销修改\"></a>撤销修改</h3><p>使用<code>git checkout --readme.txt</code>命令可以撤销修改。这里有两种情况：<br>一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</p>\n<p>一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。<br>总之，就是让这个文件回到最近一次git commit或git add时的状态。<br>git checkout – file命令中的–很重要，没有–，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到git checkout命令。<br><img src=\"https://marklodato.github.io/visual-git-guide/basic-usage.svg\" alt=\"\">    </p>\n<ul>\n<li>git add files 把当前文件放入暂存区域。</li>\n<li>git commit 给暂存区域生成快照并提交。</li>\n<li>git reset – files 用来撤销最后一次git add files，你也可以用git reset 撤销所有暂存区域文件。</li>\n<li>git checkout – files 把文件从暂存区域复制到工作目录，用来丢弃本地修改。   </li>\n</ul>\n<h3 id=\"删除文件\"><a href=\"#删除文件\" class=\"headerlink\" title=\"删除文件\"></a>删除文件</h3><p>命令<code>git rm</code>可以用于删除一个文件，如果这个文件已经提交到版本库，那么你永远不会担心会误删，可以进行一键还原操作。执行git status命令可以告诉你那个文件被删除了。执行<code>git rm</code>之后，再执行<code>git commit</code>就可以从版本库中删除该文件了。  </p>\n<h2 id=\"远程仓库\"><a href=\"#远程仓库\" class=\"headerlink\" title=\"远程仓库\"></a>远程仓库</h2><p>对于github这种远程仓库，本地的git仓库与GitHub之间的传输是通过ssh加密的，所以需要添加ssh key，然后绑定在自己的github仓库上。<br>现在的情景是，你已经在本地创建了一个Git仓库后，又想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步，这样，GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作。<br>首先，登陆github，创建新仓库，填入名称gitrepository，替他保持默认设置。<br>接着执行<code>git remote add origin git@github.com:hhb1994/gitrepository</code>命令来关联，远程仓库的名字就是origin，下一步就是推送内容：<code>git push -u origin master</code><br> <img src=\"http://onep1caa3.bkt.clouddn.com/04.22.6.png\" alt=\"\"><br>把本地库的内容推送到远程，使用<code>git push</code>命令，实际上是把master分支推送到远程。由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。<br>推送成功后，可以立刻在GitHub页面中看到远程库的内容已经和本地一模一样：<br><img src=\"http://onep1caa3.bkt.clouddn.com/04.22.7.png\" alt=\"\"><br>从现在开始，只要本地做了提交，就可以通过命令git push origin master把本地的master分支的最新内容推送到github！</p>\n<h2 id=\"从远程仓库克隆\"><a href=\"#从远程仓库克隆\" class=\"headerlink\" title=\"从远程仓库克隆\"></a>从远程仓库克隆</h2><p>使用命令git clone来克隆一个本地库：  </p>\n<pre><code>git clone git@github.com:hhb1994/hhb1994.github.io.git  \n</code></pre><p><img src=\"http://onep1caa3.bkt.clouddn.com/04.22.8.png\" alt=\"\">  </p>\n<h2 id=\"分支管理\"><a href=\"#分支管理\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h2><p>分支在实际中有什么用呢？假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。现在有了分支，就不用怕了。你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。其他版本控制系统如SVN等都有分支管理，但是用过之后你会发现，这些版本控制系统创建和切换分支比蜗牛还慢，简直让人无法忍受，结果分支功能成了摆设，大家都不去用。但Git的分支是与众不同的，无论创建、切换和删除分支，Git在1秒钟之内就能完成！无论你的版本库是1个文件还是1万个文件。  </p>\n<h3 id=\"创建与管理分支\"><a href=\"#创建与管理分支\" class=\"headerlink\" title=\"创建与管理分支\"></a>创建与管理分支</h3><p>Git鼓励大量使用分支：</p>\n<p>查看分支：git branch</p>\n<p>创建分支：git branch <name></p>\n<p>切换分支：git checkout <name></p>\n<p>创建+切换分支：git checkout -b <name></p>\n<p>合并某分支到当前分支：git merge <name></p>\n<p>删除分支：git branch -d <name></p>\n"},{"title":"HTML,XML和XHTML","_content":"# XHTML\n## XHTML是什么\n* XHTML 指可扩展超文本标签语言（EXtensible HyperText Markup Language）。\n* XHTML 的目标是取代 HTML。\n* XHTML 与 HTML 4.01 几乎是相同的。\n* XHTML 是更严格更纯净的 HTML 版本。\n* XHTML 是作为一种 XML 应用被重新定义的 HTML。\n* XHTML 是一个 W3C 标准。  \n## 为什么使用XHTML\n简单地说，XHTML是HTML与XML的结合物。HTML用来显示数据，而XML用来描述数据。XHTML可以被所有的支持XML的设备读取，同时在其余的浏览器升级至支持 XML 之前，XHTML 使我们有能力编写出拥有良好结构的文档，这些文档可以很好地工作于所有的浏览器，并且可以向后兼容。\n## XHTML语法\n* XHTML 元素必须被正确地嵌套。\n* XHTML 元素必须被关闭。\n* 标签名必须用小写字母。\n* XHTML 文档必须拥有根元素。\n* 属性名称必须小写。\n* 属性值必须加引号。\n* 属性不能简写。  \n\n下面是一个HTML的简写属性列表，以及在XHTML中的改写  \n![](http://onep1caa3.bkt.clouddn.com/04.24.1.png)\n\n* 用 Id 属性代替 name 属性。  \n\n* XHTML DTD 定义了强制使用的 HTML 元素。  \n\n## XHTML DTD\nXHTML定义了三种文件类型声明：   \n \n* STRICT（严格类型）\n* TRANSITIONAL（过渡类型）\n* FRAMESET（框架类型）  \n\n### XHTML 1.0 Strict\n    <!DOCTYPE html\n    PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \n    \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">  \n在此情况下使用：需要干净的标记，避免表现上的混乱。  \n### XHTML 1.0 Transitional\n    <!DOCTYPE html\n    PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n    \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">  \n在此情况下使用：当需要利用 HTML 在表现上的特性时，并且当需要为那些不支持层叠样式表的浏览器编写 XHTML 时。  \n### XHTML 1.0 Frameset\n    <!DOCTYPE html\n    PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\"\n    \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">  \n## 如何升级到XHTML\n* 添加文件类型声明\n* 小写的标签和属性名\n* 给所有属性加上引号\n* 空标签：`<hr>,<br>,<img>`中需要加上/\n* 验证站点\n\n## XHTML模块   \n### XHTML模块化的原因\n通过将 XHTML 分为若干模块，W3C 已经创造出数套小巧且定义良好的 XHTML 元素，这些元素既可被独立应用于简易设备，又可以与其他 XML 标准并入大型且更复杂的应用程序。  \n通过使用模块化的 XHTML，产品和软件设计者可以： \n \n* 选择被某种设备所支持的元素。\n* 在不打破 XHTML 标准的情况下，使用 XML 对 XHTML 进行扩展。\n* 针对小型设备，对 XHTML 进行简化。\n* 通过添加新的 XML 功能（比如 MathML, SVG, 语音和多媒体），针对复杂的应用对 XHTML 进行扩展。\n* 定义 XHTML 框架，比如 XHTML BASIC （针对移动设备的 XHTML 子集）。  \n\n### XHTML模块   \n![](http://onep1caa3.bkt.clouddn.com/04.24.2.png)\n \n\n## XHTML 标准属性  \n### 核心属性 (Core Attributes)\n![](http://onep1caa3.bkt.clouddn.com/04.24.3.png)  \n\n\n\n### 语言属性 (Language Attributes) \n![](http://onep1caa3.bkt.clouddn.com/04.24.4.png) \n### 键盘属性 (Keyboard Attributes)\n![](http://onep1caa3.bkt.clouddn.com/04.24.5.png)  \n## XHTML 事件属性\nHTML 4.0 的新特性之一是使 HTML 事件触发浏览器中的行为，比方说当用户点击一个 HTML 元素时启动一段 JavaScript 。以下就是可被插入 HTML 标签以定义事件行为的一系列属性。\n### 窗口事件 (Window Events)\n仅对body和frameset元素有效  \n![](http://onep1caa3.bkt.clouddn.com/04.24.6.png)\n### 表单元素事件 (Form Element Events)  \n仅对表单元素中有效。  \n![](http://onep1caa3.bkt.clouddn.com/04.24.7.png)\n### 键盘事件 (Keyboard Events) \n在下列元素中无效：base, bdo, br, frame, frameset, head, html, iframe, meta, param, script, style, 以及 title 元素。 \n![](http://onep1caa3.bkt.clouddn.com/04.24.8.png)\n### 鼠标事件 (Mouse Events)\n在下列元素中无效：base, bdo, br, frame, frameset, head, html, iframe, meta, param, script, style, title 元素。\n![](http://onep1caa3.bkt.clouddn.com/04.24.9.png)  \n# XML  \nXML被设计用来传输和存储数据。\n## 什么是 XML\n* XML 指可扩展标记语言（EXtensible Markup Language）；\n* XML 是一种标记语言，很类似 HTML；\n* XML 的设计宗旨是传输数据，而非显示数据；\n* XML 标签没有被预定义。您需要自行定义标签；\n* XML 被设计为具有自我描述性；\n* XML 是 W3C 的推荐标准。  \n\n### XML与HTML 的主要差别\n* XML 不是 HTML 的替代；\nXML 和 HTML 为不同的目的而设计；\n* XML 被设计为传输和存储数据，其焦点是数据的内容；\n* HTML 被设计用来显示数据，其焦点是数据的外观；\n* HTML 旨在显示信息，而 XML 旨在传输信息。  \n\n### XML没有任何行为\nXML仅仅是纯文本，有能力处理文本的软件都可以处理XML，通过XML你可以发明自己的标签，同时，XML是对HTML的一种补充，所以并不会代替HTML，XML是独立于软件和硬件的信息传输工具。\n## XML的用途\nXML常用于web开发的许多方面，比如简化数据的存储和共享，XML可以把数据从HTML分离。\n## XML 树结构\nXML文档形成了一种树结构，它从根部开始，然后扩展到枝叶。\n### 一个XML文档实例\n    <?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n    <note>\n    <to>George</to>\n    <from>John</from>\n    <heading>Reminder</heading>\n    <body>Don't forget the meeting!</body>\n    </note>  \n\n* 第一行是 XML 声明。它定义 XML 的版本 (1.0) 和所使用的编码 (ISO-8859-1 = Latin-1/西欧字符集)；\n* 下一行描述文档的根元素（像在说：“本文档是一个便签”）；\n* 接下来 4 行描述根的 4 个子元素（to, from, heading 以及 body）；\n* 最后一行定义根元素的结尾。\n\n树结构：  \n![](http://www.w3school.com.cn/i/ct_nodetree1.gif)    \n\n    <bookstore>\n    <book category=\"COOKING\">\n      <title lang=\"en\">Everyday Italian</title> \n      <author>Giada De Laurentiis</author> \n      <year>2005</year> \n      <price>30.00</price> \n    </book>\n    <book category=\"CHILDREN\">\n      <title lang=\"en\">Harry Potter</title> \n      <author>J K. Rowling</author> \n      <year>2005</year> \n      <price>29.99</price> \n    </book>\n    <book category=\"WEB\">\n      <title lang=\"en\">Learning XML</title> \n      <author>Erik T. Ray</author> \n      <year>2003</year> \n      <price>39.95</price> \n    </book>\n    </bookstore>  \n## XML 语法 \n* 所有XML 元素都必须有关闭标签\n* XML 对大小写敏感\n* XML 必须正确嵌套\n* XML 必须有根元素 \n* XML 的属性必须加引号 \n* 实体引用  \n* XML 中的注释`<!-- This is a comment -->` \n* 在XML中，空格会被保留  \n* XML 中以LF存储换行  \n\n## XML元素 \n### XML元素是什么\nXML 元素指的是从（且包括）开始标签直到（且包括）结束标签的部分。元素可包含其他元素、文本或者两者的混合物。元素也可以拥有属性。\n### XML 命名规则\n* 名称可以含字母、数字以及其他的字符\n* 名称不能以数字或者标点符号开始\n* 名称不能以字符 “xml”（或者 XML、Xml）开始\n* 名称不能包含空格\n\n### 最佳命名习惯  \n使名称具有描述性。使用下划线的名称也很不错。\n名称应当比较简短，比如：<book_title>，而不是：<the_title_of_the_book>。\n避免 \"-\" 字符。如果您按照这样的方式进行命名：\"first-name\"，一些软件会认为你需要提取第一个单词。\n避免 \".\" 字符。如果您按照这样的方式进行命名：\"first.name\"，一些软件会认为 \"name\" 是对象 \"first\" 的属性。\n避免 \":\" 字符。冒号会被转换为命名空间来使用（稍后介绍）。\nXML 文档经常有一个对应的数据库，其中的字段会对应 XML 文档中的元素。有一个实用的经验，即使用数据库的名称规则来命名 XML 文档中的元素。\n非英语的字母比如 éòá 也是合法的 XML 元素名，不过需要留意当软件开发商不支持这些字符时可能出现的问题。  \n### XML 是可扩展的\nXML 的优势之一，就是可以经常在不中断应用程序的情况下进行扩展。 \n## XML属性\n### XML属性\n属性通常提供不属于数据组成部分的信息。  \n`<file type=\"gif\">computer.gif</file>`   \n对于上面这个例子，文件类型与数据无关，但是对需要处理这个元素的软件来说却很重要。  \n### XML 属性必须加引号 \n属性值必须被引号包围，不过单引号和双引号均可使用。\n### XML 元素 vs. 属性\n 元数据（有关数据的数据）应当存储为属性，而数据本身应当存储为元素。  \n\n## XML 查看\nXML 文档不会携带有关如何显示数据的信息。\n由于 XML 标签由 XML 文档的作者“发明”，浏览器无法确定像 <table> 这样一个标签究竟描述一个 HTML 表格还是一个餐桌。\n在没有任何有关如何显示数据的信息的情况下，大多数的浏览器都会仅仅把 XML 文档显示为源代码。  \n## XML JavaScript\n### XMLHttpRequest 对象\nXMLHttpRequest 对象用于在后台与服务器交换数据。\n#### 什么是 XMLHttpRequest 对象？\nXMLHttpRequest 对象用于在后台与服务器交换数据。  \nXMLHttpRequest 对象是开发者的梦想，因为可以： \n \n* 在不重新加载页面的情况下更新网页\n* 在页面已加载后从服务器请求数据\n* 在页面已加载后从服务器接收数据\n* 在后台向服务器发送数据  \n\n#### 创建XMLHttpRequest 对象\n创建 XMLHttpRequest 对象的语法：`xmlhttp=new XMLHttpRequest();`  \n","source":"_posts/2017.04.24.html&xml&xhtml.md","raw":"---\ntitle: HTML,XML和XHTML\ntags: [HTML,XML,XHTML]\ncategories: 知识 \n---\n# XHTML\n## XHTML是什么\n* XHTML 指可扩展超文本标签语言（EXtensible HyperText Markup Language）。\n* XHTML 的目标是取代 HTML。\n* XHTML 与 HTML 4.01 几乎是相同的。\n* XHTML 是更严格更纯净的 HTML 版本。\n* XHTML 是作为一种 XML 应用被重新定义的 HTML。\n* XHTML 是一个 W3C 标准。  \n## 为什么使用XHTML\n简单地说，XHTML是HTML与XML的结合物。HTML用来显示数据，而XML用来描述数据。XHTML可以被所有的支持XML的设备读取，同时在其余的浏览器升级至支持 XML 之前，XHTML 使我们有能力编写出拥有良好结构的文档，这些文档可以很好地工作于所有的浏览器，并且可以向后兼容。\n## XHTML语法\n* XHTML 元素必须被正确地嵌套。\n* XHTML 元素必须被关闭。\n* 标签名必须用小写字母。\n* XHTML 文档必须拥有根元素。\n* 属性名称必须小写。\n* 属性值必须加引号。\n* 属性不能简写。  \n\n下面是一个HTML的简写属性列表，以及在XHTML中的改写  \n![](http://onep1caa3.bkt.clouddn.com/04.24.1.png)\n\n* 用 Id 属性代替 name 属性。  \n\n* XHTML DTD 定义了强制使用的 HTML 元素。  \n\n## XHTML DTD\nXHTML定义了三种文件类型声明：   \n \n* STRICT（严格类型）\n* TRANSITIONAL（过渡类型）\n* FRAMESET（框架类型）  \n\n### XHTML 1.0 Strict\n    <!DOCTYPE html\n    PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \n    \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">  \n在此情况下使用：需要干净的标记，避免表现上的混乱。  \n### XHTML 1.0 Transitional\n    <!DOCTYPE html\n    PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n    \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">  \n在此情况下使用：当需要利用 HTML 在表现上的特性时，并且当需要为那些不支持层叠样式表的浏览器编写 XHTML 时。  \n### XHTML 1.0 Frameset\n    <!DOCTYPE html\n    PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\"\n    \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">  \n## 如何升级到XHTML\n* 添加文件类型声明\n* 小写的标签和属性名\n* 给所有属性加上引号\n* 空标签：`<hr>,<br>,<img>`中需要加上/\n* 验证站点\n\n## XHTML模块   \n### XHTML模块化的原因\n通过将 XHTML 分为若干模块，W3C 已经创造出数套小巧且定义良好的 XHTML 元素，这些元素既可被独立应用于简易设备，又可以与其他 XML 标准并入大型且更复杂的应用程序。  \n通过使用模块化的 XHTML，产品和软件设计者可以： \n \n* 选择被某种设备所支持的元素。\n* 在不打破 XHTML 标准的情况下，使用 XML 对 XHTML 进行扩展。\n* 针对小型设备，对 XHTML 进行简化。\n* 通过添加新的 XML 功能（比如 MathML, SVG, 语音和多媒体），针对复杂的应用对 XHTML 进行扩展。\n* 定义 XHTML 框架，比如 XHTML BASIC （针对移动设备的 XHTML 子集）。  \n\n### XHTML模块   \n![](http://onep1caa3.bkt.clouddn.com/04.24.2.png)\n \n\n## XHTML 标准属性  \n### 核心属性 (Core Attributes)\n![](http://onep1caa3.bkt.clouddn.com/04.24.3.png)  \n\n\n\n### 语言属性 (Language Attributes) \n![](http://onep1caa3.bkt.clouddn.com/04.24.4.png) \n### 键盘属性 (Keyboard Attributes)\n![](http://onep1caa3.bkt.clouddn.com/04.24.5.png)  \n## XHTML 事件属性\nHTML 4.0 的新特性之一是使 HTML 事件触发浏览器中的行为，比方说当用户点击一个 HTML 元素时启动一段 JavaScript 。以下就是可被插入 HTML 标签以定义事件行为的一系列属性。\n### 窗口事件 (Window Events)\n仅对body和frameset元素有效  \n![](http://onep1caa3.bkt.clouddn.com/04.24.6.png)\n### 表单元素事件 (Form Element Events)  \n仅对表单元素中有效。  \n![](http://onep1caa3.bkt.clouddn.com/04.24.7.png)\n### 键盘事件 (Keyboard Events) \n在下列元素中无效：base, bdo, br, frame, frameset, head, html, iframe, meta, param, script, style, 以及 title 元素。 \n![](http://onep1caa3.bkt.clouddn.com/04.24.8.png)\n### 鼠标事件 (Mouse Events)\n在下列元素中无效：base, bdo, br, frame, frameset, head, html, iframe, meta, param, script, style, title 元素。\n![](http://onep1caa3.bkt.clouddn.com/04.24.9.png)  \n# XML  \nXML被设计用来传输和存储数据。\n## 什么是 XML\n* XML 指可扩展标记语言（EXtensible Markup Language）；\n* XML 是一种标记语言，很类似 HTML；\n* XML 的设计宗旨是传输数据，而非显示数据；\n* XML 标签没有被预定义。您需要自行定义标签；\n* XML 被设计为具有自我描述性；\n* XML 是 W3C 的推荐标准。  \n\n### XML与HTML 的主要差别\n* XML 不是 HTML 的替代；\nXML 和 HTML 为不同的目的而设计；\n* XML 被设计为传输和存储数据，其焦点是数据的内容；\n* HTML 被设计用来显示数据，其焦点是数据的外观；\n* HTML 旨在显示信息，而 XML 旨在传输信息。  \n\n### XML没有任何行为\nXML仅仅是纯文本，有能力处理文本的软件都可以处理XML，通过XML你可以发明自己的标签，同时，XML是对HTML的一种补充，所以并不会代替HTML，XML是独立于软件和硬件的信息传输工具。\n## XML的用途\nXML常用于web开发的许多方面，比如简化数据的存储和共享，XML可以把数据从HTML分离。\n## XML 树结构\nXML文档形成了一种树结构，它从根部开始，然后扩展到枝叶。\n### 一个XML文档实例\n    <?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n    <note>\n    <to>George</to>\n    <from>John</from>\n    <heading>Reminder</heading>\n    <body>Don't forget the meeting!</body>\n    </note>  \n\n* 第一行是 XML 声明。它定义 XML 的版本 (1.0) 和所使用的编码 (ISO-8859-1 = Latin-1/西欧字符集)；\n* 下一行描述文档的根元素（像在说：“本文档是一个便签”）；\n* 接下来 4 行描述根的 4 个子元素（to, from, heading 以及 body）；\n* 最后一行定义根元素的结尾。\n\n树结构：  \n![](http://www.w3school.com.cn/i/ct_nodetree1.gif)    \n\n    <bookstore>\n    <book category=\"COOKING\">\n      <title lang=\"en\">Everyday Italian</title> \n      <author>Giada De Laurentiis</author> \n      <year>2005</year> \n      <price>30.00</price> \n    </book>\n    <book category=\"CHILDREN\">\n      <title lang=\"en\">Harry Potter</title> \n      <author>J K. Rowling</author> \n      <year>2005</year> \n      <price>29.99</price> \n    </book>\n    <book category=\"WEB\">\n      <title lang=\"en\">Learning XML</title> \n      <author>Erik T. Ray</author> \n      <year>2003</year> \n      <price>39.95</price> \n    </book>\n    </bookstore>  \n## XML 语法 \n* 所有XML 元素都必须有关闭标签\n* XML 对大小写敏感\n* XML 必须正确嵌套\n* XML 必须有根元素 \n* XML 的属性必须加引号 \n* 实体引用  \n* XML 中的注释`<!-- This is a comment -->` \n* 在XML中，空格会被保留  \n* XML 中以LF存储换行  \n\n## XML元素 \n### XML元素是什么\nXML 元素指的是从（且包括）开始标签直到（且包括）结束标签的部分。元素可包含其他元素、文本或者两者的混合物。元素也可以拥有属性。\n### XML 命名规则\n* 名称可以含字母、数字以及其他的字符\n* 名称不能以数字或者标点符号开始\n* 名称不能以字符 “xml”（或者 XML、Xml）开始\n* 名称不能包含空格\n\n### 最佳命名习惯  \n使名称具有描述性。使用下划线的名称也很不错。\n名称应当比较简短，比如：<book_title>，而不是：<the_title_of_the_book>。\n避免 \"-\" 字符。如果您按照这样的方式进行命名：\"first-name\"，一些软件会认为你需要提取第一个单词。\n避免 \".\" 字符。如果您按照这样的方式进行命名：\"first.name\"，一些软件会认为 \"name\" 是对象 \"first\" 的属性。\n避免 \":\" 字符。冒号会被转换为命名空间来使用（稍后介绍）。\nXML 文档经常有一个对应的数据库，其中的字段会对应 XML 文档中的元素。有一个实用的经验，即使用数据库的名称规则来命名 XML 文档中的元素。\n非英语的字母比如 éòá 也是合法的 XML 元素名，不过需要留意当软件开发商不支持这些字符时可能出现的问题。  \n### XML 是可扩展的\nXML 的优势之一，就是可以经常在不中断应用程序的情况下进行扩展。 \n## XML属性\n### XML属性\n属性通常提供不属于数据组成部分的信息。  \n`<file type=\"gif\">computer.gif</file>`   \n对于上面这个例子，文件类型与数据无关，但是对需要处理这个元素的软件来说却很重要。  \n### XML 属性必须加引号 \n属性值必须被引号包围，不过单引号和双引号均可使用。\n### XML 元素 vs. 属性\n 元数据（有关数据的数据）应当存储为属性，而数据本身应当存储为元素。  \n\n## XML 查看\nXML 文档不会携带有关如何显示数据的信息。\n由于 XML 标签由 XML 文档的作者“发明”，浏览器无法确定像 <table> 这样一个标签究竟描述一个 HTML 表格还是一个餐桌。\n在没有任何有关如何显示数据的信息的情况下，大多数的浏览器都会仅仅把 XML 文档显示为源代码。  \n## XML JavaScript\n### XMLHttpRequest 对象\nXMLHttpRequest 对象用于在后台与服务器交换数据。\n#### 什么是 XMLHttpRequest 对象？\nXMLHttpRequest 对象用于在后台与服务器交换数据。  \nXMLHttpRequest 对象是开发者的梦想，因为可以： \n \n* 在不重新加载页面的情况下更新网页\n* 在页面已加载后从服务器请求数据\n* 在页面已加载后从服务器接收数据\n* 在后台向服务器发送数据  \n\n#### 创建XMLHttpRequest 对象\n创建 XMLHttpRequest 对象的语法：`xmlhttp=new XMLHttpRequest();`  \n","slug":"2017.04.24.html&xml&xhtml","published":1,"date":"2017-04-24T13:20:40.000Z","updated":"2017-04-24T13:20:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziipv000brh9z11f6f8wl","content":"<h1 id=\"XHTML\"><a href=\"#XHTML\" class=\"headerlink\" title=\"XHTML\"></a>XHTML</h1><h2 id=\"XHTML是什么\"><a href=\"#XHTML是什么\" class=\"headerlink\" title=\"XHTML是什么\"></a>XHTML是什么</h2><ul>\n<li>XHTML 指可扩展超文本标签语言（EXtensible HyperText Markup Language）。</li>\n<li>XHTML 的目标是取代 HTML。</li>\n<li>XHTML 与 HTML 4.01 几乎是相同的。</li>\n<li>XHTML 是更严格更纯净的 HTML 版本。</li>\n<li>XHTML 是作为一种 XML 应用被重新定义的 HTML。</li>\n<li>XHTML 是一个 W3C 标准。  <h2 id=\"为什么使用XHTML\"><a href=\"#为什么使用XHTML\" class=\"headerlink\" title=\"为什么使用XHTML\"></a>为什么使用XHTML</h2>简单地说，XHTML是HTML与XML的结合物。HTML用来显示数据，而XML用来描述数据。XHTML可以被所有的支持XML的设备读取，同时在其余的浏览器升级至支持 XML 之前，XHTML 使我们有能力编写出拥有良好结构的文档，这些文档可以很好地工作于所有的浏览器，并且可以向后兼容。<h2 id=\"XHTML语法\"><a href=\"#XHTML语法\" class=\"headerlink\" title=\"XHTML语法\"></a>XHTML语法</h2></li>\n<li>XHTML 元素必须被正确地嵌套。</li>\n<li>XHTML 元素必须被关闭。</li>\n<li>标签名必须用小写字母。</li>\n<li>XHTML 文档必须拥有根元素。</li>\n<li>属性名称必须小写。</li>\n<li>属性值必须加引号。</li>\n<li>属性不能简写。  </li>\n</ul>\n<p>下面是一个HTML的简写属性列表，以及在XHTML中的改写<br><img src=\"http://onep1caa3.bkt.clouddn.com/04.24.1.png\" alt=\"\"></p>\n<ul>\n<li><p>用 Id 属性代替 name 属性。  </p>\n</li>\n<li><p>XHTML DTD 定义了强制使用的 HTML 元素。  </p>\n</li>\n</ul>\n<h2 id=\"XHTML-DTD\"><a href=\"#XHTML-DTD\" class=\"headerlink\" title=\"XHTML DTD\"></a>XHTML DTD</h2><p>XHTML定义了三种文件类型声明：   </p>\n<ul>\n<li>STRICT（严格类型）</li>\n<li>TRANSITIONAL（过渡类型）</li>\n<li>FRAMESET（框架类型）  </li>\n</ul>\n<h3 id=\"XHTML-1-0-Strict\"><a href=\"#XHTML-1-0-Strict\" class=\"headerlink\" title=\"XHTML 1.0 Strict\"></a>XHTML 1.0 Strict</h3><pre><code>&lt;!DOCTYPE html\nPUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; \n&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;  \n</code></pre><p>在此情况下使用：需要干净的标记，避免表现上的混乱。  </p>\n<h3 id=\"XHTML-1-0-Transitional\"><a href=\"#XHTML-1-0-Transitional\" class=\"headerlink\" title=\"XHTML 1.0 Transitional\"></a>XHTML 1.0 Transitional</h3><pre><code>&lt;!DOCTYPE html\nPUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;  \n</code></pre><p>在此情况下使用：当需要利用 HTML 在表现上的特性时，并且当需要为那些不支持层叠样式表的浏览器编写 XHTML 时。  </p>\n<h3 id=\"XHTML-1-0-Frameset\"><a href=\"#XHTML-1-0-Frameset\" class=\"headerlink\" title=\"XHTML 1.0 Frameset\"></a>XHTML 1.0 Frameset</h3><pre><code>&lt;!DOCTYPE html\nPUBLIC &quot;-//W3C//DTD XHTML 1.0 Frameset//EN&quot;\n&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd&quot;&gt;  \n</code></pre><h2 id=\"如何升级到XHTML\"><a href=\"#如何升级到XHTML\" class=\"headerlink\" title=\"如何升级到XHTML\"></a>如何升级到XHTML</h2><ul>\n<li>添加文件类型声明</li>\n<li>小写的标签和属性名</li>\n<li>给所有属性加上引号</li>\n<li>空标签：<code>&lt;hr&gt;,&lt;br&gt;,&lt;img&gt;</code>中需要加上/</li>\n<li>验证站点</li>\n</ul>\n<h2 id=\"XHTML模块\"><a href=\"#XHTML模块\" class=\"headerlink\" title=\"XHTML模块\"></a>XHTML模块</h2><h3 id=\"XHTML模块化的原因\"><a href=\"#XHTML模块化的原因\" class=\"headerlink\" title=\"XHTML模块化的原因\"></a>XHTML模块化的原因</h3><p>通过将 XHTML 分为若干模块，W3C 已经创造出数套小巧且定义良好的 XHTML 元素，这些元素既可被独立应用于简易设备，又可以与其他 XML 标准并入大型且更复杂的应用程序。<br>通过使用模块化的 XHTML，产品和软件设计者可以： </p>\n<ul>\n<li>选择被某种设备所支持的元素。</li>\n<li>在不打破 XHTML 标准的情况下，使用 XML 对 XHTML 进行扩展。</li>\n<li>针对小型设备，对 XHTML 进行简化。</li>\n<li>通过添加新的 XML 功能（比如 MathML, SVG, 语音和多媒体），针对复杂的应用对 XHTML 进行扩展。</li>\n<li>定义 XHTML 框架，比如 XHTML BASIC （针对移动设备的 XHTML 子集）。  </li>\n</ul>\n<h3 id=\"XHTML模块-1\"><a href=\"#XHTML模块-1\" class=\"headerlink\" title=\"XHTML模块\"></a>XHTML模块</h3><p><img src=\"http://onep1caa3.bkt.clouddn.com/04.24.2.png\" alt=\"\"></p>\n<h2 id=\"XHTML-标准属性\"><a href=\"#XHTML-标准属性\" class=\"headerlink\" title=\"XHTML 标准属性\"></a>XHTML 标准属性</h2><h3 id=\"核心属性-Core-Attributes\"><a href=\"#核心属性-Core-Attributes\" class=\"headerlink\" title=\"核心属性 (Core Attributes)\"></a>核心属性 (Core Attributes)</h3><p><img src=\"http://onep1caa3.bkt.clouddn.com/04.24.3.png\" alt=\"\">  </p>\n<h3 id=\"语言属性-Language-Attributes\"><a href=\"#语言属性-Language-Attributes\" class=\"headerlink\" title=\"语言属性 (Language Attributes)\"></a>语言属性 (Language Attributes)</h3><p><img src=\"http://onep1caa3.bkt.clouddn.com/04.24.4.png\" alt=\"\"> </p>\n<h3 id=\"键盘属性-Keyboard-Attributes\"><a href=\"#键盘属性-Keyboard-Attributes\" class=\"headerlink\" title=\"键盘属性 (Keyboard Attributes)\"></a>键盘属性 (Keyboard Attributes)</h3><p><img src=\"http://onep1caa3.bkt.clouddn.com/04.24.5.png\" alt=\"\">  </p>\n<h2 id=\"XHTML-事件属性\"><a href=\"#XHTML-事件属性\" class=\"headerlink\" title=\"XHTML 事件属性\"></a>XHTML 事件属性</h2><p>HTML 4.0 的新特性之一是使 HTML 事件触发浏览器中的行为，比方说当用户点击一个 HTML 元素时启动一段 JavaScript 。以下就是可被插入 HTML 标签以定义事件行为的一系列属性。</p>\n<h3 id=\"窗口事件-Window-Events\"><a href=\"#窗口事件-Window-Events\" class=\"headerlink\" title=\"窗口事件 (Window Events)\"></a>窗口事件 (Window Events)</h3><p>仅对body和frameset元素有效<br><img src=\"http://onep1caa3.bkt.clouddn.com/04.24.6.png\" alt=\"\"></p>\n<h3 id=\"表单元素事件-Form-Element-Events\"><a href=\"#表单元素事件-Form-Element-Events\" class=\"headerlink\" title=\"表单元素事件 (Form Element Events)\"></a>表单元素事件 (Form Element Events)</h3><p>仅对表单元素中有效。<br><img src=\"http://onep1caa3.bkt.clouddn.com/04.24.7.png\" alt=\"\"></p>\n<h3 id=\"键盘事件-Keyboard-Events\"><a href=\"#键盘事件-Keyboard-Events\" class=\"headerlink\" title=\"键盘事件 (Keyboard Events)\"></a>键盘事件 (Keyboard Events)</h3><p>在下列元素中无效：base, bdo, br, frame, frameset, head, html, iframe, meta, param, script, style, 以及 title 元素。<br><img src=\"http://onep1caa3.bkt.clouddn.com/04.24.8.png\" alt=\"\"></p>\n<h3 id=\"鼠标事件-Mouse-Events\"><a href=\"#鼠标事件-Mouse-Events\" class=\"headerlink\" title=\"鼠标事件 (Mouse Events)\"></a>鼠标事件 (Mouse Events)</h3><p>在下列元素中无效：base, bdo, br, frame, frameset, head, html, iframe, meta, param, script, style, title 元素。<br><img src=\"http://onep1caa3.bkt.clouddn.com/04.24.9.png\" alt=\"\">  </p>\n<h1 id=\"XML\"><a href=\"#XML\" class=\"headerlink\" title=\"XML\"></a>XML</h1><p>XML被设计用来传输和存储数据。</p>\n<h2 id=\"什么是-XML\"><a href=\"#什么是-XML\" class=\"headerlink\" title=\"什么是 XML\"></a>什么是 XML</h2><ul>\n<li>XML 指可扩展标记语言（EXtensible Markup Language）；</li>\n<li>XML 是一种标记语言，很类似 HTML；</li>\n<li>XML 的设计宗旨是传输数据，而非显示数据；</li>\n<li>XML 标签没有被预定义。您需要自行定义标签；</li>\n<li>XML 被设计为具有自我描述性；</li>\n<li>XML 是 W3C 的推荐标准。  </li>\n</ul>\n<h3 id=\"XML与HTML-的主要差别\"><a href=\"#XML与HTML-的主要差别\" class=\"headerlink\" title=\"XML与HTML 的主要差别\"></a>XML与HTML 的主要差别</h3><ul>\n<li>XML 不是 HTML 的替代；<br>XML 和 HTML 为不同的目的而设计；</li>\n<li>XML 被设计为传输和存储数据，其焦点是数据的内容；</li>\n<li>HTML 被设计用来显示数据，其焦点是数据的外观；</li>\n<li>HTML 旨在显示信息，而 XML 旨在传输信息。  </li>\n</ul>\n<h3 id=\"XML没有任何行为\"><a href=\"#XML没有任何行为\" class=\"headerlink\" title=\"XML没有任何行为\"></a>XML没有任何行为</h3><p>XML仅仅是纯文本，有能力处理文本的软件都可以处理XML，通过XML你可以发明自己的标签，同时，XML是对HTML的一种补充，所以并不会代替HTML，XML是独立于软件和硬件的信息传输工具。</p>\n<h2 id=\"XML的用途\"><a href=\"#XML的用途\" class=\"headerlink\" title=\"XML的用途\"></a>XML的用途</h2><p>XML常用于web开发的许多方面，比如简化数据的存储和共享，XML可以把数据从HTML分离。</p>\n<h2 id=\"XML-树结构\"><a href=\"#XML-树结构\" class=\"headerlink\" title=\"XML 树结构\"></a>XML 树结构</h2><p>XML文档形成了一种树结构，它从根部开始，然后扩展到枝叶。</p>\n<h3 id=\"一个XML文档实例\"><a href=\"#一个XML文档实例\" class=\"headerlink\" title=\"一个XML文档实例\"></a>一个XML文档实例</h3><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;\n&lt;note&gt;\n&lt;to&gt;George&lt;/to&gt;\n&lt;from&gt;John&lt;/from&gt;\n&lt;heading&gt;Reminder&lt;/heading&gt;\n&lt;body&gt;Don&apos;t forget the meeting!&lt;/body&gt;\n&lt;/note&gt;  \n</code></pre><ul>\n<li>第一行是 XML 声明。它定义 XML 的版本 (1.0) 和所使用的编码 (ISO-8859-1 = Latin-1/西欧字符集)；</li>\n<li>下一行描述文档的根元素（像在说：“本文档是一个便签”）；</li>\n<li>接下来 4 行描述根的 4 个子元素（to, from, heading 以及 body）；</li>\n<li>最后一行定义根元素的结尾。</li>\n</ul>\n<p>树结构：<br><img src=\"http://www.w3school.com.cn/i/ct_nodetree1.gif\" alt=\"\">    </p>\n<pre><code>&lt;bookstore&gt;\n&lt;book category=&quot;COOKING&quot;&gt;\n  &lt;title lang=&quot;en&quot;&gt;Everyday Italian&lt;/title&gt; \n  &lt;author&gt;Giada De Laurentiis&lt;/author&gt; \n  &lt;year&gt;2005&lt;/year&gt; \n  &lt;price&gt;30.00&lt;/price&gt; \n&lt;/book&gt;\n&lt;book category=&quot;CHILDREN&quot;&gt;\n  &lt;title lang=&quot;en&quot;&gt;Harry Potter&lt;/title&gt; \n  &lt;author&gt;J K. Rowling&lt;/author&gt; \n  &lt;year&gt;2005&lt;/year&gt; \n  &lt;price&gt;29.99&lt;/price&gt; \n&lt;/book&gt;\n&lt;book category=&quot;WEB&quot;&gt;\n  &lt;title lang=&quot;en&quot;&gt;Learning XML&lt;/title&gt; \n  &lt;author&gt;Erik T. Ray&lt;/author&gt; \n  &lt;year&gt;2003&lt;/year&gt; \n  &lt;price&gt;39.95&lt;/price&gt; \n&lt;/book&gt;\n&lt;/bookstore&gt;  \n</code></pre><h2 id=\"XML-语法\"><a href=\"#XML-语法\" class=\"headerlink\" title=\"XML 语法\"></a>XML 语法</h2><ul>\n<li>所有XML 元素都必须有关闭标签</li>\n<li>XML 对大小写敏感</li>\n<li>XML 必须正确嵌套</li>\n<li>XML 必须有根元素 </li>\n<li>XML 的属性必须加引号 </li>\n<li>实体引用  </li>\n<li>XML 中的注释<code>&lt;!-- This is a comment --&gt;</code> </li>\n<li>在XML中，空格会被保留  </li>\n<li>XML 中以LF存储换行  </li>\n</ul>\n<h2 id=\"XML元素\"><a href=\"#XML元素\" class=\"headerlink\" title=\"XML元素\"></a>XML元素</h2><h3 id=\"XML元素是什么\"><a href=\"#XML元素是什么\" class=\"headerlink\" title=\"XML元素是什么\"></a>XML元素是什么</h3><p>XML 元素指的是从（且包括）开始标签直到（且包括）结束标签的部分。元素可包含其他元素、文本或者两者的混合物。元素也可以拥有属性。</p>\n<h3 id=\"XML-命名规则\"><a href=\"#XML-命名规则\" class=\"headerlink\" title=\"XML 命名规则\"></a>XML 命名规则</h3><ul>\n<li>名称可以含字母、数字以及其他的字符</li>\n<li>名称不能以数字或者标点符号开始</li>\n<li>名称不能以字符 “xml”（或者 XML、Xml）开始</li>\n<li>名称不能包含空格</li>\n</ul>\n<h3 id=\"最佳命名习惯\"><a href=\"#最佳命名习惯\" class=\"headerlink\" title=\"最佳命名习惯\"></a>最佳命名习惯</h3><p>使名称具有描述性。使用下划线的名称也很不错。<br>名称应当比较简短，比如：<book_title>，而不是：<the_title_of_the_book>。<br>避免 “-“ 字符。如果您按照这样的方式进行命名：”first-name”，一些软件会认为你需要提取第一个单词。<br>避免 “.” 字符。如果您按照这样的方式进行命名：”first.name”，一些软件会认为 “name” 是对象 “first” 的属性。<br>避免 “:” 字符。冒号会被转换为命名空间来使用（稍后介绍）。<br>XML 文档经常有一个对应的数据库，其中的字段会对应 XML 文档中的元素。有一个实用的经验，即使用数据库的名称规则来命名 XML 文档中的元素。<br>非英语的字母比如 éòá 也是合法的 XML 元素名，不过需要留意当软件开发商不支持这些字符时可能出现的问题。  </p>\n<h3 id=\"XML-是可扩展的\"><a href=\"#XML-是可扩展的\" class=\"headerlink\" title=\"XML 是可扩展的\"></a>XML 是可扩展的</h3><p>XML 的优势之一，就是可以经常在不中断应用程序的情况下进行扩展。 </p>\n<h2 id=\"XML属性\"><a href=\"#XML属性\" class=\"headerlink\" title=\"XML属性\"></a>XML属性</h2><h3 id=\"XML属性-1\"><a href=\"#XML属性-1\" class=\"headerlink\" title=\"XML属性\"></a>XML属性</h3><p>属性通常提供不属于数据组成部分的信息。<br><code>&lt;file type=&quot;gif&quot;&gt;computer.gif&lt;/file&gt;</code><br>对于上面这个例子，文件类型与数据无关，但是对需要处理这个元素的软件来说却很重要。  </p>\n<h3 id=\"XML-属性必须加引号\"><a href=\"#XML-属性必须加引号\" class=\"headerlink\" title=\"XML 属性必须加引号\"></a>XML 属性必须加引号</h3><p>属性值必须被引号包围，不过单引号和双引号均可使用。</p>\n<h3 id=\"XML-元素-vs-属性\"><a href=\"#XML-元素-vs-属性\" class=\"headerlink\" title=\"XML 元素 vs. 属性\"></a>XML 元素 vs. 属性</h3><p> 元数据（有关数据的数据）应当存储为属性，而数据本身应当存储为元素。  </p>\n<h2 id=\"XML-查看\"><a href=\"#XML-查看\" class=\"headerlink\" title=\"XML 查看\"></a>XML 查看</h2><p>XML 文档不会携带有关如何显示数据的信息。<br>由于 XML 标签由 XML 文档的作者“发明”，浏览器无法确定像 <table> 这样一个标签究竟描述一个 HTML 表格还是一个餐桌。<br>在没有任何有关如何显示数据的信息的情况下，大多数的浏览器都会仅仅把 XML 文档显示为源代码。  </p>\n<h2 id=\"XML-JavaScript\"><a href=\"#XML-JavaScript\" class=\"headerlink\" title=\"XML JavaScript\"></a>XML JavaScript</h2><h3 id=\"XMLHttpRequest-对象\"><a href=\"#XMLHttpRequest-对象\" class=\"headerlink\" title=\"XMLHttpRequest 对象\"></a>XMLHttpRequest 对象</h3><p>XMLHttpRequest 对象用于在后台与服务器交换数据。</p>\n<h4 id=\"什么是-XMLHttpRequest-对象？\"><a href=\"#什么是-XMLHttpRequest-对象？\" class=\"headerlink\" title=\"什么是 XMLHttpRequest 对象？\"></a>什么是 XMLHttpRequest 对象？</h4><p>XMLHttpRequest 对象用于在后台与服务器交换数据。<br>XMLHttpRequest 对象是开发者的梦想，因为可以： </p>\n<ul>\n<li>在不重新加载页面的情况下更新网页</li>\n<li>在页面已加载后从服务器请求数据</li>\n<li>在页面已加载后从服务器接收数据</li>\n<li>在后台向服务器发送数据  </li>\n</ul>\n<h4 id=\"创建XMLHttpRequest-对象\"><a href=\"#创建XMLHttpRequest-对象\" class=\"headerlink\" title=\"创建XMLHttpRequest 对象\"></a>创建XMLHttpRequest 对象</h4><p>创建 XMLHttpRequest 对象的语法：<code>xmlhttp=new XMLHttpRequest();</code>  </p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"XHTML\"><a href=\"#XHTML\" class=\"headerlink\" title=\"XHTML\"></a>XHTML</h1><h2 id=\"XHTML是什么\"><a href=\"#XHTML是什么\" class=\"headerlink\" title=\"XHTML是什么\"></a>XHTML是什么</h2><ul>\n<li>XHTML 指可扩展超文本标签语言（EXtensible HyperText Markup Language）。</li>\n<li>XHTML 的目标是取代 HTML。</li>\n<li>XHTML 与 HTML 4.01 几乎是相同的。</li>\n<li>XHTML 是更严格更纯净的 HTML 版本。</li>\n<li>XHTML 是作为一种 XML 应用被重新定义的 HTML。</li>\n<li>XHTML 是一个 W3C 标准。  <h2 id=\"为什么使用XHTML\"><a href=\"#为什么使用XHTML\" class=\"headerlink\" title=\"为什么使用XHTML\"></a>为什么使用XHTML</h2>简单地说，XHTML是HTML与XML的结合物。HTML用来显示数据，而XML用来描述数据。XHTML可以被所有的支持XML的设备读取，同时在其余的浏览器升级至支持 XML 之前，XHTML 使我们有能力编写出拥有良好结构的文档，这些文档可以很好地工作于所有的浏览器，并且可以向后兼容。<h2 id=\"XHTML语法\"><a href=\"#XHTML语法\" class=\"headerlink\" title=\"XHTML语法\"></a>XHTML语法</h2></li>\n<li>XHTML 元素必须被正确地嵌套。</li>\n<li>XHTML 元素必须被关闭。</li>\n<li>标签名必须用小写字母。</li>\n<li>XHTML 文档必须拥有根元素。</li>\n<li>属性名称必须小写。</li>\n<li>属性值必须加引号。</li>\n<li>属性不能简写。  </li>\n</ul>\n<p>下面是一个HTML的简写属性列表，以及在XHTML中的改写<br><img src=\"http://onep1caa3.bkt.clouddn.com/04.24.1.png\" alt=\"\"></p>\n<ul>\n<li><p>用 Id 属性代替 name 属性。  </p>\n</li>\n<li><p>XHTML DTD 定义了强制使用的 HTML 元素。  </p>\n</li>\n</ul>\n<h2 id=\"XHTML-DTD\"><a href=\"#XHTML-DTD\" class=\"headerlink\" title=\"XHTML DTD\"></a>XHTML DTD</h2><p>XHTML定义了三种文件类型声明：   </p>\n<ul>\n<li>STRICT（严格类型）</li>\n<li>TRANSITIONAL（过渡类型）</li>\n<li>FRAMESET（框架类型）  </li>\n</ul>\n<h3 id=\"XHTML-1-0-Strict\"><a href=\"#XHTML-1-0-Strict\" class=\"headerlink\" title=\"XHTML 1.0 Strict\"></a>XHTML 1.0 Strict</h3><pre><code>&lt;!DOCTYPE html\nPUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; \n&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;  \n</code></pre><p>在此情况下使用：需要干净的标记，避免表现上的混乱。  </p>\n<h3 id=\"XHTML-1-0-Transitional\"><a href=\"#XHTML-1-0-Transitional\" class=\"headerlink\" title=\"XHTML 1.0 Transitional\"></a>XHTML 1.0 Transitional</h3><pre><code>&lt;!DOCTYPE html\nPUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;  \n</code></pre><p>在此情况下使用：当需要利用 HTML 在表现上的特性时，并且当需要为那些不支持层叠样式表的浏览器编写 XHTML 时。  </p>\n<h3 id=\"XHTML-1-0-Frameset\"><a href=\"#XHTML-1-0-Frameset\" class=\"headerlink\" title=\"XHTML 1.0 Frameset\"></a>XHTML 1.0 Frameset</h3><pre><code>&lt;!DOCTYPE html\nPUBLIC &quot;-//W3C//DTD XHTML 1.0 Frameset//EN&quot;\n&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd&quot;&gt;  \n</code></pre><h2 id=\"如何升级到XHTML\"><a href=\"#如何升级到XHTML\" class=\"headerlink\" title=\"如何升级到XHTML\"></a>如何升级到XHTML</h2><ul>\n<li>添加文件类型声明</li>\n<li>小写的标签和属性名</li>\n<li>给所有属性加上引号</li>\n<li>空标签：<code>&lt;hr&gt;,&lt;br&gt;,&lt;img&gt;</code>中需要加上/</li>\n<li>验证站点</li>\n</ul>\n<h2 id=\"XHTML模块\"><a href=\"#XHTML模块\" class=\"headerlink\" title=\"XHTML模块\"></a>XHTML模块</h2><h3 id=\"XHTML模块化的原因\"><a href=\"#XHTML模块化的原因\" class=\"headerlink\" title=\"XHTML模块化的原因\"></a>XHTML模块化的原因</h3><p>通过将 XHTML 分为若干模块，W3C 已经创造出数套小巧且定义良好的 XHTML 元素，这些元素既可被独立应用于简易设备，又可以与其他 XML 标准并入大型且更复杂的应用程序。<br>通过使用模块化的 XHTML，产品和软件设计者可以： </p>\n<ul>\n<li>选择被某种设备所支持的元素。</li>\n<li>在不打破 XHTML 标准的情况下，使用 XML 对 XHTML 进行扩展。</li>\n<li>针对小型设备，对 XHTML 进行简化。</li>\n<li>通过添加新的 XML 功能（比如 MathML, SVG, 语音和多媒体），针对复杂的应用对 XHTML 进行扩展。</li>\n<li>定义 XHTML 框架，比如 XHTML BASIC （针对移动设备的 XHTML 子集）。  </li>\n</ul>\n<h3 id=\"XHTML模块-1\"><a href=\"#XHTML模块-1\" class=\"headerlink\" title=\"XHTML模块\"></a>XHTML模块</h3><p><img src=\"http://onep1caa3.bkt.clouddn.com/04.24.2.png\" alt=\"\"></p>\n<h2 id=\"XHTML-标准属性\"><a href=\"#XHTML-标准属性\" class=\"headerlink\" title=\"XHTML 标准属性\"></a>XHTML 标准属性</h2><h3 id=\"核心属性-Core-Attributes\"><a href=\"#核心属性-Core-Attributes\" class=\"headerlink\" title=\"核心属性 (Core Attributes)\"></a>核心属性 (Core Attributes)</h3><p><img src=\"http://onep1caa3.bkt.clouddn.com/04.24.3.png\" alt=\"\">  </p>\n<h3 id=\"语言属性-Language-Attributes\"><a href=\"#语言属性-Language-Attributes\" class=\"headerlink\" title=\"语言属性 (Language Attributes)\"></a>语言属性 (Language Attributes)</h3><p><img src=\"http://onep1caa3.bkt.clouddn.com/04.24.4.png\" alt=\"\"> </p>\n<h3 id=\"键盘属性-Keyboard-Attributes\"><a href=\"#键盘属性-Keyboard-Attributes\" class=\"headerlink\" title=\"键盘属性 (Keyboard Attributes)\"></a>键盘属性 (Keyboard Attributes)</h3><p><img src=\"http://onep1caa3.bkt.clouddn.com/04.24.5.png\" alt=\"\">  </p>\n<h2 id=\"XHTML-事件属性\"><a href=\"#XHTML-事件属性\" class=\"headerlink\" title=\"XHTML 事件属性\"></a>XHTML 事件属性</h2><p>HTML 4.0 的新特性之一是使 HTML 事件触发浏览器中的行为，比方说当用户点击一个 HTML 元素时启动一段 JavaScript 。以下就是可被插入 HTML 标签以定义事件行为的一系列属性。</p>\n<h3 id=\"窗口事件-Window-Events\"><a href=\"#窗口事件-Window-Events\" class=\"headerlink\" title=\"窗口事件 (Window Events)\"></a>窗口事件 (Window Events)</h3><p>仅对body和frameset元素有效<br><img src=\"http://onep1caa3.bkt.clouddn.com/04.24.6.png\" alt=\"\"></p>\n<h3 id=\"表单元素事件-Form-Element-Events\"><a href=\"#表单元素事件-Form-Element-Events\" class=\"headerlink\" title=\"表单元素事件 (Form Element Events)\"></a>表单元素事件 (Form Element Events)</h3><p>仅对表单元素中有效。<br><img src=\"http://onep1caa3.bkt.clouddn.com/04.24.7.png\" alt=\"\"></p>\n<h3 id=\"键盘事件-Keyboard-Events\"><a href=\"#键盘事件-Keyboard-Events\" class=\"headerlink\" title=\"键盘事件 (Keyboard Events)\"></a>键盘事件 (Keyboard Events)</h3><p>在下列元素中无效：base, bdo, br, frame, frameset, head, html, iframe, meta, param, script, style, 以及 title 元素。<br><img src=\"http://onep1caa3.bkt.clouddn.com/04.24.8.png\" alt=\"\"></p>\n<h3 id=\"鼠标事件-Mouse-Events\"><a href=\"#鼠标事件-Mouse-Events\" class=\"headerlink\" title=\"鼠标事件 (Mouse Events)\"></a>鼠标事件 (Mouse Events)</h3><p>在下列元素中无效：base, bdo, br, frame, frameset, head, html, iframe, meta, param, script, style, title 元素。<br><img src=\"http://onep1caa3.bkt.clouddn.com/04.24.9.png\" alt=\"\">  </p>\n<h1 id=\"XML\"><a href=\"#XML\" class=\"headerlink\" title=\"XML\"></a>XML</h1><p>XML被设计用来传输和存储数据。</p>\n<h2 id=\"什么是-XML\"><a href=\"#什么是-XML\" class=\"headerlink\" title=\"什么是 XML\"></a>什么是 XML</h2><ul>\n<li>XML 指可扩展标记语言（EXtensible Markup Language）；</li>\n<li>XML 是一种标记语言，很类似 HTML；</li>\n<li>XML 的设计宗旨是传输数据，而非显示数据；</li>\n<li>XML 标签没有被预定义。您需要自行定义标签；</li>\n<li>XML 被设计为具有自我描述性；</li>\n<li>XML 是 W3C 的推荐标准。  </li>\n</ul>\n<h3 id=\"XML与HTML-的主要差别\"><a href=\"#XML与HTML-的主要差别\" class=\"headerlink\" title=\"XML与HTML 的主要差别\"></a>XML与HTML 的主要差别</h3><ul>\n<li>XML 不是 HTML 的替代；<br>XML 和 HTML 为不同的目的而设计；</li>\n<li>XML 被设计为传输和存储数据，其焦点是数据的内容；</li>\n<li>HTML 被设计用来显示数据，其焦点是数据的外观；</li>\n<li>HTML 旨在显示信息，而 XML 旨在传输信息。  </li>\n</ul>\n<h3 id=\"XML没有任何行为\"><a href=\"#XML没有任何行为\" class=\"headerlink\" title=\"XML没有任何行为\"></a>XML没有任何行为</h3><p>XML仅仅是纯文本，有能力处理文本的软件都可以处理XML，通过XML你可以发明自己的标签，同时，XML是对HTML的一种补充，所以并不会代替HTML，XML是独立于软件和硬件的信息传输工具。</p>\n<h2 id=\"XML的用途\"><a href=\"#XML的用途\" class=\"headerlink\" title=\"XML的用途\"></a>XML的用途</h2><p>XML常用于web开发的许多方面，比如简化数据的存储和共享，XML可以把数据从HTML分离。</p>\n<h2 id=\"XML-树结构\"><a href=\"#XML-树结构\" class=\"headerlink\" title=\"XML 树结构\"></a>XML 树结构</h2><p>XML文档形成了一种树结构，它从根部开始，然后扩展到枝叶。</p>\n<h3 id=\"一个XML文档实例\"><a href=\"#一个XML文档实例\" class=\"headerlink\" title=\"一个XML文档实例\"></a>一个XML文档实例</h3><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;\n&lt;note&gt;\n&lt;to&gt;George&lt;/to&gt;\n&lt;from&gt;John&lt;/from&gt;\n&lt;heading&gt;Reminder&lt;/heading&gt;\n&lt;body&gt;Don&apos;t forget the meeting!&lt;/body&gt;\n&lt;/note&gt;  \n</code></pre><ul>\n<li>第一行是 XML 声明。它定义 XML 的版本 (1.0) 和所使用的编码 (ISO-8859-1 = Latin-1/西欧字符集)；</li>\n<li>下一行描述文档的根元素（像在说：“本文档是一个便签”）；</li>\n<li>接下来 4 行描述根的 4 个子元素（to, from, heading 以及 body）；</li>\n<li>最后一行定义根元素的结尾。</li>\n</ul>\n<p>树结构：<br><img src=\"http://www.w3school.com.cn/i/ct_nodetree1.gif\" alt=\"\">    </p>\n<pre><code>&lt;bookstore&gt;\n&lt;book category=&quot;COOKING&quot;&gt;\n  &lt;title lang=&quot;en&quot;&gt;Everyday Italian&lt;/title&gt; \n  &lt;author&gt;Giada De Laurentiis&lt;/author&gt; \n  &lt;year&gt;2005&lt;/year&gt; \n  &lt;price&gt;30.00&lt;/price&gt; \n&lt;/book&gt;\n&lt;book category=&quot;CHILDREN&quot;&gt;\n  &lt;title lang=&quot;en&quot;&gt;Harry Potter&lt;/title&gt; \n  &lt;author&gt;J K. Rowling&lt;/author&gt; \n  &lt;year&gt;2005&lt;/year&gt; \n  &lt;price&gt;29.99&lt;/price&gt; \n&lt;/book&gt;\n&lt;book category=&quot;WEB&quot;&gt;\n  &lt;title lang=&quot;en&quot;&gt;Learning XML&lt;/title&gt; \n  &lt;author&gt;Erik T. Ray&lt;/author&gt; \n  &lt;year&gt;2003&lt;/year&gt; \n  &lt;price&gt;39.95&lt;/price&gt; \n&lt;/book&gt;\n&lt;/bookstore&gt;  \n</code></pre><h2 id=\"XML-语法\"><a href=\"#XML-语法\" class=\"headerlink\" title=\"XML 语法\"></a>XML 语法</h2><ul>\n<li>所有XML 元素都必须有关闭标签</li>\n<li>XML 对大小写敏感</li>\n<li>XML 必须正确嵌套</li>\n<li>XML 必须有根元素 </li>\n<li>XML 的属性必须加引号 </li>\n<li>实体引用  </li>\n<li>XML 中的注释<code>&lt;!-- This is a comment --&gt;</code> </li>\n<li>在XML中，空格会被保留  </li>\n<li>XML 中以LF存储换行  </li>\n</ul>\n<h2 id=\"XML元素\"><a href=\"#XML元素\" class=\"headerlink\" title=\"XML元素\"></a>XML元素</h2><h3 id=\"XML元素是什么\"><a href=\"#XML元素是什么\" class=\"headerlink\" title=\"XML元素是什么\"></a>XML元素是什么</h3><p>XML 元素指的是从（且包括）开始标签直到（且包括）结束标签的部分。元素可包含其他元素、文本或者两者的混合物。元素也可以拥有属性。</p>\n<h3 id=\"XML-命名规则\"><a href=\"#XML-命名规则\" class=\"headerlink\" title=\"XML 命名规则\"></a>XML 命名规则</h3><ul>\n<li>名称可以含字母、数字以及其他的字符</li>\n<li>名称不能以数字或者标点符号开始</li>\n<li>名称不能以字符 “xml”（或者 XML、Xml）开始</li>\n<li>名称不能包含空格</li>\n</ul>\n<h3 id=\"最佳命名习惯\"><a href=\"#最佳命名习惯\" class=\"headerlink\" title=\"最佳命名习惯\"></a>最佳命名习惯</h3><p>使名称具有描述性。使用下划线的名称也很不错。<br>名称应当比较简短，比如：<book_title>，而不是：<the_title_of_the_book>。<br>避免 “-“ 字符。如果您按照这样的方式进行命名：”first-name”，一些软件会认为你需要提取第一个单词。<br>避免 “.” 字符。如果您按照这样的方式进行命名：”first.name”，一些软件会认为 “name” 是对象 “first” 的属性。<br>避免 “:” 字符。冒号会被转换为命名空间来使用（稍后介绍）。<br>XML 文档经常有一个对应的数据库，其中的字段会对应 XML 文档中的元素。有一个实用的经验，即使用数据库的名称规则来命名 XML 文档中的元素。<br>非英语的字母比如 éòá 也是合法的 XML 元素名，不过需要留意当软件开发商不支持这些字符时可能出现的问题。  </p>\n<h3 id=\"XML-是可扩展的\"><a href=\"#XML-是可扩展的\" class=\"headerlink\" title=\"XML 是可扩展的\"></a>XML 是可扩展的</h3><p>XML 的优势之一，就是可以经常在不中断应用程序的情况下进行扩展。 </p>\n<h2 id=\"XML属性\"><a href=\"#XML属性\" class=\"headerlink\" title=\"XML属性\"></a>XML属性</h2><h3 id=\"XML属性-1\"><a href=\"#XML属性-1\" class=\"headerlink\" title=\"XML属性\"></a>XML属性</h3><p>属性通常提供不属于数据组成部分的信息。<br><code>&lt;file type=&quot;gif&quot;&gt;computer.gif&lt;/file&gt;</code><br>对于上面这个例子，文件类型与数据无关，但是对需要处理这个元素的软件来说却很重要。  </p>\n<h3 id=\"XML-属性必须加引号\"><a href=\"#XML-属性必须加引号\" class=\"headerlink\" title=\"XML 属性必须加引号\"></a>XML 属性必须加引号</h3><p>属性值必须被引号包围，不过单引号和双引号均可使用。</p>\n<h3 id=\"XML-元素-vs-属性\"><a href=\"#XML-元素-vs-属性\" class=\"headerlink\" title=\"XML 元素 vs. 属性\"></a>XML 元素 vs. 属性</h3><p> 元数据（有关数据的数据）应当存储为属性，而数据本身应当存储为元素。  </p>\n<h2 id=\"XML-查看\"><a href=\"#XML-查看\" class=\"headerlink\" title=\"XML 查看\"></a>XML 查看</h2><p>XML 文档不会携带有关如何显示数据的信息。<br>由于 XML 标签由 XML 文档的作者“发明”，浏览器无法确定像 <table> 这样一个标签究竟描述一个 HTML 表格还是一个餐桌。<br>在没有任何有关如何显示数据的信息的情况下，大多数的浏览器都会仅仅把 XML 文档显示为源代码。  </p>\n<h2 id=\"XML-JavaScript\"><a href=\"#XML-JavaScript\" class=\"headerlink\" title=\"XML JavaScript\"></a>XML JavaScript</h2><h3 id=\"XMLHttpRequest-对象\"><a href=\"#XMLHttpRequest-对象\" class=\"headerlink\" title=\"XMLHttpRequest 对象\"></a>XMLHttpRequest 对象</h3><p>XMLHttpRequest 对象用于在后台与服务器交换数据。</p>\n<h4 id=\"什么是-XMLHttpRequest-对象？\"><a href=\"#什么是-XMLHttpRequest-对象？\" class=\"headerlink\" title=\"什么是 XMLHttpRequest 对象？\"></a>什么是 XMLHttpRequest 对象？</h4><p>XMLHttpRequest 对象用于在后台与服务器交换数据。<br>XMLHttpRequest 对象是开发者的梦想，因为可以： </p>\n<ul>\n<li>在不重新加载页面的情况下更新网页</li>\n<li>在页面已加载后从服务器请求数据</li>\n<li>在页面已加载后从服务器接收数据</li>\n<li>在后台向服务器发送数据  </li>\n</ul>\n<h4 id=\"创建XMLHttpRequest-对象\"><a href=\"#创建XMLHttpRequest-对象\" class=\"headerlink\" title=\"创建XMLHttpRequest 对象\"></a>创建XMLHttpRequest 对象</h4><p>创建 XMLHttpRequest 对象的语法：<code>xmlhttp=new XMLHttpRequest();</code>  </p>\n"},{"title":"从输入url到页面加载完成中发生的事情","_content":"## 一个页面从输入URL到页面加载显示完成，这个过程都发生什么？\n### 1.url分割\n输入url之后，浏览器会把url分割成几个部分，包括协议，网络地址，资源路径，端口等；  \n### 2.域名解析 \n判断网络地址是不是ip，如果是ip的话，向该ip地址发起http请求，如果网络地址是域名的话，进行DNS解析的步骤：  \n\n* （1）本机向本地dns服务器发起DNS解析请求，本地服务器首先检查本地缓存中是否存在请求的域名对应的ip地址，（这里的缓存查看顺序为从浏览器缓存开始，到系统缓存，再到路由器缓存）有的话直接返回，没有dns缓存的话进行下一步；  \n*  （2）本地dns服务器向全球13个根域名服务器中的一台发送dns查询请求，根服务器会返回顶级域名服务器的ip（如果有的话）给本地dns服务器；\n*  （3）本地dns服务器得到顶级域名服务器的IP地址之后， 向顶级域名服务器发送dns查询请求，顶级域名服务器会返回域名所对应的权威dns服务器的ip地址（如果有的话）给本地dns服务器；\n*  （4）本地dns服务器根据得到的权威dns域名服务器的ip向此权威dns域名服务器发起dns查询请求，权威dns服务器会返回查找的域名的ip地址给本地dns服务器（如果有的话）。  \n当然这些都是建立在本地dns没有根dns服务器，顶级dns服务器以及权威dns服务器的dns缓存的情况下的，如果有上述的缓存，可能会跳过一些步骤。\n### 3.确定端口  \n如果输入的url没有著名端口的话，浏览器发送http请求是会使用默认端口，如http连接的默认端口是80。如果url中定义了端口，就会按照定义的端口进行连接；  \n### 4.浏览器向服务器发送一个HTTP请求  \n#### （1）在发送http缓存之前，首先客户端要与服务器建立TCP连接（三次握手）:  \n* SYN_SEND 客户端发送一个带SYN标志的TCP报文到服务器。这是三次握手过程中的报文1； \n* SYN_RECV 服务器端回应客户端，这是三次握手中的第2个报文，这个报文同时带ACK标志(表示服务器准备好了数据通信)和SYN标志。因为它表示对刚才客户端SYN报文的回应；同时又标志SYN给客户端，询问客户端是否准备好数据通讯；内核在收到最后一个ACK后，accept会返回；\n* ESTABLISH 客户端必须再次回应服务器端一个ACK报文（表示客户端也准备好了数据通信），这是报文段3；  \n这时就成功建立了TCP连接.  \n#### （2）客户端向服务器发送命令请求\n一旦建立了TCP连接，Web浏览器就会向Web服务器发送请求命令。例如：GET/sample/hello.jsp HTTP/1.1。\n#### （3）浏览器发送请求头信息\n浏览器发送其请求命令之后，还要以头信息的形式向Web服务器发送一些别的信息，之后浏览器发送了一空白行来通知服务器，它已经结束了该头信息的发送。\n#### （4）服务器响应\n客户机向服务器发出请求后，服务器会客户机回送应答， HTTP/1.1 200 OK ，应答的第一部分是协议的版本号和应答状态码。  \n#### （5）服务器应对应答头信息\n正如客户端会随同请求发送关于自身的信息一样，服务器也会随同应答向用户发送关于它自己的数据及被请求的文档。\n#### （6）服务器向浏览器发送数据\nWeb服务器向浏览器发送头信息后，它会发送一个空白行来表示头信息的发送到此为结束，接着，它就以Content-Type应答头信息所描述的格式发送用户所请求的实际数据。\n#### （7）关闭TCP链接\n一般来说，服务器向客户端发送数据之后会关闭tcp连接，如果过浏览器发送的头信息中加入了`Connection:keep-alive  `之后，就会一直保持连接的打开状态。\n### 5.浏览器根据得到的数据，开始进行网页的加载，解析，渲染过程  \n\n\n#### 加载\n加载是指获取HTML/SVG/XHTML，CSS和JavaScript的过程。加载过程中遇到外部css文件，浏览器另外发出一个请求，来获取css文件。遇到图片资源，浏览器也会另外发出一个请求，来获取图片资源。这是异步请求，并不会影响html文档进行加载，但是当文档加载过程中遇到js文件，html文档会挂起渲染（加载解析渲染同步）的线程，不仅要等待文档中js文件加载完毕，还要等待解析执行完毕，才可以恢复html文档的渲染线程。虽然css文件的加载不影响js文件的加载，但是却影响js文件的执行，即使js文件内只有一行代码，也会造成阻塞。\n#### 解析  \n* 解析HTML/SVG/XHTML来产生一个DOM tree，dom tree是由dom元素及属性节点组成，树的根是document对象；\n* 解析CSS来生成CSS rule tree，包含css规则，该规则包含选择器和声明对象；\n* 解析JavaScript脚本，通过DOM API 和 CSSOM API 来操作DOM tree 和 CSS rule tree。\n\n#### 渲染\n即为构建渲染树的过程，是原来DOM树的可视化表示，构建这棵树是为了以正确的顺序绘制文档内容。\n##### 渲染顺序\n* 1.渲染的顺序也是从上到下；\n* 2.在渲染到页面的某一部分时，其上面的所有部分都已经下载完成；\n* 3.如果遇到语义解释性的标签嵌入文件（JS脚本，CSS样式），会进行加载和解析，解析过程中，停止页面所有往下元素的加载；\n* 4.样式表在加载完成后，将和以前加载的所有样式表一起进行解析，解析完成后，将对此前所有元素（含以前已经渲染的）重新进行渲染；\n* 5.JS、CSS中如有重定义，后定义函数将覆盖前定义函数。\n\n##### JavaScript的加载\nJavaScript加载后马上执行，而且执行时会阻塞页面后续的内容（包括页面的渲染、其它资源的下载）。于是，如果有多个js文件被引入，那么对于浏览器来说，这些js文件被被串行地载入，并依次执行。因为javascript可能会来操作HTML文档的DOM树，所以，浏览器一般都不会像并行下载css文件并行下载js文件。因此JavaScript无法操作此JavaScript之后的dom元素。\n\n\n\n\n\n\n\n  \n","source":"_posts/2017.05.23.md","raw":"---\ntitle: 从输入url到页面加载完成中发生的事情\ntags: [dns,http,tcp/ip]\ncategories: 知识 \n---\n## 一个页面从输入URL到页面加载显示完成，这个过程都发生什么？\n### 1.url分割\n输入url之后，浏览器会把url分割成几个部分，包括协议，网络地址，资源路径，端口等；  \n### 2.域名解析 \n判断网络地址是不是ip，如果是ip的话，向该ip地址发起http请求，如果网络地址是域名的话，进行DNS解析的步骤：  \n\n* （1）本机向本地dns服务器发起DNS解析请求，本地服务器首先检查本地缓存中是否存在请求的域名对应的ip地址，（这里的缓存查看顺序为从浏览器缓存开始，到系统缓存，再到路由器缓存）有的话直接返回，没有dns缓存的话进行下一步；  \n*  （2）本地dns服务器向全球13个根域名服务器中的一台发送dns查询请求，根服务器会返回顶级域名服务器的ip（如果有的话）给本地dns服务器；\n*  （3）本地dns服务器得到顶级域名服务器的IP地址之后， 向顶级域名服务器发送dns查询请求，顶级域名服务器会返回域名所对应的权威dns服务器的ip地址（如果有的话）给本地dns服务器；\n*  （4）本地dns服务器根据得到的权威dns域名服务器的ip向此权威dns域名服务器发起dns查询请求，权威dns服务器会返回查找的域名的ip地址给本地dns服务器（如果有的话）。  \n当然这些都是建立在本地dns没有根dns服务器，顶级dns服务器以及权威dns服务器的dns缓存的情况下的，如果有上述的缓存，可能会跳过一些步骤。\n### 3.确定端口  \n如果输入的url没有著名端口的话，浏览器发送http请求是会使用默认端口，如http连接的默认端口是80。如果url中定义了端口，就会按照定义的端口进行连接；  \n### 4.浏览器向服务器发送一个HTTP请求  \n#### （1）在发送http缓存之前，首先客户端要与服务器建立TCP连接（三次握手）:  \n* SYN_SEND 客户端发送一个带SYN标志的TCP报文到服务器。这是三次握手过程中的报文1； \n* SYN_RECV 服务器端回应客户端，这是三次握手中的第2个报文，这个报文同时带ACK标志(表示服务器准备好了数据通信)和SYN标志。因为它表示对刚才客户端SYN报文的回应；同时又标志SYN给客户端，询问客户端是否准备好数据通讯；内核在收到最后一个ACK后，accept会返回；\n* ESTABLISH 客户端必须再次回应服务器端一个ACK报文（表示客户端也准备好了数据通信），这是报文段3；  \n这时就成功建立了TCP连接.  \n#### （2）客户端向服务器发送命令请求\n一旦建立了TCP连接，Web浏览器就会向Web服务器发送请求命令。例如：GET/sample/hello.jsp HTTP/1.1。\n#### （3）浏览器发送请求头信息\n浏览器发送其请求命令之后，还要以头信息的形式向Web服务器发送一些别的信息，之后浏览器发送了一空白行来通知服务器，它已经结束了该头信息的发送。\n#### （4）服务器响应\n客户机向服务器发出请求后，服务器会客户机回送应答， HTTP/1.1 200 OK ，应答的第一部分是协议的版本号和应答状态码。  \n#### （5）服务器应对应答头信息\n正如客户端会随同请求发送关于自身的信息一样，服务器也会随同应答向用户发送关于它自己的数据及被请求的文档。\n#### （6）服务器向浏览器发送数据\nWeb服务器向浏览器发送头信息后，它会发送一个空白行来表示头信息的发送到此为结束，接着，它就以Content-Type应答头信息所描述的格式发送用户所请求的实际数据。\n#### （7）关闭TCP链接\n一般来说，服务器向客户端发送数据之后会关闭tcp连接，如果过浏览器发送的头信息中加入了`Connection:keep-alive  `之后，就会一直保持连接的打开状态。\n### 5.浏览器根据得到的数据，开始进行网页的加载，解析，渲染过程  \n\n\n#### 加载\n加载是指获取HTML/SVG/XHTML，CSS和JavaScript的过程。加载过程中遇到外部css文件，浏览器另外发出一个请求，来获取css文件。遇到图片资源，浏览器也会另外发出一个请求，来获取图片资源。这是异步请求，并不会影响html文档进行加载，但是当文档加载过程中遇到js文件，html文档会挂起渲染（加载解析渲染同步）的线程，不仅要等待文档中js文件加载完毕，还要等待解析执行完毕，才可以恢复html文档的渲染线程。虽然css文件的加载不影响js文件的加载，但是却影响js文件的执行，即使js文件内只有一行代码，也会造成阻塞。\n#### 解析  \n* 解析HTML/SVG/XHTML来产生一个DOM tree，dom tree是由dom元素及属性节点组成，树的根是document对象；\n* 解析CSS来生成CSS rule tree，包含css规则，该规则包含选择器和声明对象；\n* 解析JavaScript脚本，通过DOM API 和 CSSOM API 来操作DOM tree 和 CSS rule tree。\n\n#### 渲染\n即为构建渲染树的过程，是原来DOM树的可视化表示，构建这棵树是为了以正确的顺序绘制文档内容。\n##### 渲染顺序\n* 1.渲染的顺序也是从上到下；\n* 2.在渲染到页面的某一部分时，其上面的所有部分都已经下载完成；\n* 3.如果遇到语义解释性的标签嵌入文件（JS脚本，CSS样式），会进行加载和解析，解析过程中，停止页面所有往下元素的加载；\n* 4.样式表在加载完成后，将和以前加载的所有样式表一起进行解析，解析完成后，将对此前所有元素（含以前已经渲染的）重新进行渲染；\n* 5.JS、CSS中如有重定义，后定义函数将覆盖前定义函数。\n\n##### JavaScript的加载\nJavaScript加载后马上执行，而且执行时会阻塞页面后续的内容（包括页面的渲染、其它资源的下载）。于是，如果有多个js文件被引入，那么对于浏览器来说，这些js文件被被串行地载入，并依次执行。因为javascript可能会来操作HTML文档的DOM树，所以，浏览器一般都不会像并行下载css文件并行下载js文件。因此JavaScript无法操作此JavaScript之后的dom元素。\n\n\n\n\n\n\n\n  \n","slug":"2017.05.23","published":1,"date":"2017-05-23T15:16:46.000Z","updated":"2017-05-23T15:16:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziipv000crh9zagxpgxs7","content":"<h2 id=\"一个页面从输入URL到页面加载显示完成，这个过程都发生什么？\"><a href=\"#一个页面从输入URL到页面加载显示完成，这个过程都发生什么？\" class=\"headerlink\" title=\"一个页面从输入URL到页面加载显示完成，这个过程都发生什么？\"></a>一个页面从输入URL到页面加载显示完成，这个过程都发生什么？</h2><h3 id=\"1-url分割\"><a href=\"#1-url分割\" class=\"headerlink\" title=\"1.url分割\"></a>1.url分割</h3><p>输入url之后，浏览器会把url分割成几个部分，包括协议，网络地址，资源路径，端口等；  </p>\n<h3 id=\"2-域名解析\"><a href=\"#2-域名解析\" class=\"headerlink\" title=\"2.域名解析\"></a>2.域名解析</h3><p>判断网络地址是不是ip，如果是ip的话，向该ip地址发起http请求，如果网络地址是域名的话，进行DNS解析的步骤：  </p>\n<ul>\n<li>（1）本机向本地dns服务器发起DNS解析请求，本地服务器首先检查本地缓存中是否存在请求的域名对应的ip地址，（这里的缓存查看顺序为从浏览器缓存开始，到系统缓存，再到路由器缓存）有的话直接返回，没有dns缓存的话进行下一步；  </li>\n<li>（2）本地dns服务器向全球13个根域名服务器中的一台发送dns查询请求，根服务器会返回顶级域名服务器的ip（如果有的话）给本地dns服务器；</li>\n<li>（3）本地dns服务器得到顶级域名服务器的IP地址之后， 向顶级域名服务器发送dns查询请求，顶级域名服务器会返回域名所对应的权威dns服务器的ip地址（如果有的话）给本地dns服务器；</li>\n<li>（4）本地dns服务器根据得到的权威dns域名服务器的ip向此权威dns域名服务器发起dns查询请求，权威dns服务器会返回查找的域名的ip地址给本地dns服务器（如果有的话）。<br>当然这些都是建立在本地dns没有根dns服务器，顶级dns服务器以及权威dns服务器的dns缓存的情况下的，如果有上述的缓存，可能会跳过一些步骤。<h3 id=\"3-确定端口\"><a href=\"#3-确定端口\" class=\"headerlink\" title=\"3.确定端口\"></a>3.确定端口</h3>如果输入的url没有著名端口的话，浏览器发送http请求是会使用默认端口，如http连接的默认端口是80。如果url中定义了端口，就会按照定义的端口进行连接；  <h3 id=\"4-浏览器向服务器发送一个HTTP请求\"><a href=\"#4-浏览器向服务器发送一个HTTP请求\" class=\"headerlink\" title=\"4.浏览器向服务器发送一个HTTP请求\"></a>4.浏览器向服务器发送一个HTTP请求</h3><h4 id=\"（1）在发送http缓存之前，首先客户端要与服务器建立TCP连接（三次握手）\"><a href=\"#（1）在发送http缓存之前，首先客户端要与服务器建立TCP连接（三次握手）\" class=\"headerlink\" title=\"（1）在发送http缓存之前，首先客户端要与服务器建立TCP连接（三次握手）:\"></a>（1）在发送http缓存之前，首先客户端要与服务器建立TCP连接（三次握手）:</h4></li>\n<li>SYN_SEND 客户端发送一个带SYN标志的TCP报文到服务器。这是三次握手过程中的报文1； </li>\n<li>SYN_RECV 服务器端回应客户端，这是三次握手中的第2个报文，这个报文同时带ACK标志(表示服务器准备好了数据通信)和SYN标志。因为它表示对刚才客户端SYN报文的回应；同时又标志SYN给客户端，询问客户端是否准备好数据通讯；内核在收到最后一个ACK后，accept会返回；</li>\n<li>ESTABLISH 客户端必须再次回应服务器端一个ACK报文（表示客户端也准备好了数据通信），这是报文段3；<br>这时就成功建立了TCP连接.  <h4 id=\"（2）客户端向服务器发送命令请求\"><a href=\"#（2）客户端向服务器发送命令请求\" class=\"headerlink\" title=\"（2）客户端向服务器发送命令请求\"></a>（2）客户端向服务器发送命令请求</h4>一旦建立了TCP连接，Web浏览器就会向Web服务器发送请求命令。例如：GET/sample/hello.jsp HTTP/1.1。<h4 id=\"（3）浏览器发送请求头信息\"><a href=\"#（3）浏览器发送请求头信息\" class=\"headerlink\" title=\"（3）浏览器发送请求头信息\"></a>（3）浏览器发送请求头信息</h4>浏览器发送其请求命令之后，还要以头信息的形式向Web服务器发送一些别的信息，之后浏览器发送了一空白行来通知服务器，它已经结束了该头信息的发送。<h4 id=\"（4）服务器响应\"><a href=\"#（4）服务器响应\" class=\"headerlink\" title=\"（4）服务器响应\"></a>（4）服务器响应</h4>客户机向服务器发出请求后，服务器会客户机回送应答， HTTP/1.1 200 OK ，应答的第一部分是协议的版本号和应答状态码。  <h4 id=\"（5）服务器应对应答头信息\"><a href=\"#（5）服务器应对应答头信息\" class=\"headerlink\" title=\"（5）服务器应对应答头信息\"></a>（5）服务器应对应答头信息</h4>正如客户端会随同请求发送关于自身的信息一样，服务器也会随同应答向用户发送关于它自己的数据及被请求的文档。<h4 id=\"（6）服务器向浏览器发送数据\"><a href=\"#（6）服务器向浏览器发送数据\" class=\"headerlink\" title=\"（6）服务器向浏览器发送数据\"></a>（6）服务器向浏览器发送数据</h4>Web服务器向浏览器发送头信息后，它会发送一个空白行来表示头信息的发送到此为结束，接着，它就以Content-Type应答头信息所描述的格式发送用户所请求的实际数据。<h4 id=\"（7）关闭TCP链接\"><a href=\"#（7）关闭TCP链接\" class=\"headerlink\" title=\"（7）关闭TCP链接\"></a>（7）关闭TCP链接</h4>一般来说，服务器向客户端发送数据之后会关闭tcp连接，如果过浏览器发送的头信息中加入了<code>Connection:keep-alive</code>之后，就会一直保持连接的打开状态。<h3 id=\"5-浏览器根据得到的数据，开始进行网页的加载，解析，渲染过程\"><a href=\"#5-浏览器根据得到的数据，开始进行网页的加载，解析，渲染过程\" class=\"headerlink\" title=\"5.浏览器根据得到的数据，开始进行网页的加载，解析，渲染过程\"></a>5.浏览器根据得到的数据，开始进行网页的加载，解析，渲染过程</h3></li>\n</ul>\n<h4 id=\"加载\"><a href=\"#加载\" class=\"headerlink\" title=\"加载\"></a>加载</h4><p>加载是指获取HTML/SVG/XHTML，CSS和JavaScript的过程。加载过程中遇到外部css文件，浏览器另外发出一个请求，来获取css文件。遇到图片资源，浏览器也会另外发出一个请求，来获取图片资源。这是异步请求，并不会影响html文档进行加载，但是当文档加载过程中遇到js文件，html文档会挂起渲染（加载解析渲染同步）的线程，不仅要等待文档中js文件加载完毕，还要等待解析执行完毕，才可以恢复html文档的渲染线程。虽然css文件的加载不影响js文件的加载，但是却影响js文件的执行，即使js文件内只有一行代码，也会造成阻塞。</p>\n<h4 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h4><ul>\n<li>解析HTML/SVG/XHTML来产生一个DOM tree，dom tree是由dom元素及属性节点组成，树的根是document对象；</li>\n<li>解析CSS来生成CSS rule tree，包含css规则，该规则包含选择器和声明对象；</li>\n<li>解析JavaScript脚本，通过DOM API 和 CSSOM API 来操作DOM tree 和 CSS rule tree。</li>\n</ul>\n<h4 id=\"渲染\"><a href=\"#渲染\" class=\"headerlink\" title=\"渲染\"></a>渲染</h4><p>即为构建渲染树的过程，是原来DOM树的可视化表示，构建这棵树是为了以正确的顺序绘制文档内容。</p>\n<h5 id=\"渲染顺序\"><a href=\"#渲染顺序\" class=\"headerlink\" title=\"渲染顺序\"></a>渲染顺序</h5><ul>\n<li>1.渲染的顺序也是从上到下；</li>\n<li>2.在渲染到页面的某一部分时，其上面的所有部分都已经下载完成；</li>\n<li>3.如果遇到语义解释性的标签嵌入文件（JS脚本，CSS样式），会进行加载和解析，解析过程中，停止页面所有往下元素的加载；</li>\n<li>4.样式表在加载完成后，将和以前加载的所有样式表一起进行解析，解析完成后，将对此前所有元素（含以前已经渲染的）重新进行渲染；</li>\n<li>5.JS、CSS中如有重定义，后定义函数将覆盖前定义函数。</li>\n</ul>\n<h5 id=\"JavaScript的加载\"><a href=\"#JavaScript的加载\" class=\"headerlink\" title=\"JavaScript的加载\"></a>JavaScript的加载</h5><p>JavaScript加载后马上执行，而且执行时会阻塞页面后续的内容（包括页面的渲染、其它资源的下载）。于是，如果有多个js文件被引入，那么对于浏览器来说，这些js文件被被串行地载入，并依次执行。因为javascript可能会来操作HTML文档的DOM树，所以，浏览器一般都不会像并行下载css文件并行下载js文件。因此JavaScript无法操作此JavaScript之后的dom元素。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一个页面从输入URL到页面加载显示完成，这个过程都发生什么？\"><a href=\"#一个页面从输入URL到页面加载显示完成，这个过程都发生什么？\" class=\"headerlink\" title=\"一个页面从输入URL到页面加载显示完成，这个过程都发生什么？\"></a>一个页面从输入URL到页面加载显示完成，这个过程都发生什么？</h2><h3 id=\"1-url分割\"><a href=\"#1-url分割\" class=\"headerlink\" title=\"1.url分割\"></a>1.url分割</h3><p>输入url之后，浏览器会把url分割成几个部分，包括协议，网络地址，资源路径，端口等；  </p>\n<h3 id=\"2-域名解析\"><a href=\"#2-域名解析\" class=\"headerlink\" title=\"2.域名解析\"></a>2.域名解析</h3><p>判断网络地址是不是ip，如果是ip的话，向该ip地址发起http请求，如果网络地址是域名的话，进行DNS解析的步骤：  </p>\n<ul>\n<li>（1）本机向本地dns服务器发起DNS解析请求，本地服务器首先检查本地缓存中是否存在请求的域名对应的ip地址，（这里的缓存查看顺序为从浏览器缓存开始，到系统缓存，再到路由器缓存）有的话直接返回，没有dns缓存的话进行下一步；  </li>\n<li>（2）本地dns服务器向全球13个根域名服务器中的一台发送dns查询请求，根服务器会返回顶级域名服务器的ip（如果有的话）给本地dns服务器；</li>\n<li>（3）本地dns服务器得到顶级域名服务器的IP地址之后， 向顶级域名服务器发送dns查询请求，顶级域名服务器会返回域名所对应的权威dns服务器的ip地址（如果有的话）给本地dns服务器；</li>\n<li>（4）本地dns服务器根据得到的权威dns域名服务器的ip向此权威dns域名服务器发起dns查询请求，权威dns服务器会返回查找的域名的ip地址给本地dns服务器（如果有的话）。<br>当然这些都是建立在本地dns没有根dns服务器，顶级dns服务器以及权威dns服务器的dns缓存的情况下的，如果有上述的缓存，可能会跳过一些步骤。<h3 id=\"3-确定端口\"><a href=\"#3-确定端口\" class=\"headerlink\" title=\"3.确定端口\"></a>3.确定端口</h3>如果输入的url没有著名端口的话，浏览器发送http请求是会使用默认端口，如http连接的默认端口是80。如果url中定义了端口，就会按照定义的端口进行连接；  <h3 id=\"4-浏览器向服务器发送一个HTTP请求\"><a href=\"#4-浏览器向服务器发送一个HTTP请求\" class=\"headerlink\" title=\"4.浏览器向服务器发送一个HTTP请求\"></a>4.浏览器向服务器发送一个HTTP请求</h3><h4 id=\"（1）在发送http缓存之前，首先客户端要与服务器建立TCP连接（三次握手）\"><a href=\"#（1）在发送http缓存之前，首先客户端要与服务器建立TCP连接（三次握手）\" class=\"headerlink\" title=\"（1）在发送http缓存之前，首先客户端要与服务器建立TCP连接（三次握手）:\"></a>（1）在发送http缓存之前，首先客户端要与服务器建立TCP连接（三次握手）:</h4></li>\n<li>SYN_SEND 客户端发送一个带SYN标志的TCP报文到服务器。这是三次握手过程中的报文1； </li>\n<li>SYN_RECV 服务器端回应客户端，这是三次握手中的第2个报文，这个报文同时带ACK标志(表示服务器准备好了数据通信)和SYN标志。因为它表示对刚才客户端SYN报文的回应；同时又标志SYN给客户端，询问客户端是否准备好数据通讯；内核在收到最后一个ACK后，accept会返回；</li>\n<li>ESTABLISH 客户端必须再次回应服务器端一个ACK报文（表示客户端也准备好了数据通信），这是报文段3；<br>这时就成功建立了TCP连接.  <h4 id=\"（2）客户端向服务器发送命令请求\"><a href=\"#（2）客户端向服务器发送命令请求\" class=\"headerlink\" title=\"（2）客户端向服务器发送命令请求\"></a>（2）客户端向服务器发送命令请求</h4>一旦建立了TCP连接，Web浏览器就会向Web服务器发送请求命令。例如：GET/sample/hello.jsp HTTP/1.1。<h4 id=\"（3）浏览器发送请求头信息\"><a href=\"#（3）浏览器发送请求头信息\" class=\"headerlink\" title=\"（3）浏览器发送请求头信息\"></a>（3）浏览器发送请求头信息</h4>浏览器发送其请求命令之后，还要以头信息的形式向Web服务器发送一些别的信息，之后浏览器发送了一空白行来通知服务器，它已经结束了该头信息的发送。<h4 id=\"（4）服务器响应\"><a href=\"#（4）服务器响应\" class=\"headerlink\" title=\"（4）服务器响应\"></a>（4）服务器响应</h4>客户机向服务器发出请求后，服务器会客户机回送应答， HTTP/1.1 200 OK ，应答的第一部分是协议的版本号和应答状态码。  <h4 id=\"（5）服务器应对应答头信息\"><a href=\"#（5）服务器应对应答头信息\" class=\"headerlink\" title=\"（5）服务器应对应答头信息\"></a>（5）服务器应对应答头信息</h4>正如客户端会随同请求发送关于自身的信息一样，服务器也会随同应答向用户发送关于它自己的数据及被请求的文档。<h4 id=\"（6）服务器向浏览器发送数据\"><a href=\"#（6）服务器向浏览器发送数据\" class=\"headerlink\" title=\"（6）服务器向浏览器发送数据\"></a>（6）服务器向浏览器发送数据</h4>Web服务器向浏览器发送头信息后，它会发送一个空白行来表示头信息的发送到此为结束，接着，它就以Content-Type应答头信息所描述的格式发送用户所请求的实际数据。<h4 id=\"（7）关闭TCP链接\"><a href=\"#（7）关闭TCP链接\" class=\"headerlink\" title=\"（7）关闭TCP链接\"></a>（7）关闭TCP链接</h4>一般来说，服务器向客户端发送数据之后会关闭tcp连接，如果过浏览器发送的头信息中加入了<code>Connection:keep-alive</code>之后，就会一直保持连接的打开状态。<h3 id=\"5-浏览器根据得到的数据，开始进行网页的加载，解析，渲染过程\"><a href=\"#5-浏览器根据得到的数据，开始进行网页的加载，解析，渲染过程\" class=\"headerlink\" title=\"5.浏览器根据得到的数据，开始进行网页的加载，解析，渲染过程\"></a>5.浏览器根据得到的数据，开始进行网页的加载，解析，渲染过程</h3></li>\n</ul>\n<h4 id=\"加载\"><a href=\"#加载\" class=\"headerlink\" title=\"加载\"></a>加载</h4><p>加载是指获取HTML/SVG/XHTML，CSS和JavaScript的过程。加载过程中遇到外部css文件，浏览器另外发出一个请求，来获取css文件。遇到图片资源，浏览器也会另外发出一个请求，来获取图片资源。这是异步请求，并不会影响html文档进行加载，但是当文档加载过程中遇到js文件，html文档会挂起渲染（加载解析渲染同步）的线程，不仅要等待文档中js文件加载完毕，还要等待解析执行完毕，才可以恢复html文档的渲染线程。虽然css文件的加载不影响js文件的加载，但是却影响js文件的执行，即使js文件内只有一行代码，也会造成阻塞。</p>\n<h4 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h4><ul>\n<li>解析HTML/SVG/XHTML来产生一个DOM tree，dom tree是由dom元素及属性节点组成，树的根是document对象；</li>\n<li>解析CSS来生成CSS rule tree，包含css规则，该规则包含选择器和声明对象；</li>\n<li>解析JavaScript脚本，通过DOM API 和 CSSOM API 来操作DOM tree 和 CSS rule tree。</li>\n</ul>\n<h4 id=\"渲染\"><a href=\"#渲染\" class=\"headerlink\" title=\"渲染\"></a>渲染</h4><p>即为构建渲染树的过程，是原来DOM树的可视化表示，构建这棵树是为了以正确的顺序绘制文档内容。</p>\n<h5 id=\"渲染顺序\"><a href=\"#渲染顺序\" class=\"headerlink\" title=\"渲染顺序\"></a>渲染顺序</h5><ul>\n<li>1.渲染的顺序也是从上到下；</li>\n<li>2.在渲染到页面的某一部分时，其上面的所有部分都已经下载完成；</li>\n<li>3.如果遇到语义解释性的标签嵌入文件（JS脚本，CSS样式），会进行加载和解析，解析过程中，停止页面所有往下元素的加载；</li>\n<li>4.样式表在加载完成后，将和以前加载的所有样式表一起进行解析，解析完成后，将对此前所有元素（含以前已经渲染的）重新进行渲染；</li>\n<li>5.JS、CSS中如有重定义，后定义函数将覆盖前定义函数。</li>\n</ul>\n<h5 id=\"JavaScript的加载\"><a href=\"#JavaScript的加载\" class=\"headerlink\" title=\"JavaScript的加载\"></a>JavaScript的加载</h5><p>JavaScript加载后马上执行，而且执行时会阻塞页面后续的内容（包括页面的渲染、其它资源的下载）。于是，如果有多个js文件被引入，那么对于浏览器来说，这些js文件被被串行地载入，并依次执行。因为javascript可能会来操作HTML文档的DOM树，所以，浏览器一般都不会像并行下载css文件并行下载js文件。因此JavaScript无法操作此JavaScript之后的dom元素。</p>\n"},{"title":"两种盒子模型","_content":"盒子模型是CSS中一个重要的概念，理解了盒子模型才能更好的排版。其实盒子模型有两种，分别是 IE 盒子模型和标准 W3C 盒子模型。  \n## 1.标准盒子模型\n![](http://onep1caa3.bkt.clouddn.com/2017.0525.png)  \n从上图可以看到标准 W3C 盒子模型的范围包括 margin、border、padding、content，并且 content 部分不包含其他部分。  \n## IE盒子模型  \nIE 盒子模型的范围也包括 margin、border、padding、content，和标准 W3C 盒子模型不同的是：IE 盒子模型的 content 部分包含了 border 和 padding。  \n**举个例子：一个盒子的 margin 为 20px，border 为 1px，padding 为 10px，content 的宽为 200px、高为 50px，如果用标准 W3C 盒子模型解释，那么这个盒子需要占据的位置为：宽 20*2 1*2 10*2 200=262px、高 20*2 1*2*10*2 50=112px，盒子的实际大小为：宽 1*2 10*2 200=222px、高 1*2 10*2 50=72px；如果用IE 盒子模型，那么这个盒子需要占据的位置为：宽 20*2 200=240px、高 20*2 50=70px，盒子的实际大小为：宽 200px、高 50px。   **\n一般我们选择W3C盒子模型，也就是标准的盒子模型，需要在网页的顶部加上DOCTYPE声明。","source":"_posts/2017.05.25.box.md","raw":"---\ntitle: 两种盒子模型\ntags: [css,box]\ncategories: 随笔 \n---\n盒子模型是CSS中一个重要的概念，理解了盒子模型才能更好的排版。其实盒子模型有两种，分别是 IE 盒子模型和标准 W3C 盒子模型。  \n## 1.标准盒子模型\n![](http://onep1caa3.bkt.clouddn.com/2017.0525.png)  \n从上图可以看到标准 W3C 盒子模型的范围包括 margin、border、padding、content，并且 content 部分不包含其他部分。  \n## IE盒子模型  \nIE 盒子模型的范围也包括 margin、border、padding、content，和标准 W3C 盒子模型不同的是：IE 盒子模型的 content 部分包含了 border 和 padding。  \n**举个例子：一个盒子的 margin 为 20px，border 为 1px，padding 为 10px，content 的宽为 200px、高为 50px，如果用标准 W3C 盒子模型解释，那么这个盒子需要占据的位置为：宽 20*2 1*2 10*2 200=262px、高 20*2 1*2*10*2 50=112px，盒子的实际大小为：宽 1*2 10*2 200=222px、高 1*2 10*2 50=72px；如果用IE 盒子模型，那么这个盒子需要占据的位置为：宽 20*2 200=240px、高 20*2 50=70px，盒子的实际大小为：宽 200px、高 50px。   **\n一般我们选择W3C盒子模型，也就是标准的盒子模型，需要在网页的顶部加上DOCTYPE声明。","slug":"2017.05.25.box","published":1,"date":"2017-05-25T04:38:58.000Z","updated":"2017-05-25T04:38:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziipw000drh9zf67d9ub9","content":"<p>盒子模型是CSS中一个重要的概念，理解了盒子模型才能更好的排版。其实盒子模型有两种，分别是 IE 盒子模型和标准 W3C 盒子模型。  </p>\n<h2 id=\"1-标准盒子模型\"><a href=\"#1-标准盒子模型\" class=\"headerlink\" title=\"1.标准盒子模型\"></a>1.标准盒子模型</h2><p><img src=\"http://onep1caa3.bkt.clouddn.com/2017.0525.png\" alt=\"\"><br>从上图可以看到标准 W3C 盒子模型的范围包括 margin、border、padding、content，并且 content 部分不包含其他部分。  </p>\n<h2 id=\"IE盒子模型\"><a href=\"#IE盒子模型\" class=\"headerlink\" title=\"IE盒子模型\"></a>IE盒子模型</h2><p>IE 盒子模型的范围也包括 margin、border、padding、content，和标准 W3C 盒子模型不同的是：IE 盒子模型的 content 部分包含了 border 和 padding。<br><strong>举个例子：一个盒子的 margin 为 20px，border 为 1px，padding 为 10px，content 的宽为 200px、高为 50px，如果用标准 W3C 盒子模型解释，那么这个盒子需要占据的位置为：宽 20<em>2 1</em>2 10<em>2 200=262px、高 20</em>2 1<em>2</em>10<em>2 50=112px，盒子的实际大小为：宽 1</em>2 10<em>2 200=222px、高 1</em>2 10<em>2 50=72px；如果用IE 盒子模型，那么这个盒子需要占据的位置为：宽 20</em>2 200=240px、高 20*2 50=70px，盒子的实际大小为：宽 200px、高 50px。   </strong><br>一般我们选择W3C盒子模型，也就是标准的盒子模型，需要在网页的顶部加上DOCTYPE声明。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>盒子模型是CSS中一个重要的概念，理解了盒子模型才能更好的排版。其实盒子模型有两种，分别是 IE 盒子模型和标准 W3C 盒子模型。  </p>\n<h2 id=\"1-标准盒子模型\"><a href=\"#1-标准盒子模型\" class=\"headerlink\" title=\"1.标准盒子模型\"></a>1.标准盒子模型</h2><p><img src=\"http://onep1caa3.bkt.clouddn.com/2017.0525.png\" alt=\"\"><br>从上图可以看到标准 W3C 盒子模型的范围包括 margin、border、padding、content，并且 content 部分不包含其他部分。  </p>\n<h2 id=\"IE盒子模型\"><a href=\"#IE盒子模型\" class=\"headerlink\" title=\"IE盒子模型\"></a>IE盒子模型</h2><p>IE 盒子模型的范围也包括 margin、border、padding、content，和标准 W3C 盒子模型不同的是：IE 盒子模型的 content 部分包含了 border 和 padding。<br><strong>举个例子：一个盒子的 margin 为 20px，border 为 1px，padding 为 10px，content 的宽为 200px、高为 50px，如果用标准 W3C 盒子模型解释，那么这个盒子需要占据的位置为：宽 20<em>2 1</em>2 10<em>2 200=262px、高 20</em>2 1<em>2</em>10<em>2 50=112px，盒子的实际大小为：宽 1</em>2 10<em>2 200=222px、高 1</em>2 10<em>2 50=72px；如果用IE 盒子模型，那么这个盒子需要占据的位置为：宽 20</em>2 200=240px、高 20*2 50=70px，盒子的实际大小为：宽 200px、高 50px。   </strong><br>一般我们选择W3C盒子模型，也就是标准的盒子模型，需要在网页的顶部加上DOCTYPE声明。</p>\n"},{"title":"加快网站访问速度的方法","_content":"通过以下的方法，可以提高网站的访问速度，减少页面的加载时间。\n\n----------\n## 1.减少HTTP请求数量\n80%的用户响应时间被花费在前端，而这其中的绝大多数时间是用于下载页面中的图片、样式表、脚本以及Flash这些组件。减少这些组件的数量就可以减少展示页面所需的请求数，而这是提高网页响应速度的关键。 \n  \n* 合并文件，通过把所有脚本置于一个脚本文件里或者把所有样式表放于一个样式表文件中，从而减少Http请求的数量。\n* CSS Sprites是减少图片请求的首选方案。把所有的背景图片合并到一张图中，使用CSS的`background-image` 和`background-position` 属性去控制展现恰当的图片区域。\n* Image maps把多张图片组合成为一张图片。图片的总大小是不变的，但减少Http请求数会提高页面的响应速度。Image maps只能用于图片在网页中相邻的情况，比如导航条。制定image maps中的图片坐标是个很麻烦的过程，而且容易出错。同时给导航使用image maps也并不易读，所以并不推荐使用。\n* 内联图片使用data: URL scheme 把图片数据嵌入页面，但这会增加Html文档的大小。把内联图片合并到你被缓存的的样式表中是一个能既减少HTTP请求数又不会增加页面大小的方法。 \n\n\n减少页面的Http请求数量是第一步，而且对于提高用户初次访问体验是最重要的一步。  \n## 2.使用内容分布式网络（CDN）\n用户80-90%的访问时间被花费在下载页面中的图片、样式表、脚本、Flash这些组件上。这是网站展示的黄金法则。那么与其重新设计网站的结构，不如先实现这些静态组件的分布。这不仅仅可以大幅减少响应时间，而且由于内容分布式网络（content delivery networks）的存在，这将是个很简单的工作。内容分布式网络（CDN）是一系列分布在不同地域的服务器的集合，能够更有效的给用户发送信息。它会根据一种衡量网域距离的方法，选取为某个用户发送数据的服务器。比如，到达用户最少跳或者最快相应速度的服务器会被选中。 \n## 3.给头部添加一个失效期或者Cache-Control \n* 对于静态组件：把头部的缓存期设为某个遥远的未来，使其能够“永不过期”；\n* 对于动态组件：使用适当的Cache-Control头部帮助浏览器执行特定的请求。 \n\n网页设计越来越丰富，页面里包含了越来越多的脚本、样式表、图片和Flash。页面的初次访问者也许会发送多个HTTP请求，但通过给头部添加失效期，你可以使那些组件被缓存。这会避免下次浏览页面时的不必要的HTTP请求。给图片文件的头部设置失效时间更为常用，但包括脚本文件、样式表和Flash之类的所有组件的头部都应该被设置失效时间。浏览器（还有代理服务器）使用缓存以减少HTTP请求的数量和大小，提高网页的加载速度。服务器在HTTP相应中通过头部中的过期时间告知客户端一个组件可以被缓存多久。\n## 4.Gzip压缩组件\n使用gzip压缩通常会减少70%的HTTP响应大小。当前浏览器中大约90%的Internet通讯传输声明支持gzip。\n## 5.把样式表放在前面\n把样式表放在文档的最后，会导致包括IE在内的大部分浏览器不进行逐步呈现。浏览器为了避免当样式改变时重绘元素而中止呈现。用户会十分无聊的看到一个空白的页面。\n## 6.把脚本放在最后\n脚本可能会堵塞并发的下载。HTTP/1.1规范建议浏览器在每个域名下只进行两个并发下载。如果你把图片放在多个域名下，可以实现多于两个的并发下载。当脚本被下载时，即使使用不同的域名。浏览器也不会进行任何其它的下载。有些情况下把脚本放到底部并不太容易。比如，脚本使用document.write 来添加部分页面中的内容，就不能放到页面中更后面的位置。还可能有作用域的问题。很多情况下，还有一些变通的方法。\n通常的建议是使用延迟脚本。DEFER属性表明脚本不包括document.write，而且提示浏览器继续展现。不幸的是，Firefox不支持DEFER属性。IE中，脚本可以被延迟，但并不如你期望的那么久。如果一个脚本可以被延迟，那么它也可以被放在页面的底部。这会让你的页面加载的更快。\n## 7.不使用CSS表达式\n使用一次性的表达式是减少CSS表达式的执行次数的一个方法，当表达式第一次执行时，CSS表达式会被一个确定的值代替。如果在页面生命周期中，样式属性必须动态的设定，使用事件处理替代CSS表达式是一个可选的方法。如果必须使用CSS表达式，要记得它们会执行上千次并影响页面的性能。\n## 8.使用外部的JavaScript和CSS\n在实际应用中使用外部的文件往往产生更快的页面，因为浏览器会缓存JavaScript和CSS文件。而内联在页面里的JavaScript和CSS会在每次请求页面时下载。这会减少所需的HTTP请求数，但增大HTML文档的体积。而另一方面，如果放在外部文件里的JavaScript和CSS被浏览器缓存，则既不用增加HTTP请求的数量，HTML文档的体积也会减少。\n## 9.减少DNS查询\n当客户端的DNS缓存被清空（包括浏览器和操作系统的缓存），DNS查询的数量等同于网页中单独的域名的数量。包括页面中的链接，图片，脚本文件，样式表，Flash对象等。减少不同域名的数量则会减少DNS查询的数量。减少不同域名的数量可能减少页面并行的下载数量。减少DNS查询缩短了响应时间，但减少了并行下载数也许会增加响应时间。将组件分布在两到四个域名之间能很好的折中减少DNS查询提高的速度和维持较高水平的并行下载的效果。\n## 10.缩小JavaScript和CSS\n缩小是指从代码中删除不必要的字母，减少文件体积从而提高加载速度。缩减代码时需要移除所有的注释，以及不需要的空白（空格，新行和tab）。这样处理JavaScript之后，会由于下载文件的体积被减少而提高响应的性能。不仅仅要压缩外部的脚本和样式表，内敛的\n< script>和< style>部分也可以而且应当被压缩。\n## 11.避免重定向\n重定向降低了用户体验。在用户和HTML文档之间插入的重定向延误了页面的呈现和组件下载，因为它们都不可能在获得HTML文档之前开始。\n## 12.移除重复的脚本\n当脚本被重复包含时，由于增加了不必要的HTTP请求和JavaScript的执行，影响了性能。\n## 13.设定ETags\n实体标签（ETags）是服务器和浏览器用于确定浏览器中缓存的组件和服务器中的是否对应的一种机制。\n## 14.让Ajax可以缓存\nAjax的好处之一是它能给用户提供瞬间的响应，因为它从服务端异步请求数据。但Ajax不能保证用户在等候那些异步的JavaScript和XML响应返回时什么都不做。在应用程序中，用户是否继续等待取决于Ajax怎样应用。为了提高性能，优化Ajax响应很重要。提高Ajax性能最重要的方式是使响应缓存。\n## 15.更早地刷新缓冲区\n当用户请求一个页面，服务端会花费200至500毫秒的时间组合HTML页面。在这期间，浏览器会静静等待数据到来。PHP中有flush（）函数，它允许你向浏览器发送部分就绪的HTML响应，这样浏览器可以在服务器处理余下的HTML页面时去获取组件。这样的好处主要在忙碌的后台和轻松的前台间可以看到。\n## 16.在Ajax请求中使用GET方法\nPOST方法在浏览器中分两步执行：先发送头部，然后发送数据。所以最好使用只发送一个TCP包（除非你有很多的cookie）的GET方法。IE中URL的最大长度是2000，所以如果你发送超过2000的数据就不能使用GET方法。\n## 17.后加载组件\n 有执行拖放、下拉和动画的JavaScript代码和菜单，它们可以稍后加载，因为用户在初始呈现之后才会在页面上拖动元素。其他的可以被后加载的地方包括隐藏的内容（当用户做某项操作才会展现的内容）和被折叠的图片。\n## 18.利用浏览器的空闲时间来加载之后需要的组件\n利用浏览器的空闲时间来加载之后需要的组件（比如图片，样式表和脚本），当用户浏览下一个页面的时候，大部分组件都已经在缓存里了而页面会加载的更快。\n## 19.减少DOM 元素数量\n复杂的页面意味着更多的字节需要被下载而且也意味着在JavaScript中遍历DOM更慢。比如你在页面中添加一个事件，让它在500或者5000个DOM元素中循环，它们的效率是不同的。\n## 20.减少cookie的大小\n尽量减少cookie的体积对减少用户获得响应的时间十分重要。\n## 21.减少dom的读取\n利用Javascript读取DOM元素很慢，所以为了获得响应更快的页面，应该减少dom的读取，同时避免利用JavaScript定位布局。\n## 22.不要再HTML中缩放图片\n不要使用大小超过需要的图片，即使你能够在HTML中设置它的属性。\n## 23.使用小的可缓存的favion.ico\nfavicon.icon是放在服务器根目录的一个图片，而且由于它是在同一服务器下的，Cookie也会随着每次请求一并发送。这张图片同样干扰下载队列，比如在IE中，当你在onload事件中请求额外的组件时，favicon会在这些额外组件之前下载。所以为了减少favicon.ico的不利影响，应当使用小图片，小于1k最好，并设置你认为合适的过期时间。","source":"_posts/2017.05.24speedup.md","raw":"---\ntitle: 加快网站访问速度的方法\ntags: [http]\ncategories: 知识 \n---\n通过以下的方法，可以提高网站的访问速度，减少页面的加载时间。\n\n----------\n## 1.减少HTTP请求数量\n80%的用户响应时间被花费在前端，而这其中的绝大多数时间是用于下载页面中的图片、样式表、脚本以及Flash这些组件。减少这些组件的数量就可以减少展示页面所需的请求数，而这是提高网页响应速度的关键。 \n  \n* 合并文件，通过把所有脚本置于一个脚本文件里或者把所有样式表放于一个样式表文件中，从而减少Http请求的数量。\n* CSS Sprites是减少图片请求的首选方案。把所有的背景图片合并到一张图中，使用CSS的`background-image` 和`background-position` 属性去控制展现恰当的图片区域。\n* Image maps把多张图片组合成为一张图片。图片的总大小是不变的，但减少Http请求数会提高页面的响应速度。Image maps只能用于图片在网页中相邻的情况，比如导航条。制定image maps中的图片坐标是个很麻烦的过程，而且容易出错。同时给导航使用image maps也并不易读，所以并不推荐使用。\n* 内联图片使用data: URL scheme 把图片数据嵌入页面，但这会增加Html文档的大小。把内联图片合并到你被缓存的的样式表中是一个能既减少HTTP请求数又不会增加页面大小的方法。 \n\n\n减少页面的Http请求数量是第一步，而且对于提高用户初次访问体验是最重要的一步。  \n## 2.使用内容分布式网络（CDN）\n用户80-90%的访问时间被花费在下载页面中的图片、样式表、脚本、Flash这些组件上。这是网站展示的黄金法则。那么与其重新设计网站的结构，不如先实现这些静态组件的分布。这不仅仅可以大幅减少响应时间，而且由于内容分布式网络（content delivery networks）的存在，这将是个很简单的工作。内容分布式网络（CDN）是一系列分布在不同地域的服务器的集合，能够更有效的给用户发送信息。它会根据一种衡量网域距离的方法，选取为某个用户发送数据的服务器。比如，到达用户最少跳或者最快相应速度的服务器会被选中。 \n## 3.给头部添加一个失效期或者Cache-Control \n* 对于静态组件：把头部的缓存期设为某个遥远的未来，使其能够“永不过期”；\n* 对于动态组件：使用适当的Cache-Control头部帮助浏览器执行特定的请求。 \n\n网页设计越来越丰富，页面里包含了越来越多的脚本、样式表、图片和Flash。页面的初次访问者也许会发送多个HTTP请求，但通过给头部添加失效期，你可以使那些组件被缓存。这会避免下次浏览页面时的不必要的HTTP请求。给图片文件的头部设置失效时间更为常用，但包括脚本文件、样式表和Flash之类的所有组件的头部都应该被设置失效时间。浏览器（还有代理服务器）使用缓存以减少HTTP请求的数量和大小，提高网页的加载速度。服务器在HTTP相应中通过头部中的过期时间告知客户端一个组件可以被缓存多久。\n## 4.Gzip压缩组件\n使用gzip压缩通常会减少70%的HTTP响应大小。当前浏览器中大约90%的Internet通讯传输声明支持gzip。\n## 5.把样式表放在前面\n把样式表放在文档的最后，会导致包括IE在内的大部分浏览器不进行逐步呈现。浏览器为了避免当样式改变时重绘元素而中止呈现。用户会十分无聊的看到一个空白的页面。\n## 6.把脚本放在最后\n脚本可能会堵塞并发的下载。HTTP/1.1规范建议浏览器在每个域名下只进行两个并发下载。如果你把图片放在多个域名下，可以实现多于两个的并发下载。当脚本被下载时，即使使用不同的域名。浏览器也不会进行任何其它的下载。有些情况下把脚本放到底部并不太容易。比如，脚本使用document.write 来添加部分页面中的内容，就不能放到页面中更后面的位置。还可能有作用域的问题。很多情况下，还有一些变通的方法。\n通常的建议是使用延迟脚本。DEFER属性表明脚本不包括document.write，而且提示浏览器继续展现。不幸的是，Firefox不支持DEFER属性。IE中，脚本可以被延迟，但并不如你期望的那么久。如果一个脚本可以被延迟，那么它也可以被放在页面的底部。这会让你的页面加载的更快。\n## 7.不使用CSS表达式\n使用一次性的表达式是减少CSS表达式的执行次数的一个方法，当表达式第一次执行时，CSS表达式会被一个确定的值代替。如果在页面生命周期中，样式属性必须动态的设定，使用事件处理替代CSS表达式是一个可选的方法。如果必须使用CSS表达式，要记得它们会执行上千次并影响页面的性能。\n## 8.使用外部的JavaScript和CSS\n在实际应用中使用外部的文件往往产生更快的页面，因为浏览器会缓存JavaScript和CSS文件。而内联在页面里的JavaScript和CSS会在每次请求页面时下载。这会减少所需的HTTP请求数，但增大HTML文档的体积。而另一方面，如果放在外部文件里的JavaScript和CSS被浏览器缓存，则既不用增加HTTP请求的数量，HTML文档的体积也会减少。\n## 9.减少DNS查询\n当客户端的DNS缓存被清空（包括浏览器和操作系统的缓存），DNS查询的数量等同于网页中单独的域名的数量。包括页面中的链接，图片，脚本文件，样式表，Flash对象等。减少不同域名的数量则会减少DNS查询的数量。减少不同域名的数量可能减少页面并行的下载数量。减少DNS查询缩短了响应时间，但减少了并行下载数也许会增加响应时间。将组件分布在两到四个域名之间能很好的折中减少DNS查询提高的速度和维持较高水平的并行下载的效果。\n## 10.缩小JavaScript和CSS\n缩小是指从代码中删除不必要的字母，减少文件体积从而提高加载速度。缩减代码时需要移除所有的注释，以及不需要的空白（空格，新行和tab）。这样处理JavaScript之后，会由于下载文件的体积被减少而提高响应的性能。不仅仅要压缩外部的脚本和样式表，内敛的\n< script>和< style>部分也可以而且应当被压缩。\n## 11.避免重定向\n重定向降低了用户体验。在用户和HTML文档之间插入的重定向延误了页面的呈现和组件下载，因为它们都不可能在获得HTML文档之前开始。\n## 12.移除重复的脚本\n当脚本被重复包含时，由于增加了不必要的HTTP请求和JavaScript的执行，影响了性能。\n## 13.设定ETags\n实体标签（ETags）是服务器和浏览器用于确定浏览器中缓存的组件和服务器中的是否对应的一种机制。\n## 14.让Ajax可以缓存\nAjax的好处之一是它能给用户提供瞬间的响应，因为它从服务端异步请求数据。但Ajax不能保证用户在等候那些异步的JavaScript和XML响应返回时什么都不做。在应用程序中，用户是否继续等待取决于Ajax怎样应用。为了提高性能，优化Ajax响应很重要。提高Ajax性能最重要的方式是使响应缓存。\n## 15.更早地刷新缓冲区\n当用户请求一个页面，服务端会花费200至500毫秒的时间组合HTML页面。在这期间，浏览器会静静等待数据到来。PHP中有flush（）函数，它允许你向浏览器发送部分就绪的HTML响应，这样浏览器可以在服务器处理余下的HTML页面时去获取组件。这样的好处主要在忙碌的后台和轻松的前台间可以看到。\n## 16.在Ajax请求中使用GET方法\nPOST方法在浏览器中分两步执行：先发送头部，然后发送数据。所以最好使用只发送一个TCP包（除非你有很多的cookie）的GET方法。IE中URL的最大长度是2000，所以如果你发送超过2000的数据就不能使用GET方法。\n## 17.后加载组件\n 有执行拖放、下拉和动画的JavaScript代码和菜单，它们可以稍后加载，因为用户在初始呈现之后才会在页面上拖动元素。其他的可以被后加载的地方包括隐藏的内容（当用户做某项操作才会展现的内容）和被折叠的图片。\n## 18.利用浏览器的空闲时间来加载之后需要的组件\n利用浏览器的空闲时间来加载之后需要的组件（比如图片，样式表和脚本），当用户浏览下一个页面的时候，大部分组件都已经在缓存里了而页面会加载的更快。\n## 19.减少DOM 元素数量\n复杂的页面意味着更多的字节需要被下载而且也意味着在JavaScript中遍历DOM更慢。比如你在页面中添加一个事件，让它在500或者5000个DOM元素中循环，它们的效率是不同的。\n## 20.减少cookie的大小\n尽量减少cookie的体积对减少用户获得响应的时间十分重要。\n## 21.减少dom的读取\n利用Javascript读取DOM元素很慢，所以为了获得响应更快的页面，应该减少dom的读取，同时避免利用JavaScript定位布局。\n## 22.不要再HTML中缩放图片\n不要使用大小超过需要的图片，即使你能够在HTML中设置它的属性。\n## 23.使用小的可缓存的favion.ico\nfavicon.icon是放在服务器根目录的一个图片，而且由于它是在同一服务器下的，Cookie也会随着每次请求一并发送。这张图片同样干扰下载队列，比如在IE中，当你在onload事件中请求额外的组件时，favicon会在这些额外组件之前下载。所以为了减少favicon.ico的不利影响，应当使用小图片，小于1k最好，并设置你认为合适的过期时间。","slug":"2017.05.24speedup","published":1,"date":"2017-05-24T03:30:44.000Z","updated":"2017-05-24T03:30:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziipw000erh9z87ya5h5k","content":"<p>通过以下的方法，可以提高网站的访问速度，减少页面的加载时间。</p>\n<hr>\n<h2 id=\"1-减少HTTP请求数量\"><a href=\"#1-减少HTTP请求数量\" class=\"headerlink\" title=\"1.减少HTTP请求数量\"></a>1.减少HTTP请求数量</h2><p>80%的用户响应时间被花费在前端，而这其中的绝大多数时间是用于下载页面中的图片、样式表、脚本以及Flash这些组件。减少这些组件的数量就可以减少展示页面所需的请求数，而这是提高网页响应速度的关键。 </p>\n<ul>\n<li>合并文件，通过把所有脚本置于一个脚本文件里或者把所有样式表放于一个样式表文件中，从而减少Http请求的数量。</li>\n<li>CSS Sprites是减少图片请求的首选方案。把所有的背景图片合并到一张图中，使用CSS的<code>background-image</code> 和<code>background-position</code> 属性去控制展现恰当的图片区域。</li>\n<li>Image maps把多张图片组合成为一张图片。图片的总大小是不变的，但减少Http请求数会提高页面的响应速度。Image maps只能用于图片在网页中相邻的情况，比如导航条。制定image maps中的图片坐标是个很麻烦的过程，而且容易出错。同时给导航使用image maps也并不易读，所以并不推荐使用。</li>\n<li>内联图片使用data: URL scheme 把图片数据嵌入页面，但这会增加Html文档的大小。把内联图片合并到你被缓存的的样式表中是一个能既减少HTTP请求数又不会增加页面大小的方法。 </li>\n</ul>\n<p>减少页面的Http请求数量是第一步，而且对于提高用户初次访问体验是最重要的一步。  </p>\n<h2 id=\"2-使用内容分布式网络（CDN）\"><a href=\"#2-使用内容分布式网络（CDN）\" class=\"headerlink\" title=\"2.使用内容分布式网络（CDN）\"></a>2.使用内容分布式网络（CDN）</h2><p>用户80-90%的访问时间被花费在下载页面中的图片、样式表、脚本、Flash这些组件上。这是网站展示的黄金法则。那么与其重新设计网站的结构，不如先实现这些静态组件的分布。这不仅仅可以大幅减少响应时间，而且由于内容分布式网络（content delivery networks）的存在，这将是个很简单的工作。内容分布式网络（CDN）是一系列分布在不同地域的服务器的集合，能够更有效的给用户发送信息。它会根据一种衡量网域距离的方法，选取为某个用户发送数据的服务器。比如，到达用户最少跳或者最快相应速度的服务器会被选中。 </p>\n<h2 id=\"3-给头部添加一个失效期或者Cache-Control\"><a href=\"#3-给头部添加一个失效期或者Cache-Control\" class=\"headerlink\" title=\"3.给头部添加一个失效期或者Cache-Control\"></a>3.给头部添加一个失效期或者Cache-Control</h2><ul>\n<li>对于静态组件：把头部的缓存期设为某个遥远的未来，使其能够“永不过期”；</li>\n<li>对于动态组件：使用适当的Cache-Control头部帮助浏览器执行特定的请求。 </li>\n</ul>\n<p>网页设计越来越丰富，页面里包含了越来越多的脚本、样式表、图片和Flash。页面的初次访问者也许会发送多个HTTP请求，但通过给头部添加失效期，你可以使那些组件被缓存。这会避免下次浏览页面时的不必要的HTTP请求。给图片文件的头部设置失效时间更为常用，但包括脚本文件、样式表和Flash之类的所有组件的头部都应该被设置失效时间。浏览器（还有代理服务器）使用缓存以减少HTTP请求的数量和大小，提高网页的加载速度。服务器在HTTP相应中通过头部中的过期时间告知客户端一个组件可以被缓存多久。</p>\n<h2 id=\"4-Gzip压缩组件\"><a href=\"#4-Gzip压缩组件\" class=\"headerlink\" title=\"4.Gzip压缩组件\"></a>4.Gzip压缩组件</h2><p>使用gzip压缩通常会减少70%的HTTP响应大小。当前浏览器中大约90%的Internet通讯传输声明支持gzip。</p>\n<h2 id=\"5-把样式表放在前面\"><a href=\"#5-把样式表放在前面\" class=\"headerlink\" title=\"5.把样式表放在前面\"></a>5.把样式表放在前面</h2><p>把样式表放在文档的最后，会导致包括IE在内的大部分浏览器不进行逐步呈现。浏览器为了避免当样式改变时重绘元素而中止呈现。用户会十分无聊的看到一个空白的页面。</p>\n<h2 id=\"6-把脚本放在最后\"><a href=\"#6-把脚本放在最后\" class=\"headerlink\" title=\"6.把脚本放在最后\"></a>6.把脚本放在最后</h2><p>脚本可能会堵塞并发的下载。HTTP/1.1规范建议浏览器在每个域名下只进行两个并发下载。如果你把图片放在多个域名下，可以实现多于两个的并发下载。当脚本被下载时，即使使用不同的域名。浏览器也不会进行任何其它的下载。有些情况下把脚本放到底部并不太容易。比如，脚本使用document.write 来添加部分页面中的内容，就不能放到页面中更后面的位置。还可能有作用域的问题。很多情况下，还有一些变通的方法。<br>通常的建议是使用延迟脚本。DEFER属性表明脚本不包括document.write，而且提示浏览器继续展现。不幸的是，Firefox不支持DEFER属性。IE中，脚本可以被延迟，但并不如你期望的那么久。如果一个脚本可以被延迟，那么它也可以被放在页面的底部。这会让你的页面加载的更快。</p>\n<h2 id=\"7-不使用CSS表达式\"><a href=\"#7-不使用CSS表达式\" class=\"headerlink\" title=\"7.不使用CSS表达式\"></a>7.不使用CSS表达式</h2><p>使用一次性的表达式是减少CSS表达式的执行次数的一个方法，当表达式第一次执行时，CSS表达式会被一个确定的值代替。如果在页面生命周期中，样式属性必须动态的设定，使用事件处理替代CSS表达式是一个可选的方法。如果必须使用CSS表达式，要记得它们会执行上千次并影响页面的性能。</p>\n<h2 id=\"8-使用外部的JavaScript和CSS\"><a href=\"#8-使用外部的JavaScript和CSS\" class=\"headerlink\" title=\"8.使用外部的JavaScript和CSS\"></a>8.使用外部的JavaScript和CSS</h2><p>在实际应用中使用外部的文件往往产生更快的页面，因为浏览器会缓存JavaScript和CSS文件。而内联在页面里的JavaScript和CSS会在每次请求页面时下载。这会减少所需的HTTP请求数，但增大HTML文档的体积。而另一方面，如果放在外部文件里的JavaScript和CSS被浏览器缓存，则既不用增加HTTP请求的数量，HTML文档的体积也会减少。</p>\n<h2 id=\"9-减少DNS查询\"><a href=\"#9-减少DNS查询\" class=\"headerlink\" title=\"9.减少DNS查询\"></a>9.减少DNS查询</h2><p>当客户端的DNS缓存被清空（包括浏览器和操作系统的缓存），DNS查询的数量等同于网页中单独的域名的数量。包括页面中的链接，图片，脚本文件，样式表，Flash对象等。减少不同域名的数量则会减少DNS查询的数量。减少不同域名的数量可能减少页面并行的下载数量。减少DNS查询缩短了响应时间，但减少了并行下载数也许会增加响应时间。将组件分布在两到四个域名之间能很好的折中减少DNS查询提高的速度和维持较高水平的并行下载的效果。</p>\n<h2 id=\"10-缩小JavaScript和CSS\"><a href=\"#10-缩小JavaScript和CSS\" class=\"headerlink\" title=\"10.缩小JavaScript和CSS\"></a>10.缩小JavaScript和CSS</h2><p>缩小是指从代码中删除不必要的字母，减少文件体积从而提高加载速度。缩减代码时需要移除所有的注释，以及不需要的空白（空格，新行和tab）。这样处理JavaScript之后，会由于下载文件的体积被减少而提高响应的性能。不仅仅要压缩外部的脚本和样式表，内敛的<br>&lt; script&gt;和&lt; style&gt;部分也可以而且应当被压缩。</p>\n<h2 id=\"11-避免重定向\"><a href=\"#11-避免重定向\" class=\"headerlink\" title=\"11.避免重定向\"></a>11.避免重定向</h2><p>重定向降低了用户体验。在用户和HTML文档之间插入的重定向延误了页面的呈现和组件下载，因为它们都不可能在获得HTML文档之前开始。</p>\n<h2 id=\"12-移除重复的脚本\"><a href=\"#12-移除重复的脚本\" class=\"headerlink\" title=\"12.移除重复的脚本\"></a>12.移除重复的脚本</h2><p>当脚本被重复包含时，由于增加了不必要的HTTP请求和JavaScript的执行，影响了性能。</p>\n<h2 id=\"13-设定ETags\"><a href=\"#13-设定ETags\" class=\"headerlink\" title=\"13.设定ETags\"></a>13.设定ETags</h2><p>实体标签（ETags）是服务器和浏览器用于确定浏览器中缓存的组件和服务器中的是否对应的一种机制。</p>\n<h2 id=\"14-让Ajax可以缓存\"><a href=\"#14-让Ajax可以缓存\" class=\"headerlink\" title=\"14.让Ajax可以缓存\"></a>14.让Ajax可以缓存</h2><p>Ajax的好处之一是它能给用户提供瞬间的响应，因为它从服务端异步请求数据。但Ajax不能保证用户在等候那些异步的JavaScript和XML响应返回时什么都不做。在应用程序中，用户是否继续等待取决于Ajax怎样应用。为了提高性能，优化Ajax响应很重要。提高Ajax性能最重要的方式是使响应缓存。</p>\n<h2 id=\"15-更早地刷新缓冲区\"><a href=\"#15-更早地刷新缓冲区\" class=\"headerlink\" title=\"15.更早地刷新缓冲区\"></a>15.更早地刷新缓冲区</h2><p>当用户请求一个页面，服务端会花费200至500毫秒的时间组合HTML页面。在这期间，浏览器会静静等待数据到来。PHP中有flush（）函数，它允许你向浏览器发送部分就绪的HTML响应，这样浏览器可以在服务器处理余下的HTML页面时去获取组件。这样的好处主要在忙碌的后台和轻松的前台间可以看到。</p>\n<h2 id=\"16-在Ajax请求中使用GET方法\"><a href=\"#16-在Ajax请求中使用GET方法\" class=\"headerlink\" title=\"16.在Ajax请求中使用GET方法\"></a>16.在Ajax请求中使用GET方法</h2><p>POST方法在浏览器中分两步执行：先发送头部，然后发送数据。所以最好使用只发送一个TCP包（除非你有很多的cookie）的GET方法。IE中URL的最大长度是2000，所以如果你发送超过2000的数据就不能使用GET方法。</p>\n<h2 id=\"17-后加载组件\"><a href=\"#17-后加载组件\" class=\"headerlink\" title=\"17.后加载组件\"></a>17.后加载组件</h2><p> 有执行拖放、下拉和动画的JavaScript代码和菜单，它们可以稍后加载，因为用户在初始呈现之后才会在页面上拖动元素。其他的可以被后加载的地方包括隐藏的内容（当用户做某项操作才会展现的内容）和被折叠的图片。</p>\n<h2 id=\"18-利用浏览器的空闲时间来加载之后需要的组件\"><a href=\"#18-利用浏览器的空闲时间来加载之后需要的组件\" class=\"headerlink\" title=\"18.利用浏览器的空闲时间来加载之后需要的组件\"></a>18.利用浏览器的空闲时间来加载之后需要的组件</h2><p>利用浏览器的空闲时间来加载之后需要的组件（比如图片，样式表和脚本），当用户浏览下一个页面的时候，大部分组件都已经在缓存里了而页面会加载的更快。</p>\n<h2 id=\"19-减少DOM-元素数量\"><a href=\"#19-减少DOM-元素数量\" class=\"headerlink\" title=\"19.减少DOM 元素数量\"></a>19.减少DOM 元素数量</h2><p>复杂的页面意味着更多的字节需要被下载而且也意味着在JavaScript中遍历DOM更慢。比如你在页面中添加一个事件，让它在500或者5000个DOM元素中循环，它们的效率是不同的。</p>\n<h2 id=\"20-减少cookie的大小\"><a href=\"#20-减少cookie的大小\" class=\"headerlink\" title=\"20.减少cookie的大小\"></a>20.减少cookie的大小</h2><p>尽量减少cookie的体积对减少用户获得响应的时间十分重要。</p>\n<h2 id=\"21-减少dom的读取\"><a href=\"#21-减少dom的读取\" class=\"headerlink\" title=\"21.减少dom的读取\"></a>21.减少dom的读取</h2><p>利用Javascript读取DOM元素很慢，所以为了获得响应更快的页面，应该减少dom的读取，同时避免利用JavaScript定位布局。</p>\n<h2 id=\"22-不要再HTML中缩放图片\"><a href=\"#22-不要再HTML中缩放图片\" class=\"headerlink\" title=\"22.不要再HTML中缩放图片\"></a>22.不要再HTML中缩放图片</h2><p>不要使用大小超过需要的图片，即使你能够在HTML中设置它的属性。</p>\n<h2 id=\"23-使用小的可缓存的favion-ico\"><a href=\"#23-使用小的可缓存的favion-ico\" class=\"headerlink\" title=\"23.使用小的可缓存的favion.ico\"></a>23.使用小的可缓存的favion.ico</h2><p>favicon.icon是放在服务器根目录的一个图片，而且由于它是在同一服务器下的，Cookie也会随着每次请求一并发送。这张图片同样干扰下载队列，比如在IE中，当你在onload事件中请求额外的组件时，favicon会在这些额外组件之前下载。所以为了减少favicon.ico的不利影响，应当使用小图片，小于1k最好，并设置你认为合适的过期时间。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>通过以下的方法，可以提高网站的访问速度，减少页面的加载时间。</p>\n<hr>\n<h2 id=\"1-减少HTTP请求数量\"><a href=\"#1-减少HTTP请求数量\" class=\"headerlink\" title=\"1.减少HTTP请求数量\"></a>1.减少HTTP请求数量</h2><p>80%的用户响应时间被花费在前端，而这其中的绝大多数时间是用于下载页面中的图片、样式表、脚本以及Flash这些组件。减少这些组件的数量就可以减少展示页面所需的请求数，而这是提高网页响应速度的关键。 </p>\n<ul>\n<li>合并文件，通过把所有脚本置于一个脚本文件里或者把所有样式表放于一个样式表文件中，从而减少Http请求的数量。</li>\n<li>CSS Sprites是减少图片请求的首选方案。把所有的背景图片合并到一张图中，使用CSS的<code>background-image</code> 和<code>background-position</code> 属性去控制展现恰当的图片区域。</li>\n<li>Image maps把多张图片组合成为一张图片。图片的总大小是不变的，但减少Http请求数会提高页面的响应速度。Image maps只能用于图片在网页中相邻的情况，比如导航条。制定image maps中的图片坐标是个很麻烦的过程，而且容易出错。同时给导航使用image maps也并不易读，所以并不推荐使用。</li>\n<li>内联图片使用data: URL scheme 把图片数据嵌入页面，但这会增加Html文档的大小。把内联图片合并到你被缓存的的样式表中是一个能既减少HTTP请求数又不会增加页面大小的方法。 </li>\n</ul>\n<p>减少页面的Http请求数量是第一步，而且对于提高用户初次访问体验是最重要的一步。  </p>\n<h2 id=\"2-使用内容分布式网络（CDN）\"><a href=\"#2-使用内容分布式网络（CDN）\" class=\"headerlink\" title=\"2.使用内容分布式网络（CDN）\"></a>2.使用内容分布式网络（CDN）</h2><p>用户80-90%的访问时间被花费在下载页面中的图片、样式表、脚本、Flash这些组件上。这是网站展示的黄金法则。那么与其重新设计网站的结构，不如先实现这些静态组件的分布。这不仅仅可以大幅减少响应时间，而且由于内容分布式网络（content delivery networks）的存在，这将是个很简单的工作。内容分布式网络（CDN）是一系列分布在不同地域的服务器的集合，能够更有效的给用户发送信息。它会根据一种衡量网域距离的方法，选取为某个用户发送数据的服务器。比如，到达用户最少跳或者最快相应速度的服务器会被选中。 </p>\n<h2 id=\"3-给头部添加一个失效期或者Cache-Control\"><a href=\"#3-给头部添加一个失效期或者Cache-Control\" class=\"headerlink\" title=\"3.给头部添加一个失效期或者Cache-Control\"></a>3.给头部添加一个失效期或者Cache-Control</h2><ul>\n<li>对于静态组件：把头部的缓存期设为某个遥远的未来，使其能够“永不过期”；</li>\n<li>对于动态组件：使用适当的Cache-Control头部帮助浏览器执行特定的请求。 </li>\n</ul>\n<p>网页设计越来越丰富，页面里包含了越来越多的脚本、样式表、图片和Flash。页面的初次访问者也许会发送多个HTTP请求，但通过给头部添加失效期，你可以使那些组件被缓存。这会避免下次浏览页面时的不必要的HTTP请求。给图片文件的头部设置失效时间更为常用，但包括脚本文件、样式表和Flash之类的所有组件的头部都应该被设置失效时间。浏览器（还有代理服务器）使用缓存以减少HTTP请求的数量和大小，提高网页的加载速度。服务器在HTTP相应中通过头部中的过期时间告知客户端一个组件可以被缓存多久。</p>\n<h2 id=\"4-Gzip压缩组件\"><a href=\"#4-Gzip压缩组件\" class=\"headerlink\" title=\"4.Gzip压缩组件\"></a>4.Gzip压缩组件</h2><p>使用gzip压缩通常会减少70%的HTTP响应大小。当前浏览器中大约90%的Internet通讯传输声明支持gzip。</p>\n<h2 id=\"5-把样式表放在前面\"><a href=\"#5-把样式表放在前面\" class=\"headerlink\" title=\"5.把样式表放在前面\"></a>5.把样式表放在前面</h2><p>把样式表放在文档的最后，会导致包括IE在内的大部分浏览器不进行逐步呈现。浏览器为了避免当样式改变时重绘元素而中止呈现。用户会十分无聊的看到一个空白的页面。</p>\n<h2 id=\"6-把脚本放在最后\"><a href=\"#6-把脚本放在最后\" class=\"headerlink\" title=\"6.把脚本放在最后\"></a>6.把脚本放在最后</h2><p>脚本可能会堵塞并发的下载。HTTP/1.1规范建议浏览器在每个域名下只进行两个并发下载。如果你把图片放在多个域名下，可以实现多于两个的并发下载。当脚本被下载时，即使使用不同的域名。浏览器也不会进行任何其它的下载。有些情况下把脚本放到底部并不太容易。比如，脚本使用document.write 来添加部分页面中的内容，就不能放到页面中更后面的位置。还可能有作用域的问题。很多情况下，还有一些变通的方法。<br>通常的建议是使用延迟脚本。DEFER属性表明脚本不包括document.write，而且提示浏览器继续展现。不幸的是，Firefox不支持DEFER属性。IE中，脚本可以被延迟，但并不如你期望的那么久。如果一个脚本可以被延迟，那么它也可以被放在页面的底部。这会让你的页面加载的更快。</p>\n<h2 id=\"7-不使用CSS表达式\"><a href=\"#7-不使用CSS表达式\" class=\"headerlink\" title=\"7.不使用CSS表达式\"></a>7.不使用CSS表达式</h2><p>使用一次性的表达式是减少CSS表达式的执行次数的一个方法，当表达式第一次执行时，CSS表达式会被一个确定的值代替。如果在页面生命周期中，样式属性必须动态的设定，使用事件处理替代CSS表达式是一个可选的方法。如果必须使用CSS表达式，要记得它们会执行上千次并影响页面的性能。</p>\n<h2 id=\"8-使用外部的JavaScript和CSS\"><a href=\"#8-使用外部的JavaScript和CSS\" class=\"headerlink\" title=\"8.使用外部的JavaScript和CSS\"></a>8.使用外部的JavaScript和CSS</h2><p>在实际应用中使用外部的文件往往产生更快的页面，因为浏览器会缓存JavaScript和CSS文件。而内联在页面里的JavaScript和CSS会在每次请求页面时下载。这会减少所需的HTTP请求数，但增大HTML文档的体积。而另一方面，如果放在外部文件里的JavaScript和CSS被浏览器缓存，则既不用增加HTTP请求的数量，HTML文档的体积也会减少。</p>\n<h2 id=\"9-减少DNS查询\"><a href=\"#9-减少DNS查询\" class=\"headerlink\" title=\"9.减少DNS查询\"></a>9.减少DNS查询</h2><p>当客户端的DNS缓存被清空（包括浏览器和操作系统的缓存），DNS查询的数量等同于网页中单独的域名的数量。包括页面中的链接，图片，脚本文件，样式表，Flash对象等。减少不同域名的数量则会减少DNS查询的数量。减少不同域名的数量可能减少页面并行的下载数量。减少DNS查询缩短了响应时间，但减少了并行下载数也许会增加响应时间。将组件分布在两到四个域名之间能很好的折中减少DNS查询提高的速度和维持较高水平的并行下载的效果。</p>\n<h2 id=\"10-缩小JavaScript和CSS\"><a href=\"#10-缩小JavaScript和CSS\" class=\"headerlink\" title=\"10.缩小JavaScript和CSS\"></a>10.缩小JavaScript和CSS</h2><p>缩小是指从代码中删除不必要的字母，减少文件体积从而提高加载速度。缩减代码时需要移除所有的注释，以及不需要的空白（空格，新行和tab）。这样处理JavaScript之后，会由于下载文件的体积被减少而提高响应的性能。不仅仅要压缩外部的脚本和样式表，内敛的<br>&lt; script&gt;和&lt; style&gt;部分也可以而且应当被压缩。</p>\n<h2 id=\"11-避免重定向\"><a href=\"#11-避免重定向\" class=\"headerlink\" title=\"11.避免重定向\"></a>11.避免重定向</h2><p>重定向降低了用户体验。在用户和HTML文档之间插入的重定向延误了页面的呈现和组件下载，因为它们都不可能在获得HTML文档之前开始。</p>\n<h2 id=\"12-移除重复的脚本\"><a href=\"#12-移除重复的脚本\" class=\"headerlink\" title=\"12.移除重复的脚本\"></a>12.移除重复的脚本</h2><p>当脚本被重复包含时，由于增加了不必要的HTTP请求和JavaScript的执行，影响了性能。</p>\n<h2 id=\"13-设定ETags\"><a href=\"#13-设定ETags\" class=\"headerlink\" title=\"13.设定ETags\"></a>13.设定ETags</h2><p>实体标签（ETags）是服务器和浏览器用于确定浏览器中缓存的组件和服务器中的是否对应的一种机制。</p>\n<h2 id=\"14-让Ajax可以缓存\"><a href=\"#14-让Ajax可以缓存\" class=\"headerlink\" title=\"14.让Ajax可以缓存\"></a>14.让Ajax可以缓存</h2><p>Ajax的好处之一是它能给用户提供瞬间的响应，因为它从服务端异步请求数据。但Ajax不能保证用户在等候那些异步的JavaScript和XML响应返回时什么都不做。在应用程序中，用户是否继续等待取决于Ajax怎样应用。为了提高性能，优化Ajax响应很重要。提高Ajax性能最重要的方式是使响应缓存。</p>\n<h2 id=\"15-更早地刷新缓冲区\"><a href=\"#15-更早地刷新缓冲区\" class=\"headerlink\" title=\"15.更早地刷新缓冲区\"></a>15.更早地刷新缓冲区</h2><p>当用户请求一个页面，服务端会花费200至500毫秒的时间组合HTML页面。在这期间，浏览器会静静等待数据到来。PHP中有flush（）函数，它允许你向浏览器发送部分就绪的HTML响应，这样浏览器可以在服务器处理余下的HTML页面时去获取组件。这样的好处主要在忙碌的后台和轻松的前台间可以看到。</p>\n<h2 id=\"16-在Ajax请求中使用GET方法\"><a href=\"#16-在Ajax请求中使用GET方法\" class=\"headerlink\" title=\"16.在Ajax请求中使用GET方法\"></a>16.在Ajax请求中使用GET方法</h2><p>POST方法在浏览器中分两步执行：先发送头部，然后发送数据。所以最好使用只发送一个TCP包（除非你有很多的cookie）的GET方法。IE中URL的最大长度是2000，所以如果你发送超过2000的数据就不能使用GET方法。</p>\n<h2 id=\"17-后加载组件\"><a href=\"#17-后加载组件\" class=\"headerlink\" title=\"17.后加载组件\"></a>17.后加载组件</h2><p> 有执行拖放、下拉和动画的JavaScript代码和菜单，它们可以稍后加载，因为用户在初始呈现之后才会在页面上拖动元素。其他的可以被后加载的地方包括隐藏的内容（当用户做某项操作才会展现的内容）和被折叠的图片。</p>\n<h2 id=\"18-利用浏览器的空闲时间来加载之后需要的组件\"><a href=\"#18-利用浏览器的空闲时间来加载之后需要的组件\" class=\"headerlink\" title=\"18.利用浏览器的空闲时间来加载之后需要的组件\"></a>18.利用浏览器的空闲时间来加载之后需要的组件</h2><p>利用浏览器的空闲时间来加载之后需要的组件（比如图片，样式表和脚本），当用户浏览下一个页面的时候，大部分组件都已经在缓存里了而页面会加载的更快。</p>\n<h2 id=\"19-减少DOM-元素数量\"><a href=\"#19-减少DOM-元素数量\" class=\"headerlink\" title=\"19.减少DOM 元素数量\"></a>19.减少DOM 元素数量</h2><p>复杂的页面意味着更多的字节需要被下载而且也意味着在JavaScript中遍历DOM更慢。比如你在页面中添加一个事件，让它在500或者5000个DOM元素中循环，它们的效率是不同的。</p>\n<h2 id=\"20-减少cookie的大小\"><a href=\"#20-减少cookie的大小\" class=\"headerlink\" title=\"20.减少cookie的大小\"></a>20.减少cookie的大小</h2><p>尽量减少cookie的体积对减少用户获得响应的时间十分重要。</p>\n<h2 id=\"21-减少dom的读取\"><a href=\"#21-减少dom的读取\" class=\"headerlink\" title=\"21.减少dom的读取\"></a>21.减少dom的读取</h2><p>利用Javascript读取DOM元素很慢，所以为了获得响应更快的页面，应该减少dom的读取，同时避免利用JavaScript定位布局。</p>\n<h2 id=\"22-不要再HTML中缩放图片\"><a href=\"#22-不要再HTML中缩放图片\" class=\"headerlink\" title=\"22.不要再HTML中缩放图片\"></a>22.不要再HTML中缩放图片</h2><p>不要使用大小超过需要的图片，即使你能够在HTML中设置它的属性。</p>\n<h2 id=\"23-使用小的可缓存的favion-ico\"><a href=\"#23-使用小的可缓存的favion-ico\" class=\"headerlink\" title=\"23.使用小的可缓存的favion.ico\"></a>23.使用小的可缓存的favion.ico</h2><p>favicon.icon是放在服务器根目录的一个图片，而且由于它是在同一服务器下的，Cookie也会随着每次请求一并发送。这张图片同样干扰下载队列，比如在IE中，当你在onload事件中请求额外的组件时，favicon会在这些额外组件之前下载。所以为了减少favicon.ico的不利影响，应当使用小图片，小于1k最好，并设置你认为合适的过期时间。</p>\n"},{"title":"如何解决跨域问题","_content":"## 什么是跨域\n跨域，指的是浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是浏览器对JavaScript施加的安全限制。   \n## 同源策略\n所谓同源是指，域名，协议，端口均相同。例如：  \nhttp://www.123.com/index.html 调用 http://www.123.com/server.PHP （**非跨域**）\n\nhttp://www.123.com/index.html 调用 http://www.456.com/server.php （**主域名不同:123/456，跨域**）\n\nhttp://abc.123.com/index.html 调用 http://def.123.com/server.php （**子域名不同:abc/def，跨域**）\n\nhttp://www.123.com:8080/index.html 调用 http://www.123.com:8081/server.php （**端口不同:8080/8081，跨域**）\n\nhttp://www.123.com/index.html 调用 https://www.123.com/server.php （**协议不同:http/https，跨域**）\n\n**localhost和127.0.0.1虽然都指向本机，但也属于跨域。**  \n用一张表可以更明显地表示：  \n![](http://onep1caa3.bkt.clouddn.com/2017.05.24.png)  \n需要特别注意的是：\n  \n* 如果是协议和端口造成的跨域问题“前台”是无能为力的；\n* 在跨域问题上，域仅仅是通过“URL的首部”来识别而不会去尝试判断相同的ip地址对应着两个域或两个域是否在同一个ip上。（“URL的首部”指window.location.protocol +window.location.host，也可以理解为“Domains, protocols and ports must match”）  \n\n## 前端如何解决跨域问题\n### 1.document.domain + iframe      (只有在主域相同的时候才能使用该方法)\n#### （1）在www.a.com/a.html中：\n    document.domain = 'a.com';\n    var ifr = document.createElement('iframe');\n    ifr.src = 'http://www.script.a.com/b.html';\n    ifr.display = none;\n    document.body.appendChild(ifr);\n    ifr.onload = function(){\n    var doc = ifr.contentDocument || ifr.contentWindow.document;\n    //在这里操作doc，也就是b.html\n    ifr.onload = null;\n    };  \n#### （2）在www.script.a.com/b.html中：\n    document.domain = 'a.com';  \n### 2.动态创建script\n    function loadScript(url, func) {\n      var head = document.head || document.getElementByTagName('head')[0];\n      var script = document.createElement('script');\n      script.src = url;\n    \n      script.onload = script.onreadystatechange = function(){\n    if(!this.readyState || this.readyState=='loaded' || this.readyState=='complete'){\n      func();\n      script.onload = script.onreadystatechange = null;\n    }\n      };\n    \n      head.insertBefore(script, 0);\n    }\n    window.baidu = {\n      sug: function(data){\n    console.log(data);\n      }\n    }\n    loadScript('http://suggestion.baidu.com/su?wd=w',function(){console.log('loaded')});\n    //我们请求的内容在哪里？\n    //我们可以在chorme调试面板的source中看到script引入的内容  \n### 3. location.hash + iframe \n原理是利用location.hash来进行传值。\n\n假设域名a.com下的文件cs1.html要和cnblogs.com域名下的cs2.html传递信息。  \n\n1) cs1.html首先创建自动创建一个隐藏的iframe，iframe的src指向cnblogs.com域名下的cs2.html页面  \n\n2) cs2.html响应请求后再将通过修改cs1.html的hash值来传递数据  \n\n3) 同时在cs1.html上加一个定时器，隔一段时间来判断location.hash的值有没有变化，一旦有变化则获取获取hash值  \n\n注：由于两个页面不在同一个域下IE、Chrome不允许修改parent.location.hash的值，所以要借助于a.com域名下的一个代理iframe  \n\n  先是a.com下的文件cs1.html文件：  \n  \n    function startRequest(){\n    var ifr = document.createElement('iframe');\n    ifr.style.display = 'none';\n    ifr.src = 'http://www.cnblogs.com/lab/cscript/cs2.html#paramdo';\n    document.body.appendChild(ifr);\n    }\n    \n    function checkHash() {\n    try {\n    var data = location.hash ? location.hash.substring(1) : '';\n    if (console.log) {\n    console.log('Now the data is '+data);\n    }\n    } catch(e) {};\n    }\n    setInterval(checkHash, 2000);  \n另一个域名下的 cs2.html：  \n  \n    //模拟一个简单的参数处理操作\n    switch(location.hash){\n    case '#paramdo':\n    callBack();\n    break;\n    case '#paramset':\n    //do something……\n    break;\n    }\n    \n    function callBack(){\n    try {\n    parent.location.hash = 'somedata';\n    } catch (e) {\n    // ie、chrome的安全机制无法修改parent.location.hash，\n    // 所以要利用一个中间的cnblogs域下的代理iframe\n    var ifrproxy = document.createElement('iframe');\n    ifrproxy.style.display = 'none';\n    ifrproxy.src = 'http://a.com/test/cscript/cs3.html#somedata';// 注意该文件在\"a.com\"域下\n    document.body.appendChild(ifrproxy);\n    }\n    }  \na.com下的域名cs3.html：  \n     \n    //因为parent.parent和自身属于同一个域，所以可以改变其location.hash的值\n    parent.parent.location.hash = self.location.hash.substring(1);  \n### 4.window.name + iframe  \nwindow.name 的美妙之处：name 值在不同的页面（甚至不同域名）加载后依旧存在，并且可以支持非常长的 name 值（2MB）。需要以下步骤：\n  \n* 1）创建a.com/cs1.html\n* 2）创建a.com/proxy.html，并加入如下代码   \n\n\n\n>       <script>\n>       function proxy(url, func){\n>     var isFirst = true,\n>     ifr = document.createElement('iframe'),\n>     loadFunc = function(){\n>       if(isFirst){\n>     ifr.contentWindow.location = 'http://a.com/cs1.html';\n>     isFirst = false;\n>       }else{\n>     func(ifr.contentWindow.name);\n>     ifr.contentWindow.close();\n>     document.body.removeChild(ifr);\n>     ifr.src = '';\n>     ifr = null;\n>       }\n>     };\n>     \n>     ifr.src = url;\n>     ifr.style.display = 'none';\n>     if(ifr.attachEvent) ifr.attachEvent('onload', loadFunc);\n>     else ifr.onload = loadFunc;\n>     \n>     document.body.appendChild(iframe);\n>       }\n>     </script>\n>     </head>\n>     <body>\n>       <script>\n>     proxy('http://www.baidu.com/', function(data){\n>       console.log(data);\n>     });\n>       </script>\n>     </body>    \n\n\n* 3）在b.com/cs1.html中包含:\n\n>     <script>\n>     window.name = '要传送的内容';\n>     </script> \n\n### 5.postMessage（HTML5中的XMLHttpRequest Level 2中的API）  \n1) a.com/index.html中的代码：  \n  \n    <iframe id=\"ifr\" src=\"b.com/index.html\"></iframe>\n    <script type=\"text/javascript\">\n    window.onload = function() {\n    var ifr = document.getElementById('ifr');\n    var targetOrigin = 'http://b.com';  // 若写成'http://b.com/c/proxy.html'效果一样\n    // 若写成'http://c.com'就不会执行postMessage了\n    ifr.contentWindow.postMessage('I was there!', targetOrigin);\n    };\n    </script>  \n\n2)b.com/index.html中的代码：  \n\n    <script type=\"text/javascript\">\n    window.addEventListener('message', function(event){\n    // 通过origin属性判断消息来源地址\n    if (event.origin == 'http://a.com') {\n    alert(event.data);// 弹出\"I was there!\"\n    alert(event.source);  // 对a.com、index.html中window对象的引用\n      // 但由于同源策略，这里event.source不可以访问window对象\n    }\n    }, false);\n    </script>  \n### 6.JSONP  \nJSONP包含两部分：回调函数和数据。\n\n回调函数是当响应到来时要放在当前页面被调用的函数。\n\n数据就是传入回调函数中的json数据，也就是回调函数的参数了。 \n\n  \n    function handleResponse(response){\n    console.log('The responsed data is: '+response.data);\n    }\n    var script = document.createElement('script');\n    script.src = 'http://www.baidu.com/json/?callback=handleResponse';\n    document.body.insertBefore(script, document.body.firstChild);\n    /*handleResonse({\"data\": \"zhe\"})*/\n    //原理如下：\n    //当我们通过script标签请求时\n    //后台就会根据相应的参数(json,handleResponse)\n    //来生成相应的json数据(handleResponse({\"data\": \"zhe\"}))\n    //最后这个返回的json数据(代码)就会被放在当前js文件中被执行\n    //至此跨域通信完成  \n### 7.web sockets  \nweb sockets是一种浏览器的API，它的目标是在一个单独的持久连接上提供全双工、双向通信。(同源策略对web sockets不适用)\n\nweb sockets原理：在JS创建了web socket之后，会有一个HTTP请求发送到浏览器以发起连接。取得服务器响应后，建立的连接会使用HTTP升级从HTTP协议交换为web sockt协议。  \n只有在支持web socket协议的服务器上才能正常工作。   \n \n    var socket = new WebSockt('ws://www.baidu.com');//http->ws; https->wss\n    socket.send('hello WebSockt');\n    socket.onmessage = function(event){\n    var data = event.data;\n    }","source":"_posts/2017.05.2huayu.md","raw":"---\ntitle: 如何解决跨域问题\ntags: [http]\ncategories: 知识 \n---\n## 什么是跨域\n跨域，指的是浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是浏览器对JavaScript施加的安全限制。   \n## 同源策略\n所谓同源是指，域名，协议，端口均相同。例如：  \nhttp://www.123.com/index.html 调用 http://www.123.com/server.PHP （**非跨域**）\n\nhttp://www.123.com/index.html 调用 http://www.456.com/server.php （**主域名不同:123/456，跨域**）\n\nhttp://abc.123.com/index.html 调用 http://def.123.com/server.php （**子域名不同:abc/def，跨域**）\n\nhttp://www.123.com:8080/index.html 调用 http://www.123.com:8081/server.php （**端口不同:8080/8081，跨域**）\n\nhttp://www.123.com/index.html 调用 https://www.123.com/server.php （**协议不同:http/https，跨域**）\n\n**localhost和127.0.0.1虽然都指向本机，但也属于跨域。**  \n用一张表可以更明显地表示：  \n![](http://onep1caa3.bkt.clouddn.com/2017.05.24.png)  \n需要特别注意的是：\n  \n* 如果是协议和端口造成的跨域问题“前台”是无能为力的；\n* 在跨域问题上，域仅仅是通过“URL的首部”来识别而不会去尝试判断相同的ip地址对应着两个域或两个域是否在同一个ip上。（“URL的首部”指window.location.protocol +window.location.host，也可以理解为“Domains, protocols and ports must match”）  \n\n## 前端如何解决跨域问题\n### 1.document.domain + iframe      (只有在主域相同的时候才能使用该方法)\n#### （1）在www.a.com/a.html中：\n    document.domain = 'a.com';\n    var ifr = document.createElement('iframe');\n    ifr.src = 'http://www.script.a.com/b.html';\n    ifr.display = none;\n    document.body.appendChild(ifr);\n    ifr.onload = function(){\n    var doc = ifr.contentDocument || ifr.contentWindow.document;\n    //在这里操作doc，也就是b.html\n    ifr.onload = null;\n    };  \n#### （2）在www.script.a.com/b.html中：\n    document.domain = 'a.com';  \n### 2.动态创建script\n    function loadScript(url, func) {\n      var head = document.head || document.getElementByTagName('head')[0];\n      var script = document.createElement('script');\n      script.src = url;\n    \n      script.onload = script.onreadystatechange = function(){\n    if(!this.readyState || this.readyState=='loaded' || this.readyState=='complete'){\n      func();\n      script.onload = script.onreadystatechange = null;\n    }\n      };\n    \n      head.insertBefore(script, 0);\n    }\n    window.baidu = {\n      sug: function(data){\n    console.log(data);\n      }\n    }\n    loadScript('http://suggestion.baidu.com/su?wd=w',function(){console.log('loaded')});\n    //我们请求的内容在哪里？\n    //我们可以在chorme调试面板的source中看到script引入的内容  \n### 3. location.hash + iframe \n原理是利用location.hash来进行传值。\n\n假设域名a.com下的文件cs1.html要和cnblogs.com域名下的cs2.html传递信息。  \n\n1) cs1.html首先创建自动创建一个隐藏的iframe，iframe的src指向cnblogs.com域名下的cs2.html页面  \n\n2) cs2.html响应请求后再将通过修改cs1.html的hash值来传递数据  \n\n3) 同时在cs1.html上加一个定时器，隔一段时间来判断location.hash的值有没有变化，一旦有变化则获取获取hash值  \n\n注：由于两个页面不在同一个域下IE、Chrome不允许修改parent.location.hash的值，所以要借助于a.com域名下的一个代理iframe  \n\n  先是a.com下的文件cs1.html文件：  \n  \n    function startRequest(){\n    var ifr = document.createElement('iframe');\n    ifr.style.display = 'none';\n    ifr.src = 'http://www.cnblogs.com/lab/cscript/cs2.html#paramdo';\n    document.body.appendChild(ifr);\n    }\n    \n    function checkHash() {\n    try {\n    var data = location.hash ? location.hash.substring(1) : '';\n    if (console.log) {\n    console.log('Now the data is '+data);\n    }\n    } catch(e) {};\n    }\n    setInterval(checkHash, 2000);  \n另一个域名下的 cs2.html：  \n  \n    //模拟一个简单的参数处理操作\n    switch(location.hash){\n    case '#paramdo':\n    callBack();\n    break;\n    case '#paramset':\n    //do something……\n    break;\n    }\n    \n    function callBack(){\n    try {\n    parent.location.hash = 'somedata';\n    } catch (e) {\n    // ie、chrome的安全机制无法修改parent.location.hash，\n    // 所以要利用一个中间的cnblogs域下的代理iframe\n    var ifrproxy = document.createElement('iframe');\n    ifrproxy.style.display = 'none';\n    ifrproxy.src = 'http://a.com/test/cscript/cs3.html#somedata';// 注意该文件在\"a.com\"域下\n    document.body.appendChild(ifrproxy);\n    }\n    }  \na.com下的域名cs3.html：  \n     \n    //因为parent.parent和自身属于同一个域，所以可以改变其location.hash的值\n    parent.parent.location.hash = self.location.hash.substring(1);  \n### 4.window.name + iframe  \nwindow.name 的美妙之处：name 值在不同的页面（甚至不同域名）加载后依旧存在，并且可以支持非常长的 name 值（2MB）。需要以下步骤：\n  \n* 1）创建a.com/cs1.html\n* 2）创建a.com/proxy.html，并加入如下代码   \n\n\n\n>       <script>\n>       function proxy(url, func){\n>     var isFirst = true,\n>     ifr = document.createElement('iframe'),\n>     loadFunc = function(){\n>       if(isFirst){\n>     ifr.contentWindow.location = 'http://a.com/cs1.html';\n>     isFirst = false;\n>       }else{\n>     func(ifr.contentWindow.name);\n>     ifr.contentWindow.close();\n>     document.body.removeChild(ifr);\n>     ifr.src = '';\n>     ifr = null;\n>       }\n>     };\n>     \n>     ifr.src = url;\n>     ifr.style.display = 'none';\n>     if(ifr.attachEvent) ifr.attachEvent('onload', loadFunc);\n>     else ifr.onload = loadFunc;\n>     \n>     document.body.appendChild(iframe);\n>       }\n>     </script>\n>     </head>\n>     <body>\n>       <script>\n>     proxy('http://www.baidu.com/', function(data){\n>       console.log(data);\n>     });\n>       </script>\n>     </body>    \n\n\n* 3）在b.com/cs1.html中包含:\n\n>     <script>\n>     window.name = '要传送的内容';\n>     </script> \n\n### 5.postMessage（HTML5中的XMLHttpRequest Level 2中的API）  \n1) a.com/index.html中的代码：  \n  \n    <iframe id=\"ifr\" src=\"b.com/index.html\"></iframe>\n    <script type=\"text/javascript\">\n    window.onload = function() {\n    var ifr = document.getElementById('ifr');\n    var targetOrigin = 'http://b.com';  // 若写成'http://b.com/c/proxy.html'效果一样\n    // 若写成'http://c.com'就不会执行postMessage了\n    ifr.contentWindow.postMessage('I was there!', targetOrigin);\n    };\n    </script>  \n\n2)b.com/index.html中的代码：  \n\n    <script type=\"text/javascript\">\n    window.addEventListener('message', function(event){\n    // 通过origin属性判断消息来源地址\n    if (event.origin == 'http://a.com') {\n    alert(event.data);// 弹出\"I was there!\"\n    alert(event.source);  // 对a.com、index.html中window对象的引用\n      // 但由于同源策略，这里event.source不可以访问window对象\n    }\n    }, false);\n    </script>  \n### 6.JSONP  \nJSONP包含两部分：回调函数和数据。\n\n回调函数是当响应到来时要放在当前页面被调用的函数。\n\n数据就是传入回调函数中的json数据，也就是回调函数的参数了。 \n\n  \n    function handleResponse(response){\n    console.log('The responsed data is: '+response.data);\n    }\n    var script = document.createElement('script');\n    script.src = 'http://www.baidu.com/json/?callback=handleResponse';\n    document.body.insertBefore(script, document.body.firstChild);\n    /*handleResonse({\"data\": \"zhe\"})*/\n    //原理如下：\n    //当我们通过script标签请求时\n    //后台就会根据相应的参数(json,handleResponse)\n    //来生成相应的json数据(handleResponse({\"data\": \"zhe\"}))\n    //最后这个返回的json数据(代码)就会被放在当前js文件中被执行\n    //至此跨域通信完成  \n### 7.web sockets  \nweb sockets是一种浏览器的API，它的目标是在一个单独的持久连接上提供全双工、双向通信。(同源策略对web sockets不适用)\n\nweb sockets原理：在JS创建了web socket之后，会有一个HTTP请求发送到浏览器以发起连接。取得服务器响应后，建立的连接会使用HTTP升级从HTTP协议交换为web sockt协议。  \n只有在支持web socket协议的服务器上才能正常工作。   \n \n    var socket = new WebSockt('ws://www.baidu.com');//http->ws; https->wss\n    socket.send('hello WebSockt');\n    socket.onmessage = function(event){\n    var data = event.data;\n    }","slug":"2017.05.2huayu","published":1,"date":"2017-05-24T10:44:14.000Z","updated":"2017-05-24T10:44:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziipx000frh9z4zpqbqjm","content":"<h2 id=\"什么是跨域\"><a href=\"#什么是跨域\" class=\"headerlink\" title=\"什么是跨域\"></a>什么是跨域</h2><p>跨域，指的是浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是浏览器对JavaScript施加的安全限制。   </p>\n<h2 id=\"同源策略\"><a href=\"#同源策略\" class=\"headerlink\" title=\"同源策略\"></a>同源策略</h2><p>所谓同源是指，域名，协议，端口均相同。例如：<br><a href=\"http://www.123.com/index.html\" target=\"_blank\" rel=\"noopener\">http://www.123.com/index.html</a> 调用 <a href=\"http://www.123.com/server.PHP\" target=\"_blank\" rel=\"noopener\">http://www.123.com/server.PHP</a> （<strong>非跨域</strong>）</p>\n<p><a href=\"http://www.123.com/index.html\" target=\"_blank\" rel=\"noopener\">http://www.123.com/index.html</a> 调用 <a href=\"http://www.456.com/server.php\" target=\"_blank\" rel=\"noopener\">http://www.456.com/server.php</a> （<strong>主域名不同:123/456，跨域</strong>）</p>\n<p><a href=\"http://abc.123.com/index.html\" target=\"_blank\" rel=\"noopener\">http://abc.123.com/index.html</a> 调用 <a href=\"http://def.123.com/server.php\" target=\"_blank\" rel=\"noopener\">http://def.123.com/server.php</a> （<strong>子域名不同:abc/def，跨域</strong>）</p>\n<p><a href=\"http://www.123.com:8080/index.html\" target=\"_blank\" rel=\"noopener\">http://www.123.com:8080/index.html</a> 调用 <a href=\"http://www.123.com:8081/server.php\" target=\"_blank\" rel=\"noopener\">http://www.123.com:8081/server.php</a> （<strong>端口不同:8080/8081，跨域</strong>）</p>\n<p><a href=\"http://www.123.com/index.html\" target=\"_blank\" rel=\"noopener\">http://www.123.com/index.html</a> 调用 <a href=\"https://www.123.com/server.php\" target=\"_blank\" rel=\"noopener\">https://www.123.com/server.php</a> （<strong>协议不同:http/https，跨域</strong>）</p>\n<p><strong>localhost和127.0.0.1虽然都指向本机，但也属于跨域。</strong><br>用一张表可以更明显地表示：<br><img src=\"http://onep1caa3.bkt.clouddn.com/2017.05.24.png\" alt=\"\"><br>需要特别注意的是：</p>\n<ul>\n<li>如果是协议和端口造成的跨域问题“前台”是无能为力的；</li>\n<li>在跨域问题上，域仅仅是通过“URL的首部”来识别而不会去尝试判断相同的ip地址对应着两个域或两个域是否在同一个ip上。（“URL的首部”指window.location.protocol +window.location.host，也可以理解为“Domains, protocols and ports must match”）  </li>\n</ul>\n<h2 id=\"前端如何解决跨域问题\"><a href=\"#前端如何解决跨域问题\" class=\"headerlink\" title=\"前端如何解决跨域问题\"></a>前端如何解决跨域问题</h2><h3 id=\"1-document-domain-iframe-只有在主域相同的时候才能使用该方法\"><a href=\"#1-document-domain-iframe-只有在主域相同的时候才能使用该方法\" class=\"headerlink\" title=\"1.document.domain + iframe      (只有在主域相同的时候才能使用该方法)\"></a>1.document.domain + iframe      (只有在主域相同的时候才能使用该方法)</h3><h4 id=\"（1）在www-a-com-a-html中：\"><a href=\"#（1）在www-a-com-a-html中：\" class=\"headerlink\" title=\"（1）在www.a.com/a.html中：\"></a>（1）在www.a.com/a.html中：</h4><pre><code>document.domain = &apos;a.com&apos;;\nvar ifr = document.createElement(&apos;iframe&apos;);\nifr.src = &apos;http://www.script.a.com/b.html&apos;;\nifr.display = none;\ndocument.body.appendChild(ifr);\nifr.onload = function(){\nvar doc = ifr.contentDocument || ifr.contentWindow.document;\n//在这里操作doc，也就是b.html\nifr.onload = null;\n};  \n</code></pre><h4 id=\"（2）在www-script-a-com-b-html中：\"><a href=\"#（2）在www-script-a-com-b-html中：\" class=\"headerlink\" title=\"（2）在www.script.a.com/b.html中：\"></a>（2）在www.script.a.com/b.html中：</h4><pre><code>document.domain = &apos;a.com&apos;;  \n</code></pre><h3 id=\"2-动态创建script\"><a href=\"#2-动态创建script\" class=\"headerlink\" title=\"2.动态创建script\"></a>2.动态创建script</h3><pre><code>function loadScript(url, func) {\n  var head = document.head || document.getElementByTagName(&apos;head&apos;)[0];\n  var script = document.createElement(&apos;script&apos;);\n  script.src = url;\n\n  script.onload = script.onreadystatechange = function(){\nif(!this.readyState || this.readyState==&apos;loaded&apos; || this.readyState==&apos;complete&apos;){\n  func();\n  script.onload = script.onreadystatechange = null;\n}\n  };\n\n  head.insertBefore(script, 0);\n}\nwindow.baidu = {\n  sug: function(data){\nconsole.log(data);\n  }\n}\nloadScript(&apos;http://suggestion.baidu.com/su?wd=w&apos;,function(){console.log(&apos;loaded&apos;)});\n//我们请求的内容在哪里？\n//我们可以在chorme调试面板的source中看到script引入的内容  \n</code></pre><h3 id=\"3-location-hash-iframe\"><a href=\"#3-location-hash-iframe\" class=\"headerlink\" title=\"3. location.hash + iframe\"></a>3. location.hash + iframe</h3><p>原理是利用location.hash来进行传值。</p>\n<p>假设域名a.com下的文件cs1.html要和cnblogs.com域名下的cs2.html传递信息。  </p>\n<p>1) cs1.html首先创建自动创建一个隐藏的iframe，iframe的src指向cnblogs.com域名下的cs2.html页面  </p>\n<p>2) cs2.html响应请求后再将通过修改cs1.html的hash值来传递数据  </p>\n<p>3) 同时在cs1.html上加一个定时器，隔一段时间来判断location.hash的值有没有变化，一旦有变化则获取获取hash值  </p>\n<p>注：由于两个页面不在同一个域下IE、Chrome不允许修改parent.location.hash的值，所以要借助于a.com域名下的一个代理iframe  </p>\n<p>  先是a.com下的文件cs1.html文件：  </p>\n<pre><code>function startRequest(){\nvar ifr = document.createElement(&apos;iframe&apos;);\nifr.style.display = &apos;none&apos;;\nifr.src = &apos;http://www.cnblogs.com/lab/cscript/cs2.html#paramdo&apos;;\ndocument.body.appendChild(ifr);\n}\n\nfunction checkHash() {\ntry {\nvar data = location.hash ? location.hash.substring(1) : &apos;&apos;;\nif (console.log) {\nconsole.log(&apos;Now the data is &apos;+data);\n}\n} catch(e) {};\n}\nsetInterval(checkHash, 2000);  \n</code></pre><p>另一个域名下的 cs2.html：  </p>\n<pre><code>//模拟一个简单的参数处理操作\nswitch(location.hash){\ncase &apos;#paramdo&apos;:\ncallBack();\nbreak;\ncase &apos;#paramset&apos;:\n//do something……\nbreak;\n}\n\nfunction callBack(){\ntry {\nparent.location.hash = &apos;somedata&apos;;\n} catch (e) {\n// ie、chrome的安全机制无法修改parent.location.hash，\n// 所以要利用一个中间的cnblogs域下的代理iframe\nvar ifrproxy = document.createElement(&apos;iframe&apos;);\nifrproxy.style.display = &apos;none&apos;;\nifrproxy.src = &apos;http://a.com/test/cscript/cs3.html#somedata&apos;;// 注意该文件在&quot;a.com&quot;域下\ndocument.body.appendChild(ifrproxy);\n}\n}  \n</code></pre><p>a.com下的域名cs3.html：  </p>\n<pre><code>//因为parent.parent和自身属于同一个域，所以可以改变其location.hash的值\nparent.parent.location.hash = self.location.hash.substring(1);  \n</code></pre><h3 id=\"4-window-name-iframe\"><a href=\"#4-window-name-iframe\" class=\"headerlink\" title=\"4.window.name + iframe\"></a>4.window.name + iframe</h3><p>window.name 的美妙之处：name 值在不同的页面（甚至不同域名）加载后依旧存在，并且可以支持非常长的 name 值（2MB）。需要以下步骤：</p>\n<ul>\n<li>1）创建a.com/cs1.html</li>\n<li>2）创建a.com/proxy.html，并加入如下代码   </li>\n</ul>\n<blockquote>\n<pre><code>  &lt;script&gt;\n  function proxy(url, func){\nvar isFirst = true,\nifr = document.createElement(&apos;iframe&apos;),\nloadFunc = function(){\n  if(isFirst){\nifr.contentWindow.location = &apos;http://a.com/cs1.html&apos;;\nisFirst = false;\n  }else{\nfunc(ifr.contentWindow.name);\nifr.contentWindow.close();\ndocument.body.removeChild(ifr);\nifr.src = &apos;&apos;;\nifr = null;\n  }\n};\n\nifr.src = url;\nifr.style.display = &apos;none&apos;;\nif(ifr.attachEvent) ifr.attachEvent(&apos;onload&apos;, loadFunc);\nelse ifr.onload = loadFunc;\n\ndocument.body.appendChild(iframe);\n  }\n&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;script&gt;\nproxy(&apos;http://www.baidu.com/&apos;, function(data){\n  console.log(data);\n});\n  &lt;/script&gt;\n&lt;/body&gt;    \n</code></pre></blockquote>\n<ul>\n<li>3）在b.com/cs1.html中包含:</li>\n</ul>\n<blockquote>\n<pre><code>&lt;script&gt;\nwindow.name = &apos;要传送的内容&apos;;\n&lt;/script&gt; \n</code></pre></blockquote>\n<h3 id=\"5-postMessage（HTML5中的XMLHttpRequest-Level-2中的API）\"><a href=\"#5-postMessage（HTML5中的XMLHttpRequest-Level-2中的API）\" class=\"headerlink\" title=\"5.postMessage（HTML5中的XMLHttpRequest Level 2中的API）\"></a>5.postMessage（HTML5中的XMLHttpRequest Level 2中的API）</h3><p>1) a.com/index.html中的代码：  </p>\n<pre><code>&lt;iframe id=&quot;ifr&quot; src=&quot;b.com/index.html&quot;&gt;&lt;/iframe&gt;\n&lt;script type=&quot;text/javascript&quot;&gt;\nwindow.onload = function() {\nvar ifr = document.getElementById(&apos;ifr&apos;);\nvar targetOrigin = &apos;http://b.com&apos;;  // 若写成&apos;http://b.com/c/proxy.html&apos;效果一样\n// 若写成&apos;http://c.com&apos;就不会执行postMessage了\nifr.contentWindow.postMessage(&apos;I was there!&apos;, targetOrigin);\n};\n&lt;/script&gt;  \n</code></pre><p>2)b.com/index.html中的代码：  </p>\n<pre><code>&lt;script type=&quot;text/javascript&quot;&gt;\nwindow.addEventListener(&apos;message&apos;, function(event){\n// 通过origin属性判断消息来源地址\nif (event.origin == &apos;http://a.com&apos;) {\nalert(event.data);// 弹出&quot;I was there!&quot;\nalert(event.source);  // 对a.com、index.html中window对象的引用\n  // 但由于同源策略，这里event.source不可以访问window对象\n}\n}, false);\n&lt;/script&gt;  \n</code></pre><h3 id=\"6-JSONP\"><a href=\"#6-JSONP\" class=\"headerlink\" title=\"6.JSONP\"></a>6.JSONP</h3><p>JSONP包含两部分：回调函数和数据。</p>\n<p>回调函数是当响应到来时要放在当前页面被调用的函数。</p>\n<p>数据就是传入回调函数中的json数据，也就是回调函数的参数了。 </p>\n<pre><code>function handleResponse(response){\nconsole.log(&apos;The responsed data is: &apos;+response.data);\n}\nvar script = document.createElement(&apos;script&apos;);\nscript.src = &apos;http://www.baidu.com/json/?callback=handleResponse&apos;;\ndocument.body.insertBefore(script, document.body.firstChild);\n/*handleResonse({&quot;data&quot;: &quot;zhe&quot;})*/\n//原理如下：\n//当我们通过script标签请求时\n//后台就会根据相应的参数(json,handleResponse)\n//来生成相应的json数据(handleResponse({&quot;data&quot;: &quot;zhe&quot;}))\n//最后这个返回的json数据(代码)就会被放在当前js文件中被执行\n//至此跨域通信完成  \n</code></pre><h3 id=\"7-web-sockets\"><a href=\"#7-web-sockets\" class=\"headerlink\" title=\"7.web sockets\"></a>7.web sockets</h3><p>web sockets是一种浏览器的API，它的目标是在一个单独的持久连接上提供全双工、双向通信。(同源策略对web sockets不适用)</p>\n<p>web sockets原理：在JS创建了web socket之后，会有一个HTTP请求发送到浏览器以发起连接。取得服务器响应后，建立的连接会使用HTTP升级从HTTP协议交换为web sockt协议。<br>只有在支持web socket协议的服务器上才能正常工作。   </p>\n<pre><code>var socket = new WebSockt(&apos;ws://www.baidu.com&apos;);//http-&gt;ws; https-&gt;wss\nsocket.send(&apos;hello WebSockt&apos;);\nsocket.onmessage = function(event){\nvar data = event.data;\n}\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是跨域\"><a href=\"#什么是跨域\" class=\"headerlink\" title=\"什么是跨域\"></a>什么是跨域</h2><p>跨域，指的是浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是浏览器对JavaScript施加的安全限制。   </p>\n<h2 id=\"同源策略\"><a href=\"#同源策略\" class=\"headerlink\" title=\"同源策略\"></a>同源策略</h2><p>所谓同源是指，域名，协议，端口均相同。例如：<br><a href=\"http://www.123.com/index.html\" target=\"_blank\" rel=\"noopener\">http://www.123.com/index.html</a> 调用 <a href=\"http://www.123.com/server.PHP\" target=\"_blank\" rel=\"noopener\">http://www.123.com/server.PHP</a> （<strong>非跨域</strong>）</p>\n<p><a href=\"http://www.123.com/index.html\" target=\"_blank\" rel=\"noopener\">http://www.123.com/index.html</a> 调用 <a href=\"http://www.456.com/server.php\" target=\"_blank\" rel=\"noopener\">http://www.456.com/server.php</a> （<strong>主域名不同:123/456，跨域</strong>）</p>\n<p><a href=\"http://abc.123.com/index.html\" target=\"_blank\" rel=\"noopener\">http://abc.123.com/index.html</a> 调用 <a href=\"http://def.123.com/server.php\" target=\"_blank\" rel=\"noopener\">http://def.123.com/server.php</a> （<strong>子域名不同:abc/def，跨域</strong>）</p>\n<p><a href=\"http://www.123.com:8080/index.html\" target=\"_blank\" rel=\"noopener\">http://www.123.com:8080/index.html</a> 调用 <a href=\"http://www.123.com:8081/server.php\" target=\"_blank\" rel=\"noopener\">http://www.123.com:8081/server.php</a> （<strong>端口不同:8080/8081，跨域</strong>）</p>\n<p><a href=\"http://www.123.com/index.html\" target=\"_blank\" rel=\"noopener\">http://www.123.com/index.html</a> 调用 <a href=\"https://www.123.com/server.php\" target=\"_blank\" rel=\"noopener\">https://www.123.com/server.php</a> （<strong>协议不同:http/https，跨域</strong>）</p>\n<p><strong>localhost和127.0.0.1虽然都指向本机，但也属于跨域。</strong><br>用一张表可以更明显地表示：<br><img src=\"http://onep1caa3.bkt.clouddn.com/2017.05.24.png\" alt=\"\"><br>需要特别注意的是：</p>\n<ul>\n<li>如果是协议和端口造成的跨域问题“前台”是无能为力的；</li>\n<li>在跨域问题上，域仅仅是通过“URL的首部”来识别而不会去尝试判断相同的ip地址对应着两个域或两个域是否在同一个ip上。（“URL的首部”指window.location.protocol +window.location.host，也可以理解为“Domains, protocols and ports must match”）  </li>\n</ul>\n<h2 id=\"前端如何解决跨域问题\"><a href=\"#前端如何解决跨域问题\" class=\"headerlink\" title=\"前端如何解决跨域问题\"></a>前端如何解决跨域问题</h2><h3 id=\"1-document-domain-iframe-只有在主域相同的时候才能使用该方法\"><a href=\"#1-document-domain-iframe-只有在主域相同的时候才能使用该方法\" class=\"headerlink\" title=\"1.document.domain + iframe      (只有在主域相同的时候才能使用该方法)\"></a>1.document.domain + iframe      (只有在主域相同的时候才能使用该方法)</h3><h4 id=\"（1）在www-a-com-a-html中：\"><a href=\"#（1）在www-a-com-a-html中：\" class=\"headerlink\" title=\"（1）在www.a.com/a.html中：\"></a>（1）在www.a.com/a.html中：</h4><pre><code>document.domain = &apos;a.com&apos;;\nvar ifr = document.createElement(&apos;iframe&apos;);\nifr.src = &apos;http://www.script.a.com/b.html&apos;;\nifr.display = none;\ndocument.body.appendChild(ifr);\nifr.onload = function(){\nvar doc = ifr.contentDocument || ifr.contentWindow.document;\n//在这里操作doc，也就是b.html\nifr.onload = null;\n};  \n</code></pre><h4 id=\"（2）在www-script-a-com-b-html中：\"><a href=\"#（2）在www-script-a-com-b-html中：\" class=\"headerlink\" title=\"（2）在www.script.a.com/b.html中：\"></a>（2）在www.script.a.com/b.html中：</h4><pre><code>document.domain = &apos;a.com&apos;;  \n</code></pre><h3 id=\"2-动态创建script\"><a href=\"#2-动态创建script\" class=\"headerlink\" title=\"2.动态创建script\"></a>2.动态创建script</h3><pre><code>function loadScript(url, func) {\n  var head = document.head || document.getElementByTagName(&apos;head&apos;)[0];\n  var script = document.createElement(&apos;script&apos;);\n  script.src = url;\n\n  script.onload = script.onreadystatechange = function(){\nif(!this.readyState || this.readyState==&apos;loaded&apos; || this.readyState==&apos;complete&apos;){\n  func();\n  script.onload = script.onreadystatechange = null;\n}\n  };\n\n  head.insertBefore(script, 0);\n}\nwindow.baidu = {\n  sug: function(data){\nconsole.log(data);\n  }\n}\nloadScript(&apos;http://suggestion.baidu.com/su?wd=w&apos;,function(){console.log(&apos;loaded&apos;)});\n//我们请求的内容在哪里？\n//我们可以在chorme调试面板的source中看到script引入的内容  \n</code></pre><h3 id=\"3-location-hash-iframe\"><a href=\"#3-location-hash-iframe\" class=\"headerlink\" title=\"3. location.hash + iframe\"></a>3. location.hash + iframe</h3><p>原理是利用location.hash来进行传值。</p>\n<p>假设域名a.com下的文件cs1.html要和cnblogs.com域名下的cs2.html传递信息。  </p>\n<p>1) cs1.html首先创建自动创建一个隐藏的iframe，iframe的src指向cnblogs.com域名下的cs2.html页面  </p>\n<p>2) cs2.html响应请求后再将通过修改cs1.html的hash值来传递数据  </p>\n<p>3) 同时在cs1.html上加一个定时器，隔一段时间来判断location.hash的值有没有变化，一旦有变化则获取获取hash值  </p>\n<p>注：由于两个页面不在同一个域下IE、Chrome不允许修改parent.location.hash的值，所以要借助于a.com域名下的一个代理iframe  </p>\n<p>  先是a.com下的文件cs1.html文件：  </p>\n<pre><code>function startRequest(){\nvar ifr = document.createElement(&apos;iframe&apos;);\nifr.style.display = &apos;none&apos;;\nifr.src = &apos;http://www.cnblogs.com/lab/cscript/cs2.html#paramdo&apos;;\ndocument.body.appendChild(ifr);\n}\n\nfunction checkHash() {\ntry {\nvar data = location.hash ? location.hash.substring(1) : &apos;&apos;;\nif (console.log) {\nconsole.log(&apos;Now the data is &apos;+data);\n}\n} catch(e) {};\n}\nsetInterval(checkHash, 2000);  \n</code></pre><p>另一个域名下的 cs2.html：  </p>\n<pre><code>//模拟一个简单的参数处理操作\nswitch(location.hash){\ncase &apos;#paramdo&apos;:\ncallBack();\nbreak;\ncase &apos;#paramset&apos;:\n//do something……\nbreak;\n}\n\nfunction callBack(){\ntry {\nparent.location.hash = &apos;somedata&apos;;\n} catch (e) {\n// ie、chrome的安全机制无法修改parent.location.hash，\n// 所以要利用一个中间的cnblogs域下的代理iframe\nvar ifrproxy = document.createElement(&apos;iframe&apos;);\nifrproxy.style.display = &apos;none&apos;;\nifrproxy.src = &apos;http://a.com/test/cscript/cs3.html#somedata&apos;;// 注意该文件在&quot;a.com&quot;域下\ndocument.body.appendChild(ifrproxy);\n}\n}  \n</code></pre><p>a.com下的域名cs3.html：  </p>\n<pre><code>//因为parent.parent和自身属于同一个域，所以可以改变其location.hash的值\nparent.parent.location.hash = self.location.hash.substring(1);  \n</code></pre><h3 id=\"4-window-name-iframe\"><a href=\"#4-window-name-iframe\" class=\"headerlink\" title=\"4.window.name + iframe\"></a>4.window.name + iframe</h3><p>window.name 的美妙之处：name 值在不同的页面（甚至不同域名）加载后依旧存在，并且可以支持非常长的 name 值（2MB）。需要以下步骤：</p>\n<ul>\n<li>1）创建a.com/cs1.html</li>\n<li>2）创建a.com/proxy.html，并加入如下代码   </li>\n</ul>\n<blockquote>\n<pre><code>  &lt;script&gt;\n  function proxy(url, func){\nvar isFirst = true,\nifr = document.createElement(&apos;iframe&apos;),\nloadFunc = function(){\n  if(isFirst){\nifr.contentWindow.location = &apos;http://a.com/cs1.html&apos;;\nisFirst = false;\n  }else{\nfunc(ifr.contentWindow.name);\nifr.contentWindow.close();\ndocument.body.removeChild(ifr);\nifr.src = &apos;&apos;;\nifr = null;\n  }\n};\n\nifr.src = url;\nifr.style.display = &apos;none&apos;;\nif(ifr.attachEvent) ifr.attachEvent(&apos;onload&apos;, loadFunc);\nelse ifr.onload = loadFunc;\n\ndocument.body.appendChild(iframe);\n  }\n&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;script&gt;\nproxy(&apos;http://www.baidu.com/&apos;, function(data){\n  console.log(data);\n});\n  &lt;/script&gt;\n&lt;/body&gt;    \n</code></pre></blockquote>\n<ul>\n<li>3）在b.com/cs1.html中包含:</li>\n</ul>\n<blockquote>\n<pre><code>&lt;script&gt;\nwindow.name = &apos;要传送的内容&apos;;\n&lt;/script&gt; \n</code></pre></blockquote>\n<h3 id=\"5-postMessage（HTML5中的XMLHttpRequest-Level-2中的API）\"><a href=\"#5-postMessage（HTML5中的XMLHttpRequest-Level-2中的API）\" class=\"headerlink\" title=\"5.postMessage（HTML5中的XMLHttpRequest Level 2中的API）\"></a>5.postMessage（HTML5中的XMLHttpRequest Level 2中的API）</h3><p>1) a.com/index.html中的代码：  </p>\n<pre><code>&lt;iframe id=&quot;ifr&quot; src=&quot;b.com/index.html&quot;&gt;&lt;/iframe&gt;\n&lt;script type=&quot;text/javascript&quot;&gt;\nwindow.onload = function() {\nvar ifr = document.getElementById(&apos;ifr&apos;);\nvar targetOrigin = &apos;http://b.com&apos;;  // 若写成&apos;http://b.com/c/proxy.html&apos;效果一样\n// 若写成&apos;http://c.com&apos;就不会执行postMessage了\nifr.contentWindow.postMessage(&apos;I was there!&apos;, targetOrigin);\n};\n&lt;/script&gt;  \n</code></pre><p>2)b.com/index.html中的代码：  </p>\n<pre><code>&lt;script type=&quot;text/javascript&quot;&gt;\nwindow.addEventListener(&apos;message&apos;, function(event){\n// 通过origin属性判断消息来源地址\nif (event.origin == &apos;http://a.com&apos;) {\nalert(event.data);// 弹出&quot;I was there!&quot;\nalert(event.source);  // 对a.com、index.html中window对象的引用\n  // 但由于同源策略，这里event.source不可以访问window对象\n}\n}, false);\n&lt;/script&gt;  \n</code></pre><h3 id=\"6-JSONP\"><a href=\"#6-JSONP\" class=\"headerlink\" title=\"6.JSONP\"></a>6.JSONP</h3><p>JSONP包含两部分：回调函数和数据。</p>\n<p>回调函数是当响应到来时要放在当前页面被调用的函数。</p>\n<p>数据就是传入回调函数中的json数据，也就是回调函数的参数了。 </p>\n<pre><code>function handleResponse(response){\nconsole.log(&apos;The responsed data is: &apos;+response.data);\n}\nvar script = document.createElement(&apos;script&apos;);\nscript.src = &apos;http://www.baidu.com/json/?callback=handleResponse&apos;;\ndocument.body.insertBefore(script, document.body.firstChild);\n/*handleResonse({&quot;data&quot;: &quot;zhe&quot;})*/\n//原理如下：\n//当我们通过script标签请求时\n//后台就会根据相应的参数(json,handleResponse)\n//来生成相应的json数据(handleResponse({&quot;data&quot;: &quot;zhe&quot;}))\n//最后这个返回的json数据(代码)就会被放在当前js文件中被执行\n//至此跨域通信完成  \n</code></pre><h3 id=\"7-web-sockets\"><a href=\"#7-web-sockets\" class=\"headerlink\" title=\"7.web sockets\"></a>7.web sockets</h3><p>web sockets是一种浏览器的API，它的目标是在一个单独的持久连接上提供全双工、双向通信。(同源策略对web sockets不适用)</p>\n<p>web sockets原理：在JS创建了web socket之后，会有一个HTTP请求发送到浏览器以发起连接。取得服务器响应后，建立的连接会使用HTTP升级从HTTP协议交换为web sockt协议。<br>只有在支持web socket协议的服务器上才能正常工作。   </p>\n<pre><code>var socket = new WebSockt(&apos;ws://www.baidu.com&apos;);//http-&gt;ws; https-&gt;wss\nsocket.send(&apos;hello WebSockt&apos;);\nsocket.onmessage = function(event){\nvar data = event.data;\n}\n</code></pre>"},{"title":"部署SSR","_content":"\n## 一.注册主机\n\n这里我选用的是digital ocean的主机,选择一个月五刀的服务器就可以,注册的时候可以使用我的[邀请链接](https://m.do.co/c/e784ca31deb3) .\n\n\n## 二.创建主机  \n选择 centOS 6.9 ,方便后续更换内核,如果在校园网中使用,记得勾选IPV6.\n\n添加SSH可以使用免密登录\n\n## 三.安装ssr脚本  \n使用 SSH 连接远程主机\n\n     \n`ssh root@ip`\n\n接着安装 SSR 脚本:\n\n在安装 SSR 之前需要更新 yum 和 wget.\n\n\n     sudo yum update\n     sudo yum install wget  \n     wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.shchmod +x ssr.sh && bash.ssr.sh\n\n## 四.配置 SSR 脚本\n\n混淆等都是可选的.\n\n设备数,单线程限速,端口总限速等根据自己喜好设置.\n\n## 五.设置 speedsServer\n     uname -r #查看当前内核版本\n     CentOS 6支持安装锐速的内核：2.6.32-504.3.3.el6.x86_64\n     rpm -ivh http://xz.wn789.com/CentOSkernel/kernel-firmware-2.6.32-504.3.3.el6.noarch.rpm\n     rpm -ivh http://xz.wn789.com/CentOSkernel/kernel-2.6.32-504.3.3.el6.x86_64.rpm--force\n     rpm |grep kernel\n     reboot\n\n\n","source":"_posts/2018.11.16SSR.md","raw":"---\ntitle: 部署SSR\ntags: [SSR]\ncategories: 知识 \n---\n\n## 一.注册主机\n\n这里我选用的是digital ocean的主机,选择一个月五刀的服务器就可以,注册的时候可以使用我的[邀请链接](https://m.do.co/c/e784ca31deb3) .\n\n\n## 二.创建主机  \n选择 centOS 6.9 ,方便后续更换内核,如果在校园网中使用,记得勾选IPV6.\n\n添加SSH可以使用免密登录\n\n## 三.安装ssr脚本  \n使用 SSH 连接远程主机\n\n     \n`ssh root@ip`\n\n接着安装 SSR 脚本:\n\n在安装 SSR 之前需要更新 yum 和 wget.\n\n\n     sudo yum update\n     sudo yum install wget  \n     wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.shchmod +x ssr.sh && bash.ssr.sh\n\n## 四.配置 SSR 脚本\n\n混淆等都是可选的.\n\n设备数,单线程限速,端口总限速等根据自己喜好设置.\n\n## 五.设置 speedsServer\n     uname -r #查看当前内核版本\n     CentOS 6支持安装锐速的内核：2.6.32-504.3.3.el6.x86_64\n     rpm -ivh http://xz.wn789.com/CentOSkernel/kernel-firmware-2.6.32-504.3.3.el6.noarch.rpm\n     rpm -ivh http://xz.wn789.com/CentOSkernel/kernel-2.6.32-504.3.3.el6.x86_64.rpm--force\n     rpm |grep kernel\n     reboot\n\n\n","slug":"2018.11.16SSR","published":1,"date":"2019-01-09T06:26:28.730Z","updated":"2019-01-12T08:56:16.300Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziipx000grh9za4tf3le6","content":"<h2 id=\"一-注册主机\"><a href=\"#一-注册主机\" class=\"headerlink\" title=\"一.注册主机\"></a>一.注册主机</h2><p>这里我选用的是digital ocean的主机,选择一个月五刀的服务器就可以,注册的时候可以使用我的<a href=\"https://m.do.co/c/e784ca31deb3\" target=\"_blank\" rel=\"noopener\">邀请链接</a> .</p>\n<h2 id=\"二-创建主机\"><a href=\"#二-创建主机\" class=\"headerlink\" title=\"二.创建主机\"></a>二.创建主机</h2><p>选择 centOS 6.9 ,方便后续更换内核,如果在校园网中使用,记得勾选IPV6.</p>\n<p>添加SSH可以使用免密登录</p>\n<h2 id=\"三-安装ssr脚本\"><a href=\"#三-安装ssr脚本\" class=\"headerlink\" title=\"三.安装ssr脚本\"></a>三.安装ssr脚本</h2><p>使用 SSH 连接远程主机</p>\n<p><code>ssh root@ip</code></p>\n<p>接着安装 SSR 脚本:</p>\n<p>在安装 SSR 之前需要更新 yum 和 wget.</p>\n<pre><code>sudo yum update\nsudo yum install wget  \nwget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.shchmod +x ssr.sh &amp;&amp; bash.ssr.sh\n</code></pre><h2 id=\"四-配置-SSR-脚本\"><a href=\"#四-配置-SSR-脚本\" class=\"headerlink\" title=\"四.配置 SSR 脚本\"></a>四.配置 SSR 脚本</h2><p>混淆等都是可选的.</p>\n<p>设备数,单线程限速,端口总限速等根据自己喜好设置.</p>\n<h2 id=\"五-设置-speedsServer\"><a href=\"#五-设置-speedsServer\" class=\"headerlink\" title=\"五.设置 speedsServer\"></a>五.设置 speedsServer</h2><pre><code>uname -r #查看当前内核版本\nCentOS 6支持安装锐速的内核：2.6.32-504.3.3.el6.x86_64\nrpm -ivh http://xz.wn789.com/CentOSkernel/kernel-firmware-2.6.32-504.3.3.el6.noarch.rpm\nrpm -ivh http://xz.wn789.com/CentOSkernel/kernel-2.6.32-504.3.3.el6.x86_64.rpm--force\nrpm |grep kernel\nreboot\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一-注册主机\"><a href=\"#一-注册主机\" class=\"headerlink\" title=\"一.注册主机\"></a>一.注册主机</h2><p>这里我选用的是digital ocean的主机,选择一个月五刀的服务器就可以,注册的时候可以使用我的<a href=\"https://m.do.co/c/e784ca31deb3\" target=\"_blank\" rel=\"noopener\">邀请链接</a> .</p>\n<h2 id=\"二-创建主机\"><a href=\"#二-创建主机\" class=\"headerlink\" title=\"二.创建主机\"></a>二.创建主机</h2><p>选择 centOS 6.9 ,方便后续更换内核,如果在校园网中使用,记得勾选IPV6.</p>\n<p>添加SSH可以使用免密登录</p>\n<h2 id=\"三-安装ssr脚本\"><a href=\"#三-安装ssr脚本\" class=\"headerlink\" title=\"三.安装ssr脚本\"></a>三.安装ssr脚本</h2><p>使用 SSH 连接远程主机</p>\n<p><code>ssh root@ip</code></p>\n<p>接着安装 SSR 脚本:</p>\n<p>在安装 SSR 之前需要更新 yum 和 wget.</p>\n<pre><code>sudo yum update\nsudo yum install wget  \nwget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.shchmod +x ssr.sh &amp;&amp; bash.ssr.sh\n</code></pre><h2 id=\"四-配置-SSR-脚本\"><a href=\"#四-配置-SSR-脚本\" class=\"headerlink\" title=\"四.配置 SSR 脚本\"></a>四.配置 SSR 脚本</h2><p>混淆等都是可选的.</p>\n<p>设备数,单线程限速,端口总限速等根据自己喜好设置.</p>\n<h2 id=\"五-设置-speedsServer\"><a href=\"#五-设置-speedsServer\" class=\"headerlink\" title=\"五.设置 speedsServer\"></a>五.设置 speedsServer</h2><pre><code>uname -r #查看当前内核版本\nCentOS 6支持安装锐速的内核：2.6.32-504.3.3.el6.x86_64\nrpm -ivh http://xz.wn789.com/CentOSkernel/kernel-firmware-2.6.32-504.3.3.el6.noarch.rpm\nrpm -ivh http://xz.wn789.com/CentOSkernel/kernel-2.6.32-504.3.3.el6.x86_64.rpm--force\nrpm |grep kernel\nreboot\n</code></pre>"},{"title":"语义化版本号","_content":"\n## 概述\n\n[Semmantic Versioning](https://semver.org/lang/zh-CN/)是由github起草的具有指导意义的,统一的版本号表示规则:\n\n* 软件的版本通常由三位组成,形如: X.Y.Z(主版本号/次版本号/修订号).\n\n* 版本是严格递增的,例如: 16.2.0 -> 16.3.0 -> 16.3.1;\n* 在发布重要版本时,可以发布alpha,beta,rc等现行版本;\n* alpha 和 rc 等修饰版本的关键字后面可以加上次数和meta信息.\n\n## 版本格式\n\n* 主版本号(major):当你做了不兼容的 API 修改;\n* 次版本号(minor): 当你做了向下兼容的功能性新增,可以理解为 feature 版本;\n* 修订号(Patch):当你做了向下兼容的问题修正,可以理解为bug fix 版本.\n\n## 先行版本\n\n当要发布大版本或者核心的Feature时，但是又不能保证这个版本的功能 100% 正常。这个时候就需要通过发布先行版本。比较常见的先行版本包括：内测版、灰度版本了和RC版本。Semver规范中使用alpha、beta、rc(以前叫做gama)来修饰即将要发布的版本。它们的含义是：\n\n* alpha:内部版本;\n* beta:公测版本:\n* rc:即release candiate,正式版本的候选版本\n\n比如：1.0.0-alpha.0, 1.0.0-alpha.1, 1.0.0-beta.0, 1.0.0-rc.0, 1.0.p-rc.1 等版本。alpha, beta, rc后需要带上次数信息。\n\n## 版本发布准则\n\n* 标准的版本号必须按照XYZ的格式,并且XYZ为飞负的整数,禁止在数字前方补0,版本发布号要严格递增;\n* 某个软件版本发布后,任何修改都必须以新版本发行;\n* 1.0.0用于界定公共API,当你的软件发布到了正式环境,或者有稳定的API时,就可以发布1.0.0版本了;\n* 版本的有限层级指的是不同版本在排序时如何比较.判断优先级时,必须把版本依照顺序拆分为主板本号,次版本号,修订号和先行版本号后进行比较.\n\n## NPM 包依赖\n\n当执行:\n\n\tnpm install package -s\n\n来安装第三方包时,npm首先会安装包的最新版本,然后把包的名称以及版本号写在package.json文件中.\n\n### 指定可用的版本号范围\n\n#### 仅更新修复版本\n\n* 最简写法: 1.0\n* 使用通配符的写法: 1.0.x\n* 使用模糊符的写法: ~1.0.4(大于等于1.0.4 且小于1.1.0)\n\n#### 跟进每个小版本更新\n\n* 最简写法: 1\n* 使用通配符: 1.x 1.x.x\n* 使用模糊符: ^1.0.4(大于等于1.0.4且小于2.0.0)\n\n#### 始终升级到最新版\n\n* 最简写法: *\n* 使用通配符的写法: *\n* 使用模糊符的写法: *(大于等于0.0.0)\n\n## NPM 包依赖\n\n通常我们发布一个包到npm仓库时，我们的做法是先修改 package.json 为某个版本，然后执行 npm publish 命令。手动修改版本号的做法建立在你对Semver规范特别熟悉的基础之上，否则可能会造成版本混乱。npm 考虑到了这点，它提供了相关的命令来让我们更好的遵从Semver规范：\n\n\n* 升级补丁版本号: npm version patch\n* 升级小版本号: npm version minor\n* 升级大版本号: npm version major\n\n当执行npm publish 时,会首先将当前版本发布到npm registry,然后更新dist-tags.latest的值为新版本.\n\n当执行 npm publish --tag=next 时，会首先将当前版本发布到 npm registry，并且更新 dist-tags.next 的值为新版本。这里的 next 可以是任意有意义的命名（比如：v1.x、v2.x 等等）","source":"_posts/2018.11.20semver.md","raw":"---\n\ntitle: 语义化版本号\ntags: [Semver]\ncategories: 知识\n---\n\n## 概述\n\n[Semmantic Versioning](https://semver.org/lang/zh-CN/)是由github起草的具有指导意义的,统一的版本号表示规则:\n\n* 软件的版本通常由三位组成,形如: X.Y.Z(主版本号/次版本号/修订号).\n\n* 版本是严格递增的,例如: 16.2.0 -> 16.3.0 -> 16.3.1;\n* 在发布重要版本时,可以发布alpha,beta,rc等现行版本;\n* alpha 和 rc 等修饰版本的关键字后面可以加上次数和meta信息.\n\n## 版本格式\n\n* 主版本号(major):当你做了不兼容的 API 修改;\n* 次版本号(minor): 当你做了向下兼容的功能性新增,可以理解为 feature 版本;\n* 修订号(Patch):当你做了向下兼容的问题修正,可以理解为bug fix 版本.\n\n## 先行版本\n\n当要发布大版本或者核心的Feature时，但是又不能保证这个版本的功能 100% 正常。这个时候就需要通过发布先行版本。比较常见的先行版本包括：内测版、灰度版本了和RC版本。Semver规范中使用alpha、beta、rc(以前叫做gama)来修饰即将要发布的版本。它们的含义是：\n\n* alpha:内部版本;\n* beta:公测版本:\n* rc:即release candiate,正式版本的候选版本\n\n比如：1.0.0-alpha.0, 1.0.0-alpha.1, 1.0.0-beta.0, 1.0.0-rc.0, 1.0.p-rc.1 等版本。alpha, beta, rc后需要带上次数信息。\n\n## 版本发布准则\n\n* 标准的版本号必须按照XYZ的格式,并且XYZ为飞负的整数,禁止在数字前方补0,版本发布号要严格递增;\n* 某个软件版本发布后,任何修改都必须以新版本发行;\n* 1.0.0用于界定公共API,当你的软件发布到了正式环境,或者有稳定的API时,就可以发布1.0.0版本了;\n* 版本的有限层级指的是不同版本在排序时如何比较.判断优先级时,必须把版本依照顺序拆分为主板本号,次版本号,修订号和先行版本号后进行比较.\n\n## NPM 包依赖\n\n当执行:\n\n\tnpm install package -s\n\n来安装第三方包时,npm首先会安装包的最新版本,然后把包的名称以及版本号写在package.json文件中.\n\n### 指定可用的版本号范围\n\n#### 仅更新修复版本\n\n* 最简写法: 1.0\n* 使用通配符的写法: 1.0.x\n* 使用模糊符的写法: ~1.0.4(大于等于1.0.4 且小于1.1.0)\n\n#### 跟进每个小版本更新\n\n* 最简写法: 1\n* 使用通配符: 1.x 1.x.x\n* 使用模糊符: ^1.0.4(大于等于1.0.4且小于2.0.0)\n\n#### 始终升级到最新版\n\n* 最简写法: *\n* 使用通配符的写法: *\n* 使用模糊符的写法: *(大于等于0.0.0)\n\n## NPM 包依赖\n\n通常我们发布一个包到npm仓库时，我们的做法是先修改 package.json 为某个版本，然后执行 npm publish 命令。手动修改版本号的做法建立在你对Semver规范特别熟悉的基础之上，否则可能会造成版本混乱。npm 考虑到了这点，它提供了相关的命令来让我们更好的遵从Semver规范：\n\n\n* 升级补丁版本号: npm version patch\n* 升级小版本号: npm version minor\n* 升级大版本号: npm version major\n\n当执行npm publish 时,会首先将当前版本发布到npm registry,然后更新dist-tags.latest的值为新版本.\n\n当执行 npm publish --tag=next 时，会首先将当前版本发布到 npm registry，并且更新 dist-tags.next 的值为新版本。这里的 next 可以是任意有意义的命名（比如：v1.x、v2.x 等等）","slug":"2018.11.20semver","published":1,"date":"2018-11-20T07:05:56.816Z","updated":"2018-11-20T08:32:35.345Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziipx000hrh9zfh1o0urr","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p><a href=\"https://semver.org/lang/zh-CN/\" target=\"_blank\" rel=\"noopener\">Semmantic Versioning</a>是由github起草的具有指导意义的,统一的版本号表示规则:</p>\n<ul>\n<li><p>软件的版本通常由三位组成,形如: X.Y.Z(主版本号/次版本号/修订号).</p>\n</li>\n<li><p>版本是严格递增的,例如: 16.2.0 -&gt; 16.3.0 -&gt; 16.3.1;</p>\n</li>\n<li>在发布重要版本时,可以发布alpha,beta,rc等现行版本;</li>\n<li>alpha 和 rc 等修饰版本的关键字后面可以加上次数和meta信息.</li>\n</ul>\n<h2 id=\"版本格式\"><a href=\"#版本格式\" class=\"headerlink\" title=\"版本格式\"></a>版本格式</h2><ul>\n<li>主版本号(major):当你做了不兼容的 API 修改;</li>\n<li>次版本号(minor): 当你做了向下兼容的功能性新增,可以理解为 feature 版本;</li>\n<li>修订号(Patch):当你做了向下兼容的问题修正,可以理解为bug fix 版本.</li>\n</ul>\n<h2 id=\"先行版本\"><a href=\"#先行版本\" class=\"headerlink\" title=\"先行版本\"></a>先行版本</h2><p>当要发布大版本或者核心的Feature时，但是又不能保证这个版本的功能 100% 正常。这个时候就需要通过发布先行版本。比较常见的先行版本包括：内测版、灰度版本了和RC版本。Semver规范中使用alpha、beta、rc(以前叫做gama)来修饰即将要发布的版本。它们的含义是：</p>\n<ul>\n<li>alpha:内部版本;</li>\n<li>beta:公测版本:</li>\n<li>rc:即release candiate,正式版本的候选版本</li>\n</ul>\n<p>比如：1.0.0-alpha.0, 1.0.0-alpha.1, 1.0.0-beta.0, 1.0.0-rc.0, 1.0.p-rc.1 等版本。alpha, beta, rc后需要带上次数信息。</p>\n<h2 id=\"版本发布准则\"><a href=\"#版本发布准则\" class=\"headerlink\" title=\"版本发布准则\"></a>版本发布准则</h2><ul>\n<li>标准的版本号必须按照XYZ的格式,并且XYZ为飞负的整数,禁止在数字前方补0,版本发布号要严格递增;</li>\n<li>某个软件版本发布后,任何修改都必须以新版本发行;</li>\n<li>1.0.0用于界定公共API,当你的软件发布到了正式环境,或者有稳定的API时,就可以发布1.0.0版本了;</li>\n<li>版本的有限层级指的是不同版本在排序时如何比较.判断优先级时,必须把版本依照顺序拆分为主板本号,次版本号,修订号和先行版本号后进行比较.</li>\n</ul>\n<h2 id=\"NPM-包依赖\"><a href=\"#NPM-包依赖\" class=\"headerlink\" title=\"NPM 包依赖\"></a>NPM 包依赖</h2><p>当执行:</p>\n<pre><code>npm install package -s\n</code></pre><p>来安装第三方包时,npm首先会安装包的最新版本,然后把包的名称以及版本号写在package.json文件中.</p>\n<h3 id=\"指定可用的版本号范围\"><a href=\"#指定可用的版本号范围\" class=\"headerlink\" title=\"指定可用的版本号范围\"></a>指定可用的版本号范围</h3><h4 id=\"仅更新修复版本\"><a href=\"#仅更新修复版本\" class=\"headerlink\" title=\"仅更新修复版本\"></a>仅更新修复版本</h4><ul>\n<li>最简写法: 1.0</li>\n<li>使用通配符的写法: 1.0.x</li>\n<li>使用模糊符的写法: ~1.0.4(大于等于1.0.4 且小于1.1.0)</li>\n</ul>\n<h4 id=\"跟进每个小版本更新\"><a href=\"#跟进每个小版本更新\" class=\"headerlink\" title=\"跟进每个小版本更新\"></a>跟进每个小版本更新</h4><ul>\n<li>最简写法: 1</li>\n<li>使用通配符: 1.x 1.x.x</li>\n<li>使用模糊符: ^1.0.4(大于等于1.0.4且小于2.0.0)</li>\n</ul>\n<h4 id=\"始终升级到最新版\"><a href=\"#始终升级到最新版\" class=\"headerlink\" title=\"始终升级到最新版\"></a>始终升级到最新版</h4><ul>\n<li>最简写法: *</li>\n<li>使用通配符的写法: *</li>\n<li>使用模糊符的写法: *(大于等于0.0.0)</li>\n</ul>\n<h2 id=\"NPM-包依赖-1\"><a href=\"#NPM-包依赖-1\" class=\"headerlink\" title=\"NPM 包依赖\"></a>NPM 包依赖</h2><p>通常我们发布一个包到npm仓库时，我们的做法是先修改 package.json 为某个版本，然后执行 npm publish 命令。手动修改版本号的做法建立在你对Semver规范特别熟悉的基础之上，否则可能会造成版本混乱。npm 考虑到了这点，它提供了相关的命令来让我们更好的遵从Semver规范：</p>\n<ul>\n<li>升级补丁版本号: npm version patch</li>\n<li>升级小版本号: npm version minor</li>\n<li>升级大版本号: npm version major</li>\n</ul>\n<p>当执行npm publish 时,会首先将当前版本发布到npm registry,然后更新dist-tags.latest的值为新版本.</p>\n<p>当执行 npm publish –tag=next 时，会首先将当前版本发布到 npm registry，并且更新 dist-tags.next 的值为新版本。这里的 next 可以是任意有意义的命名（比如：v1.x、v2.x 等等）</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p><a href=\"https://semver.org/lang/zh-CN/\" target=\"_blank\" rel=\"noopener\">Semmantic Versioning</a>是由github起草的具有指导意义的,统一的版本号表示规则:</p>\n<ul>\n<li><p>软件的版本通常由三位组成,形如: X.Y.Z(主版本号/次版本号/修订号).</p>\n</li>\n<li><p>版本是严格递增的,例如: 16.2.0 -&gt; 16.3.0 -&gt; 16.3.1;</p>\n</li>\n<li>在发布重要版本时,可以发布alpha,beta,rc等现行版本;</li>\n<li>alpha 和 rc 等修饰版本的关键字后面可以加上次数和meta信息.</li>\n</ul>\n<h2 id=\"版本格式\"><a href=\"#版本格式\" class=\"headerlink\" title=\"版本格式\"></a>版本格式</h2><ul>\n<li>主版本号(major):当你做了不兼容的 API 修改;</li>\n<li>次版本号(minor): 当你做了向下兼容的功能性新增,可以理解为 feature 版本;</li>\n<li>修订号(Patch):当你做了向下兼容的问题修正,可以理解为bug fix 版本.</li>\n</ul>\n<h2 id=\"先行版本\"><a href=\"#先行版本\" class=\"headerlink\" title=\"先行版本\"></a>先行版本</h2><p>当要发布大版本或者核心的Feature时，但是又不能保证这个版本的功能 100% 正常。这个时候就需要通过发布先行版本。比较常见的先行版本包括：内测版、灰度版本了和RC版本。Semver规范中使用alpha、beta、rc(以前叫做gama)来修饰即将要发布的版本。它们的含义是：</p>\n<ul>\n<li>alpha:内部版本;</li>\n<li>beta:公测版本:</li>\n<li>rc:即release candiate,正式版本的候选版本</li>\n</ul>\n<p>比如：1.0.0-alpha.0, 1.0.0-alpha.1, 1.0.0-beta.0, 1.0.0-rc.0, 1.0.p-rc.1 等版本。alpha, beta, rc后需要带上次数信息。</p>\n<h2 id=\"版本发布准则\"><a href=\"#版本发布准则\" class=\"headerlink\" title=\"版本发布准则\"></a>版本发布准则</h2><ul>\n<li>标准的版本号必须按照XYZ的格式,并且XYZ为飞负的整数,禁止在数字前方补0,版本发布号要严格递增;</li>\n<li>某个软件版本发布后,任何修改都必须以新版本发行;</li>\n<li>1.0.0用于界定公共API,当你的软件发布到了正式环境,或者有稳定的API时,就可以发布1.0.0版本了;</li>\n<li>版本的有限层级指的是不同版本在排序时如何比较.判断优先级时,必须把版本依照顺序拆分为主板本号,次版本号,修订号和先行版本号后进行比较.</li>\n</ul>\n<h2 id=\"NPM-包依赖\"><a href=\"#NPM-包依赖\" class=\"headerlink\" title=\"NPM 包依赖\"></a>NPM 包依赖</h2><p>当执行:</p>\n<pre><code>npm install package -s\n</code></pre><p>来安装第三方包时,npm首先会安装包的最新版本,然后把包的名称以及版本号写在package.json文件中.</p>\n<h3 id=\"指定可用的版本号范围\"><a href=\"#指定可用的版本号范围\" class=\"headerlink\" title=\"指定可用的版本号范围\"></a>指定可用的版本号范围</h3><h4 id=\"仅更新修复版本\"><a href=\"#仅更新修复版本\" class=\"headerlink\" title=\"仅更新修复版本\"></a>仅更新修复版本</h4><ul>\n<li>最简写法: 1.0</li>\n<li>使用通配符的写法: 1.0.x</li>\n<li>使用模糊符的写法: ~1.0.4(大于等于1.0.4 且小于1.1.0)</li>\n</ul>\n<h4 id=\"跟进每个小版本更新\"><a href=\"#跟进每个小版本更新\" class=\"headerlink\" title=\"跟进每个小版本更新\"></a>跟进每个小版本更新</h4><ul>\n<li>最简写法: 1</li>\n<li>使用通配符: 1.x 1.x.x</li>\n<li>使用模糊符: ^1.0.4(大于等于1.0.4且小于2.0.0)</li>\n</ul>\n<h4 id=\"始终升级到最新版\"><a href=\"#始终升级到最新版\" class=\"headerlink\" title=\"始终升级到最新版\"></a>始终升级到最新版</h4><ul>\n<li>最简写法: *</li>\n<li>使用通配符的写法: *</li>\n<li>使用模糊符的写法: *(大于等于0.0.0)</li>\n</ul>\n<h2 id=\"NPM-包依赖-1\"><a href=\"#NPM-包依赖-1\" class=\"headerlink\" title=\"NPM 包依赖\"></a>NPM 包依赖</h2><p>通常我们发布一个包到npm仓库时，我们的做法是先修改 package.json 为某个版本，然后执行 npm publish 命令。手动修改版本号的做法建立在你对Semver规范特别熟悉的基础之上，否则可能会造成版本混乱。npm 考虑到了这点，它提供了相关的命令来让我们更好的遵从Semver规范：</p>\n<ul>\n<li>升级补丁版本号: npm version patch</li>\n<li>升级小版本号: npm version minor</li>\n<li>升级大版本号: npm version major</li>\n</ul>\n<p>当执行npm publish 时,会首先将当前版本发布到npm registry,然后更新dist-tags.latest的值为新版本.</p>\n<p>当执行 npm publish –tag=next 时，会首先将当前版本发布到 npm registry，并且更新 dist-tags.next 的值为新版本。这里的 next 可以是任意有意义的命名（比如：v1.x、v2.x 等等）</p>\n"},{"title":"在不同电脑更新hexo博客","_content":"\n在github 仓库部署hexo静态博客,可以参考我[这篇文章](https://hhb1994.github.io/2017/03/27/2017.03.26/),本篇文章讲述的是把博客文件和网站文件放在同一仓库的不同分支上,并实现在不同的电脑上更新博客的方法.\n\n## 创建 hexo 分支\n\n在原博客的仓库创建hexo分支,并设为默认,用来存放博客文件;\n## 清空远程仓库的 hexo 分支\n\n*  git clone 把远程仓库clone到本地;\n*  进入仓库,删除除.git文件夹以外的所有文件和文件夹;\n*  git add . ,git commit -m \"-\" , git push origin hexo 清空远程仓库hexo分支;\n\n## 上传本地博客文件\n\n* 把上述 .git文件夹复制到本机博客目录下;\n* 将本机博客themes里面的 .git .gitignore删除;\n* cd 到本机博客目录,执行: git add . ,git commit -m '-' , git push origin hexo 把本机博客文件推送到远程仓库hexo分支;\n\n## 在新电脑上的操作\n\n* 安装环境:git hexo node.js sshKEY等;\n* 创建博客目录,clone hexo分支到本地,执行: npm install  hexo -g && hexo s 安装依赖;\n* 推送文件到hexo分支: git add ...\n* 部署hexo: hexo clean && hexo g && hexo d\n\n","source":"_posts/2018.11.21.deployHexo.md","raw":"---\ntitle: 在不同电脑更新hexo博客\ntags: [hexo,git]\ncategories: 知识 \n---\n\n在github 仓库部署hexo静态博客,可以参考我[这篇文章](https://hhb1994.github.io/2017/03/27/2017.03.26/),本篇文章讲述的是把博客文件和网站文件放在同一仓库的不同分支上,并实现在不同的电脑上更新博客的方法.\n\n## 创建 hexo 分支\n\n在原博客的仓库创建hexo分支,并设为默认,用来存放博客文件;\n## 清空远程仓库的 hexo 分支\n\n*  git clone 把远程仓库clone到本地;\n*  进入仓库,删除除.git文件夹以外的所有文件和文件夹;\n*  git add . ,git commit -m \"-\" , git push origin hexo 清空远程仓库hexo分支;\n\n## 上传本地博客文件\n\n* 把上述 .git文件夹复制到本机博客目录下;\n* 将本机博客themes里面的 .git .gitignore删除;\n* cd 到本机博客目录,执行: git add . ,git commit -m '-' , git push origin hexo 把本机博客文件推送到远程仓库hexo分支;\n\n## 在新电脑上的操作\n\n* 安装环境:git hexo node.js sshKEY等;\n* 创建博客目录,clone hexo分支到本地,执行: npm install  hexo -g && hexo s 安装依赖;\n* 推送文件到hexo分支: git add ...\n* 部署hexo: hexo clean && hexo g && hexo d\n\n","slug":"2018.11.21.deployHexo","published":1,"date":"2018-11-21T09:01:46.329Z","updated":"2018-11-21T09:27:48.694Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziipy000irh9z6dcf3186","content":"<p>在github 仓库部署hexo静态博客,可以参考我<a href=\"https://hhb1994.github.io/2017/03/27/2017.03.26/\" target=\"_blank\" rel=\"noopener\">这篇文章</a>,本篇文章讲述的是把博客文件和网站文件放在同一仓库的不同分支上,并实现在不同的电脑上更新博客的方法.</p>\n<h2 id=\"创建-hexo-分支\"><a href=\"#创建-hexo-分支\" class=\"headerlink\" title=\"创建 hexo 分支\"></a>创建 hexo 分支</h2><p>在原博客的仓库创建hexo分支,并设为默认,用来存放博客文件;</p>\n<h2 id=\"清空远程仓库的-hexo-分支\"><a href=\"#清空远程仓库的-hexo-分支\" class=\"headerlink\" title=\"清空远程仓库的 hexo 分支\"></a>清空远程仓库的 hexo 分支</h2><ul>\n<li>git clone 把远程仓库clone到本地;</li>\n<li>进入仓库,删除除.git文件夹以外的所有文件和文件夹;</li>\n<li>git add . ,git commit -m “-“ , git push origin hexo 清空远程仓库hexo分支;</li>\n</ul>\n<h2 id=\"上传本地博客文件\"><a href=\"#上传本地博客文件\" class=\"headerlink\" title=\"上传本地博客文件\"></a>上传本地博客文件</h2><ul>\n<li>把上述 .git文件夹复制到本机博客目录下;</li>\n<li>将本机博客themes里面的 .git .gitignore删除;</li>\n<li>cd 到本机博客目录,执行: git add . ,git commit -m ‘-‘ , git push origin hexo 把本机博客文件推送到远程仓库hexo分支;</li>\n</ul>\n<h2 id=\"在新电脑上的操作\"><a href=\"#在新电脑上的操作\" class=\"headerlink\" title=\"在新电脑上的操作\"></a>在新电脑上的操作</h2><ul>\n<li>安装环境:git hexo node.js sshKEY等;</li>\n<li>创建博客目录,clone hexo分支到本地,执行: npm install  hexo -g &amp;&amp; hexo s 安装依赖;</li>\n<li>推送文件到hexo分支: git add …</li>\n<li>部署hexo: hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>在github 仓库部署hexo静态博客,可以参考我<a href=\"https://hhb1994.github.io/2017/03/27/2017.03.26/\" target=\"_blank\" rel=\"noopener\">这篇文章</a>,本篇文章讲述的是把博客文件和网站文件放在同一仓库的不同分支上,并实现在不同的电脑上更新博客的方法.</p>\n<h2 id=\"创建-hexo-分支\"><a href=\"#创建-hexo-分支\" class=\"headerlink\" title=\"创建 hexo 分支\"></a>创建 hexo 分支</h2><p>在原博客的仓库创建hexo分支,并设为默认,用来存放博客文件;</p>\n<h2 id=\"清空远程仓库的-hexo-分支\"><a href=\"#清空远程仓库的-hexo-分支\" class=\"headerlink\" title=\"清空远程仓库的 hexo 分支\"></a>清空远程仓库的 hexo 分支</h2><ul>\n<li>git clone 把远程仓库clone到本地;</li>\n<li>进入仓库,删除除.git文件夹以外的所有文件和文件夹;</li>\n<li>git add . ,git commit -m “-“ , git push origin hexo 清空远程仓库hexo分支;</li>\n</ul>\n<h2 id=\"上传本地博客文件\"><a href=\"#上传本地博客文件\" class=\"headerlink\" title=\"上传本地博客文件\"></a>上传本地博客文件</h2><ul>\n<li>把上述 .git文件夹复制到本机博客目录下;</li>\n<li>将本机博客themes里面的 .git .gitignore删除;</li>\n<li>cd 到本机博客目录,执行: git add . ,git commit -m ‘-‘ , git push origin hexo 把本机博客文件推送到远程仓库hexo分支;</li>\n</ul>\n<h2 id=\"在新电脑上的操作\"><a href=\"#在新电脑上的操作\" class=\"headerlink\" title=\"在新电脑上的操作\"></a>在新电脑上的操作</h2><ul>\n<li>安装环境:git hexo node.js sshKEY等;</li>\n<li>创建博客目录,clone hexo分支到本地,执行: npm install  hexo -g &amp;&amp; hexo s 安装依赖;</li>\n<li>推送文件到hexo分支: git add …</li>\n<li>部署hexo: hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</li>\n</ul>\n"},{"title":"CSS 选择器/动画","_content":"\n## 一.基本选择器\n\n* 通用元素选择器(*)\n\n通用元素选择器,匹配任何元素;\n\n* 标签选择器(E)\n\n匹配所有使用 E 标签的元素;\n\n* class选择器(.class)\n\n匹配所有class属性中包含此class 的元素;\n\n* id选择器(#id)\n\n匹配所有id属性为此id的元素\n\n实例:\n\n\t* { margin:0; padding:0; }\n\t\n\tp { font-size:2em; }\n\t\n\t.info { background:#ff0; }\n\t\n\tp.info { background:#ff0; }\n\t\n\tp.info.error { color:#900; font-weight:bold; }\n\t\n\t#info { background:#ff0; }\n\t\n\tp#info { background:#ff0; }\n\n## 二.多元素选择器\n\n* 多元素选择器(E,F)\n\n同时匹配所有的E元素和F元素,中间用逗号分隔.\n\n* 后代元素选择器(E F)\n\n匹配所有属于 E 元素后代的F 元素,用空格分开.\n\n* 子元素选择器(E>F)\n\n匹配所有的E元素的子元素F.\n\n* 毗邻元素选择器(E+F)\n\n匹配所有紧随E元素之后的同级元素F.\n\n实例:\n\n\tdiv p { color:#f00; }\n\t\n\t#nav li { display:inline; }\n\t\n\t#nav a { font-weight:bold; }\n\t\n\tdiv > strong { color:#f00; }\n\t\n\tp + p { color:#f00; }\n\n\n\n\n\n## CSS 动画\n\n###  CSS transition\n\ntransition 指定状态变化所需要的时间,例如:\n\n\timg{\n\t    height:15px;\n\t    width:15px;\n\t    transition: 1s;\n\t}\n\t\n\timg:hover{\n\t    height: 450px;\n\t    width: 450px;\n\t}\n\n这样可以指定图片的访达过程需要1s🐸.\n\n#### 还可以指定 transition 使用的属性,比如只适用于 height:\n\n\timg{\n\t    transition: 1s height;\n\t}\n\n这样只有高度变化需要1s 实现,其他变化依然瞬间实现.\n\n#### transition-delay\n\n\timg{\n\t    transition: 1s height, 1s 1s width;\n\t}\n\n如上, width 在1s 以后才开始变化.\n\n#### transition-timing-function\n\n 状态变化速度,默认不是匀速的,而是逐渐放慢,称为 ease.\n\n\timg{\n\t    transition: 1s ease;\n\t}\n除了 ease 以外,还包括:\n\n* linear 匀速\n* ease-in 加速\n* ease-out 减速\n* cubic-bezier 函数: 自定义速度模式\n\n#### transition 的各项属性\n\n完整写法:\n\n\timg{\n\t    transition: 1s 1s height ease;\n\t}\n单独定义:\n\n\timg{\n\t    transition-property: height;\n\t    transition-duration: 1s;\n\t    transition-delay: 1s;\n\t    transition-timing-function: ease;\n\t}\n\n#### 使用注意\n\n* 各大浏览器都支持无前缀的 transition;\n* 不是所有的属性都支持 transition;\n* transition 必须明确状态;\n\n#### transition 的局限\n\n* 需要事件触发,无法在网页加载时自动生成;\n* 一次性,不能重发触发,除非一再触发;\n* 只能定义开始和结束状态,不能定义中间状态,即只有两个状态;\n* 一条 transition 只能定义一个属性的变化,不能涉及多个属性.\n\n### CSS animation\n\n#### 基本用法\n\n首先, css animation 需要制定动画一个周期持续时间,以及动画效果的名称.\n\t\n\tdiv:hover {\n\t  animation: 1s rainbow;\n\t}\n\n上面代码表示，当鼠标悬停在div元素上时，会产生名为rainbow的动画效果，持续时间为1秒。为此，我们还需要用keyframes关键字，定义rainbow效果。\n\n\t@keyframes rainbow {\n\t  0% { background: #c00; }\n\t  50% { background: orange; }\n\t  100% { background: yellowgreen; }\n\t}\n\n上面代码表示，rainbow效果一共有三个状态，分别为起始（0%）、中点（50%）和结束（100%）。如果有需要，完全可以插入更多状态。\n\n\n默认情况下，动画只播放一次。加入infinite关键字，可以让动画无限次播放。\n\n默认情况下，动画只播放一次。加入infinite关键字，可以让动画无限次播放。\n\n#### animation-fill-mode\n\n动画结束以后，会立即从结束状态跳回到起始状态。如果想让动画保持在结束状态，需要使用animation-fill-mode属性。\n\n* none: 默认值,回到动画没开始的状态;\n* backwoards: 让动画回到第一帧的状态;\n* both: 根据 animation-direction 轮流应用 forwards 和 backwards 规则.\n\n#### animation-direction\n\n动画循环播放时，每次都是从结束状态跳回到起始状态，再开始播放。animation-direction属性，可以改变这种行为。\n\n下面看一个例子，来说明如何使用animation-direction。假定有一个动画是这样定义的。\n\n\t@keyframes rainbow {\n\t  0% { background-color: yellow; }\n\t  100% { background: blue; }\n\t}\n默认情况下, animation-direction 等于 normal.\n\n此外，还可以等于取alternate、reverse、alternate-reverse等值。它们的含义见下图（假定动画连续播放三次）。\n\n![](http://www.ruanyifeng.com/blogimg/asset/201402/bg2014021401.png)\n\n#### animation 的各项属性\n\n\tdiv:hover {\n\t  animation: 1s 1s rainbow linear 3 forwards normal;\n\t}\n\n单独的属性:\n\n\tdiv:hover {\n\t  animation-name: rainbow;\n\t  animation-duration: 1s;\n\t  animation-timing-function: linear;\n\t  animation-delay: 1s;\n\t    animation-fill-mode:forwards;\n\t  animation-direction: normal;\n\t  animation-iteration-count: 3;\n}\n#### keyframes 的写法\n\n用于定义动画的各个状态:\n\n\t@keyframes rainbow {\n\t  0% { background: #c00 }\n\t  50% { background: orange }\n\t  100% { background: yellowgreen }\n\t}\n\n或者:\n\n\t@keyframes rainbow {\n\t  from { background: #c00 }\n\t  50% { background: orange }\n\t  to { background: yellowgreen }\n\t}\n如果省略某个状态，浏览器会自动推算中间状态，所以下面都是合法的写法。\n\n\n\t@keyframes rainbow {\n\t  50% { background: orange }\n\t  to { background: yellowgreen }\n\t}\n\t\n\t@keyframes rainbow {\n\t  to { background: yellowgreen }\n\t}\n\n甚至，可以把多个状态写在一行。\n\n\n\t@keyframes pound {\n\t  from，to { transform: none; }\n\t  50% { transform: scale(1.2); }\n\t}\n\n另外一点需要注意的是，浏览器从一个状态向另一个状态过渡，是平滑过渡。steps函数可以实现分步过渡。\n\n\t\n\tdiv:hover {\n\t  animation: 1s rainbow infinite steps(10);\n\t}\n\n#### animation-play-state\n\n如果想让动画保持突然终止时的状态，就要使用animation-play-state属性。\n\n\n\tdiv {\n\t    animation: spin 1s linear infinite;\n\t    animation-play-state: paused;\n\t}\n\t\n\tdiv:hover {\n\t  animation-play-state: running;\n\t}\n\n\t\n\n\n\n\n","source":"_posts/2018.11.19CSS-selector.md","raw":"---\ntitle: CSS 选择器/动画\ntags: [CSS]\ncategories: 知识 \n---\n\n## 一.基本选择器\n\n* 通用元素选择器(*)\n\n通用元素选择器,匹配任何元素;\n\n* 标签选择器(E)\n\n匹配所有使用 E 标签的元素;\n\n* class选择器(.class)\n\n匹配所有class属性中包含此class 的元素;\n\n* id选择器(#id)\n\n匹配所有id属性为此id的元素\n\n实例:\n\n\t* { margin:0; padding:0; }\n\t\n\tp { font-size:2em; }\n\t\n\t.info { background:#ff0; }\n\t\n\tp.info { background:#ff0; }\n\t\n\tp.info.error { color:#900; font-weight:bold; }\n\t\n\t#info { background:#ff0; }\n\t\n\tp#info { background:#ff0; }\n\n## 二.多元素选择器\n\n* 多元素选择器(E,F)\n\n同时匹配所有的E元素和F元素,中间用逗号分隔.\n\n* 后代元素选择器(E F)\n\n匹配所有属于 E 元素后代的F 元素,用空格分开.\n\n* 子元素选择器(E>F)\n\n匹配所有的E元素的子元素F.\n\n* 毗邻元素选择器(E+F)\n\n匹配所有紧随E元素之后的同级元素F.\n\n实例:\n\n\tdiv p { color:#f00; }\n\t\n\t#nav li { display:inline; }\n\t\n\t#nav a { font-weight:bold; }\n\t\n\tdiv > strong { color:#f00; }\n\t\n\tp + p { color:#f00; }\n\n\n\n\n\n## CSS 动画\n\n###  CSS transition\n\ntransition 指定状态变化所需要的时间,例如:\n\n\timg{\n\t    height:15px;\n\t    width:15px;\n\t    transition: 1s;\n\t}\n\t\n\timg:hover{\n\t    height: 450px;\n\t    width: 450px;\n\t}\n\n这样可以指定图片的访达过程需要1s🐸.\n\n#### 还可以指定 transition 使用的属性,比如只适用于 height:\n\n\timg{\n\t    transition: 1s height;\n\t}\n\n这样只有高度变化需要1s 实现,其他变化依然瞬间实现.\n\n#### transition-delay\n\n\timg{\n\t    transition: 1s height, 1s 1s width;\n\t}\n\n如上, width 在1s 以后才开始变化.\n\n#### transition-timing-function\n\n 状态变化速度,默认不是匀速的,而是逐渐放慢,称为 ease.\n\n\timg{\n\t    transition: 1s ease;\n\t}\n除了 ease 以外,还包括:\n\n* linear 匀速\n* ease-in 加速\n* ease-out 减速\n* cubic-bezier 函数: 自定义速度模式\n\n#### transition 的各项属性\n\n完整写法:\n\n\timg{\n\t    transition: 1s 1s height ease;\n\t}\n单独定义:\n\n\timg{\n\t    transition-property: height;\n\t    transition-duration: 1s;\n\t    transition-delay: 1s;\n\t    transition-timing-function: ease;\n\t}\n\n#### 使用注意\n\n* 各大浏览器都支持无前缀的 transition;\n* 不是所有的属性都支持 transition;\n* transition 必须明确状态;\n\n#### transition 的局限\n\n* 需要事件触发,无法在网页加载时自动生成;\n* 一次性,不能重发触发,除非一再触发;\n* 只能定义开始和结束状态,不能定义中间状态,即只有两个状态;\n* 一条 transition 只能定义一个属性的变化,不能涉及多个属性.\n\n### CSS animation\n\n#### 基本用法\n\n首先, css animation 需要制定动画一个周期持续时间,以及动画效果的名称.\n\t\n\tdiv:hover {\n\t  animation: 1s rainbow;\n\t}\n\n上面代码表示，当鼠标悬停在div元素上时，会产生名为rainbow的动画效果，持续时间为1秒。为此，我们还需要用keyframes关键字，定义rainbow效果。\n\n\t@keyframes rainbow {\n\t  0% { background: #c00; }\n\t  50% { background: orange; }\n\t  100% { background: yellowgreen; }\n\t}\n\n上面代码表示，rainbow效果一共有三个状态，分别为起始（0%）、中点（50%）和结束（100%）。如果有需要，完全可以插入更多状态。\n\n\n默认情况下，动画只播放一次。加入infinite关键字，可以让动画无限次播放。\n\n默认情况下，动画只播放一次。加入infinite关键字，可以让动画无限次播放。\n\n#### animation-fill-mode\n\n动画结束以后，会立即从结束状态跳回到起始状态。如果想让动画保持在结束状态，需要使用animation-fill-mode属性。\n\n* none: 默认值,回到动画没开始的状态;\n* backwoards: 让动画回到第一帧的状态;\n* both: 根据 animation-direction 轮流应用 forwards 和 backwards 规则.\n\n#### animation-direction\n\n动画循环播放时，每次都是从结束状态跳回到起始状态，再开始播放。animation-direction属性，可以改变这种行为。\n\n下面看一个例子，来说明如何使用animation-direction。假定有一个动画是这样定义的。\n\n\t@keyframes rainbow {\n\t  0% { background-color: yellow; }\n\t  100% { background: blue; }\n\t}\n默认情况下, animation-direction 等于 normal.\n\n此外，还可以等于取alternate、reverse、alternate-reverse等值。它们的含义见下图（假定动画连续播放三次）。\n\n![](http://www.ruanyifeng.com/blogimg/asset/201402/bg2014021401.png)\n\n#### animation 的各项属性\n\n\tdiv:hover {\n\t  animation: 1s 1s rainbow linear 3 forwards normal;\n\t}\n\n单独的属性:\n\n\tdiv:hover {\n\t  animation-name: rainbow;\n\t  animation-duration: 1s;\n\t  animation-timing-function: linear;\n\t  animation-delay: 1s;\n\t    animation-fill-mode:forwards;\n\t  animation-direction: normal;\n\t  animation-iteration-count: 3;\n}\n#### keyframes 的写法\n\n用于定义动画的各个状态:\n\n\t@keyframes rainbow {\n\t  0% { background: #c00 }\n\t  50% { background: orange }\n\t  100% { background: yellowgreen }\n\t}\n\n或者:\n\n\t@keyframes rainbow {\n\t  from { background: #c00 }\n\t  50% { background: orange }\n\t  to { background: yellowgreen }\n\t}\n如果省略某个状态，浏览器会自动推算中间状态，所以下面都是合法的写法。\n\n\n\t@keyframes rainbow {\n\t  50% { background: orange }\n\t  to { background: yellowgreen }\n\t}\n\t\n\t@keyframes rainbow {\n\t  to { background: yellowgreen }\n\t}\n\n甚至，可以把多个状态写在一行。\n\n\n\t@keyframes pound {\n\t  from，to { transform: none; }\n\t  50% { transform: scale(1.2); }\n\t}\n\n另外一点需要注意的是，浏览器从一个状态向另一个状态过渡，是平滑过渡。steps函数可以实现分步过渡。\n\n\t\n\tdiv:hover {\n\t  animation: 1s rainbow infinite steps(10);\n\t}\n\n#### animation-play-state\n\n如果想让动画保持突然终止时的状态，就要使用animation-play-state属性。\n\n\n\tdiv {\n\t    animation: spin 1s linear infinite;\n\t    animation-play-state: paused;\n\t}\n\t\n\tdiv:hover {\n\t  animation-play-state: running;\n\t}\n\n\t\n\n\n\n\n","slug":"2018.11.19CSS-selector","published":1,"date":"2018-11-19T08:49:25.499Z","updated":"2018-11-28T08:44:32.732Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziipy000jrh9z9fsna0za","content":"<h2 id=\"一-基本选择器\"><a href=\"#一-基本选择器\" class=\"headerlink\" title=\"一.基本选择器\"></a>一.基本选择器</h2><ul>\n<li>通用元素选择器(*)</li>\n</ul>\n<p>通用元素选择器,匹配任何元素;</p>\n<ul>\n<li>标签选择器(E)</li>\n</ul>\n<p>匹配所有使用 E 标签的元素;</p>\n<ul>\n<li>class选择器(.class)</li>\n</ul>\n<p>匹配所有class属性中包含此class 的元素;</p>\n<ul>\n<li>id选择器(#id)</li>\n</ul>\n<p>匹配所有id属性为此id的元素</p>\n<p>实例:</p>\n<pre><code>* { margin:0; padding:0; }\n\np { font-size:2em; }\n\n.info { background:#ff0; }\n\np.info { background:#ff0; }\n\np.info.error { color:#900; font-weight:bold; }\n\n#info { background:#ff0; }\n\np#info { background:#ff0; }\n</code></pre><h2 id=\"二-多元素选择器\"><a href=\"#二-多元素选择器\" class=\"headerlink\" title=\"二.多元素选择器\"></a>二.多元素选择器</h2><ul>\n<li>多元素选择器(E,F)</li>\n</ul>\n<p>同时匹配所有的E元素和F元素,中间用逗号分隔.</p>\n<ul>\n<li>后代元素选择器(E F)</li>\n</ul>\n<p>匹配所有属于 E 元素后代的F 元素,用空格分开.</p>\n<ul>\n<li>子元素选择器(E&gt;F)</li>\n</ul>\n<p>匹配所有的E元素的子元素F.</p>\n<ul>\n<li>毗邻元素选择器(E+F)</li>\n</ul>\n<p>匹配所有紧随E元素之后的同级元素F.</p>\n<p>实例:</p>\n<pre><code>div p { color:#f00; }\n\n#nav li { display:inline; }\n\n#nav a { font-weight:bold; }\n\ndiv &gt; strong { color:#f00; }\n\np + p { color:#f00; }\n</code></pre><h2 id=\"CSS-动画\"><a href=\"#CSS-动画\" class=\"headerlink\" title=\"CSS 动画\"></a>CSS 动画</h2><h3 id=\"CSS-transition\"><a href=\"#CSS-transition\" class=\"headerlink\" title=\"CSS transition\"></a>CSS transition</h3><p>transition 指定状态变化所需要的时间,例如:</p>\n<pre><code>img{\n    height:15px;\n    width:15px;\n    transition: 1s;\n}\n\nimg:hover{\n    height: 450px;\n    width: 450px;\n}\n</code></pre><p>这样可以指定图片的访达过程需要1s🐸.</p>\n<h4 id=\"还可以指定-transition-使用的属性-比如只适用于-height\"><a href=\"#还可以指定-transition-使用的属性-比如只适用于-height\" class=\"headerlink\" title=\"还可以指定 transition 使用的属性,比如只适用于 height:\"></a>还可以指定 transition 使用的属性,比如只适用于 height:</h4><pre><code>img{\n    transition: 1s height;\n}\n</code></pre><p>这样只有高度变化需要1s 实现,其他变化依然瞬间实现.</p>\n<h4 id=\"transition-delay\"><a href=\"#transition-delay\" class=\"headerlink\" title=\"transition-delay\"></a>transition-delay</h4><pre><code>img{\n    transition: 1s height, 1s 1s width;\n}\n</code></pre><p>如上, width 在1s 以后才开始变化.</p>\n<h4 id=\"transition-timing-function\"><a href=\"#transition-timing-function\" class=\"headerlink\" title=\"transition-timing-function\"></a>transition-timing-function</h4><p> 状态变化速度,默认不是匀速的,而是逐渐放慢,称为 ease.</p>\n<pre><code>img{\n    transition: 1s ease;\n}\n</code></pre><p>除了 ease 以外,还包括:</p>\n<ul>\n<li>linear 匀速</li>\n<li>ease-in 加速</li>\n<li>ease-out 减速</li>\n<li>cubic-bezier 函数: 自定义速度模式</li>\n</ul>\n<h4 id=\"transition-的各项属性\"><a href=\"#transition-的各项属性\" class=\"headerlink\" title=\"transition 的各项属性\"></a>transition 的各项属性</h4><p>完整写法:</p>\n<pre><code>img{\n    transition: 1s 1s height ease;\n}\n</code></pre><p>单独定义:</p>\n<pre><code>img{\n    transition-property: height;\n    transition-duration: 1s;\n    transition-delay: 1s;\n    transition-timing-function: ease;\n}\n</code></pre><h4 id=\"使用注意\"><a href=\"#使用注意\" class=\"headerlink\" title=\"使用注意\"></a>使用注意</h4><ul>\n<li>各大浏览器都支持无前缀的 transition;</li>\n<li>不是所有的属性都支持 transition;</li>\n<li>transition 必须明确状态;</li>\n</ul>\n<h4 id=\"transition-的局限\"><a href=\"#transition-的局限\" class=\"headerlink\" title=\"transition 的局限\"></a>transition 的局限</h4><ul>\n<li>需要事件触发,无法在网页加载时自动生成;</li>\n<li>一次性,不能重发触发,除非一再触发;</li>\n<li>只能定义开始和结束状态,不能定义中间状态,即只有两个状态;</li>\n<li>一条 transition 只能定义一个属性的变化,不能涉及多个属性.</li>\n</ul>\n<h3 id=\"CSS-animation\"><a href=\"#CSS-animation\" class=\"headerlink\" title=\"CSS animation\"></a>CSS animation</h3><h4 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h4><p>首先, css animation 需要制定动画一个周期持续时间,以及动画效果的名称.</p>\n<pre><code>div:hover {\n  animation: 1s rainbow;\n}\n</code></pre><p>上面代码表示，当鼠标悬停在div元素上时，会产生名为rainbow的动画效果，持续时间为1秒。为此，我们还需要用keyframes关键字，定义rainbow效果。</p>\n<pre><code>@keyframes rainbow {\n  0% { background: #c00; }\n  50% { background: orange; }\n  100% { background: yellowgreen; }\n}\n</code></pre><p>上面代码表示，rainbow效果一共有三个状态，分别为起始（0%）、中点（50%）和结束（100%）。如果有需要，完全可以插入更多状态。</p>\n<p>默认情况下，动画只播放一次。加入infinite关键字，可以让动画无限次播放。</p>\n<p>默认情况下，动画只播放一次。加入infinite关键字，可以让动画无限次播放。</p>\n<h4 id=\"animation-fill-mode\"><a href=\"#animation-fill-mode\" class=\"headerlink\" title=\"animation-fill-mode\"></a>animation-fill-mode</h4><p>动画结束以后，会立即从结束状态跳回到起始状态。如果想让动画保持在结束状态，需要使用animation-fill-mode属性。</p>\n<ul>\n<li>none: 默认值,回到动画没开始的状态;</li>\n<li>backwoards: 让动画回到第一帧的状态;</li>\n<li>both: 根据 animation-direction 轮流应用 forwards 和 backwards 规则.</li>\n</ul>\n<h4 id=\"animation-direction\"><a href=\"#animation-direction\" class=\"headerlink\" title=\"animation-direction\"></a>animation-direction</h4><p>动画循环播放时，每次都是从结束状态跳回到起始状态，再开始播放。animation-direction属性，可以改变这种行为。</p>\n<p>下面看一个例子，来说明如何使用animation-direction。假定有一个动画是这样定义的。</p>\n<pre><code>@keyframes rainbow {\n  0% { background-color: yellow; }\n  100% { background: blue; }\n}\n</code></pre><p>默认情况下, animation-direction 等于 normal.</p>\n<p>此外，还可以等于取alternate、reverse、alternate-reverse等值。它们的含义见下图（假定动画连续播放三次）。</p>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/201402/bg2014021401.png\" alt=\"\"></p>\n<h4 id=\"animation-的各项属性\"><a href=\"#animation-的各项属性\" class=\"headerlink\" title=\"animation 的各项属性\"></a>animation 的各项属性</h4><pre><code>div:hover {\n  animation: 1s 1s rainbow linear 3 forwards normal;\n}\n</code></pre><p>单独的属性:</p>\n<pre><code>div:hover {\n  animation-name: rainbow;\n  animation-duration: 1s;\n  animation-timing-function: linear;\n  animation-delay: 1s;\n    animation-fill-mode:forwards;\n  animation-direction: normal;\n  animation-iteration-count: 3;\n</code></pre><p>}</p>\n<h4 id=\"keyframes-的写法\"><a href=\"#keyframes-的写法\" class=\"headerlink\" title=\"keyframes 的写法\"></a>keyframes 的写法</h4><p>用于定义动画的各个状态:</p>\n<pre><code>@keyframes rainbow {\n  0% { background: #c00 }\n  50% { background: orange }\n  100% { background: yellowgreen }\n}\n</code></pre><p>或者:</p>\n<pre><code>@keyframes rainbow {\n  from { background: #c00 }\n  50% { background: orange }\n  to { background: yellowgreen }\n}\n</code></pre><p>如果省略某个状态，浏览器会自动推算中间状态，所以下面都是合法的写法。</p>\n<pre><code>@keyframes rainbow {\n  50% { background: orange }\n  to { background: yellowgreen }\n}\n\n@keyframes rainbow {\n  to { background: yellowgreen }\n}\n</code></pre><p>甚至，可以把多个状态写在一行。</p>\n<pre><code>@keyframes pound {\n  from，to { transform: none; }\n  50% { transform: scale(1.2); }\n}\n</code></pre><p>另外一点需要注意的是，浏览器从一个状态向另一个状态过渡，是平滑过渡。steps函数可以实现分步过渡。</p>\n<pre><code>div:hover {\n  animation: 1s rainbow infinite steps(10);\n}\n</code></pre><h4 id=\"animation-play-state\"><a href=\"#animation-play-state\" class=\"headerlink\" title=\"animation-play-state\"></a>animation-play-state</h4><p>如果想让动画保持突然终止时的状态，就要使用animation-play-state属性。</p>\n<pre><code>div {\n    animation: spin 1s linear infinite;\n    animation-play-state: paused;\n}\n\ndiv:hover {\n  animation-play-state: running;\n}\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一-基本选择器\"><a href=\"#一-基本选择器\" class=\"headerlink\" title=\"一.基本选择器\"></a>一.基本选择器</h2><ul>\n<li>通用元素选择器(*)</li>\n</ul>\n<p>通用元素选择器,匹配任何元素;</p>\n<ul>\n<li>标签选择器(E)</li>\n</ul>\n<p>匹配所有使用 E 标签的元素;</p>\n<ul>\n<li>class选择器(.class)</li>\n</ul>\n<p>匹配所有class属性中包含此class 的元素;</p>\n<ul>\n<li>id选择器(#id)</li>\n</ul>\n<p>匹配所有id属性为此id的元素</p>\n<p>实例:</p>\n<pre><code>* { margin:0; padding:0; }\n\np { font-size:2em; }\n\n.info { background:#ff0; }\n\np.info { background:#ff0; }\n\np.info.error { color:#900; font-weight:bold; }\n\n#info { background:#ff0; }\n\np#info { background:#ff0; }\n</code></pre><h2 id=\"二-多元素选择器\"><a href=\"#二-多元素选择器\" class=\"headerlink\" title=\"二.多元素选择器\"></a>二.多元素选择器</h2><ul>\n<li>多元素选择器(E,F)</li>\n</ul>\n<p>同时匹配所有的E元素和F元素,中间用逗号分隔.</p>\n<ul>\n<li>后代元素选择器(E F)</li>\n</ul>\n<p>匹配所有属于 E 元素后代的F 元素,用空格分开.</p>\n<ul>\n<li>子元素选择器(E&gt;F)</li>\n</ul>\n<p>匹配所有的E元素的子元素F.</p>\n<ul>\n<li>毗邻元素选择器(E+F)</li>\n</ul>\n<p>匹配所有紧随E元素之后的同级元素F.</p>\n<p>实例:</p>\n<pre><code>div p { color:#f00; }\n\n#nav li { display:inline; }\n\n#nav a { font-weight:bold; }\n\ndiv &gt; strong { color:#f00; }\n\np + p { color:#f00; }\n</code></pre><h2 id=\"CSS-动画\"><a href=\"#CSS-动画\" class=\"headerlink\" title=\"CSS 动画\"></a>CSS 动画</h2><h3 id=\"CSS-transition\"><a href=\"#CSS-transition\" class=\"headerlink\" title=\"CSS transition\"></a>CSS transition</h3><p>transition 指定状态变化所需要的时间,例如:</p>\n<pre><code>img{\n    height:15px;\n    width:15px;\n    transition: 1s;\n}\n\nimg:hover{\n    height: 450px;\n    width: 450px;\n}\n</code></pre><p>这样可以指定图片的访达过程需要1s🐸.</p>\n<h4 id=\"还可以指定-transition-使用的属性-比如只适用于-height\"><a href=\"#还可以指定-transition-使用的属性-比如只适用于-height\" class=\"headerlink\" title=\"还可以指定 transition 使用的属性,比如只适用于 height:\"></a>还可以指定 transition 使用的属性,比如只适用于 height:</h4><pre><code>img{\n    transition: 1s height;\n}\n</code></pre><p>这样只有高度变化需要1s 实现,其他变化依然瞬间实现.</p>\n<h4 id=\"transition-delay\"><a href=\"#transition-delay\" class=\"headerlink\" title=\"transition-delay\"></a>transition-delay</h4><pre><code>img{\n    transition: 1s height, 1s 1s width;\n}\n</code></pre><p>如上, width 在1s 以后才开始变化.</p>\n<h4 id=\"transition-timing-function\"><a href=\"#transition-timing-function\" class=\"headerlink\" title=\"transition-timing-function\"></a>transition-timing-function</h4><p> 状态变化速度,默认不是匀速的,而是逐渐放慢,称为 ease.</p>\n<pre><code>img{\n    transition: 1s ease;\n}\n</code></pre><p>除了 ease 以外,还包括:</p>\n<ul>\n<li>linear 匀速</li>\n<li>ease-in 加速</li>\n<li>ease-out 减速</li>\n<li>cubic-bezier 函数: 自定义速度模式</li>\n</ul>\n<h4 id=\"transition-的各项属性\"><a href=\"#transition-的各项属性\" class=\"headerlink\" title=\"transition 的各项属性\"></a>transition 的各项属性</h4><p>完整写法:</p>\n<pre><code>img{\n    transition: 1s 1s height ease;\n}\n</code></pre><p>单独定义:</p>\n<pre><code>img{\n    transition-property: height;\n    transition-duration: 1s;\n    transition-delay: 1s;\n    transition-timing-function: ease;\n}\n</code></pre><h4 id=\"使用注意\"><a href=\"#使用注意\" class=\"headerlink\" title=\"使用注意\"></a>使用注意</h4><ul>\n<li>各大浏览器都支持无前缀的 transition;</li>\n<li>不是所有的属性都支持 transition;</li>\n<li>transition 必须明确状态;</li>\n</ul>\n<h4 id=\"transition-的局限\"><a href=\"#transition-的局限\" class=\"headerlink\" title=\"transition 的局限\"></a>transition 的局限</h4><ul>\n<li>需要事件触发,无法在网页加载时自动生成;</li>\n<li>一次性,不能重发触发,除非一再触发;</li>\n<li>只能定义开始和结束状态,不能定义中间状态,即只有两个状态;</li>\n<li>一条 transition 只能定义一个属性的变化,不能涉及多个属性.</li>\n</ul>\n<h3 id=\"CSS-animation\"><a href=\"#CSS-animation\" class=\"headerlink\" title=\"CSS animation\"></a>CSS animation</h3><h4 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h4><p>首先, css animation 需要制定动画一个周期持续时间,以及动画效果的名称.</p>\n<pre><code>div:hover {\n  animation: 1s rainbow;\n}\n</code></pre><p>上面代码表示，当鼠标悬停在div元素上时，会产生名为rainbow的动画效果，持续时间为1秒。为此，我们还需要用keyframes关键字，定义rainbow效果。</p>\n<pre><code>@keyframes rainbow {\n  0% { background: #c00; }\n  50% { background: orange; }\n  100% { background: yellowgreen; }\n}\n</code></pre><p>上面代码表示，rainbow效果一共有三个状态，分别为起始（0%）、中点（50%）和结束（100%）。如果有需要，完全可以插入更多状态。</p>\n<p>默认情况下，动画只播放一次。加入infinite关键字，可以让动画无限次播放。</p>\n<p>默认情况下，动画只播放一次。加入infinite关键字，可以让动画无限次播放。</p>\n<h4 id=\"animation-fill-mode\"><a href=\"#animation-fill-mode\" class=\"headerlink\" title=\"animation-fill-mode\"></a>animation-fill-mode</h4><p>动画结束以后，会立即从结束状态跳回到起始状态。如果想让动画保持在结束状态，需要使用animation-fill-mode属性。</p>\n<ul>\n<li>none: 默认值,回到动画没开始的状态;</li>\n<li>backwoards: 让动画回到第一帧的状态;</li>\n<li>both: 根据 animation-direction 轮流应用 forwards 和 backwards 规则.</li>\n</ul>\n<h4 id=\"animation-direction\"><a href=\"#animation-direction\" class=\"headerlink\" title=\"animation-direction\"></a>animation-direction</h4><p>动画循环播放时，每次都是从结束状态跳回到起始状态，再开始播放。animation-direction属性，可以改变这种行为。</p>\n<p>下面看一个例子，来说明如何使用animation-direction。假定有一个动画是这样定义的。</p>\n<pre><code>@keyframes rainbow {\n  0% { background-color: yellow; }\n  100% { background: blue; }\n}\n</code></pre><p>默认情况下, animation-direction 等于 normal.</p>\n<p>此外，还可以等于取alternate、reverse、alternate-reverse等值。它们的含义见下图（假定动画连续播放三次）。</p>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/201402/bg2014021401.png\" alt=\"\"></p>\n<h4 id=\"animation-的各项属性\"><a href=\"#animation-的各项属性\" class=\"headerlink\" title=\"animation 的各项属性\"></a>animation 的各项属性</h4><pre><code>div:hover {\n  animation: 1s 1s rainbow linear 3 forwards normal;\n}\n</code></pre><p>单独的属性:</p>\n<pre><code>div:hover {\n  animation-name: rainbow;\n  animation-duration: 1s;\n  animation-timing-function: linear;\n  animation-delay: 1s;\n    animation-fill-mode:forwards;\n  animation-direction: normal;\n  animation-iteration-count: 3;\n</code></pre><p>}</p>\n<h4 id=\"keyframes-的写法\"><a href=\"#keyframes-的写法\" class=\"headerlink\" title=\"keyframes 的写法\"></a>keyframes 的写法</h4><p>用于定义动画的各个状态:</p>\n<pre><code>@keyframes rainbow {\n  0% { background: #c00 }\n  50% { background: orange }\n  100% { background: yellowgreen }\n}\n</code></pre><p>或者:</p>\n<pre><code>@keyframes rainbow {\n  from { background: #c00 }\n  50% { background: orange }\n  to { background: yellowgreen }\n}\n</code></pre><p>如果省略某个状态，浏览器会自动推算中间状态，所以下面都是合法的写法。</p>\n<pre><code>@keyframes rainbow {\n  50% { background: orange }\n  to { background: yellowgreen }\n}\n\n@keyframes rainbow {\n  to { background: yellowgreen }\n}\n</code></pre><p>甚至，可以把多个状态写在一行。</p>\n<pre><code>@keyframes pound {\n  from，to { transform: none; }\n  50% { transform: scale(1.2); }\n}\n</code></pre><p>另外一点需要注意的是，浏览器从一个状态向另一个状态过渡，是平滑过渡。steps函数可以实现分步过渡。</p>\n<pre><code>div:hover {\n  animation: 1s rainbow infinite steps(10);\n}\n</code></pre><h4 id=\"animation-play-state\"><a href=\"#animation-play-state\" class=\"headerlink\" title=\"animation-play-state\"></a>animation-play-state</h4><p>如果想让动画保持突然终止时的状态，就要使用animation-play-state属性。</p>\n<pre><code>div {\n    animation: spin 1s linear infinite;\n    animation-play-state: paused;\n}\n\ndiv:hover {\n  animation-play-state: running;\n}\n</code></pre>"},{"title":"常用插件","_content":"\n## 时间插件\n\nmoment.js\n\n## 图标插件\n\nchart.js\n\n## 表格插件\n\ndatatable.js\n\n初始化:\n\n\t$('#table1').DataTable({\n\t\"oLanguage\": {\n\t\"oAria\": {\n\t\"sSortAscending\": \" - click/return to sort ascending\",\n\t\"sSortDescending\": \" - click/return to sort descending\"\n\t},\n\t\"sLengthMenu\": \"显示 _MENU_ 记录\",\n\t\"sZeroRecords\": \"对不起，查询不到任何相关数据\",\n\t\"sEmptyTable\": \"未查询到相关数据\",\n\t\"sLoadingRecords\": \"正在加载数据-请等待...\",\n\t\"sInfo\": \"当前显示 _START_ 到 _END_ 条，共 _TOTAL_ 条记录。\",\n\t\"sInfoEmpty\": \"当前显示0到0条，共0条记录\",\n\t\"sInfoFiltered\": \"（数据库中共为 _MAX_ 条记录）\",\n\t\"sSearch\": \"模糊查询：\",\n\t\"sUrl\": \"\",\n\t\"oPaginate\": {\n\t\"sFirst\": \"首页\",\n\t\"sPrevious\": \" 上一页 \",\n\t\"sNext\": \" 下一页 \",\n\t\"sLast\": \" 尾页 \"\n\t}\n\t}\n\t\n\t});\n\n## 日期选择插件\n\ndatetimepicker.js\n\n## video/audio插件\n\nvideo.js(播放rtmp流需要videojs-flash.js)\n\nvideo.js 加载新的信源:\n\n\tvar player = videojs('my-video');\n\tplayer.src(data);\n\tplayer.autoplay()\n\naudio.js\n\n","source":"_posts/2018.11.21plg.md","raw":"---\ntitle: 常用插件\ntags: [Plugin]\ncategories: 插件\n---\n\n## 时间插件\n\nmoment.js\n\n## 图标插件\n\nchart.js\n\n## 表格插件\n\ndatatable.js\n\n初始化:\n\n\t$('#table1').DataTable({\n\t\"oLanguage\": {\n\t\"oAria\": {\n\t\"sSortAscending\": \" - click/return to sort ascending\",\n\t\"sSortDescending\": \" - click/return to sort descending\"\n\t},\n\t\"sLengthMenu\": \"显示 _MENU_ 记录\",\n\t\"sZeroRecords\": \"对不起，查询不到任何相关数据\",\n\t\"sEmptyTable\": \"未查询到相关数据\",\n\t\"sLoadingRecords\": \"正在加载数据-请等待...\",\n\t\"sInfo\": \"当前显示 _START_ 到 _END_ 条，共 _TOTAL_ 条记录。\",\n\t\"sInfoEmpty\": \"当前显示0到0条，共0条记录\",\n\t\"sInfoFiltered\": \"（数据库中共为 _MAX_ 条记录）\",\n\t\"sSearch\": \"模糊查询：\",\n\t\"sUrl\": \"\",\n\t\"oPaginate\": {\n\t\"sFirst\": \"首页\",\n\t\"sPrevious\": \" 上一页 \",\n\t\"sNext\": \" 下一页 \",\n\t\"sLast\": \" 尾页 \"\n\t}\n\t}\n\t\n\t});\n\n## 日期选择插件\n\ndatetimepicker.js\n\n## video/audio插件\n\nvideo.js(播放rtmp流需要videojs-flash.js)\n\nvideo.js 加载新的信源:\n\n\tvar player = videojs('my-video');\n\tplayer.src(data);\n\tplayer.autoplay()\n\naudio.js\n\n","slug":"2018.11.21plg","published":1,"date":"2018-11-21T08:45:04.750Z","updated":"2018-11-21T08:55:00.169Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziipz000krh9zcggr3jj4","content":"<h2 id=\"时间插件\"><a href=\"#时间插件\" class=\"headerlink\" title=\"时间插件\"></a>时间插件</h2><p>moment.js</p>\n<h2 id=\"图标插件\"><a href=\"#图标插件\" class=\"headerlink\" title=\"图标插件\"></a>图标插件</h2><p>chart.js</p>\n<h2 id=\"表格插件\"><a href=\"#表格插件\" class=\"headerlink\" title=\"表格插件\"></a>表格插件</h2><p>datatable.js</p>\n<p>初始化:</p>\n<pre><code>$(&apos;#table1&apos;).DataTable({\n&quot;oLanguage&quot;: {\n&quot;oAria&quot;: {\n&quot;sSortAscending&quot;: &quot; - click/return to sort ascending&quot;,\n&quot;sSortDescending&quot;: &quot; - click/return to sort descending&quot;\n},\n&quot;sLengthMenu&quot;: &quot;显示 _MENU_ 记录&quot;,\n&quot;sZeroRecords&quot;: &quot;对不起，查询不到任何相关数据&quot;,\n&quot;sEmptyTable&quot;: &quot;未查询到相关数据&quot;,\n&quot;sLoadingRecords&quot;: &quot;正在加载数据-请等待...&quot;,\n&quot;sInfo&quot;: &quot;当前显示 _START_ 到 _END_ 条，共 _TOTAL_ 条记录。&quot;,\n&quot;sInfoEmpty&quot;: &quot;当前显示0到0条，共0条记录&quot;,\n&quot;sInfoFiltered&quot;: &quot;（数据库中共为 _MAX_ 条记录）&quot;,\n&quot;sSearch&quot;: &quot;模糊查询：&quot;,\n&quot;sUrl&quot;: &quot;&quot;,\n&quot;oPaginate&quot;: {\n&quot;sFirst&quot;: &quot;首页&quot;,\n&quot;sPrevious&quot;: &quot; 上一页 &quot;,\n&quot;sNext&quot;: &quot; 下一页 &quot;,\n&quot;sLast&quot;: &quot; 尾页 &quot;\n}\n}\n\n});\n</code></pre><h2 id=\"日期选择插件\"><a href=\"#日期选择插件\" class=\"headerlink\" title=\"日期选择插件\"></a>日期选择插件</h2><p>datetimepicker.js</p>\n<h2 id=\"video-audio插件\"><a href=\"#video-audio插件\" class=\"headerlink\" title=\"video/audio插件\"></a>video/audio插件</h2><p>video.js(播放rtmp流需要videojs-flash.js)</p>\n<p>video.js 加载新的信源:</p>\n<pre><code>var player = videojs(&apos;my-video&apos;);\nplayer.src(data);\nplayer.autoplay()\n</code></pre><p>audio.js</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"时间插件\"><a href=\"#时间插件\" class=\"headerlink\" title=\"时间插件\"></a>时间插件</h2><p>moment.js</p>\n<h2 id=\"图标插件\"><a href=\"#图标插件\" class=\"headerlink\" title=\"图标插件\"></a>图标插件</h2><p>chart.js</p>\n<h2 id=\"表格插件\"><a href=\"#表格插件\" class=\"headerlink\" title=\"表格插件\"></a>表格插件</h2><p>datatable.js</p>\n<p>初始化:</p>\n<pre><code>$(&apos;#table1&apos;).DataTable({\n&quot;oLanguage&quot;: {\n&quot;oAria&quot;: {\n&quot;sSortAscending&quot;: &quot; - click/return to sort ascending&quot;,\n&quot;sSortDescending&quot;: &quot; - click/return to sort descending&quot;\n},\n&quot;sLengthMenu&quot;: &quot;显示 _MENU_ 记录&quot;,\n&quot;sZeroRecords&quot;: &quot;对不起，查询不到任何相关数据&quot;,\n&quot;sEmptyTable&quot;: &quot;未查询到相关数据&quot;,\n&quot;sLoadingRecords&quot;: &quot;正在加载数据-请等待...&quot;,\n&quot;sInfo&quot;: &quot;当前显示 _START_ 到 _END_ 条，共 _TOTAL_ 条记录。&quot;,\n&quot;sInfoEmpty&quot;: &quot;当前显示0到0条，共0条记录&quot;,\n&quot;sInfoFiltered&quot;: &quot;（数据库中共为 _MAX_ 条记录）&quot;,\n&quot;sSearch&quot;: &quot;模糊查询：&quot;,\n&quot;sUrl&quot;: &quot;&quot;,\n&quot;oPaginate&quot;: {\n&quot;sFirst&quot;: &quot;首页&quot;,\n&quot;sPrevious&quot;: &quot; 上一页 &quot;,\n&quot;sNext&quot;: &quot; 下一页 &quot;,\n&quot;sLast&quot;: &quot; 尾页 &quot;\n}\n}\n\n});\n</code></pre><h2 id=\"日期选择插件\"><a href=\"#日期选择插件\" class=\"headerlink\" title=\"日期选择插件\"></a>日期选择插件</h2><p>datetimepicker.js</p>\n<h2 id=\"video-audio插件\"><a href=\"#video-audio插件\" class=\"headerlink\" title=\"video/audio插件\"></a>video/audio插件</h2><p>video.js(播放rtmp流需要videojs-flash.js)</p>\n<p>video.js 加载新的信源:</p>\n<pre><code>var player = videojs(&apos;my-video&apos;);\nplayer.src(data);\nplayer.autoplay()\n</code></pre><p>audio.js</p>\n"},{"title":"HTTP 协议","_content":"# HTTP 简介\n\nHTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。\n\nHTTP 基于 TCP/IP 通信协议来传递数据.\n\nHTTP 协议工作在客户端,服务端架构上,浏览器作为 HTTP 客户端通过 URL 向 HTTP 服务端 ,即 web 服务器发送所有请求, web 服务器接收到请求后,向客户端发送响应信息.\n\n# 主要特点\n\n* 简单快速:客户端向服务端请求服务时,只需传送请求方法和路径,请求方法常用的有 GET,HEAD,POST.由于 HTTP 协议简单,是的 HTTP 服务器的程序规模很小,因而通信速度很快.\n* 灵活:允许传输任意类型的数据对象,正在传输的类型由 content-type 家已标记;\n* 无连接,服务器处理完一次客户端的请求并受到应答之后,即断开链接;\n* 无状态:协议对于事务处理没有记忆能力,意味着如果后续需要处理前面的信息,必须重传.\n* 支持 B/S 与 C/S 架构.\n\n# HTTP 中的 URL\n\nURL,全称是UniformResourceLocator, 中文叫统一资源定位符,是互联网上用来标识某一处资源的地址。以下面这个URL为例，介绍下普通URL的各部分组成：\n\nhttp://www.aspxfans.com:8080/news/index.asp?boardID=5&ID=24618&page=1#name\n\n* 1.协议部分:\"http:\",代表网页使用的是http协议,在后面加入\"//\"分隔符;\n* 2.域名部分:该 URL 的域名为:\"www.aspxfans.com\" ,一个 url 中,也可以使用ip 作为域名使用;\n* 3.端口部分,\":8080\"为端口,如果省略端口则采用默认端口;\n* 4.虚拟目录部分:\"/news/\" , 虚拟目录不是一个 url 的必须部分;\n* 5.文件名部分:\"index.jsp\" ,如省略则使用默认文件名;\n* 6.锚⚓️部分: \"#name\",非必须;\n* 7.参数部分: 从 ? 开始 ,到 # 结束 为止,之间的部分.允许有多个参数,参数与参数之间用 & 作为分隔符.\n\n# HTTP request\n\n 客户端发送到服务端的 HTTP 请求如下包括以下格式:\n\n![HTTP 报文格式](https://segmentfault.com/img/bVGuNT?w=466&h=165)\n\n一个HTTP 请求如下:\n\nGET /562f25980001b1b106000338.jpg HTTP/1.1\nHost    img.mukewang.com\nUser-Agent  Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36\nAccept  image/webp,image/*,*/*;q=0.8\nReferer http://www.imooc.com/\nAccept-Encoding gzip, deflate, sdch\nAccept-Language zh-CN,zh;q=0.8\n\n## 请求行\n\n请求行以一个方法符号开头,以空格分开,后面跟着 URL 和协议的版本.用来说明请求类型,要访问的资源以及所使用的 HTTP 版本.\n\n## 请求头\n\n host: 指出 请求目的地;\n useragent: 浏览器类型检测需要的数据;\n\n## 空行\n\n请求头后面必须的部分;\n\n## 请求体\n\n请求数据也叫主体,可以添加任意数据.\n\n# HTTP response\n\n![](https://segmentfault.com/img/remote/1460000006760783)\n\n\tHTTP/1.1 200 OK\n\tDate: Fri, 22 May 2009 06:07:21 GMT\n\tContent-Type: text/html; charset=UTF-8\n\t\n\t<html>\n\t      <head></head>\n\t      <body>\n\t            <!--body goes here-->\n\t      </body>\n\t</html>\n\n## 状态行\n\n由 HTTP 协议版本号,状态码,状态消息组成;\n\n## 消息报头\n\n用来说明客户端要使用的附加信息;\n\n## 空行\n\n消息报头后面的空行是必须的.\n\n## 响应正文\n\n服务器返回给客户端的文本信息,空行后面的 html 部分为响应正文.\n\n#  HTTP 状态码\n\n[见这篇文章](https://hhb1994.github.io/2017/04/03/2017-04-03httpcode/)","source":"_posts/2018.11.23.HTTP.md","raw":"---\ntitle: HTTP 协议\ntags: [HTTP]\ncategories: 知识 \n---\n# HTTP 简介\n\nHTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。\n\nHTTP 基于 TCP/IP 通信协议来传递数据.\n\nHTTP 协议工作在客户端,服务端架构上,浏览器作为 HTTP 客户端通过 URL 向 HTTP 服务端 ,即 web 服务器发送所有请求, web 服务器接收到请求后,向客户端发送响应信息.\n\n# 主要特点\n\n* 简单快速:客户端向服务端请求服务时,只需传送请求方法和路径,请求方法常用的有 GET,HEAD,POST.由于 HTTP 协议简单,是的 HTTP 服务器的程序规模很小,因而通信速度很快.\n* 灵活:允许传输任意类型的数据对象,正在传输的类型由 content-type 家已标记;\n* 无连接,服务器处理完一次客户端的请求并受到应答之后,即断开链接;\n* 无状态:协议对于事务处理没有记忆能力,意味着如果后续需要处理前面的信息,必须重传.\n* 支持 B/S 与 C/S 架构.\n\n# HTTP 中的 URL\n\nURL,全称是UniformResourceLocator, 中文叫统一资源定位符,是互联网上用来标识某一处资源的地址。以下面这个URL为例，介绍下普通URL的各部分组成：\n\nhttp://www.aspxfans.com:8080/news/index.asp?boardID=5&ID=24618&page=1#name\n\n* 1.协议部分:\"http:\",代表网页使用的是http协议,在后面加入\"//\"分隔符;\n* 2.域名部分:该 URL 的域名为:\"www.aspxfans.com\" ,一个 url 中,也可以使用ip 作为域名使用;\n* 3.端口部分,\":8080\"为端口,如果省略端口则采用默认端口;\n* 4.虚拟目录部分:\"/news/\" , 虚拟目录不是一个 url 的必须部分;\n* 5.文件名部分:\"index.jsp\" ,如省略则使用默认文件名;\n* 6.锚⚓️部分: \"#name\",非必须;\n* 7.参数部分: 从 ? 开始 ,到 # 结束 为止,之间的部分.允许有多个参数,参数与参数之间用 & 作为分隔符.\n\n# HTTP request\n\n 客户端发送到服务端的 HTTP 请求如下包括以下格式:\n\n![HTTP 报文格式](https://segmentfault.com/img/bVGuNT?w=466&h=165)\n\n一个HTTP 请求如下:\n\nGET /562f25980001b1b106000338.jpg HTTP/1.1\nHost    img.mukewang.com\nUser-Agent  Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36\nAccept  image/webp,image/*,*/*;q=0.8\nReferer http://www.imooc.com/\nAccept-Encoding gzip, deflate, sdch\nAccept-Language zh-CN,zh;q=0.8\n\n## 请求行\n\n请求行以一个方法符号开头,以空格分开,后面跟着 URL 和协议的版本.用来说明请求类型,要访问的资源以及所使用的 HTTP 版本.\n\n## 请求头\n\n host: 指出 请求目的地;\n useragent: 浏览器类型检测需要的数据;\n\n## 空行\n\n请求头后面必须的部分;\n\n## 请求体\n\n请求数据也叫主体,可以添加任意数据.\n\n# HTTP response\n\n![](https://segmentfault.com/img/remote/1460000006760783)\n\n\tHTTP/1.1 200 OK\n\tDate: Fri, 22 May 2009 06:07:21 GMT\n\tContent-Type: text/html; charset=UTF-8\n\t\n\t<html>\n\t      <head></head>\n\t      <body>\n\t            <!--body goes here-->\n\t      </body>\n\t</html>\n\n## 状态行\n\n由 HTTP 协议版本号,状态码,状态消息组成;\n\n## 消息报头\n\n用来说明客户端要使用的附加信息;\n\n## 空行\n\n消息报头后面的空行是必须的.\n\n## 响应正文\n\n服务器返回给客户端的文本信息,空行后面的 html 部分为响应正文.\n\n#  HTTP 状态码\n\n[见这篇文章](https://hhb1994.github.io/2017/04/03/2017-04-03httpcode/)","slug":"2018.11.23.HTTP","published":1,"date":"2018-11-23T08:14:02.003Z","updated":"2018-11-26T01:23:16.604Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziipz000lrh9zhg70c1yg","content":"<h1 id=\"HTTP-简介\"><a href=\"#HTTP-简介\" class=\"headerlink\" title=\"HTTP 简介\"></a>HTTP 简介</h1><p>HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。</p>\n<p>HTTP 基于 TCP/IP 通信协议来传递数据.</p>\n<p>HTTP 协议工作在客户端,服务端架构上,浏览器作为 HTTP 客户端通过 URL 向 HTTP 服务端 ,即 web 服务器发送所有请求, web 服务器接收到请求后,向客户端发送响应信息.</p>\n<h1 id=\"主要特点\"><a href=\"#主要特点\" class=\"headerlink\" title=\"主要特点\"></a>主要特点</h1><ul>\n<li>简单快速:客户端向服务端请求服务时,只需传送请求方法和路径,请求方法常用的有 GET,HEAD,POST.由于 HTTP 协议简单,是的 HTTP 服务器的程序规模很小,因而通信速度很快.</li>\n<li>灵活:允许传输任意类型的数据对象,正在传输的类型由 content-type 家已标记;</li>\n<li>无连接,服务器处理完一次客户端的请求并受到应答之后,即断开链接;</li>\n<li>无状态:协议对于事务处理没有记忆能力,意味着如果后续需要处理前面的信息,必须重传.</li>\n<li>支持 B/S 与 C/S 架构.</li>\n</ul>\n<h1 id=\"HTTP-中的-URL\"><a href=\"#HTTP-中的-URL\" class=\"headerlink\" title=\"HTTP 中的 URL\"></a>HTTP 中的 URL</h1><p>URL,全称是UniformResourceLocator, 中文叫统一资源定位符,是互联网上用来标识某一处资源的地址。以下面这个URL为例，介绍下普通URL的各部分组成：</p>\n<p><a href=\"http://www.aspxfans.com:8080/news/index.asp?boardID=5&amp;ID=24618&amp;page=1#name\" target=\"_blank\" rel=\"noopener\">http://www.aspxfans.com:8080/news/index.asp?boardID=5&amp;ID=24618&amp;page=1#name</a></p>\n<ul>\n<li>1.协议部分:”http:”,代表网页使用的是http协议,在后面加入”//“分隔符;</li>\n<li>2.域名部分:该 URL 的域名为:”www.aspxfans.com” ,一个 url 中,也可以使用ip 作为域名使用;</li>\n<li>3.端口部分,”:8080”为端口,如果省略端口则采用默认端口;</li>\n<li>4.虚拟目录部分:”/news/“ , 虚拟目录不是一个 url 的必须部分;</li>\n<li>5.文件名部分:”index.jsp” ,如省略则使用默认文件名;</li>\n<li>6.锚⚓️部分: “#name”,非必须;</li>\n<li>7.参数部分: 从 ? 开始 ,到 # 结束 为止,之间的部分.允许有多个参数,参数与参数之间用 &amp; 作为分隔符.</li>\n</ul>\n<h1 id=\"HTTP-request\"><a href=\"#HTTP-request\" class=\"headerlink\" title=\"HTTP request\"></a>HTTP request</h1><p> 客户端发送到服务端的 HTTP 请求如下包括以下格式:</p>\n<p><img src=\"https://segmentfault.com/img/bVGuNT?w=466&amp;h=165\" alt=\"HTTP 报文格式\"></p>\n<p>一个HTTP 请求如下:</p>\n<p>GET /562f25980001b1b106000338.jpg HTTP/1.1<br>Host    img.mukewang.com<br>User-Agent  Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36<br>Accept  image/webp,image/<em>,</em>/*;q=0.8<br>Referer <a href=\"http://www.imooc.com/\" target=\"_blank\" rel=\"noopener\">http://www.imooc.com/</a><br>Accept-Encoding gzip, deflate, sdch<br>Accept-Language zh-CN,zh;q=0.8</p>\n<h2 id=\"请求行\"><a href=\"#请求行\" class=\"headerlink\" title=\"请求行\"></a>请求行</h2><p>请求行以一个方法符号开头,以空格分开,后面跟着 URL 和协议的版本.用来说明请求类型,要访问的资源以及所使用的 HTTP 版本.</p>\n<h2 id=\"请求头\"><a href=\"#请求头\" class=\"headerlink\" title=\"请求头\"></a>请求头</h2><p> host: 指出 请求目的地;<br> useragent: 浏览器类型检测需要的数据;</p>\n<h2 id=\"空行\"><a href=\"#空行\" class=\"headerlink\" title=\"空行\"></a>空行</h2><p>请求头后面必须的部分;</p>\n<h2 id=\"请求体\"><a href=\"#请求体\" class=\"headerlink\" title=\"请求体\"></a>请求体</h2><p>请求数据也叫主体,可以添加任意数据.</p>\n<h1 id=\"HTTP-response\"><a href=\"#HTTP-response\" class=\"headerlink\" title=\"HTTP response\"></a>HTTP response</h1><p><img src=\"https://segmentfault.com/img/remote/1460000006760783\" alt=\"\"></p>\n<pre><code>HTTP/1.1 200 OK\nDate: Fri, 22 May 2009 06:07:21 GMT\nContent-Type: text/html; charset=UTF-8\n\n&lt;html&gt;\n      &lt;head&gt;&lt;/head&gt;\n      &lt;body&gt;\n            &lt;!--body goes here--&gt;\n      &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><h2 id=\"状态行\"><a href=\"#状态行\" class=\"headerlink\" title=\"状态行\"></a>状态行</h2><p>由 HTTP 协议版本号,状态码,状态消息组成;</p>\n<h2 id=\"消息报头\"><a href=\"#消息报头\" class=\"headerlink\" title=\"消息报头\"></a>消息报头</h2><p>用来说明客户端要使用的附加信息;</p>\n<h2 id=\"空行-1\"><a href=\"#空行-1\" class=\"headerlink\" title=\"空行\"></a>空行</h2><p>消息报头后面的空行是必须的.</p>\n<h2 id=\"响应正文\"><a href=\"#响应正文\" class=\"headerlink\" title=\"响应正文\"></a>响应正文</h2><p>服务器返回给客户端的文本信息,空行后面的 html 部分为响应正文.</p>\n<h1 id=\"HTTP-状态码\"><a href=\"#HTTP-状态码\" class=\"headerlink\" title=\"HTTP 状态码\"></a>HTTP 状态码</h1><p><a href=\"https://hhb1994.github.io/2017/04/03/2017-04-03httpcode/\" target=\"_blank\" rel=\"noopener\">见这篇文章</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"HTTP-简介\"><a href=\"#HTTP-简介\" class=\"headerlink\" title=\"HTTP 简介\"></a>HTTP 简介</h1><p>HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。</p>\n<p>HTTP 基于 TCP/IP 通信协议来传递数据.</p>\n<p>HTTP 协议工作在客户端,服务端架构上,浏览器作为 HTTP 客户端通过 URL 向 HTTP 服务端 ,即 web 服务器发送所有请求, web 服务器接收到请求后,向客户端发送响应信息.</p>\n<h1 id=\"主要特点\"><a href=\"#主要特点\" class=\"headerlink\" title=\"主要特点\"></a>主要特点</h1><ul>\n<li>简单快速:客户端向服务端请求服务时,只需传送请求方法和路径,请求方法常用的有 GET,HEAD,POST.由于 HTTP 协议简单,是的 HTTP 服务器的程序规模很小,因而通信速度很快.</li>\n<li>灵活:允许传输任意类型的数据对象,正在传输的类型由 content-type 家已标记;</li>\n<li>无连接,服务器处理完一次客户端的请求并受到应答之后,即断开链接;</li>\n<li>无状态:协议对于事务处理没有记忆能力,意味着如果后续需要处理前面的信息,必须重传.</li>\n<li>支持 B/S 与 C/S 架构.</li>\n</ul>\n<h1 id=\"HTTP-中的-URL\"><a href=\"#HTTP-中的-URL\" class=\"headerlink\" title=\"HTTP 中的 URL\"></a>HTTP 中的 URL</h1><p>URL,全称是UniformResourceLocator, 中文叫统一资源定位符,是互联网上用来标识某一处资源的地址。以下面这个URL为例，介绍下普通URL的各部分组成：</p>\n<p><a href=\"http://www.aspxfans.com:8080/news/index.asp?boardID=5&amp;ID=24618&amp;page=1#name\" target=\"_blank\" rel=\"noopener\">http://www.aspxfans.com:8080/news/index.asp?boardID=5&amp;ID=24618&amp;page=1#name</a></p>\n<ul>\n<li>1.协议部分:”http:”,代表网页使用的是http协议,在后面加入”//“分隔符;</li>\n<li>2.域名部分:该 URL 的域名为:”www.aspxfans.com” ,一个 url 中,也可以使用ip 作为域名使用;</li>\n<li>3.端口部分,”:8080”为端口,如果省略端口则采用默认端口;</li>\n<li>4.虚拟目录部分:”/news/“ , 虚拟目录不是一个 url 的必须部分;</li>\n<li>5.文件名部分:”index.jsp” ,如省略则使用默认文件名;</li>\n<li>6.锚⚓️部分: “#name”,非必须;</li>\n<li>7.参数部分: 从 ? 开始 ,到 # 结束 为止,之间的部分.允许有多个参数,参数与参数之间用 &amp; 作为分隔符.</li>\n</ul>\n<h1 id=\"HTTP-request\"><a href=\"#HTTP-request\" class=\"headerlink\" title=\"HTTP request\"></a>HTTP request</h1><p> 客户端发送到服务端的 HTTP 请求如下包括以下格式:</p>\n<p><img src=\"https://segmentfault.com/img/bVGuNT?w=466&amp;h=165\" alt=\"HTTP 报文格式\"></p>\n<p>一个HTTP 请求如下:</p>\n<p>GET /562f25980001b1b106000338.jpg HTTP/1.1<br>Host    img.mukewang.com<br>User-Agent  Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36<br>Accept  image/webp,image/<em>,</em>/*;q=0.8<br>Referer <a href=\"http://www.imooc.com/\" target=\"_blank\" rel=\"noopener\">http://www.imooc.com/</a><br>Accept-Encoding gzip, deflate, sdch<br>Accept-Language zh-CN,zh;q=0.8</p>\n<h2 id=\"请求行\"><a href=\"#请求行\" class=\"headerlink\" title=\"请求行\"></a>请求行</h2><p>请求行以一个方法符号开头,以空格分开,后面跟着 URL 和协议的版本.用来说明请求类型,要访问的资源以及所使用的 HTTP 版本.</p>\n<h2 id=\"请求头\"><a href=\"#请求头\" class=\"headerlink\" title=\"请求头\"></a>请求头</h2><p> host: 指出 请求目的地;<br> useragent: 浏览器类型检测需要的数据;</p>\n<h2 id=\"空行\"><a href=\"#空行\" class=\"headerlink\" title=\"空行\"></a>空行</h2><p>请求头后面必须的部分;</p>\n<h2 id=\"请求体\"><a href=\"#请求体\" class=\"headerlink\" title=\"请求体\"></a>请求体</h2><p>请求数据也叫主体,可以添加任意数据.</p>\n<h1 id=\"HTTP-response\"><a href=\"#HTTP-response\" class=\"headerlink\" title=\"HTTP response\"></a>HTTP response</h1><p><img src=\"https://segmentfault.com/img/remote/1460000006760783\" alt=\"\"></p>\n<pre><code>HTTP/1.1 200 OK\nDate: Fri, 22 May 2009 06:07:21 GMT\nContent-Type: text/html; charset=UTF-8\n\n&lt;html&gt;\n      &lt;head&gt;&lt;/head&gt;\n      &lt;body&gt;\n            &lt;!--body goes here--&gt;\n      &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><h2 id=\"状态行\"><a href=\"#状态行\" class=\"headerlink\" title=\"状态行\"></a>状态行</h2><p>由 HTTP 协议版本号,状态码,状态消息组成;</p>\n<h2 id=\"消息报头\"><a href=\"#消息报头\" class=\"headerlink\" title=\"消息报头\"></a>消息报头</h2><p>用来说明客户端要使用的附加信息;</p>\n<h2 id=\"空行-1\"><a href=\"#空行-1\" class=\"headerlink\" title=\"空行\"></a>空行</h2><p>消息报头后面的空行是必须的.</p>\n<h2 id=\"响应正文\"><a href=\"#响应正文\" class=\"headerlink\" title=\"响应正文\"></a>响应正文</h2><p>服务器返回给客户端的文本信息,空行后面的 html 部分为响应正文.</p>\n<h1 id=\"HTTP-状态码\"><a href=\"#HTTP-状态码\" class=\"headerlink\" title=\"HTTP 状态码\"></a>HTTP 状态码</h1><p><a href=\"https://hhb1994.github.io/2017/04/03/2017-04-03httpcode/\" target=\"_blank\" rel=\"noopener\">见这篇文章</a></p>\n"},{"title":"门户设计","_content":"\n# 门户设计\n\n## 视频作为网页背景\n\n\t#zglyvideo{\n\t    position: fixed; right: 0; bottom: 0;\n\t    min-width: 100%; min-height: 100%;\n\t    width: auto; height: auto; z-index: -100;\n\t}\n\n将视频的位置设置为 fixed, min-width/min-height设置为 100% ,同时 z-index 设置为 -100.\n\n## animate.css\n\n使用 animate.css 设置动画:\n\n\t<h4 class=\"\"animated fadeInUp>fadeInUp</h4>\n\n## 使用 css3 animate 做出文字输入效果\n\n\th1{\n\t    border-right: .1em solid;\n\t    display: block;\n\t    margin-left: auto;\n\t    margin-right: auto;\n\t    color: white;\n\t    font-weight:  700;\n\t    font-size: 5rem;\n\t    margin-top: 14rem;\n\t    text-shadow: 2px 4px 3px rgba(0,0,0,0.3);\n\t    width: 24rem;\n\t    white-space: nowrap;\n\t    overflow: hidden;\n\t    animation: typing  2.6s steps(4,end),\n\t    blink-caret .5s step-end infinite alternate;\n\t\n\t}\n\t\n\t@keyframes typing {\n\t    from{width: 0}\n\t}\n\t@keyframes blink-caret { 50% { border-color: transparent; } }\n\n### typeing \n\n实现文字输入效果,如果一共有四个字符需要展示,设置动画时长为 2.6s;\n\n\nsteps(4,end)代表动画分四步进行;\n\nh1的 width 从 0 到 24 rem 过渡\n\n### blink-caret\n\n 实现光标闪烁效果.","source":"_posts/2018.11.29portal.md","raw":"---\ntitle: 门户设计\ntags: [portal]\ncategories: 知识 \n---\n\n# 门户设计\n\n## 视频作为网页背景\n\n\t#zglyvideo{\n\t    position: fixed; right: 0; bottom: 0;\n\t    min-width: 100%; min-height: 100%;\n\t    width: auto; height: auto; z-index: -100;\n\t}\n\n将视频的位置设置为 fixed, min-width/min-height设置为 100% ,同时 z-index 设置为 -100.\n\n## animate.css\n\n使用 animate.css 设置动画:\n\n\t<h4 class=\"\"animated fadeInUp>fadeInUp</h4>\n\n## 使用 css3 animate 做出文字输入效果\n\n\th1{\n\t    border-right: .1em solid;\n\t    display: block;\n\t    margin-left: auto;\n\t    margin-right: auto;\n\t    color: white;\n\t    font-weight:  700;\n\t    font-size: 5rem;\n\t    margin-top: 14rem;\n\t    text-shadow: 2px 4px 3px rgba(0,0,0,0.3);\n\t    width: 24rem;\n\t    white-space: nowrap;\n\t    overflow: hidden;\n\t    animation: typing  2.6s steps(4,end),\n\t    blink-caret .5s step-end infinite alternate;\n\t\n\t}\n\t\n\t@keyframes typing {\n\t    from{width: 0}\n\t}\n\t@keyframes blink-caret { 50% { border-color: transparent; } }\n\n### typeing \n\n实现文字输入效果,如果一共有四个字符需要展示,设置动画时长为 2.6s;\n\n\nsteps(4,end)代表动画分四步进行;\n\nh1的 width 从 0 到 24 rem 过渡\n\n### blink-caret\n\n 实现光标闪烁效果.","slug":"2018.11.29portal","published":1,"date":"2018-11-29T02:58:19.264Z","updated":"2018-11-29T07:11:09.150Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziiq0000mrh9z6ng0aut1","content":"<h1 id=\"门户设计\"><a href=\"#门户设计\" class=\"headerlink\" title=\"门户设计\"></a>门户设计</h1><h2 id=\"视频作为网页背景\"><a href=\"#视频作为网页背景\" class=\"headerlink\" title=\"视频作为网页背景\"></a>视频作为网页背景</h2><pre><code>#zglyvideo{\n    position: fixed; right: 0; bottom: 0;\n    min-width: 100%; min-height: 100%;\n    width: auto; height: auto; z-index: -100;\n}\n</code></pre><p>将视频的位置设置为 fixed, min-width/min-height设置为 100% ,同时 z-index 设置为 -100.</p>\n<h2 id=\"animate-css\"><a href=\"#animate-css\" class=\"headerlink\" title=\"animate.css\"></a>animate.css</h2><p>使用 animate.css 设置动画:</p>\n<pre><code>&lt;h4 class=&quot;&quot;animated fadeInUp&gt;fadeInUp&lt;/h4&gt;\n</code></pre><h2 id=\"使用-css3-animate-做出文字输入效果\"><a href=\"#使用-css3-animate-做出文字输入效果\" class=\"headerlink\" title=\"使用 css3 animate 做出文字输入效果\"></a>使用 css3 animate 做出文字输入效果</h2><pre><code>h1{\n    border-right: .1em solid;\n    display: block;\n    margin-left: auto;\n    margin-right: auto;\n    color: white;\n    font-weight:  700;\n    font-size: 5rem;\n    margin-top: 14rem;\n    text-shadow: 2px 4px 3px rgba(0,0,0,0.3);\n    width: 24rem;\n    white-space: nowrap;\n    overflow: hidden;\n    animation: typing  2.6s steps(4,end),\n    blink-caret .5s step-end infinite alternate;\n\n}\n\n@keyframes typing {\n    from{width: 0}\n}\n@keyframes blink-caret { 50% { border-color: transparent; } }\n</code></pre><h3 id=\"typeing\"><a href=\"#typeing\" class=\"headerlink\" title=\"typeing\"></a>typeing</h3><p>实现文字输入效果,如果一共有四个字符需要展示,设置动画时长为 2.6s;</p>\n<p>steps(4,end)代表动画分四步进行;</p>\n<p>h1的 width 从 0 到 24 rem 过渡</p>\n<h3 id=\"blink-caret\"><a href=\"#blink-caret\" class=\"headerlink\" title=\"blink-caret\"></a>blink-caret</h3><p> 实现光标闪烁效果.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"门户设计\"><a href=\"#门户设计\" class=\"headerlink\" title=\"门户设计\"></a>门户设计</h1><h2 id=\"视频作为网页背景\"><a href=\"#视频作为网页背景\" class=\"headerlink\" title=\"视频作为网页背景\"></a>视频作为网页背景</h2><pre><code>#zglyvideo{\n    position: fixed; right: 0; bottom: 0;\n    min-width: 100%; min-height: 100%;\n    width: auto; height: auto; z-index: -100;\n}\n</code></pre><p>将视频的位置设置为 fixed, min-width/min-height设置为 100% ,同时 z-index 设置为 -100.</p>\n<h2 id=\"animate-css\"><a href=\"#animate-css\" class=\"headerlink\" title=\"animate.css\"></a>animate.css</h2><p>使用 animate.css 设置动画:</p>\n<pre><code>&lt;h4 class=&quot;&quot;animated fadeInUp&gt;fadeInUp&lt;/h4&gt;\n</code></pre><h2 id=\"使用-css3-animate-做出文字输入效果\"><a href=\"#使用-css3-animate-做出文字输入效果\" class=\"headerlink\" title=\"使用 css3 animate 做出文字输入效果\"></a>使用 css3 animate 做出文字输入效果</h2><pre><code>h1{\n    border-right: .1em solid;\n    display: block;\n    margin-left: auto;\n    margin-right: auto;\n    color: white;\n    font-weight:  700;\n    font-size: 5rem;\n    margin-top: 14rem;\n    text-shadow: 2px 4px 3px rgba(0,0,0,0.3);\n    width: 24rem;\n    white-space: nowrap;\n    overflow: hidden;\n    animation: typing  2.6s steps(4,end),\n    blink-caret .5s step-end infinite alternate;\n\n}\n\n@keyframes typing {\n    from{width: 0}\n}\n@keyframes blink-caret { 50% { border-color: transparent; } }\n</code></pre><h3 id=\"typeing\"><a href=\"#typeing\" class=\"headerlink\" title=\"typeing\"></a>typeing</h3><p>实现文字输入效果,如果一共有四个字符需要展示,设置动画时长为 2.6s;</p>\n<p>steps(4,end)代表动画分四步进行;</p>\n<p>h1的 width 从 0 到 24 rem 过渡</p>\n<h3 id=\"blink-caret\"><a href=\"#blink-caret\" class=\"headerlink\" title=\"blink-caret\"></a>blink-caret</h3><p> 实现光标闪烁效果.</p>\n"},{"title":"滚动监听","_content":"\n在进行网页设计的时候,有一个需求就是在网页滚动到指定位置时执行特定的操作,这时候就需要用到滚动监听.\n\n# scrollTop\n\nJavaScript 的原生方法,获取滚动距离:\n\n\tvar scrollTop = document.documentElement.scrollTop || document.body.scrollTop;\n\tconsole.log(\"滚动距离\" + scrollTop);\n\n为保证兼容性.使用`document.documentElement.scrollTop || document.body.scrollTop`\n\n# ScrollWatch\n\n使用[ScrollWatch](https://edull24.github.io/ScrollWatch/)插件来实现指定位置的滚动监听.\n当需要监听的元素进入视野时,会给元素添加scroll-watch-in-view 的 class, 元素离开视野时添加 scroll-watch-ignore class.\n\n在需要监听的元素上添加data-scroll-watch属性,并进行初始化:\n\n\tvar sw = new ScrollWatch({\n\t                        watchOnce: false,\n\t                        infiniteScroll: false,\n\t                        // infiniteOffset: 50,\n\t                        inViewClass: 'fadeInUp',\n\t                        onElementInView: function(data) {\n\t                            console.log(data.el, '...is now in view');\n\t                            data.el.classList.add(\"\");\n\t                        }\n\t                    });\n\n* watchonce:监听一次,如果设置为 true,则每次 inview 都会触发;\n* inviewClass: 进入视野时要添加的类;\n* onElementInView:进入视野时的回调函数.","source":"_posts/2018.11.30.ScrollWatch.md","raw":"---\ntitle: 滚动监听\ntags: [ScrollWatch]\ncategories: 知识 \n---\n\n在进行网页设计的时候,有一个需求就是在网页滚动到指定位置时执行特定的操作,这时候就需要用到滚动监听.\n\n# scrollTop\n\nJavaScript 的原生方法,获取滚动距离:\n\n\tvar scrollTop = document.documentElement.scrollTop || document.body.scrollTop;\n\tconsole.log(\"滚动距离\" + scrollTop);\n\n为保证兼容性.使用`document.documentElement.scrollTop || document.body.scrollTop`\n\n# ScrollWatch\n\n使用[ScrollWatch](https://edull24.github.io/ScrollWatch/)插件来实现指定位置的滚动监听.\n当需要监听的元素进入视野时,会给元素添加scroll-watch-in-view 的 class, 元素离开视野时添加 scroll-watch-ignore class.\n\n在需要监听的元素上添加data-scroll-watch属性,并进行初始化:\n\n\tvar sw = new ScrollWatch({\n\t                        watchOnce: false,\n\t                        infiniteScroll: false,\n\t                        // infiniteOffset: 50,\n\t                        inViewClass: 'fadeInUp',\n\t                        onElementInView: function(data) {\n\t                            console.log(data.el, '...is now in view');\n\t                            data.el.classList.add(\"\");\n\t                        }\n\t                    });\n\n* watchonce:监听一次,如果设置为 true,则每次 inview 都会触发;\n* inviewClass: 进入视野时要添加的类;\n* onElementInView:进入视野时的回调函数.","slug":"2018.11.30.ScrollWatch","published":1,"date":"2018-11-30T02:07:37.326Z","updated":"2018-11-30T02:27:24.518Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziiq0000nrh9z50woetl0","content":"<p>在进行网页设计的时候,有一个需求就是在网页滚动到指定位置时执行特定的操作,这时候就需要用到滚动监听.</p>\n<h1 id=\"scrollTop\"><a href=\"#scrollTop\" class=\"headerlink\" title=\"scrollTop\"></a>scrollTop</h1><p>JavaScript 的原生方法,获取滚动距离:</p>\n<pre><code>var scrollTop = document.documentElement.scrollTop || document.body.scrollTop;\nconsole.log(&quot;滚动距离&quot; + scrollTop);\n</code></pre><p>为保证兼容性.使用<code>document.documentElement.scrollTop || document.body.scrollTop</code></p>\n<h1 id=\"ScrollWatch\"><a href=\"#ScrollWatch\" class=\"headerlink\" title=\"ScrollWatch\"></a>ScrollWatch</h1><p>使用<a href=\"https://edull24.github.io/ScrollWatch/\" target=\"_blank\" rel=\"noopener\">ScrollWatch</a>插件来实现指定位置的滚动监听.<br>当需要监听的元素进入视野时,会给元素添加scroll-watch-in-view 的 class, 元素离开视野时添加 scroll-watch-ignore class.</p>\n<p>在需要监听的元素上添加data-scroll-watch属性,并进行初始化:</p>\n<pre><code>var sw = new ScrollWatch({\n                        watchOnce: false,\n                        infiniteScroll: false,\n                        // infiniteOffset: 50,\n                        inViewClass: &apos;fadeInUp&apos;,\n                        onElementInView: function(data) {\n                            console.log(data.el, &apos;...is now in view&apos;);\n                            data.el.classList.add(&quot;&quot;);\n                        }\n                    });\n</code></pre><ul>\n<li>watchonce:监听一次,如果设置为 true,则每次 inview 都会触发;</li>\n<li>inviewClass: 进入视野时要添加的类;</li>\n<li>onElementInView:进入视野时的回调函数.</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>在进行网页设计的时候,有一个需求就是在网页滚动到指定位置时执行特定的操作,这时候就需要用到滚动监听.</p>\n<h1 id=\"scrollTop\"><a href=\"#scrollTop\" class=\"headerlink\" title=\"scrollTop\"></a>scrollTop</h1><p>JavaScript 的原生方法,获取滚动距离:</p>\n<pre><code>var scrollTop = document.documentElement.scrollTop || document.body.scrollTop;\nconsole.log(&quot;滚动距离&quot; + scrollTop);\n</code></pre><p>为保证兼容性.使用<code>document.documentElement.scrollTop || document.body.scrollTop</code></p>\n<h1 id=\"ScrollWatch\"><a href=\"#ScrollWatch\" class=\"headerlink\" title=\"ScrollWatch\"></a>ScrollWatch</h1><p>使用<a href=\"https://edull24.github.io/ScrollWatch/\" target=\"_blank\" rel=\"noopener\">ScrollWatch</a>插件来实现指定位置的滚动监听.<br>当需要监听的元素进入视野时,会给元素添加scroll-watch-in-view 的 class, 元素离开视野时添加 scroll-watch-ignore class.</p>\n<p>在需要监听的元素上添加data-scroll-watch属性,并进行初始化:</p>\n<pre><code>var sw = new ScrollWatch({\n                        watchOnce: false,\n                        infiniteScroll: false,\n                        // infiniteOffset: 50,\n                        inViewClass: &apos;fadeInUp&apos;,\n                        onElementInView: function(data) {\n                            console.log(data.el, &apos;...is now in view&apos;);\n                            data.el.classList.add(&quot;&quot;);\n                        }\n                    });\n</code></pre><ul>\n<li>watchonce:监听一次,如果设置为 true,则每次 inview 都会触发;</li>\n<li>inviewClass: 进入视野时要添加的类;</li>\n<li>onElementInView:进入视野时的回调函数.</li>\n</ul>\n"},{"title":"CSS 伪类与 CSS 元素","_content":"# 伪类与伪元素\n\n伪类和伪元素是用来修饰不在文档树中的内容.\n\n伪类用于当已有元素处于的某个状态时,为其添加对应的样式,这个状态是根据用户的行为而动态变化的,比如说当用户悬停在指定的元素时,我们可以添加:hover来描述这个元素的状态.虽然和普通的 css类相似,可以为已有的元素添加样式,但是它只有处于 dom tree无法描述的状态下才能为元素添加样式,所以将其称为伪类.\n\n伪元素用于创建不在文档树中的元素,并为其添加样式.比如说，我们可以通过:before来在一个元素前增加一些文本，并为这些文本添加样式。虽然用户可以看到这些文本，但是这些文本实际上不在文档树中.\n\n# 伪类和伪元素的区别\n\n伪类的操作对象是文档树中已有的元素,二伪元素则创建了一个文档树外的元素.因此,伪类和伪元素的区别在于:有没有创建一个文档树以外的元素. \n\n# 单冒号 or 双冒号?\n\nCSS3规范中的要求使用双冒号(::)表示伪元素，以此来区分伪元素和伪类，比如::before和::after等伪元素使用双冒号(::)，:hover和:active等伪类使用单冒号(:)。除了一些低于IE8版本的浏览器外，大部分浏览器都支持伪元素的双冒号(::)表示方法。\n\n# 伪类和伪元素的具体用法\n\n![](http://www.alloyteam.com/wp-content/uploads/2016/05/%E4%BC%AA%E7%B1%BB.png)\n\n\n![](http://www.alloyteam.com/wp-content/uploads/2016/05/%E4%BC%AA%E5%85%83%E7%B4%A0.png)\n\n\n\n","source":"_posts/2018.12.07.pseudo.md","raw":"---\ntitle: CSS 伪类与 CSS 元素\ntags: [CSS]\ncategories: 知识 \n---\n# 伪类与伪元素\n\n伪类和伪元素是用来修饰不在文档树中的内容.\n\n伪类用于当已有元素处于的某个状态时,为其添加对应的样式,这个状态是根据用户的行为而动态变化的,比如说当用户悬停在指定的元素时,我们可以添加:hover来描述这个元素的状态.虽然和普通的 css类相似,可以为已有的元素添加样式,但是它只有处于 dom tree无法描述的状态下才能为元素添加样式,所以将其称为伪类.\n\n伪元素用于创建不在文档树中的元素,并为其添加样式.比如说，我们可以通过:before来在一个元素前增加一些文本，并为这些文本添加样式。虽然用户可以看到这些文本，但是这些文本实际上不在文档树中.\n\n# 伪类和伪元素的区别\n\n伪类的操作对象是文档树中已有的元素,二伪元素则创建了一个文档树外的元素.因此,伪类和伪元素的区别在于:有没有创建一个文档树以外的元素. \n\n# 单冒号 or 双冒号?\n\nCSS3规范中的要求使用双冒号(::)表示伪元素，以此来区分伪元素和伪类，比如::before和::after等伪元素使用双冒号(::)，:hover和:active等伪类使用单冒号(:)。除了一些低于IE8版本的浏览器外，大部分浏览器都支持伪元素的双冒号(::)表示方法。\n\n# 伪类和伪元素的具体用法\n\n![](http://www.alloyteam.com/wp-content/uploads/2016/05/%E4%BC%AA%E7%B1%BB.png)\n\n\n![](http://www.alloyteam.com/wp-content/uploads/2016/05/%E4%BC%AA%E5%85%83%E7%B4%A0.png)\n\n\n\n","slug":"2018.12.07.pseudo","published":1,"date":"2018-12-07T06:19:41.264Z","updated":"2018-12-07T06:37:00.105Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziiq2000orh9zd8c4eyhp","content":"<h1 id=\"伪类与伪元素\"><a href=\"#伪类与伪元素\" class=\"headerlink\" title=\"伪类与伪元素\"></a>伪类与伪元素</h1><p>伪类和伪元素是用来修饰不在文档树中的内容.</p>\n<p>伪类用于当已有元素处于的某个状态时,为其添加对应的样式,这个状态是根据用户的行为而动态变化的,比如说当用户悬停在指定的元素时,我们可以添加:hover来描述这个元素的状态.虽然和普通的 css类相似,可以为已有的元素添加样式,但是它只有处于 dom tree无法描述的状态下才能为元素添加样式,所以将其称为伪类.</p>\n<p>伪元素用于创建不在文档树中的元素,并为其添加样式.比如说，我们可以通过:before来在一个元素前增加一些文本，并为这些文本添加样式。虽然用户可以看到这些文本，但是这些文本实际上不在文档树中.</p>\n<h1 id=\"伪类和伪元素的区别\"><a href=\"#伪类和伪元素的区别\" class=\"headerlink\" title=\"伪类和伪元素的区别\"></a>伪类和伪元素的区别</h1><p>伪类的操作对象是文档树中已有的元素,二伪元素则创建了一个文档树外的元素.因此,伪类和伪元素的区别在于:有没有创建一个文档树以外的元素. </p>\n<h1 id=\"单冒号-or-双冒号\"><a href=\"#单冒号-or-双冒号\" class=\"headerlink\" title=\"单冒号 or 双冒号?\"></a>单冒号 or 双冒号?</h1><p>CSS3规范中的要求使用双冒号(::)表示伪元素，以此来区分伪元素和伪类，比如::before和::after等伪元素使用双冒号(::)，:hover和:active等伪类使用单冒号(:)。除了一些低于IE8版本的浏览器外，大部分浏览器都支持伪元素的双冒号(::)表示方法。</p>\n<h1 id=\"伪类和伪元素的具体用法\"><a href=\"#伪类和伪元素的具体用法\" class=\"headerlink\" title=\"伪类和伪元素的具体用法\"></a>伪类和伪元素的具体用法</h1><p><img src=\"http://www.alloyteam.com/wp-content/uploads/2016/05/%E4%BC%AA%E7%B1%BB.png\" alt=\"\"></p>\n<p><img src=\"http://www.alloyteam.com/wp-content/uploads/2016/05/%E4%BC%AA%E5%85%83%E7%B4%A0.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"伪类与伪元素\"><a href=\"#伪类与伪元素\" class=\"headerlink\" title=\"伪类与伪元素\"></a>伪类与伪元素</h1><p>伪类和伪元素是用来修饰不在文档树中的内容.</p>\n<p>伪类用于当已有元素处于的某个状态时,为其添加对应的样式,这个状态是根据用户的行为而动态变化的,比如说当用户悬停在指定的元素时,我们可以添加:hover来描述这个元素的状态.虽然和普通的 css类相似,可以为已有的元素添加样式,但是它只有处于 dom tree无法描述的状态下才能为元素添加样式,所以将其称为伪类.</p>\n<p>伪元素用于创建不在文档树中的元素,并为其添加样式.比如说，我们可以通过:before来在一个元素前增加一些文本，并为这些文本添加样式。虽然用户可以看到这些文本，但是这些文本实际上不在文档树中.</p>\n<h1 id=\"伪类和伪元素的区别\"><a href=\"#伪类和伪元素的区别\" class=\"headerlink\" title=\"伪类和伪元素的区别\"></a>伪类和伪元素的区别</h1><p>伪类的操作对象是文档树中已有的元素,二伪元素则创建了一个文档树外的元素.因此,伪类和伪元素的区别在于:有没有创建一个文档树以外的元素. </p>\n<h1 id=\"单冒号-or-双冒号\"><a href=\"#单冒号-or-双冒号\" class=\"headerlink\" title=\"单冒号 or 双冒号?\"></a>单冒号 or 双冒号?</h1><p>CSS3规范中的要求使用双冒号(::)表示伪元素，以此来区分伪元素和伪类，比如::before和::after等伪元素使用双冒号(::)，:hover和:active等伪类使用单冒号(:)。除了一些低于IE8版本的浏览器外，大部分浏览器都支持伪元素的双冒号(::)表示方法。</p>\n<h1 id=\"伪类和伪元素的具体用法\"><a href=\"#伪类和伪元素的具体用法\" class=\"headerlink\" title=\"伪类和伪元素的具体用法\"></a>伪类和伪元素的具体用法</h1><p><img src=\"http://www.alloyteam.com/wp-content/uploads/2016/05/%E4%BC%AA%E7%B1%BB.png\" alt=\"\"></p>\n<p><img src=\"http://www.alloyteam.com/wp-content/uploads/2016/05/%E4%BC%AA%E5%85%83%E7%B4%A0.png\" alt=\"\"></p>\n"},{"title":"实现文字与图片并排显示","_content":"\n\t<div>\n\t    <img src=\"images/pic.png\">\n\t    <span>content</span>\n\t</div>\n\n实现方式:\n\n css:\n\n\timg{\n\t\tvertical-align:middle\n\t}\n\n`\"vertical-align\"` 这个属性只适用于 inline 和 inline-block, 对其他 postion 属性无效.\n","source":"_posts/2018.12.09.vertical.md","raw":"---\n\ntitle: 实现文字与图片并排显示\ntags: [css]\ncategories: 知识\n---\n\n\t<div>\n\t    <img src=\"images/pic.png\">\n\t    <span>content</span>\n\t</div>\n\n实现方式:\n\n css:\n\n\timg{\n\t\tvertical-align:middle\n\t}\n\n`\"vertical-align\"` 这个属性只适用于 inline 和 inline-block, 对其他 postion 属性无效.\n","slug":"2018.12.09.vertical","published":1,"date":"2018-12-09T09:54:07.208Z","updated":"2018-12-09T10:05:15.314Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziiq3000prh9zbtsmg5c4","content":"<pre><code>&lt;div&gt;\n    &lt;img src=&quot;images/pic.png&quot;&gt;\n    &lt;span&gt;content&lt;/span&gt;\n&lt;/div&gt;\n</code></pre><p>实现方式:</p>\n<p> css:</p>\n<pre><code>img{\n    vertical-align:middle\n}\n</code></pre><p><code>&quot;vertical-align&quot;</code> 这个属性只适用于 inline 和 inline-block, 对其他 postion 属性无效.</p>\n","site":{"data":{}},"excerpt":"","more":"<pre><code>&lt;div&gt;\n    &lt;img src=&quot;images/pic.png&quot;&gt;\n    &lt;span&gt;content&lt;/span&gt;\n&lt;/div&gt;\n</code></pre><p>实现方式:</p>\n<p> css:</p>\n<pre><code>img{\n    vertical-align:middle\n}\n</code></pre><p><code>&quot;vertical-align&quot;</code> 这个属性只适用于 inline 和 inline-block, 对其他 postion 属性无效.</p>\n"},{"title":"检测浏览器类型&判断 IE 版本","_content":"\n# JS 获取浏览器信息\n\n\t浏览器代码名称：navigator.appCodeName\n    浏览器名称：navigator.appName\n    浏览器版本号：navigator.appVersion\n    对Java的支持：navigator.javaEnabled()\n    MIME类型（数组）：navigator.mimeTypes\n    系统平台：navigator.platform\n    插件（数组）：navigator.plugins\n    用户代理：navigator.userAgent\n\n# 各大浏览器的 userAgent 值\n各大浏览器输出 navigator.userAgent 的值：\n\n* IE 8：Mozilla/4.0 (compatible; **MSIE 8.0**; Windows NT 10.0; WOW64; Trident/8.0; .NET4.0C; .NET4.0E; InfoPath.3; .NET CLR 2.0.50727; .NET CLR 3.0.30729; .NET CLR 3.5.30729)\n* IE 11：Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; InfoPath.3; .NET CLR 2.0.50727; .NET CLR 3.0.30729; .NET CLR 3.5.30729; **rv:11.0)like Gecko**\n* win EDGE：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 **Edge/12.10240**\n* FireFox：Mozilla/5.0 (Windows NT 10.0; WOW64; rv:49.0) Gecko/20100101 **Firefox/49.0**\n* Chrome：Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) **Chrome/54.0.2840.71** Safari/537.36\n* Opera：Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.87 Safari/537.36 **OPR/41.0.2353.56**\n* Safari：mozilla/5.0 (windows; u; windows nt 5.1; zh-cn) applewebkit/533.16 (khtml, like gecko) version/5.0 **safari/533.16**\n* 360安全浏览器：Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36\n* QQ浏览器：Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.104 Safari/537.36 Core/1.53.1708.400 **QQBrowser/9.5.9635.400**\n\n总结:\n\n* IE 10 之前的版本，匹配关键字 MSIE 8.0；\n* IE 11 要通过 rv:11.0) like Gecko 来匹配；\n* EDGE 通过 Edge/12.10240；\n* Firefox 通过 Firefox/49.0；\n* Chrome 通过 Chrome/54.0.2840.71，但是会发现，后面的浏览器都是基于 Chrome 内核（safari 除外），但是 Chrome 又是基于 safari 内核的。。\n* Opera 通过 OPR/41.0.2353.56，但是网上普遍是通过 opera 字段.\n* Safari 通过 safari/533.16 来匹配；\n* 360 和 QQ 都是基于 Chrome 内核的，当然 QQ 还能通过 QQBrowser/9.5.9635.400，如果你高兴去匹配的话。\n\n# 获取浏览器类型和版本\n\n\tfunction getExplore(){\n\t  var Sys = {};  \n\t  var ua = navigator.userAgent.toLowerCase();  \n\t  var s;  \n\t  (s = ua.match(/rv:([\\d.]+)\\) like gecko/)) ? Sys.ie = s[1] :\n\t  (s = ua.match(/msie ([\\d\\.]+)/)) ? Sys.ie = s[1] :  \n\t  (s = ua.match(/edge\\/([\\d\\.]+)/)) ? Sys.edge = s[1] :\n\t  (s = ua.match(/firefox\\/([\\d\\.]+)/)) ? Sys.firefox = s[1] :  \n\t  (s = ua.match(/(?:opera|opr).([\\d\\.]+)/)) ? Sys.opera = s[1] :  \n\t  (s = ua.match(/chrome\\/([\\d\\.]+)/)) ? Sys.chrome = s[1] :  \n\t  (s = ua.match(/version\\/([\\d\\.]+).*safari/)) ? Sys.safari = s[1] : 0;  \n\t  // 根据关系进行判断\n\t  if (Sys.ie) return ('IE: ' + Sys.ie);  \n\t  if (Sys.edge) return ('EDGE: ' + Sys.edge);\n\t  if (Sys.firefox) return ('Firefox: ' + Sys.firefox);  \n\t  if (Sys.chrome) return ('Chrome: ' + Sys.chrome);  \n\t  if (Sys.opera) return ('Opera: ' + Sys.opera);  \n\t  if (Sys.safari) return ('Safari: ' + Sys.safari);\n\t  return 'Unkonwn';\n\t}\n\n判断的顺序很重要,因为很多浏览器是多核的.\n\n简单判断浏览器类型,不需要版本号:\n\n\tfunction getExploreName(){\n\t  var userAgent = navigator.userAgent;\n\t  if(userAgent.indexOf(\"Opera\") > -1 || userAgent.indexOf(\"OPR\") > -1){\n\t    return 'Opera';\n\t  }else if(userAgent.indexOf(\"compatible\") > -1 && userAgent.indexOf(\"MSIE\") > -1){\n\t    return 'IE';\n\t  }else if(userAgent.indexOf(\"Edge\") > -1){\n\t    return 'Edge';\n\t  }else if(userAgent.indexOf(\"Firefox\") > -1){\n\t    return 'Firefox';\n\t  }else if(userAgent.indexOf(\"Safari\") > -1 && userAgent.indexOf(\"Chrome\") == -1){\n\t    return 'Safari';\n\t  }else if(userAgent.indexOf(\"Chrome\") > -1 && userAgent.indexOf(\"Safari\") > -1){\n\t    return 'Chrome';\n\t  }else if(!!window.ActiveXObject || \"ActiveXObject\" in window){\n\t    return 'IE>=11';\n\t  }else{\n\t    return 'Unkonwn';\n\t  }\n\t}\n\n# 判断 IE 的方法\n\n## 1. \n\n\tif(window.addEventListener){ \n\talert(\"not ie\"); \n\t}else if(window.attachEvent){ \n\talert(\"is ie\"); \n\t}else{ \n\talert(\"这种情况发生在不支持DHTML的老版本浏览器（现在一般都支持）\") \n\t}\n\n## 2.\n\n\tif(document.all){ \n\talert(\"IE\"); \n\t}else{ \n\talert(\"not ie\"); \n\t}\n\n## 3.\n\n\tvar navigatorName = \"Microsoft Internet Explorer\"; \n\tif( navigator.appName == navigatorName ){ \n\talert(\"ie\") \n\t}else{\n\talert(\"not ie\") \n\t}\n\n## 4.\n\n\tif(!+[1,])alert(\"这是ie浏览器\"); \n\telse alert(\"这不是ie浏览器\");\n\n# IE 条件注释\n\n## 关键词释义\n\n\tlt ：就是Less than的简写，也就是小于的意思。\n\t\n\tlte ：就是Less than or equal to的简写，也就是小于或等于的意思。\n\t\n\tgt ：就是Greater than的简写，也就是大于的意思。\n\t\n\tgte：就是Greater than or equal to的简写，也就是大于或等于的意思。\n\t\n\t!：就是不等于的意思，跟javascript里的不等于判断符相同。\n## 例如\n\n* 1.只有 IE 可以识别\n\n\t\t<!--[if IE]>\n\t\t <link type=\"text/css\" rel=\"stylesheet\" href=\"my.css\" />\n\t\t<![endif]-->\n\n* 2.只有特定版本才能识别\n\n\t\t<!--[if IE 8]> \n\t\t<link type=\"text/css\" rel=\"stylesheet\" href=\"my.css\" />   \n\t\t<![endif]-->\n\n*  3.等于或者高于特定版本才能识别\n\n\t\t<!--[if gte IE 7]> \n\t\t<link type=\"text/css\" rel=\"stylesheet\" href=\"my.css\" />   \n\t\t<![endif]-->\n\n\n\n","source":"_posts/2018.12.12.broswercheck.md","raw":"---\ntitle: 检测浏览器类型&判断 IE 版本\ntags: [浏览器]\ncategories: 知识 \n---\n\n# JS 获取浏览器信息\n\n\t浏览器代码名称：navigator.appCodeName\n    浏览器名称：navigator.appName\n    浏览器版本号：navigator.appVersion\n    对Java的支持：navigator.javaEnabled()\n    MIME类型（数组）：navigator.mimeTypes\n    系统平台：navigator.platform\n    插件（数组）：navigator.plugins\n    用户代理：navigator.userAgent\n\n# 各大浏览器的 userAgent 值\n各大浏览器输出 navigator.userAgent 的值：\n\n* IE 8：Mozilla/4.0 (compatible; **MSIE 8.0**; Windows NT 10.0; WOW64; Trident/8.0; .NET4.0C; .NET4.0E; InfoPath.3; .NET CLR 2.0.50727; .NET CLR 3.0.30729; .NET CLR 3.5.30729)\n* IE 11：Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; InfoPath.3; .NET CLR 2.0.50727; .NET CLR 3.0.30729; .NET CLR 3.5.30729; **rv:11.0)like Gecko**\n* win EDGE：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 **Edge/12.10240**\n* FireFox：Mozilla/5.0 (Windows NT 10.0; WOW64; rv:49.0) Gecko/20100101 **Firefox/49.0**\n* Chrome：Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) **Chrome/54.0.2840.71** Safari/537.36\n* Opera：Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.87 Safari/537.36 **OPR/41.0.2353.56**\n* Safari：mozilla/5.0 (windows; u; windows nt 5.1; zh-cn) applewebkit/533.16 (khtml, like gecko) version/5.0 **safari/533.16**\n* 360安全浏览器：Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36\n* QQ浏览器：Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.104 Safari/537.36 Core/1.53.1708.400 **QQBrowser/9.5.9635.400**\n\n总结:\n\n* IE 10 之前的版本，匹配关键字 MSIE 8.0；\n* IE 11 要通过 rv:11.0) like Gecko 来匹配；\n* EDGE 通过 Edge/12.10240；\n* Firefox 通过 Firefox/49.0；\n* Chrome 通过 Chrome/54.0.2840.71，但是会发现，后面的浏览器都是基于 Chrome 内核（safari 除外），但是 Chrome 又是基于 safari 内核的。。\n* Opera 通过 OPR/41.0.2353.56，但是网上普遍是通过 opera 字段.\n* Safari 通过 safari/533.16 来匹配；\n* 360 和 QQ 都是基于 Chrome 内核的，当然 QQ 还能通过 QQBrowser/9.5.9635.400，如果你高兴去匹配的话。\n\n# 获取浏览器类型和版本\n\n\tfunction getExplore(){\n\t  var Sys = {};  \n\t  var ua = navigator.userAgent.toLowerCase();  \n\t  var s;  \n\t  (s = ua.match(/rv:([\\d.]+)\\) like gecko/)) ? Sys.ie = s[1] :\n\t  (s = ua.match(/msie ([\\d\\.]+)/)) ? Sys.ie = s[1] :  \n\t  (s = ua.match(/edge\\/([\\d\\.]+)/)) ? Sys.edge = s[1] :\n\t  (s = ua.match(/firefox\\/([\\d\\.]+)/)) ? Sys.firefox = s[1] :  \n\t  (s = ua.match(/(?:opera|opr).([\\d\\.]+)/)) ? Sys.opera = s[1] :  \n\t  (s = ua.match(/chrome\\/([\\d\\.]+)/)) ? Sys.chrome = s[1] :  \n\t  (s = ua.match(/version\\/([\\d\\.]+).*safari/)) ? Sys.safari = s[1] : 0;  \n\t  // 根据关系进行判断\n\t  if (Sys.ie) return ('IE: ' + Sys.ie);  \n\t  if (Sys.edge) return ('EDGE: ' + Sys.edge);\n\t  if (Sys.firefox) return ('Firefox: ' + Sys.firefox);  \n\t  if (Sys.chrome) return ('Chrome: ' + Sys.chrome);  \n\t  if (Sys.opera) return ('Opera: ' + Sys.opera);  \n\t  if (Sys.safari) return ('Safari: ' + Sys.safari);\n\t  return 'Unkonwn';\n\t}\n\n判断的顺序很重要,因为很多浏览器是多核的.\n\n简单判断浏览器类型,不需要版本号:\n\n\tfunction getExploreName(){\n\t  var userAgent = navigator.userAgent;\n\t  if(userAgent.indexOf(\"Opera\") > -1 || userAgent.indexOf(\"OPR\") > -1){\n\t    return 'Opera';\n\t  }else if(userAgent.indexOf(\"compatible\") > -1 && userAgent.indexOf(\"MSIE\") > -1){\n\t    return 'IE';\n\t  }else if(userAgent.indexOf(\"Edge\") > -1){\n\t    return 'Edge';\n\t  }else if(userAgent.indexOf(\"Firefox\") > -1){\n\t    return 'Firefox';\n\t  }else if(userAgent.indexOf(\"Safari\") > -1 && userAgent.indexOf(\"Chrome\") == -1){\n\t    return 'Safari';\n\t  }else if(userAgent.indexOf(\"Chrome\") > -1 && userAgent.indexOf(\"Safari\") > -1){\n\t    return 'Chrome';\n\t  }else if(!!window.ActiveXObject || \"ActiveXObject\" in window){\n\t    return 'IE>=11';\n\t  }else{\n\t    return 'Unkonwn';\n\t  }\n\t}\n\n# 判断 IE 的方法\n\n## 1. \n\n\tif(window.addEventListener){ \n\talert(\"not ie\"); \n\t}else if(window.attachEvent){ \n\talert(\"is ie\"); \n\t}else{ \n\talert(\"这种情况发生在不支持DHTML的老版本浏览器（现在一般都支持）\") \n\t}\n\n## 2.\n\n\tif(document.all){ \n\talert(\"IE\"); \n\t}else{ \n\talert(\"not ie\"); \n\t}\n\n## 3.\n\n\tvar navigatorName = \"Microsoft Internet Explorer\"; \n\tif( navigator.appName == navigatorName ){ \n\talert(\"ie\") \n\t}else{\n\talert(\"not ie\") \n\t}\n\n## 4.\n\n\tif(!+[1,])alert(\"这是ie浏览器\"); \n\telse alert(\"这不是ie浏览器\");\n\n# IE 条件注释\n\n## 关键词释义\n\n\tlt ：就是Less than的简写，也就是小于的意思。\n\t\n\tlte ：就是Less than or equal to的简写，也就是小于或等于的意思。\n\t\n\tgt ：就是Greater than的简写，也就是大于的意思。\n\t\n\tgte：就是Greater than or equal to的简写，也就是大于或等于的意思。\n\t\n\t!：就是不等于的意思，跟javascript里的不等于判断符相同。\n## 例如\n\n* 1.只有 IE 可以识别\n\n\t\t<!--[if IE]>\n\t\t <link type=\"text/css\" rel=\"stylesheet\" href=\"my.css\" />\n\t\t<![endif]-->\n\n* 2.只有特定版本才能识别\n\n\t\t<!--[if IE 8]> \n\t\t<link type=\"text/css\" rel=\"stylesheet\" href=\"my.css\" />   \n\t\t<![endif]-->\n\n*  3.等于或者高于特定版本才能识别\n\n\t\t<!--[if gte IE 7]> \n\t\t<link type=\"text/css\" rel=\"stylesheet\" href=\"my.css\" />   \n\t\t<![endif]-->\n\n\n\n","slug":"2018.12.12.broswercheck","published":1,"date":"2018-12-12T08:49:11.032Z","updated":"2018-12-12T09:38:35.477Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziiq3000qrh9z2zgkhlui","content":"<h1 id=\"JS-获取浏览器信息\"><a href=\"#JS-获取浏览器信息\" class=\"headerlink\" title=\"JS 获取浏览器信息\"></a>JS 获取浏览器信息</h1><pre><code>浏览器代码名称：navigator.appCodeName\n浏览器名称：navigator.appName\n浏览器版本号：navigator.appVersion\n对Java的支持：navigator.javaEnabled()\nMIME类型（数组）：navigator.mimeTypes\n系统平台：navigator.platform\n插件（数组）：navigator.plugins\n用户代理：navigator.userAgent\n</code></pre><h1 id=\"各大浏览器的-userAgent-值\"><a href=\"#各大浏览器的-userAgent-值\" class=\"headerlink\" title=\"各大浏览器的 userAgent 值\"></a>各大浏览器的 userAgent 值</h1><p>各大浏览器输出 navigator.userAgent 的值：</p>\n<ul>\n<li>IE 8：Mozilla/4.0 (compatible; <strong>MSIE 8.0</strong>; Windows NT 10.0; WOW64; Trident/8.0; .NET4.0C; .NET4.0E; InfoPath.3; .NET CLR 2.0.50727; .NET CLR 3.0.30729; .NET CLR 3.5.30729)</li>\n<li>IE 11：Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; InfoPath.3; .NET CLR 2.0.50727; .NET CLR 3.0.30729; .NET CLR 3.5.30729; <strong>rv:11.0)like Gecko</strong></li>\n<li>win EDGE：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 <strong>Edge/12.10240</strong></li>\n<li>FireFox：Mozilla/5.0 (Windows NT 10.0; WOW64; rv:49.0) Gecko/20100101 <strong>Firefox/49.0</strong></li>\n<li>Chrome：Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) <strong>Chrome/54.0.2840.71</strong> Safari/537.36</li>\n<li>Opera：Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.87 Safari/537.36 <strong>OPR/41.0.2353.56</strong></li>\n<li>Safari：mozilla/5.0 (windows; u; windows nt 5.1; zh-cn) applewebkit/533.16 (khtml, like gecko) version/5.0 <strong>safari/533.16</strong></li>\n<li>360安全浏览器：Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36</li>\n<li>QQ浏览器：Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.104 Safari/537.36 Core/1.53.1708.400 <strong>QQBrowser/9.5.9635.400</strong></li>\n</ul>\n<p>总结:</p>\n<ul>\n<li>IE 10 之前的版本，匹配关键字 MSIE 8.0；</li>\n<li>IE 11 要通过 rv:11.0) like Gecko 来匹配；</li>\n<li>EDGE 通过 Edge/12.10240；</li>\n<li>Firefox 通过 Firefox/49.0；</li>\n<li>Chrome 通过 Chrome/54.0.2840.71，但是会发现，后面的浏览器都是基于 Chrome 内核（safari 除外），但是 Chrome 又是基于 safari 内核的。。</li>\n<li>Opera 通过 OPR/41.0.2353.56，但是网上普遍是通过 opera 字段.</li>\n<li>Safari 通过 safari/533.16 来匹配；</li>\n<li>360 和 QQ 都是基于 Chrome 内核的，当然 QQ 还能通过 QQBrowser/9.5.9635.400，如果你高兴去匹配的话。</li>\n</ul>\n<h1 id=\"获取浏览器类型和版本\"><a href=\"#获取浏览器类型和版本\" class=\"headerlink\" title=\"获取浏览器类型和版本\"></a>获取浏览器类型和版本</h1><pre><code>function getExplore(){\n  var Sys = {};  \n  var ua = navigator.userAgent.toLowerCase();  \n  var s;  \n  (s = ua.match(/rv:([\\d.]+)\\) like gecko/)) ? Sys.ie = s[1] :\n  (s = ua.match(/msie ([\\d\\.]+)/)) ? Sys.ie = s[1] :  \n  (s = ua.match(/edge\\/([\\d\\.]+)/)) ? Sys.edge = s[1] :\n  (s = ua.match(/firefox\\/([\\d\\.]+)/)) ? Sys.firefox = s[1] :  \n  (s = ua.match(/(?:opera|opr).([\\d\\.]+)/)) ? Sys.opera = s[1] :  \n  (s = ua.match(/chrome\\/([\\d\\.]+)/)) ? Sys.chrome = s[1] :  \n  (s = ua.match(/version\\/([\\d\\.]+).*safari/)) ? Sys.safari = s[1] : 0;  \n  // 根据关系进行判断\n  if (Sys.ie) return (&apos;IE: &apos; + Sys.ie);  \n  if (Sys.edge) return (&apos;EDGE: &apos; + Sys.edge);\n  if (Sys.firefox) return (&apos;Firefox: &apos; + Sys.firefox);  \n  if (Sys.chrome) return (&apos;Chrome: &apos; + Sys.chrome);  \n  if (Sys.opera) return (&apos;Opera: &apos; + Sys.opera);  \n  if (Sys.safari) return (&apos;Safari: &apos; + Sys.safari);\n  return &apos;Unkonwn&apos;;\n}\n</code></pre><p>判断的顺序很重要,因为很多浏览器是多核的.</p>\n<p>简单判断浏览器类型,不需要版本号:</p>\n<pre><code>function getExploreName(){\n  var userAgent = navigator.userAgent;\n  if(userAgent.indexOf(&quot;Opera&quot;) &gt; -1 || userAgent.indexOf(&quot;OPR&quot;) &gt; -1){\n    return &apos;Opera&apos;;\n  }else if(userAgent.indexOf(&quot;compatible&quot;) &gt; -1 &amp;&amp; userAgent.indexOf(&quot;MSIE&quot;) &gt; -1){\n    return &apos;IE&apos;;\n  }else if(userAgent.indexOf(&quot;Edge&quot;) &gt; -1){\n    return &apos;Edge&apos;;\n  }else if(userAgent.indexOf(&quot;Firefox&quot;) &gt; -1){\n    return &apos;Firefox&apos;;\n  }else if(userAgent.indexOf(&quot;Safari&quot;) &gt; -1 &amp;&amp; userAgent.indexOf(&quot;Chrome&quot;) == -1){\n    return &apos;Safari&apos;;\n  }else if(userAgent.indexOf(&quot;Chrome&quot;) &gt; -1 &amp;&amp; userAgent.indexOf(&quot;Safari&quot;) &gt; -1){\n    return &apos;Chrome&apos;;\n  }else if(!!window.ActiveXObject || &quot;ActiveXObject&quot; in window){\n    return &apos;IE&gt;=11&apos;;\n  }else{\n    return &apos;Unkonwn&apos;;\n  }\n}\n</code></pre><h1 id=\"判断-IE-的方法\"><a href=\"#判断-IE-的方法\" class=\"headerlink\" title=\"判断 IE 的方法\"></a>判断 IE 的方法</h1><h2 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1.\"></a>1.</h2><pre><code>if(window.addEventListener){ \nalert(&quot;not ie&quot;); \n}else if(window.attachEvent){ \nalert(&quot;is ie&quot;); \n}else{ \nalert(&quot;这种情况发生在不支持DHTML的老版本浏览器（现在一般都支持）&quot;) \n}\n</code></pre><h2 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2.\"></a>2.</h2><pre><code>if(document.all){ \nalert(&quot;IE&quot;); \n}else{ \nalert(&quot;not ie&quot;); \n}\n</code></pre><h2 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3.\"></a>3.</h2><pre><code>var navigatorName = &quot;Microsoft Internet Explorer&quot;; \nif( navigator.appName == navigatorName ){ \nalert(&quot;ie&quot;) \n}else{\nalert(&quot;not ie&quot;) \n}\n</code></pre><h2 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4.\"></a>4.</h2><pre><code>if(!+[1,])alert(&quot;这是ie浏览器&quot;); \nelse alert(&quot;这不是ie浏览器&quot;);\n</code></pre><h1 id=\"IE-条件注释\"><a href=\"#IE-条件注释\" class=\"headerlink\" title=\"IE 条件注释\"></a>IE 条件注释</h1><h2 id=\"关键词释义\"><a href=\"#关键词释义\" class=\"headerlink\" title=\"关键词释义\"></a>关键词释义</h2><pre><code>lt ：就是Less than的简写，也就是小于的意思。\n\nlte ：就是Less than or equal to的简写，也就是小于或等于的意思。\n\ngt ：就是Greater than的简写，也就是大于的意思。\n\ngte：就是Greater than or equal to的简写，也就是大于或等于的意思。\n\n!：就是不等于的意思，跟javascript里的不等于判断符相同。\n</code></pre><h2 id=\"例如\"><a href=\"#例如\" class=\"headerlink\" title=\"例如\"></a>例如</h2><ul>\n<li><p>1.只有 IE 可以识别</p>\n<pre><code>&lt;!--[if IE]&gt;\n &lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;my.css&quot; /&gt;\n&lt;![endif]--&gt;\n</code></pre></li>\n<li><p>2.只有特定版本才能识别</p>\n<pre><code>&lt;!--[if IE 8]&gt; \n&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;my.css&quot; /&gt;   \n&lt;![endif]--&gt;\n</code></pre></li>\n<li><p>3.等于或者高于特定版本才能识别</p>\n<pre><code>&lt;!--[if gte IE 7]&gt; \n&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;my.css&quot; /&gt;   \n&lt;![endif]--&gt;\n</code></pre></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"JS-获取浏览器信息\"><a href=\"#JS-获取浏览器信息\" class=\"headerlink\" title=\"JS 获取浏览器信息\"></a>JS 获取浏览器信息</h1><pre><code>浏览器代码名称：navigator.appCodeName\n浏览器名称：navigator.appName\n浏览器版本号：navigator.appVersion\n对Java的支持：navigator.javaEnabled()\nMIME类型（数组）：navigator.mimeTypes\n系统平台：navigator.platform\n插件（数组）：navigator.plugins\n用户代理：navigator.userAgent\n</code></pre><h1 id=\"各大浏览器的-userAgent-值\"><a href=\"#各大浏览器的-userAgent-值\" class=\"headerlink\" title=\"各大浏览器的 userAgent 值\"></a>各大浏览器的 userAgent 值</h1><p>各大浏览器输出 navigator.userAgent 的值：</p>\n<ul>\n<li>IE 8：Mozilla/4.0 (compatible; <strong>MSIE 8.0</strong>; Windows NT 10.0; WOW64; Trident/8.0; .NET4.0C; .NET4.0E; InfoPath.3; .NET CLR 2.0.50727; .NET CLR 3.0.30729; .NET CLR 3.5.30729)</li>\n<li>IE 11：Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; InfoPath.3; .NET CLR 2.0.50727; .NET CLR 3.0.30729; .NET CLR 3.5.30729; <strong>rv:11.0)like Gecko</strong></li>\n<li>win EDGE：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 <strong>Edge/12.10240</strong></li>\n<li>FireFox：Mozilla/5.0 (Windows NT 10.0; WOW64; rv:49.0) Gecko/20100101 <strong>Firefox/49.0</strong></li>\n<li>Chrome：Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) <strong>Chrome/54.0.2840.71</strong> Safari/537.36</li>\n<li>Opera：Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.87 Safari/537.36 <strong>OPR/41.0.2353.56</strong></li>\n<li>Safari：mozilla/5.0 (windows; u; windows nt 5.1; zh-cn) applewebkit/533.16 (khtml, like gecko) version/5.0 <strong>safari/533.16</strong></li>\n<li>360安全浏览器：Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36</li>\n<li>QQ浏览器：Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.104 Safari/537.36 Core/1.53.1708.400 <strong>QQBrowser/9.5.9635.400</strong></li>\n</ul>\n<p>总结:</p>\n<ul>\n<li>IE 10 之前的版本，匹配关键字 MSIE 8.0；</li>\n<li>IE 11 要通过 rv:11.0) like Gecko 来匹配；</li>\n<li>EDGE 通过 Edge/12.10240；</li>\n<li>Firefox 通过 Firefox/49.0；</li>\n<li>Chrome 通过 Chrome/54.0.2840.71，但是会发现，后面的浏览器都是基于 Chrome 内核（safari 除外），但是 Chrome 又是基于 safari 内核的。。</li>\n<li>Opera 通过 OPR/41.0.2353.56，但是网上普遍是通过 opera 字段.</li>\n<li>Safari 通过 safari/533.16 来匹配；</li>\n<li>360 和 QQ 都是基于 Chrome 内核的，当然 QQ 还能通过 QQBrowser/9.5.9635.400，如果你高兴去匹配的话。</li>\n</ul>\n<h1 id=\"获取浏览器类型和版本\"><a href=\"#获取浏览器类型和版本\" class=\"headerlink\" title=\"获取浏览器类型和版本\"></a>获取浏览器类型和版本</h1><pre><code>function getExplore(){\n  var Sys = {};  \n  var ua = navigator.userAgent.toLowerCase();  \n  var s;  \n  (s = ua.match(/rv:([\\d.]+)\\) like gecko/)) ? Sys.ie = s[1] :\n  (s = ua.match(/msie ([\\d\\.]+)/)) ? Sys.ie = s[1] :  \n  (s = ua.match(/edge\\/([\\d\\.]+)/)) ? Sys.edge = s[1] :\n  (s = ua.match(/firefox\\/([\\d\\.]+)/)) ? Sys.firefox = s[1] :  \n  (s = ua.match(/(?:opera|opr).([\\d\\.]+)/)) ? Sys.opera = s[1] :  \n  (s = ua.match(/chrome\\/([\\d\\.]+)/)) ? Sys.chrome = s[1] :  \n  (s = ua.match(/version\\/([\\d\\.]+).*safari/)) ? Sys.safari = s[1] : 0;  \n  // 根据关系进行判断\n  if (Sys.ie) return (&apos;IE: &apos; + Sys.ie);  \n  if (Sys.edge) return (&apos;EDGE: &apos; + Sys.edge);\n  if (Sys.firefox) return (&apos;Firefox: &apos; + Sys.firefox);  \n  if (Sys.chrome) return (&apos;Chrome: &apos; + Sys.chrome);  \n  if (Sys.opera) return (&apos;Opera: &apos; + Sys.opera);  \n  if (Sys.safari) return (&apos;Safari: &apos; + Sys.safari);\n  return &apos;Unkonwn&apos;;\n}\n</code></pre><p>判断的顺序很重要,因为很多浏览器是多核的.</p>\n<p>简单判断浏览器类型,不需要版本号:</p>\n<pre><code>function getExploreName(){\n  var userAgent = navigator.userAgent;\n  if(userAgent.indexOf(&quot;Opera&quot;) &gt; -1 || userAgent.indexOf(&quot;OPR&quot;) &gt; -1){\n    return &apos;Opera&apos;;\n  }else if(userAgent.indexOf(&quot;compatible&quot;) &gt; -1 &amp;&amp; userAgent.indexOf(&quot;MSIE&quot;) &gt; -1){\n    return &apos;IE&apos;;\n  }else if(userAgent.indexOf(&quot;Edge&quot;) &gt; -1){\n    return &apos;Edge&apos;;\n  }else if(userAgent.indexOf(&quot;Firefox&quot;) &gt; -1){\n    return &apos;Firefox&apos;;\n  }else if(userAgent.indexOf(&quot;Safari&quot;) &gt; -1 &amp;&amp; userAgent.indexOf(&quot;Chrome&quot;) == -1){\n    return &apos;Safari&apos;;\n  }else if(userAgent.indexOf(&quot;Chrome&quot;) &gt; -1 &amp;&amp; userAgent.indexOf(&quot;Safari&quot;) &gt; -1){\n    return &apos;Chrome&apos;;\n  }else if(!!window.ActiveXObject || &quot;ActiveXObject&quot; in window){\n    return &apos;IE&gt;=11&apos;;\n  }else{\n    return &apos;Unkonwn&apos;;\n  }\n}\n</code></pre><h1 id=\"判断-IE-的方法\"><a href=\"#判断-IE-的方法\" class=\"headerlink\" title=\"判断 IE 的方法\"></a>判断 IE 的方法</h1><h2 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1.\"></a>1.</h2><pre><code>if(window.addEventListener){ \nalert(&quot;not ie&quot;); \n}else if(window.attachEvent){ \nalert(&quot;is ie&quot;); \n}else{ \nalert(&quot;这种情况发生在不支持DHTML的老版本浏览器（现在一般都支持）&quot;) \n}\n</code></pre><h2 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2.\"></a>2.</h2><pre><code>if(document.all){ \nalert(&quot;IE&quot;); \n}else{ \nalert(&quot;not ie&quot;); \n}\n</code></pre><h2 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3.\"></a>3.</h2><pre><code>var navigatorName = &quot;Microsoft Internet Explorer&quot;; \nif( navigator.appName == navigatorName ){ \nalert(&quot;ie&quot;) \n}else{\nalert(&quot;not ie&quot;) \n}\n</code></pre><h2 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4.\"></a>4.</h2><pre><code>if(!+[1,])alert(&quot;这是ie浏览器&quot;); \nelse alert(&quot;这不是ie浏览器&quot;);\n</code></pre><h1 id=\"IE-条件注释\"><a href=\"#IE-条件注释\" class=\"headerlink\" title=\"IE 条件注释\"></a>IE 条件注释</h1><h2 id=\"关键词释义\"><a href=\"#关键词释义\" class=\"headerlink\" title=\"关键词释义\"></a>关键词释义</h2><pre><code>lt ：就是Less than的简写，也就是小于的意思。\n\nlte ：就是Less than or equal to的简写，也就是小于或等于的意思。\n\ngt ：就是Greater than的简写，也就是大于的意思。\n\ngte：就是Greater than or equal to的简写，也就是大于或等于的意思。\n\n!：就是不等于的意思，跟javascript里的不等于判断符相同。\n</code></pre><h2 id=\"例如\"><a href=\"#例如\" class=\"headerlink\" title=\"例如\"></a>例如</h2><ul>\n<li><p>1.只有 IE 可以识别</p>\n<pre><code>&lt;!--[if IE]&gt;\n &lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;my.css&quot; /&gt;\n&lt;![endif]--&gt;\n</code></pre></li>\n<li><p>2.只有特定版本才能识别</p>\n<pre><code>&lt;!--[if IE 8]&gt; \n&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;my.css&quot; /&gt;   \n&lt;![endif]--&gt;\n</code></pre></li>\n<li><p>3.等于或者高于特定版本才能识别</p>\n<pre><code>&lt;!--[if gte IE 7]&gt; \n&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;my.css&quot; /&gt;   \n&lt;![endif]--&gt;\n</code></pre></li>\n</ul>\n"},{"title":"使用 impress.js 制作PPT","_content":"\n[impress.js](https://github.com/impress/impress.js?utm_source=recordnotfound.com),用写代码的方式来制作 PPT, 逼格极高.[DEMO](https://impress.js.org/#/bored).\n\n# 使用\n##初始化\n* 创建一个 id 为 impress 的 div, 之后的所有文稿都会放在这个 div 里面.\n* 引入 impress.js   \n\n\t\t<script type=\"text/javascript\" src=\"impress.js\"></script>\n\t\t<script type=\"text/javascript\">\n\t\timpress().init()\n\t\t</script>\n\n## 创建幻灯片\n\n每张幻灯片都放在 class 为 step 的 div 里面,同时也可以为这个 div 指定 id,如下:\n\n\t<div id=\"bored\" class=\"step slide\" data-x=\"-1000\" data-y=\"-1500\" data-autoplay=\"10\">\n\t            <q>Aren’t you just <b>bored</b> with all those slides-based presentations?</q>\n\t        </div>\n\n创建以后将按照顺序播放.\n\n### 参数  \n\n#### 位置属性\n\nimpress.js 创建一个三维空间,每张幻灯片都有自己的位置(x,y,z).\n\ndata-x: x 轴坐标,向右越来越大;\n\ndata-y:y 轴坐标,向下越来越大;\n\ndata-z:z 轴坐标,向屏幕外越来越大\n\n从第一张幻灯片开始,camera 会移到每个幻灯片的坐标处,产生变换的效果.\n\n#### data-autoplay\n\n 自动播放的时间,如 data-auto-play='10' 代表在10s 后播放下一张幻灯片.\n\n#### data-scale\n\n 放大的倍数,如  data-scale='4' 代表这个元素的大小是正常元素的四倍.\n\n#### data-rorate\n\n 旋转的角度 ,如 data-rotate='90' 代表顺时针旋转90度, 角度为负则代表逆时针旋转指定度数.\n\n#### data-rorate-x/data-rorate-y\n\n 相对于x,y 轴旋转的角度.","source":"_posts/2018.12.19.impress.js.md","raw":"---\ntitle: 使用 impress.js 制作PPT\ntags: [JS]\ncategories: 知识 \n---\n\n[impress.js](https://github.com/impress/impress.js?utm_source=recordnotfound.com),用写代码的方式来制作 PPT, 逼格极高.[DEMO](https://impress.js.org/#/bored).\n\n# 使用\n##初始化\n* 创建一个 id 为 impress 的 div, 之后的所有文稿都会放在这个 div 里面.\n* 引入 impress.js   \n\n\t\t<script type=\"text/javascript\" src=\"impress.js\"></script>\n\t\t<script type=\"text/javascript\">\n\t\timpress().init()\n\t\t</script>\n\n## 创建幻灯片\n\n每张幻灯片都放在 class 为 step 的 div 里面,同时也可以为这个 div 指定 id,如下:\n\n\t<div id=\"bored\" class=\"step slide\" data-x=\"-1000\" data-y=\"-1500\" data-autoplay=\"10\">\n\t            <q>Aren’t you just <b>bored</b> with all those slides-based presentations?</q>\n\t        </div>\n\n创建以后将按照顺序播放.\n\n### 参数  \n\n#### 位置属性\n\nimpress.js 创建一个三维空间,每张幻灯片都有自己的位置(x,y,z).\n\ndata-x: x 轴坐标,向右越来越大;\n\ndata-y:y 轴坐标,向下越来越大;\n\ndata-z:z 轴坐标,向屏幕外越来越大\n\n从第一张幻灯片开始,camera 会移到每个幻灯片的坐标处,产生变换的效果.\n\n#### data-autoplay\n\n 自动播放的时间,如 data-auto-play='10' 代表在10s 后播放下一张幻灯片.\n\n#### data-scale\n\n 放大的倍数,如  data-scale='4' 代表这个元素的大小是正常元素的四倍.\n\n#### data-rorate\n\n 旋转的角度 ,如 data-rotate='90' 代表顺时针旋转90度, 角度为负则代表逆时针旋转指定度数.\n\n#### data-rorate-x/data-rorate-y\n\n 相对于x,y 轴旋转的角度.","slug":"2018.12.19.impress.js","published":1,"date":"2018-12-19T02:24:11.701Z","updated":"2018-12-19T04:56:31.579Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziiq4000rrh9z8hdoepux","content":"<p><a href=\"https://github.com/impress/impress.js?utm_source=recordnotfound.com\" target=\"_blank\" rel=\"noopener\">impress.js</a>,用写代码的方式来制作 PPT, 逼格极高.<a href=\"https://impress.js.org/#/bored\" target=\"_blank\" rel=\"noopener\">DEMO</a>.</p>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><p>##初始化</p>\n<ul>\n<li>创建一个 id 为 impress 的 div, 之后的所有文稿都会放在这个 div 里面.</li>\n<li><p>引入 impress.js   </p>\n<pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;impress.js&quot;&gt;&lt;/script&gt;\n&lt;script type=&quot;text/javascript&quot;&gt;\nimpress().init()\n&lt;/script&gt;\n</code></pre></li>\n</ul>\n<h2 id=\"创建幻灯片\"><a href=\"#创建幻灯片\" class=\"headerlink\" title=\"创建幻灯片\"></a>创建幻灯片</h2><p>每张幻灯片都放在 class 为 step 的 div 里面,同时也可以为这个 div 指定 id,如下:</p>\n<pre><code>&lt;div id=&quot;bored&quot; class=&quot;step slide&quot; data-x=&quot;-1000&quot; data-y=&quot;-1500&quot; data-autoplay=&quot;10&quot;&gt;\n            &lt;q&gt;Aren’t you just &lt;b&gt;bored&lt;/b&gt; with all those slides-based presentations?&lt;/q&gt;\n        &lt;/div&gt;\n</code></pre><p>创建以后将按照顺序播放.</p>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><h4 id=\"位置属性\"><a href=\"#位置属性\" class=\"headerlink\" title=\"位置属性\"></a>位置属性</h4><p>impress.js 创建一个三维空间,每张幻灯片都有自己的位置(x,y,z).</p>\n<p>data-x: x 轴坐标,向右越来越大;</p>\n<p>data-y:y 轴坐标,向下越来越大;</p>\n<p>data-z:z 轴坐标,向屏幕外越来越大</p>\n<p>从第一张幻灯片开始,camera 会移到每个幻灯片的坐标处,产生变换的效果.</p>\n<h4 id=\"data-autoplay\"><a href=\"#data-autoplay\" class=\"headerlink\" title=\"data-autoplay\"></a>data-autoplay</h4><p> 自动播放的时间,如 data-auto-play=’10’ 代表在10s 后播放下一张幻灯片.</p>\n<h4 id=\"data-scale\"><a href=\"#data-scale\" class=\"headerlink\" title=\"data-scale\"></a>data-scale</h4><p> 放大的倍数,如  data-scale=’4’ 代表这个元素的大小是正常元素的四倍.</p>\n<h4 id=\"data-rorate\"><a href=\"#data-rorate\" class=\"headerlink\" title=\"data-rorate\"></a>data-rorate</h4><p> 旋转的角度 ,如 data-rotate=’90’ 代表顺时针旋转90度, 角度为负则代表逆时针旋转指定度数.</p>\n<h4 id=\"data-rorate-x-data-rorate-y\"><a href=\"#data-rorate-x-data-rorate-y\" class=\"headerlink\" title=\"data-rorate-x/data-rorate-y\"></a>data-rorate-x/data-rorate-y</h4><p> 相对于x,y 轴旋转的角度.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://github.com/impress/impress.js?utm_source=recordnotfound.com\" target=\"_blank\" rel=\"noopener\">impress.js</a>,用写代码的方式来制作 PPT, 逼格极高.<a href=\"https://impress.js.org/#/bored\" target=\"_blank\" rel=\"noopener\">DEMO</a>.</p>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><p>##初始化</p>\n<ul>\n<li>创建一个 id 为 impress 的 div, 之后的所有文稿都会放在这个 div 里面.</li>\n<li><p>引入 impress.js   </p>\n<pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;impress.js&quot;&gt;&lt;/script&gt;\n&lt;script type=&quot;text/javascript&quot;&gt;\nimpress().init()\n&lt;/script&gt;\n</code></pre></li>\n</ul>\n<h2 id=\"创建幻灯片\"><a href=\"#创建幻灯片\" class=\"headerlink\" title=\"创建幻灯片\"></a>创建幻灯片</h2><p>每张幻灯片都放在 class 为 step 的 div 里面,同时也可以为这个 div 指定 id,如下:</p>\n<pre><code>&lt;div id=&quot;bored&quot; class=&quot;step slide&quot; data-x=&quot;-1000&quot; data-y=&quot;-1500&quot; data-autoplay=&quot;10&quot;&gt;\n            &lt;q&gt;Aren’t you just &lt;b&gt;bored&lt;/b&gt; with all those slides-based presentations?&lt;/q&gt;\n        &lt;/div&gt;\n</code></pre><p>创建以后将按照顺序播放.</p>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><h4 id=\"位置属性\"><a href=\"#位置属性\" class=\"headerlink\" title=\"位置属性\"></a>位置属性</h4><p>impress.js 创建一个三维空间,每张幻灯片都有自己的位置(x,y,z).</p>\n<p>data-x: x 轴坐标,向右越来越大;</p>\n<p>data-y:y 轴坐标,向下越来越大;</p>\n<p>data-z:z 轴坐标,向屏幕外越来越大</p>\n<p>从第一张幻灯片开始,camera 会移到每个幻灯片的坐标处,产生变换的效果.</p>\n<h4 id=\"data-autoplay\"><a href=\"#data-autoplay\" class=\"headerlink\" title=\"data-autoplay\"></a>data-autoplay</h4><p> 自动播放的时间,如 data-auto-play=’10’ 代表在10s 后播放下一张幻灯片.</p>\n<h4 id=\"data-scale\"><a href=\"#data-scale\" class=\"headerlink\" title=\"data-scale\"></a>data-scale</h4><p> 放大的倍数,如  data-scale=’4’ 代表这个元素的大小是正常元素的四倍.</p>\n<h4 id=\"data-rorate\"><a href=\"#data-rorate\" class=\"headerlink\" title=\"data-rorate\"></a>data-rorate</h4><p> 旋转的角度 ,如 data-rotate=’90’ 代表顺时针旋转90度, 角度为负则代表逆时针旋转指定度数.</p>\n<h4 id=\"data-rorate-x-data-rorate-y\"><a href=\"#data-rorate-x-data-rorate-y\" class=\"headerlink\" title=\"data-rorate-x/data-rorate-y\"></a>data-rorate-x/data-rorate-y</h4><p> 相对于x,y 轴旋转的角度.</p>\n"},{"title":"ES6 之 promise","_content":"\npromise 是一步变成的一种解决方案,比传统的回调函数和事件更强大和合理, es6将其写入语言标准,统一了用法,并原生提供了 promise对象.从语法上来说, promise 是一个对象,从它可以获取异步操作的消息, promise 提供统一的 api, 各种异步操作都可以用同样的方法进行处理.\n\n# promise 的特点\n\n## 对象的状态不受外界影响\n\n promise 对象代表一个异步操作,有三种状态, pending(进行中),fulfilled(已成功)和 rejected(已失败).只有结果来决定当前是哪种状态.\n\n## 一旦状态改变就不再变化\n\n promise 对象的改变,只有两种可能,从 pending 变为 fulfilled 和从 pending 变为 rejected, 发生这两种状态改变以后装填就不再变化了.如果改变已经发生了,再对 promise 对象添加回调函数,也会立即得到这个结果.\n\n# 基本用法\n\n promise 对象是一个构造函数,用来生成 promise 实例.\n\n\tconst promise = new Promise(function(resolve, reject) {\n\t  // ... some code\n\t\n\t  if (/* 异步操作成功 */){\n\t    resolve(value);\n\t  } else {\n\t    reject(error);\n\t  }\n\t});\n\nPromise 构造函数接受一个函数作为参数,该函数的两个参数分别为 resolve 和 reject, 这两个参数是两个函数.\n\nresolve 函数的作用是,将 promise 对象的状态从未完成装变为完成,即从 pending 变为 resolved. 在异步操作成功时调用,并将异步操作的结果,作为参数传递出去;\n\nreject 函数的作用是,将 promise 对象的状态从未完成变为失败,即从 pending 变为 rejected. 在异步操作失败时调用,并将异步操作爆出的信息,作为参数传递出去.\n\nPromise 实例生成以后,可以使用 .then  方法来接收两个回调函数作为参数,第一个回调函数是Promise对象的状态变为resolved时调用，第二个回调函数是Promise对象的状态变为rejected时调用。其中，第二个函数是可选的，不一定要提供。这两个函数都接受Promise对象传出的值作为参数。\n\n也可以使用 .catch 来接收 promise 变为 rejected 时的回调函数.\n\n\tfunction test(resolve, reject) {\n\t    var timeOut = Math.random() * 2;\n\t    log('set timeout to: ' + timeOut + ' seconds.');\n\t    setTimeout(function () {\n\t        if (timeOut < 1) {\n\t            log('call resolve()...');\n\t            resolve('200 OK');\n\t        }\n\t        else {\n\t            log('call reject()...');\n\t            reject('timeout in ' + timeOut + ' seconds.');\n\t        }\n\t    }, timeOut * 1000);\n\t};\n\tnew Promise(test).then(function (result) {\n\t    console.log('成功：' + result);\n\t}).catch(function (reason) {\n\t    console.log('失败：' + reason);\n\t});\n\n`test()`只关心自身的逻辑,并不关心具体的 resolve 和 rejected 将如何处理结果.也就是说 Promise 最大的好处,就是在异步执行的过程中,吧执行代码和处理结果清晰地分离了.\n\nPromise还可以做更多的事情，比如，有若干个异步任务，需要先做任务1，如果成功后再做任务2，任何任务失败则不再继续并执行错误处理函数。\n\n有些时候，多个异步任务是为了容错。比如，同时向两个URL读取用户的个人信息，只需要获得先返回的结果即可。这种情况下，用Promise.race()实现：\n\n\tvar p1 = new Promise(function (resolve, reject) {\n\t    setTimeout(resolve, 500, 'P1');\n\t});\n\tvar p2 = new Promise(function (resolve, reject) {\n\t    setTimeout(resolve, 600, 'P2');\n\t});\n\tPromise.race([p1, p2]).then(function (result) {\n\t    console.log(result); // 'P1'\n\t});\n\n由于p1执行较快，Promise的then()将获得结果'P1'。p2仍在继续执行，但执行结果将被丢弃。\n\n如果我们组合使用Promise，就可以把很多异步任务以并行和串行的方式组合起来执行。\n\n\nto be continued...","source":"_posts/2018.12.24.es6-promise.md","raw":"---\ntitle: ES6 之 promise\ntags: [es6]\ncategories: 知识 \n---\n\npromise 是一步变成的一种解决方案,比传统的回调函数和事件更强大和合理, es6将其写入语言标准,统一了用法,并原生提供了 promise对象.从语法上来说, promise 是一个对象,从它可以获取异步操作的消息, promise 提供统一的 api, 各种异步操作都可以用同样的方法进行处理.\n\n# promise 的特点\n\n## 对象的状态不受外界影响\n\n promise 对象代表一个异步操作,有三种状态, pending(进行中),fulfilled(已成功)和 rejected(已失败).只有结果来决定当前是哪种状态.\n\n## 一旦状态改变就不再变化\n\n promise 对象的改变,只有两种可能,从 pending 变为 fulfilled 和从 pending 变为 rejected, 发生这两种状态改变以后装填就不再变化了.如果改变已经发生了,再对 promise 对象添加回调函数,也会立即得到这个结果.\n\n# 基本用法\n\n promise 对象是一个构造函数,用来生成 promise 实例.\n\n\tconst promise = new Promise(function(resolve, reject) {\n\t  // ... some code\n\t\n\t  if (/* 异步操作成功 */){\n\t    resolve(value);\n\t  } else {\n\t    reject(error);\n\t  }\n\t});\n\nPromise 构造函数接受一个函数作为参数,该函数的两个参数分别为 resolve 和 reject, 这两个参数是两个函数.\n\nresolve 函数的作用是,将 promise 对象的状态从未完成装变为完成,即从 pending 变为 resolved. 在异步操作成功时调用,并将异步操作的结果,作为参数传递出去;\n\nreject 函数的作用是,将 promise 对象的状态从未完成变为失败,即从 pending 变为 rejected. 在异步操作失败时调用,并将异步操作爆出的信息,作为参数传递出去.\n\nPromise 实例生成以后,可以使用 .then  方法来接收两个回调函数作为参数,第一个回调函数是Promise对象的状态变为resolved时调用，第二个回调函数是Promise对象的状态变为rejected时调用。其中，第二个函数是可选的，不一定要提供。这两个函数都接受Promise对象传出的值作为参数。\n\n也可以使用 .catch 来接收 promise 变为 rejected 时的回调函数.\n\n\tfunction test(resolve, reject) {\n\t    var timeOut = Math.random() * 2;\n\t    log('set timeout to: ' + timeOut + ' seconds.');\n\t    setTimeout(function () {\n\t        if (timeOut < 1) {\n\t            log('call resolve()...');\n\t            resolve('200 OK');\n\t        }\n\t        else {\n\t            log('call reject()...');\n\t            reject('timeout in ' + timeOut + ' seconds.');\n\t        }\n\t    }, timeOut * 1000);\n\t};\n\tnew Promise(test).then(function (result) {\n\t    console.log('成功：' + result);\n\t}).catch(function (reason) {\n\t    console.log('失败：' + reason);\n\t});\n\n`test()`只关心自身的逻辑,并不关心具体的 resolve 和 rejected 将如何处理结果.也就是说 Promise 最大的好处,就是在异步执行的过程中,吧执行代码和处理结果清晰地分离了.\n\nPromise还可以做更多的事情，比如，有若干个异步任务，需要先做任务1，如果成功后再做任务2，任何任务失败则不再继续并执行错误处理函数。\n\n有些时候，多个异步任务是为了容错。比如，同时向两个URL读取用户的个人信息，只需要获得先返回的结果即可。这种情况下，用Promise.race()实现：\n\n\tvar p1 = new Promise(function (resolve, reject) {\n\t    setTimeout(resolve, 500, 'P1');\n\t});\n\tvar p2 = new Promise(function (resolve, reject) {\n\t    setTimeout(resolve, 600, 'P2');\n\t});\n\tPromise.race([p1, p2]).then(function (result) {\n\t    console.log(result); // 'P1'\n\t});\n\n由于p1执行较快，Promise的then()将获得结果'P1'。p2仍在继续执行，但执行结果将被丢弃。\n\n如果我们组合使用Promise，就可以把很多异步任务以并行和串行的方式组合起来执行。\n\n\nto be continued...","slug":"2018.12.24.es6-promise","published":1,"date":"2018-12-24T08:01:59.349Z","updated":"2018-12-24T09:28:59.737Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziiq4000srh9z0r8df5kh","content":"<p>promise 是一步变成的一种解决方案,比传统的回调函数和事件更强大和合理, es6将其写入语言标准,统一了用法,并原生提供了 promise对象.从语法上来说, promise 是一个对象,从它可以获取异步操作的消息, promise 提供统一的 api, 各种异步操作都可以用同样的方法进行处理.</p>\n<h1 id=\"promise-的特点\"><a href=\"#promise-的特点\" class=\"headerlink\" title=\"promise 的特点\"></a>promise 的特点</h1><h2 id=\"对象的状态不受外界影响\"><a href=\"#对象的状态不受外界影响\" class=\"headerlink\" title=\"对象的状态不受外界影响\"></a>对象的状态不受外界影响</h2><p> promise 对象代表一个异步操作,有三种状态, pending(进行中),fulfilled(已成功)和 rejected(已失败).只有结果来决定当前是哪种状态.</p>\n<h2 id=\"一旦状态改变就不再变化\"><a href=\"#一旦状态改变就不再变化\" class=\"headerlink\" title=\"一旦状态改变就不再变化\"></a>一旦状态改变就不再变化</h2><p> promise 对象的改变,只有两种可能,从 pending 变为 fulfilled 和从 pending 变为 rejected, 发生这两种状态改变以后装填就不再变化了.如果改变已经发生了,再对 promise 对象添加回调函数,也会立即得到这个结果.</p>\n<h1 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h1><p> promise 对象是一个构造函数,用来生成 promise 实例.</p>\n<pre><code>const promise = new Promise(function(resolve, reject) {\n  // ... some code\n\n  if (/* 异步操作成功 */){\n    resolve(value);\n  } else {\n    reject(error);\n  }\n});\n</code></pre><p>Promise 构造函数接受一个函数作为参数,该函数的两个参数分别为 resolve 和 reject, 这两个参数是两个函数.</p>\n<p>resolve 函数的作用是,将 promise 对象的状态从未完成装变为完成,即从 pending 变为 resolved. 在异步操作成功时调用,并将异步操作的结果,作为参数传递出去;</p>\n<p>reject 函数的作用是,将 promise 对象的状态从未完成变为失败,即从 pending 变为 rejected. 在异步操作失败时调用,并将异步操作爆出的信息,作为参数传递出去.</p>\n<p>Promise 实例生成以后,可以使用 .then  方法来接收两个回调函数作为参数,第一个回调函数是Promise对象的状态变为resolved时调用，第二个回调函数是Promise对象的状态变为rejected时调用。其中，第二个函数是可选的，不一定要提供。这两个函数都接受Promise对象传出的值作为参数。</p>\n<p>也可以使用 .catch 来接收 promise 变为 rejected 时的回调函数.</p>\n<pre><code>function test(resolve, reject) {\n    var timeOut = Math.random() * 2;\n    log(&apos;set timeout to: &apos; + timeOut + &apos; seconds.&apos;);\n    setTimeout(function () {\n        if (timeOut &lt; 1) {\n            log(&apos;call resolve()...&apos;);\n            resolve(&apos;200 OK&apos;);\n        }\n        else {\n            log(&apos;call reject()...&apos;);\n            reject(&apos;timeout in &apos; + timeOut + &apos; seconds.&apos;);\n        }\n    }, timeOut * 1000);\n};\nnew Promise(test).then(function (result) {\n    console.log(&apos;成功：&apos; + result);\n}).catch(function (reason) {\n    console.log(&apos;失败：&apos; + reason);\n});\n</code></pre><p><code>test()</code>只关心自身的逻辑,并不关心具体的 resolve 和 rejected 将如何处理结果.也就是说 Promise 最大的好处,就是在异步执行的过程中,吧执行代码和处理结果清晰地分离了.</p>\n<p>Promise还可以做更多的事情，比如，有若干个异步任务，需要先做任务1，如果成功后再做任务2，任何任务失败则不再继续并执行错误处理函数。</p>\n<p>有些时候，多个异步任务是为了容错。比如，同时向两个URL读取用户的个人信息，只需要获得先返回的结果即可。这种情况下，用Promise.race()实现：</p>\n<pre><code>var p1 = new Promise(function (resolve, reject) {\n    setTimeout(resolve, 500, &apos;P1&apos;);\n});\nvar p2 = new Promise(function (resolve, reject) {\n    setTimeout(resolve, 600, &apos;P2&apos;);\n});\nPromise.race([p1, p2]).then(function (result) {\n    console.log(result); // &apos;P1&apos;\n});\n</code></pre><p>由于p1执行较快，Promise的then()将获得结果’P1’。p2仍在继续执行，但执行结果将被丢弃。</p>\n<p>如果我们组合使用Promise，就可以把很多异步任务以并行和串行的方式组合起来执行。</p>\n<p>to be continued…</p>\n","site":{"data":{}},"excerpt":"","more":"<p>promise 是一步变成的一种解决方案,比传统的回调函数和事件更强大和合理, es6将其写入语言标准,统一了用法,并原生提供了 promise对象.从语法上来说, promise 是一个对象,从它可以获取异步操作的消息, promise 提供统一的 api, 各种异步操作都可以用同样的方法进行处理.</p>\n<h1 id=\"promise-的特点\"><a href=\"#promise-的特点\" class=\"headerlink\" title=\"promise 的特点\"></a>promise 的特点</h1><h2 id=\"对象的状态不受外界影响\"><a href=\"#对象的状态不受外界影响\" class=\"headerlink\" title=\"对象的状态不受外界影响\"></a>对象的状态不受外界影响</h2><p> promise 对象代表一个异步操作,有三种状态, pending(进行中),fulfilled(已成功)和 rejected(已失败).只有结果来决定当前是哪种状态.</p>\n<h2 id=\"一旦状态改变就不再变化\"><a href=\"#一旦状态改变就不再变化\" class=\"headerlink\" title=\"一旦状态改变就不再变化\"></a>一旦状态改变就不再变化</h2><p> promise 对象的改变,只有两种可能,从 pending 变为 fulfilled 和从 pending 变为 rejected, 发生这两种状态改变以后装填就不再变化了.如果改变已经发生了,再对 promise 对象添加回调函数,也会立即得到这个结果.</p>\n<h1 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h1><p> promise 对象是一个构造函数,用来生成 promise 实例.</p>\n<pre><code>const promise = new Promise(function(resolve, reject) {\n  // ... some code\n\n  if (/* 异步操作成功 */){\n    resolve(value);\n  } else {\n    reject(error);\n  }\n});\n</code></pre><p>Promise 构造函数接受一个函数作为参数,该函数的两个参数分别为 resolve 和 reject, 这两个参数是两个函数.</p>\n<p>resolve 函数的作用是,将 promise 对象的状态从未完成装变为完成,即从 pending 变为 resolved. 在异步操作成功时调用,并将异步操作的结果,作为参数传递出去;</p>\n<p>reject 函数的作用是,将 promise 对象的状态从未完成变为失败,即从 pending 变为 rejected. 在异步操作失败时调用,并将异步操作爆出的信息,作为参数传递出去.</p>\n<p>Promise 实例生成以后,可以使用 .then  方法来接收两个回调函数作为参数,第一个回调函数是Promise对象的状态变为resolved时调用，第二个回调函数是Promise对象的状态变为rejected时调用。其中，第二个函数是可选的，不一定要提供。这两个函数都接受Promise对象传出的值作为参数。</p>\n<p>也可以使用 .catch 来接收 promise 变为 rejected 时的回调函数.</p>\n<pre><code>function test(resolve, reject) {\n    var timeOut = Math.random() * 2;\n    log(&apos;set timeout to: &apos; + timeOut + &apos; seconds.&apos;);\n    setTimeout(function () {\n        if (timeOut &lt; 1) {\n            log(&apos;call resolve()...&apos;);\n            resolve(&apos;200 OK&apos;);\n        }\n        else {\n            log(&apos;call reject()...&apos;);\n            reject(&apos;timeout in &apos; + timeOut + &apos; seconds.&apos;);\n        }\n    }, timeOut * 1000);\n};\nnew Promise(test).then(function (result) {\n    console.log(&apos;成功：&apos; + result);\n}).catch(function (reason) {\n    console.log(&apos;失败：&apos; + reason);\n});\n</code></pre><p><code>test()</code>只关心自身的逻辑,并不关心具体的 resolve 和 rejected 将如何处理结果.也就是说 Promise 最大的好处,就是在异步执行的过程中,吧执行代码和处理结果清晰地分离了.</p>\n<p>Promise还可以做更多的事情，比如，有若干个异步任务，需要先做任务1，如果成功后再做任务2，任何任务失败则不再继续并执行错误处理函数。</p>\n<p>有些时候，多个异步任务是为了容错。比如，同时向两个URL读取用户的个人信息，只需要获得先返回的结果即可。这种情况下，用Promise.race()实现：</p>\n<pre><code>var p1 = new Promise(function (resolve, reject) {\n    setTimeout(resolve, 500, &apos;P1&apos;);\n});\nvar p2 = new Promise(function (resolve, reject) {\n    setTimeout(resolve, 600, &apos;P2&apos;);\n});\nPromise.race([p1, p2]).then(function (result) {\n    console.log(result); // &apos;P1&apos;\n});\n</code></pre><p>由于p1执行较快，Promise的then()将获得结果’P1’。p2仍在继续执行，但执行结果将被丢弃。</p>\n<p>如果我们组合使用Promise，就可以把很多异步任务以并行和串行的方式组合起来执行。</p>\n<p>to be continued…</p>\n"},{"title":"es6 之 import 与 export","_content":"\nES6 实现了模块功能,称为浏览器和服务器的通用解决方案.ES6 模块主要包括两个功能:import 与 export.\n\nexport 用于对外输出本模块(一个文件可以理解为一个模块)变量的接口;\n\nimport 用于在一个模块中加载另一个含有 export 接口的模块.\n\n使用 export 命令定义了模块的对外接口以后,其他 js 文件就可以通过 import 命令加载这个模块(文件).\n### export\n\n\na.js:\n\n\tvar sex=\"boy\";\n\tvar echo=function(value){\n\t　　console.log(value)\n\t}\n\texport {sex,echo} \n\n使用 export 向大括号中添加 sex 和 echo 并输出,就可以将 sex 和 echo 以变量标识符的形式暴露给其他文件而被读取到,不能直接写成 export sex.对外的输出必须是变量接口,而不是输出的字符串.\n\nexport 命令除了输出变量,还可以输出函数或者类.\n\nexport 语句输出的值,与其对应的值是动态绑定关系,通过该模块的值,可以取到模块内部实时的值.\n\nexpoet 命令可以出现在模块的任何位置,只要处于模块顶层就可以.\n\n### import\n\nb.js\n\n\timport {sex,echo} from \"./a.js\" \n\tconsole.log(sex)   // boy\n\techo(sex) // boy\n\t\n\t\n\t\nimport 命令输入的变量都是只读的,因为它的本质是输入接口.也就是说,不允许在加载模块的脚本里面改写接口.\n\nimport 具有提升效果,会提升到整个模块的头部,首先执行.\n\n由于 import 是静态执行,所以不能使用表达式和变量,这些只有在运行时才能得到的结果的语法结构.\n\n\n### export default\n可以使用 `export default` ,为模块指定默认输出,这样就不需要知道所要加载模块的变量名.\n\n\t// export-default.js\n\texport default function () {\n\t  console.log('foo');\n\t}\n\n上面的代码的默认输出是一个函数,其他模块加载该模块时,import 命令可以为该匿名函数指定任意名字.\n\n\t// import-default.js\n\timport customName from './export-default';\n\tcustomName(); // 'foo'\n\n\n\n\n","source":"_posts/2018.12.27.es6-import.md","raw":"---\ntitle: es6 之 import 与 export\ntags: [es6]\ncategories: 知识 \n---\n\nES6 实现了模块功能,称为浏览器和服务器的通用解决方案.ES6 模块主要包括两个功能:import 与 export.\n\nexport 用于对外输出本模块(一个文件可以理解为一个模块)变量的接口;\n\nimport 用于在一个模块中加载另一个含有 export 接口的模块.\n\n使用 export 命令定义了模块的对外接口以后,其他 js 文件就可以通过 import 命令加载这个模块(文件).\n### export\n\n\na.js:\n\n\tvar sex=\"boy\";\n\tvar echo=function(value){\n\t　　console.log(value)\n\t}\n\texport {sex,echo} \n\n使用 export 向大括号中添加 sex 和 echo 并输出,就可以将 sex 和 echo 以变量标识符的形式暴露给其他文件而被读取到,不能直接写成 export sex.对外的输出必须是变量接口,而不是输出的字符串.\n\nexport 命令除了输出变量,还可以输出函数或者类.\n\nexport 语句输出的值,与其对应的值是动态绑定关系,通过该模块的值,可以取到模块内部实时的值.\n\nexpoet 命令可以出现在模块的任何位置,只要处于模块顶层就可以.\n\n### import\n\nb.js\n\n\timport {sex,echo} from \"./a.js\" \n\tconsole.log(sex)   // boy\n\techo(sex) // boy\n\t\n\t\n\t\nimport 命令输入的变量都是只读的,因为它的本质是输入接口.也就是说,不允许在加载模块的脚本里面改写接口.\n\nimport 具有提升效果,会提升到整个模块的头部,首先执行.\n\n由于 import 是静态执行,所以不能使用表达式和变量,这些只有在运行时才能得到的结果的语法结构.\n\n\n### export default\n可以使用 `export default` ,为模块指定默认输出,这样就不需要知道所要加载模块的变量名.\n\n\t// export-default.js\n\texport default function () {\n\t  console.log('foo');\n\t}\n\n上面的代码的默认输出是一个函数,其他模块加载该模块时,import 命令可以为该匿名函数指定任意名字.\n\n\t// import-default.js\n\timport customName from './export-default';\n\tcustomName(); // 'foo'\n\n\n\n\n","slug":"2018.12.27.es6-import","published":1,"date":"2018-12-27T07:47:09.160Z","updated":"2018-12-27T09:36:18.245Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziiq4000trh9zdrafhhro","content":"<p>ES6 实现了模块功能,称为浏览器和服务器的通用解决方案.ES6 模块主要包括两个功能:import 与 export.</p>\n<p>export 用于对外输出本模块(一个文件可以理解为一个模块)变量的接口;</p>\n<p>import 用于在一个模块中加载另一个含有 export 接口的模块.</p>\n<p>使用 export 命令定义了模块的对外接口以后,其他 js 文件就可以通过 import 命令加载这个模块(文件).</p>\n<h3 id=\"export\"><a href=\"#export\" class=\"headerlink\" title=\"export\"></a>export</h3><p>a.js:</p>\n<pre><code>var sex=&quot;boy&quot;;\nvar echo=function(value){\n　　console.log(value)\n}\nexport {sex,echo} \n</code></pre><p>使用 export 向大括号中添加 sex 和 echo 并输出,就可以将 sex 和 echo 以变量标识符的形式暴露给其他文件而被读取到,不能直接写成 export sex.对外的输出必须是变量接口,而不是输出的字符串.</p>\n<p>export 命令除了输出变量,还可以输出函数或者类.</p>\n<p>export 语句输出的值,与其对应的值是动态绑定关系,通过该模块的值,可以取到模块内部实时的值.</p>\n<p>expoet 命令可以出现在模块的任何位置,只要处于模块顶层就可以.</p>\n<h3 id=\"import\"><a href=\"#import\" class=\"headerlink\" title=\"import\"></a>import</h3><p>b.js</p>\n<pre><code>import {sex,echo} from &quot;./a.js&quot; \nconsole.log(sex)   // boy\necho(sex) // boy\n</code></pre><p>import 命令输入的变量都是只读的,因为它的本质是输入接口.也就是说,不允许在加载模块的脚本里面改写接口.</p>\n<p>import 具有提升效果,会提升到整个模块的头部,首先执行.</p>\n<p>由于 import 是静态执行,所以不能使用表达式和变量,这些只有在运行时才能得到的结果的语法结构.</p>\n<h3 id=\"export-default\"><a href=\"#export-default\" class=\"headerlink\" title=\"export default\"></a>export default</h3><p>可以使用 <code>export default</code> ,为模块指定默认输出,这样就不需要知道所要加载模块的变量名.</p>\n<pre><code>// export-default.js\nexport default function () {\n  console.log(&apos;foo&apos;);\n}\n</code></pre><p>上面的代码的默认输出是一个函数,其他模块加载该模块时,import 命令可以为该匿名函数指定任意名字.</p>\n<pre><code>// import-default.js\nimport customName from &apos;./export-default&apos;;\ncustomName(); // &apos;foo&apos;\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<p>ES6 实现了模块功能,称为浏览器和服务器的通用解决方案.ES6 模块主要包括两个功能:import 与 export.</p>\n<p>export 用于对外输出本模块(一个文件可以理解为一个模块)变量的接口;</p>\n<p>import 用于在一个模块中加载另一个含有 export 接口的模块.</p>\n<p>使用 export 命令定义了模块的对外接口以后,其他 js 文件就可以通过 import 命令加载这个模块(文件).</p>\n<h3 id=\"export\"><a href=\"#export\" class=\"headerlink\" title=\"export\"></a>export</h3><p>a.js:</p>\n<pre><code>var sex=&quot;boy&quot;;\nvar echo=function(value){\n　　console.log(value)\n}\nexport {sex,echo} \n</code></pre><p>使用 export 向大括号中添加 sex 和 echo 并输出,就可以将 sex 和 echo 以变量标识符的形式暴露给其他文件而被读取到,不能直接写成 export sex.对外的输出必须是变量接口,而不是输出的字符串.</p>\n<p>export 命令除了输出变量,还可以输出函数或者类.</p>\n<p>export 语句输出的值,与其对应的值是动态绑定关系,通过该模块的值,可以取到模块内部实时的值.</p>\n<p>expoet 命令可以出现在模块的任何位置,只要处于模块顶层就可以.</p>\n<h3 id=\"import\"><a href=\"#import\" class=\"headerlink\" title=\"import\"></a>import</h3><p>b.js</p>\n<pre><code>import {sex,echo} from &quot;./a.js&quot; \nconsole.log(sex)   // boy\necho(sex) // boy\n</code></pre><p>import 命令输入的变量都是只读的,因为它的本质是输入接口.也就是说,不允许在加载模块的脚本里面改写接口.</p>\n<p>import 具有提升效果,会提升到整个模块的头部,首先执行.</p>\n<p>由于 import 是静态执行,所以不能使用表达式和变量,这些只有在运行时才能得到的结果的语法结构.</p>\n<h3 id=\"export-default\"><a href=\"#export-default\" class=\"headerlink\" title=\"export default\"></a>export default</h3><p>可以使用 <code>export default</code> ,为模块指定默认输出,这样就不需要知道所要加载模块的变量名.</p>\n<pre><code>// export-default.js\nexport default function () {\n  console.log(&apos;foo&apos;);\n}\n</code></pre><p>上面的代码的默认输出是一个函数,其他模块加载该模块时,import 命令可以为该匿名函数指定任意名字.</p>\n<pre><code>// import-default.js\nimport customName from &apos;./export-default&apos;;\ncustomName(); // &apos;foo&apos;\n</code></pre>"},{"title":"Linux常用命令","_content":"\n# Linux 命令\n\n## 文件管理\n\n`vi test.js`\n创建并打开一个文件: test.js\n`touch`\ntouch 的作用是更改一个文件的目录或者目录的时间,如果 touch 的文件不存在则会创建这个空文件.\n`echo \"abcd\" > 1.txt`\n创建 1.txt 并将 abcd 写入.\n\n### less/more/cat\n\n三种查看文件内容的工具.主要区别是:\ncat 是一次性显示整个文件的内容,还可以把多个文件连接起来显示.经常与重定向符号配合使用,适用于文件比较少的情况.\nmore/less 一般会用来显示超过一屏的内容,并且提供翻页功能.more 比 cat 强大,提供分页显示的功能,less 比 more 更强大,提供翻页,跳转,查找等命令,并且 more/less 都支持使用 \bspace/b 显示下一页,使用 f 显示上一页.\n在 less 中,按`h`可以进入帮助界面,提供丰富的帮助命令.\n\n### vi/vim\n\nvi/vim\b 是 Linux 下的文本编辑工具,在 vi/vim 的版本是选择上,原则是:**能使用 vim 就使用 vim,能用最新版就用最新版**\n\n#### 启动及关闭 vi/vim\n\n#####启动\nvi 打开 vi/vim\n`vi <file>` 打开 vi/vim 并加载文件`<file>`\n\n##### 退出\n\n`ZQ/:q!` 无条件退出\n`ZZ/:wq` 存盘并退出\n\n##### 保存部分文件\n\n`:m,nw <file>` 将 m 行到 n 行部分的内容保存到文件 `<file>` 中 ;\n:m,nw >> `<file>` 将 m 行到 n 行的内容添加到文件 `<file>` 的末尾\n\n#### 移动光标\n\n##### 字符\n\nh 左移一个字符\nl 右移一个字符\n\n##### 单词\n\n`w/W` 移动到下一单词的开头\n`b/B` 移动到上一单词的开头\n`e/E`移动到光标所在单词的末尾\n\n##### 行\n\nj 下移一行\nk 上移一行\n0(数字) 移动到当前行的开头\n^ 移动到当前行的第一个非空字符\n\\$ 移动到当前行末尾\n:n 移动到第 N 行\n\n##### 句子\n\n) 移动到当前句子的末尾\n( 移动到当前句子的 \b 开头\n\n##### 段落\n\n} 移动到当前段落的末尾\n{ 移动到当前段落的开头\n\n##### 屏\n\nH 移动到屏幕的第一行\nM 移动到屏幕中间一行\nL 移动到 \b 屏幕的最后一行\n\n##### 页\n\n`Ctrl-f` 向前滚动一页\n`Ctrl-b`向后滚动一页\n`Ctrl-u` 向前滚动半页\n`Ctrl-d` 向后滚动半页\n\n##### 文件\n\n`G` 移动到文件末尾\n`gg` 移动到文件开头\n`:0` 移动到文件第一行\n`:$` 移动到文件最后一行\n\n#### 文本编辑\n\n##### 字符\n\nx 删除光标位置的字符\nc 更改当前字符并进入插入模式\ns 替换光标位置的字符并进入插入模式\nr 替换光标位置的字符但不进入插入模式\ni 在当前位置的字符之前进入插入模式\na 在当前位置的字符之后进入插入模式\n\n##### 单词\n\ncw/cW 删除当前单词从光标开始的部分并进入插入模式\ncb/cB 删除当前单词从光标所在位置至单词开始的部分并进入插入模式\ndw/dW 删除当前单词从光标开始的部分但不进入插入模式\ndb/dB 删除当前单词从光标所在位置至单词开始的部分但不进入插入模式\n\n##### 行\n\ndd 删除当前行\nd0 删除从当前光标开始到行末的内容\nd\\$ 删除从当前光标开始到行末的内容\nI 在当前行的行首进入插入模式\nA 在当前行的行尾进入插入模式\no 在当前行下方另起一行进入插入模式\nO 在当前行上方另起一行进入插入模式\n\n##### 句子\n\nd) 删除当前句子从光标位置开始到句末的内容\nd( 删除当前句子从光标位置开始到句首的内容\n\n##### 段落\n\nd} 删除当前段落从光标位置开始到段末的内容\nd{ 删除当前段落从光标位置开始到段首的内容\n\n#### 文本编辑的高效命令\n\n##### 复制与粘贴\n\nyw 复制当前单词从光标开始的部分\nyy 复制光标所在行的所有字符\np 将最后一个删除或复制文本放在当前字符\nP 将最后一个删除或复制文本放在当前字符之前 配合操作数使用可快速拷贝编辑文本\n\n##### 撤销与重做\n\nu 撤消更改\nCtrl-R 重做更改\n\n##### 重复操作\n\n. 重复上次操作\n\n##### 交换相邻字符或行\n\nxp 交换光标位置的字符和它右边的字符\nddp 交换光标位置的行和它的下一行\n\n##### 大小写转换\n\n~ 将光标下的字母大小写反向转换\nguw 将光标所在的单词变为小写\nguw 将光标所在的单词变为小写\ngUw 将光标所在的单词变为大写\nguu 光标所在的行所有字符变为小写\ngUU 光标所在的行所有字符变为大写\ng~~ 光标所在的行所有字符大小写反向转换\n\n##### 取得外部输出\n\n`: r!<cmd>` 将命令`<cmd>`的输出结果插入到当前光标所在位置\n`:r <file>` 将文件`<file>` 读入到当前光标所在位置\n\n##### 排序\n\n`:1,$!sort` 将文件内的所有内容排序\n\n##### 加入行号\n\n:%!nl 在所有非空行前加入行号\n:%!nl -ba 在所有行前加入行号\n\n##### 缩进\n\n`>>` 右缩进（可配合操作数使用）\n`<<` 左缩进（可配合操作数使用）\n\n##### 自动补全\n\nctrl-p 自动补全\n\n##### 显示当前编辑文件名\n\nCtrl-g 显示当前编辑文件名及行数\n\n##### 显示字符 \b 内码\n\nga 显示光标所在字符的内码（包括十进制码，十六进制码以及八进制码）\n\n#### 文本检索与替换\n\n##### 搜索\n\n/ 在文件中向前搜索\n? 在文件中向后搜索\n\n##### 搜索下一个\n\nn 搜索下一个\nN 反向搜索下一个\n\n#### vi/vim 设置\n\n##### 查看当前设置的值\n\n`:set all` 查看 vi 或 Vim 中设置的所有选项的当前值\n`:set <option>?` 查看特定选项 `<option>` 的当前值\n\n##### 设置行号显示与否\n\n:set number 显示行号\n:set no number 取消行号显示\n\n##### 设置自动缩进\n\n:set autoindent 设置自动缩进\n:set no autoindent 取消自动缩进设置\n\n##### 设置缩进宽度\n\n:set shiftwidth=4 设置缩进宽度为 4\n\n##### 设置是否忽略大小写\n\n:set ignorecase 设置忽略大小\n:set no ignorecase 取消忽略大小设置\n\n##### 设置不可见字符显示与否\n\n:set list 显示不可见字符\n:set nolist 取消显示不可见字符设置\n\n## 删除操作\n\n语法: `rm[选项] dirname`\n选项中,常用的有这几种:\n\n- -i 删除前逐一询问确认;\n- -f 即使被删除的文件的属性是只读，也直接删除，无需逐一确认.\n- -r 将目录及其底下的文件/文件夹一并删除.\n\n例如: `rm -rf /user` 会将 `/user` 目录下的文件全部删除.\n\n## 文件传输 SCP\n>scp是secure copy的简写，用于在Linux下进行远程拷贝文件的命令，和它类似的命令有cp，不过cp只是在本机进行拷贝不能跨服务器，而且scp传输是加密的。可能会稍微影响一下速度。当你服务器硬盘变为只读 read only system时，用scp可以帮你把文件移出来。另外，scp还非常不占资源，不会提高多少系统负荷，在这一点上，rsync就远远不及它了。虽然 rsync比scp会快一点，但当小文件众多的情况下，rsync会导致硬盘I/O非常高，而scp基本不影响系统正常使用。\n### 命令格式\n    scp [参数] [原路径] [目标路径]\n### 命令功能\nscp是 secure copy的缩写, scp是linux系统下基于ssh登陆进行安全的远程文件拷贝命令。linux的scp命令可以在linux服务器之间复制文件和目录。\n### 命令参数\n-1  强制scp命令使用协议ssh1  \n\n-2  强制scp命令使用协议ssh2  \n\n-4  强制scp命令只使用IPv4寻址  \n\n-6  强制scp命令只使用IPv6寻址  \n\n-B  使用批处理模式（传输过程中不询问传输口令或短语）  \n\n-C  允许压缩。（将-C标志传递给ssh，从而打开压缩功能）  \n\n-p 保留原文件的修改时间，访问时间和访问权限。  \n\n-q  不显示传输进度条。  \n\n-r  递归复制整个目录。  \n\n-v 详细方式显示输出。scp和ssh(1)会显示出整个过程的调试信息。这些信息用于调试连接，验证和配置问题。   \n\n-c cipher  以cipher将数据传输进行加密，这个选项将直接传递给ssh。   \n\n-F ssh_config  指定一个替代的ssh配置文件，此参数直接传递给ssh。  \n\n-i identity_file  从指定文件中读取传输时使用的密钥文件，此参数直接传递给ssh。    \n\n-l limit  限定用户所能使用的带宽，以Kbit/s为单位。     \n\n-o ssh_option  如果习惯于使用ssh_config(5)中的参数传递方式，   \n\n-P port  注意是大写的P, port是指定数据传输用到的端口号   \n\n-S program  指定加密传输时所使用的程序。此程序必须能够理解ssh(1)的选项。\n\n\n### 使用实例\n#### 从本地服务器复制到远程服务器： \n##### 复制文件\n命令格式：  \n\n    scp local_file remote_username@remote_ip:remote_folder  \n\n或者  \n\n    scp local_file remote_username@remote_ip:remote_file  \n\n或者  \n\n    scp local_file remote_ip:remote_folder  \n\n或者  \n\n    scp local_file remote_ip:remote_file  \n\n第1,2个指定了用户名，命令执行后需要输入用户密码，第1个仅指定了远程的目录，文件名字不变，第2个指定了文件名  \n\n第3,4个没有指定用户名，命令执行后需要输入用户名和密码，第3个仅指定了远程的目录，文件名字不变，第4个指定了文件名   \n\n##### 复制目录\n命令格式：  \n\n    scp -r local_folder remote_username@remote_ip:remote_folder  \n\n或者  \n\n    scp -r local_folder remote_ip:remote_folder  \n\n第1个指定了用户名，命令执行后需要输入用户密码；  \n\n第2个没有指定用户名，命令执行后需要输入用户名和密码；\n#### 从远程服务器复制到本地服务器： \n从远程复制到本地的scp命令与上面的命令雷同，只要将从本地复制到远程的命令后面2个参数互换顺序就行了。\n\n\n","source":"_posts/2019.01.09.linuxCommand.md","raw":"---\ntitle: Linux常用命令\ntags: [Linux]\ncategories: 知识\n---\n\n# Linux 命令\n\n## 文件管理\n\n`vi test.js`\n创建并打开一个文件: test.js\n`touch`\ntouch 的作用是更改一个文件的目录或者目录的时间,如果 touch 的文件不存在则会创建这个空文件.\n`echo \"abcd\" > 1.txt`\n创建 1.txt 并将 abcd 写入.\n\n### less/more/cat\n\n三种查看文件内容的工具.主要区别是:\ncat 是一次性显示整个文件的内容,还可以把多个文件连接起来显示.经常与重定向符号配合使用,适用于文件比较少的情况.\nmore/less 一般会用来显示超过一屏的内容,并且提供翻页功能.more 比 cat 强大,提供分页显示的功能,less 比 more 更强大,提供翻页,跳转,查找等命令,并且 more/less 都支持使用 \bspace/b 显示下一页,使用 f 显示上一页.\n在 less 中,按`h`可以进入帮助界面,提供丰富的帮助命令.\n\n### vi/vim\n\nvi/vim\b 是 Linux 下的文本编辑工具,在 vi/vim 的版本是选择上,原则是:**能使用 vim 就使用 vim,能用最新版就用最新版**\n\n#### 启动及关闭 vi/vim\n\n#####启动\nvi 打开 vi/vim\n`vi <file>` 打开 vi/vim 并加载文件`<file>`\n\n##### 退出\n\n`ZQ/:q!` 无条件退出\n`ZZ/:wq` 存盘并退出\n\n##### 保存部分文件\n\n`:m,nw <file>` 将 m 行到 n 行部分的内容保存到文件 `<file>` 中 ;\n:m,nw >> `<file>` 将 m 行到 n 行的内容添加到文件 `<file>` 的末尾\n\n#### 移动光标\n\n##### 字符\n\nh 左移一个字符\nl 右移一个字符\n\n##### 单词\n\n`w/W` 移动到下一单词的开头\n`b/B` 移动到上一单词的开头\n`e/E`移动到光标所在单词的末尾\n\n##### 行\n\nj 下移一行\nk 上移一行\n0(数字) 移动到当前行的开头\n^ 移动到当前行的第一个非空字符\n\\$ 移动到当前行末尾\n:n 移动到第 N 行\n\n##### 句子\n\n) 移动到当前句子的末尾\n( 移动到当前句子的 \b 开头\n\n##### 段落\n\n} 移动到当前段落的末尾\n{ 移动到当前段落的开头\n\n##### 屏\n\nH 移动到屏幕的第一行\nM 移动到屏幕中间一行\nL 移动到 \b 屏幕的最后一行\n\n##### 页\n\n`Ctrl-f` 向前滚动一页\n`Ctrl-b`向后滚动一页\n`Ctrl-u` 向前滚动半页\n`Ctrl-d` 向后滚动半页\n\n##### 文件\n\n`G` 移动到文件末尾\n`gg` 移动到文件开头\n`:0` 移动到文件第一行\n`:$` 移动到文件最后一行\n\n#### 文本编辑\n\n##### 字符\n\nx 删除光标位置的字符\nc 更改当前字符并进入插入模式\ns 替换光标位置的字符并进入插入模式\nr 替换光标位置的字符但不进入插入模式\ni 在当前位置的字符之前进入插入模式\na 在当前位置的字符之后进入插入模式\n\n##### 单词\n\ncw/cW 删除当前单词从光标开始的部分并进入插入模式\ncb/cB 删除当前单词从光标所在位置至单词开始的部分并进入插入模式\ndw/dW 删除当前单词从光标开始的部分但不进入插入模式\ndb/dB 删除当前单词从光标所在位置至单词开始的部分但不进入插入模式\n\n##### 行\n\ndd 删除当前行\nd0 删除从当前光标开始到行末的内容\nd\\$ 删除从当前光标开始到行末的内容\nI 在当前行的行首进入插入模式\nA 在当前行的行尾进入插入模式\no 在当前行下方另起一行进入插入模式\nO 在当前行上方另起一行进入插入模式\n\n##### 句子\n\nd) 删除当前句子从光标位置开始到句末的内容\nd( 删除当前句子从光标位置开始到句首的内容\n\n##### 段落\n\nd} 删除当前段落从光标位置开始到段末的内容\nd{ 删除当前段落从光标位置开始到段首的内容\n\n#### 文本编辑的高效命令\n\n##### 复制与粘贴\n\nyw 复制当前单词从光标开始的部分\nyy 复制光标所在行的所有字符\np 将最后一个删除或复制文本放在当前字符\nP 将最后一个删除或复制文本放在当前字符之前 配合操作数使用可快速拷贝编辑文本\n\n##### 撤销与重做\n\nu 撤消更改\nCtrl-R 重做更改\n\n##### 重复操作\n\n. 重复上次操作\n\n##### 交换相邻字符或行\n\nxp 交换光标位置的字符和它右边的字符\nddp 交换光标位置的行和它的下一行\n\n##### 大小写转换\n\n~ 将光标下的字母大小写反向转换\nguw 将光标所在的单词变为小写\nguw 将光标所在的单词变为小写\ngUw 将光标所在的单词变为大写\nguu 光标所在的行所有字符变为小写\ngUU 光标所在的行所有字符变为大写\ng~~ 光标所在的行所有字符大小写反向转换\n\n##### 取得外部输出\n\n`: r!<cmd>` 将命令`<cmd>`的输出结果插入到当前光标所在位置\n`:r <file>` 将文件`<file>` 读入到当前光标所在位置\n\n##### 排序\n\n`:1,$!sort` 将文件内的所有内容排序\n\n##### 加入行号\n\n:%!nl 在所有非空行前加入行号\n:%!nl -ba 在所有行前加入行号\n\n##### 缩进\n\n`>>` 右缩进（可配合操作数使用）\n`<<` 左缩进（可配合操作数使用）\n\n##### 自动补全\n\nctrl-p 自动补全\n\n##### 显示当前编辑文件名\n\nCtrl-g 显示当前编辑文件名及行数\n\n##### 显示字符 \b 内码\n\nga 显示光标所在字符的内码（包括十进制码，十六进制码以及八进制码）\n\n#### 文本检索与替换\n\n##### 搜索\n\n/ 在文件中向前搜索\n? 在文件中向后搜索\n\n##### 搜索下一个\n\nn 搜索下一个\nN 反向搜索下一个\n\n#### vi/vim 设置\n\n##### 查看当前设置的值\n\n`:set all` 查看 vi 或 Vim 中设置的所有选项的当前值\n`:set <option>?` 查看特定选项 `<option>` 的当前值\n\n##### 设置行号显示与否\n\n:set number 显示行号\n:set no number 取消行号显示\n\n##### 设置自动缩进\n\n:set autoindent 设置自动缩进\n:set no autoindent 取消自动缩进设置\n\n##### 设置缩进宽度\n\n:set shiftwidth=4 设置缩进宽度为 4\n\n##### 设置是否忽略大小写\n\n:set ignorecase 设置忽略大小\n:set no ignorecase 取消忽略大小设置\n\n##### 设置不可见字符显示与否\n\n:set list 显示不可见字符\n:set nolist 取消显示不可见字符设置\n\n## 删除操作\n\n语法: `rm[选项] dirname`\n选项中,常用的有这几种:\n\n- -i 删除前逐一询问确认;\n- -f 即使被删除的文件的属性是只读，也直接删除，无需逐一确认.\n- -r 将目录及其底下的文件/文件夹一并删除.\n\n例如: `rm -rf /user` 会将 `/user` 目录下的文件全部删除.\n\n## 文件传输 SCP\n>scp是secure copy的简写，用于在Linux下进行远程拷贝文件的命令，和它类似的命令有cp，不过cp只是在本机进行拷贝不能跨服务器，而且scp传输是加密的。可能会稍微影响一下速度。当你服务器硬盘变为只读 read only system时，用scp可以帮你把文件移出来。另外，scp还非常不占资源，不会提高多少系统负荷，在这一点上，rsync就远远不及它了。虽然 rsync比scp会快一点，但当小文件众多的情况下，rsync会导致硬盘I/O非常高，而scp基本不影响系统正常使用。\n### 命令格式\n    scp [参数] [原路径] [目标路径]\n### 命令功能\nscp是 secure copy的缩写, scp是linux系统下基于ssh登陆进行安全的远程文件拷贝命令。linux的scp命令可以在linux服务器之间复制文件和目录。\n### 命令参数\n-1  强制scp命令使用协议ssh1  \n\n-2  强制scp命令使用协议ssh2  \n\n-4  强制scp命令只使用IPv4寻址  \n\n-6  强制scp命令只使用IPv6寻址  \n\n-B  使用批处理模式（传输过程中不询问传输口令或短语）  \n\n-C  允许压缩。（将-C标志传递给ssh，从而打开压缩功能）  \n\n-p 保留原文件的修改时间，访问时间和访问权限。  \n\n-q  不显示传输进度条。  \n\n-r  递归复制整个目录。  \n\n-v 详细方式显示输出。scp和ssh(1)会显示出整个过程的调试信息。这些信息用于调试连接，验证和配置问题。   \n\n-c cipher  以cipher将数据传输进行加密，这个选项将直接传递给ssh。   \n\n-F ssh_config  指定一个替代的ssh配置文件，此参数直接传递给ssh。  \n\n-i identity_file  从指定文件中读取传输时使用的密钥文件，此参数直接传递给ssh。    \n\n-l limit  限定用户所能使用的带宽，以Kbit/s为单位。     \n\n-o ssh_option  如果习惯于使用ssh_config(5)中的参数传递方式，   \n\n-P port  注意是大写的P, port是指定数据传输用到的端口号   \n\n-S program  指定加密传输时所使用的程序。此程序必须能够理解ssh(1)的选项。\n\n\n### 使用实例\n#### 从本地服务器复制到远程服务器： \n##### 复制文件\n命令格式：  \n\n    scp local_file remote_username@remote_ip:remote_folder  \n\n或者  \n\n    scp local_file remote_username@remote_ip:remote_file  \n\n或者  \n\n    scp local_file remote_ip:remote_folder  \n\n或者  \n\n    scp local_file remote_ip:remote_file  \n\n第1,2个指定了用户名，命令执行后需要输入用户密码，第1个仅指定了远程的目录，文件名字不变，第2个指定了文件名  \n\n第3,4个没有指定用户名，命令执行后需要输入用户名和密码，第3个仅指定了远程的目录，文件名字不变，第4个指定了文件名   \n\n##### 复制目录\n命令格式：  \n\n    scp -r local_folder remote_username@remote_ip:remote_folder  \n\n或者  \n\n    scp -r local_folder remote_ip:remote_folder  \n\n第1个指定了用户名，命令执行后需要输入用户密码；  \n\n第2个没有指定用户名，命令执行后需要输入用户名和密码；\n#### 从远程服务器复制到本地服务器： \n从远程复制到本地的scp命令与上面的命令雷同，只要将从本地复制到远程的命令后面2个参数互换顺序就行了。\n\n\n","slug":"2019.01.09.linuxCommand","published":1,"date":"2019-01-09T04:54:50.239Z","updated":"2019-05-28T08:05:15.985Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziiq5000urh9zc29kd8o6","content":"<h1 id=\"Linux-命令\"><a href=\"#Linux-命令\" class=\"headerlink\" title=\"Linux 命令\"></a>Linux 命令</h1><h2 id=\"文件管理\"><a href=\"#文件管理\" class=\"headerlink\" title=\"文件管理\"></a>文件管理</h2><p><code>vi test.js</code><br>创建并打开一个文件: test.js<br><code>touch</code><br>touch 的作用是更改一个文件的目录或者目录的时间,如果 touch 的文件不存在则会创建这个空文件.<br><code>echo &quot;abcd&quot; &gt; 1.txt</code><br>创建 1.txt 并将 abcd 写入.</p>\n<h3 id=\"less-more-cat\"><a href=\"#less-more-cat\" class=\"headerlink\" title=\"less/more/cat\"></a>less/more/cat</h3><p>三种查看文件内容的工具.主要区别是:<br>cat 是一次性显示整个文件的内容,还可以把多个文件连接起来显示.经常与重定向符号配合使用,适用于文件比较少的情况.<br>more/less 一般会用来显示超过一屏的内容,并且提供翻页功能.more 比 cat 强大,提供分页显示的功能,less 比 more 更强大,提供翻页,跳转,查找等命令,并且 more/less 都支持使用 \bspace/b 显示下一页,使用 f 显示上一页.<br>在 less 中,按<code>h</code>可以进入帮助界面,提供丰富的帮助命令.</p>\n<h3 id=\"vi-vim\"><a href=\"#vi-vim\" class=\"headerlink\" title=\"vi/vim\"></a>vi/vim</h3><p>vi/vim\b 是 Linux 下的文本编辑工具,在 vi/vim 的版本是选择上,原则是:<strong>能使用 vim 就使用 vim,能用最新版就用最新版</strong></p>\n<h4 id=\"启动及关闭-vi-vim\"><a href=\"#启动及关闭-vi-vim\" class=\"headerlink\" title=\"启动及关闭 vi/vim\"></a>启动及关闭 vi/vim</h4><p>#####启动<br>vi 打开 vi/vim<br><code>vi &lt;file&gt;</code> 打开 vi/vim 并加载文件<code>&lt;file&gt;</code></p>\n<h5 id=\"退出\"><a href=\"#退出\" class=\"headerlink\" title=\"退出\"></a>退出</h5><p><code>ZQ/:q!</code> 无条件退出<br><code>ZZ/:wq</code> 存盘并退出</p>\n<h5 id=\"保存部分文件\"><a href=\"#保存部分文件\" class=\"headerlink\" title=\"保存部分文件\"></a>保存部分文件</h5><p><code>:m,nw &lt;file&gt;</code> 将 m 行到 n 行部分的内容保存到文件 <code>&lt;file&gt;</code> 中 ;<br>:m,nw &gt;&gt; <code>&lt;file&gt;</code> 将 m 行到 n 行的内容添加到文件 <code>&lt;file&gt;</code> 的末尾</p>\n<h4 id=\"移动光标\"><a href=\"#移动光标\" class=\"headerlink\" title=\"移动光标\"></a>移动光标</h4><h5 id=\"字符\"><a href=\"#字符\" class=\"headerlink\" title=\"字符\"></a>字符</h5><p>h 左移一个字符<br>l 右移一个字符</p>\n<h5 id=\"单词\"><a href=\"#单词\" class=\"headerlink\" title=\"单词\"></a>单词</h5><p><code>w/W</code> 移动到下一单词的开头<br><code>b/B</code> 移动到上一单词的开头<br><code>e/E</code>移动到光标所在单词的末尾</p>\n<h5 id=\"行\"><a href=\"#行\" class=\"headerlink\" title=\"行\"></a>行</h5><p>j 下移一行<br>k 上移一行<br>0(数字) 移动到当前行的开头<br>^ 移动到当前行的第一个非空字符<br>\\$ 移动到当前行末尾<br>:n 移动到第 N 行</p>\n<h5 id=\"句子\"><a href=\"#句子\" class=\"headerlink\" title=\"句子\"></a>句子</h5><p>) 移动到当前句子的末尾<br>( 移动到当前句子的 \b 开头</p>\n<h5 id=\"段落\"><a href=\"#段落\" class=\"headerlink\" title=\"段落\"></a>段落</h5><p>} 移动到当前段落的末尾<br>{ 移动到当前段落的开头</p>\n<h5 id=\"屏\"><a href=\"#屏\" class=\"headerlink\" title=\"屏\"></a>屏</h5><p>H 移动到屏幕的第一行<br>M 移动到屏幕中间一行<br>L 移动到 \b 屏幕的最后一行</p>\n<h5 id=\"页\"><a href=\"#页\" class=\"headerlink\" title=\"页\"></a>页</h5><p><code>Ctrl-f</code> 向前滚动一页<br><code>Ctrl-b</code>向后滚动一页<br><code>Ctrl-u</code> 向前滚动半页<br><code>Ctrl-d</code> 向后滚动半页</p>\n<h5 id=\"文件\"><a href=\"#文件\" class=\"headerlink\" title=\"文件\"></a>文件</h5><p><code>G</code> 移动到文件末尾<br><code>gg</code> 移动到文件开头<br><code>:0</code> 移动到文件第一行<br><code>:$</code> 移动到文件最后一行</p>\n<h4 id=\"文本编辑\"><a href=\"#文本编辑\" class=\"headerlink\" title=\"文本编辑\"></a>文本编辑</h4><h5 id=\"字符-1\"><a href=\"#字符-1\" class=\"headerlink\" title=\"字符\"></a>字符</h5><p>x 删除光标位置的字符<br>c 更改当前字符并进入插入模式<br>s 替换光标位置的字符并进入插入模式<br>r 替换光标位置的字符但不进入插入模式<br>i 在当前位置的字符之前进入插入模式<br>a 在当前位置的字符之后进入插入模式</p>\n<h5 id=\"单词-1\"><a href=\"#单词-1\" class=\"headerlink\" title=\"单词\"></a>单词</h5><p>cw/cW 删除当前单词从光标开始的部分并进入插入模式<br>cb/cB 删除当前单词从光标所在位置至单词开始的部分并进入插入模式<br>dw/dW 删除当前单词从光标开始的部分但不进入插入模式<br>db/dB 删除当前单词从光标所在位置至单词开始的部分但不进入插入模式</p>\n<h5 id=\"行-1\"><a href=\"#行-1\" class=\"headerlink\" title=\"行\"></a>行</h5><p>dd 删除当前行<br>d0 删除从当前光标开始到行末的内容<br>d\\$ 删除从当前光标开始到行末的内容<br>I 在当前行的行首进入插入模式<br>A 在当前行的行尾进入插入模式<br>o 在当前行下方另起一行进入插入模式<br>O 在当前行上方另起一行进入插入模式</p>\n<h5 id=\"句子-1\"><a href=\"#句子-1\" class=\"headerlink\" title=\"句子\"></a>句子</h5><p>d) 删除当前句子从光标位置开始到句末的内容<br>d( 删除当前句子从光标位置开始到句首的内容</p>\n<h5 id=\"段落-1\"><a href=\"#段落-1\" class=\"headerlink\" title=\"段落\"></a>段落</h5><p>d} 删除当前段落从光标位置开始到段末的内容<br>d{ 删除当前段落从光标位置开始到段首的内容</p>\n<h4 id=\"文本编辑的高效命令\"><a href=\"#文本编辑的高效命令\" class=\"headerlink\" title=\"文本编辑的高效命令\"></a>文本编辑的高效命令</h4><h5 id=\"复制与粘贴\"><a href=\"#复制与粘贴\" class=\"headerlink\" title=\"复制与粘贴\"></a>复制与粘贴</h5><p>yw 复制当前单词从光标开始的部分<br>yy 复制光标所在行的所有字符<br>p 将最后一个删除或复制文本放在当前字符<br>P 将最后一个删除或复制文本放在当前字符之前 配合操作数使用可快速拷贝编辑文本</p>\n<h5 id=\"撤销与重做\"><a href=\"#撤销与重做\" class=\"headerlink\" title=\"撤销与重做\"></a>撤销与重做</h5><p>u 撤消更改<br>Ctrl-R 重做更改</p>\n<h5 id=\"重复操作\"><a href=\"#重复操作\" class=\"headerlink\" title=\"重复操作\"></a>重复操作</h5><p>. 重复上次操作</p>\n<h5 id=\"交换相邻字符或行\"><a href=\"#交换相邻字符或行\" class=\"headerlink\" title=\"交换相邻字符或行\"></a>交换相邻字符或行</h5><p>xp 交换光标位置的字符和它右边的字符<br>ddp 交换光标位置的行和它的下一行</p>\n<h5 id=\"大小写转换\"><a href=\"#大小写转换\" class=\"headerlink\" title=\"大小写转换\"></a>大小写转换</h5><p>~ 将光标下的字母大小写反向转换<br>guw 将光标所在的单词变为小写<br>guw 将光标所在的单词变为小写<br>gUw 将光标所在的单词变为大写<br>guu 光标所在的行所有字符变为小写<br>gUU 光标所在的行所有字符变为大写<br>g~~ 光标所在的行所有字符大小写反向转换</p>\n<h5 id=\"取得外部输出\"><a href=\"#取得外部输出\" class=\"headerlink\" title=\"取得外部输出\"></a>取得外部输出</h5><p><code>: r!&lt;cmd&gt;</code> 将命令<code>&lt;cmd&gt;</code>的输出结果插入到当前光标所在位置<br><code>:r &lt;file&gt;</code> 将文件<code>&lt;file&gt;</code> 读入到当前光标所在位置</p>\n<h5 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h5><p><code>:1,$!sort</code> 将文件内的所有内容排序</p>\n<h5 id=\"加入行号\"><a href=\"#加入行号\" class=\"headerlink\" title=\"加入行号\"></a>加入行号</h5><p>:%!nl 在所有非空行前加入行号<br>:%!nl -ba 在所有行前加入行号</p>\n<h5 id=\"缩进\"><a href=\"#缩进\" class=\"headerlink\" title=\"缩进\"></a>缩进</h5><p><code>&gt;&gt;</code> 右缩进（可配合操作数使用）<br><code>&lt;&lt;</code> 左缩进（可配合操作数使用）</p>\n<h5 id=\"自动补全\"><a href=\"#自动补全\" class=\"headerlink\" title=\"自动补全\"></a>自动补全</h5><p>ctrl-p 自动补全</p>\n<h5 id=\"显示当前编辑文件名\"><a href=\"#显示当前编辑文件名\" class=\"headerlink\" title=\"显示当前编辑文件名\"></a>显示当前编辑文件名</h5><p>Ctrl-g 显示当前编辑文件名及行数</p>\n<h5 id=\"显示字符-内码\"><a href=\"#显示字符-内码\" class=\"headerlink\" title=\"显示字符 \b 内码\"></a>显示字符 \b 内码</h5><p>ga 显示光标所在字符的内码（包括十进制码，十六进制码以及八进制码）</p>\n<h4 id=\"文本检索与替换\"><a href=\"#文本检索与替换\" class=\"headerlink\" title=\"文本检索与替换\"></a>文本检索与替换</h4><h5 id=\"搜索\"><a href=\"#搜索\" class=\"headerlink\" title=\"搜索\"></a>搜索</h5><p>/ 在文件中向前搜索<br>? 在文件中向后搜索</p>\n<h5 id=\"搜索下一个\"><a href=\"#搜索下一个\" class=\"headerlink\" title=\"搜索下一个\"></a>搜索下一个</h5><p>n 搜索下一个<br>N 反向搜索下一个</p>\n<h4 id=\"vi-vim-设置\"><a href=\"#vi-vim-设置\" class=\"headerlink\" title=\"vi/vim 设置\"></a>vi/vim 设置</h4><h5 id=\"查看当前设置的值\"><a href=\"#查看当前设置的值\" class=\"headerlink\" title=\"查看当前设置的值\"></a>查看当前设置的值</h5><p><code>:set all</code> 查看 vi 或 Vim 中设置的所有选项的当前值<br><code>:set &lt;option&gt;?</code> 查看特定选项 <code>&lt;option&gt;</code> 的当前值</p>\n<h5 id=\"设置行号显示与否\"><a href=\"#设置行号显示与否\" class=\"headerlink\" title=\"设置行号显示与否\"></a>设置行号显示与否</h5><p>:set number 显示行号<br>:set no number 取消行号显示</p>\n<h5 id=\"设置自动缩进\"><a href=\"#设置自动缩进\" class=\"headerlink\" title=\"设置自动缩进\"></a>设置自动缩进</h5><p>:set autoindent 设置自动缩进<br>:set no autoindent 取消自动缩进设置</p>\n<h5 id=\"设置缩进宽度\"><a href=\"#设置缩进宽度\" class=\"headerlink\" title=\"设置缩进宽度\"></a>设置缩进宽度</h5><p>:set shiftwidth=4 设置缩进宽度为 4</p>\n<h5 id=\"设置是否忽略大小写\"><a href=\"#设置是否忽略大小写\" class=\"headerlink\" title=\"设置是否忽略大小写\"></a>设置是否忽略大小写</h5><p>:set ignorecase 设置忽略大小<br>:set no ignorecase 取消忽略大小设置</p>\n<h5 id=\"设置不可见字符显示与否\"><a href=\"#设置不可见字符显示与否\" class=\"headerlink\" title=\"设置不可见字符显示与否\"></a>设置不可见字符显示与否</h5><p>:set list 显示不可见字符<br>:set nolist 取消显示不可见字符设置</p>\n<h2 id=\"删除操作\"><a href=\"#删除操作\" class=\"headerlink\" title=\"删除操作\"></a>删除操作</h2><p>语法: <code>rm[选项] dirname</code><br>选项中,常用的有这几种:</p>\n<ul>\n<li>-i 删除前逐一询问确认;</li>\n<li>-f 即使被删除的文件的属性是只读，也直接删除，无需逐一确认.</li>\n<li>-r 将目录及其底下的文件/文件夹一并删除.</li>\n</ul>\n<p>例如: <code>rm -rf /user</code> 会将 <code>/user</code> 目录下的文件全部删除.</p>\n<h2 id=\"文件传输-SCP\"><a href=\"#文件传输-SCP\" class=\"headerlink\" title=\"文件传输 SCP\"></a>文件传输 SCP</h2><blockquote>\n<p>scp是secure copy的简写，用于在Linux下进行远程拷贝文件的命令，和它类似的命令有cp，不过cp只是在本机进行拷贝不能跨服务器，而且scp传输是加密的。可能会稍微影响一下速度。当你服务器硬盘变为只读 read only system时，用scp可以帮你把文件移出来。另外，scp还非常不占资源，不会提高多少系统负荷，在这一点上，rsync就远远不及它了。虽然 rsync比scp会快一点，但当小文件众多的情况下，rsync会导致硬盘I/O非常高，而scp基本不影响系统正常使用。</p>\n<h3 id=\"命令格式\"><a href=\"#命令格式\" class=\"headerlink\" title=\"命令格式\"></a>命令格式</h3><pre><code>scp [参数] [原路径] [目标路径]\n</code></pre><h3 id=\"命令功能\"><a href=\"#命令功能\" class=\"headerlink\" title=\"命令功能\"></a>命令功能</h3><p>scp是 secure copy的缩写, scp是linux系统下基于ssh登陆进行安全的远程文件拷贝命令。linux的scp命令可以在linux服务器之间复制文件和目录。</p>\n<h3 id=\"命令参数\"><a href=\"#命令参数\" class=\"headerlink\" title=\"命令参数\"></a>命令参数</h3><p>-1  强制scp命令使用协议ssh1  </p>\n</blockquote>\n<p>-2  强制scp命令使用协议ssh2  </p>\n<p>-4  强制scp命令只使用IPv4寻址  </p>\n<p>-6  强制scp命令只使用IPv6寻址  </p>\n<p>-B  使用批处理模式（传输过程中不询问传输口令或短语）  </p>\n<p>-C  允许压缩。（将-C标志传递给ssh，从而打开压缩功能）  </p>\n<p>-p 保留原文件的修改时间，访问时间和访问权限。  </p>\n<p>-q  不显示传输进度条。  </p>\n<p>-r  递归复制整个目录。  </p>\n<p>-v 详细方式显示输出。scp和ssh(1)会显示出整个过程的调试信息。这些信息用于调试连接，验证和配置问题。   </p>\n<p>-c cipher  以cipher将数据传输进行加密，这个选项将直接传递给ssh。   </p>\n<p>-F ssh_config  指定一个替代的ssh配置文件，此参数直接传递给ssh。  </p>\n<p>-i identity_file  从指定文件中读取传输时使用的密钥文件，此参数直接传递给ssh。    </p>\n<p>-l limit  限定用户所能使用的带宽，以Kbit/s为单位。     </p>\n<p>-o ssh_option  如果习惯于使用ssh_config(5)中的参数传递方式，   </p>\n<p>-P port  注意是大写的P, port是指定数据传输用到的端口号   </p>\n<p>-S program  指定加密传输时所使用的程序。此程序必须能够理解ssh(1)的选项。</p>\n<h3 id=\"使用实例\"><a href=\"#使用实例\" class=\"headerlink\" title=\"使用实例\"></a>使用实例</h3><h4 id=\"从本地服务器复制到远程服务器：\"><a href=\"#从本地服务器复制到远程服务器：\" class=\"headerlink\" title=\"从本地服务器复制到远程服务器：\"></a>从本地服务器复制到远程服务器：</h4><h5 id=\"复制文件\"><a href=\"#复制文件\" class=\"headerlink\" title=\"复制文件\"></a>复制文件</h5><p>命令格式：  </p>\n<pre><code>scp local_file remote_username@remote_ip:remote_folder  \n</code></pre><p>或者  </p>\n<pre><code>scp local_file remote_username@remote_ip:remote_file  \n</code></pre><p>或者  </p>\n<pre><code>scp local_file remote_ip:remote_folder  \n</code></pre><p>或者  </p>\n<pre><code>scp local_file remote_ip:remote_file  \n</code></pre><p>第1,2个指定了用户名，命令执行后需要输入用户密码，第1个仅指定了远程的目录，文件名字不变，第2个指定了文件名  </p>\n<p>第3,4个没有指定用户名，命令执行后需要输入用户名和密码，第3个仅指定了远程的目录，文件名字不变，第4个指定了文件名   </p>\n<h5 id=\"复制目录\"><a href=\"#复制目录\" class=\"headerlink\" title=\"复制目录\"></a>复制目录</h5><p>命令格式：  </p>\n<pre><code>scp -r local_folder remote_username@remote_ip:remote_folder  \n</code></pre><p>或者  </p>\n<pre><code>scp -r local_folder remote_ip:remote_folder  \n</code></pre><p>第1个指定了用户名，命令执行后需要输入用户密码；  </p>\n<p>第2个没有指定用户名，命令执行后需要输入用户名和密码；</p>\n<h4 id=\"从远程服务器复制到本地服务器：\"><a href=\"#从远程服务器复制到本地服务器：\" class=\"headerlink\" title=\"从远程服务器复制到本地服务器：\"></a>从远程服务器复制到本地服务器：</h4><p>从远程复制到本地的scp命令与上面的命令雷同，只要将从本地复制到远程的命令后面2个参数互换顺序就行了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Linux-命令\"><a href=\"#Linux-命令\" class=\"headerlink\" title=\"Linux 命令\"></a>Linux 命令</h1><h2 id=\"文件管理\"><a href=\"#文件管理\" class=\"headerlink\" title=\"文件管理\"></a>文件管理</h2><p><code>vi test.js</code><br>创建并打开一个文件: test.js<br><code>touch</code><br>touch 的作用是更改一个文件的目录或者目录的时间,如果 touch 的文件不存在则会创建这个空文件.<br><code>echo &quot;abcd&quot; &gt; 1.txt</code><br>创建 1.txt 并将 abcd 写入.</p>\n<h3 id=\"less-more-cat\"><a href=\"#less-more-cat\" class=\"headerlink\" title=\"less/more/cat\"></a>less/more/cat</h3><p>三种查看文件内容的工具.主要区别是:<br>cat 是一次性显示整个文件的内容,还可以把多个文件连接起来显示.经常与重定向符号配合使用,适用于文件比较少的情况.<br>more/less 一般会用来显示超过一屏的内容,并且提供翻页功能.more 比 cat 强大,提供分页显示的功能,less 比 more 更强大,提供翻页,跳转,查找等命令,并且 more/less 都支持使用 \bspace/b 显示下一页,使用 f 显示上一页.<br>在 less 中,按<code>h</code>可以进入帮助界面,提供丰富的帮助命令.</p>\n<h3 id=\"vi-vim\"><a href=\"#vi-vim\" class=\"headerlink\" title=\"vi/vim\"></a>vi/vim</h3><p>vi/vim\b 是 Linux 下的文本编辑工具,在 vi/vim 的版本是选择上,原则是:<strong>能使用 vim 就使用 vim,能用最新版就用最新版</strong></p>\n<h4 id=\"启动及关闭-vi-vim\"><a href=\"#启动及关闭-vi-vim\" class=\"headerlink\" title=\"启动及关闭 vi/vim\"></a>启动及关闭 vi/vim</h4><p>#####启动<br>vi 打开 vi/vim<br><code>vi &lt;file&gt;</code> 打开 vi/vim 并加载文件<code>&lt;file&gt;</code></p>\n<h5 id=\"退出\"><a href=\"#退出\" class=\"headerlink\" title=\"退出\"></a>退出</h5><p><code>ZQ/:q!</code> 无条件退出<br><code>ZZ/:wq</code> 存盘并退出</p>\n<h5 id=\"保存部分文件\"><a href=\"#保存部分文件\" class=\"headerlink\" title=\"保存部分文件\"></a>保存部分文件</h5><p><code>:m,nw &lt;file&gt;</code> 将 m 行到 n 行部分的内容保存到文件 <code>&lt;file&gt;</code> 中 ;<br>:m,nw &gt;&gt; <code>&lt;file&gt;</code> 将 m 行到 n 行的内容添加到文件 <code>&lt;file&gt;</code> 的末尾</p>\n<h4 id=\"移动光标\"><a href=\"#移动光标\" class=\"headerlink\" title=\"移动光标\"></a>移动光标</h4><h5 id=\"字符\"><a href=\"#字符\" class=\"headerlink\" title=\"字符\"></a>字符</h5><p>h 左移一个字符<br>l 右移一个字符</p>\n<h5 id=\"单词\"><a href=\"#单词\" class=\"headerlink\" title=\"单词\"></a>单词</h5><p><code>w/W</code> 移动到下一单词的开头<br><code>b/B</code> 移动到上一单词的开头<br><code>e/E</code>移动到光标所在单词的末尾</p>\n<h5 id=\"行\"><a href=\"#行\" class=\"headerlink\" title=\"行\"></a>行</h5><p>j 下移一行<br>k 上移一行<br>0(数字) 移动到当前行的开头<br>^ 移动到当前行的第一个非空字符<br>\\$ 移动到当前行末尾<br>:n 移动到第 N 行</p>\n<h5 id=\"句子\"><a href=\"#句子\" class=\"headerlink\" title=\"句子\"></a>句子</h5><p>) 移动到当前句子的末尾<br>( 移动到当前句子的 \b 开头</p>\n<h5 id=\"段落\"><a href=\"#段落\" class=\"headerlink\" title=\"段落\"></a>段落</h5><p>} 移动到当前段落的末尾<br>{ 移动到当前段落的开头</p>\n<h5 id=\"屏\"><a href=\"#屏\" class=\"headerlink\" title=\"屏\"></a>屏</h5><p>H 移动到屏幕的第一行<br>M 移动到屏幕中间一行<br>L 移动到 \b 屏幕的最后一行</p>\n<h5 id=\"页\"><a href=\"#页\" class=\"headerlink\" title=\"页\"></a>页</h5><p><code>Ctrl-f</code> 向前滚动一页<br><code>Ctrl-b</code>向后滚动一页<br><code>Ctrl-u</code> 向前滚动半页<br><code>Ctrl-d</code> 向后滚动半页</p>\n<h5 id=\"文件\"><a href=\"#文件\" class=\"headerlink\" title=\"文件\"></a>文件</h5><p><code>G</code> 移动到文件末尾<br><code>gg</code> 移动到文件开头<br><code>:0</code> 移动到文件第一行<br><code>:$</code> 移动到文件最后一行</p>\n<h4 id=\"文本编辑\"><a href=\"#文本编辑\" class=\"headerlink\" title=\"文本编辑\"></a>文本编辑</h4><h5 id=\"字符-1\"><a href=\"#字符-1\" class=\"headerlink\" title=\"字符\"></a>字符</h5><p>x 删除光标位置的字符<br>c 更改当前字符并进入插入模式<br>s 替换光标位置的字符并进入插入模式<br>r 替换光标位置的字符但不进入插入模式<br>i 在当前位置的字符之前进入插入模式<br>a 在当前位置的字符之后进入插入模式</p>\n<h5 id=\"单词-1\"><a href=\"#单词-1\" class=\"headerlink\" title=\"单词\"></a>单词</h5><p>cw/cW 删除当前单词从光标开始的部分并进入插入模式<br>cb/cB 删除当前单词从光标所在位置至单词开始的部分并进入插入模式<br>dw/dW 删除当前单词从光标开始的部分但不进入插入模式<br>db/dB 删除当前单词从光标所在位置至单词开始的部分但不进入插入模式</p>\n<h5 id=\"行-1\"><a href=\"#行-1\" class=\"headerlink\" title=\"行\"></a>行</h5><p>dd 删除当前行<br>d0 删除从当前光标开始到行末的内容<br>d\\$ 删除从当前光标开始到行末的内容<br>I 在当前行的行首进入插入模式<br>A 在当前行的行尾进入插入模式<br>o 在当前行下方另起一行进入插入模式<br>O 在当前行上方另起一行进入插入模式</p>\n<h5 id=\"句子-1\"><a href=\"#句子-1\" class=\"headerlink\" title=\"句子\"></a>句子</h5><p>d) 删除当前句子从光标位置开始到句末的内容<br>d( 删除当前句子从光标位置开始到句首的内容</p>\n<h5 id=\"段落-1\"><a href=\"#段落-1\" class=\"headerlink\" title=\"段落\"></a>段落</h5><p>d} 删除当前段落从光标位置开始到段末的内容<br>d{ 删除当前段落从光标位置开始到段首的内容</p>\n<h4 id=\"文本编辑的高效命令\"><a href=\"#文本编辑的高效命令\" class=\"headerlink\" title=\"文本编辑的高效命令\"></a>文本编辑的高效命令</h4><h5 id=\"复制与粘贴\"><a href=\"#复制与粘贴\" class=\"headerlink\" title=\"复制与粘贴\"></a>复制与粘贴</h5><p>yw 复制当前单词从光标开始的部分<br>yy 复制光标所在行的所有字符<br>p 将最后一个删除或复制文本放在当前字符<br>P 将最后一个删除或复制文本放在当前字符之前 配合操作数使用可快速拷贝编辑文本</p>\n<h5 id=\"撤销与重做\"><a href=\"#撤销与重做\" class=\"headerlink\" title=\"撤销与重做\"></a>撤销与重做</h5><p>u 撤消更改<br>Ctrl-R 重做更改</p>\n<h5 id=\"重复操作\"><a href=\"#重复操作\" class=\"headerlink\" title=\"重复操作\"></a>重复操作</h5><p>. 重复上次操作</p>\n<h5 id=\"交换相邻字符或行\"><a href=\"#交换相邻字符或行\" class=\"headerlink\" title=\"交换相邻字符或行\"></a>交换相邻字符或行</h5><p>xp 交换光标位置的字符和它右边的字符<br>ddp 交换光标位置的行和它的下一行</p>\n<h5 id=\"大小写转换\"><a href=\"#大小写转换\" class=\"headerlink\" title=\"大小写转换\"></a>大小写转换</h5><p>~ 将光标下的字母大小写反向转换<br>guw 将光标所在的单词变为小写<br>guw 将光标所在的单词变为小写<br>gUw 将光标所在的单词变为大写<br>guu 光标所在的行所有字符变为小写<br>gUU 光标所在的行所有字符变为大写<br>g~~ 光标所在的行所有字符大小写反向转换</p>\n<h5 id=\"取得外部输出\"><a href=\"#取得外部输出\" class=\"headerlink\" title=\"取得外部输出\"></a>取得外部输出</h5><p><code>: r!&lt;cmd&gt;</code> 将命令<code>&lt;cmd&gt;</code>的输出结果插入到当前光标所在位置<br><code>:r &lt;file&gt;</code> 将文件<code>&lt;file&gt;</code> 读入到当前光标所在位置</p>\n<h5 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h5><p><code>:1,$!sort</code> 将文件内的所有内容排序</p>\n<h5 id=\"加入行号\"><a href=\"#加入行号\" class=\"headerlink\" title=\"加入行号\"></a>加入行号</h5><p>:%!nl 在所有非空行前加入行号<br>:%!nl -ba 在所有行前加入行号</p>\n<h5 id=\"缩进\"><a href=\"#缩进\" class=\"headerlink\" title=\"缩进\"></a>缩进</h5><p><code>&gt;&gt;</code> 右缩进（可配合操作数使用）<br><code>&lt;&lt;</code> 左缩进（可配合操作数使用）</p>\n<h5 id=\"自动补全\"><a href=\"#自动补全\" class=\"headerlink\" title=\"自动补全\"></a>自动补全</h5><p>ctrl-p 自动补全</p>\n<h5 id=\"显示当前编辑文件名\"><a href=\"#显示当前编辑文件名\" class=\"headerlink\" title=\"显示当前编辑文件名\"></a>显示当前编辑文件名</h5><p>Ctrl-g 显示当前编辑文件名及行数</p>\n<h5 id=\"显示字符-内码\"><a href=\"#显示字符-内码\" class=\"headerlink\" title=\"显示字符 \b 内码\"></a>显示字符 \b 内码</h5><p>ga 显示光标所在字符的内码（包括十进制码，十六进制码以及八进制码）</p>\n<h4 id=\"文本检索与替换\"><a href=\"#文本检索与替换\" class=\"headerlink\" title=\"文本检索与替换\"></a>文本检索与替换</h4><h5 id=\"搜索\"><a href=\"#搜索\" class=\"headerlink\" title=\"搜索\"></a>搜索</h5><p>/ 在文件中向前搜索<br>? 在文件中向后搜索</p>\n<h5 id=\"搜索下一个\"><a href=\"#搜索下一个\" class=\"headerlink\" title=\"搜索下一个\"></a>搜索下一个</h5><p>n 搜索下一个<br>N 反向搜索下一个</p>\n<h4 id=\"vi-vim-设置\"><a href=\"#vi-vim-设置\" class=\"headerlink\" title=\"vi/vim 设置\"></a>vi/vim 设置</h4><h5 id=\"查看当前设置的值\"><a href=\"#查看当前设置的值\" class=\"headerlink\" title=\"查看当前设置的值\"></a>查看当前设置的值</h5><p><code>:set all</code> 查看 vi 或 Vim 中设置的所有选项的当前值<br><code>:set &lt;option&gt;?</code> 查看特定选项 <code>&lt;option&gt;</code> 的当前值</p>\n<h5 id=\"设置行号显示与否\"><a href=\"#设置行号显示与否\" class=\"headerlink\" title=\"设置行号显示与否\"></a>设置行号显示与否</h5><p>:set number 显示行号<br>:set no number 取消行号显示</p>\n<h5 id=\"设置自动缩进\"><a href=\"#设置自动缩进\" class=\"headerlink\" title=\"设置自动缩进\"></a>设置自动缩进</h5><p>:set autoindent 设置自动缩进<br>:set no autoindent 取消自动缩进设置</p>\n<h5 id=\"设置缩进宽度\"><a href=\"#设置缩进宽度\" class=\"headerlink\" title=\"设置缩进宽度\"></a>设置缩进宽度</h5><p>:set shiftwidth=4 设置缩进宽度为 4</p>\n<h5 id=\"设置是否忽略大小写\"><a href=\"#设置是否忽略大小写\" class=\"headerlink\" title=\"设置是否忽略大小写\"></a>设置是否忽略大小写</h5><p>:set ignorecase 设置忽略大小<br>:set no ignorecase 取消忽略大小设置</p>\n<h5 id=\"设置不可见字符显示与否\"><a href=\"#设置不可见字符显示与否\" class=\"headerlink\" title=\"设置不可见字符显示与否\"></a>设置不可见字符显示与否</h5><p>:set list 显示不可见字符<br>:set nolist 取消显示不可见字符设置</p>\n<h2 id=\"删除操作\"><a href=\"#删除操作\" class=\"headerlink\" title=\"删除操作\"></a>删除操作</h2><p>语法: <code>rm[选项] dirname</code><br>选项中,常用的有这几种:</p>\n<ul>\n<li>-i 删除前逐一询问确认;</li>\n<li>-f 即使被删除的文件的属性是只读，也直接删除，无需逐一确认.</li>\n<li>-r 将目录及其底下的文件/文件夹一并删除.</li>\n</ul>\n<p>例如: <code>rm -rf /user</code> 会将 <code>/user</code> 目录下的文件全部删除.</p>\n<h2 id=\"文件传输-SCP\"><a href=\"#文件传输-SCP\" class=\"headerlink\" title=\"文件传输 SCP\"></a>文件传输 SCP</h2><blockquote>\n<p>scp是secure copy的简写，用于在Linux下进行远程拷贝文件的命令，和它类似的命令有cp，不过cp只是在本机进行拷贝不能跨服务器，而且scp传输是加密的。可能会稍微影响一下速度。当你服务器硬盘变为只读 read only system时，用scp可以帮你把文件移出来。另外，scp还非常不占资源，不会提高多少系统负荷，在这一点上，rsync就远远不及它了。虽然 rsync比scp会快一点，但当小文件众多的情况下，rsync会导致硬盘I/O非常高，而scp基本不影响系统正常使用。</p>\n<h3 id=\"命令格式\"><a href=\"#命令格式\" class=\"headerlink\" title=\"命令格式\"></a>命令格式</h3><pre><code>scp [参数] [原路径] [目标路径]\n</code></pre><h3 id=\"命令功能\"><a href=\"#命令功能\" class=\"headerlink\" title=\"命令功能\"></a>命令功能</h3><p>scp是 secure copy的缩写, scp是linux系统下基于ssh登陆进行安全的远程文件拷贝命令。linux的scp命令可以在linux服务器之间复制文件和目录。</p>\n<h3 id=\"命令参数\"><a href=\"#命令参数\" class=\"headerlink\" title=\"命令参数\"></a>命令参数</h3><p>-1  强制scp命令使用协议ssh1  </p>\n</blockquote>\n<p>-2  强制scp命令使用协议ssh2  </p>\n<p>-4  强制scp命令只使用IPv4寻址  </p>\n<p>-6  强制scp命令只使用IPv6寻址  </p>\n<p>-B  使用批处理模式（传输过程中不询问传输口令或短语）  </p>\n<p>-C  允许压缩。（将-C标志传递给ssh，从而打开压缩功能）  </p>\n<p>-p 保留原文件的修改时间，访问时间和访问权限。  </p>\n<p>-q  不显示传输进度条。  </p>\n<p>-r  递归复制整个目录。  </p>\n<p>-v 详细方式显示输出。scp和ssh(1)会显示出整个过程的调试信息。这些信息用于调试连接，验证和配置问题。   </p>\n<p>-c cipher  以cipher将数据传输进行加密，这个选项将直接传递给ssh。   </p>\n<p>-F ssh_config  指定一个替代的ssh配置文件，此参数直接传递给ssh。  </p>\n<p>-i identity_file  从指定文件中读取传输时使用的密钥文件，此参数直接传递给ssh。    </p>\n<p>-l limit  限定用户所能使用的带宽，以Kbit/s为单位。     </p>\n<p>-o ssh_option  如果习惯于使用ssh_config(5)中的参数传递方式，   </p>\n<p>-P port  注意是大写的P, port是指定数据传输用到的端口号   </p>\n<p>-S program  指定加密传输时所使用的程序。此程序必须能够理解ssh(1)的选项。</p>\n<h3 id=\"使用实例\"><a href=\"#使用实例\" class=\"headerlink\" title=\"使用实例\"></a>使用实例</h3><h4 id=\"从本地服务器复制到远程服务器：\"><a href=\"#从本地服务器复制到远程服务器：\" class=\"headerlink\" title=\"从本地服务器复制到远程服务器：\"></a>从本地服务器复制到远程服务器：</h4><h5 id=\"复制文件\"><a href=\"#复制文件\" class=\"headerlink\" title=\"复制文件\"></a>复制文件</h5><p>命令格式：  </p>\n<pre><code>scp local_file remote_username@remote_ip:remote_folder  \n</code></pre><p>或者  </p>\n<pre><code>scp local_file remote_username@remote_ip:remote_file  \n</code></pre><p>或者  </p>\n<pre><code>scp local_file remote_ip:remote_folder  \n</code></pre><p>或者  </p>\n<pre><code>scp local_file remote_ip:remote_file  \n</code></pre><p>第1,2个指定了用户名，命令执行后需要输入用户密码，第1个仅指定了远程的目录，文件名字不变，第2个指定了文件名  </p>\n<p>第3,4个没有指定用户名，命令执行后需要输入用户名和密码，第3个仅指定了远程的目录，文件名字不变，第4个指定了文件名   </p>\n<h5 id=\"复制目录\"><a href=\"#复制目录\" class=\"headerlink\" title=\"复制目录\"></a>复制目录</h5><p>命令格式：  </p>\n<pre><code>scp -r local_folder remote_username@remote_ip:remote_folder  \n</code></pre><p>或者  </p>\n<pre><code>scp -r local_folder remote_ip:remote_folder  \n</code></pre><p>第1个指定了用户名，命令执行后需要输入用户密码；  </p>\n<p>第2个没有指定用户名，命令执行后需要输入用户名和密码；</p>\n<h4 id=\"从远程服务器复制到本地服务器：\"><a href=\"#从远程服务器复制到本地服务器：\" class=\"headerlink\" title=\"从远程服务器复制到本地服务器：\"></a>从远程服务器复制到本地服务器：</h4><p>从远程复制到本地的scp命令与上面的命令雷同，只要将从本地复制到远程的命令后面2个参数互换顺序就行了。</p>\n"},{"title":"群辉怎么玩儿(TO BE CONTINUED)","_content":"# 前言\n随着国内各大网盘日渐式微,把数据保存在网盘似乎不是一个很好的办法,数据的安全和隐私都是值得我们关注的问题.这时候 NAS 就是一个很好的选择了.\n\n> NAS（Network Attached Storage：网络附属存储）按字面简单说就是连接在网络上，具备资料存储功能的装置，因此也称为“网络存储器”。它是一种专用数据存储服务器。它以数据为中心，将存储设备与服务器彻底分离，集中管理数据，从而释放带宽、提高性能、降低总拥有成本、保护投资。其成本远远低于使用服务器存储，而效率却远远高于后者。目前国际著名的NAS企业有Netapp、EMC、OUO等。\n\n换言之,针对个人的 NAS 可以理解为剥离了除存储以外所有功能的PC.\n# 个人 NAS 的选择\n搭建(购买)个人N\bAS需要满足以下需求:\n* 稳定: 保证7*24 工作,以及数据安全;\n* 节能: 功率低,动辄几百瓦功耗放在家里肯定是不合适的;\n* 静音: 这个就不用说了吧;\n* 性价比: 按需购买.\n\n## 可选的方案\n### 群辉\n\n>群晖科技股份有限公司（品牌名称：Synology，简称群晖或群晖科技）为台湾一家网络附加储存（NAS）服务商，总部位于台北市。截至2017年，群晖以Synology品牌行销全球，在中小企业及家用NAS市场占有率居世界首位。\n\n在 NAS 发展的这几年间,头部效应渐渐形成.群辉可以说是 NAS 界的 APPLE, 一家独大.凭借其出色的软件服务受到广大 NAS 玩家的青睐.\n\n\n\n### 威联通/铁威马等\n其他 NAS 提供商可以说是一个能打的也没有,无法提供像群辉一样的优质服务.除了价格方面没有任何优势.\n\n### 自己搭建 NAS\n自己购买硬件搭建,稳定性无法得到保障,即使刷黑群晖也无法使用群晖提供的DDNS等服务.\n## 我选择的方案\n综合自己的需求和价格,我选择了群辉的两盘位机器DS218+,搭配两块4\bT的硬盘.\n![DS219+](https://i.loli.net/2019/02/01/5c54076f75b9e.jpeg)\n\n## 群晖的一些功能\n### 文件存储\n最简单的用法,你可以把群晖当做自己的个人云盘,用作文件备份.\n![WX20190201-170812@2x](https://i.loli.net/2019/02/01/5c540c9780da0.png)\n### 相册(moments)\n群晖的相册,可以提供像 icloud相册类似的体验.时间轴,智能识别等功能一应俱全.\n![WX20190201-171122@2x](https://i.loli.net/2019/02/01/5c540d4a71bd4.png)\n\n### video station\n这个功能必须强吹一波,当你把视频文件存入时,群晖会自动识别并匹配封面图和介绍等.\n![WX20190201-171349@2x](https://i.loli.net/2019/02/01/5c540de167341.png)\n### 权限配置\n群晖提供了完整的用户权限,群组权限功能.你可以添加用户并赋予指定的文件/文件夹的读写权限.\n![WX20190201-171640@2x](https://i.loli.net/2019/02/01/5c540e87f19eb.png)\n### 远程下载(download station)\n群晖类似迅雷的远程下载功能.\n![WX20190201-171816@2x](https://i.loli.net/2019/02/01/5c540ee74d856.png)\n### docker\n群晖支持 docker,这个锦上添花的功能 又给群晖添加了无数的玩法.举几个例子:\n#### 人人美剧\n下载 docker 中的人人美剧,亲测可以满网速,批量下载美剧.\n![WX20190201-172049@2x](https://i.loli.net/2019/02/01/5c540f80a6dfc.png)\n#### 迅雷 docker 版\n搭配迅雷远程下载可以提供类似 downlaod station的功能,但是由于迅雷的限速政策,体验并不是很好.\n![WX20190201-172306@2x](https://i.loli.net/2019/02/01/5c541009e39a7.png)\n\n","source":"_posts/2019.02.01.NAS.md","raw":"---\ntitle: 群辉怎么玩儿(TO BE CONTINUED)\ntags: [NAS]\ncategories: 随笔 \n---\n# 前言\n随着国内各大网盘日渐式微,把数据保存在网盘似乎不是一个很好的办法,数据的安全和隐私都是值得我们关注的问题.这时候 NAS 就是一个很好的选择了.\n\n> NAS（Network Attached Storage：网络附属存储）按字面简单说就是连接在网络上，具备资料存储功能的装置，因此也称为“网络存储器”。它是一种专用数据存储服务器。它以数据为中心，将存储设备与服务器彻底分离，集中管理数据，从而释放带宽、提高性能、降低总拥有成本、保护投资。其成本远远低于使用服务器存储，而效率却远远高于后者。目前国际著名的NAS企业有Netapp、EMC、OUO等。\n\n换言之,针对个人的 NAS 可以理解为剥离了除存储以外所有功能的PC.\n# 个人 NAS 的选择\n搭建(购买)个人N\bAS需要满足以下需求:\n* 稳定: 保证7*24 工作,以及数据安全;\n* 节能: 功率低,动辄几百瓦功耗放在家里肯定是不合适的;\n* 静音: 这个就不用说了吧;\n* 性价比: 按需购买.\n\n## 可选的方案\n### 群辉\n\n>群晖科技股份有限公司（品牌名称：Synology，简称群晖或群晖科技）为台湾一家网络附加储存（NAS）服务商，总部位于台北市。截至2017年，群晖以Synology品牌行销全球，在中小企业及家用NAS市场占有率居世界首位。\n\n在 NAS 发展的这几年间,头部效应渐渐形成.群辉可以说是 NAS 界的 APPLE, 一家独大.凭借其出色的软件服务受到广大 NAS 玩家的青睐.\n\n\n\n### 威联通/铁威马等\n其他 NAS 提供商可以说是一个能打的也没有,无法提供像群辉一样的优质服务.除了价格方面没有任何优势.\n\n### 自己搭建 NAS\n自己购买硬件搭建,稳定性无法得到保障,即使刷黑群晖也无法使用群晖提供的DDNS等服务.\n## 我选择的方案\n综合自己的需求和价格,我选择了群辉的两盘位机器DS218+,搭配两块4\bT的硬盘.\n![DS219+](https://i.loli.net/2019/02/01/5c54076f75b9e.jpeg)\n\n## 群晖的一些功能\n### 文件存储\n最简单的用法,你可以把群晖当做自己的个人云盘,用作文件备份.\n![WX20190201-170812@2x](https://i.loli.net/2019/02/01/5c540c9780da0.png)\n### 相册(moments)\n群晖的相册,可以提供像 icloud相册类似的体验.时间轴,智能识别等功能一应俱全.\n![WX20190201-171122@2x](https://i.loli.net/2019/02/01/5c540d4a71bd4.png)\n\n### video station\n这个功能必须强吹一波,当你把视频文件存入时,群晖会自动识别并匹配封面图和介绍等.\n![WX20190201-171349@2x](https://i.loli.net/2019/02/01/5c540de167341.png)\n### 权限配置\n群晖提供了完整的用户权限,群组权限功能.你可以添加用户并赋予指定的文件/文件夹的读写权限.\n![WX20190201-171640@2x](https://i.loli.net/2019/02/01/5c540e87f19eb.png)\n### 远程下载(download station)\n群晖类似迅雷的远程下载功能.\n![WX20190201-171816@2x](https://i.loli.net/2019/02/01/5c540ee74d856.png)\n### docker\n群晖支持 docker,这个锦上添花的功能 又给群晖添加了无数的玩法.举几个例子:\n#### 人人美剧\n下载 docker 中的人人美剧,亲测可以满网速,批量下载美剧.\n![WX20190201-172049@2x](https://i.loli.net/2019/02/01/5c540f80a6dfc.png)\n#### 迅雷 docker 版\n搭配迅雷远程下载可以提供类似 downlaod station的功能,但是由于迅雷的限速政策,体验并不是很好.\n![WX20190201-172306@2x](https://i.loli.net/2019/02/01/5c541009e39a7.png)\n\n","slug":"2019.02.01.NAS","published":1,"date":"2019-02-01T07:48:35.452Z","updated":"2019-02-01T09:23:28.807Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziiq5000vrh9z7o3h65eh","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>随着国内各大网盘日渐式微,把数据保存在网盘似乎不是一个很好的办法,数据的安全和隐私都是值得我们关注的问题.这时候 NAS 就是一个很好的选择了.</p>\n<blockquote>\n<p>NAS（Network Attached Storage：网络附属存储）按字面简单说就是连接在网络上，具备资料存储功能的装置，因此也称为“网络存储器”。它是一种专用数据存储服务器。它以数据为中心，将存储设备与服务器彻底分离，集中管理数据，从而释放带宽、提高性能、降低总拥有成本、保护投资。其成本远远低于使用服务器存储，而效率却远远高于后者。目前国际著名的NAS企业有Netapp、EMC、OUO等。</p>\n</blockquote>\n<p>换言之,针对个人的 NAS 可以理解为剥离了除存储以外所有功能的PC.</p>\n<h1 id=\"个人-NAS-的选择\"><a href=\"#个人-NAS-的选择\" class=\"headerlink\" title=\"个人 NAS 的选择\"></a>个人 NAS 的选择</h1><p>搭建(购买)个人N\bAS需要满足以下需求:</p>\n<ul>\n<li>稳定: 保证7*24 工作,以及数据安全;</li>\n<li>节能: 功率低,动辄几百瓦功耗放在家里肯定是不合适的;</li>\n<li>静音: 这个就不用说了吧;</li>\n<li>性价比: 按需购买.</li>\n</ul>\n<h2 id=\"可选的方案\"><a href=\"#可选的方案\" class=\"headerlink\" title=\"可选的方案\"></a>可选的方案</h2><h3 id=\"群辉\"><a href=\"#群辉\" class=\"headerlink\" title=\"群辉\"></a>群辉</h3><blockquote>\n<p>群晖科技股份有限公司（品牌名称：Synology，简称群晖或群晖科技）为台湾一家网络附加储存（NAS）服务商，总部位于台北市。截至2017年，群晖以Synology品牌行销全球，在中小企业及家用NAS市场占有率居世界首位。</p>\n</blockquote>\n<p>在 NAS 发展的这几年间,头部效应渐渐形成.群辉可以说是 NAS 界的 APPLE, 一家独大.凭借其出色的软件服务受到广大 NAS 玩家的青睐.</p>\n<h3 id=\"威联通-铁威马等\"><a href=\"#威联通-铁威马等\" class=\"headerlink\" title=\"威联通/铁威马等\"></a>威联通/铁威马等</h3><p>其他 NAS 提供商可以说是一个能打的也没有,无法提供像群辉一样的优质服务.除了价格方面没有任何优势.</p>\n<h3 id=\"自己搭建-NAS\"><a href=\"#自己搭建-NAS\" class=\"headerlink\" title=\"自己搭建 NAS\"></a>自己搭建 NAS</h3><p>自己购买硬件搭建,稳定性无法得到保障,即使刷黑群晖也无法使用群晖提供的DDNS等服务.</p>\n<h2 id=\"我选择的方案\"><a href=\"#我选择的方案\" class=\"headerlink\" title=\"我选择的方案\"></a>我选择的方案</h2><p>综合自己的需求和价格,我选择了群辉的两盘位机器DS218+,搭配两块4\bT的硬盘.<br><img src=\"https://i.loli.net/2019/02/01/5c54076f75b9e.jpeg\" alt=\"DS219+\"></p>\n<h2 id=\"群晖的一些功能\"><a href=\"#群晖的一些功能\" class=\"headerlink\" title=\"群晖的一些功能\"></a>群晖的一些功能</h2><h3 id=\"文件存储\"><a href=\"#文件存储\" class=\"headerlink\" title=\"文件存储\"></a>文件存储</h3><p>最简单的用法,你可以把群晖当做自己的个人云盘,用作文件备份.<br><img src=\"https://i.loli.net/2019/02/01/5c540c9780da0.png\" alt=\"WX20190201-170812@2x\"></p>\n<h3 id=\"相册-moments\"><a href=\"#相册-moments\" class=\"headerlink\" title=\"相册(moments)\"></a>相册(moments)</h3><p>群晖的相册,可以提供像 icloud相册类似的体验.时间轴,智能识别等功能一应俱全.<br><img src=\"https://i.loli.net/2019/02/01/5c540d4a71bd4.png\" alt=\"WX20190201-171122@2x\"></p>\n<h3 id=\"video-station\"><a href=\"#video-station\" class=\"headerlink\" title=\"video station\"></a>video station</h3><p>这个功能必须强吹一波,当你把视频文件存入时,群晖会自动识别并匹配封面图和介绍等.<br><img src=\"https://i.loli.net/2019/02/01/5c540de167341.png\" alt=\"WX20190201-171349@2x\"></p>\n<h3 id=\"权限配置\"><a href=\"#权限配置\" class=\"headerlink\" title=\"权限配置\"></a>权限配置</h3><p>群晖提供了完整的用户权限,群组权限功能.你可以添加用户并赋予指定的文件/文件夹的读写权限.<br><img src=\"https://i.loli.net/2019/02/01/5c540e87f19eb.png\" alt=\"WX20190201-171640@2x\"></p>\n<h3 id=\"远程下载-download-station\"><a href=\"#远程下载-download-station\" class=\"headerlink\" title=\"远程下载(download station)\"></a>远程下载(download station)</h3><p>群晖类似迅雷的远程下载功能.<br><img src=\"https://i.loli.net/2019/02/01/5c540ee74d856.png\" alt=\"WX20190201-171816@2x\"></p>\n<h3 id=\"docker\"><a href=\"#docker\" class=\"headerlink\" title=\"docker\"></a>docker</h3><p>群晖支持 docker,这个锦上添花的功能 又给群晖添加了无数的玩法.举几个例子:</p>\n<h4 id=\"人人美剧\"><a href=\"#人人美剧\" class=\"headerlink\" title=\"人人美剧\"></a>人人美剧</h4><p>下载 docker 中的人人美剧,亲测可以满网速,批量下载美剧.<br><img src=\"https://i.loli.net/2019/02/01/5c540f80a6dfc.png\" alt=\"WX20190201-172049@2x\"></p>\n<h4 id=\"迅雷-docker-版\"><a href=\"#迅雷-docker-版\" class=\"headerlink\" title=\"迅雷 docker 版\"></a>迅雷 docker 版</h4><p>搭配迅雷远程下载可以提供类似 downlaod station的功能,但是由于迅雷的限速政策,体验并不是很好.<br><img src=\"https://i.loli.net/2019/02/01/5c541009e39a7.png\" alt=\"WX20190201-172306@2x\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>随着国内各大网盘日渐式微,把数据保存在网盘似乎不是一个很好的办法,数据的安全和隐私都是值得我们关注的问题.这时候 NAS 就是一个很好的选择了.</p>\n<blockquote>\n<p>NAS（Network Attached Storage：网络附属存储）按字面简单说就是连接在网络上，具备资料存储功能的装置，因此也称为“网络存储器”。它是一种专用数据存储服务器。它以数据为中心，将存储设备与服务器彻底分离，集中管理数据，从而释放带宽、提高性能、降低总拥有成本、保护投资。其成本远远低于使用服务器存储，而效率却远远高于后者。目前国际著名的NAS企业有Netapp、EMC、OUO等。</p>\n</blockquote>\n<p>换言之,针对个人的 NAS 可以理解为剥离了除存储以外所有功能的PC.</p>\n<h1 id=\"个人-NAS-的选择\"><a href=\"#个人-NAS-的选择\" class=\"headerlink\" title=\"个人 NAS 的选择\"></a>个人 NAS 的选择</h1><p>搭建(购买)个人N\bAS需要满足以下需求:</p>\n<ul>\n<li>稳定: 保证7*24 工作,以及数据安全;</li>\n<li>节能: 功率低,动辄几百瓦功耗放在家里肯定是不合适的;</li>\n<li>静音: 这个就不用说了吧;</li>\n<li>性价比: 按需购买.</li>\n</ul>\n<h2 id=\"可选的方案\"><a href=\"#可选的方案\" class=\"headerlink\" title=\"可选的方案\"></a>可选的方案</h2><h3 id=\"群辉\"><a href=\"#群辉\" class=\"headerlink\" title=\"群辉\"></a>群辉</h3><blockquote>\n<p>群晖科技股份有限公司（品牌名称：Synology，简称群晖或群晖科技）为台湾一家网络附加储存（NAS）服务商，总部位于台北市。截至2017年，群晖以Synology品牌行销全球，在中小企业及家用NAS市场占有率居世界首位。</p>\n</blockquote>\n<p>在 NAS 发展的这几年间,头部效应渐渐形成.群辉可以说是 NAS 界的 APPLE, 一家独大.凭借其出色的软件服务受到广大 NAS 玩家的青睐.</p>\n<h3 id=\"威联通-铁威马等\"><a href=\"#威联通-铁威马等\" class=\"headerlink\" title=\"威联通/铁威马等\"></a>威联通/铁威马等</h3><p>其他 NAS 提供商可以说是一个能打的也没有,无法提供像群辉一样的优质服务.除了价格方面没有任何优势.</p>\n<h3 id=\"自己搭建-NAS\"><a href=\"#自己搭建-NAS\" class=\"headerlink\" title=\"自己搭建 NAS\"></a>自己搭建 NAS</h3><p>自己购买硬件搭建,稳定性无法得到保障,即使刷黑群晖也无法使用群晖提供的DDNS等服务.</p>\n<h2 id=\"我选择的方案\"><a href=\"#我选择的方案\" class=\"headerlink\" title=\"我选择的方案\"></a>我选择的方案</h2><p>综合自己的需求和价格,我选择了群辉的两盘位机器DS218+,搭配两块4\bT的硬盘.<br><img src=\"https://i.loli.net/2019/02/01/5c54076f75b9e.jpeg\" alt=\"DS219+\"></p>\n<h2 id=\"群晖的一些功能\"><a href=\"#群晖的一些功能\" class=\"headerlink\" title=\"群晖的一些功能\"></a>群晖的一些功能</h2><h3 id=\"文件存储\"><a href=\"#文件存储\" class=\"headerlink\" title=\"文件存储\"></a>文件存储</h3><p>最简单的用法,你可以把群晖当做自己的个人云盘,用作文件备份.<br><img src=\"https://i.loli.net/2019/02/01/5c540c9780da0.png\" alt=\"WX20190201-170812@2x\"></p>\n<h3 id=\"相册-moments\"><a href=\"#相册-moments\" class=\"headerlink\" title=\"相册(moments)\"></a>相册(moments)</h3><p>群晖的相册,可以提供像 icloud相册类似的体验.时间轴,智能识别等功能一应俱全.<br><img src=\"https://i.loli.net/2019/02/01/5c540d4a71bd4.png\" alt=\"WX20190201-171122@2x\"></p>\n<h3 id=\"video-station\"><a href=\"#video-station\" class=\"headerlink\" title=\"video station\"></a>video station</h3><p>这个功能必须强吹一波,当你把视频文件存入时,群晖会自动识别并匹配封面图和介绍等.<br><img src=\"https://i.loli.net/2019/02/01/5c540de167341.png\" alt=\"WX20190201-171349@2x\"></p>\n<h3 id=\"权限配置\"><a href=\"#权限配置\" class=\"headerlink\" title=\"权限配置\"></a>权限配置</h3><p>群晖提供了完整的用户权限,群组权限功能.你可以添加用户并赋予指定的文件/文件夹的读写权限.<br><img src=\"https://i.loli.net/2019/02/01/5c540e87f19eb.png\" alt=\"WX20190201-171640@2x\"></p>\n<h3 id=\"远程下载-download-station\"><a href=\"#远程下载-download-station\" class=\"headerlink\" title=\"远程下载(download station)\"></a>远程下载(download station)</h3><p>群晖类似迅雷的远程下载功能.<br><img src=\"https://i.loli.net/2019/02/01/5c540ee74d856.png\" alt=\"WX20190201-171816@2x\"></p>\n<h3 id=\"docker\"><a href=\"#docker\" class=\"headerlink\" title=\"docker\"></a>docker</h3><p>群晖支持 docker,这个锦上添花的功能 又给群晖添加了无数的玩法.举几个例子:</p>\n<h4 id=\"人人美剧\"><a href=\"#人人美剧\" class=\"headerlink\" title=\"人人美剧\"></a>人人美剧</h4><p>下载 docker 中的人人美剧,亲测可以满网速,批量下载美剧.<br><img src=\"https://i.loli.net/2019/02/01/5c540f80a6dfc.png\" alt=\"WX20190201-172049@2x\"></p>\n<h4 id=\"迅雷-docker-版\"><a href=\"#迅雷-docker-版\" class=\"headerlink\" title=\"迅雷 docker 版\"></a>迅雷 docker 版</h4><p>搭配迅雷远程下载可以提供类似 downlaod station的功能,但是由于迅雷的限速政策,体验并不是很好.<br><img src=\"https://i.loli.net/2019/02/01/5c541009e39a7.png\" alt=\"WX20190201-172306@2x\"></p>\n"},{"title":"webpack使用","_content":"#什么是 webpack?\n![what-is-webpack](https://i.loli.net/2019/01/12/5c39eb56b9248.png)\n[webpack](https://www.webpackjs.com/concepts/)是一个静态文件打包器.当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle.\nwebpack 有四个核心概念:\n* 入口(entry)\n* 输出(output)\n* loader\n* 插件(plugins)\n\n此外,在 webpack4中,增加了 mode 的选项,通过选择 development 或 production 之中的一个，来设置 mode 参数，你可以启用相应模式下的 webpack 内置的优化.\n##入口起点(entry point)\n### 单个入口写法\n用法:`entry: string|Array<string>`\n在 webpack.config.js 中配置:\n\n    const config = {\n    entry: './path/to/my/entry/file.js'\n    };\n\n    module.exports = config;\n上面这种 entry 的写法是👇的简写:\n\n    const config = {\n    entry: {\n        main: './path/to/my/entry/file.js'\n    }\n    };\n向 entry 传入数组,会创建多个主入口(multi-main entry).\n### 对象语法\n用法:`entry: {[entryChunkName: string]: string|Array<string>}`\n在 webpack.config.js中配置:\n\n    const config = {\n    entry: {\n        app: './src/app.js',\n        vendors: './src/vendors.js'\n    }\n    };\n### 常见场景\n#### 分离\b应用程序(app)和第三方库(vendor)入口\n在 webpack.config.js 中配置:\n\n    const config = {\n    entry: {\n        app: './src/app.js',\n        vendors: './src/vendors.js'\n    }\n    };\n *webpack 从 app.js 和 vendors.js 开始创建依赖图(dependency graph)。这些依赖图是彼此完全分离、互相独立的（每个 bundle 中都有一个 webpack 引导(bootstrap)）。这种方式比较常见于，只有一个入口起点（不包括 vendor）的单页应用程序(single page application)中。*\n #### 多页面应用程序\n 在 webpack.config.js中配置:\n\n    const config = {\n    entry: {\n        pageOne: './src/pageOne/index.js',\n        pageTwo: './src/pageTwo/index.js',\n        pageThree: './src/pageThree/index.js'\n    }\n    };\n*webpack 需要 3 个独立分离的依赖图（如上面的示例）。*\n## 输出(OUTPUT)\n配置 output 选项可以控制 webpack 如何向硬盘写入编译文件.即时存在多个入口起点,但只指定一个输出配置.\n### 用法\n在 webpack 中配置 output 属性的最低要求是,将它的值设置为一个对象,包括以下两点:\n* filename 用于输出文件的文件名;\n* 目标输出目录 path 的绝对路径.\n\n在 webpack.config.js 中配置\n\n    module.exports = {\n    output: {\n        filename: 'bundle.js',\n        path: '/home/proj/public/assets'\n    }\n    };\n### \b多个入口起点\n如果配置了多个单独的 chunk,则应该使用占位符来确保每个文件具有唯一的名称.\nmodule.exports = {\n  entry: {\n    app: './src/app.js',\n    search: './src/search.js'\n  },\n  output: {\n    filename: '[name].js',\n    path: __dirname + '/dist'\n  }\n};\n\n// 写入到硬盘：./dist/app.js, ./dist/search.js\n## 模式\n提供 mode 配置选项,告知 webpack 使用相应模式的内置优化.\n### 用法\n只在\b配置中提供 node 选项:\n\n    module.export = {\n        mode:'production'\n    }\n或者在 cli 参数中传递:\n`webpack --mode=production`\n支持\b一下字符串:\n#### development\n会将 process.env.NODE_ENV 的值设为 development。启用 NamedChunksPlugin 和 NamedModulesPlugin。\n#### production\n会将 process.env.NODE_ENV 的值设为 production。启用 FlagDependencyUsagePlugin, FlagIncludedChunksPlugin, ModuleConcatenationPlugin, NoEmitOnErrorsPlugin, OccurrenceOrderPlugin, SideEffectsFlagPlugin 和 UglifyJsPlugin.\n#### none\n不选用任何默认优化选项\n## loader\nloader 用于对模块的源代码进行转换.loader 可以使你在 import 或加载模块时预处理文件.因此 loader 类似于替他构建工具中的任务(tesk),并提供了处理前端构建步骤的强大方法.loader 可以将文件从不同的语言转化成 JavaScript.\n### 实例\n可以使用 loader 告诉 webpack 加载 css 文件,为此首先安装相对应的 loader\b.\n`npm install css-loader -D`\n`npm install ts-loader -D `\n\n    //webpack.config.js\n    module.exports = {\n    module: {\n        rules: [\n        { test: /\\.css$/, use: 'css-loader' },\n        { test: /\\.ts$/, use: 'ts-loader' }\n        ]\n    }\n    };\n### 使用 loader\n有三种 使用 loader 的方式:\n* 配置>在 webpack.config.js文件中指定 lodaer.\n* 内联>在每个 import 语句中显式指定 loader.\n* cli>在 shell 命令中指定他们.\n#### 配置[configuration]\n\n    module.exports = {\n    module: {\n        rules: [\n        {\n            test: /\\.css$/,\n            use: [\n            { loader: 'style-loader' },\n            {\n                loader: 'css-loader',\n                options: {\n                modules: true\n                }\n            }\n            ]\n        }\n        ]\n    }\n    };\n#### 内联\n可以在 import 语句或者任何等效于 import 的方式中指定 lodaer.使用 ! 来将资源中的 loader 分开.分开的每个部分都相对于当前目录解析.\n`import Styles from 'style-loader!css-loader?modules!./styles.css';`\n#### cli\n`webpack --module-bind jade-loader --module-bind 'css=style-loader!css-loader'`\n这会对 .jade 文件使用 jade-loader,对 .css 文件使用 style-loader 和 css-loader.\n### loader特性\n* loader 支持链式传输,loader 链中每个 loader,都对前一个 loader 处理后的资源进行转换.\n * loader 可以是同步的,也可以是异步的.\n * loader 可以运行在 node.js中,并且能够执行任何可能的操作.\n * loader 接受查询参数.\n * loader 能够使用 options 对象进行配置.\n * 除了使用package,json 常见的 main 属性,还可以将普通的 npm 模块导出为 loader,做法是在 package.json中定义一个 lodaer 字段.\n * 插件(plugins)可以为 loader 带来更多特性.\n * loader 能够产生额外的任意文件.\n## 插件(暂时跳过)\n## 配置[configuration]\nwebpack 的配置文件,是导出一个对象的 JavaScript 文件,此对象由 webpack 根据对象定义的属性进行解析.\n因为 webpack 是标准的 node.js commonJS 模块,因此可以:\n* 通过 require 导入其他文件.\n* 通过 require 使用 npm的工具函数.\n* 使用 JavaScript 控制流表达式.\n* 对常用值使用常量或者变量.\n* 编写并执行函数来生成部分配置.\n### 基本配置\n\n    //webpack.config.js\n    var path = require('path');\n    module.exports = {\n    mode: 'development',\n    entry: './foo.js',\n    output: {\n        path: path.resolve(__dirname, 'dist'),\n        filename: 'foo.bundle.js'\n    }\n    };\n## 模块(modules)\n在模块化编程中,开发者将程序分解成离散功能块,并称之为模块.\n### webpack模块\n*  ES 2015  import 语句\n* CommonJ\bS require()语句\n* AM\bD define 和 require 语句\n* css/sass/less 文件中的@import 语句\n* 样式或 html 文件中的图片链接","source":"_posts/2019.01.09.webpack-4.md","raw":"---\ntitle: webpack使用\ntags: [ webpack]\ncategories: 知识 \n---\n#什么是 webpack?\n![what-is-webpack](https://i.loli.net/2019/01/12/5c39eb56b9248.png)\n[webpack](https://www.webpackjs.com/concepts/)是一个静态文件打包器.当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle.\nwebpack 有四个核心概念:\n* 入口(entry)\n* 输出(output)\n* loader\n* 插件(plugins)\n\n此外,在 webpack4中,增加了 mode 的选项,通过选择 development 或 production 之中的一个，来设置 mode 参数，你可以启用相应模式下的 webpack 内置的优化.\n##入口起点(entry point)\n### 单个入口写法\n用法:`entry: string|Array<string>`\n在 webpack.config.js 中配置:\n\n    const config = {\n    entry: './path/to/my/entry/file.js'\n    };\n\n    module.exports = config;\n上面这种 entry 的写法是👇的简写:\n\n    const config = {\n    entry: {\n        main: './path/to/my/entry/file.js'\n    }\n    };\n向 entry 传入数组,会创建多个主入口(multi-main entry).\n### 对象语法\n用法:`entry: {[entryChunkName: string]: string|Array<string>}`\n在 webpack.config.js中配置:\n\n    const config = {\n    entry: {\n        app: './src/app.js',\n        vendors: './src/vendors.js'\n    }\n    };\n### 常见场景\n#### 分离\b应用程序(app)和第三方库(vendor)入口\n在 webpack.config.js 中配置:\n\n    const config = {\n    entry: {\n        app: './src/app.js',\n        vendors: './src/vendors.js'\n    }\n    };\n *webpack 从 app.js 和 vendors.js 开始创建依赖图(dependency graph)。这些依赖图是彼此完全分离、互相独立的（每个 bundle 中都有一个 webpack 引导(bootstrap)）。这种方式比较常见于，只有一个入口起点（不包括 vendor）的单页应用程序(single page application)中。*\n #### 多页面应用程序\n 在 webpack.config.js中配置:\n\n    const config = {\n    entry: {\n        pageOne: './src/pageOne/index.js',\n        pageTwo: './src/pageTwo/index.js',\n        pageThree: './src/pageThree/index.js'\n    }\n    };\n*webpack 需要 3 个独立分离的依赖图（如上面的示例）。*\n## 输出(OUTPUT)\n配置 output 选项可以控制 webpack 如何向硬盘写入编译文件.即时存在多个入口起点,但只指定一个输出配置.\n### 用法\n在 webpack 中配置 output 属性的最低要求是,将它的值设置为一个对象,包括以下两点:\n* filename 用于输出文件的文件名;\n* 目标输出目录 path 的绝对路径.\n\n在 webpack.config.js 中配置\n\n    module.exports = {\n    output: {\n        filename: 'bundle.js',\n        path: '/home/proj/public/assets'\n    }\n    };\n### \b多个入口起点\n如果配置了多个单独的 chunk,则应该使用占位符来确保每个文件具有唯一的名称.\nmodule.exports = {\n  entry: {\n    app: './src/app.js',\n    search: './src/search.js'\n  },\n  output: {\n    filename: '[name].js',\n    path: __dirname + '/dist'\n  }\n};\n\n// 写入到硬盘：./dist/app.js, ./dist/search.js\n## 模式\n提供 mode 配置选项,告知 webpack 使用相应模式的内置优化.\n### 用法\n只在\b配置中提供 node 选项:\n\n    module.export = {\n        mode:'production'\n    }\n或者在 cli 参数中传递:\n`webpack --mode=production`\n支持\b一下字符串:\n#### development\n会将 process.env.NODE_ENV 的值设为 development。启用 NamedChunksPlugin 和 NamedModulesPlugin。\n#### production\n会将 process.env.NODE_ENV 的值设为 production。启用 FlagDependencyUsagePlugin, FlagIncludedChunksPlugin, ModuleConcatenationPlugin, NoEmitOnErrorsPlugin, OccurrenceOrderPlugin, SideEffectsFlagPlugin 和 UglifyJsPlugin.\n#### none\n不选用任何默认优化选项\n## loader\nloader 用于对模块的源代码进行转换.loader 可以使你在 import 或加载模块时预处理文件.因此 loader 类似于替他构建工具中的任务(tesk),并提供了处理前端构建步骤的强大方法.loader 可以将文件从不同的语言转化成 JavaScript.\n### 实例\n可以使用 loader 告诉 webpack 加载 css 文件,为此首先安装相对应的 loader\b.\n`npm install css-loader -D`\n`npm install ts-loader -D `\n\n    //webpack.config.js\n    module.exports = {\n    module: {\n        rules: [\n        { test: /\\.css$/, use: 'css-loader' },\n        { test: /\\.ts$/, use: 'ts-loader' }\n        ]\n    }\n    };\n### 使用 loader\n有三种 使用 loader 的方式:\n* 配置>在 webpack.config.js文件中指定 lodaer.\n* 内联>在每个 import 语句中显式指定 loader.\n* cli>在 shell 命令中指定他们.\n#### 配置[configuration]\n\n    module.exports = {\n    module: {\n        rules: [\n        {\n            test: /\\.css$/,\n            use: [\n            { loader: 'style-loader' },\n            {\n                loader: 'css-loader',\n                options: {\n                modules: true\n                }\n            }\n            ]\n        }\n        ]\n    }\n    };\n#### 内联\n可以在 import 语句或者任何等效于 import 的方式中指定 lodaer.使用 ! 来将资源中的 loader 分开.分开的每个部分都相对于当前目录解析.\n`import Styles from 'style-loader!css-loader?modules!./styles.css';`\n#### cli\n`webpack --module-bind jade-loader --module-bind 'css=style-loader!css-loader'`\n这会对 .jade 文件使用 jade-loader,对 .css 文件使用 style-loader 和 css-loader.\n### loader特性\n* loader 支持链式传输,loader 链中每个 loader,都对前一个 loader 处理后的资源进行转换.\n * loader 可以是同步的,也可以是异步的.\n * loader 可以运行在 node.js中,并且能够执行任何可能的操作.\n * loader 接受查询参数.\n * loader 能够使用 options 对象进行配置.\n * 除了使用package,json 常见的 main 属性,还可以将普通的 npm 模块导出为 loader,做法是在 package.json中定义一个 lodaer 字段.\n * 插件(plugins)可以为 loader 带来更多特性.\n * loader 能够产生额外的任意文件.\n## 插件(暂时跳过)\n## 配置[configuration]\nwebpack 的配置文件,是导出一个对象的 JavaScript 文件,此对象由 webpack 根据对象定义的属性进行解析.\n因为 webpack 是标准的 node.js commonJS 模块,因此可以:\n* 通过 require 导入其他文件.\n* 通过 require 使用 npm的工具函数.\n* 使用 JavaScript 控制流表达式.\n* 对常用值使用常量或者变量.\n* 编写并执行函数来生成部分配置.\n### 基本配置\n\n    //webpack.config.js\n    var path = require('path');\n    module.exports = {\n    mode: 'development',\n    entry: './foo.js',\n    output: {\n        path: path.resolve(__dirname, 'dist'),\n        filename: 'foo.bundle.js'\n    }\n    };\n## 模块(modules)\n在模块化编程中,开发者将程序分解成离散功能块,并称之为模块.\n### webpack模块\n*  ES 2015  import 语句\n* CommonJ\bS require()语句\n* AM\bD define 和 require 语句\n* css/sass/less 文件中的@import 语句\n* 样式或 html 文件中的图片链接","slug":"2019.01.09.webpack-4","published":1,"date":"2019-01-09T03:55:49.725Z","updated":"2019-01-14T03:30:19.496Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziiq6000wrh9zdvnj8gh3","content":"<p>#什么是 webpack?<br><img src=\"https://i.loli.net/2019/01/12/5c39eb56b9248.png\" alt=\"what-is-webpack\"><br><a href=\"https://www.webpackjs.com/concepts/\" target=\"_blank\" rel=\"noopener\">webpack</a>是一个静态文件打包器.当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle.<br>webpack 有四个核心概念:</p>\n<ul>\n<li>入口(entry)</li>\n<li>输出(output)</li>\n<li>loader</li>\n<li>插件(plugins)</li>\n</ul>\n<p>此外,在 webpack4中,增加了 mode 的选项,通过选择 development 或 production 之中的一个，来设置 mode 参数，你可以启用相应模式下的 webpack 内置的优化.</p>\n<p>##入口起点(entry point)</p>\n<h3 id=\"单个入口写法\"><a href=\"#单个入口写法\" class=\"headerlink\" title=\"单个入口写法\"></a>单个入口写法</h3><p>用法:<code>entry: string|Array&lt;string&gt;</code><br>在 webpack.config.js 中配置:</p>\n<pre><code>const config = {\nentry: &apos;./path/to/my/entry/file.js&apos;\n};\n\nmodule.exports = config;\n</code></pre><p>上面这种 entry 的写法是👇的简写:</p>\n<pre><code>const config = {\nentry: {\n    main: &apos;./path/to/my/entry/file.js&apos;\n}\n};\n</code></pre><p>向 entry 传入数组,会创建多个主入口(multi-main entry).</p>\n<h3 id=\"对象语法\"><a href=\"#对象语法\" class=\"headerlink\" title=\"对象语法\"></a>对象语法</h3><p>用法:<code>entry: {[entryChunkName: string]: string|Array&lt;string&gt;}</code><br>在 webpack.config.js中配置:</p>\n<pre><code>const config = {\nentry: {\n    app: &apos;./src/app.js&apos;,\n    vendors: &apos;./src/vendors.js&apos;\n}\n};\n</code></pre><h3 id=\"常见场景\"><a href=\"#常见场景\" class=\"headerlink\" title=\"常见场景\"></a>常见场景</h3><h4 id=\"分离应用程序-app-和第三方库-vendor-入口\"><a href=\"#分离应用程序-app-和第三方库-vendor-入口\" class=\"headerlink\" title=\"分离\b应用程序(app)和第三方库(vendor)入口\"></a>分离\b应用程序(app)和第三方库(vendor)入口</h4><p>在 webpack.config.js 中配置:</p>\n<pre><code>const config = {\nentry: {\n    app: &apos;./src/app.js&apos;,\n    vendors: &apos;./src/vendors.js&apos;\n}\n};\n</code></pre><p> <em>webpack 从 app.js 和 vendors.js 开始创建依赖图(dependency graph)。这些依赖图是彼此完全分离、互相独立的（每个 bundle 中都有一个 webpack 引导(bootstrap)）。这种方式比较常见于，只有一个入口起点（不包括 vendor）的单页应用程序(single page application)中。</em></p>\n<h4 id=\"多页面应用程序\"><a href=\"#多页面应用程序\" class=\"headerlink\" title=\"多页面应用程序\"></a>多页面应用程序</h4><p> 在 webpack.config.js中配置:</p>\n<pre><code>const config = {\nentry: {\n    pageOne: &apos;./src/pageOne/index.js&apos;,\n    pageTwo: &apos;./src/pageTwo/index.js&apos;,\n    pageThree: &apos;./src/pageThree/index.js&apos;\n}\n};\n</code></pre><p><em>webpack 需要 3 个独立分离的依赖图（如上面的示例）。</em></p>\n<h2 id=\"输出-OUTPUT\"><a href=\"#输出-OUTPUT\" class=\"headerlink\" title=\"输出(OUTPUT)\"></a>输出(OUTPUT)</h2><p>配置 output 选项可以控制 webpack 如何向硬盘写入编译文件.即时存在多个入口起点,但只指定一个输出配置.</p>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><p>在 webpack 中配置 output 属性的最低要求是,将它的值设置为一个对象,包括以下两点:</p>\n<ul>\n<li>filename 用于输出文件的文件名;</li>\n<li>目标输出目录 path 的绝对路径.</li>\n</ul>\n<p>在 webpack.config.js 中配置</p>\n<pre><code>module.exports = {\noutput: {\n    filename: &apos;bundle.js&apos;,\n    path: &apos;/home/proj/public/assets&apos;\n}\n};\n</code></pre><h3 id=\"多个入口起点\"><a href=\"#多个入口起点\" class=\"headerlink\" title=\"\b多个入口起点\"></a>\b多个入口起点</h3><p>如果配置了多个单独的 chunk,则应该使用占位符来确保每个文件具有唯一的名称.<br>module.exports = {<br>  entry: {<br>    app: ‘./src/app.js’,<br>    search: ‘./src/search.js’<br>  },<br>  output: {<br>    filename: ‘[name].js’,<br>    path: __dirname + ‘/dist’<br>  }<br>};</p>\n<p>// 写入到硬盘：./dist/app.js, ./dist/search.js</p>\n<h2 id=\"模式\"><a href=\"#模式\" class=\"headerlink\" title=\"模式\"></a>模式</h2><p>提供 mode 配置选项,告知 webpack 使用相应模式的内置优化.</p>\n<h3 id=\"用法-1\"><a href=\"#用法-1\" class=\"headerlink\" title=\"用法\"></a>用法</h3><p>只在\b配置中提供 node 选项:</p>\n<pre><code>module.export = {\n    mode:&apos;production&apos;\n}\n</code></pre><p>或者在 cli 参数中传递:<br><code>webpack --mode=production</code><br>支持\b一下字符串:</p>\n<h4 id=\"development\"><a href=\"#development\" class=\"headerlink\" title=\"development\"></a>development</h4><p>会将 process.env.NODE_ENV 的值设为 development。启用 NamedChunksPlugin 和 NamedModulesPlugin。</p>\n<h4 id=\"production\"><a href=\"#production\" class=\"headerlink\" title=\"production\"></a>production</h4><p>会将 process.env.NODE_ENV 的值设为 production。启用 FlagDependencyUsagePlugin, FlagIncludedChunksPlugin, ModuleConcatenationPlugin, NoEmitOnErrorsPlugin, OccurrenceOrderPlugin, SideEffectsFlagPlugin 和 UglifyJsPlugin.</p>\n<h4 id=\"none\"><a href=\"#none\" class=\"headerlink\" title=\"none\"></a>none</h4><p>不选用任何默认优化选项</p>\n<h2 id=\"loader\"><a href=\"#loader\" class=\"headerlink\" title=\"loader\"></a>loader</h2><p>loader 用于对模块的源代码进行转换.loader 可以使你在 import 或加载模块时预处理文件.因此 loader 类似于替他构建工具中的任务(tesk),并提供了处理前端构建步骤的强大方法.loader 可以将文件从不同的语言转化成 JavaScript.</p>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p>可以使用 loader 告诉 webpack 加载 css 文件,为此首先安装相对应的 loader\b.<br><code>npm install css-loader -D</code><br><code>npm install ts-loader -D</code></p>\n<pre><code>//webpack.config.js\nmodule.exports = {\nmodule: {\n    rules: [\n    { test: /\\.css$/, use: &apos;css-loader&apos; },\n    { test: /\\.ts$/, use: &apos;ts-loader&apos; }\n    ]\n}\n};\n</code></pre><h3 id=\"使用-loader\"><a href=\"#使用-loader\" class=\"headerlink\" title=\"使用 loader\"></a>使用 loader</h3><p>有三种 使用 loader 的方式:</p>\n<ul>\n<li>配置&gt;在 webpack.config.js文件中指定 lodaer.</li>\n<li>内联&gt;在每个 import 语句中显式指定 loader.</li>\n<li><p>cli&gt;在 shell 命令中指定他们.</p>\n<h4 id=\"配置-configuration\"><a href=\"#配置-configuration\" class=\"headerlink\" title=\"配置[configuration]\"></a>配置[configuration]</h4><p>  module.exports = {<br>  module: {</p>\n<pre><code>rules: [\n{\n    test: /\\.css$/,\n    use: [\n    { loader: &apos;style-loader&apos; },\n    {\n        loader: &apos;css-loader&apos;,\n        options: {\n        modules: true\n        }\n    }\n    ]\n}\n]\n</code></pre><p>  }<br>  };</p>\n<h4 id=\"内联\"><a href=\"#内联\" class=\"headerlink\" title=\"内联\"></a>内联</h4><p>可以在 import 语句或者任何等效于 import 的方式中指定 lodaer.使用 ! 来将资源中的 loader 分开.分开的每个部分都相对于当前目录解析.<br><code>import Styles from &#39;style-loader!css-loader?modules!./styles.css&#39;;</code></p>\n<h4 id=\"cli\"><a href=\"#cli\" class=\"headerlink\" title=\"cli\"></a>cli</h4><p><code>webpack --module-bind jade-loader --module-bind &#39;css=style-loader!css-loader&#39;</code><br>这会对 .jade 文件使用 jade-loader,对 .css 文件使用 style-loader 和 css-loader.</p>\n<h3 id=\"loader特性\"><a href=\"#loader特性\" class=\"headerlink\" title=\"loader特性\"></a>loader特性</h3></li>\n<li>loader 支持链式传输,loader 链中每个 loader,都对前一个 loader 处理后的资源进行转换.<ul>\n<li>loader 可以是同步的,也可以是异步的.</li>\n<li>loader 可以运行在 node.js中,并且能够执行任何可能的操作.</li>\n<li>loader 接受查询参数.</li>\n<li>loader 能够使用 options 对象进行配置.</li>\n<li>除了使用package,json 常见的 main 属性,还可以将普通的 npm 模块导出为 loader,做法是在 package.json中定义一个 lodaer 字段.</li>\n<li>插件(plugins)可以为 loader 带来更多特性.</li>\n<li>loader 能够产生额外的任意文件.<h2 id=\"插件-暂时跳过\"><a href=\"#插件-暂时跳过\" class=\"headerlink\" title=\"插件(暂时跳过)\"></a>插件(暂时跳过)</h2><h2 id=\"配置-configuration-1\"><a href=\"#配置-configuration-1\" class=\"headerlink\" title=\"配置[configuration]\"></a>配置[configuration]</h2>webpack 的配置文件,是导出一个对象的 JavaScript 文件,此对象由 webpack 根据对象定义的属性进行解析.<br>因为 webpack 是标准的 node.js commonJS 模块,因此可以:</li>\n</ul>\n</li>\n<li>通过 require 导入其他文件.</li>\n<li>通过 require 使用 npm的工具函数.</li>\n<li>使用 JavaScript 控制流表达式.</li>\n<li>对常用值使用常量或者变量.</li>\n<li><p>编写并执行函数来生成部分配置.</p>\n<h3 id=\"基本配置\"><a href=\"#基本配置\" class=\"headerlink\" title=\"基本配置\"></a>基本配置</h3><p>  //webpack.config.js<br>  var path = require(‘path’);<br>  module.exports = {<br>  mode: ‘development’,<br>  entry: ‘./foo.js’,<br>  output: {</p>\n<pre><code>path: path.resolve(__dirname, &apos;dist&apos;),\nfilename: &apos;foo.bundle.js&apos;\n</code></pre><p>  }<br>  };</p>\n<h2 id=\"模块-modules\"><a href=\"#模块-modules\" class=\"headerlink\" title=\"模块(modules)\"></a>模块(modules)</h2><p>在模块化编程中,开发者将程序分解成离散功能块,并称之为模块.</p>\n<h3 id=\"webpack模块\"><a href=\"#webpack模块\" class=\"headerlink\" title=\"webpack模块\"></a>webpack模块</h3></li>\n<li>ES 2015  import 语句</li>\n<li>CommonJ\bS require()语句</li>\n<li>AM\bD define 和 require 语句</li>\n<li>css/sass/less 文件中的@import 语句</li>\n<li>样式或 html 文件中的图片链接</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>#什么是 webpack?<br><img src=\"https://i.loli.net/2019/01/12/5c39eb56b9248.png\" alt=\"what-is-webpack\"><br><a href=\"https://www.webpackjs.com/concepts/\" target=\"_blank\" rel=\"noopener\">webpack</a>是一个静态文件打包器.当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle.<br>webpack 有四个核心概念:</p>\n<ul>\n<li>入口(entry)</li>\n<li>输出(output)</li>\n<li>loader</li>\n<li>插件(plugins)</li>\n</ul>\n<p>此外,在 webpack4中,增加了 mode 的选项,通过选择 development 或 production 之中的一个，来设置 mode 参数，你可以启用相应模式下的 webpack 内置的优化.</p>\n<p>##入口起点(entry point)</p>\n<h3 id=\"单个入口写法\"><a href=\"#单个入口写法\" class=\"headerlink\" title=\"单个入口写法\"></a>单个入口写法</h3><p>用法:<code>entry: string|Array&lt;string&gt;</code><br>在 webpack.config.js 中配置:</p>\n<pre><code>const config = {\nentry: &apos;./path/to/my/entry/file.js&apos;\n};\n\nmodule.exports = config;\n</code></pre><p>上面这种 entry 的写法是👇的简写:</p>\n<pre><code>const config = {\nentry: {\n    main: &apos;./path/to/my/entry/file.js&apos;\n}\n};\n</code></pre><p>向 entry 传入数组,会创建多个主入口(multi-main entry).</p>\n<h3 id=\"对象语法\"><a href=\"#对象语法\" class=\"headerlink\" title=\"对象语法\"></a>对象语法</h3><p>用法:<code>entry: {[entryChunkName: string]: string|Array&lt;string&gt;}</code><br>在 webpack.config.js中配置:</p>\n<pre><code>const config = {\nentry: {\n    app: &apos;./src/app.js&apos;,\n    vendors: &apos;./src/vendors.js&apos;\n}\n};\n</code></pre><h3 id=\"常见场景\"><a href=\"#常见场景\" class=\"headerlink\" title=\"常见场景\"></a>常见场景</h3><h4 id=\"分离应用程序-app-和第三方库-vendor-入口\"><a href=\"#分离应用程序-app-和第三方库-vendor-入口\" class=\"headerlink\" title=\"分离\b应用程序(app)和第三方库(vendor)入口\"></a>分离\b应用程序(app)和第三方库(vendor)入口</h4><p>在 webpack.config.js 中配置:</p>\n<pre><code>const config = {\nentry: {\n    app: &apos;./src/app.js&apos;,\n    vendors: &apos;./src/vendors.js&apos;\n}\n};\n</code></pre><p> <em>webpack 从 app.js 和 vendors.js 开始创建依赖图(dependency graph)。这些依赖图是彼此完全分离、互相独立的（每个 bundle 中都有一个 webpack 引导(bootstrap)）。这种方式比较常见于，只有一个入口起点（不包括 vendor）的单页应用程序(single page application)中。</em></p>\n<h4 id=\"多页面应用程序\"><a href=\"#多页面应用程序\" class=\"headerlink\" title=\"多页面应用程序\"></a>多页面应用程序</h4><p> 在 webpack.config.js中配置:</p>\n<pre><code>const config = {\nentry: {\n    pageOne: &apos;./src/pageOne/index.js&apos;,\n    pageTwo: &apos;./src/pageTwo/index.js&apos;,\n    pageThree: &apos;./src/pageThree/index.js&apos;\n}\n};\n</code></pre><p><em>webpack 需要 3 个独立分离的依赖图（如上面的示例）。</em></p>\n<h2 id=\"输出-OUTPUT\"><a href=\"#输出-OUTPUT\" class=\"headerlink\" title=\"输出(OUTPUT)\"></a>输出(OUTPUT)</h2><p>配置 output 选项可以控制 webpack 如何向硬盘写入编译文件.即时存在多个入口起点,但只指定一个输出配置.</p>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><p>在 webpack 中配置 output 属性的最低要求是,将它的值设置为一个对象,包括以下两点:</p>\n<ul>\n<li>filename 用于输出文件的文件名;</li>\n<li>目标输出目录 path 的绝对路径.</li>\n</ul>\n<p>在 webpack.config.js 中配置</p>\n<pre><code>module.exports = {\noutput: {\n    filename: &apos;bundle.js&apos;,\n    path: &apos;/home/proj/public/assets&apos;\n}\n};\n</code></pre><h3 id=\"多个入口起点\"><a href=\"#多个入口起点\" class=\"headerlink\" title=\"\b多个入口起点\"></a>\b多个入口起点</h3><p>如果配置了多个单独的 chunk,则应该使用占位符来确保每个文件具有唯一的名称.<br>module.exports = {<br>  entry: {<br>    app: ‘./src/app.js’,<br>    search: ‘./src/search.js’<br>  },<br>  output: {<br>    filename: ‘[name].js’,<br>    path: __dirname + ‘/dist’<br>  }<br>};</p>\n<p>// 写入到硬盘：./dist/app.js, ./dist/search.js</p>\n<h2 id=\"模式\"><a href=\"#模式\" class=\"headerlink\" title=\"模式\"></a>模式</h2><p>提供 mode 配置选项,告知 webpack 使用相应模式的内置优化.</p>\n<h3 id=\"用法-1\"><a href=\"#用法-1\" class=\"headerlink\" title=\"用法\"></a>用法</h3><p>只在\b配置中提供 node 选项:</p>\n<pre><code>module.export = {\n    mode:&apos;production&apos;\n}\n</code></pre><p>或者在 cli 参数中传递:<br><code>webpack --mode=production</code><br>支持\b一下字符串:</p>\n<h4 id=\"development\"><a href=\"#development\" class=\"headerlink\" title=\"development\"></a>development</h4><p>会将 process.env.NODE_ENV 的值设为 development。启用 NamedChunksPlugin 和 NamedModulesPlugin。</p>\n<h4 id=\"production\"><a href=\"#production\" class=\"headerlink\" title=\"production\"></a>production</h4><p>会将 process.env.NODE_ENV 的值设为 production。启用 FlagDependencyUsagePlugin, FlagIncludedChunksPlugin, ModuleConcatenationPlugin, NoEmitOnErrorsPlugin, OccurrenceOrderPlugin, SideEffectsFlagPlugin 和 UglifyJsPlugin.</p>\n<h4 id=\"none\"><a href=\"#none\" class=\"headerlink\" title=\"none\"></a>none</h4><p>不选用任何默认优化选项</p>\n<h2 id=\"loader\"><a href=\"#loader\" class=\"headerlink\" title=\"loader\"></a>loader</h2><p>loader 用于对模块的源代码进行转换.loader 可以使你在 import 或加载模块时预处理文件.因此 loader 类似于替他构建工具中的任务(tesk),并提供了处理前端构建步骤的强大方法.loader 可以将文件从不同的语言转化成 JavaScript.</p>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p>可以使用 loader 告诉 webpack 加载 css 文件,为此首先安装相对应的 loader\b.<br><code>npm install css-loader -D</code><br><code>npm install ts-loader -D</code></p>\n<pre><code>//webpack.config.js\nmodule.exports = {\nmodule: {\n    rules: [\n    { test: /\\.css$/, use: &apos;css-loader&apos; },\n    { test: /\\.ts$/, use: &apos;ts-loader&apos; }\n    ]\n}\n};\n</code></pre><h3 id=\"使用-loader\"><a href=\"#使用-loader\" class=\"headerlink\" title=\"使用 loader\"></a>使用 loader</h3><p>有三种 使用 loader 的方式:</p>\n<ul>\n<li>配置&gt;在 webpack.config.js文件中指定 lodaer.</li>\n<li>内联&gt;在每个 import 语句中显式指定 loader.</li>\n<li><p>cli&gt;在 shell 命令中指定他们.</p>\n<h4 id=\"配置-configuration\"><a href=\"#配置-configuration\" class=\"headerlink\" title=\"配置[configuration]\"></a>配置[configuration]</h4><p>  module.exports = {<br>  module: {</p>\n<pre><code>rules: [\n{\n    test: /\\.css$/,\n    use: [\n    { loader: &apos;style-loader&apos; },\n    {\n        loader: &apos;css-loader&apos;,\n        options: {\n        modules: true\n        }\n    }\n    ]\n}\n]\n</code></pre><p>  }<br>  };</p>\n<h4 id=\"内联\"><a href=\"#内联\" class=\"headerlink\" title=\"内联\"></a>内联</h4><p>可以在 import 语句或者任何等效于 import 的方式中指定 lodaer.使用 ! 来将资源中的 loader 分开.分开的每个部分都相对于当前目录解析.<br><code>import Styles from &#39;style-loader!css-loader?modules!./styles.css&#39;;</code></p>\n<h4 id=\"cli\"><a href=\"#cli\" class=\"headerlink\" title=\"cli\"></a>cli</h4><p><code>webpack --module-bind jade-loader --module-bind &#39;css=style-loader!css-loader&#39;</code><br>这会对 .jade 文件使用 jade-loader,对 .css 文件使用 style-loader 和 css-loader.</p>\n<h3 id=\"loader特性\"><a href=\"#loader特性\" class=\"headerlink\" title=\"loader特性\"></a>loader特性</h3></li>\n<li>loader 支持链式传输,loader 链中每个 loader,都对前一个 loader 处理后的资源进行转换.<ul>\n<li>loader 可以是同步的,也可以是异步的.</li>\n<li>loader 可以运行在 node.js中,并且能够执行任何可能的操作.</li>\n<li>loader 接受查询参数.</li>\n<li>loader 能够使用 options 对象进行配置.</li>\n<li>除了使用package,json 常见的 main 属性,还可以将普通的 npm 模块导出为 loader,做法是在 package.json中定义一个 lodaer 字段.</li>\n<li>插件(plugins)可以为 loader 带来更多特性.</li>\n<li>loader 能够产生额外的任意文件.<h2 id=\"插件-暂时跳过\"><a href=\"#插件-暂时跳过\" class=\"headerlink\" title=\"插件(暂时跳过)\"></a>插件(暂时跳过)</h2><h2 id=\"配置-configuration-1\"><a href=\"#配置-configuration-1\" class=\"headerlink\" title=\"配置[configuration]\"></a>配置[configuration]</h2>webpack 的配置文件,是导出一个对象的 JavaScript 文件,此对象由 webpack 根据对象定义的属性进行解析.<br>因为 webpack 是标准的 node.js commonJS 模块,因此可以:</li>\n</ul>\n</li>\n<li>通过 require 导入其他文件.</li>\n<li>通过 require 使用 npm的工具函数.</li>\n<li>使用 JavaScript 控制流表达式.</li>\n<li>对常用值使用常量或者变量.</li>\n<li><p>编写并执行函数来生成部分配置.</p>\n<h3 id=\"基本配置\"><a href=\"#基本配置\" class=\"headerlink\" title=\"基本配置\"></a>基本配置</h3><p>  //webpack.config.js<br>  var path = require(‘path’);<br>  module.exports = {<br>  mode: ‘development’,<br>  entry: ‘./foo.js’,<br>  output: {</p>\n<pre><code>path: path.resolve(__dirname, &apos;dist&apos;),\nfilename: &apos;foo.bundle.js&apos;\n</code></pre><p>  }<br>  };</p>\n<h2 id=\"模块-modules\"><a href=\"#模块-modules\" class=\"headerlink\" title=\"模块(modules)\"></a>模块(modules)</h2><p>在模块化编程中,开发者将程序分解成离散功能块,并称之为模块.</p>\n<h3 id=\"webpack模块\"><a href=\"#webpack模块\" class=\"headerlink\" title=\"webpack模块\"></a>webpack模块</h3></li>\n<li>ES 2015  import 语句</li>\n<li>CommonJ\bS require()语句</li>\n<li>AM\bD define 和 require 语句</li>\n<li>css/sass/less 文件中的@import 语句</li>\n<li>样式或 html 文件中的图片链接</li>\n</ul>\n"},{"title":"BASE64 加密","_content":"# BASE64加密算法\n>所谓Base64，就是说选出64个字符----小写字母a-z、大写字母A-Z、数字0-9、符号\"+\"、\"/\"（再加上作为垫字的\"=\"，实际上是65个字符）----作为一个基本字符集。然后，其他所有符号都转换成这个字符集中的字符。\n\n## 具体步骤\n* 第一步，将每三个字节作为一组，一共是24个二进制位。\n* 第二步，将这24个二进制位分为四组，每个组有6个二进制位。\n* 第三步，在每组前面加两个00，扩展成32个二进制位，即四个字节。\n* 第四步，根据下表，得到扩展后的每个字节的对应符号，这就是Base64的编码值。\n![WX20190513-144448@2x](https://i.loli.net/2019/05/13/5cd9127ce8b0686436.png)\n![img2](https://i.loli.net/2019/05/13/5cd912bbd6a0785141.png)\n### 字节数不足 3\n#### 字节数为 2\n将这二个字节的一共16个二进制位，按照上面的规则，转成三组，最后一组除了前面加两个0以外，后面也要加两个0。这样得到一个三位的Base64编码，再在末尾补上一个\"=\"号。\n\n比如，\"Ma\"这个字符串是两个字节，可以转化成三组00010011、00010110、00010000以后，对应Base64值分别为T、W、E，再补上一个\"=\"号，因此\"Ma\"的Base64编码就是TWE=。\n#### 字节数为 1\n一个字节的情况：将这一个字节的8个二进制位，按照上面的规则转成二组，最后一组除了前面加二个0以外，后面再加4个0。这样得到一个二位的Base64编码，再在末尾补上两个\"=\"号。\n\n比如，\"M\"这个字母是一个字节，可以转化为二组00010011、00010000，对应的Base64值分别为T、Q，再补上二个\"=\"号，因此\"M\"的Base64编码就是TQ==。\n### 汉字如何转化为 base64 编码\n汉字本身可以有多种编码，比如gb2312、utf-8、gbk等等，每一种编码的Base64对应值都不一样。下面的例子以utf-8为例。\n\n首先，\"严\"的utf-8编码为E4B8A5，写成二进制就是三字节的\"11100100 10111000 10100101\"。将这个24位的二进制字符串，按照第3节中的规则，转换成四组一共32位的二进制值\"00111001 00001011 00100010 00100101\"，相应的十进制数为57、11、34、37，它们对应的Base64值就为5、L、i、l。\n\n所以，汉字\"严\"（utf-8编码）的Base64值就是5Lil。\n\n","source":"_posts/2019.05.13.encrypt.md","raw":"---\ntitle: BASE64 加密\ntags: [加密]\ncategories: 随笔\n---\n# BASE64加密算法\n>所谓Base64，就是说选出64个字符----小写字母a-z、大写字母A-Z、数字0-9、符号\"+\"、\"/\"（再加上作为垫字的\"=\"，实际上是65个字符）----作为一个基本字符集。然后，其他所有符号都转换成这个字符集中的字符。\n\n## 具体步骤\n* 第一步，将每三个字节作为一组，一共是24个二进制位。\n* 第二步，将这24个二进制位分为四组，每个组有6个二进制位。\n* 第三步，在每组前面加两个00，扩展成32个二进制位，即四个字节。\n* 第四步，根据下表，得到扩展后的每个字节的对应符号，这就是Base64的编码值。\n![WX20190513-144448@2x](https://i.loli.net/2019/05/13/5cd9127ce8b0686436.png)\n![img2](https://i.loli.net/2019/05/13/5cd912bbd6a0785141.png)\n### 字节数不足 3\n#### 字节数为 2\n将这二个字节的一共16个二进制位，按照上面的规则，转成三组，最后一组除了前面加两个0以外，后面也要加两个0。这样得到一个三位的Base64编码，再在末尾补上一个\"=\"号。\n\n比如，\"Ma\"这个字符串是两个字节，可以转化成三组00010011、00010110、00010000以后，对应Base64值分别为T、W、E，再补上一个\"=\"号，因此\"Ma\"的Base64编码就是TWE=。\n#### 字节数为 1\n一个字节的情况：将这一个字节的8个二进制位，按照上面的规则转成二组，最后一组除了前面加二个0以外，后面再加4个0。这样得到一个二位的Base64编码，再在末尾补上两个\"=\"号。\n\n比如，\"M\"这个字母是一个字节，可以转化为二组00010011、00010000，对应的Base64值分别为T、Q，再补上二个\"=\"号，因此\"M\"的Base64编码就是TQ==。\n### 汉字如何转化为 base64 编码\n汉字本身可以有多种编码，比如gb2312、utf-8、gbk等等，每一种编码的Base64对应值都不一样。下面的例子以utf-8为例。\n\n首先，\"严\"的utf-8编码为E4B8A5，写成二进制就是三字节的\"11100100 10111000 10100101\"。将这个24位的二进制字符串，按照第3节中的规则，转换成四组一共32位的二进制值\"00111001 00001011 00100010 00100101\"，相应的十进制数为57、11、34、37，它们对应的Base64值就为5、L、i、l。\n\n所以，汉字\"严\"（utf-8编码）的Base64值就是5Lil。\n\n","slug":"2019.05.13.encrypt","published":1,"date":"2019-05-13T03:11:46.184Z","updated":"2019-05-13T06:48:23.834Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziiq6000xrh9z8g6l0odd","content":"<h1 id=\"BASE64加密算法\"><a href=\"#BASE64加密算法\" class=\"headerlink\" title=\"BASE64加密算法\"></a>BASE64加密算法</h1><blockquote>\n<p>所谓Base64，就是说选出64个字符—-小写字母a-z、大写字母A-Z、数字0-9、符号”+”、”/“（再加上作为垫字的”=”，实际上是65个字符）—-作为一个基本字符集。然后，其他所有符号都转换成这个字符集中的字符。</p>\n</blockquote>\n<h2 id=\"具体步骤\"><a href=\"#具体步骤\" class=\"headerlink\" title=\"具体步骤\"></a>具体步骤</h2><ul>\n<li>第一步，将每三个字节作为一组，一共是24个二进制位。</li>\n<li>第二步，将这24个二进制位分为四组，每个组有6个二进制位。</li>\n<li>第三步，在每组前面加两个00，扩展成32个二进制位，即四个字节。</li>\n<li>第四步，根据下表，得到扩展后的每个字节的对应符号，这就是Base64的编码值。<br><img src=\"https://i.loli.net/2019/05/13/5cd9127ce8b0686436.png\" alt=\"WX20190513-144448@2x\"><br><img src=\"https://i.loli.net/2019/05/13/5cd912bbd6a0785141.png\" alt=\"img2\"><h3 id=\"字节数不足-3\"><a href=\"#字节数不足-3\" class=\"headerlink\" title=\"字节数不足 3\"></a>字节数不足 3</h3><h4 id=\"字节数为-2\"><a href=\"#字节数为-2\" class=\"headerlink\" title=\"字节数为 2\"></a>字节数为 2</h4>将这二个字节的一共16个二进制位，按照上面的规则，转成三组，最后一组除了前面加两个0以外，后面也要加两个0。这样得到一个三位的Base64编码，再在末尾补上一个”=”号。</li>\n</ul>\n<p>比如，”Ma”这个字符串是两个字节，可以转化成三组00010011、00010110、00010000以后，对应Base64值分别为T、W、E，再补上一个”=”号，因此”Ma”的Base64编码就是TWE=。</p>\n<h4 id=\"字节数为-1\"><a href=\"#字节数为-1\" class=\"headerlink\" title=\"字节数为 1\"></a>字节数为 1</h4><p>一个字节的情况：将这一个字节的8个二进制位，按照上面的规则转成二组，最后一组除了前面加二个0以外，后面再加4个0。这样得到一个二位的Base64编码，再在末尾补上两个”=”号。</p>\n<p>比如，”M”这个字母是一个字节，可以转化为二组00010011、00010000，对应的Base64值分别为T、Q，再补上二个”=”号，因此”M”的Base64编码就是TQ==。</p>\n<h3 id=\"汉字如何转化为-base64-编码\"><a href=\"#汉字如何转化为-base64-编码\" class=\"headerlink\" title=\"汉字如何转化为 base64 编码\"></a>汉字如何转化为 base64 编码</h3><p>汉字本身可以有多种编码，比如gb2312、utf-8、gbk等等，每一种编码的Base64对应值都不一样。下面的例子以utf-8为例。</p>\n<p>首先，”严”的utf-8编码为E4B8A5，写成二进制就是三字节的”11100100 10111000 10100101”。将这个24位的二进制字符串，按照第3节中的规则，转换成四组一共32位的二进制值”00111001 00001011 00100010 00100101”，相应的十进制数为57、11、34、37，它们对应的Base64值就为5、L、i、l。</p>\n<p>所以，汉字”严”（utf-8编码）的Base64值就是5Lil。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"BASE64加密算法\"><a href=\"#BASE64加密算法\" class=\"headerlink\" title=\"BASE64加密算法\"></a>BASE64加密算法</h1><blockquote>\n<p>所谓Base64，就是说选出64个字符—-小写字母a-z、大写字母A-Z、数字0-9、符号”+”、”/“（再加上作为垫字的”=”，实际上是65个字符）—-作为一个基本字符集。然后，其他所有符号都转换成这个字符集中的字符。</p>\n</blockquote>\n<h2 id=\"具体步骤\"><a href=\"#具体步骤\" class=\"headerlink\" title=\"具体步骤\"></a>具体步骤</h2><ul>\n<li>第一步，将每三个字节作为一组，一共是24个二进制位。</li>\n<li>第二步，将这24个二进制位分为四组，每个组有6个二进制位。</li>\n<li>第三步，在每组前面加两个00，扩展成32个二进制位，即四个字节。</li>\n<li>第四步，根据下表，得到扩展后的每个字节的对应符号，这就是Base64的编码值。<br><img src=\"https://i.loli.net/2019/05/13/5cd9127ce8b0686436.png\" alt=\"WX20190513-144448@2x\"><br><img src=\"https://i.loli.net/2019/05/13/5cd912bbd6a0785141.png\" alt=\"img2\"><h3 id=\"字节数不足-3\"><a href=\"#字节数不足-3\" class=\"headerlink\" title=\"字节数不足 3\"></a>字节数不足 3</h3><h4 id=\"字节数为-2\"><a href=\"#字节数为-2\" class=\"headerlink\" title=\"字节数为 2\"></a>字节数为 2</h4>将这二个字节的一共16个二进制位，按照上面的规则，转成三组，最后一组除了前面加两个0以外，后面也要加两个0。这样得到一个三位的Base64编码，再在末尾补上一个”=”号。</li>\n</ul>\n<p>比如，”Ma”这个字符串是两个字节，可以转化成三组00010011、00010110、00010000以后，对应Base64值分别为T、W、E，再补上一个”=”号，因此”Ma”的Base64编码就是TWE=。</p>\n<h4 id=\"字节数为-1\"><a href=\"#字节数为-1\" class=\"headerlink\" title=\"字节数为 1\"></a>字节数为 1</h4><p>一个字节的情况：将这一个字节的8个二进制位，按照上面的规则转成二组，最后一组除了前面加二个0以外，后面再加4个0。这样得到一个二位的Base64编码，再在末尾补上两个”=”号。</p>\n<p>比如，”M”这个字母是一个字节，可以转化为二组00010011、00010000，对应的Base64值分别为T、Q，再补上二个”=”号，因此”M”的Base64编码就是TQ==。</p>\n<h3 id=\"汉字如何转化为-base64-编码\"><a href=\"#汉字如何转化为-base64-编码\" class=\"headerlink\" title=\"汉字如何转化为 base64 编码\"></a>汉字如何转化为 base64 编码</h3><p>汉字本身可以有多种编码，比如gb2312、utf-8、gbk等等，每一种编码的Base64对应值都不一样。下面的例子以utf-8为例。</p>\n<p>首先，”严”的utf-8编码为E4B8A5，写成二进制就是三字节的”11100100 10111000 10100101”。将这个24位的二进制字符串，按照第3节中的规则，转换成四组一共32位的二进制值”00111001 00001011 00100010 00100101”，相应的十进制数为57、11、34、37，它们对应的Base64值就为5、L、i、l。</p>\n<p>所以，汉字”严”（utf-8编码）的Base64值就是5Lil。</p>\n"},{"title":"关于电信的 CN2","_content":"\n# 什么是电信 CN2 网络\n\nCN2全称为中国电信下一代承载网，英文Chinatelecom Next Carrier Network，缩写为CNCN，进一步缩写为CN2。\n\n\n# CN2 线路的优势在哪里\nCN2作为“精品网络项目”被提出来，其技术构造是远远领先于电信原有网络的，极为先进的QOS保证网络的畅通性，具体可参考资料。当然除了先进的技术，其昂贵的价格和对大量网络资源的独占性也是重要的原因，资料。普通家庭宽带用户用不上CN2线路，哪怕加几倍的钱也不一定能用上，而接入CN2线路机房的VPS，价格卖得比其他线路的高很多。用户少，服务器少，分配的独享资源多，这样就能保证绝大多数情况下CN2线路的流畅性。\n\n如果想要寻找接入CN2线路的国外VPS提供商，建议使用“Next Carrier Network” 或者CN2这个关键词搜索即可。\n# 三种承载网络的对比\n提到CN2，我们还不得不提到老一代的163骨干网，而CN2本身又分为两种类型，所以，我们在这里把这三者逐一对比一下：\n* 普通163: 就是电信用户最经常遇到的电信线路，等级最低，省级/出国/国际骨干节点都以202.97开头，全程没有59.43开头的CN2节点。在出国线路上表现为拥堵，丢包率高。\n* CN2 GT: CN2里属于Global Transit的产品(又名GIS-Global Internet Service)，在CN2里等级低，省级/出国节点为202.97开头，国际骨干节点有2～4个59.43开头的CN2节点。在出国线路上拥堵程度一般，相对于163骨干网的稍强，相比CN2 GIA，性价比也较高。\n* CN2 GIA: CN2里属于Global Internet Access的产品，等级最高，省级/出国/国际骨干节点都以59.43开头，全程没有202.97开头的节点。在出国线路上表现最好，很少拥堵，理论上速度最快最稳定，当然，价格也相对CN2 GT偏高。\n# 如何判断线路类型\n通常情况下，我们使用mtr或者traceroute，通过跟踪网络包的路由节点，来判断具体的网络承载类型，下面，我们来举几个栗子：\n* 整个路由节点信息中，全程没有59.43开头的CN2节点，并且一些省级或者出口的节点是以202.97开头的，因此我们可以判断承载网络就是163普通线路。\n* 在路由节点中，出现了59.43开头的节点，在一些出口节点上，仍然通过了202.97开头的节点，可以判断为CN2 GT线路。\n* 路由的跳数相对较少，并且经过了59.43..开头的节点，而并没有经过202.97开头的节点，此承载网络类型为CN2 GIA线路。\n# CN2 VPS 是否一定比普通 163 承载网络的 VPS 更快呢?\nCN2决定了网络质量会优于普通163承载网络，但也不一定，除了承载网络之外，机房的地理位置也很重要。\n# 单向 CN2 与双向 CN2 \nCN2除了线路分为两种类型，购买时，还得注意CN2是双向还是单向。所为双向，顾名思义，去程的路由节点和回程的路由节点，都使用了CN2的承载网络。而单向CN2，一般都是去程CN2，回程普通电信线路，在速度上，会略逊于双向CN2。\n","source":"_posts/2019.05.14.cn2.md","raw":"---\ntitle: 关于电信的 CN2\ntags: [翻墙]\ncategories: 随笔\n---\n\n# 什么是电信 CN2 网络\n\nCN2全称为中国电信下一代承载网，英文Chinatelecom Next Carrier Network，缩写为CNCN，进一步缩写为CN2。\n\n\n# CN2 线路的优势在哪里\nCN2作为“精品网络项目”被提出来，其技术构造是远远领先于电信原有网络的，极为先进的QOS保证网络的畅通性，具体可参考资料。当然除了先进的技术，其昂贵的价格和对大量网络资源的独占性也是重要的原因，资料。普通家庭宽带用户用不上CN2线路，哪怕加几倍的钱也不一定能用上，而接入CN2线路机房的VPS，价格卖得比其他线路的高很多。用户少，服务器少，分配的独享资源多，这样就能保证绝大多数情况下CN2线路的流畅性。\n\n如果想要寻找接入CN2线路的国外VPS提供商，建议使用“Next Carrier Network” 或者CN2这个关键词搜索即可。\n# 三种承载网络的对比\n提到CN2，我们还不得不提到老一代的163骨干网，而CN2本身又分为两种类型，所以，我们在这里把这三者逐一对比一下：\n* 普通163: 就是电信用户最经常遇到的电信线路，等级最低，省级/出国/国际骨干节点都以202.97开头，全程没有59.43开头的CN2节点。在出国线路上表现为拥堵，丢包率高。\n* CN2 GT: CN2里属于Global Transit的产品(又名GIS-Global Internet Service)，在CN2里等级低，省级/出国节点为202.97开头，国际骨干节点有2～4个59.43开头的CN2节点。在出国线路上拥堵程度一般，相对于163骨干网的稍强，相比CN2 GIA，性价比也较高。\n* CN2 GIA: CN2里属于Global Internet Access的产品，等级最高，省级/出国/国际骨干节点都以59.43开头，全程没有202.97开头的节点。在出国线路上表现最好，很少拥堵，理论上速度最快最稳定，当然，价格也相对CN2 GT偏高。\n# 如何判断线路类型\n通常情况下，我们使用mtr或者traceroute，通过跟踪网络包的路由节点，来判断具体的网络承载类型，下面，我们来举几个栗子：\n* 整个路由节点信息中，全程没有59.43开头的CN2节点，并且一些省级或者出口的节点是以202.97开头的，因此我们可以判断承载网络就是163普通线路。\n* 在路由节点中，出现了59.43开头的节点，在一些出口节点上，仍然通过了202.97开头的节点，可以判断为CN2 GT线路。\n* 路由的跳数相对较少，并且经过了59.43..开头的节点，而并没有经过202.97开头的节点，此承载网络类型为CN2 GIA线路。\n# CN2 VPS 是否一定比普通 163 承载网络的 VPS 更快呢?\nCN2决定了网络质量会优于普通163承载网络，但也不一定，除了承载网络之外，机房的地理位置也很重要。\n# 单向 CN2 与双向 CN2 \nCN2除了线路分为两种类型，购买时，还得注意CN2是双向还是单向。所为双向，顾名思义，去程的路由节点和回程的路由节点，都使用了CN2的承载网络。而单向CN2，一般都是去程CN2，回程普通电信线路，在速度上，会略逊于双向CN2。\n","slug":"2019.05.14.cn2","published":1,"date":"2019-05-14T09:37:46.670Z","updated":"2019-05-15T01:39:53.243Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziiq6000yrh9z465v62tu","content":"<h1 id=\"什么是电信-CN2-网络\"><a href=\"#什么是电信-CN2-网络\" class=\"headerlink\" title=\"什么是电信 CN2 网络\"></a>什么是电信 CN2 网络</h1><p>CN2全称为中国电信下一代承载网，英文Chinatelecom Next Carrier Network，缩写为CNCN，进一步缩写为CN2。</p>\n<h1 id=\"CN2-线路的优势在哪里\"><a href=\"#CN2-线路的优势在哪里\" class=\"headerlink\" title=\"CN2 线路的优势在哪里\"></a>CN2 线路的优势在哪里</h1><p>CN2作为“精品网络项目”被提出来，其技术构造是远远领先于电信原有网络的，极为先进的QOS保证网络的畅通性，具体可参考资料。当然除了先进的技术，其昂贵的价格和对大量网络资源的独占性也是重要的原因，资料。普通家庭宽带用户用不上CN2线路，哪怕加几倍的钱也不一定能用上，而接入CN2线路机房的VPS，价格卖得比其他线路的高很多。用户少，服务器少，分配的独享资源多，这样就能保证绝大多数情况下CN2线路的流畅性。</p>\n<p>如果想要寻找接入CN2线路的国外VPS提供商，建议使用“Next Carrier Network” 或者CN2这个关键词搜索即可。</p>\n<h1 id=\"三种承载网络的对比\"><a href=\"#三种承载网络的对比\" class=\"headerlink\" title=\"三种承载网络的对比\"></a>三种承载网络的对比</h1><p>提到CN2，我们还不得不提到老一代的163骨干网，而CN2本身又分为两种类型，所以，我们在这里把这三者逐一对比一下：</p>\n<ul>\n<li>普通163: 就是电信用户最经常遇到的电信线路，等级最低，省级/出国/国际骨干节点都以202.97开头，全程没有59.43开头的CN2节点。在出国线路上表现为拥堵，丢包率高。</li>\n<li>CN2 GT: CN2里属于Global Transit的产品(又名GIS-Global Internet Service)，在CN2里等级低，省级/出国节点为202.97开头，国际骨干节点有2～4个59.43开头的CN2节点。在出国线路上拥堵程度一般，相对于163骨干网的稍强，相比CN2 GIA，性价比也较高。</li>\n<li>CN2 GIA: CN2里属于Global Internet Access的产品，等级最高，省级/出国/国际骨干节点都以59.43开头，全程没有202.97开头的节点。在出国线路上表现最好，很少拥堵，理论上速度最快最稳定，当然，价格也相对CN2 GT偏高。<h1 id=\"如何判断线路类型\"><a href=\"#如何判断线路类型\" class=\"headerlink\" title=\"如何判断线路类型\"></a>如何判断线路类型</h1>通常情况下，我们使用mtr或者traceroute，通过跟踪网络包的路由节点，来判断具体的网络承载类型，下面，我们来举几个栗子：</li>\n<li>整个路由节点信息中，全程没有59.43开头的CN2节点，并且一些省级或者出口的节点是以202.97开头的，因此我们可以判断承载网络就是163普通线路。</li>\n<li>在路由节点中，出现了59.43开头的节点，在一些出口节点上，仍然通过了202.97开头的节点，可以判断为CN2 GT线路。</li>\n<li>路由的跳数相对较少，并且经过了59.43..开头的节点，而并没有经过202.97开头的节点，此承载网络类型为CN2 GIA线路。<h1 id=\"CN2-VPS-是否一定比普通-163-承载网络的-VPS-更快呢\"><a href=\"#CN2-VPS-是否一定比普通-163-承载网络的-VPS-更快呢\" class=\"headerlink\" title=\"CN2 VPS 是否一定比普通 163 承载网络的 VPS 更快呢?\"></a>CN2 VPS 是否一定比普通 163 承载网络的 VPS 更快呢?</h1>CN2决定了网络质量会优于普通163承载网络，但也不一定，除了承载网络之外，机房的地理位置也很重要。<h1 id=\"单向-CN2-与双向-CN2\"><a href=\"#单向-CN2-与双向-CN2\" class=\"headerlink\" title=\"单向 CN2 与双向 CN2\"></a>单向 CN2 与双向 CN2</h1>CN2除了线路分为两种类型，购买时，还得注意CN2是双向还是单向。所为双向，顾名思义，去程的路由节点和回程的路由节点，都使用了CN2的承载网络。而单向CN2，一般都是去程CN2，回程普通电信线路，在速度上，会略逊于双向CN2。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"什么是电信-CN2-网络\"><a href=\"#什么是电信-CN2-网络\" class=\"headerlink\" title=\"什么是电信 CN2 网络\"></a>什么是电信 CN2 网络</h1><p>CN2全称为中国电信下一代承载网，英文Chinatelecom Next Carrier Network，缩写为CNCN，进一步缩写为CN2。</p>\n<h1 id=\"CN2-线路的优势在哪里\"><a href=\"#CN2-线路的优势在哪里\" class=\"headerlink\" title=\"CN2 线路的优势在哪里\"></a>CN2 线路的优势在哪里</h1><p>CN2作为“精品网络项目”被提出来，其技术构造是远远领先于电信原有网络的，极为先进的QOS保证网络的畅通性，具体可参考资料。当然除了先进的技术，其昂贵的价格和对大量网络资源的独占性也是重要的原因，资料。普通家庭宽带用户用不上CN2线路，哪怕加几倍的钱也不一定能用上，而接入CN2线路机房的VPS，价格卖得比其他线路的高很多。用户少，服务器少，分配的独享资源多，这样就能保证绝大多数情况下CN2线路的流畅性。</p>\n<p>如果想要寻找接入CN2线路的国外VPS提供商，建议使用“Next Carrier Network” 或者CN2这个关键词搜索即可。</p>\n<h1 id=\"三种承载网络的对比\"><a href=\"#三种承载网络的对比\" class=\"headerlink\" title=\"三种承载网络的对比\"></a>三种承载网络的对比</h1><p>提到CN2，我们还不得不提到老一代的163骨干网，而CN2本身又分为两种类型，所以，我们在这里把这三者逐一对比一下：</p>\n<ul>\n<li>普通163: 就是电信用户最经常遇到的电信线路，等级最低，省级/出国/国际骨干节点都以202.97开头，全程没有59.43开头的CN2节点。在出国线路上表现为拥堵，丢包率高。</li>\n<li>CN2 GT: CN2里属于Global Transit的产品(又名GIS-Global Internet Service)，在CN2里等级低，省级/出国节点为202.97开头，国际骨干节点有2～4个59.43开头的CN2节点。在出国线路上拥堵程度一般，相对于163骨干网的稍强，相比CN2 GIA，性价比也较高。</li>\n<li>CN2 GIA: CN2里属于Global Internet Access的产品，等级最高，省级/出国/国际骨干节点都以59.43开头，全程没有202.97开头的节点。在出国线路上表现最好，很少拥堵，理论上速度最快最稳定，当然，价格也相对CN2 GT偏高。<h1 id=\"如何判断线路类型\"><a href=\"#如何判断线路类型\" class=\"headerlink\" title=\"如何判断线路类型\"></a>如何判断线路类型</h1>通常情况下，我们使用mtr或者traceroute，通过跟踪网络包的路由节点，来判断具体的网络承载类型，下面，我们来举几个栗子：</li>\n<li>整个路由节点信息中，全程没有59.43开头的CN2节点，并且一些省级或者出口的节点是以202.97开头的，因此我们可以判断承载网络就是163普通线路。</li>\n<li>在路由节点中，出现了59.43开头的节点，在一些出口节点上，仍然通过了202.97开头的节点，可以判断为CN2 GT线路。</li>\n<li>路由的跳数相对较少，并且经过了59.43..开头的节点，而并没有经过202.97开头的节点，此承载网络类型为CN2 GIA线路。<h1 id=\"CN2-VPS-是否一定比普通-163-承载网络的-VPS-更快呢\"><a href=\"#CN2-VPS-是否一定比普通-163-承载网络的-VPS-更快呢\" class=\"headerlink\" title=\"CN2 VPS 是否一定比普通 163 承载网络的 VPS 更快呢?\"></a>CN2 VPS 是否一定比普通 163 承载网络的 VPS 更快呢?</h1>CN2决定了网络质量会优于普通163承载网络，但也不一定，除了承载网络之外，机房的地理位置也很重要。<h1 id=\"单向-CN2-与双向-CN2\"><a href=\"#单向-CN2-与双向-CN2\" class=\"headerlink\" title=\"单向 CN2 与双向 CN2\"></a>单向 CN2 与双向 CN2</h1>CN2除了线路分为两种类型，购买时，还得注意CN2是双向还是单向。所为双向，顾名思义，去程的路由节点和回程的路由节点，都使用了CN2的承载网络。而单向CN2，一般都是去程CN2，回程普通电信线路，在速度上，会略逊于双向CN2。</li>\n</ul>\n"},{"title":"JavaScript 中的 sort()","_content":"\n# sort()\n\n> sort() 方法用原地算法对数组的元素进行排序，并返回数组。排序算法现在是稳定的。默认排序顺序是根据字符串 Unicode 码点。\n\n样例:\n```js\n    var months = ['March', 'Jan', 'Feb', 'Dec'];\n    months.sort();\n    console.log(months);\n    // expected output: Array [\"Dec\", \"Feb\", \"Jan\", \"March\"]\n\n    var array1 = [1, 30, 4, 21, 100000];\n    array1.sort();\n    console.log(array1);\n    // expected output: Array [1, 100000, 21, 30, 4]\n\n```\n## 语法\n\n    arr.sort([compareFunction])\n\n---\n\n### 参数\n\n#### compareFunction(firstEl,secondEl) (可选)\n\n##### fisrtEl\n\n第一个要比较的元素\n\n##### secondEl\n\n第二个要比较的元素\n\n### 返回值\n\n返回排序以后的算法,由于采用原地算法,不进行复制.\n\n## 描述\n\n如果没有指明 compareFunction ，那么元素会按照转换为的字符串的诸个字符的 Unicode 位点进行排序。例如 \"Banana\" 会被排列到 \"cherry\" 之前。当数字按由小到大排序时，9 出现在 80 之前，但因为（没有指明 compareFunction），比较的数字会先被转换为字符串，所以在 Unicode 顺序上 \"80\" 要比 \"9\" 要靠前。\n\n如果指明了 compareFunction ，那么数组会按照调用该函数的返回值排序。即 a 和 b 是两个将要被比较的元素：\n\n- 如果 compareFunction(a, b) 小于 0 ，那么 a 会被排列到 b 之前；\n- 如果 compareFunction(a, b) 等于 0 ， a 和 b 的相对位置不变。备注： ECMAScript 标准并不保证这一行为，而且也不是所有浏览器都会遵守（例如 Mozilla 在 2003 年之前的版本）；\n- 如果 compareFunction(a, b) 大于 0 ， b 会被排列到 a 之前。\n- compareFunction(a, b) 必须总是对相同的输入返回相同的比较结果，否则排序的结果将是不确定的。\n```js\n\n        function compare(a, b) {\n        if (a < b ) {           // 按某种排序标准进行比较, a 小于 b\n            return -1;\n        }\n        if (a > b ) {\n            return 1;\n        }\n        // a must be equal to b\n        return 0;\n        }\n```\n## 使用\n\n###sort()方法可以使用函数表达式方便地表示\n```js\n    var numbers = [4, 2, 5, 1, 3];\n    numbers.sort((a, b) => a - b);\n    console.log(numbers);\n\n    // [1, 2, 3, 4, 5]\n```\n###对象可以按照属性排序\n```js\n    var items = [\n    { name: 'Edward', value: 21 },\n    { name: 'Sharpe', value: 37 },\n    { name: 'And', value: 45 },\n    { name: 'The', value: -12 },\n    { name: 'Magnetic' },\n    { name: 'Zeros', value: 37 }\n    ];\n\n    // sort by value\n    items.sort(function (a, b) {\n    return (a.value - b.value)\n    });\n\n    // sort by name\n    items.sort(function(a, b) {\n    var nameA = a.name.toUpperCase(); // ignore upper and lowercase\n    var nameB = b.name.toUpperCase(); // ignore upper and lowercase\n    if (nameA < nameB) {\n        return -1;\n    }\n    if (nameA > nameB) {\n        return 1;\n    }\n\n\n    // names must be equal\n\n    return 0;\n    });\n```\n###按照指定的顺序排序\n```js\n    sortList:[\"事业编制\",\"企业编制\",\"二批企聘\"];\n    list:[{type:\"企业编制\",number:12344}\n    ,{type:\"二批企聘\",number:52344},\n    {type:\"事业编制\",number:8567244}]\n    list.sort((a,b)=>{\n        return sortList.indexOf(a.type)-sortList.indexOf(b.type)\n    })\n    // [{type:\"事业编制\",number:8567244},{type:\"企业编制\",number:12344},{type:\"二批企聘\",number:52344}]\n\n```\n\n","source":"_posts/2019.05.24.sort.md","raw":"---\ntitle: JavaScript 中的 sort()\ntags: [JavaScript]\ncategories: 随笔\n---\n\n# sort()\n\n> sort() 方法用原地算法对数组的元素进行排序，并返回数组。排序算法现在是稳定的。默认排序顺序是根据字符串 Unicode 码点。\n\n样例:\n```js\n    var months = ['March', 'Jan', 'Feb', 'Dec'];\n    months.sort();\n    console.log(months);\n    // expected output: Array [\"Dec\", \"Feb\", \"Jan\", \"March\"]\n\n    var array1 = [1, 30, 4, 21, 100000];\n    array1.sort();\n    console.log(array1);\n    // expected output: Array [1, 100000, 21, 30, 4]\n\n```\n## 语法\n\n    arr.sort([compareFunction])\n\n---\n\n### 参数\n\n#### compareFunction(firstEl,secondEl) (可选)\n\n##### fisrtEl\n\n第一个要比较的元素\n\n##### secondEl\n\n第二个要比较的元素\n\n### 返回值\n\n返回排序以后的算法,由于采用原地算法,不进行复制.\n\n## 描述\n\n如果没有指明 compareFunction ，那么元素会按照转换为的字符串的诸个字符的 Unicode 位点进行排序。例如 \"Banana\" 会被排列到 \"cherry\" 之前。当数字按由小到大排序时，9 出现在 80 之前，但因为（没有指明 compareFunction），比较的数字会先被转换为字符串，所以在 Unicode 顺序上 \"80\" 要比 \"9\" 要靠前。\n\n如果指明了 compareFunction ，那么数组会按照调用该函数的返回值排序。即 a 和 b 是两个将要被比较的元素：\n\n- 如果 compareFunction(a, b) 小于 0 ，那么 a 会被排列到 b 之前；\n- 如果 compareFunction(a, b) 等于 0 ， a 和 b 的相对位置不变。备注： ECMAScript 标准并不保证这一行为，而且也不是所有浏览器都会遵守（例如 Mozilla 在 2003 年之前的版本）；\n- 如果 compareFunction(a, b) 大于 0 ， b 会被排列到 a 之前。\n- compareFunction(a, b) 必须总是对相同的输入返回相同的比较结果，否则排序的结果将是不确定的。\n```js\n\n        function compare(a, b) {\n        if (a < b ) {           // 按某种排序标准进行比较, a 小于 b\n            return -1;\n        }\n        if (a > b ) {\n            return 1;\n        }\n        // a must be equal to b\n        return 0;\n        }\n```\n## 使用\n\n###sort()方法可以使用函数表达式方便地表示\n```js\n    var numbers = [4, 2, 5, 1, 3];\n    numbers.sort((a, b) => a - b);\n    console.log(numbers);\n\n    // [1, 2, 3, 4, 5]\n```\n###对象可以按照属性排序\n```js\n    var items = [\n    { name: 'Edward', value: 21 },\n    { name: 'Sharpe', value: 37 },\n    { name: 'And', value: 45 },\n    { name: 'The', value: -12 },\n    { name: 'Magnetic' },\n    { name: 'Zeros', value: 37 }\n    ];\n\n    // sort by value\n    items.sort(function (a, b) {\n    return (a.value - b.value)\n    });\n\n    // sort by name\n    items.sort(function(a, b) {\n    var nameA = a.name.toUpperCase(); // ignore upper and lowercase\n    var nameB = b.name.toUpperCase(); // ignore upper and lowercase\n    if (nameA < nameB) {\n        return -1;\n    }\n    if (nameA > nameB) {\n        return 1;\n    }\n\n\n    // names must be equal\n\n    return 0;\n    });\n```\n###按照指定的顺序排序\n```js\n    sortList:[\"事业编制\",\"企业编制\",\"二批企聘\"];\n    list:[{type:\"企业编制\",number:12344}\n    ,{type:\"二批企聘\",number:52344},\n    {type:\"事业编制\",number:8567244}]\n    list.sort((a,b)=>{\n        return sortList.indexOf(a.type)-sortList.indexOf(b.type)\n    })\n    // [{type:\"事业编制\",number:8567244},{type:\"企业编制\",number:12344},{type:\"二批企聘\",number:52344}]\n\n```\n\n","slug":"2019.05.24.sort","published":1,"date":"2019-05-24T14:49:38.730Z","updated":"2019-08-30T03:42:28.345Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziiq7000zrh9zfqgw9oio","content":"<h1 id=\"sort\"><a href=\"#sort\" class=\"headerlink\" title=\"sort()\"></a>sort()</h1><blockquote>\n<p>sort() 方法用原地算法对数组的元素进行排序，并返回数组。排序算法现在是稳定的。默认排序顺序是根据字符串 Unicode 码点。</p>\n</blockquote>\n<p>样例:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> months = [<span class=\"string\">'March'</span>, <span class=\"string\">'Jan'</span>, <span class=\"string\">'Feb'</span>, <span class=\"string\">'Dec'</span>];</span><br><span class=\"line\">months.sort();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(months);</span><br><span class=\"line\"><span class=\"comment\">// expected output: Array [\"Dec\", \"Feb\", \"Jan\", \"March\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> array1 = [<span class=\"number\">1</span>, <span class=\"number\">30</span>, <span class=\"number\">4</span>, <span class=\"number\">21</span>, <span class=\"number\">100000</span>];</span><br><span class=\"line\">array1.sort();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array1);</span><br><span class=\"line\"><span class=\"comment\">// expected output: Array [1, 100000, 21, 30, 4]</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><pre><code>arr.sort([compareFunction])\n</code></pre><hr>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><h4 id=\"compareFunction-firstEl-secondEl-可选\"><a href=\"#compareFunction-firstEl-secondEl-可选\" class=\"headerlink\" title=\"compareFunction(firstEl,secondEl) (可选)\"></a>compareFunction(firstEl,secondEl) (可选)</h4><h5 id=\"fisrtEl\"><a href=\"#fisrtEl\" class=\"headerlink\" title=\"fisrtEl\"></a>fisrtEl</h5><p>第一个要比较的元素</p>\n<h5 id=\"secondEl\"><a href=\"#secondEl\" class=\"headerlink\" title=\"secondEl\"></a>secondEl</h5><p>第二个要比较的元素</p>\n<h3 id=\"返回值\"><a href=\"#返回值\" class=\"headerlink\" title=\"返回值\"></a>返回值</h3><p>返回排序以后的算法,由于采用原地算法,不进行复制.</p>\n<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><p>如果没有指明 compareFunction ，那么元素会按照转换为的字符串的诸个字符的 Unicode 位点进行排序。例如 “Banana” 会被排列到 “cherry” 之前。当数字按由小到大排序时，9 出现在 80 之前，但因为（没有指明 compareFunction），比较的数字会先被转换为字符串，所以在 Unicode 顺序上 “80” 要比 “9” 要靠前。</p>\n<p>如果指明了 compareFunction ，那么数组会按照调用该函数的返回值排序。即 a 和 b 是两个将要被比较的元素：</p>\n<ul>\n<li>如果 compareFunction(a, b) 小于 0 ，那么 a 会被排列到 b 之前；</li>\n<li>如果 compareFunction(a, b) 等于 0 ， a 和 b 的相对位置不变。备注： ECMAScript 标准并不保证这一行为，而且也不是所有浏览器都会遵守（例如 Mozilla 在 2003 年之前的版本）；</li>\n<li>如果 compareFunction(a, b) 大于 0 ， b 会被排列到 a 之前。</li>\n<li>compareFunction(a, b) 必须总是对相同的输入返回相同的比较结果，否则排序的结果将是不确定的。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compare</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (a &lt; b ) &#123;           <span class=\"comment\">// 按某种排序标准进行比较, a 小于 b</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (a &gt; b ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// a must be equal to b</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2></li>\n</ul>\n<p>###sort()方法可以使用函数表达式方便地表示<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> numbers = [<span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">numbers.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a - b);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(numbers);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure></p>\n<p>###对象可以按照属性排序<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> items = [</span><br><span class=\"line\">&#123; <span class=\"attr\">name</span>: <span class=\"string\">'Edward'</span>, <span class=\"attr\">value</span>: <span class=\"number\">21</span> &#125;,</span><br><span class=\"line\">&#123; <span class=\"attr\">name</span>: <span class=\"string\">'Sharpe'</span>, <span class=\"attr\">value</span>: <span class=\"number\">37</span> &#125;,</span><br><span class=\"line\">&#123; <span class=\"attr\">name</span>: <span class=\"string\">'And'</span>, <span class=\"attr\">value</span>: <span class=\"number\">45</span> &#125;,</span><br><span class=\"line\">&#123; <span class=\"attr\">name</span>: <span class=\"string\">'The'</span>, <span class=\"attr\">value</span>: <span class=\"number\">-12</span> &#125;,</span><br><span class=\"line\">&#123; <span class=\"attr\">name</span>: <span class=\"string\">'Magnetic'</span> &#125;,</span><br><span class=\"line\">&#123; <span class=\"attr\">name</span>: <span class=\"string\">'Zeros'</span>, <span class=\"attr\">value</span>: <span class=\"number\">37</span> &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// sort by value</span></span><br><span class=\"line\">items.sort(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> (a.value - b.value)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// sort by name</span></span><br><span class=\"line\">items.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> nameA = a.name.toUpperCase(); <span class=\"comment\">// ignore upper and lowercase</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> nameB = b.name.toUpperCase(); <span class=\"comment\">// ignore upper and lowercase</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (nameA &lt; nameB) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (nameA &gt; nameB) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// names must be equal</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>###按照指定的顺序排序<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sortList:[<span class=\"string\">\"事业编制\"</span>,<span class=\"string\">\"企业编制\"</span>,<span class=\"string\">\"二批企聘\"</span>];</span><br><span class=\"line\">list:[&#123;<span class=\"attr\">type</span>:<span class=\"string\">\"企业编制\"</span>,<span class=\"attr\">number</span>:<span class=\"number\">12344</span>&#125;</span><br><span class=\"line\">,&#123;<span class=\"attr\">type</span>:<span class=\"string\">\"二批企聘\"</span>,<span class=\"attr\">number</span>:<span class=\"number\">52344</span>&#125;,</span><br><span class=\"line\">&#123;<span class=\"attr\">type</span>:<span class=\"string\">\"事业编制\"</span>,<span class=\"attr\">number</span>:<span class=\"number\">8567244</span>&#125;]</span><br><span class=\"line\">list.sort(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sortList.indexOf(a.type)-sortList.indexOf(b.type)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// [&#123;type:\"事业编制\",number:8567244&#125;,&#123;type:\"企业编制\",number:12344&#125;,&#123;type:\"二批企聘\",number:52344&#125;]</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"sort\"><a href=\"#sort\" class=\"headerlink\" title=\"sort()\"></a>sort()</h1><blockquote>\n<p>sort() 方法用原地算法对数组的元素进行排序，并返回数组。排序算法现在是稳定的。默认排序顺序是根据字符串 Unicode 码点。</p>\n</blockquote>\n<p>样例:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> months = [<span class=\"string\">'March'</span>, <span class=\"string\">'Jan'</span>, <span class=\"string\">'Feb'</span>, <span class=\"string\">'Dec'</span>];</span><br><span class=\"line\">months.sort();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(months);</span><br><span class=\"line\"><span class=\"comment\">// expected output: Array [\"Dec\", \"Feb\", \"Jan\", \"March\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> array1 = [<span class=\"number\">1</span>, <span class=\"number\">30</span>, <span class=\"number\">4</span>, <span class=\"number\">21</span>, <span class=\"number\">100000</span>];</span><br><span class=\"line\">array1.sort();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array1);</span><br><span class=\"line\"><span class=\"comment\">// expected output: Array [1, 100000, 21, 30, 4]</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><pre><code>arr.sort([compareFunction])\n</code></pre><hr>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><h4 id=\"compareFunction-firstEl-secondEl-可选\"><a href=\"#compareFunction-firstEl-secondEl-可选\" class=\"headerlink\" title=\"compareFunction(firstEl,secondEl) (可选)\"></a>compareFunction(firstEl,secondEl) (可选)</h4><h5 id=\"fisrtEl\"><a href=\"#fisrtEl\" class=\"headerlink\" title=\"fisrtEl\"></a>fisrtEl</h5><p>第一个要比较的元素</p>\n<h5 id=\"secondEl\"><a href=\"#secondEl\" class=\"headerlink\" title=\"secondEl\"></a>secondEl</h5><p>第二个要比较的元素</p>\n<h3 id=\"返回值\"><a href=\"#返回值\" class=\"headerlink\" title=\"返回值\"></a>返回值</h3><p>返回排序以后的算法,由于采用原地算法,不进行复制.</p>\n<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><p>如果没有指明 compareFunction ，那么元素会按照转换为的字符串的诸个字符的 Unicode 位点进行排序。例如 “Banana” 会被排列到 “cherry” 之前。当数字按由小到大排序时，9 出现在 80 之前，但因为（没有指明 compareFunction），比较的数字会先被转换为字符串，所以在 Unicode 顺序上 “80” 要比 “9” 要靠前。</p>\n<p>如果指明了 compareFunction ，那么数组会按照调用该函数的返回值排序。即 a 和 b 是两个将要被比较的元素：</p>\n<ul>\n<li>如果 compareFunction(a, b) 小于 0 ，那么 a 会被排列到 b 之前；</li>\n<li>如果 compareFunction(a, b) 等于 0 ， a 和 b 的相对位置不变。备注： ECMAScript 标准并不保证这一行为，而且也不是所有浏览器都会遵守（例如 Mozilla 在 2003 年之前的版本）；</li>\n<li>如果 compareFunction(a, b) 大于 0 ， b 会被排列到 a 之前。</li>\n<li>compareFunction(a, b) 必须总是对相同的输入返回相同的比较结果，否则排序的结果将是不确定的。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compare</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (a &lt; b ) &#123;           <span class=\"comment\">// 按某种排序标准进行比较, a 小于 b</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (a &gt; b ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// a must be equal to b</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2></li>\n</ul>\n<p>###sort()方法可以使用函数表达式方便地表示<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> numbers = [<span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">numbers.sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a - b);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(numbers);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure></p>\n<p>###对象可以按照属性排序<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> items = [</span><br><span class=\"line\">&#123; <span class=\"attr\">name</span>: <span class=\"string\">'Edward'</span>, <span class=\"attr\">value</span>: <span class=\"number\">21</span> &#125;,</span><br><span class=\"line\">&#123; <span class=\"attr\">name</span>: <span class=\"string\">'Sharpe'</span>, <span class=\"attr\">value</span>: <span class=\"number\">37</span> &#125;,</span><br><span class=\"line\">&#123; <span class=\"attr\">name</span>: <span class=\"string\">'And'</span>, <span class=\"attr\">value</span>: <span class=\"number\">45</span> &#125;,</span><br><span class=\"line\">&#123; <span class=\"attr\">name</span>: <span class=\"string\">'The'</span>, <span class=\"attr\">value</span>: <span class=\"number\">-12</span> &#125;,</span><br><span class=\"line\">&#123; <span class=\"attr\">name</span>: <span class=\"string\">'Magnetic'</span> &#125;,</span><br><span class=\"line\">&#123; <span class=\"attr\">name</span>: <span class=\"string\">'Zeros'</span>, <span class=\"attr\">value</span>: <span class=\"number\">37</span> &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// sort by value</span></span><br><span class=\"line\">items.sort(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> (a.value - b.value)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// sort by name</span></span><br><span class=\"line\">items.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> nameA = a.name.toUpperCase(); <span class=\"comment\">// ignore upper and lowercase</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> nameB = b.name.toUpperCase(); <span class=\"comment\">// ignore upper and lowercase</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (nameA &lt; nameB) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (nameA &gt; nameB) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// names must be equal</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>###按照指定的顺序排序<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sortList:[<span class=\"string\">\"事业编制\"</span>,<span class=\"string\">\"企业编制\"</span>,<span class=\"string\">\"二批企聘\"</span>];</span><br><span class=\"line\">list:[&#123;<span class=\"attr\">type</span>:<span class=\"string\">\"企业编制\"</span>,<span class=\"attr\">number</span>:<span class=\"number\">12344</span>&#125;</span><br><span class=\"line\">,&#123;<span class=\"attr\">type</span>:<span class=\"string\">\"二批企聘\"</span>,<span class=\"attr\">number</span>:<span class=\"number\">52344</span>&#125;,</span><br><span class=\"line\">&#123;<span class=\"attr\">type</span>:<span class=\"string\">\"事业编制\"</span>,<span class=\"attr\">number</span>:<span class=\"number\">8567244</span>&#125;]</span><br><span class=\"line\">list.sort(<span class=\"function\">(<span class=\"params\">a,b</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sortList.indexOf(a.type)-sortList.indexOf(b.type)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// [&#123;type:\"事业编制\",number:8567244&#125;,&#123;type:\"企业编制\",number:12344&#125;,&#123;type:\"二批企聘\",number:52344&#125;]</span></span><br></pre></td></tr></table></figure></p>\n"},{"title":"玩转彩色 mac terminal","_content":"# mac 彩色控制台\nmac 的彩色控制台基于两个方面实现:\n* 字符\n* 渐变\n## 字符 == > FIGlet\n>FIGlet」是基于ASCII字符组成的字符画，可以根据不同的字符类型来生成不一样的效果, 目前应该支持314种\n\n效果:\n\n        _____          _      _    _ _             _ \n        / ____|        | |    | |  | | |           | |\n        | |     ___   __| | ___| |__| | |_ _ __ ___ | |\n        | |    / _ \\ / _` |/ _ \\  __  | __| '_ ` _ \\| |\n        | |___| (_) | (_| |  __/ |  | | |_| | | | | | |\n        \\_____\\___/ \\__,_|\\___|_|  |_|\\__|_| |_| |_|_|\n### 安装\n    npm install -g figlet-cli\n### 使用文档参数\n* font\n>字符类型,默认为 stardand\n* horizontalLayout\n>水平布局 默认值： default\n\n* verticalLayout\n>垂直布局 默认值： default\n\n### 控制台使用\n* 基本命令\n\n        -l, --list           List all the available fonts\n        -f, --font           A string value that indicates the FIGlet font to use\n        --horizontal-layout  A string value that indicates the horizontal layout to use\n        --vertical-layout    A string value that indicates the vertical layout to use\n\n* 简单执行\n\n        figlet \"TREASURE\"\n\n效果:\n\n\n    _____ ____  _____    _    ____  _   _ ____  _____\n    |_   _|  _ \\| ____|  / \\  / ___|| | | |  _ \\| ____|\n    | | | |_) |  _|   / _ \\ \\___ \\| | | | |_) |  _|\n    | | |  _ <| |___ / ___ \\ ___) | |_| |  _ <| |___\n    |_| |_| \\_\\_____/_/   \\_\\____/ \\___/|_| \\_\\_____|\n\n\n\n* 使用字体\n\n        figlet -f \"Def Leppard\"  \"codehtml\" \n\n\n                            ;\n                    :      ED.\n                .,    t#,     E#Wi                 ,;\n            ,Wt   ;##W.    E###G.             f#i .    .                                           i\n            i#D.  :#L:WE    E#fD#W;          .E#t  Di   Dt    GEEEEEEEL        ..       :          LE\n            f#f   .KG  ,#D   E#t t##L        i#W,   E#i  E#i   ,;;L#K;;.       ,W,     .Et         L#E\n        .D#i    EE    ;#f  E#t  .E#K,     L#D.    E#t  E#t      t#E         t##,    ,W#t        G#W.\n        :KW,    f#.     t#i E#t    j##f  :K#Wfff;  E#t  E#t      t#E        L###,   j###t       D#K.\n        t#f     :#G     GK  E#t    :E#K: i##WLLLLt E########f.   t#E      .E#j##,  G#fE#t      E#K.\n        ;#G     ;#L   LW.  E#t   t##L    .E#L     E#j..K#j...   t#E     ;WW; ##,:K#i E#t    .E#E.\n            :KE.    t#f f#:   E#t .D#W;       f#E:   E#t  E#t      t#E    j#E.  ##f#W,  E#t   .K#E\n            .DW:    f#D#;    E#tiW#G.         ,WW;  E#t  E#t      t#E  .D#L    ###K:   E#t  .K#D\n            L#,    G#t     E#K##i            .D#; f#t  f#t      t#E :K#t     ##D.    E#t .W#G\n                jt     t      E##D.               tt  ii   ii       fE ...      #G      .. :W##########Wt\n                            E#t                                    :          j          :,,,,,,,,,,,,,.\n                            L:\n\n## 渐变色 == > lolcat\n\n### 安装\n            get isntall lolcat\n\n![WX20190525-165006@2x](https://i.loli.net/2019/05/25/5ce901cc5be9434532.png)\n\n\n## figlet 与 lolcat 结合\n        figlet \"MOTHER FUCKER\" | lolcat\n![WX20190525-165641@2x](https://i.loli.net/2019/05/25/5ce90354de96043522.png)\n\n## 测试不同的 figlet 字体 \n可以访问[这个网站](http://patorjk.com/software/taag/#p=display&h=1&v=1&f=Alpha&t=codehtml)\n\n\n","source":"_posts/2019.05.25.colorfulMacTerminal.md","raw":"---\ntitle: 玩转彩色 mac terminal\ntags: [mac]\ncategories: 随笔\n---\n# mac 彩色控制台\nmac 的彩色控制台基于两个方面实现:\n* 字符\n* 渐变\n## 字符 == > FIGlet\n>FIGlet」是基于ASCII字符组成的字符画，可以根据不同的字符类型来生成不一样的效果, 目前应该支持314种\n\n效果:\n\n        _____          _      _    _ _             _ \n        / ____|        | |    | |  | | |           | |\n        | |     ___   __| | ___| |__| | |_ _ __ ___ | |\n        | |    / _ \\ / _` |/ _ \\  __  | __| '_ ` _ \\| |\n        | |___| (_) | (_| |  __/ |  | | |_| | | | | | |\n        \\_____\\___/ \\__,_|\\___|_|  |_|\\__|_| |_| |_|_|\n### 安装\n    npm install -g figlet-cli\n### 使用文档参数\n* font\n>字符类型,默认为 stardand\n* horizontalLayout\n>水平布局 默认值： default\n\n* verticalLayout\n>垂直布局 默认值： default\n\n### 控制台使用\n* 基本命令\n\n        -l, --list           List all the available fonts\n        -f, --font           A string value that indicates the FIGlet font to use\n        --horizontal-layout  A string value that indicates the horizontal layout to use\n        --vertical-layout    A string value that indicates the vertical layout to use\n\n* 简单执行\n\n        figlet \"TREASURE\"\n\n效果:\n\n\n    _____ ____  _____    _    ____  _   _ ____  _____\n    |_   _|  _ \\| ____|  / \\  / ___|| | | |  _ \\| ____|\n    | | | |_) |  _|   / _ \\ \\___ \\| | | | |_) |  _|\n    | | |  _ <| |___ / ___ \\ ___) | |_| |  _ <| |___\n    |_| |_| \\_\\_____/_/   \\_\\____/ \\___/|_| \\_\\_____|\n\n\n\n* 使用字体\n\n        figlet -f \"Def Leppard\"  \"codehtml\" \n\n\n                            ;\n                    :      ED.\n                .,    t#,     E#Wi                 ,;\n            ,Wt   ;##W.    E###G.             f#i .    .                                           i\n            i#D.  :#L:WE    E#fD#W;          .E#t  Di   Dt    GEEEEEEEL        ..       :          LE\n            f#f   .KG  ,#D   E#t t##L        i#W,   E#i  E#i   ,;;L#K;;.       ,W,     .Et         L#E\n        .D#i    EE    ;#f  E#t  .E#K,     L#D.    E#t  E#t      t#E         t##,    ,W#t        G#W.\n        :KW,    f#.     t#i E#t    j##f  :K#Wfff;  E#t  E#t      t#E        L###,   j###t       D#K.\n        t#f     :#G     GK  E#t    :E#K: i##WLLLLt E########f.   t#E      .E#j##,  G#fE#t      E#K.\n        ;#G     ;#L   LW.  E#t   t##L    .E#L     E#j..K#j...   t#E     ;WW; ##,:K#i E#t    .E#E.\n            :KE.    t#f f#:   E#t .D#W;       f#E:   E#t  E#t      t#E    j#E.  ##f#W,  E#t   .K#E\n            .DW:    f#D#;    E#tiW#G.         ,WW;  E#t  E#t      t#E  .D#L    ###K:   E#t  .K#D\n            L#,    G#t     E#K##i            .D#; f#t  f#t      t#E :K#t     ##D.    E#t .W#G\n                jt     t      E##D.               tt  ii   ii       fE ...      #G      .. :W##########Wt\n                            E#t                                    :          j          :,,,,,,,,,,,,,.\n                            L:\n\n## 渐变色 == > lolcat\n\n### 安装\n            get isntall lolcat\n\n![WX20190525-165006@2x](https://i.loli.net/2019/05/25/5ce901cc5be9434532.png)\n\n\n## figlet 与 lolcat 结合\n        figlet \"MOTHER FUCKER\" | lolcat\n![WX20190525-165641@2x](https://i.loli.net/2019/05/25/5ce90354de96043522.png)\n\n## 测试不同的 figlet 字体 \n可以访问[这个网站](http://patorjk.com/software/taag/#p=display&h=1&v=1&f=Alpha&t=codehtml)\n\n\n","slug":"2019.05.25.colorfulMacTerminal","published":1,"date":"2019-05-25T08:36:01.370Z","updated":"2019-05-28T07:05:38.899Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziiq70010rh9zap1rh63l","content":"<h1 id=\"mac-彩色控制台\"><a href=\"#mac-彩色控制台\" class=\"headerlink\" title=\"mac 彩色控制台\"></a>mac 彩色控制台</h1><p>mac 的彩色控制台基于两个方面实现:</p>\n<ul>\n<li>字符</li>\n<li>渐变<h2 id=\"字符-gt-FIGlet\"><a href=\"#字符-gt-FIGlet\" class=\"headerlink\" title=\"字符 == &gt; FIGlet\"></a>字符 == &gt; FIGlet</h2><blockquote>\n<p>FIGlet」是基于ASCII字符组成的字符画，可以根据不同的字符类型来生成不一样的效果, 目前应该支持314种</p>\n</blockquote>\n</li>\n</ul>\n<p>效果:</p>\n<pre><code>_____          _      _    _ _             _ \n/ ____|        | |    | |  | | |           | |\n| |     ___   __| | ___| |__| | |_ _ __ ___ | |\n| |    / _ \\ / _` |/ _ \\  __  | __| &apos;_ ` _ \\| |\n| |___| (_) | (_| |  __/ |  | | |_| | | | | | |\n\\_____\\___/ \\__,_|\\___|_|  |_|\\__|_| |_| |_|_|\n</code></pre><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><pre><code>npm install -g figlet-cli\n</code></pre><h3 id=\"使用文档参数\"><a href=\"#使用文档参数\" class=\"headerlink\" title=\"使用文档参数\"></a>使用文档参数</h3><ul>\n<li>font<blockquote>\n<p>字符类型,默认为 stardand</p>\n</blockquote>\n</li>\n<li><p>horizontalLayout</p>\n<blockquote>\n<p>水平布局 默认值： default</p>\n</blockquote>\n</li>\n<li><p>verticalLayout</p>\n<blockquote>\n<p>垂直布局 默认值： default</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"控制台使用\"><a href=\"#控制台使用\" class=\"headerlink\" title=\"控制台使用\"></a>控制台使用</h3><ul>\n<li><p>基本命令</p>\n<pre><code>-l, --list           List all the available fonts\n-f, --font           A string value that indicates the FIGlet font to use\n--horizontal-layout  A string value that indicates the horizontal layout to use\n--vertical-layout    A string value that indicates the vertical layout to use\n</code></pre></li>\n<li><p>简单执行</p>\n<pre><code>figlet &quot;TREASURE&quot;\n</code></pre></li>\n</ul>\n<p>效果:</p>\n<pre><code>_____ ____  _____    _    ____  _   _ ____  _____\n|_   _|  _ \\| ____|  / \\  / ___|| | | |  _ \\| ____|\n| | | |_) |  _|   / _ \\ \\___ \\| | | | |_) |  _|\n| | |  _ &lt;| |___ / ___ \\ ___) | |_| |  _ &lt;| |___\n|_| |_| \\_\\_____/_/   \\_\\____/ \\___/|_| \\_\\_____|\n</code></pre><ul>\n<li><p>使用字体</p>\n<pre><code>figlet -f &quot;Def Leppard&quot;  &quot;codehtml&quot; \n</code></pre></li>\n</ul>\n<pre><code>                    ;\n            :      ED.\n        .,    t#,     E#Wi                 ,;\n    ,Wt   ;##W.    E###G.             f#i .    .                                           i\n    i#D.  :#L:WE    E#fD#W;          .E#t  Di   Dt    GEEEEEEEL        ..       :          LE\n    f#f   .KG  ,#D   E#t t##L        i#W,   E#i  E#i   ,;;L#K;;.       ,W,     .Et         L#E\n.D#i    EE    ;#f  E#t  .E#K,     L#D.    E#t  E#t      t#E         t##,    ,W#t        G#W.\n:KW,    f#.     t#i E#t    j##f  :K#Wfff;  E#t  E#t      t#E        L###,   j###t       D#K.\nt#f     :#G     GK  E#t    :E#K: i##WLLLLt E########f.   t#E      .E#j##,  G#fE#t      E#K.\n;#G     ;#L   LW.  E#t   t##L    .E#L     E#j..K#j...   t#E     ;WW; ##,:K#i E#t    .E#E.\n    :KE.    t#f f#:   E#t .D#W;       f#E:   E#t  E#t      t#E    j#E.  ##f#W,  E#t   .K#E\n    .DW:    f#D#;    E#tiW#G.         ,WW;  E#t  E#t      t#E  .D#L    ###K:   E#t  .K#D\n    L#,    G#t     E#K##i            .D#; f#t  f#t      t#E :K#t     ##D.    E#t .W#G\n        jt     t      E##D.               tt  ii   ii       fE ...      #G      .. :W##########Wt\n                    E#t                                    :          j          :,,,,,,,,,,,,,.\n                    L:\n</code></pre><h2 id=\"渐变色-gt-lolcat\"><a href=\"#渐变色-gt-lolcat\" class=\"headerlink\" title=\"渐变色 == &gt; lolcat\"></a>渐变色 == &gt; lolcat</h2><h3 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h3><pre><code>get isntall lolcat\n</code></pre><p><img src=\"https://i.loli.net/2019/05/25/5ce901cc5be9434532.png\" alt=\"WX20190525-165006@2x\"></p>\n<h2 id=\"figlet-与-lolcat-结合\"><a href=\"#figlet-与-lolcat-结合\" class=\"headerlink\" title=\"figlet 与 lolcat 结合\"></a>figlet 与 lolcat 结合</h2><pre><code>figlet &quot;MOTHER FUCKER&quot; | lolcat\n</code></pre><p><img src=\"https://i.loli.net/2019/05/25/5ce90354de96043522.png\" alt=\"WX20190525-165641@2x\"></p>\n<h2 id=\"测试不同的-figlet-字体\"><a href=\"#测试不同的-figlet-字体\" class=\"headerlink\" title=\"测试不同的 figlet 字体\"></a>测试不同的 figlet 字体</h2><p>可以访问<a href=\"http://patorjk.com/software/taag/#p=display&amp;h=1&amp;v=1&amp;f=Alpha&amp;t=codehtml\" target=\"_blank\" rel=\"noopener\">这个网站</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"mac-彩色控制台\"><a href=\"#mac-彩色控制台\" class=\"headerlink\" title=\"mac 彩色控制台\"></a>mac 彩色控制台</h1><p>mac 的彩色控制台基于两个方面实现:</p>\n<ul>\n<li>字符</li>\n<li>渐变<h2 id=\"字符-gt-FIGlet\"><a href=\"#字符-gt-FIGlet\" class=\"headerlink\" title=\"字符 == &gt; FIGlet\"></a>字符 == &gt; FIGlet</h2><blockquote>\n<p>FIGlet」是基于ASCII字符组成的字符画，可以根据不同的字符类型来生成不一样的效果, 目前应该支持314种</p>\n</blockquote>\n</li>\n</ul>\n<p>效果:</p>\n<pre><code>_____          _      _    _ _             _ \n/ ____|        | |    | |  | | |           | |\n| |     ___   __| | ___| |__| | |_ _ __ ___ | |\n| |    / _ \\ / _` |/ _ \\  __  | __| &apos;_ ` _ \\| |\n| |___| (_) | (_| |  __/ |  | | |_| | | | | | |\n\\_____\\___/ \\__,_|\\___|_|  |_|\\__|_| |_| |_|_|\n</code></pre><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><pre><code>npm install -g figlet-cli\n</code></pre><h3 id=\"使用文档参数\"><a href=\"#使用文档参数\" class=\"headerlink\" title=\"使用文档参数\"></a>使用文档参数</h3><ul>\n<li>font<blockquote>\n<p>字符类型,默认为 stardand</p>\n</blockquote>\n</li>\n<li><p>horizontalLayout</p>\n<blockquote>\n<p>水平布局 默认值： default</p>\n</blockquote>\n</li>\n<li><p>verticalLayout</p>\n<blockquote>\n<p>垂直布局 默认值： default</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"控制台使用\"><a href=\"#控制台使用\" class=\"headerlink\" title=\"控制台使用\"></a>控制台使用</h3><ul>\n<li><p>基本命令</p>\n<pre><code>-l, --list           List all the available fonts\n-f, --font           A string value that indicates the FIGlet font to use\n--horizontal-layout  A string value that indicates the horizontal layout to use\n--vertical-layout    A string value that indicates the vertical layout to use\n</code></pre></li>\n<li><p>简单执行</p>\n<pre><code>figlet &quot;TREASURE&quot;\n</code></pre></li>\n</ul>\n<p>效果:</p>\n<pre><code>_____ ____  _____    _    ____  _   _ ____  _____\n|_   _|  _ \\| ____|  / \\  / ___|| | | |  _ \\| ____|\n| | | |_) |  _|   / _ \\ \\___ \\| | | | |_) |  _|\n| | |  _ &lt;| |___ / ___ \\ ___) | |_| |  _ &lt;| |___\n|_| |_| \\_\\_____/_/   \\_\\____/ \\___/|_| \\_\\_____|\n</code></pre><ul>\n<li><p>使用字体</p>\n<pre><code>figlet -f &quot;Def Leppard&quot;  &quot;codehtml&quot; \n</code></pre></li>\n</ul>\n<pre><code>                    ;\n            :      ED.\n        .,    t#,     E#Wi                 ,;\n    ,Wt   ;##W.    E###G.             f#i .    .                                           i\n    i#D.  :#L:WE    E#fD#W;          .E#t  Di   Dt    GEEEEEEEL        ..       :          LE\n    f#f   .KG  ,#D   E#t t##L        i#W,   E#i  E#i   ,;;L#K;;.       ,W,     .Et         L#E\n.D#i    EE    ;#f  E#t  .E#K,     L#D.    E#t  E#t      t#E         t##,    ,W#t        G#W.\n:KW,    f#.     t#i E#t    j##f  :K#Wfff;  E#t  E#t      t#E        L###,   j###t       D#K.\nt#f     :#G     GK  E#t    :E#K: i##WLLLLt E########f.   t#E      .E#j##,  G#fE#t      E#K.\n;#G     ;#L   LW.  E#t   t##L    .E#L     E#j..K#j...   t#E     ;WW; ##,:K#i E#t    .E#E.\n    :KE.    t#f f#:   E#t .D#W;       f#E:   E#t  E#t      t#E    j#E.  ##f#W,  E#t   .K#E\n    .DW:    f#D#;    E#tiW#G.         ,WW;  E#t  E#t      t#E  .D#L    ###K:   E#t  .K#D\n    L#,    G#t     E#K##i            .D#; f#t  f#t      t#E :K#t     ##D.    E#t .W#G\n        jt     t      E##D.               tt  ii   ii       fE ...      #G      .. :W##########Wt\n                    E#t                                    :          j          :,,,,,,,,,,,,,.\n                    L:\n</code></pre><h2 id=\"渐变色-gt-lolcat\"><a href=\"#渐变色-gt-lolcat\" class=\"headerlink\" title=\"渐变色 == &gt; lolcat\"></a>渐变色 == &gt; lolcat</h2><h3 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h3><pre><code>get isntall lolcat\n</code></pre><p><img src=\"https://i.loli.net/2019/05/25/5ce901cc5be9434532.png\" alt=\"WX20190525-165006@2x\"></p>\n<h2 id=\"figlet-与-lolcat-结合\"><a href=\"#figlet-与-lolcat-结合\" class=\"headerlink\" title=\"figlet 与 lolcat 结合\"></a>figlet 与 lolcat 结合</h2><pre><code>figlet &quot;MOTHER FUCKER&quot; | lolcat\n</code></pre><p><img src=\"https://i.loli.net/2019/05/25/5ce90354de96043522.png\" alt=\"WX20190525-165641@2x\"></p>\n<h2 id=\"测试不同的-figlet-字体\"><a href=\"#测试不同的-figlet-字体\" class=\"headerlink\" title=\"测试不同的 figlet 字体\"></a>测试不同的 figlet 字体</h2><p>可以访问<a href=\"http://patorjk.com/software/taag/#p=display&amp;h=1&amp;v=1&amp;f=Alpha&amp;t=codehtml\" target=\"_blank\" rel=\"noopener\">这个网站</a></p>\n"},{"title":"在不同电脑上同步 vscode 的插件/设置","_content":"\n# 前言\n>Visual Studio Code(以下简称vsCode)现在已经渐渐成为前端开发的主力工具，我们在使用vscode Coding 时也一定会装很多插件。这篇文章提供了可以一键同步 vscode 设置/插件的方法.\n# 准备工作\n* setting sync 插件\n* github 账户\n# 开始!\n## 步骤 1==> 安装 `setting sync`插件\n\nsetting sync 快捷键:\n### windows\n上传： Shift + Alt + U (Sync: Update / Upload Settings)\n\n下载： Shift + Alt + D (Sync: Download Settings)\n### mac\n上传： Shift + option + U (Sync: Update / Upload Settings)\n\n下载： Shift + option + D (Sync: Download Settings)\n![WX20190529-132756@2x](https://i.loli.net/2019/05/29/5cee186a5788631404.png)\n## 步骤 2 ==> 生成 github token\n![WX20190529-132351@2x](https://i.loli.net/2019/05/29/5cee177815c7d59714.png)\n## 步骤 3 ==> 获取 gist ID\n在 vscode 中键入 `Shift + option + U`,并输入之前生成的 token,会生成一个gist id.\n在设置中搜索 `sync`获取 gist ID. \n![WX20190529-132609@2x](https://i.loli.net/2019/05/29/5cee18086757c68071.png)\n## 步骤 4 ==> 在另一台电脑上完成同步\n在新的电脑上安装 `setting sync`,键入`shift+ option+ U`,输入 gist ID,等待完成同步!\n","source":"_posts/2019.05.29.vscodesync.md","raw":"---\ntitle: 在不同电脑上同步 vscode 的插件/设置\ntags: [vscode]\ncategories: 随笔\n---\n\n# 前言\n>Visual Studio Code(以下简称vsCode)现在已经渐渐成为前端开发的主力工具，我们在使用vscode Coding 时也一定会装很多插件。这篇文章提供了可以一键同步 vscode 设置/插件的方法.\n# 准备工作\n* setting sync 插件\n* github 账户\n# 开始!\n## 步骤 1==> 安装 `setting sync`插件\n\nsetting sync 快捷键:\n### windows\n上传： Shift + Alt + U (Sync: Update / Upload Settings)\n\n下载： Shift + Alt + D (Sync: Download Settings)\n### mac\n上传： Shift + option + U (Sync: Update / Upload Settings)\n\n下载： Shift + option + D (Sync: Download Settings)\n![WX20190529-132756@2x](https://i.loli.net/2019/05/29/5cee186a5788631404.png)\n## 步骤 2 ==> 生成 github token\n![WX20190529-132351@2x](https://i.loli.net/2019/05/29/5cee177815c7d59714.png)\n## 步骤 3 ==> 获取 gist ID\n在 vscode 中键入 `Shift + option + U`,并输入之前生成的 token,会生成一个gist id.\n在设置中搜索 `sync`获取 gist ID. \n![WX20190529-132609@2x](https://i.loli.net/2019/05/29/5cee18086757c68071.png)\n## 步骤 4 ==> 在另一台电脑上完成同步\n在新的电脑上安装 `setting sync`,键入`shift+ option+ U`,输入 gist ID,等待完成同步!\n","slug":"2019.05.29.vscodesync","published":1,"date":"2019-05-29T04:53:42.907Z","updated":"2019-05-29T05:31:55.612Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziiq70011rh9z92tjc28v","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>Visual Studio Code(以下简称vsCode)现在已经渐渐成为前端开发的主力工具，我们在使用vscode Coding 时也一定会装很多插件。这篇文章提供了可以一键同步 vscode 设置/插件的方法.</p>\n<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><ul>\n<li>setting sync 插件</li>\n<li>github 账户<h1 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始!\"></a>开始!</h1><h2 id=\"步骤-1-gt-安装-setting-sync插件\"><a href=\"#步骤-1-gt-安装-setting-sync插件\" class=\"headerlink\" title=\"步骤 1==&gt; 安装 setting sync插件\"></a>步骤 1==&gt; 安装 <code>setting sync</code>插件</h2></li>\n</ul>\n</blockquote>\n<p>setting sync 快捷键:</p>\n<h3 id=\"windows\"><a href=\"#windows\" class=\"headerlink\" title=\"windows\"></a>windows</h3><p>上传： Shift + Alt + U (Sync: Update / Upload Settings)</p>\n<p>下载： Shift + Alt + D (Sync: Download Settings)</p>\n<h3 id=\"mac\"><a href=\"#mac\" class=\"headerlink\" title=\"mac\"></a>mac</h3><p>上传： Shift + option + U (Sync: Update / Upload Settings)</p>\n<p>下载： Shift + option + D (Sync: Download Settings)<br><img src=\"https://i.loli.net/2019/05/29/5cee186a5788631404.png\" alt=\"WX20190529-132756@2x\"></p>\n<h2 id=\"步骤-2-gt-生成-github-token\"><a href=\"#步骤-2-gt-生成-github-token\" class=\"headerlink\" title=\"步骤 2 ==&gt; 生成 github token\"></a>步骤 2 ==&gt; 生成 github token</h2><p><img src=\"https://i.loli.net/2019/05/29/5cee177815c7d59714.png\" alt=\"WX20190529-132351@2x\"></p>\n<h2 id=\"步骤-3-gt-获取-gist-ID\"><a href=\"#步骤-3-gt-获取-gist-ID\" class=\"headerlink\" title=\"步骤 3 ==&gt; 获取 gist ID\"></a>步骤 3 ==&gt; 获取 gist ID</h2><p>在 vscode 中键入 <code>Shift + option + U</code>,并输入之前生成的 token,会生成一个gist id.<br>在设置中搜索 <code>sync</code>获取 gist ID.<br><img src=\"https://i.loli.net/2019/05/29/5cee18086757c68071.png\" alt=\"WX20190529-132609@2x\"></p>\n<h2 id=\"步骤-4-gt-在另一台电脑上完成同步\"><a href=\"#步骤-4-gt-在另一台电脑上完成同步\" class=\"headerlink\" title=\"步骤 4 ==&gt; 在另一台电脑上完成同步\"></a>步骤 4 ==&gt; 在另一台电脑上完成同步</h2><p>在新的电脑上安装 <code>setting sync</code>,键入<code>shift+ option+ U</code>,输入 gist ID,等待完成同步!</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>Visual Studio Code(以下简称vsCode)现在已经渐渐成为前端开发的主力工具，我们在使用vscode Coding 时也一定会装很多插件。这篇文章提供了可以一键同步 vscode 设置/插件的方法.</p>\n<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><ul>\n<li>setting sync 插件</li>\n<li>github 账户<h1 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始!\"></a>开始!</h1><h2 id=\"步骤-1-gt-安装-setting-sync插件\"><a href=\"#步骤-1-gt-安装-setting-sync插件\" class=\"headerlink\" title=\"步骤 1==&gt; 安装 setting sync插件\"></a>步骤 1==&gt; 安装 <code>setting sync</code>插件</h2></li>\n</ul>\n</blockquote>\n<p>setting sync 快捷键:</p>\n<h3 id=\"windows\"><a href=\"#windows\" class=\"headerlink\" title=\"windows\"></a>windows</h3><p>上传： Shift + Alt + U (Sync: Update / Upload Settings)</p>\n<p>下载： Shift + Alt + D (Sync: Download Settings)</p>\n<h3 id=\"mac\"><a href=\"#mac\" class=\"headerlink\" title=\"mac\"></a>mac</h3><p>上传： Shift + option + U (Sync: Update / Upload Settings)</p>\n<p>下载： Shift + option + D (Sync: Download Settings)<br><img src=\"https://i.loli.net/2019/05/29/5cee186a5788631404.png\" alt=\"WX20190529-132756@2x\"></p>\n<h2 id=\"步骤-2-gt-生成-github-token\"><a href=\"#步骤-2-gt-生成-github-token\" class=\"headerlink\" title=\"步骤 2 ==&gt; 生成 github token\"></a>步骤 2 ==&gt; 生成 github token</h2><p><img src=\"https://i.loli.net/2019/05/29/5cee177815c7d59714.png\" alt=\"WX20190529-132351@2x\"></p>\n<h2 id=\"步骤-3-gt-获取-gist-ID\"><a href=\"#步骤-3-gt-获取-gist-ID\" class=\"headerlink\" title=\"步骤 3 ==&gt; 获取 gist ID\"></a>步骤 3 ==&gt; 获取 gist ID</h2><p>在 vscode 中键入 <code>Shift + option + U</code>,并输入之前生成的 token,会生成一个gist id.<br>在设置中搜索 <code>sync</code>获取 gist ID.<br><img src=\"https://i.loli.net/2019/05/29/5cee18086757c68071.png\" alt=\"WX20190529-132609@2x\"></p>\n<h2 id=\"步骤-4-gt-在另一台电脑上完成同步\"><a href=\"#步骤-4-gt-在另一台电脑上完成同步\" class=\"headerlink\" title=\"步骤 4 ==&gt; 在另一台电脑上完成同步\"></a>步骤 4 ==&gt; 在另一台电脑上完成同步</h2><p>在新的电脑上安装 <code>setting sync</code>,键入<code>shift+ option+ U</code>,输入 gist ID,等待完成同步!</p>\n"},{"title":"ASF的使用","_content":"#在 mac 上使用 asf\n**关于 ASF (ArchiSteamFarm)：**\n>ASF 是由 C# 編寫，能同時掛載多個 Steam 賬號的掛卡工具。其不像 Idle Master 那樣：同一時間只能為一個賬號掛卡，需要後台運行 Steam 客戶端，需啟動額外進程模擬『正在遊戲』狀態。ASF 不需要後台運行任何Steam 客戶端，不需要啟動額外進程，而且能為不限數目的 Steam 賬號同時掛卡。不僅如此，該軟件還能在服務器和其他非桌面電腦上運行，並擁有完整支持 Mono 的特性，這能讓其在 Windows、Linux 以及 OS X 等任何支持 Mono 的操作系統上運行。ASF 存在的基礎要歸功於 SteamKit2。\n\n[注] ArchiSteamFarm V3.0 以后的版本已经将 Mono 换成了 .Net Core。\n简单来说 ASF 就是一个假的 Steam 客户端，它通过“假装玩游戏”，让 Steam 以为你真的在玩某款游戏，从而获得 Steam 集换式卡牌。\n## ASF 的安装与使用\n### mac 使用 asf\n\n* 到[这里](https://github.com/JustArchiNET/ArchiSteamFarm/releases)下载 mac 客户端(mac 上需要安装 openssl,最好在 mac 上安装 xcode)\n\n\n* cd 到解压目录,然后赋予管理员权限:\n\n        chmod +x ./ArchiSteamFarm\n\n* 运行`./ArchiSteamFarm`或者直接双击`ArchiSteamFarm`\n\n## ASF 的配置\n\n 在 config 文件夹下添加 ASF.json/bot.json\nASF.json 文件是全局的配置文件,比较重要的参数如下:\n* “Blacklist”：不挂卡的游戏 (这里排除了所以带 VAC 的游戏)\n\n* “SteamOwnerID”：ASF 所有者的 SteamID；ASF 所有者可以使用全局指令 (例如：!exit、!restart、!update 等 )\n例如:\n\n        {\n            \"SteamOwnerID\": 76561198167718521\n        }\n\nbot.json 是单个 bot 的配置文件,可以添加多个不同名字的 bot 配置文件,\n配置文件的参数如下:\n\n        {\n        \"Enabled\": true,\n        \"FarmOffline\": true,\n        \"SteamLogin\": \"steam 账户名\",\n        \"SteamPassword\": \"steam 登录密码\"\n        }\n\n## ASF 的部分命令\n\n输入`c`来进入命令模式,需要注意的是,每次输入命令前,都需要输入 `c`\n### play \n使指定的bot玩指定的游戏（即指定游戏挂卡）玩的游戏必须已经在库中！\nsteam限制最多同时玩32个游戏,切换到手动挂卡模式——使指定机器人运行给定的 AppIDs，并且可选自定义 GameName 为游戏名称。 使用 resume 以返回自动挂卡模式。\n\n        play <AppIDs,GameName>\n        或\n        play <Bots> <AppIDs,GameName>\n\n如：play asf 570\n意思是所有bot玩游戏dota2(570应该是dota2的appid)\n>asf是指代所有bot，也可写作ASF，你可以把它替换为特定bot的机器人名称(第二步中设置)\n>appid可以用英文名在steamdb搜索，或根据steam商店链接来获取（末尾的数字）\n\n### pause \n暂停自动挂卡，用resume命令可恢复挂卡\n永久暂停指定机器人的自动挂卡模块。 ASF 在本次会话中将不会再尝试对此帐户进行挂卡，除非您手动 resume 或者重启 ASF。\n\n        pause \n        或\n        pause <Bots>\n\n### resume \n恢复自动挂卡模式\n\n    resume\n    或\n    resume <Bots>\n\n### addlicense\n添加免费游戏或限时免费游戏\n为指定机器人激活给定的 AppIDs（Steam 网络）或 SubIDs（Steam 商店），仅免费游戏有效。\n格式如下:\n\n    addlicense <GameIDs>\n\n如 addlince me 570\n意思是：名称为me的bot 添加 appid为570的免费游戏\n### redeem\n激活steamkey来添加游戏\n\n        redeem <Keys>\n        或\n        redeem <Bots> <Keys>\n\n### 其他\n1，如果只有一个bot，以上命令均可以不指定bot\n2，IPC GUI右上角的齿轮可以修改界面语言\n3，如果以后不用asf，关闭asf即可,\n4，ASF不依赖steam客户端，在没有安装steam的电脑上依旧能运行\n\n\n\n","source":"_posts/2019.05.28.asf.md","raw":"---\ntitle: ASF的使用\ntags: [steam]\ncategories: 随笔\n---\n#在 mac 上使用 asf\n**关于 ASF (ArchiSteamFarm)：**\n>ASF 是由 C# 編寫，能同時掛載多個 Steam 賬號的掛卡工具。其不像 Idle Master 那樣：同一時間只能為一個賬號掛卡，需要後台運行 Steam 客戶端，需啟動額外進程模擬『正在遊戲』狀態。ASF 不需要後台運行任何Steam 客戶端，不需要啟動額外進程，而且能為不限數目的 Steam 賬號同時掛卡。不僅如此，該軟件還能在服務器和其他非桌面電腦上運行，並擁有完整支持 Mono 的特性，這能讓其在 Windows、Linux 以及 OS X 等任何支持 Mono 的操作系統上運行。ASF 存在的基礎要歸功於 SteamKit2。\n\n[注] ArchiSteamFarm V3.0 以后的版本已经将 Mono 换成了 .Net Core。\n简单来说 ASF 就是一个假的 Steam 客户端，它通过“假装玩游戏”，让 Steam 以为你真的在玩某款游戏，从而获得 Steam 集换式卡牌。\n## ASF 的安装与使用\n### mac 使用 asf\n\n* 到[这里](https://github.com/JustArchiNET/ArchiSteamFarm/releases)下载 mac 客户端(mac 上需要安装 openssl,最好在 mac 上安装 xcode)\n\n\n* cd 到解压目录,然后赋予管理员权限:\n\n        chmod +x ./ArchiSteamFarm\n\n* 运行`./ArchiSteamFarm`或者直接双击`ArchiSteamFarm`\n\n## ASF 的配置\n\n 在 config 文件夹下添加 ASF.json/bot.json\nASF.json 文件是全局的配置文件,比较重要的参数如下:\n* “Blacklist”：不挂卡的游戏 (这里排除了所以带 VAC 的游戏)\n\n* “SteamOwnerID”：ASF 所有者的 SteamID；ASF 所有者可以使用全局指令 (例如：!exit、!restart、!update 等 )\n例如:\n\n        {\n            \"SteamOwnerID\": 76561198167718521\n        }\n\nbot.json 是单个 bot 的配置文件,可以添加多个不同名字的 bot 配置文件,\n配置文件的参数如下:\n\n        {\n        \"Enabled\": true,\n        \"FarmOffline\": true,\n        \"SteamLogin\": \"steam 账户名\",\n        \"SteamPassword\": \"steam 登录密码\"\n        }\n\n## ASF 的部分命令\n\n输入`c`来进入命令模式,需要注意的是,每次输入命令前,都需要输入 `c`\n### play \n使指定的bot玩指定的游戏（即指定游戏挂卡）玩的游戏必须已经在库中！\nsteam限制最多同时玩32个游戏,切换到手动挂卡模式——使指定机器人运行给定的 AppIDs，并且可选自定义 GameName 为游戏名称。 使用 resume 以返回自动挂卡模式。\n\n        play <AppIDs,GameName>\n        或\n        play <Bots> <AppIDs,GameName>\n\n如：play asf 570\n意思是所有bot玩游戏dota2(570应该是dota2的appid)\n>asf是指代所有bot，也可写作ASF，你可以把它替换为特定bot的机器人名称(第二步中设置)\n>appid可以用英文名在steamdb搜索，或根据steam商店链接来获取（末尾的数字）\n\n### pause \n暂停自动挂卡，用resume命令可恢复挂卡\n永久暂停指定机器人的自动挂卡模块。 ASF 在本次会话中将不会再尝试对此帐户进行挂卡，除非您手动 resume 或者重启 ASF。\n\n        pause \n        或\n        pause <Bots>\n\n### resume \n恢复自动挂卡模式\n\n    resume\n    或\n    resume <Bots>\n\n### addlicense\n添加免费游戏或限时免费游戏\n为指定机器人激活给定的 AppIDs（Steam 网络）或 SubIDs（Steam 商店），仅免费游戏有效。\n格式如下:\n\n    addlicense <GameIDs>\n\n如 addlince me 570\n意思是：名称为me的bot 添加 appid为570的免费游戏\n### redeem\n激活steamkey来添加游戏\n\n        redeem <Keys>\n        或\n        redeem <Bots> <Keys>\n\n### 其他\n1，如果只有一个bot，以上命令均可以不指定bot\n2，IPC GUI右上角的齿轮可以修改界面语言\n3，如果以后不用asf，关闭asf即可,\n4，ASF不依赖steam客户端，在没有安装steam的电脑上依旧能运行\n\n\n\n","slug":"2019.05.28.asf","published":1,"date":"2019-05-28T07:01:54.293Z","updated":"2019-05-28T07:46:11.926Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziiq80012rh9z1923g8me","content":"<p>#在 mac 上使用 asf<br><strong>关于 ASF (ArchiSteamFarm)：</strong></p>\n<blockquote>\n<p>ASF 是由 C# 編寫，能同時掛載多個 Steam 賬號的掛卡工具。其不像 Idle Master 那樣：同一時間只能為一個賬號掛卡，需要後台運行 Steam 客戶端，需啟動額外進程模擬『正在遊戲』狀態。ASF 不需要後台運行任何Steam 客戶端，不需要啟動額外進程，而且能為不限數目的 Steam 賬號同時掛卡。不僅如此，該軟件還能在服務器和其他非桌面電腦上運行，並擁有完整支持 Mono 的特性，這能讓其在 Windows、Linux 以及 OS X 等任何支持 Mono 的操作系統上運行。ASF 存在的基礎要歸功於 SteamKit2。</p>\n</blockquote>\n<p>[注] ArchiSteamFarm V3.0 以后的版本已经将 Mono 换成了 .Net Core。<br>简单来说 ASF 就是一个假的 Steam 客户端，它通过“假装玩游戏”，让 Steam 以为你真的在玩某款游戏，从而获得 Steam 集换式卡牌。</p>\n<h2 id=\"ASF-的安装与使用\"><a href=\"#ASF-的安装与使用\" class=\"headerlink\" title=\"ASF 的安装与使用\"></a>ASF 的安装与使用</h2><h3 id=\"mac-使用-asf\"><a href=\"#mac-使用-asf\" class=\"headerlink\" title=\"mac 使用 asf\"></a>mac 使用 asf</h3><ul>\n<li>到<a href=\"https://github.com/JustArchiNET/ArchiSteamFarm/releases\" target=\"_blank\" rel=\"noopener\">这里</a>下载 mac 客户端(mac 上需要安装 openssl,最好在 mac 上安装 xcode)</li>\n</ul>\n<ul>\n<li><p>cd 到解压目录,然后赋予管理员权限:</p>\n<pre><code>chmod +x ./ArchiSteamFarm\n</code></pre></li>\n<li><p>运行<code>./ArchiSteamFarm</code>或者直接双击<code>ArchiSteamFarm</code></p>\n</li>\n</ul>\n<h2 id=\"ASF-的配置\"><a href=\"#ASF-的配置\" class=\"headerlink\" title=\"ASF 的配置\"></a>ASF 的配置</h2><p> 在 config 文件夹下添加 ASF.json/bot.json<br>ASF.json 文件是全局的配置文件,比较重要的参数如下:</p>\n<ul>\n<li><p>“Blacklist”：不挂卡的游戏 (这里排除了所以带 VAC 的游戏)</p>\n</li>\n<li><p>“SteamOwnerID”：ASF 所有者的 SteamID；ASF 所有者可以使用全局指令 (例如：!exit、!restart、!update 等 )<br>例如:</p>\n<pre><code>{\n    &quot;SteamOwnerID&quot;: 76561198167718521\n}\n</code></pre></li>\n</ul>\n<p>bot.json 是单个 bot 的配置文件,可以添加多个不同名字的 bot 配置文件,<br>配置文件的参数如下:</p>\n<pre><code>{\n&quot;Enabled&quot;: true,\n&quot;FarmOffline&quot;: true,\n&quot;SteamLogin&quot;: &quot;steam 账户名&quot;,\n&quot;SteamPassword&quot;: &quot;steam 登录密码&quot;\n}\n</code></pre><h2 id=\"ASF-的部分命令\"><a href=\"#ASF-的部分命令\" class=\"headerlink\" title=\"ASF 的部分命令\"></a>ASF 的部分命令</h2><p>输入<code>c</code>来进入命令模式,需要注意的是,每次输入命令前,都需要输入 <code>c</code></p>\n<h3 id=\"play\"><a href=\"#play\" class=\"headerlink\" title=\"play\"></a>play</h3><p>使指定的bot玩指定的游戏（即指定游戏挂卡）玩的游戏必须已经在库中！<br>steam限制最多同时玩32个游戏,切换到手动挂卡模式——使指定机器人运行给定的 AppIDs，并且可选自定义 GameName 为游戏名称。 使用 resume 以返回自动挂卡模式。</p>\n<pre><code>play &lt;AppIDs,GameName&gt;\n或\nplay &lt;Bots&gt; &lt;AppIDs,GameName&gt;\n</code></pre><p>如：play asf 570<br>意思是所有bot玩游戏dota2(570应该是dota2的appid)</p>\n<blockquote>\n<p>asf是指代所有bot，也可写作ASF，你可以把它替换为特定bot的机器人名称(第二步中设置)<br>appid可以用英文名在steamdb搜索，或根据steam商店链接来获取（末尾的数字）</p>\n</blockquote>\n<h3 id=\"pause\"><a href=\"#pause\" class=\"headerlink\" title=\"pause\"></a>pause</h3><p>暂停自动挂卡，用resume命令可恢复挂卡<br>永久暂停指定机器人的自动挂卡模块。 ASF 在本次会话中将不会再尝试对此帐户进行挂卡，除非您手动 resume 或者重启 ASF。</p>\n<pre><code>pause \n或\npause &lt;Bots&gt;\n</code></pre><h3 id=\"resume\"><a href=\"#resume\" class=\"headerlink\" title=\"resume\"></a>resume</h3><p>恢复自动挂卡模式</p>\n<pre><code>resume\n或\nresume &lt;Bots&gt;\n</code></pre><h3 id=\"addlicense\"><a href=\"#addlicense\" class=\"headerlink\" title=\"addlicense\"></a>addlicense</h3><p>添加免费游戏或限时免费游戏<br>为指定机器人激活给定的 AppIDs（Steam 网络）或 SubIDs（Steam 商店），仅免费游戏有效。<br>格式如下:</p>\n<pre><code>addlicense &lt;GameIDs&gt;\n</code></pre><p>如 addlince me 570<br>意思是：名称为me的bot 添加 appid为570的免费游戏</p>\n<h3 id=\"redeem\"><a href=\"#redeem\" class=\"headerlink\" title=\"redeem\"></a>redeem</h3><p>激活steamkey来添加游戏</p>\n<pre><code>redeem &lt;Keys&gt;\n或\nredeem &lt;Bots&gt; &lt;Keys&gt;\n</code></pre><h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>1，如果只有一个bot，以上命令均可以不指定bot<br>2，IPC GUI右上角的齿轮可以修改界面语言<br>3，如果以后不用asf，关闭asf即可,<br>4，ASF不依赖steam客户端，在没有安装steam的电脑上依旧能运行</p>\n","site":{"data":{}},"excerpt":"","more":"<p>#在 mac 上使用 asf<br><strong>关于 ASF (ArchiSteamFarm)：</strong></p>\n<blockquote>\n<p>ASF 是由 C# 編寫，能同時掛載多個 Steam 賬號的掛卡工具。其不像 Idle Master 那樣：同一時間只能為一個賬號掛卡，需要後台運行 Steam 客戶端，需啟動額外進程模擬『正在遊戲』狀態。ASF 不需要後台運行任何Steam 客戶端，不需要啟動額外進程，而且能為不限數目的 Steam 賬號同時掛卡。不僅如此，該軟件還能在服務器和其他非桌面電腦上運行，並擁有完整支持 Mono 的特性，這能讓其在 Windows、Linux 以及 OS X 等任何支持 Mono 的操作系統上運行。ASF 存在的基礎要歸功於 SteamKit2。</p>\n</blockquote>\n<p>[注] ArchiSteamFarm V3.0 以后的版本已经将 Mono 换成了 .Net Core。<br>简单来说 ASF 就是一个假的 Steam 客户端，它通过“假装玩游戏”，让 Steam 以为你真的在玩某款游戏，从而获得 Steam 集换式卡牌。</p>\n<h2 id=\"ASF-的安装与使用\"><a href=\"#ASF-的安装与使用\" class=\"headerlink\" title=\"ASF 的安装与使用\"></a>ASF 的安装与使用</h2><h3 id=\"mac-使用-asf\"><a href=\"#mac-使用-asf\" class=\"headerlink\" title=\"mac 使用 asf\"></a>mac 使用 asf</h3><ul>\n<li>到<a href=\"https://github.com/JustArchiNET/ArchiSteamFarm/releases\" target=\"_blank\" rel=\"noopener\">这里</a>下载 mac 客户端(mac 上需要安装 openssl,最好在 mac 上安装 xcode)</li>\n</ul>\n<ul>\n<li><p>cd 到解压目录,然后赋予管理员权限:</p>\n<pre><code>chmod +x ./ArchiSteamFarm\n</code></pre></li>\n<li><p>运行<code>./ArchiSteamFarm</code>或者直接双击<code>ArchiSteamFarm</code></p>\n</li>\n</ul>\n<h2 id=\"ASF-的配置\"><a href=\"#ASF-的配置\" class=\"headerlink\" title=\"ASF 的配置\"></a>ASF 的配置</h2><p> 在 config 文件夹下添加 ASF.json/bot.json<br>ASF.json 文件是全局的配置文件,比较重要的参数如下:</p>\n<ul>\n<li><p>“Blacklist”：不挂卡的游戏 (这里排除了所以带 VAC 的游戏)</p>\n</li>\n<li><p>“SteamOwnerID”：ASF 所有者的 SteamID；ASF 所有者可以使用全局指令 (例如：!exit、!restart、!update 等 )<br>例如:</p>\n<pre><code>{\n    &quot;SteamOwnerID&quot;: 76561198167718521\n}\n</code></pre></li>\n</ul>\n<p>bot.json 是单个 bot 的配置文件,可以添加多个不同名字的 bot 配置文件,<br>配置文件的参数如下:</p>\n<pre><code>{\n&quot;Enabled&quot;: true,\n&quot;FarmOffline&quot;: true,\n&quot;SteamLogin&quot;: &quot;steam 账户名&quot;,\n&quot;SteamPassword&quot;: &quot;steam 登录密码&quot;\n}\n</code></pre><h2 id=\"ASF-的部分命令\"><a href=\"#ASF-的部分命令\" class=\"headerlink\" title=\"ASF 的部分命令\"></a>ASF 的部分命令</h2><p>输入<code>c</code>来进入命令模式,需要注意的是,每次输入命令前,都需要输入 <code>c</code></p>\n<h3 id=\"play\"><a href=\"#play\" class=\"headerlink\" title=\"play\"></a>play</h3><p>使指定的bot玩指定的游戏（即指定游戏挂卡）玩的游戏必须已经在库中！<br>steam限制最多同时玩32个游戏,切换到手动挂卡模式——使指定机器人运行给定的 AppIDs，并且可选自定义 GameName 为游戏名称。 使用 resume 以返回自动挂卡模式。</p>\n<pre><code>play &lt;AppIDs,GameName&gt;\n或\nplay &lt;Bots&gt; &lt;AppIDs,GameName&gt;\n</code></pre><p>如：play asf 570<br>意思是所有bot玩游戏dota2(570应该是dota2的appid)</p>\n<blockquote>\n<p>asf是指代所有bot，也可写作ASF，你可以把它替换为特定bot的机器人名称(第二步中设置)<br>appid可以用英文名在steamdb搜索，或根据steam商店链接来获取（末尾的数字）</p>\n</blockquote>\n<h3 id=\"pause\"><a href=\"#pause\" class=\"headerlink\" title=\"pause\"></a>pause</h3><p>暂停自动挂卡，用resume命令可恢复挂卡<br>永久暂停指定机器人的自动挂卡模块。 ASF 在本次会话中将不会再尝试对此帐户进行挂卡，除非您手动 resume 或者重启 ASF。</p>\n<pre><code>pause \n或\npause &lt;Bots&gt;\n</code></pre><h3 id=\"resume\"><a href=\"#resume\" class=\"headerlink\" title=\"resume\"></a>resume</h3><p>恢复自动挂卡模式</p>\n<pre><code>resume\n或\nresume &lt;Bots&gt;\n</code></pre><h3 id=\"addlicense\"><a href=\"#addlicense\" class=\"headerlink\" title=\"addlicense\"></a>addlicense</h3><p>添加免费游戏或限时免费游戏<br>为指定机器人激活给定的 AppIDs（Steam 网络）或 SubIDs（Steam 商店），仅免费游戏有效。<br>格式如下:</p>\n<pre><code>addlicense &lt;GameIDs&gt;\n</code></pre><p>如 addlince me 570<br>意思是：名称为me的bot 添加 appid为570的免费游戏</p>\n<h3 id=\"redeem\"><a href=\"#redeem\" class=\"headerlink\" title=\"redeem\"></a>redeem</h3><p>激活steamkey来添加游戏</p>\n<pre><code>redeem &lt;Keys&gt;\n或\nredeem &lt;Bots&gt; &lt;Keys&gt;\n</code></pre><h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>1，如果只有一个bot，以上命令均可以不指定bot<br>2，IPC GUI右上角的齿轮可以修改界面语言<br>3，如果以后不用asf，关闭asf即可,<br>4，ASF不依赖steam客户端，在没有安装steam的电脑上依旧能运行</p>\n"},{"title":"程序员鼓励师","_content":"在 vscode 插件库中搜索\"超越鼓励师\",并安装\n![WX20190529-134038@2x](https://i.loli.net/2019/05/29/5cee1b8311b3652124.png)\n## 设置\n![WX20190529-134003@2x](https://i.loli.net/2019/05/29/5cee1ba433e2d68631.png)\n![WX20190529-134247@2x](https://i.loli.net/2019/05/29/5cee1bf0a218376862.png)","source":"_posts/2019.05.29.ycy.md","raw":"---\ntitle: 程序员鼓励师\ntags: [vscode]\ncategories: 随笔\n---\n在 vscode 插件库中搜索\"超越鼓励师\",并安装\n![WX20190529-134038@2x](https://i.loli.net/2019/05/29/5cee1b8311b3652124.png)\n## 设置\n![WX20190529-134003@2x](https://i.loli.net/2019/05/29/5cee1ba433e2d68631.png)\n![WX20190529-134247@2x](https://i.loli.net/2019/05/29/5cee1bf0a218376862.png)","slug":"2019.05.29.ycy","published":1,"date":"2019-05-29T05:33:51.232Z","updated":"2019-05-29T05:43:23.614Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziiq80013rh9z851n8gnw","content":"<p>在 vscode 插件库中搜索”超越鼓励师”,并安装<br><img src=\"https://i.loli.net/2019/05/29/5cee1b8311b3652124.png\" alt=\"WX20190529-134038@2x\"></p>\n<h2 id=\"设置\"><a href=\"#设置\" class=\"headerlink\" title=\"设置\"></a>设置</h2><p><img src=\"https://i.loli.net/2019/05/29/5cee1ba433e2d68631.png\" alt=\"WX20190529-134003@2x\"><br><img src=\"https://i.loli.net/2019/05/29/5cee1bf0a218376862.png\" alt=\"WX20190529-134247@2x\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在 vscode 插件库中搜索”超越鼓励师”,并安装<br><img src=\"https://i.loli.net/2019/05/29/5cee1b8311b3652124.png\" alt=\"WX20190529-134038@2x\"></p>\n<h2 id=\"设置\"><a href=\"#设置\" class=\"headerlink\" title=\"设置\"></a>设置</h2><p><img src=\"https://i.loli.net/2019/05/29/5cee1ba433e2d68631.png\" alt=\"WX20190529-134003@2x\"><br><img src=\"https://i.loli.net/2019/05/29/5cee1bf0a218376862.png\" alt=\"WX20190529-134247@2x\"></p>\n"},{"title":"GCP 搭建 SSR/BBR","_content":"\n\n# GCP 介绍\n\n>Google Cloud Platform (以下简称GCP)是Google提供的云平台, 可以用来搭建加速服务, 网站和存储数据.\n\n新用户注册(需要visa 或者其他外汇信用卡)可以获得免费的 300 刀(有效期一年),在这一年里我们可以租用自己的服务器搭建 SSR 或者搭建网站等.一年时间到了以后,信用卡也不会主动扣费(google 说的).\n# 需要准备的东西\n* Gmail\n* 外汇信用卡(VISA 即可)\n* 梯子\n* ssh 客户端\n\n# 注册 GCP\n目前注册时已无法选择中国大陆地区,我在注册的时候选择的是**中国台湾**,地址和邮编自己随便编一下就好了,然后填入信用卡信息,接着通过 Google 的风控系统以后,你的信用卡会被扣除 1 刀(不就便会返还)作为凭证.这样 GCP 就注册完成了.\n\n# 搭建虚机\n## 添加防火墙策略\n访问[https://console.cloud.google.com/networking/firewalls/list](https://console.cloud.google.com/networking/firewalls/list)来配置防火墙.\n\n需要注意的是:\n* 目标修改为: 网络中的所有实例\n* IP地址范围修改为: `0.0.0.0/0`\n* 协议和端口修改为 : 全部允许\n如下图:\n![WX20190628-142813@2x](https://i.loli.net/2019/06/28/5d15b39d07ffb37512.png)\n\n\n## 创建实例\n\n访问[https://console.cloud.google.com/compute/instances](https://console.cloud.google.com/compute/instances)来创建实例.\n\n* 区域选择台湾,地区可以随便选.\n\n* 机器类型选择最低配就可以.\n\n* 启动磁盘,推荐 centos7,方便安装 BBR 以及 SSR\n\n![WX20190628-143213@2x](https://i.loli.net/2019/06/28/5d15b48de083520543.png)\n\n### 添加 ssh 公钥\n在下面的安全选项卡中,输入自己电脑的 SSH 公钥\n\n![WX20190628-143416@2x](https://i.loli.net/2019/06/28/5d15b4f37cc0123773.png)\n\n### 添加静态 IP\n\n在网络选项卡中添加一个新的静态 IP,静态IP一定记得绑定到实例.\n已分配但未被使用的IP, 会按$0.01/小时计费.\n\nip的管理可以到[https://console.cloud.google.com/networking/addresses/list](https://console.cloud.google.com/networking/addresses/list)进行设置.\n\n![WX20190628-143707@2x](https://i.loli.net/2019/06/28/5d15b5a10989185399.png)\n\n### 测试连接\n\n使用 google 自带的 ssh 网页端可以访问到刚刚创建的实例,也可以通过本机自带的 ssh 来连接实例.\n使用本机自带的 ssh 连接实例时,要把本机的 ssh 公钥上传到 gcp 上,注意在上传之前要把公钥字段最后的用户改为 root,方面我们使用 root用户来登录实例.同时,需要修改`/etc/ssh/sshd_config`中的允许 root 登录的选项(`PermitRootLogin`)改为`yes`,接着就可以在本机使用 ssh 连接实例了.\n# 安装 BBR\nroot 账户使用 ssh 连接到实例以后,依次执行以下命令:\n\n    yum install -y wget\n\n    wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh\n\n    chmod +x bbr.sh\n\n    ./bbr.sh\n\n\n安装完成后，脚本会提示需要重启VPS，输入 y 并回车后重启, 这时Xshell连接也会自动断开。\n\nVPS重启可能需要几分钟, 耐心等待一下.\n\n重启完成后，再用Xhell重新连接VPS, sudo -i切换到root用户.\n\n现在验证一下是否成功安装了最新内核并开启BBR.\n输入以下命令：\n\nuname -r\n查看内核版本，如果返回值含有4.13或以上版本, 就表示OK了.\n\n\n    其他命令\n    sysctl net.ipv4.tcp_available_congestion_control\n    返回值一般为：\n    net.ipv4.tcp_available_congestion_control = bbr cubic reno\n\n    sysctl net.ipv4.tcp_congestion_control\n    返回值一般为：\n    net.ipv4.tcp_congestion_control = bbr\n\n    sysctl net.core.default_qdisc\n    返回值一般为：\n    net.core.default_qdisc = fq\n\n    lsmod | grep bbr\n    返回值有 tcp_bbr 模块即说明bbr已启动。\n\n\n# 安装 SSR\n\n执行以下命令:\n\n\n    wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh\n\n    chmod +x shadowsocks-all.sh\n\n    ./shadowsocks-all.sh 2>&1 | tee shadowsocks-all.log\n\n选择 shadowsocksR 进行安装就可以了.\n## SSR 部分命令\n\n    SSR启动 | 停止 | 重启 | 查看状态\n    /etc/init.d/shadowsocks-r start | stop | restart | status\n\n    SSR配置文件路径\n    /etc/shadowsocks-r/config.json\n\n其他设置参考\n系统代理模式: PAC模式\n代理规则: 绕过局域网和大陆\n服务器负载均衡: 关闭\n\n# 更换 IP\n## 取消静态 IP 与服务器的关联\n\n登入[GCP服务控制台](https://console.cloud.google.com/)\n从左侧菜单进入 VPC网络 – 外部IP地址\n点击IP那一栏最右侧的更改\n\n将挂接到改为无, 点确定\n![WX20190628-152905@2x](https://i.loli.net/2019/06/28/5d15c1e12451b77240.png)\n\n\n## 释放旧静态 IP\n点击释放静态 IP 并确定\n\n## 添加新的 IP\n\n![WX20190628-153037@2x](https://i.loli.net/2019/06/28/5d15c277766a138546.png)\n\n挂载到之前创建的实例上就可以了\n\n\n\n","source":"_posts/2019.06.28.gcp.md","raw":"---\ntitle: GCP 搭建 SSR/BBR\ntags: [SSR]\ncategories: 随笔\n---\n\n\n# GCP 介绍\n\n>Google Cloud Platform (以下简称GCP)是Google提供的云平台, 可以用来搭建加速服务, 网站和存储数据.\n\n新用户注册(需要visa 或者其他外汇信用卡)可以获得免费的 300 刀(有效期一年),在这一年里我们可以租用自己的服务器搭建 SSR 或者搭建网站等.一年时间到了以后,信用卡也不会主动扣费(google 说的).\n# 需要准备的东西\n* Gmail\n* 外汇信用卡(VISA 即可)\n* 梯子\n* ssh 客户端\n\n# 注册 GCP\n目前注册时已无法选择中国大陆地区,我在注册的时候选择的是**中国台湾**,地址和邮编自己随便编一下就好了,然后填入信用卡信息,接着通过 Google 的风控系统以后,你的信用卡会被扣除 1 刀(不就便会返还)作为凭证.这样 GCP 就注册完成了.\n\n# 搭建虚机\n## 添加防火墙策略\n访问[https://console.cloud.google.com/networking/firewalls/list](https://console.cloud.google.com/networking/firewalls/list)来配置防火墙.\n\n需要注意的是:\n* 目标修改为: 网络中的所有实例\n* IP地址范围修改为: `0.0.0.0/0`\n* 协议和端口修改为 : 全部允许\n如下图:\n![WX20190628-142813@2x](https://i.loli.net/2019/06/28/5d15b39d07ffb37512.png)\n\n\n## 创建实例\n\n访问[https://console.cloud.google.com/compute/instances](https://console.cloud.google.com/compute/instances)来创建实例.\n\n* 区域选择台湾,地区可以随便选.\n\n* 机器类型选择最低配就可以.\n\n* 启动磁盘,推荐 centos7,方便安装 BBR 以及 SSR\n\n![WX20190628-143213@2x](https://i.loli.net/2019/06/28/5d15b48de083520543.png)\n\n### 添加 ssh 公钥\n在下面的安全选项卡中,输入自己电脑的 SSH 公钥\n\n![WX20190628-143416@2x](https://i.loli.net/2019/06/28/5d15b4f37cc0123773.png)\n\n### 添加静态 IP\n\n在网络选项卡中添加一个新的静态 IP,静态IP一定记得绑定到实例.\n已分配但未被使用的IP, 会按$0.01/小时计费.\n\nip的管理可以到[https://console.cloud.google.com/networking/addresses/list](https://console.cloud.google.com/networking/addresses/list)进行设置.\n\n![WX20190628-143707@2x](https://i.loli.net/2019/06/28/5d15b5a10989185399.png)\n\n### 测试连接\n\n使用 google 自带的 ssh 网页端可以访问到刚刚创建的实例,也可以通过本机自带的 ssh 来连接实例.\n使用本机自带的 ssh 连接实例时,要把本机的 ssh 公钥上传到 gcp 上,注意在上传之前要把公钥字段最后的用户改为 root,方面我们使用 root用户来登录实例.同时,需要修改`/etc/ssh/sshd_config`中的允许 root 登录的选项(`PermitRootLogin`)改为`yes`,接着就可以在本机使用 ssh 连接实例了.\n# 安装 BBR\nroot 账户使用 ssh 连接到实例以后,依次执行以下命令:\n\n    yum install -y wget\n\n    wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh\n\n    chmod +x bbr.sh\n\n    ./bbr.sh\n\n\n安装完成后，脚本会提示需要重启VPS，输入 y 并回车后重启, 这时Xshell连接也会自动断开。\n\nVPS重启可能需要几分钟, 耐心等待一下.\n\n重启完成后，再用Xhell重新连接VPS, sudo -i切换到root用户.\n\n现在验证一下是否成功安装了最新内核并开启BBR.\n输入以下命令：\n\nuname -r\n查看内核版本，如果返回值含有4.13或以上版本, 就表示OK了.\n\n\n    其他命令\n    sysctl net.ipv4.tcp_available_congestion_control\n    返回值一般为：\n    net.ipv4.tcp_available_congestion_control = bbr cubic reno\n\n    sysctl net.ipv4.tcp_congestion_control\n    返回值一般为：\n    net.ipv4.tcp_congestion_control = bbr\n\n    sysctl net.core.default_qdisc\n    返回值一般为：\n    net.core.default_qdisc = fq\n\n    lsmod | grep bbr\n    返回值有 tcp_bbr 模块即说明bbr已启动。\n\n\n# 安装 SSR\n\n执行以下命令:\n\n\n    wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh\n\n    chmod +x shadowsocks-all.sh\n\n    ./shadowsocks-all.sh 2>&1 | tee shadowsocks-all.log\n\n选择 shadowsocksR 进行安装就可以了.\n## SSR 部分命令\n\n    SSR启动 | 停止 | 重启 | 查看状态\n    /etc/init.d/shadowsocks-r start | stop | restart | status\n\n    SSR配置文件路径\n    /etc/shadowsocks-r/config.json\n\n其他设置参考\n系统代理模式: PAC模式\n代理规则: 绕过局域网和大陆\n服务器负载均衡: 关闭\n\n# 更换 IP\n## 取消静态 IP 与服务器的关联\n\n登入[GCP服务控制台](https://console.cloud.google.com/)\n从左侧菜单进入 VPC网络 – 外部IP地址\n点击IP那一栏最右侧的更改\n\n将挂接到改为无, 点确定\n![WX20190628-152905@2x](https://i.loli.net/2019/06/28/5d15c1e12451b77240.png)\n\n\n## 释放旧静态 IP\n点击释放静态 IP 并确定\n\n## 添加新的 IP\n\n![WX20190628-153037@2x](https://i.loli.net/2019/06/28/5d15c277766a138546.png)\n\n挂载到之前创建的实例上就可以了\n\n\n\n","slug":"2019.06.28.gcp","published":1,"date":"2019-06-28T06:08:26.161Z","updated":"2019-06-28T07:56:17.701Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziiq80014rh9z3vjzfkb4","content":"<h1 id=\"GCP-介绍\"><a href=\"#GCP-介绍\" class=\"headerlink\" title=\"GCP 介绍\"></a>GCP 介绍</h1><blockquote>\n<p>Google Cloud Platform (以下简称GCP)是Google提供的云平台, 可以用来搭建加速服务, 网站和存储数据.</p>\n</blockquote>\n<p>新用户注册(需要visa 或者其他外汇信用卡)可以获得免费的 300 刀(有效期一年),在这一年里我们可以租用自己的服务器搭建 SSR 或者搭建网站等.一年时间到了以后,信用卡也不会主动扣费(google 说的).</p>\n<h1 id=\"需要准备的东西\"><a href=\"#需要准备的东西\" class=\"headerlink\" title=\"需要准备的东西\"></a>需要准备的东西</h1><ul>\n<li>Gmail</li>\n<li>外汇信用卡(VISA 即可)</li>\n<li>梯子</li>\n<li>ssh 客户端</li>\n</ul>\n<h1 id=\"注册-GCP\"><a href=\"#注册-GCP\" class=\"headerlink\" title=\"注册 GCP\"></a>注册 GCP</h1><p>目前注册时已无法选择中国大陆地区,我在注册的时候选择的是<strong>中国台湾</strong>,地址和邮编自己随便编一下就好了,然后填入信用卡信息,接着通过 Google 的风控系统以后,你的信用卡会被扣除 1 刀(不就便会返还)作为凭证.这样 GCP 就注册完成了.</p>\n<h1 id=\"搭建虚机\"><a href=\"#搭建虚机\" class=\"headerlink\" title=\"搭建虚机\"></a>搭建虚机</h1><h2 id=\"添加防火墙策略\"><a href=\"#添加防火墙策略\" class=\"headerlink\" title=\"添加防火墙策略\"></a>添加防火墙策略</h2><p>访问<a href=\"https://console.cloud.google.com/networking/firewalls/list\" target=\"_blank\" rel=\"noopener\">https://console.cloud.google.com/networking/firewalls/list</a>来配置防火墙.</p>\n<p>需要注意的是:</p>\n<ul>\n<li>目标修改为: 网络中的所有实例</li>\n<li>IP地址范围修改为: <code>0.0.0.0/0</code></li>\n<li>协议和端口修改为 : 全部允许<br>如下图:<br><img src=\"https://i.loli.net/2019/06/28/5d15b39d07ffb37512.png\" alt=\"WX20190628-142813@2x\"></li>\n</ul>\n<h2 id=\"创建实例\"><a href=\"#创建实例\" class=\"headerlink\" title=\"创建实例\"></a>创建实例</h2><p>访问<a href=\"https://console.cloud.google.com/compute/instances\" target=\"_blank\" rel=\"noopener\">https://console.cloud.google.com/compute/instances</a>来创建实例.</p>\n<ul>\n<li><p>区域选择台湾,地区可以随便选.</p>\n</li>\n<li><p>机器类型选择最低配就可以.</p>\n</li>\n<li><p>启动磁盘,推荐 centos7,方便安装 BBR 以及 SSR</p>\n</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/06/28/5d15b48de083520543.png\" alt=\"WX20190628-143213@2x\"></p>\n<h3 id=\"添加-ssh-公钥\"><a href=\"#添加-ssh-公钥\" class=\"headerlink\" title=\"添加 ssh 公钥\"></a>添加 ssh 公钥</h3><p>在下面的安全选项卡中,输入自己电脑的 SSH 公钥</p>\n<p><img src=\"https://i.loli.net/2019/06/28/5d15b4f37cc0123773.png\" alt=\"WX20190628-143416@2x\"></p>\n<h3 id=\"添加静态-IP\"><a href=\"#添加静态-IP\" class=\"headerlink\" title=\"添加静态 IP\"></a>添加静态 IP</h3><p>在网络选项卡中添加一个新的静态 IP,静态IP一定记得绑定到实例.<br>已分配但未被使用的IP, 会按$0.01/小时计费.</p>\n<p>ip的管理可以到<a href=\"https://console.cloud.google.com/networking/addresses/list\" target=\"_blank\" rel=\"noopener\">https://console.cloud.google.com/networking/addresses/list</a>进行设置.</p>\n<p><img src=\"https://i.loli.net/2019/06/28/5d15b5a10989185399.png\" alt=\"WX20190628-143707@2x\"></p>\n<h3 id=\"测试连接\"><a href=\"#测试连接\" class=\"headerlink\" title=\"测试连接\"></a>测试连接</h3><p>使用 google 自带的 ssh 网页端可以访问到刚刚创建的实例,也可以通过本机自带的 ssh 来连接实例.<br>使用本机自带的 ssh 连接实例时,要把本机的 ssh 公钥上传到 gcp 上,注意在上传之前要把公钥字段最后的用户改为 root,方面我们使用 root用户来登录实例.同时,需要修改<code>/etc/ssh/sshd_config</code>中的允许 root 登录的选项(<code>PermitRootLogin</code>)改为<code>yes</code>,接着就可以在本机使用 ssh 连接实例了.</p>\n<h1 id=\"安装-BBR\"><a href=\"#安装-BBR\" class=\"headerlink\" title=\"安装 BBR\"></a>安装 BBR</h1><p>root 账户使用 ssh 连接到实例以后,依次执行以下命令:</p>\n<pre><code>yum install -y wget\n\nwget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh\n\nchmod +x bbr.sh\n\n./bbr.sh\n</code></pre><p>安装完成后，脚本会提示需要重启VPS，输入 y 并回车后重启, 这时Xshell连接也会自动断开。</p>\n<p>VPS重启可能需要几分钟, 耐心等待一下.</p>\n<p>重启完成后，再用Xhell重新连接VPS, sudo -i切换到root用户.</p>\n<p>现在验证一下是否成功安装了最新内核并开启BBR.<br>输入以下命令：</p>\n<p>uname -r<br>查看内核版本，如果返回值含有4.13或以上版本, 就表示OK了.</p>\n<pre><code>其他命令\nsysctl net.ipv4.tcp_available_congestion_control\n返回值一般为：\nnet.ipv4.tcp_available_congestion_control = bbr cubic reno\n\nsysctl net.ipv4.tcp_congestion_control\n返回值一般为：\nnet.ipv4.tcp_congestion_control = bbr\n\nsysctl net.core.default_qdisc\n返回值一般为：\nnet.core.default_qdisc = fq\n\nlsmod | grep bbr\n返回值有 tcp_bbr 模块即说明bbr已启动。\n</code></pre><h1 id=\"安装-SSR\"><a href=\"#安装-SSR\" class=\"headerlink\" title=\"安装 SSR\"></a>安装 SSR</h1><p>执行以下命令:</p>\n<pre><code>wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh\n\nchmod +x shadowsocks-all.sh\n\n./shadowsocks-all.sh 2&gt;&amp;1 | tee shadowsocks-all.log\n</code></pre><p>选择 shadowsocksR 进行安装就可以了.</p>\n<h2 id=\"SSR-部分命令\"><a href=\"#SSR-部分命令\" class=\"headerlink\" title=\"SSR 部分命令\"></a>SSR 部分命令</h2><pre><code>SSR启动 | 停止 | 重启 | 查看状态\n/etc/init.d/shadowsocks-r start | stop | restart | status\n\nSSR配置文件路径\n/etc/shadowsocks-r/config.json\n</code></pre><p>其他设置参考<br>系统代理模式: PAC模式<br>代理规则: 绕过局域网和大陆<br>服务器负载均衡: 关闭</p>\n<h1 id=\"更换-IP\"><a href=\"#更换-IP\" class=\"headerlink\" title=\"更换 IP\"></a>更换 IP</h1><h2 id=\"取消静态-IP-与服务器的关联\"><a href=\"#取消静态-IP-与服务器的关联\" class=\"headerlink\" title=\"取消静态 IP 与服务器的关联\"></a>取消静态 IP 与服务器的关联</h2><p>登入<a href=\"https://console.cloud.google.com/\" target=\"_blank\" rel=\"noopener\">GCP服务控制台</a><br>从左侧菜单进入 VPC网络 – 外部IP地址<br>点击IP那一栏最右侧的更改</p>\n<p>将挂接到改为无, 点确定<br><img src=\"https://i.loli.net/2019/06/28/5d15c1e12451b77240.png\" alt=\"WX20190628-152905@2x\"></p>\n<h2 id=\"释放旧静态-IP\"><a href=\"#释放旧静态-IP\" class=\"headerlink\" title=\"释放旧静态 IP\"></a>释放旧静态 IP</h2><p>点击释放静态 IP 并确定</p>\n<h2 id=\"添加新的-IP\"><a href=\"#添加新的-IP\" class=\"headerlink\" title=\"添加新的 IP\"></a>添加新的 IP</h2><p><img src=\"https://i.loli.net/2019/06/28/5d15c277766a138546.png\" alt=\"WX20190628-153037@2x\"></p>\n<p>挂载到之前创建的实例上就可以了</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"GCP-介绍\"><a href=\"#GCP-介绍\" class=\"headerlink\" title=\"GCP 介绍\"></a>GCP 介绍</h1><blockquote>\n<p>Google Cloud Platform (以下简称GCP)是Google提供的云平台, 可以用来搭建加速服务, 网站和存储数据.</p>\n</blockquote>\n<p>新用户注册(需要visa 或者其他外汇信用卡)可以获得免费的 300 刀(有效期一年),在这一年里我们可以租用自己的服务器搭建 SSR 或者搭建网站等.一年时间到了以后,信用卡也不会主动扣费(google 说的).</p>\n<h1 id=\"需要准备的东西\"><a href=\"#需要准备的东西\" class=\"headerlink\" title=\"需要准备的东西\"></a>需要准备的东西</h1><ul>\n<li>Gmail</li>\n<li>外汇信用卡(VISA 即可)</li>\n<li>梯子</li>\n<li>ssh 客户端</li>\n</ul>\n<h1 id=\"注册-GCP\"><a href=\"#注册-GCP\" class=\"headerlink\" title=\"注册 GCP\"></a>注册 GCP</h1><p>目前注册时已无法选择中国大陆地区,我在注册的时候选择的是<strong>中国台湾</strong>,地址和邮编自己随便编一下就好了,然后填入信用卡信息,接着通过 Google 的风控系统以后,你的信用卡会被扣除 1 刀(不就便会返还)作为凭证.这样 GCP 就注册完成了.</p>\n<h1 id=\"搭建虚机\"><a href=\"#搭建虚机\" class=\"headerlink\" title=\"搭建虚机\"></a>搭建虚机</h1><h2 id=\"添加防火墙策略\"><a href=\"#添加防火墙策略\" class=\"headerlink\" title=\"添加防火墙策略\"></a>添加防火墙策略</h2><p>访问<a href=\"https://console.cloud.google.com/networking/firewalls/list\" target=\"_blank\" rel=\"noopener\">https://console.cloud.google.com/networking/firewalls/list</a>来配置防火墙.</p>\n<p>需要注意的是:</p>\n<ul>\n<li>目标修改为: 网络中的所有实例</li>\n<li>IP地址范围修改为: <code>0.0.0.0/0</code></li>\n<li>协议和端口修改为 : 全部允许<br>如下图:<br><img src=\"https://i.loli.net/2019/06/28/5d15b39d07ffb37512.png\" alt=\"WX20190628-142813@2x\"></li>\n</ul>\n<h2 id=\"创建实例\"><a href=\"#创建实例\" class=\"headerlink\" title=\"创建实例\"></a>创建实例</h2><p>访问<a href=\"https://console.cloud.google.com/compute/instances\" target=\"_blank\" rel=\"noopener\">https://console.cloud.google.com/compute/instances</a>来创建实例.</p>\n<ul>\n<li><p>区域选择台湾,地区可以随便选.</p>\n</li>\n<li><p>机器类型选择最低配就可以.</p>\n</li>\n<li><p>启动磁盘,推荐 centos7,方便安装 BBR 以及 SSR</p>\n</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/06/28/5d15b48de083520543.png\" alt=\"WX20190628-143213@2x\"></p>\n<h3 id=\"添加-ssh-公钥\"><a href=\"#添加-ssh-公钥\" class=\"headerlink\" title=\"添加 ssh 公钥\"></a>添加 ssh 公钥</h3><p>在下面的安全选项卡中,输入自己电脑的 SSH 公钥</p>\n<p><img src=\"https://i.loli.net/2019/06/28/5d15b4f37cc0123773.png\" alt=\"WX20190628-143416@2x\"></p>\n<h3 id=\"添加静态-IP\"><a href=\"#添加静态-IP\" class=\"headerlink\" title=\"添加静态 IP\"></a>添加静态 IP</h3><p>在网络选项卡中添加一个新的静态 IP,静态IP一定记得绑定到实例.<br>已分配但未被使用的IP, 会按$0.01/小时计费.</p>\n<p>ip的管理可以到<a href=\"https://console.cloud.google.com/networking/addresses/list\" target=\"_blank\" rel=\"noopener\">https://console.cloud.google.com/networking/addresses/list</a>进行设置.</p>\n<p><img src=\"https://i.loli.net/2019/06/28/5d15b5a10989185399.png\" alt=\"WX20190628-143707@2x\"></p>\n<h3 id=\"测试连接\"><a href=\"#测试连接\" class=\"headerlink\" title=\"测试连接\"></a>测试连接</h3><p>使用 google 自带的 ssh 网页端可以访问到刚刚创建的实例,也可以通过本机自带的 ssh 来连接实例.<br>使用本机自带的 ssh 连接实例时,要把本机的 ssh 公钥上传到 gcp 上,注意在上传之前要把公钥字段最后的用户改为 root,方面我们使用 root用户来登录实例.同时,需要修改<code>/etc/ssh/sshd_config</code>中的允许 root 登录的选项(<code>PermitRootLogin</code>)改为<code>yes</code>,接着就可以在本机使用 ssh 连接实例了.</p>\n<h1 id=\"安装-BBR\"><a href=\"#安装-BBR\" class=\"headerlink\" title=\"安装 BBR\"></a>安装 BBR</h1><p>root 账户使用 ssh 连接到实例以后,依次执行以下命令:</p>\n<pre><code>yum install -y wget\n\nwget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh\n\nchmod +x bbr.sh\n\n./bbr.sh\n</code></pre><p>安装完成后，脚本会提示需要重启VPS，输入 y 并回车后重启, 这时Xshell连接也会自动断开。</p>\n<p>VPS重启可能需要几分钟, 耐心等待一下.</p>\n<p>重启完成后，再用Xhell重新连接VPS, sudo -i切换到root用户.</p>\n<p>现在验证一下是否成功安装了最新内核并开启BBR.<br>输入以下命令：</p>\n<p>uname -r<br>查看内核版本，如果返回值含有4.13或以上版本, 就表示OK了.</p>\n<pre><code>其他命令\nsysctl net.ipv4.tcp_available_congestion_control\n返回值一般为：\nnet.ipv4.tcp_available_congestion_control = bbr cubic reno\n\nsysctl net.ipv4.tcp_congestion_control\n返回值一般为：\nnet.ipv4.tcp_congestion_control = bbr\n\nsysctl net.core.default_qdisc\n返回值一般为：\nnet.core.default_qdisc = fq\n\nlsmod | grep bbr\n返回值有 tcp_bbr 模块即说明bbr已启动。\n</code></pre><h1 id=\"安装-SSR\"><a href=\"#安装-SSR\" class=\"headerlink\" title=\"安装 SSR\"></a>安装 SSR</h1><p>执行以下命令:</p>\n<pre><code>wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh\n\nchmod +x shadowsocks-all.sh\n\n./shadowsocks-all.sh 2&gt;&amp;1 | tee shadowsocks-all.log\n</code></pre><p>选择 shadowsocksR 进行安装就可以了.</p>\n<h2 id=\"SSR-部分命令\"><a href=\"#SSR-部分命令\" class=\"headerlink\" title=\"SSR 部分命令\"></a>SSR 部分命令</h2><pre><code>SSR启动 | 停止 | 重启 | 查看状态\n/etc/init.d/shadowsocks-r start | stop | restart | status\n\nSSR配置文件路径\n/etc/shadowsocks-r/config.json\n</code></pre><p>其他设置参考<br>系统代理模式: PAC模式<br>代理规则: 绕过局域网和大陆<br>服务器负载均衡: 关闭</p>\n<h1 id=\"更换-IP\"><a href=\"#更换-IP\" class=\"headerlink\" title=\"更换 IP\"></a>更换 IP</h1><h2 id=\"取消静态-IP-与服务器的关联\"><a href=\"#取消静态-IP-与服务器的关联\" class=\"headerlink\" title=\"取消静态 IP 与服务器的关联\"></a>取消静态 IP 与服务器的关联</h2><p>登入<a href=\"https://console.cloud.google.com/\" target=\"_blank\" rel=\"noopener\">GCP服务控制台</a><br>从左侧菜单进入 VPC网络 – 外部IP地址<br>点击IP那一栏最右侧的更改</p>\n<p>将挂接到改为无, 点确定<br><img src=\"https://i.loli.net/2019/06/28/5d15c1e12451b77240.png\" alt=\"WX20190628-152905@2x\"></p>\n<h2 id=\"释放旧静态-IP\"><a href=\"#释放旧静态-IP\" class=\"headerlink\" title=\"释放旧静态 IP\"></a>释放旧静态 IP</h2><p>点击释放静态 IP 并确定</p>\n<h2 id=\"添加新的-IP\"><a href=\"#添加新的-IP\" class=\"headerlink\" title=\"添加新的 IP\"></a>添加新的 IP</h2><p><img src=\"https://i.loli.net/2019/06/28/5d15c277766a138546.png\" alt=\"WX20190628-153037@2x\"></p>\n<p>挂载到之前创建的实例上就可以了</p>\n"},{"title":"初识 nginx","_content":"# 什么是 NGINX\n>Nginx 是一个免费的，开源的，高性能的HTTP服务器和反向代理，以及IMAP / POP3代理服务器。 Nginx 以其高性能，稳定性，丰富的功能，简单的配置和低资源消耗而闻名。很多高知名度的网站都使用 Nginx，如：Netflix，GitHub，SoundCloud，MaxCDN 等。\n\nNginx 有一个主线程（ master process）和几个工作线程（worker process）。主线程的目的是加载和验证配置文件、维护工作线程。\n\n工作线程处理实际的请求，Nginx 采用基于事件的模型和依赖操作系统的机制在工作线程之间高效地分发请求。工作线程的数量可配置，也可自动调整为服务器CPU的数量。\n\nNginx 及其模块的工作方式由配置文件确定。 默认情况下，配置文件名为 nginx.conf，放在 /usr/local/nginx/conf 、/etc/nginx 或者 /usr/local/etc/nginx 文件夹中。\n\n## nginx 的基本命令\n\n        nginx -s <signal>\n\n其中-s意思是向主进程发送信号，signal可以为以下四个中的一个:\n\n* stop — 快速关闭\n* quit — 优雅关闭\n* reload — 重新加载配置文件\n* reopen — 重新打开日志文件\n\n当运行nginx -s quit时，Nginx 会等待工作进程处理完成当前请求，然后将其关闭。当你修改配置文件后，并不会立即生效，而是等待重启或者收到nginx -s reload信号。\n\n当 Nginx 收到 nginx -s reload 信号后，首先检查配置文件的语法。语法正确后，主线程会开启新的工作线程并向旧的工作线程发送关闭信号，如果语法不正确，则主线程回滚变化并继续使用旧的配置。当工作进程收到主进程的关闭信号后，会在处理完当前请求之后退出。\n\n## 配置文件\n\nNginx 配置的核心是定义要处理的 URL 以及如何响应这些 URL 请求，即定义一系列的虚拟服务器（Virtual Servers）控制对来自特定域名或者 IP 的请求的处理。\n\n每一个虚拟服务器定义一系列的 location 控制处理特定的 URI 集合。每一个location定义了对映射到自己的请求的处理场景，可以返回一个文件或者代理此请求。\n\nNginx 由不同的模块组成，这些模块由配置文件中指定的指令控制。 指令分为简单指令和块指令。\n\n一个简单指令包含指令名称和指令参数，以空格分隔，以分号（;）结尾。 块指令与简单指令类似，但是由大括号（{和}）包围。 如果块指令大括号中包含其他指令，则称该指令为上下文（如： events, http, server 和 location）。\n\n配置文件中的放在上下文之外的指令默认放在主配置文件中（类似继承主配置文件）。 events 和 http 放置在主配置文件中，server 放置在http块指令中，location放置在server块指令中。\n\n配置文件的注释以 # 开始。\n\n例如: \n\n    events {\n        worker_connections  1024;\n    }\n    http {\n        include       mime.types;\n        default_type  application/octet-stream;\n        sendfile        on;\n        keepalive_timeout  65;\n        server {\n            listen       80;\n            server_name  localhost;\n            location ~ .*\\.(flv|mp3|mp4|ts)$ {\n                add_header Content-Disposition \"attachment; filename=$request_filename\";\n                root /replay/;\n                }\n            location / {\n                root   web/html/live;\n                index  index.html;\n                }\n            location /wap {\n                alias   /web/wap;\n                index  index.html;\n            }\t\n            error_page   500 502 503 504  /50x.html;\n            location = /50x.html {\n                root   html;\n            }\n        }\n\n\n\n## 静态内容\n\nWeb 服务器一个重要的功能是服务静态文件（图像或静态HTML页面）。例如，Nginx 可以很方便的让服务器从/data/www 获取 html 文件，从/data/images获取图片来返回给客户端，这只需要在http块指令中的server块指令中设置两个location块指令。\n\n首先，创建 /data/www 目录，并放入 index.html，创建 /data/images 目录并在其中放置一些图片。\n\n接下来，打开配置文件。 创建一个 server 块：\n\n    http {\n    server {\n    }\n}\n\n上面的 location 块指定 / 前缀与请求中的 URI 对比。对于匹配的请求，URI 将被添加到 root 指令中指定的路径，即 /data/www，以此形成本地文件系统的路径，如访问http://localhost/bog/welcome.html，对应服务器文件路径为/data/www/bog/welcome.html。 如果 URI 匹配多个 location 块，Nginx 采用最长前缀匹配原则（类似计算机网络里面的IP匹配）， 上面的 location 块前缀长度为 1，因此只有当所有其他 location 块匹配时，才使用该块。\n接下来，添加第二个位置块：\n\n    location /images/ {\n        root /data;\n    }\n它将匹配以/images/（/ 也匹配这样的请求，但具有较短的前缀）开始的请求。\n\nserver 块的最终配置如下：\n\n    server {\n        location / {\n            root /data/www;\n        }\n\n        location /images/ {\n            root /data;\n        }\n    }\n\n到目前为止，这已经是一个可以正常运行的服务器，它监听端口80，并且可以在本地计算机上访问 http://localhost/。 对于 /images/ 开头的请求，服务器将从 /data/images 目录发送文件。 如，对于 http://localhost/images/example.png 请求，nginx 将响应 /data/images/example.png文件。 如果不存在，nginx 将返回404。URI 不以 /images/ 开头的请求将映射到 /data/www 目录。 例如，对于 http://localhost/some/example.html 请求，nginx 将响应 /data/www/some/example.html 文件。\n\n## 代理服务器\n\n\nNginx 的一个常见应用是将其设置为代理服务器（Proxy Server），即接受客户端的请求并将其转发给代理服务器，再接受代理服务器发来的响应，将它们发送到客户端。\n\n比如我们可以用一个 Nginx 实例实现对图片文件的请求使用本地文件系统，而其他请求转发到代理服务器。\n\n首先，向 Nginx 的配置文件中添加一个 server 块来定义代理服务器：\n\n    server {\n        listen 8080;\n        root /data/up1;\n\n        location / {\n        }\n    }\n\n\n此服务器侦听端口8080，并将所有请求映射到本地文件系统上的 /data/up1 目录。 创建此目录并将 index.html 放入其中。 注意，root 指令放在 server 上下文中，这样 当 location 块中不含 root 指令时将使用所属 server 的 root 指令。\n\n接下来，使用上一节中的服务器配置，并将其修改为代理服务器配置。 在第一个位置块中，加上proxy_pass指令：\n\n    server {\n        location / {\n            # proxy_pass指令的参数为：协议+主机名+端口号\n            proxy_pass http://localhost:8080;\n        }\n\n        location /images/ {\n            root /data;\n        }\n    }\n修改第二个 匹配 /images/ 前缀的 location 块，使其与请求图像文件的扩展名相匹配：\n\n    location ~ \\.(gif|jpg|png)$ {\n        root /data/images;\n    }\n    \n该参数是一个正则表达式，匹配以.gif，.jpg或.png结尾的所有URI。 正则表达式应该以 ~ 开头。 相应的请求将映射到 /data/images 目录。\n\n当 Nginx 选择一个 location 块来处理请求时，它首先检查指定 location 块的前缀，记住具有最长前缀的 location 块，然后检查正则表达式。 如果与正则表达式匹配， Nginx 选择此 location 块，否则，选择先前记住的 location 块。\n\n代理服务器的最终配置如下：\n\n    server {\n        location / {\n            proxy_pass http://localhost:8080/;\n        }\n\n        location ~ \\.(gif|jpg|png)$ {\n            root /data/images;\n        }\n    }\n此服务器将过滤以.gif，.jpg或.png结尾的请求，并将它们映射到 /data/images 目录（通过向 root 指令的参数添加请求的URI），并将所有其他请求发送给上面配置的代理服务器。\n\n这样，图片和其他请求就可以使用不同的服务器来处理。","source":"_posts/2019.06.13.nginx.md","raw":"---\ntitle: 初识 nginx\ntags: [服务器]\ncategories: 技术\n---\n# 什么是 NGINX\n>Nginx 是一个免费的，开源的，高性能的HTTP服务器和反向代理，以及IMAP / POP3代理服务器。 Nginx 以其高性能，稳定性，丰富的功能，简单的配置和低资源消耗而闻名。很多高知名度的网站都使用 Nginx，如：Netflix，GitHub，SoundCloud，MaxCDN 等。\n\nNginx 有一个主线程（ master process）和几个工作线程（worker process）。主线程的目的是加载和验证配置文件、维护工作线程。\n\n工作线程处理实际的请求，Nginx 采用基于事件的模型和依赖操作系统的机制在工作线程之间高效地分发请求。工作线程的数量可配置，也可自动调整为服务器CPU的数量。\n\nNginx 及其模块的工作方式由配置文件确定。 默认情况下，配置文件名为 nginx.conf，放在 /usr/local/nginx/conf 、/etc/nginx 或者 /usr/local/etc/nginx 文件夹中。\n\n## nginx 的基本命令\n\n        nginx -s <signal>\n\n其中-s意思是向主进程发送信号，signal可以为以下四个中的一个:\n\n* stop — 快速关闭\n* quit — 优雅关闭\n* reload — 重新加载配置文件\n* reopen — 重新打开日志文件\n\n当运行nginx -s quit时，Nginx 会等待工作进程处理完成当前请求，然后将其关闭。当你修改配置文件后，并不会立即生效，而是等待重启或者收到nginx -s reload信号。\n\n当 Nginx 收到 nginx -s reload 信号后，首先检查配置文件的语法。语法正确后，主线程会开启新的工作线程并向旧的工作线程发送关闭信号，如果语法不正确，则主线程回滚变化并继续使用旧的配置。当工作进程收到主进程的关闭信号后，会在处理完当前请求之后退出。\n\n## 配置文件\n\nNginx 配置的核心是定义要处理的 URL 以及如何响应这些 URL 请求，即定义一系列的虚拟服务器（Virtual Servers）控制对来自特定域名或者 IP 的请求的处理。\n\n每一个虚拟服务器定义一系列的 location 控制处理特定的 URI 集合。每一个location定义了对映射到自己的请求的处理场景，可以返回一个文件或者代理此请求。\n\nNginx 由不同的模块组成，这些模块由配置文件中指定的指令控制。 指令分为简单指令和块指令。\n\n一个简单指令包含指令名称和指令参数，以空格分隔，以分号（;）结尾。 块指令与简单指令类似，但是由大括号（{和}）包围。 如果块指令大括号中包含其他指令，则称该指令为上下文（如： events, http, server 和 location）。\n\n配置文件中的放在上下文之外的指令默认放在主配置文件中（类似继承主配置文件）。 events 和 http 放置在主配置文件中，server 放置在http块指令中，location放置在server块指令中。\n\n配置文件的注释以 # 开始。\n\n例如: \n\n    events {\n        worker_connections  1024;\n    }\n    http {\n        include       mime.types;\n        default_type  application/octet-stream;\n        sendfile        on;\n        keepalive_timeout  65;\n        server {\n            listen       80;\n            server_name  localhost;\n            location ~ .*\\.(flv|mp3|mp4|ts)$ {\n                add_header Content-Disposition \"attachment; filename=$request_filename\";\n                root /replay/;\n                }\n            location / {\n                root   web/html/live;\n                index  index.html;\n                }\n            location /wap {\n                alias   /web/wap;\n                index  index.html;\n            }\t\n            error_page   500 502 503 504  /50x.html;\n            location = /50x.html {\n                root   html;\n            }\n        }\n\n\n\n## 静态内容\n\nWeb 服务器一个重要的功能是服务静态文件（图像或静态HTML页面）。例如，Nginx 可以很方便的让服务器从/data/www 获取 html 文件，从/data/images获取图片来返回给客户端，这只需要在http块指令中的server块指令中设置两个location块指令。\n\n首先，创建 /data/www 目录，并放入 index.html，创建 /data/images 目录并在其中放置一些图片。\n\n接下来，打开配置文件。 创建一个 server 块：\n\n    http {\n    server {\n    }\n}\n\n上面的 location 块指定 / 前缀与请求中的 URI 对比。对于匹配的请求，URI 将被添加到 root 指令中指定的路径，即 /data/www，以此形成本地文件系统的路径，如访问http://localhost/bog/welcome.html，对应服务器文件路径为/data/www/bog/welcome.html。 如果 URI 匹配多个 location 块，Nginx 采用最长前缀匹配原则（类似计算机网络里面的IP匹配）， 上面的 location 块前缀长度为 1，因此只有当所有其他 location 块匹配时，才使用该块。\n接下来，添加第二个位置块：\n\n    location /images/ {\n        root /data;\n    }\n它将匹配以/images/（/ 也匹配这样的请求，但具有较短的前缀）开始的请求。\n\nserver 块的最终配置如下：\n\n    server {\n        location / {\n            root /data/www;\n        }\n\n        location /images/ {\n            root /data;\n        }\n    }\n\n到目前为止，这已经是一个可以正常运行的服务器，它监听端口80，并且可以在本地计算机上访问 http://localhost/。 对于 /images/ 开头的请求，服务器将从 /data/images 目录发送文件。 如，对于 http://localhost/images/example.png 请求，nginx 将响应 /data/images/example.png文件。 如果不存在，nginx 将返回404。URI 不以 /images/ 开头的请求将映射到 /data/www 目录。 例如，对于 http://localhost/some/example.html 请求，nginx 将响应 /data/www/some/example.html 文件。\n\n## 代理服务器\n\n\nNginx 的一个常见应用是将其设置为代理服务器（Proxy Server），即接受客户端的请求并将其转发给代理服务器，再接受代理服务器发来的响应，将它们发送到客户端。\n\n比如我们可以用一个 Nginx 实例实现对图片文件的请求使用本地文件系统，而其他请求转发到代理服务器。\n\n首先，向 Nginx 的配置文件中添加一个 server 块来定义代理服务器：\n\n    server {\n        listen 8080;\n        root /data/up1;\n\n        location / {\n        }\n    }\n\n\n此服务器侦听端口8080，并将所有请求映射到本地文件系统上的 /data/up1 目录。 创建此目录并将 index.html 放入其中。 注意，root 指令放在 server 上下文中，这样 当 location 块中不含 root 指令时将使用所属 server 的 root 指令。\n\n接下来，使用上一节中的服务器配置，并将其修改为代理服务器配置。 在第一个位置块中，加上proxy_pass指令：\n\n    server {\n        location / {\n            # proxy_pass指令的参数为：协议+主机名+端口号\n            proxy_pass http://localhost:8080;\n        }\n\n        location /images/ {\n            root /data;\n        }\n    }\n修改第二个 匹配 /images/ 前缀的 location 块，使其与请求图像文件的扩展名相匹配：\n\n    location ~ \\.(gif|jpg|png)$ {\n        root /data/images;\n    }\n    \n该参数是一个正则表达式，匹配以.gif，.jpg或.png结尾的所有URI。 正则表达式应该以 ~ 开头。 相应的请求将映射到 /data/images 目录。\n\n当 Nginx 选择一个 location 块来处理请求时，它首先检查指定 location 块的前缀，记住具有最长前缀的 location 块，然后检查正则表达式。 如果与正则表达式匹配， Nginx 选择此 location 块，否则，选择先前记住的 location 块。\n\n代理服务器的最终配置如下：\n\n    server {\n        location / {\n            proxy_pass http://localhost:8080/;\n        }\n\n        location ~ \\.(gif|jpg|png)$ {\n            root /data/images;\n        }\n    }\n此服务器将过滤以.gif，.jpg或.png结尾的请求，并将它们映射到 /data/images 目录（通过向 root 指令的参数添加请求的URI），并将所有其他请求发送给上面配置的代理服务器。\n\n这样，图片和其他请求就可以使用不同的服务器来处理。","slug":"2019.06.13.nginx","published":1,"date":"2019-06-13T06:49:36.328Z","updated":"2019-06-14T02:02:23.723Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziiq90015rh9zc55c4cby","content":"<h1 id=\"什么是-NGINX\"><a href=\"#什么是-NGINX\" class=\"headerlink\" title=\"什么是 NGINX\"></a>什么是 NGINX</h1><blockquote>\n<p>Nginx 是一个免费的，开源的，高性能的HTTP服务器和反向代理，以及IMAP / POP3代理服务器。 Nginx 以其高性能，稳定性，丰富的功能，简单的配置和低资源消耗而闻名。很多高知名度的网站都使用 Nginx，如：Netflix，GitHub，SoundCloud，MaxCDN 等。</p>\n</blockquote>\n<p>Nginx 有一个主线程（ master process）和几个工作线程（worker process）。主线程的目的是加载和验证配置文件、维护工作线程。</p>\n<p>工作线程处理实际的请求，Nginx 采用基于事件的模型和依赖操作系统的机制在工作线程之间高效地分发请求。工作线程的数量可配置，也可自动调整为服务器CPU的数量。</p>\n<p>Nginx 及其模块的工作方式由配置文件确定。 默认情况下，配置文件名为 nginx.conf，放在 /usr/local/nginx/conf 、/etc/nginx 或者 /usr/local/etc/nginx 文件夹中。</p>\n<h2 id=\"nginx-的基本命令\"><a href=\"#nginx-的基本命令\" class=\"headerlink\" title=\"nginx 的基本命令\"></a>nginx 的基本命令</h2><pre><code>nginx -s &lt;signal&gt;\n</code></pre><p>其中-s意思是向主进程发送信号，signal可以为以下四个中的一个:</p>\n<ul>\n<li>stop — 快速关闭</li>\n<li>quit — 优雅关闭</li>\n<li>reload — 重新加载配置文件</li>\n<li>reopen — 重新打开日志文件</li>\n</ul>\n<p>当运行nginx -s quit时，Nginx 会等待工作进程处理完成当前请求，然后将其关闭。当你修改配置文件后，并不会立即生效，而是等待重启或者收到nginx -s reload信号。</p>\n<p>当 Nginx 收到 nginx -s reload 信号后，首先检查配置文件的语法。语法正确后，主线程会开启新的工作线程并向旧的工作线程发送关闭信号，如果语法不正确，则主线程回滚变化并继续使用旧的配置。当工作进程收到主进程的关闭信号后，会在处理完当前请求之后退出。</p>\n<h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><p>Nginx 配置的核心是定义要处理的 URL 以及如何响应这些 URL 请求，即定义一系列的虚拟服务器（Virtual Servers）控制对来自特定域名或者 IP 的请求的处理。</p>\n<p>每一个虚拟服务器定义一系列的 location 控制处理特定的 URI 集合。每一个location定义了对映射到自己的请求的处理场景，可以返回一个文件或者代理此请求。</p>\n<p>Nginx 由不同的模块组成，这些模块由配置文件中指定的指令控制。 指令分为简单指令和块指令。</p>\n<p>一个简单指令包含指令名称和指令参数，以空格分隔，以分号（;）结尾。 块指令与简单指令类似，但是由大括号（{和}）包围。 如果块指令大括号中包含其他指令，则称该指令为上下文（如： events, http, server 和 location）。</p>\n<p>配置文件中的放在上下文之外的指令默认放在主配置文件中（类似继承主配置文件）。 events 和 http 放置在主配置文件中，server 放置在http块指令中，location放置在server块指令中。</p>\n<p>配置文件的注释以 # 开始。</p>\n<p>例如: </p>\n<pre><code>events {\n    worker_connections  1024;\n}\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n    sendfile        on;\n    keepalive_timeout  65;\n    server {\n        listen       80;\n        server_name  localhost;\n        location ~ .*\\.(flv|mp3|mp4|ts)$ {\n            add_header Content-Disposition &quot;attachment; filename=$request_filename&quot;;\n            root /replay/;\n            }\n        location / {\n            root   web/html/live;\n            index  index.html;\n            }\n        location /wap {\n            alias   /web/wap;\n            index  index.html;\n        }    \n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }\n</code></pre><h2 id=\"静态内容\"><a href=\"#静态内容\" class=\"headerlink\" title=\"静态内容\"></a>静态内容</h2><p>Web 服务器一个重要的功能是服务静态文件（图像或静态HTML页面）。例如，Nginx 可以很方便的让服务器从/data/www 获取 html 文件，从/data/images获取图片来返回给客户端，这只需要在http块指令中的server块指令中设置两个location块指令。</p>\n<p>首先，创建 /data/www 目录，并放入 index.html，创建 /data/images 目录并在其中放置一些图片。</p>\n<p>接下来，打开配置文件。 创建一个 server 块：</p>\n<pre><code>http {\nserver {\n}\n</code></pre><p>}</p>\n<p>上面的 location 块指定 / 前缀与请求中的 URI 对比。对于匹配的请求，URI 将被添加到 root 指令中指定的路径，即 /data/www，以此形成本地文件系统的路径，如访问<a href=\"http://localhost/bog/welcome.html，对应服务器文件路径为/data/www/bog/welcome.html。\" target=\"_blank\" rel=\"noopener\">http://localhost/bog/welcome.html，对应服务器文件路径为/data/www/bog/welcome.html。</a> 如果 URI 匹配多个 location 块，Nginx 采用最长前缀匹配原则（类似计算机网络里面的IP匹配）， 上面的 location 块前缀长度为 1，因此只有当所有其他 location 块匹配时，才使用该块。<br>接下来，添加第二个位置块：</p>\n<pre><code>location /images/ {\n    root /data;\n}\n</code></pre><p>它将匹配以/images/（/ 也匹配这样的请求，但具有较短的前缀）开始的请求。</p>\n<p>server 块的最终配置如下：</p>\n<pre><code>server {\n    location / {\n        root /data/www;\n    }\n\n    location /images/ {\n        root /data;\n    }\n}\n</code></pre><p>到目前为止，这已经是一个可以正常运行的服务器，它监听端口80，并且可以在本地计算机上访问 <a href=\"http://localhost/。\" target=\"_blank\" rel=\"noopener\">http://localhost/。</a> 对于 /images/ 开头的请求，服务器将从 /data/images 目录发送文件。 如，对于 <a href=\"http://localhost/images/example.png\" target=\"_blank\" rel=\"noopener\">http://localhost/images/example.png</a> 请求，nginx 将响应 /data/images/example.png文件。 如果不存在，nginx 将返回404。URI 不以 /images/ 开头的请求将映射到 /data/www 目录。 例如，对于 <a href=\"http://localhost/some/example.html\" target=\"_blank\" rel=\"noopener\">http://localhost/some/example.html</a> 请求，nginx 将响应 /data/www/some/example.html 文件。</p>\n<h2 id=\"代理服务器\"><a href=\"#代理服务器\" class=\"headerlink\" title=\"代理服务器\"></a>代理服务器</h2><p>Nginx 的一个常见应用是将其设置为代理服务器（Proxy Server），即接受客户端的请求并将其转发给代理服务器，再接受代理服务器发来的响应，将它们发送到客户端。</p>\n<p>比如我们可以用一个 Nginx 实例实现对图片文件的请求使用本地文件系统，而其他请求转发到代理服务器。</p>\n<p>首先，向 Nginx 的配置文件中添加一个 server 块来定义代理服务器：</p>\n<pre><code>server {\n    listen 8080;\n    root /data/up1;\n\n    location / {\n    }\n}\n</code></pre><p>此服务器侦听端口8080，并将所有请求映射到本地文件系统上的 /data/up1 目录。 创建此目录并将 index.html 放入其中。 注意，root 指令放在 server 上下文中，这样 当 location 块中不含 root 指令时将使用所属 server 的 root 指令。</p>\n<p>接下来，使用上一节中的服务器配置，并将其修改为代理服务器配置。 在第一个位置块中，加上proxy_pass指令：</p>\n<pre><code>server {\n    location / {\n        # proxy_pass指令的参数为：协议+主机名+端口号\n        proxy_pass http://localhost:8080;\n    }\n\n    location /images/ {\n        root /data;\n    }\n}\n</code></pre><p>修改第二个 匹配 /images/ 前缀的 location 块，使其与请求图像文件的扩展名相匹配：</p>\n<pre><code>location ~ \\.(gif|jpg|png)$ {\n    root /data/images;\n}\n</code></pre><p>该参数是一个正则表达式，匹配以.gif，.jpg或.png结尾的所有URI。 正则表达式应该以 ~ 开头。 相应的请求将映射到 /data/images 目录。</p>\n<p>当 Nginx 选择一个 location 块来处理请求时，它首先检查指定 location 块的前缀，记住具有最长前缀的 location 块，然后检查正则表达式。 如果与正则表达式匹配， Nginx 选择此 location 块，否则，选择先前记住的 location 块。</p>\n<p>代理服务器的最终配置如下：</p>\n<pre><code>server {\n    location / {\n        proxy_pass http://localhost:8080/;\n    }\n\n    location ~ \\.(gif|jpg|png)$ {\n        root /data/images;\n    }\n}\n</code></pre><p>此服务器将过滤以.gif，.jpg或.png结尾的请求，并将它们映射到 /data/images 目录（通过向 root 指令的参数添加请求的URI），并将所有其他请求发送给上面配置的代理服务器。</p>\n<p>这样，图片和其他请求就可以使用不同的服务器来处理。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"什么是-NGINX\"><a href=\"#什么是-NGINX\" class=\"headerlink\" title=\"什么是 NGINX\"></a>什么是 NGINX</h1><blockquote>\n<p>Nginx 是一个免费的，开源的，高性能的HTTP服务器和反向代理，以及IMAP / POP3代理服务器。 Nginx 以其高性能，稳定性，丰富的功能，简单的配置和低资源消耗而闻名。很多高知名度的网站都使用 Nginx，如：Netflix，GitHub，SoundCloud，MaxCDN 等。</p>\n</blockquote>\n<p>Nginx 有一个主线程（ master process）和几个工作线程（worker process）。主线程的目的是加载和验证配置文件、维护工作线程。</p>\n<p>工作线程处理实际的请求，Nginx 采用基于事件的模型和依赖操作系统的机制在工作线程之间高效地分发请求。工作线程的数量可配置，也可自动调整为服务器CPU的数量。</p>\n<p>Nginx 及其模块的工作方式由配置文件确定。 默认情况下，配置文件名为 nginx.conf，放在 /usr/local/nginx/conf 、/etc/nginx 或者 /usr/local/etc/nginx 文件夹中。</p>\n<h2 id=\"nginx-的基本命令\"><a href=\"#nginx-的基本命令\" class=\"headerlink\" title=\"nginx 的基本命令\"></a>nginx 的基本命令</h2><pre><code>nginx -s &lt;signal&gt;\n</code></pre><p>其中-s意思是向主进程发送信号，signal可以为以下四个中的一个:</p>\n<ul>\n<li>stop — 快速关闭</li>\n<li>quit — 优雅关闭</li>\n<li>reload — 重新加载配置文件</li>\n<li>reopen — 重新打开日志文件</li>\n</ul>\n<p>当运行nginx -s quit时，Nginx 会等待工作进程处理完成当前请求，然后将其关闭。当你修改配置文件后，并不会立即生效，而是等待重启或者收到nginx -s reload信号。</p>\n<p>当 Nginx 收到 nginx -s reload 信号后，首先检查配置文件的语法。语法正确后，主线程会开启新的工作线程并向旧的工作线程发送关闭信号，如果语法不正确，则主线程回滚变化并继续使用旧的配置。当工作进程收到主进程的关闭信号后，会在处理完当前请求之后退出。</p>\n<h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><p>Nginx 配置的核心是定义要处理的 URL 以及如何响应这些 URL 请求，即定义一系列的虚拟服务器（Virtual Servers）控制对来自特定域名或者 IP 的请求的处理。</p>\n<p>每一个虚拟服务器定义一系列的 location 控制处理特定的 URI 集合。每一个location定义了对映射到自己的请求的处理场景，可以返回一个文件或者代理此请求。</p>\n<p>Nginx 由不同的模块组成，这些模块由配置文件中指定的指令控制。 指令分为简单指令和块指令。</p>\n<p>一个简单指令包含指令名称和指令参数，以空格分隔，以分号（;）结尾。 块指令与简单指令类似，但是由大括号（{和}）包围。 如果块指令大括号中包含其他指令，则称该指令为上下文（如： events, http, server 和 location）。</p>\n<p>配置文件中的放在上下文之外的指令默认放在主配置文件中（类似继承主配置文件）。 events 和 http 放置在主配置文件中，server 放置在http块指令中，location放置在server块指令中。</p>\n<p>配置文件的注释以 # 开始。</p>\n<p>例如: </p>\n<pre><code>events {\n    worker_connections  1024;\n}\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n    sendfile        on;\n    keepalive_timeout  65;\n    server {\n        listen       80;\n        server_name  localhost;\n        location ~ .*\\.(flv|mp3|mp4|ts)$ {\n            add_header Content-Disposition &quot;attachment; filename=$request_filename&quot;;\n            root /replay/;\n            }\n        location / {\n            root   web/html/live;\n            index  index.html;\n            }\n        location /wap {\n            alias   /web/wap;\n            index  index.html;\n        }    \n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }\n</code></pre><h2 id=\"静态内容\"><a href=\"#静态内容\" class=\"headerlink\" title=\"静态内容\"></a>静态内容</h2><p>Web 服务器一个重要的功能是服务静态文件（图像或静态HTML页面）。例如，Nginx 可以很方便的让服务器从/data/www 获取 html 文件，从/data/images获取图片来返回给客户端，这只需要在http块指令中的server块指令中设置两个location块指令。</p>\n<p>首先，创建 /data/www 目录，并放入 index.html，创建 /data/images 目录并在其中放置一些图片。</p>\n<p>接下来，打开配置文件。 创建一个 server 块：</p>\n<pre><code>http {\nserver {\n}\n</code></pre><p>}</p>\n<p>上面的 location 块指定 / 前缀与请求中的 URI 对比。对于匹配的请求，URI 将被添加到 root 指令中指定的路径，即 /data/www，以此形成本地文件系统的路径，如访问<a href=\"http://localhost/bog/welcome.html，对应服务器文件路径为/data/www/bog/welcome.html。\" target=\"_blank\" rel=\"noopener\">http://localhost/bog/welcome.html，对应服务器文件路径为/data/www/bog/welcome.html。</a> 如果 URI 匹配多个 location 块，Nginx 采用最长前缀匹配原则（类似计算机网络里面的IP匹配）， 上面的 location 块前缀长度为 1，因此只有当所有其他 location 块匹配时，才使用该块。<br>接下来，添加第二个位置块：</p>\n<pre><code>location /images/ {\n    root /data;\n}\n</code></pre><p>它将匹配以/images/（/ 也匹配这样的请求，但具有较短的前缀）开始的请求。</p>\n<p>server 块的最终配置如下：</p>\n<pre><code>server {\n    location / {\n        root /data/www;\n    }\n\n    location /images/ {\n        root /data;\n    }\n}\n</code></pre><p>到目前为止，这已经是一个可以正常运行的服务器，它监听端口80，并且可以在本地计算机上访问 <a href=\"http://localhost/。\" target=\"_blank\" rel=\"noopener\">http://localhost/。</a> 对于 /images/ 开头的请求，服务器将从 /data/images 目录发送文件。 如，对于 <a href=\"http://localhost/images/example.png\" target=\"_blank\" rel=\"noopener\">http://localhost/images/example.png</a> 请求，nginx 将响应 /data/images/example.png文件。 如果不存在，nginx 将返回404。URI 不以 /images/ 开头的请求将映射到 /data/www 目录。 例如，对于 <a href=\"http://localhost/some/example.html\" target=\"_blank\" rel=\"noopener\">http://localhost/some/example.html</a> 请求，nginx 将响应 /data/www/some/example.html 文件。</p>\n<h2 id=\"代理服务器\"><a href=\"#代理服务器\" class=\"headerlink\" title=\"代理服务器\"></a>代理服务器</h2><p>Nginx 的一个常见应用是将其设置为代理服务器（Proxy Server），即接受客户端的请求并将其转发给代理服务器，再接受代理服务器发来的响应，将它们发送到客户端。</p>\n<p>比如我们可以用一个 Nginx 实例实现对图片文件的请求使用本地文件系统，而其他请求转发到代理服务器。</p>\n<p>首先，向 Nginx 的配置文件中添加一个 server 块来定义代理服务器：</p>\n<pre><code>server {\n    listen 8080;\n    root /data/up1;\n\n    location / {\n    }\n}\n</code></pre><p>此服务器侦听端口8080，并将所有请求映射到本地文件系统上的 /data/up1 目录。 创建此目录并将 index.html 放入其中。 注意，root 指令放在 server 上下文中，这样 当 location 块中不含 root 指令时将使用所属 server 的 root 指令。</p>\n<p>接下来，使用上一节中的服务器配置，并将其修改为代理服务器配置。 在第一个位置块中，加上proxy_pass指令：</p>\n<pre><code>server {\n    location / {\n        # proxy_pass指令的参数为：协议+主机名+端口号\n        proxy_pass http://localhost:8080;\n    }\n\n    location /images/ {\n        root /data;\n    }\n}\n</code></pre><p>修改第二个 匹配 /images/ 前缀的 location 块，使其与请求图像文件的扩展名相匹配：</p>\n<pre><code>location ~ \\.(gif|jpg|png)$ {\n    root /data/images;\n}\n</code></pre><p>该参数是一个正则表达式，匹配以.gif，.jpg或.png结尾的所有URI。 正则表达式应该以 ~ 开头。 相应的请求将映射到 /data/images 目录。</p>\n<p>当 Nginx 选择一个 location 块来处理请求时，它首先检查指定 location 块的前缀，记住具有最长前缀的 location 块，然后检查正则表达式。 如果与正则表达式匹配， Nginx 选择此 location 块，否则，选择先前记住的 location 块。</p>\n<p>代理服务器的最终配置如下：</p>\n<pre><code>server {\n    location / {\n        proxy_pass http://localhost:8080/;\n    }\n\n    location ~ \\.(gif|jpg|png)$ {\n        root /data/images;\n    }\n}\n</code></pre><p>此服务器将过滤以.gif，.jpg或.png结尾的请求，并将它们映射到 /data/images 目录（通过向 root 指令的参数添加请求的URI），并将所有其他请求发送给上面配置的代理服务器。</p>\n<p>这样，图片和其他请求就可以使用不同的服务器来处理。</p>\n"},{"title":"linux 主机部署 ArchiSteamFarm","_content":"\n\n# 前言\n之前在介绍 ArchiSteamFarm(一下简称 asf)时,介绍了它的简单用法,在这篇文章里面我们介绍如何把 asf 部署到远程主机上并自动挂卡.\n# 需要的东西\n\n*  国外 linux 主机一台(centos7)\n*  ssh 客户端\n* asf for linux x64\n\n# 安装 asf\n## 环境配置\n### 安装 .NET core 和 screen\n\n    sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc\n    sudo sh -c 'echo -e \"[packages-microsoft-com-prod]\\nname=packages-microsoft-com-prod \\nbaseurl=https://packages.microsoft.com/yumrepos/microsoft-rhel7.3-prod\\nenabled=1\\ngpgcheck=1\\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc\" > /etc/yum.repos.d/dotnetdev.repo'\n    sudo yum update\n    sudo yum install libunwind libicu\n    sudo yum install dotnet-sdk-2.0.0\n    sudo yum -y install screen\n\n\n### 配置 asf\n到[https://github.com/JustArchiNET/ArchiSteamFarm/releases](https://github.com/JustArchiNET/ArchiSteamFarm/releases)下载 asf for linux x64 ,接着配置 `/config/bot.json` ,例如\n\n\n    {\n    \"Enabled\": true,\n    \"FarmOffline\": true,\n    \"SteamLogin\": \"steam 账户名\",\n    \"SteamPassword\": \"steam 验证密码\"\n    }\n\n\n\n\n接着使用 scp 上传到远程主机的` /opt `目录下.\n\n# 启动 asf\n\n    cd /opt/ASF/ArchiSteamFarm\n\n赋权:\n\n    chmod -x ArchiSteamFarm\n\n开启一个新的 screen\n\n    screen\n\n运行asf\n\n    ./ArchiSteamFarm\n\n输入 steam 手机验证码,使用ctrl+a+d将screen部署到后台，再断开SSH连接,完成.\n\n# 附:linux 中的 screen\n\n>在linux开发中，我们经常用终端软件连入linux服务器进行一些操作，或者编辑代码。当需要编辑多个文件，并且经常要执行一些系统命令时，不得已要开多个终端窗口连入服务器或者来回进行文件切换或者退出文件编辑来执行系统命令，造成效率低下而且繁琐。如果经常遇到这样的问题，那就应该尝试使用以下linux的Screen工具了。Screen是一个可以在多个进程之间多路复用一个物理终端的窗口管理器。Screen中有会话的概念，用户可以在一个screen会话中创建多个screen窗口，在每一个screen窗口中就像操作一个真实的telnet/SSH连接窗口那样。在使用过程中可以退出screen，甚至可以关掉登录窗口，下次再进去重新挂上screen会话，所有工作全部都会恢复。\n\n\n## screen 的语法\n\n\n     screen [-AmRvx -ls -wipe][-d <作业名称>][-h <行数>][-r <作业名称>][-s ][-S <作业名称>]\n\n\n## screen 的参数\n\n    -A 　将所有的视窗都调整为目前终端机的大小。\n    -d <作业名称> 　将指定的screen作业离线。\n    -h <行数> 　指定视窗的缓冲区行数。\n    -m 　即使目前已在作业中的screen作业，仍强制建立新的screen作业。\n    -r <作业名称> 　恢复离线的screen作业。\n    -R 　先试图恢复离线的作业。若找不到离线的作业，即建立新的screen作业。\n    -s 　指定建立新视窗时，所要执行的shell。\n    -S <作业名称> 　指定screen作业的名称。\n    -v 　显示版本信息。\n    -x 　恢复之前离线的screen作业。\n    -ls或--list 　显示目前所有的screen作业。\n    -wipe 　检查目前所有的screen作业，并删除已经无法使用的screen作业。\n\n\n## 常用的 screen 命令\n\n\n        screen -S yourname -> 新建一个叫yourname的session\n        screen -ls -> 列出当前所有的session\n        screen -r yourname -> 回到yourname这个session\n        screen -d yourname -> 远程detach某个session\n        screen -d -r yourname -> 结束当前session并回到yourname这个session\n\n\n\n\n\n\n## 启动 screen\n输入`screen`来创建一个 screen\n\n##  查看已经创建的 screen\n\n    screen -ls\n\n![WX20190701-154132@2x](https://i.loli.net/2019/07/01/5d19b93d6b97a71693.png)\n\n\n\n## 回话分离\n\n在一个 screen 中:\n\n    ctrl + a + d\n来分离当前的 screen\n\n\n## 重新连接会话\n    screen -r screenID\n\n来恢复会话\n\n\n\n##  关闭已经创建的 screen\n* 方法1: (exit):\n\n        Screen -r\n\n        screen -ls \n\n        There is a screen on:\n            30339.pyapi (Detached)\n        1 Socket in /var/run/screen/S-root.\n\n        screen -r 30339        //进入要中断的screen\n\n        exit        //exit 或者 control +c 退出 screen\n\n\n\n\n* 方法2: (Screen -S screenID -X quit)\n\n\n        [root@localhost ~]# screen -ls\n        There is a screen on:\n            41493.pyapi    (Detached)\n        1 Socket in /var/run/screen/S-root.\n\n        [root@localhost ~]# screen  -S 41493.pyapi -X quit\n        [root@localhost ~]# screen -ls\n        No Sockets found in /var/run/screen/S-root.\n\n\n\n\n","source":"_posts/2019.07.01.linux-screen.md","raw":"---\ntitle: linux 主机部署 ArchiSteamFarm\ntags: [linux]\ncategories: 随笔\n---\n\n\n# 前言\n之前在介绍 ArchiSteamFarm(一下简称 asf)时,介绍了它的简单用法,在这篇文章里面我们介绍如何把 asf 部署到远程主机上并自动挂卡.\n# 需要的东西\n\n*  国外 linux 主机一台(centos7)\n*  ssh 客户端\n* asf for linux x64\n\n# 安装 asf\n## 环境配置\n### 安装 .NET core 和 screen\n\n    sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc\n    sudo sh -c 'echo -e \"[packages-microsoft-com-prod]\\nname=packages-microsoft-com-prod \\nbaseurl=https://packages.microsoft.com/yumrepos/microsoft-rhel7.3-prod\\nenabled=1\\ngpgcheck=1\\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc\" > /etc/yum.repos.d/dotnetdev.repo'\n    sudo yum update\n    sudo yum install libunwind libicu\n    sudo yum install dotnet-sdk-2.0.0\n    sudo yum -y install screen\n\n\n### 配置 asf\n到[https://github.com/JustArchiNET/ArchiSteamFarm/releases](https://github.com/JustArchiNET/ArchiSteamFarm/releases)下载 asf for linux x64 ,接着配置 `/config/bot.json` ,例如\n\n\n    {\n    \"Enabled\": true,\n    \"FarmOffline\": true,\n    \"SteamLogin\": \"steam 账户名\",\n    \"SteamPassword\": \"steam 验证密码\"\n    }\n\n\n\n\n接着使用 scp 上传到远程主机的` /opt `目录下.\n\n# 启动 asf\n\n    cd /opt/ASF/ArchiSteamFarm\n\n赋权:\n\n    chmod -x ArchiSteamFarm\n\n开启一个新的 screen\n\n    screen\n\n运行asf\n\n    ./ArchiSteamFarm\n\n输入 steam 手机验证码,使用ctrl+a+d将screen部署到后台，再断开SSH连接,完成.\n\n# 附:linux 中的 screen\n\n>在linux开发中，我们经常用终端软件连入linux服务器进行一些操作，或者编辑代码。当需要编辑多个文件，并且经常要执行一些系统命令时，不得已要开多个终端窗口连入服务器或者来回进行文件切换或者退出文件编辑来执行系统命令，造成效率低下而且繁琐。如果经常遇到这样的问题，那就应该尝试使用以下linux的Screen工具了。Screen是一个可以在多个进程之间多路复用一个物理终端的窗口管理器。Screen中有会话的概念，用户可以在一个screen会话中创建多个screen窗口，在每一个screen窗口中就像操作一个真实的telnet/SSH连接窗口那样。在使用过程中可以退出screen，甚至可以关掉登录窗口，下次再进去重新挂上screen会话，所有工作全部都会恢复。\n\n\n## screen 的语法\n\n\n     screen [-AmRvx -ls -wipe][-d <作业名称>][-h <行数>][-r <作业名称>][-s ][-S <作业名称>]\n\n\n## screen 的参数\n\n    -A 　将所有的视窗都调整为目前终端机的大小。\n    -d <作业名称> 　将指定的screen作业离线。\n    -h <行数> 　指定视窗的缓冲区行数。\n    -m 　即使目前已在作业中的screen作业，仍强制建立新的screen作业。\n    -r <作业名称> 　恢复离线的screen作业。\n    -R 　先试图恢复离线的作业。若找不到离线的作业，即建立新的screen作业。\n    -s 　指定建立新视窗时，所要执行的shell。\n    -S <作业名称> 　指定screen作业的名称。\n    -v 　显示版本信息。\n    -x 　恢复之前离线的screen作业。\n    -ls或--list 　显示目前所有的screen作业。\n    -wipe 　检查目前所有的screen作业，并删除已经无法使用的screen作业。\n\n\n## 常用的 screen 命令\n\n\n        screen -S yourname -> 新建一个叫yourname的session\n        screen -ls -> 列出当前所有的session\n        screen -r yourname -> 回到yourname这个session\n        screen -d yourname -> 远程detach某个session\n        screen -d -r yourname -> 结束当前session并回到yourname这个session\n\n\n\n\n\n\n## 启动 screen\n输入`screen`来创建一个 screen\n\n##  查看已经创建的 screen\n\n    screen -ls\n\n![WX20190701-154132@2x](https://i.loli.net/2019/07/01/5d19b93d6b97a71693.png)\n\n\n\n## 回话分离\n\n在一个 screen 中:\n\n    ctrl + a + d\n来分离当前的 screen\n\n\n## 重新连接会话\n    screen -r screenID\n\n来恢复会话\n\n\n\n##  关闭已经创建的 screen\n* 方法1: (exit):\n\n        Screen -r\n\n        screen -ls \n\n        There is a screen on:\n            30339.pyapi (Detached)\n        1 Socket in /var/run/screen/S-root.\n\n        screen -r 30339        //进入要中断的screen\n\n        exit        //exit 或者 control +c 退出 screen\n\n\n\n\n* 方法2: (Screen -S screenID -X quit)\n\n\n        [root@localhost ~]# screen -ls\n        There is a screen on:\n            41493.pyapi    (Detached)\n        1 Socket in /var/run/screen/S-root.\n\n        [root@localhost ~]# screen  -S 41493.pyapi -X quit\n        [root@localhost ~]# screen -ls\n        No Sockets found in /var/run/screen/S-root.\n\n\n\n\n","slug":"2019.07.01.linux-screen","published":1,"date":"2019-07-01T07:22:30.514Z","updated":"2019-07-01T07:57:49.149Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziiq90016rh9zh1460xcl","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>之前在介绍 ArchiSteamFarm(一下简称 asf)时,介绍了它的简单用法,在这篇文章里面我们介绍如何把 asf 部署到远程主机上并自动挂卡.</p>\n<h1 id=\"需要的东西\"><a href=\"#需要的东西\" class=\"headerlink\" title=\"需要的东西\"></a>需要的东西</h1><ul>\n<li>国外 linux 主机一台(centos7)</li>\n<li>ssh 客户端</li>\n<li>asf for linux x64</li>\n</ul>\n<h1 id=\"安装-asf\"><a href=\"#安装-asf\" class=\"headerlink\" title=\"安装 asf\"></a>安装 asf</h1><h2 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h2><h3 id=\"安装-NET-core-和-screen\"><a href=\"#安装-NET-core-和-screen\" class=\"headerlink\" title=\"安装 .NET core 和 screen\"></a>安装 .NET core 和 screen</h3><pre><code>sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc\nsudo sh -c &apos;echo -e &quot;[packages-microsoft-com-prod]\\nname=packages-microsoft-com-prod \\nbaseurl=https://packages.microsoft.com/yumrepos/microsoft-rhel7.3-prod\\nenabled=1\\ngpgcheck=1\\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc&quot; &gt; /etc/yum.repos.d/dotnetdev.repo&apos;\nsudo yum update\nsudo yum install libunwind libicu\nsudo yum install dotnet-sdk-2.0.0\nsudo yum -y install screen\n</code></pre><h3 id=\"配置-asf\"><a href=\"#配置-asf\" class=\"headerlink\" title=\"配置 asf\"></a>配置 asf</h3><p>到<a href=\"https://github.com/JustArchiNET/ArchiSteamFarm/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/JustArchiNET/ArchiSteamFarm/releases</a>下载 asf for linux x64 ,接着配置 <code>/config/bot.json</code> ,例如</p>\n<pre><code>{\n&quot;Enabled&quot;: true,\n&quot;FarmOffline&quot;: true,\n&quot;SteamLogin&quot;: &quot;steam 账户名&quot;,\n&quot;SteamPassword&quot;: &quot;steam 验证密码&quot;\n}\n</code></pre><p>接着使用 scp 上传到远程主机的<code>/opt</code>目录下.</p>\n<h1 id=\"启动-asf\"><a href=\"#启动-asf\" class=\"headerlink\" title=\"启动 asf\"></a>启动 asf</h1><pre><code>cd /opt/ASF/ArchiSteamFarm\n</code></pre><p>赋权:</p>\n<pre><code>chmod -x ArchiSteamFarm\n</code></pre><p>开启一个新的 screen</p>\n<pre><code>screen\n</code></pre><p>运行asf</p>\n<pre><code>./ArchiSteamFarm\n</code></pre><p>输入 steam 手机验证码,使用ctrl+a+d将screen部署到后台，再断开SSH连接,完成.</p>\n<h1 id=\"附-linux-中的-screen\"><a href=\"#附-linux-中的-screen\" class=\"headerlink\" title=\"附:linux 中的 screen\"></a>附:linux 中的 screen</h1><blockquote>\n<p>在linux开发中，我们经常用终端软件连入linux服务器进行一些操作，或者编辑代码。当需要编辑多个文件，并且经常要执行一些系统命令时，不得已要开多个终端窗口连入服务器或者来回进行文件切换或者退出文件编辑来执行系统命令，造成效率低下而且繁琐。如果经常遇到这样的问题，那就应该尝试使用以下linux的Screen工具了。Screen是一个可以在多个进程之间多路复用一个物理终端的窗口管理器。Screen中有会话的概念，用户可以在一个screen会话中创建多个screen窗口，在每一个screen窗口中就像操作一个真实的telnet/SSH连接窗口那样。在使用过程中可以退出screen，甚至可以关掉登录窗口，下次再进去重新挂上screen会话，所有工作全部都会恢复。</p>\n</blockquote>\n<h2 id=\"screen-的语法\"><a href=\"#screen-的语法\" class=\"headerlink\" title=\"screen 的语法\"></a>screen 的语法</h2><pre><code>screen [-AmRvx -ls -wipe][-d &lt;作业名称&gt;][-h &lt;行数&gt;][-r &lt;作业名称&gt;][-s ][-S &lt;作业名称&gt;]\n</code></pre><h2 id=\"screen-的参数\"><a href=\"#screen-的参数\" class=\"headerlink\" title=\"screen 的参数\"></a>screen 的参数</h2><pre><code>-A 　将所有的视窗都调整为目前终端机的大小。\n-d &lt;作业名称&gt; 　将指定的screen作业离线。\n-h &lt;行数&gt; 　指定视窗的缓冲区行数。\n-m 　即使目前已在作业中的screen作业，仍强制建立新的screen作业。\n-r &lt;作业名称&gt; 　恢复离线的screen作业。\n-R 　先试图恢复离线的作业。若找不到离线的作业，即建立新的screen作业。\n-s 　指定建立新视窗时，所要执行的shell。\n-S &lt;作业名称&gt; 　指定screen作业的名称。\n-v 　显示版本信息。\n-x 　恢复之前离线的screen作业。\n-ls或--list 　显示目前所有的screen作业。\n-wipe 　检查目前所有的screen作业，并删除已经无法使用的screen作业。\n</code></pre><h2 id=\"常用的-screen-命令\"><a href=\"#常用的-screen-命令\" class=\"headerlink\" title=\"常用的 screen 命令\"></a>常用的 screen 命令</h2><pre><code>screen -S yourname -&gt; 新建一个叫yourname的session\nscreen -ls -&gt; 列出当前所有的session\nscreen -r yourname -&gt; 回到yourname这个session\nscreen -d yourname -&gt; 远程detach某个session\nscreen -d -r yourname -&gt; 结束当前session并回到yourname这个session\n</code></pre><h2 id=\"启动-screen\"><a href=\"#启动-screen\" class=\"headerlink\" title=\"启动 screen\"></a>启动 screen</h2><p>输入<code>screen</code>来创建一个 screen</p>\n<h2 id=\"查看已经创建的-screen\"><a href=\"#查看已经创建的-screen\" class=\"headerlink\" title=\"查看已经创建的 screen\"></a>查看已经创建的 screen</h2><pre><code>screen -ls\n</code></pre><p><img src=\"https://i.loli.net/2019/07/01/5d19b93d6b97a71693.png\" alt=\"WX20190701-154132@2x\"></p>\n<h2 id=\"回话分离\"><a href=\"#回话分离\" class=\"headerlink\" title=\"回话分离\"></a>回话分离</h2><p>在一个 screen 中:</p>\n<pre><code>ctrl + a + d\n</code></pre><p>来分离当前的 screen</p>\n<h2 id=\"重新连接会话\"><a href=\"#重新连接会话\" class=\"headerlink\" title=\"重新连接会话\"></a>重新连接会话</h2><pre><code>screen -r screenID\n</code></pre><p>来恢复会话</p>\n<h2 id=\"关闭已经创建的-screen\"><a href=\"#关闭已经创建的-screen\" class=\"headerlink\" title=\"关闭已经创建的 screen\"></a>关闭已经创建的 screen</h2><ul>\n<li><p>方法1: (exit):</p>\n<pre><code>Screen -r\n\nscreen -ls \n\nThere is a screen on:\n    30339.pyapi (Detached)\n1 Socket in /var/run/screen/S-root.\n\nscreen -r 30339        //进入要中断的screen\n\nexit        //exit 或者 control +c 退出 screen\n</code></pre></li>\n</ul>\n<ul>\n<li>方法2: (Screen -S screenID -X quit)</li>\n</ul>\n<pre><code>[root@localhost ~]# screen -ls\nThere is a screen on:\n    41493.pyapi    (Detached)\n1 Socket in /var/run/screen/S-root.\n\n[root@localhost ~]# screen  -S 41493.pyapi -X quit\n[root@localhost ~]# screen -ls\nNo Sockets found in /var/run/screen/S-root.\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>之前在介绍 ArchiSteamFarm(一下简称 asf)时,介绍了它的简单用法,在这篇文章里面我们介绍如何把 asf 部署到远程主机上并自动挂卡.</p>\n<h1 id=\"需要的东西\"><a href=\"#需要的东西\" class=\"headerlink\" title=\"需要的东西\"></a>需要的东西</h1><ul>\n<li>国外 linux 主机一台(centos7)</li>\n<li>ssh 客户端</li>\n<li>asf for linux x64</li>\n</ul>\n<h1 id=\"安装-asf\"><a href=\"#安装-asf\" class=\"headerlink\" title=\"安装 asf\"></a>安装 asf</h1><h2 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h2><h3 id=\"安装-NET-core-和-screen\"><a href=\"#安装-NET-core-和-screen\" class=\"headerlink\" title=\"安装 .NET core 和 screen\"></a>安装 .NET core 和 screen</h3><pre><code>sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc\nsudo sh -c &apos;echo -e &quot;[packages-microsoft-com-prod]\\nname=packages-microsoft-com-prod \\nbaseurl=https://packages.microsoft.com/yumrepos/microsoft-rhel7.3-prod\\nenabled=1\\ngpgcheck=1\\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc&quot; &gt; /etc/yum.repos.d/dotnetdev.repo&apos;\nsudo yum update\nsudo yum install libunwind libicu\nsudo yum install dotnet-sdk-2.0.0\nsudo yum -y install screen\n</code></pre><h3 id=\"配置-asf\"><a href=\"#配置-asf\" class=\"headerlink\" title=\"配置 asf\"></a>配置 asf</h3><p>到<a href=\"https://github.com/JustArchiNET/ArchiSteamFarm/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/JustArchiNET/ArchiSteamFarm/releases</a>下载 asf for linux x64 ,接着配置 <code>/config/bot.json</code> ,例如</p>\n<pre><code>{\n&quot;Enabled&quot;: true,\n&quot;FarmOffline&quot;: true,\n&quot;SteamLogin&quot;: &quot;steam 账户名&quot;,\n&quot;SteamPassword&quot;: &quot;steam 验证密码&quot;\n}\n</code></pre><p>接着使用 scp 上传到远程主机的<code>/opt</code>目录下.</p>\n<h1 id=\"启动-asf\"><a href=\"#启动-asf\" class=\"headerlink\" title=\"启动 asf\"></a>启动 asf</h1><pre><code>cd /opt/ASF/ArchiSteamFarm\n</code></pre><p>赋权:</p>\n<pre><code>chmod -x ArchiSteamFarm\n</code></pre><p>开启一个新的 screen</p>\n<pre><code>screen\n</code></pre><p>运行asf</p>\n<pre><code>./ArchiSteamFarm\n</code></pre><p>输入 steam 手机验证码,使用ctrl+a+d将screen部署到后台，再断开SSH连接,完成.</p>\n<h1 id=\"附-linux-中的-screen\"><a href=\"#附-linux-中的-screen\" class=\"headerlink\" title=\"附:linux 中的 screen\"></a>附:linux 中的 screen</h1><blockquote>\n<p>在linux开发中，我们经常用终端软件连入linux服务器进行一些操作，或者编辑代码。当需要编辑多个文件，并且经常要执行一些系统命令时，不得已要开多个终端窗口连入服务器或者来回进行文件切换或者退出文件编辑来执行系统命令，造成效率低下而且繁琐。如果经常遇到这样的问题，那就应该尝试使用以下linux的Screen工具了。Screen是一个可以在多个进程之间多路复用一个物理终端的窗口管理器。Screen中有会话的概念，用户可以在一个screen会话中创建多个screen窗口，在每一个screen窗口中就像操作一个真实的telnet/SSH连接窗口那样。在使用过程中可以退出screen，甚至可以关掉登录窗口，下次再进去重新挂上screen会话，所有工作全部都会恢复。</p>\n</blockquote>\n<h2 id=\"screen-的语法\"><a href=\"#screen-的语法\" class=\"headerlink\" title=\"screen 的语法\"></a>screen 的语法</h2><pre><code>screen [-AmRvx -ls -wipe][-d &lt;作业名称&gt;][-h &lt;行数&gt;][-r &lt;作业名称&gt;][-s ][-S &lt;作业名称&gt;]\n</code></pre><h2 id=\"screen-的参数\"><a href=\"#screen-的参数\" class=\"headerlink\" title=\"screen 的参数\"></a>screen 的参数</h2><pre><code>-A 　将所有的视窗都调整为目前终端机的大小。\n-d &lt;作业名称&gt; 　将指定的screen作业离线。\n-h &lt;行数&gt; 　指定视窗的缓冲区行数。\n-m 　即使目前已在作业中的screen作业，仍强制建立新的screen作业。\n-r &lt;作业名称&gt; 　恢复离线的screen作业。\n-R 　先试图恢复离线的作业。若找不到离线的作业，即建立新的screen作业。\n-s 　指定建立新视窗时，所要执行的shell。\n-S &lt;作业名称&gt; 　指定screen作业的名称。\n-v 　显示版本信息。\n-x 　恢复之前离线的screen作业。\n-ls或--list 　显示目前所有的screen作业。\n-wipe 　检查目前所有的screen作业，并删除已经无法使用的screen作业。\n</code></pre><h2 id=\"常用的-screen-命令\"><a href=\"#常用的-screen-命令\" class=\"headerlink\" title=\"常用的 screen 命令\"></a>常用的 screen 命令</h2><pre><code>screen -S yourname -&gt; 新建一个叫yourname的session\nscreen -ls -&gt; 列出当前所有的session\nscreen -r yourname -&gt; 回到yourname这个session\nscreen -d yourname -&gt; 远程detach某个session\nscreen -d -r yourname -&gt; 结束当前session并回到yourname这个session\n</code></pre><h2 id=\"启动-screen\"><a href=\"#启动-screen\" class=\"headerlink\" title=\"启动 screen\"></a>启动 screen</h2><p>输入<code>screen</code>来创建一个 screen</p>\n<h2 id=\"查看已经创建的-screen\"><a href=\"#查看已经创建的-screen\" class=\"headerlink\" title=\"查看已经创建的 screen\"></a>查看已经创建的 screen</h2><pre><code>screen -ls\n</code></pre><p><img src=\"https://i.loli.net/2019/07/01/5d19b93d6b97a71693.png\" alt=\"WX20190701-154132@2x\"></p>\n<h2 id=\"回话分离\"><a href=\"#回话分离\" class=\"headerlink\" title=\"回话分离\"></a>回话分离</h2><p>在一个 screen 中:</p>\n<pre><code>ctrl + a + d\n</code></pre><p>来分离当前的 screen</p>\n<h2 id=\"重新连接会话\"><a href=\"#重新连接会话\" class=\"headerlink\" title=\"重新连接会话\"></a>重新连接会话</h2><pre><code>screen -r screenID\n</code></pre><p>来恢复会话</p>\n<h2 id=\"关闭已经创建的-screen\"><a href=\"#关闭已经创建的-screen\" class=\"headerlink\" title=\"关闭已经创建的 screen\"></a>关闭已经创建的 screen</h2><ul>\n<li><p>方法1: (exit):</p>\n<pre><code>Screen -r\n\nscreen -ls \n\nThere is a screen on:\n    30339.pyapi (Detached)\n1 Socket in /var/run/screen/S-root.\n\nscreen -r 30339        //进入要中断的screen\n\nexit        //exit 或者 control +c 退出 screen\n</code></pre></li>\n</ul>\n<ul>\n<li>方法2: (Screen -S screenID -X quit)</li>\n</ul>\n<pre><code>[root@localhost ~]# screen -ls\nThere is a screen on:\n    41493.pyapi    (Detached)\n1 Socket in /var/run/screen/S-root.\n\n[root@localhost ~]# screen  -S 41493.pyapi -X quit\n[root@localhost ~]# screen -ls\nNo Sockets found in /var/run/screen/S-root.\n</code></pre>"},{"title":"使用 chmod 修改 mac 文件权限","_content":"\n>PC 端修改文件访问权限算是比较常用的操作，在安装部分软件时经常需要使用到。在 Mac 系统的终端上修改文件权限使用的是 Linux 中的 chmod 命令。这里详细介绍一下该命令的相关使用。也可以直接通过 man chmod 在终端工具上查看该命令的帮助手册。\n\n\n\n# 查看文件权限\n`ls -l` 命令可以查看当前目录下所有文件的访问权限，也可以查看指定文件。\n例如:\n\n![WX20190703-105131@2x](https://i.loli.net/2019/07/03/5d1c18468631670674.png)\n\n上面打印的文件信息中每一部分所代表的含义，分别对应如下解释：\n\n\n* 文件类型和访问权限\n* 文件数量\n* 所属用户 \n* 所在群组 \n* 文件大小 \n* 修改日期（月 日 时 分） \n* 文件名称\n\n## 文件类型和访问权限\n* 第一个符号代表文件类型， “-” 符号表示该文件是非目录类型，“d” 符号表示目录类型；（ 末尾的 @ 符号表示文件拓展属性，属于文件系统的一个功能。）\n* 后面九个字母分为三组，从前到后每组分别对应所属用户（user）、所属用户所在组（group）和其他用户（other）对该文件的访问权限；\n每组中的三个字符 “rwx” 分别表示对应用户对该文件拥有的可读／可写／可执行权限，没有相应权限则使用 “-” 符号替代。\n\n# 修改访问权限\n\n     chmod 用户+操作+权限 文件\n\n用户部分：使用字母 u 表示文件拥有者（user），g 表示拥有者所在群组（group），o 表示其他用户（other），a 表示全部用户（all，包含前面三种用户范围）；\n\n操作部分：“+” 符号表示增加权限，“-” 符号表示取消权限，“=” 符号表示赋值权限；\n\n权限部分：“r” 符号表示可读（read），“w” 表示可写（write），“x” 表示可执行权限（execute）；\n\n文件部分：如不指定文件名，表示操作对象为当前目录下的所有文件。\n\n还有一种简单的写法，使用数字表示权限部分的读／写／可执行权限类型。数字和权限类型的对应关系，可以从这张图中直观地看出来：\n\n![1508342093](https://i.loli.net/2019/07/03/5d1c1b372d68841634.png)\n\n\n即，1 表示可执行，2 表示可写，4 表示可读。每种类型数字相加所得到的值表示交叉部分的公共类型。\n\n这样的话，使用三个数字便可以分别代表三种不同用户类型的权限修改结果。比如，修改所有用户的访问权限均为可读可写可执行（rwx）的话，这样使用即可：\n\n\n    chmod 777 [文件名]\n\n\n\n三个数字从前到后分别表示 u、g、o 三种用户类型的访问权限，使用时按需修改。\n\n有时候需要递归修改目录文件及其子目录中的文件类型，可以使用 -R 选项。\n\n\n\n","source":"_posts/2019.07.03.mac.chmod.md","raw":"---\ntitle: 使用 chmod 修改 mac 文件权限\ntags: [linux]\ncategories: 随笔\n---\n\n>PC 端修改文件访问权限算是比较常用的操作，在安装部分软件时经常需要使用到。在 Mac 系统的终端上修改文件权限使用的是 Linux 中的 chmod 命令。这里详细介绍一下该命令的相关使用。也可以直接通过 man chmod 在终端工具上查看该命令的帮助手册。\n\n\n\n# 查看文件权限\n`ls -l` 命令可以查看当前目录下所有文件的访问权限，也可以查看指定文件。\n例如:\n\n![WX20190703-105131@2x](https://i.loli.net/2019/07/03/5d1c18468631670674.png)\n\n上面打印的文件信息中每一部分所代表的含义，分别对应如下解释：\n\n\n* 文件类型和访问权限\n* 文件数量\n* 所属用户 \n* 所在群组 \n* 文件大小 \n* 修改日期（月 日 时 分） \n* 文件名称\n\n## 文件类型和访问权限\n* 第一个符号代表文件类型， “-” 符号表示该文件是非目录类型，“d” 符号表示目录类型；（ 末尾的 @ 符号表示文件拓展属性，属于文件系统的一个功能。）\n* 后面九个字母分为三组，从前到后每组分别对应所属用户（user）、所属用户所在组（group）和其他用户（other）对该文件的访问权限；\n每组中的三个字符 “rwx” 分别表示对应用户对该文件拥有的可读／可写／可执行权限，没有相应权限则使用 “-” 符号替代。\n\n# 修改访问权限\n\n     chmod 用户+操作+权限 文件\n\n用户部分：使用字母 u 表示文件拥有者（user），g 表示拥有者所在群组（group），o 表示其他用户（other），a 表示全部用户（all，包含前面三种用户范围）；\n\n操作部分：“+” 符号表示增加权限，“-” 符号表示取消权限，“=” 符号表示赋值权限；\n\n权限部分：“r” 符号表示可读（read），“w” 表示可写（write），“x” 表示可执行权限（execute）；\n\n文件部分：如不指定文件名，表示操作对象为当前目录下的所有文件。\n\n还有一种简单的写法，使用数字表示权限部分的读／写／可执行权限类型。数字和权限类型的对应关系，可以从这张图中直观地看出来：\n\n![1508342093](https://i.loli.net/2019/07/03/5d1c1b372d68841634.png)\n\n\n即，1 表示可执行，2 表示可写，4 表示可读。每种类型数字相加所得到的值表示交叉部分的公共类型。\n\n这样的话，使用三个数字便可以分别代表三种不同用户类型的权限修改结果。比如，修改所有用户的访问权限均为可读可写可执行（rwx）的话，这样使用即可：\n\n\n    chmod 777 [文件名]\n\n\n\n三个数字从前到后分别表示 u、g、o 三种用户类型的访问权限，使用时按需修改。\n\n有时候需要递归修改目录文件及其子目录中的文件类型，可以使用 -R 选项。\n\n\n\n","slug":"2019.07.03.mac.chmod","published":1,"date":"2019-07-03T02:02:26.286Z","updated":"2019-07-03T03:05:21.556Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziiq90017rh9z8a42e45b","content":"<blockquote>\n<p>PC 端修改文件访问权限算是比较常用的操作，在安装部分软件时经常需要使用到。在 Mac 系统的终端上修改文件权限使用的是 Linux 中的 chmod 命令。这里详细介绍一下该命令的相关使用。也可以直接通过 man chmod 在终端工具上查看该命令的帮助手册。</p>\n</blockquote>\n<h1 id=\"查看文件权限\"><a href=\"#查看文件权限\" class=\"headerlink\" title=\"查看文件权限\"></a>查看文件权限</h1><p><code>ls -l</code> 命令可以查看当前目录下所有文件的访问权限，也可以查看指定文件。<br>例如:</p>\n<p><img src=\"https://i.loli.net/2019/07/03/5d1c18468631670674.png\" alt=\"WX20190703-105131@2x\"></p>\n<p>上面打印的文件信息中每一部分所代表的含义，分别对应如下解释：</p>\n<ul>\n<li>文件类型和访问权限</li>\n<li>文件数量</li>\n<li>所属用户 </li>\n<li>所在群组 </li>\n<li>文件大小 </li>\n<li>修改日期（月 日 时 分） </li>\n<li>文件名称</li>\n</ul>\n<h2 id=\"文件类型和访问权限\"><a href=\"#文件类型和访问权限\" class=\"headerlink\" title=\"文件类型和访问权限\"></a>文件类型和访问权限</h2><ul>\n<li>第一个符号代表文件类型， “-” 符号表示该文件是非目录类型，“d” 符号表示目录类型；（ 末尾的 @ 符号表示文件拓展属性，属于文件系统的一个功能。）</li>\n<li>后面九个字母分为三组，从前到后每组分别对应所属用户（user）、所属用户所在组（group）和其他用户（other）对该文件的访问权限；<br>每组中的三个字符 “rwx” 分别表示对应用户对该文件拥有的可读／可写／可执行权限，没有相应权限则使用 “-” 符号替代。</li>\n</ul>\n<h1 id=\"修改访问权限\"><a href=\"#修改访问权限\" class=\"headerlink\" title=\"修改访问权限\"></a>修改访问权限</h1><pre><code>chmod 用户+操作+权限 文件\n</code></pre><p>用户部分：使用字母 u 表示文件拥有者（user），g 表示拥有者所在群组（group），o 表示其他用户（other），a 表示全部用户（all，包含前面三种用户范围）；</p>\n<p>操作部分：“+” 符号表示增加权限，“-” 符号表示取消权限，“=” 符号表示赋值权限；</p>\n<p>权限部分：“r” 符号表示可读（read），“w” 表示可写（write），“x” 表示可执行权限（execute）；</p>\n<p>文件部分：如不指定文件名，表示操作对象为当前目录下的所有文件。</p>\n<p>还有一种简单的写法，使用数字表示权限部分的读／写／可执行权限类型。数字和权限类型的对应关系，可以从这张图中直观地看出来：</p>\n<p><img src=\"https://i.loli.net/2019/07/03/5d1c1b372d68841634.png\" alt=\"1508342093\"></p>\n<p>即，1 表示可执行，2 表示可写，4 表示可读。每种类型数字相加所得到的值表示交叉部分的公共类型。</p>\n<p>这样的话，使用三个数字便可以分别代表三种不同用户类型的权限修改结果。比如，修改所有用户的访问权限均为可读可写可执行（rwx）的话，这样使用即可：</p>\n<pre><code>chmod 777 [文件名]\n</code></pre><p>三个数字从前到后分别表示 u、g、o 三种用户类型的访问权限，使用时按需修改。</p>\n<p>有时候需要递归修改目录文件及其子目录中的文件类型，可以使用 -R 选项。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>PC 端修改文件访问权限算是比较常用的操作，在安装部分软件时经常需要使用到。在 Mac 系统的终端上修改文件权限使用的是 Linux 中的 chmod 命令。这里详细介绍一下该命令的相关使用。也可以直接通过 man chmod 在终端工具上查看该命令的帮助手册。</p>\n</blockquote>\n<h1 id=\"查看文件权限\"><a href=\"#查看文件权限\" class=\"headerlink\" title=\"查看文件权限\"></a>查看文件权限</h1><p><code>ls -l</code> 命令可以查看当前目录下所有文件的访问权限，也可以查看指定文件。<br>例如:</p>\n<p><img src=\"https://i.loli.net/2019/07/03/5d1c18468631670674.png\" alt=\"WX20190703-105131@2x\"></p>\n<p>上面打印的文件信息中每一部分所代表的含义，分别对应如下解释：</p>\n<ul>\n<li>文件类型和访问权限</li>\n<li>文件数量</li>\n<li>所属用户 </li>\n<li>所在群组 </li>\n<li>文件大小 </li>\n<li>修改日期（月 日 时 分） </li>\n<li>文件名称</li>\n</ul>\n<h2 id=\"文件类型和访问权限\"><a href=\"#文件类型和访问权限\" class=\"headerlink\" title=\"文件类型和访问权限\"></a>文件类型和访问权限</h2><ul>\n<li>第一个符号代表文件类型， “-” 符号表示该文件是非目录类型，“d” 符号表示目录类型；（ 末尾的 @ 符号表示文件拓展属性，属于文件系统的一个功能。）</li>\n<li>后面九个字母分为三组，从前到后每组分别对应所属用户（user）、所属用户所在组（group）和其他用户（other）对该文件的访问权限；<br>每组中的三个字符 “rwx” 分别表示对应用户对该文件拥有的可读／可写／可执行权限，没有相应权限则使用 “-” 符号替代。</li>\n</ul>\n<h1 id=\"修改访问权限\"><a href=\"#修改访问权限\" class=\"headerlink\" title=\"修改访问权限\"></a>修改访问权限</h1><pre><code>chmod 用户+操作+权限 文件\n</code></pre><p>用户部分：使用字母 u 表示文件拥有者（user），g 表示拥有者所在群组（group），o 表示其他用户（other），a 表示全部用户（all，包含前面三种用户范围）；</p>\n<p>操作部分：“+” 符号表示增加权限，“-” 符号表示取消权限，“=” 符号表示赋值权限；</p>\n<p>权限部分：“r” 符号表示可读（read），“w” 表示可写（write），“x” 表示可执行权限（execute）；</p>\n<p>文件部分：如不指定文件名，表示操作对象为当前目录下的所有文件。</p>\n<p>还有一种简单的写法，使用数字表示权限部分的读／写／可执行权限类型。数字和权限类型的对应关系，可以从这张图中直观地看出来：</p>\n<p><img src=\"https://i.loli.net/2019/07/03/5d1c1b372d68841634.png\" alt=\"1508342093\"></p>\n<p>即，1 表示可执行，2 表示可写，4 表示可读。每种类型数字相加所得到的值表示交叉部分的公共类型。</p>\n<p>这样的话，使用三个数字便可以分别代表三种不同用户类型的权限修改结果。比如，修改所有用户的访问权限均为可读可写可执行（rwx）的话，这样使用即可：</p>\n<pre><code>chmod 777 [文件名]\n</code></pre><p>三个数字从前到后分别表示 u、g、o 三种用户类型的访问权限，使用时按需修改。</p>\n<p>有时候需要递归修改目录文件及其子目录中的文件类型，可以使用 -R 选项。</p>\n"},{"title":"es6中的 class","_content":"\n# class 的简单介绍\n\n>ES6 提供了更接近传统语言的写法，引入了 Class（类）这个概念，作为对象的模板。通过class关键字，可以定义类。\n\n\n## class 的定义\n```js\n\n    class Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    toString() {\n        return '(' + this.x + ', ' + this.y + ')';\n    }\n    }  \n```\n\n上面代码定义了一个“类”，可以看到里面有一个constructor方法，这就是构造方法，而this关键字则代表实例对象。也就是说，ES5 的构造函数Point，对应 ES6 的Point类的构造方法。\n\n## class 的使用\n```js\n\n        class Bar {\n        doStuff() {\n            console.log('stuff');\n        }\n        }\n\n        var b = new Bar();\n        b.doStuff() // \"stuff\"\n```\n构造函数的prototype属性，在 ES6 的“类”上面继续存在。事实上，类的所有方法都定义在类的prototype属性上面。\n\n## constructor 方法\n\nconstructor方法是类的默认方法，通过new命令生成对象实例时，自动调用该方法。一个类必须有constructor方法，如果没有显式定义，一个空的constructor方法会被默认添加。\n\n```js\n        class Point {\n        }\n\n        // 等同于\n        class Point {\n        constructor() {}\n        }\n\n```\nconstructor方法默认返回实例对象（即this），完全可以指定返回另外一个对象。\n```js\n        class Foo {\n        constructor() {\n            return Object.create(null);\n        }\n        }\n\n        new Foo() instanceof Foo\n        // false\n```\n上面代码中，constructor函数返回一个全新的对象，结果导致实例对象不是Foo类的实例。\n\n>在 JavaScript 中，判断一个变量的类型尝尝会用 typeof 运算符，在使用 typeof 运算符时采用引用类型存储值会出现一个问题，无论引用的是什么类型的对象，它都返回 \"object\"。ECMAScript 引入了另一个 Java 运算符 instanceof 来解决这个问题。instanceof 运算符与 typeof 运算符相似，用于识别正在处理的对象的类型。与 typeof 方法不同的是，instanceof 方法要求开发者明确地确认对象为某特定类型.通常来讲，使用 instanceof 就是判断一个实例是否属于某种类型.\n\n类必须使用new调用，否则会报错。这是它跟普通构造函数的一个主要区别，后者不用new也可以执行。\n```js\n    class Foo {\n    constructor() {\n        return Object.create(null);\n    }\n    }\n\n    Foo()\n    // TypeError: Class constructor Foo cannot be invoked without 'new'\n\n```\n## 取值函数（getter）和存值函数（setter）\n\n>与 ES5 一样，在“类”的内部可以使用get和set关键字，对某个属性设置存值函数和取值函数，拦截该属性的存取行为。\n```js\n        class MyClass {\n        constructor() {\n            // ...\n        }\n        get prop() {\n            return 'getter';\n        }\n        set prop(value) {\n            console.log('setter: '+value);\n        }\n        }\n\n        let inst = new MyClass();\n\n        inst.prop = 123;\n        // setter: 123\n\n        inst.prop\n        // 'getter'\n\n```\n上面代码中，prop属性有对应的存值函数和取值函数，因此赋值和读取行为都被自定义了。\n\n存值函数和取值函数是设置在属性的 Descriptor 对象上的。\n```js\n        class CustomHTMLElement {\n        constructor(element) {\n            this.element = element;\n        }\n\n        get html() {\n            return this.element.innerHTML;\n        }\n\n        set html(value) {\n            this.element.innerHTML = value;\n        }\n        }\n\n        var descriptor = Object.getOwnPropertyDescriptor(\n        CustomHTMLElement.prototype, \"html\"\n        );\n\n        \"get\" in descriptor  // true\n        \"set\" in descriptor  // true\n\n```\n上面代码中，存值函数和取值函数是定义在html属性的描述对象上面，这与 ES5 完全一致。\n\n\n\n# class 的继承\n## 简介\nClass 可以通过extends关键字实现继承，这比 ES5 的通过修改原型链实现继承，要清晰和方便很多。\n```js\n        class ColorPoint extends Point {\n        constructor(x, y, color) {\n            super(x, y); // 调用父类的constructor(x, y)\n            this.color = color;\n        }\n\n        toString() {\n            return this.color + ' ' + super.toString(); // 调用父类的toString()\n        }\n        }\n```\n上面代码中，constructor方法和toString方法之中，都出现了super关键字，它在这里表示父类的构造函数，用来新建父类的this对象。\n\n子类必须在constructor方法中调用super方法，否则新建实例时会报错。这是因为子类自己的this对象，必须先通过父类的构造函数完成塑造，得到与父类同样的实例属性和方法，然后再对其进行加工，加上子类自己的实例属性和方法。如果不调用super方法，子类就得不到this对象。\n\n```js\n\n\n        class Point { /* ... */ }\n\n        class ColorPoint extends Point {\n        constructor() {\n        }\n        }\n\n        let cp = new ColorPoint(); // ReferenceError\n```\n\n上面代码中，ColorPoint继承了父类Point，但是它的构造函数没有调用super方法，导致新建实例时报错。\n\nES5 的继承，实质是先创造子类的实例对象this，然后再将父类的方法添加到this上面（`Parent.apply(this)）`。ES6 的继承机制完全不同，实质是先将父类实例对象的属性和方法，加到this上面（所以必须先调用super方法），然后再用子类的构造函数修改this。\n\n如果子类没有定义`constructor`方法，这个方法会被默认添加，代码如下。也就是说，不管有没有显式定义，任何一个子类都有`constructor`方法。\n```js\n    class ColorPoint extends Point {\n    }\n\n    // 等同于\n    class ColorPoint extends Point {\n    constructor(...args) {\n        super(...args);\n    }\n    }\n\n```\n另一个需要注意的地方是，在子类的构造函数中，只有调用super之后，才可以使用this关键字，否则会报错。这是因为子类实例的构建，基于父类实例，只有super方法才能调用父类实例。\n```js\n    class Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    }\n\n    class ColorPoint extends Point {\n    constructor(x, y, color) {\n        this.color = color; // ReferenceError\n        super(x, y);\n        this.color = color; // 正确\n    }\n    }\n\n```\n上面代码中，子类的constructor方法没有调用super之前，就使用this关键字，结果报错，而放在super方法之后就是正确的。\n\n下面是生成子类实例的代码。\n```js\n\n    let cp = new ColorPoint(25, 8, 'green');\n\n    cp instanceof ColorPoint // true\n    cp instanceof Point // true\n```\n上面代码中，实例对象cp同时是ColorPoint和Point两个类的实例，这与 ES5 的行为完全一致。\n\n\n##  Object.getPrototypeOf()\nObject.getPrototypeOf方法可以用来从子类上获取父类。\n\n    Object.getPrototypeOf(ColorPoint) === Point\n    // true\n因此，可以使用这个方法判断，一个类是否继承了另一个类。\n\n## super 关键字\n\nsuper这个关键字，既可以当作函数使用，也可以当作对象使用。在这两种情况下，它的用法完全不同。\n\n- 第一种情况，super作为函数调用时，代表父类的构造函数。ES6 要求，子类的构造函数必须执行一次super函数。\n```js\n        class A {}\n\n        class B extends A {\n        constructor() {\n            super();\n        }\n    }\n```\n上面代码中，子类B的构造函数之中的super()，代表调用父类的构造函数。这是必须的，否则 JavaScript 引擎会报错。\n\n\n注意，super虽然代表了父类A的构造函数，但是返回的是子类B的实例，即super内部的this指的是B的实例，因此super()在这里相当于A.prototype.constructor.call(this)。\n```js\n    class A {\n    constructor() {\n        console.log(new.target.name);\n    }\n    }\n    class B extends A {\n    constructor() {\n        super();\n    }\n    }\n    new A() // A\n    new B() // B\n```\n上面代码中，new.target指向当前正在执行的函数。可以看到，在super()执行时，它指向的是子类B的构造函数，而不是父类A的构造函数。也就是说，super()内部的this指向的是B。\n\n作为函数时，super()只能用在子类的构造函数之中，用在其他地方就会报错。\n```js\n    class A {}\n\n    class B extends A {\n    m() {\n        super(); // 报错\n    }\n    }\n```\n上面代码中，super()用在B类的m方法之中，就会造成语法错误。\n\n\n\n - 第二种情况，super作为对象时，在普通方法中，指向父类的原型对象；在静态方法中，指向父类。\n```js\n        class A {\n        p() {\n            return 2;\n        }\n        }\n\n        class B extends A {\n        constructor() {\n            super();\n            console.log(super.p()); // 2\n        }\n        }\n\n        let b = new B();\n\n```\n上面代码中，子类B当中的super.p()，就是将super当作一个对象使用。这时，super在普通方法之中，指向A.prototype，所以super.p()就相当于A.prototype.p()。\n\n这里需要注意，由于super指向父类的原型对象，所以定义在父类实例上的方法或属性，是无法通过super调用的。\n```js\n    class A {\n    constructor() {\n        this.p = 2;\n    }\n    }\n\n    class B extends A {\n    get m() {\n        return super.p;\n    }\n    }\n\n    let b = new B();\n    b.m // undefined\n```\n上面代码中，p是父类A实例的属性，super.p就引用不到它。\n\n如果属性定义在父类的原型对象上，super就可以取到。\n```js\n    class A {}\n    A.prototype.x = 2;\n\n    class B extends A {\n    constructor() {\n        super();\n        console.log(super.x) // 2\n    }\n    }\n\n    let b = new B();\n\n```\n上面代码中，属性x是定义在A.prototype上面的，所以super.x可以取到它的值。\n\nES6 规定，在子类普通方法中通过super调用父类的方法时，方法内部的this指向当前的子类实例。\n```js\n        class A {\n        constructor() {\n            this.x = 1;\n        }\n        print() {\n            console.log(this.x);\n        }\n        }\n\n        class B extends A {\n        constructor() {\n            super();\n            this.x = 2;\n        }\n        m() {\n            super.print();\n        }\n        }\n\n        let b = new B();\n        b.m() // 2\n```\n上面代码中，super.print()虽然调用的是A.prototype.print()，但是A.prototype.print()内部的this指向子类B的实例，导致输出的是2，而不是1。也就是说，实际上执行的是super.print.call(this)。\n\n**由于this指向子类实例，所以如果通过super对某个属性赋值，这时super就是this，赋值的属性会变成子类实例的属性。**\n```js\n    class A {\n    constructor() {\n        this.x = 1;\n    }\n    }\n\n    class B extends A {\n    constructor() {\n        super();\n        this.x = 2;\n        super.x = 3;\n        console.log(super.x); // undefined\n        console.log(this.x); // 3\n    }\n    }\n\n    let b = new B();\n\n```\n上面代码中，super.x赋值为3，这时等同于对this.x赋值为3。而当读取super.x的时候，读的是A.prototype.x，所以返回undefined。\n\n\n如果super作为对象，用在静态方法之中，这时super将指向父类，而不是父类的原型对象。\n\n>如果在一个方法前， 加上static关键字， 就表示该方法不会被实例继承， 而是直接通过类来调用， 这就称为“ 静态方法”。父类的静态方法， 可以被子类继承。\n例如:\n```js\n        //非静态方法,需要实例化来调用方法\n        class Foo {\n            classMethod() {\n                return 'hello';\n            }\n        }\n        class Bar extends Foo {\n            classMethod() {\n                return super.classMethod() + ', too';\n            }\n        }\n        let bar= new Bar()\n\n        bar.classMethod(); // hello,too\n        Bar.classMethod();//TypeError: Bar.classMethod is not a function\n\n\n\n        //静态方法,直接从 class 调用方法,实例化以后无法调用方法\n        class Foo {\n\t    static classMethod() {\n\t\treturn 'hello';\n\t        }\n        }\n        class Bar extends Foo {\n            static classMethod() {\n                return super.classMethod() + ', too';\n            }\n        }\n        Bar.classMethod(); //hello,too\n\n        let bar = new Bar;\n        bar.classMethod(); //TypeError: bar.classMethod is not a function\n\n\n```\n\n\n","source":"_posts/2019.08.13.es6.class.md","raw":"---\ntitle: es6中的 class\ntags: [javascript]\ncategories: 随笔\n---\n\n# class 的简单介绍\n\n>ES6 提供了更接近传统语言的写法，引入了 Class（类）这个概念，作为对象的模板。通过class关键字，可以定义类。\n\n\n## class 的定义\n```js\n\n    class Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    toString() {\n        return '(' + this.x + ', ' + this.y + ')';\n    }\n    }  \n```\n\n上面代码定义了一个“类”，可以看到里面有一个constructor方法，这就是构造方法，而this关键字则代表实例对象。也就是说，ES5 的构造函数Point，对应 ES6 的Point类的构造方法。\n\n## class 的使用\n```js\n\n        class Bar {\n        doStuff() {\n            console.log('stuff');\n        }\n        }\n\n        var b = new Bar();\n        b.doStuff() // \"stuff\"\n```\n构造函数的prototype属性，在 ES6 的“类”上面继续存在。事实上，类的所有方法都定义在类的prototype属性上面。\n\n## constructor 方法\n\nconstructor方法是类的默认方法，通过new命令生成对象实例时，自动调用该方法。一个类必须有constructor方法，如果没有显式定义，一个空的constructor方法会被默认添加。\n\n```js\n        class Point {\n        }\n\n        // 等同于\n        class Point {\n        constructor() {}\n        }\n\n```\nconstructor方法默认返回实例对象（即this），完全可以指定返回另外一个对象。\n```js\n        class Foo {\n        constructor() {\n            return Object.create(null);\n        }\n        }\n\n        new Foo() instanceof Foo\n        // false\n```\n上面代码中，constructor函数返回一个全新的对象，结果导致实例对象不是Foo类的实例。\n\n>在 JavaScript 中，判断一个变量的类型尝尝会用 typeof 运算符，在使用 typeof 运算符时采用引用类型存储值会出现一个问题，无论引用的是什么类型的对象，它都返回 \"object\"。ECMAScript 引入了另一个 Java 运算符 instanceof 来解决这个问题。instanceof 运算符与 typeof 运算符相似，用于识别正在处理的对象的类型。与 typeof 方法不同的是，instanceof 方法要求开发者明确地确认对象为某特定类型.通常来讲，使用 instanceof 就是判断一个实例是否属于某种类型.\n\n类必须使用new调用，否则会报错。这是它跟普通构造函数的一个主要区别，后者不用new也可以执行。\n```js\n    class Foo {\n    constructor() {\n        return Object.create(null);\n    }\n    }\n\n    Foo()\n    // TypeError: Class constructor Foo cannot be invoked without 'new'\n\n```\n## 取值函数（getter）和存值函数（setter）\n\n>与 ES5 一样，在“类”的内部可以使用get和set关键字，对某个属性设置存值函数和取值函数，拦截该属性的存取行为。\n```js\n        class MyClass {\n        constructor() {\n            // ...\n        }\n        get prop() {\n            return 'getter';\n        }\n        set prop(value) {\n            console.log('setter: '+value);\n        }\n        }\n\n        let inst = new MyClass();\n\n        inst.prop = 123;\n        // setter: 123\n\n        inst.prop\n        // 'getter'\n\n```\n上面代码中，prop属性有对应的存值函数和取值函数，因此赋值和读取行为都被自定义了。\n\n存值函数和取值函数是设置在属性的 Descriptor 对象上的。\n```js\n        class CustomHTMLElement {\n        constructor(element) {\n            this.element = element;\n        }\n\n        get html() {\n            return this.element.innerHTML;\n        }\n\n        set html(value) {\n            this.element.innerHTML = value;\n        }\n        }\n\n        var descriptor = Object.getOwnPropertyDescriptor(\n        CustomHTMLElement.prototype, \"html\"\n        );\n\n        \"get\" in descriptor  // true\n        \"set\" in descriptor  // true\n\n```\n上面代码中，存值函数和取值函数是定义在html属性的描述对象上面，这与 ES5 完全一致。\n\n\n\n# class 的继承\n## 简介\nClass 可以通过extends关键字实现继承，这比 ES5 的通过修改原型链实现继承，要清晰和方便很多。\n```js\n        class ColorPoint extends Point {\n        constructor(x, y, color) {\n            super(x, y); // 调用父类的constructor(x, y)\n            this.color = color;\n        }\n\n        toString() {\n            return this.color + ' ' + super.toString(); // 调用父类的toString()\n        }\n        }\n```\n上面代码中，constructor方法和toString方法之中，都出现了super关键字，它在这里表示父类的构造函数，用来新建父类的this对象。\n\n子类必须在constructor方法中调用super方法，否则新建实例时会报错。这是因为子类自己的this对象，必须先通过父类的构造函数完成塑造，得到与父类同样的实例属性和方法，然后再对其进行加工，加上子类自己的实例属性和方法。如果不调用super方法，子类就得不到this对象。\n\n```js\n\n\n        class Point { /* ... */ }\n\n        class ColorPoint extends Point {\n        constructor() {\n        }\n        }\n\n        let cp = new ColorPoint(); // ReferenceError\n```\n\n上面代码中，ColorPoint继承了父类Point，但是它的构造函数没有调用super方法，导致新建实例时报错。\n\nES5 的继承，实质是先创造子类的实例对象this，然后再将父类的方法添加到this上面（`Parent.apply(this)）`。ES6 的继承机制完全不同，实质是先将父类实例对象的属性和方法，加到this上面（所以必须先调用super方法），然后再用子类的构造函数修改this。\n\n如果子类没有定义`constructor`方法，这个方法会被默认添加，代码如下。也就是说，不管有没有显式定义，任何一个子类都有`constructor`方法。\n```js\n    class ColorPoint extends Point {\n    }\n\n    // 等同于\n    class ColorPoint extends Point {\n    constructor(...args) {\n        super(...args);\n    }\n    }\n\n```\n另一个需要注意的地方是，在子类的构造函数中，只有调用super之后，才可以使用this关键字，否则会报错。这是因为子类实例的构建，基于父类实例，只有super方法才能调用父类实例。\n```js\n    class Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    }\n\n    class ColorPoint extends Point {\n    constructor(x, y, color) {\n        this.color = color; // ReferenceError\n        super(x, y);\n        this.color = color; // 正确\n    }\n    }\n\n```\n上面代码中，子类的constructor方法没有调用super之前，就使用this关键字，结果报错，而放在super方法之后就是正确的。\n\n下面是生成子类实例的代码。\n```js\n\n    let cp = new ColorPoint(25, 8, 'green');\n\n    cp instanceof ColorPoint // true\n    cp instanceof Point // true\n```\n上面代码中，实例对象cp同时是ColorPoint和Point两个类的实例，这与 ES5 的行为完全一致。\n\n\n##  Object.getPrototypeOf()\nObject.getPrototypeOf方法可以用来从子类上获取父类。\n\n    Object.getPrototypeOf(ColorPoint) === Point\n    // true\n因此，可以使用这个方法判断，一个类是否继承了另一个类。\n\n## super 关键字\n\nsuper这个关键字，既可以当作函数使用，也可以当作对象使用。在这两种情况下，它的用法完全不同。\n\n- 第一种情况，super作为函数调用时，代表父类的构造函数。ES6 要求，子类的构造函数必须执行一次super函数。\n```js\n        class A {}\n\n        class B extends A {\n        constructor() {\n            super();\n        }\n    }\n```\n上面代码中，子类B的构造函数之中的super()，代表调用父类的构造函数。这是必须的，否则 JavaScript 引擎会报错。\n\n\n注意，super虽然代表了父类A的构造函数，但是返回的是子类B的实例，即super内部的this指的是B的实例，因此super()在这里相当于A.prototype.constructor.call(this)。\n```js\n    class A {\n    constructor() {\n        console.log(new.target.name);\n    }\n    }\n    class B extends A {\n    constructor() {\n        super();\n    }\n    }\n    new A() // A\n    new B() // B\n```\n上面代码中，new.target指向当前正在执行的函数。可以看到，在super()执行时，它指向的是子类B的构造函数，而不是父类A的构造函数。也就是说，super()内部的this指向的是B。\n\n作为函数时，super()只能用在子类的构造函数之中，用在其他地方就会报错。\n```js\n    class A {}\n\n    class B extends A {\n    m() {\n        super(); // 报错\n    }\n    }\n```\n上面代码中，super()用在B类的m方法之中，就会造成语法错误。\n\n\n\n - 第二种情况，super作为对象时，在普通方法中，指向父类的原型对象；在静态方法中，指向父类。\n```js\n        class A {\n        p() {\n            return 2;\n        }\n        }\n\n        class B extends A {\n        constructor() {\n            super();\n            console.log(super.p()); // 2\n        }\n        }\n\n        let b = new B();\n\n```\n上面代码中，子类B当中的super.p()，就是将super当作一个对象使用。这时，super在普通方法之中，指向A.prototype，所以super.p()就相当于A.prototype.p()。\n\n这里需要注意，由于super指向父类的原型对象，所以定义在父类实例上的方法或属性，是无法通过super调用的。\n```js\n    class A {\n    constructor() {\n        this.p = 2;\n    }\n    }\n\n    class B extends A {\n    get m() {\n        return super.p;\n    }\n    }\n\n    let b = new B();\n    b.m // undefined\n```\n上面代码中，p是父类A实例的属性，super.p就引用不到它。\n\n如果属性定义在父类的原型对象上，super就可以取到。\n```js\n    class A {}\n    A.prototype.x = 2;\n\n    class B extends A {\n    constructor() {\n        super();\n        console.log(super.x) // 2\n    }\n    }\n\n    let b = new B();\n\n```\n上面代码中，属性x是定义在A.prototype上面的，所以super.x可以取到它的值。\n\nES6 规定，在子类普通方法中通过super调用父类的方法时，方法内部的this指向当前的子类实例。\n```js\n        class A {\n        constructor() {\n            this.x = 1;\n        }\n        print() {\n            console.log(this.x);\n        }\n        }\n\n        class B extends A {\n        constructor() {\n            super();\n            this.x = 2;\n        }\n        m() {\n            super.print();\n        }\n        }\n\n        let b = new B();\n        b.m() // 2\n```\n上面代码中，super.print()虽然调用的是A.prototype.print()，但是A.prototype.print()内部的this指向子类B的实例，导致输出的是2，而不是1。也就是说，实际上执行的是super.print.call(this)。\n\n**由于this指向子类实例，所以如果通过super对某个属性赋值，这时super就是this，赋值的属性会变成子类实例的属性。**\n```js\n    class A {\n    constructor() {\n        this.x = 1;\n    }\n    }\n\n    class B extends A {\n    constructor() {\n        super();\n        this.x = 2;\n        super.x = 3;\n        console.log(super.x); // undefined\n        console.log(this.x); // 3\n    }\n    }\n\n    let b = new B();\n\n```\n上面代码中，super.x赋值为3，这时等同于对this.x赋值为3。而当读取super.x的时候，读的是A.prototype.x，所以返回undefined。\n\n\n如果super作为对象，用在静态方法之中，这时super将指向父类，而不是父类的原型对象。\n\n>如果在一个方法前， 加上static关键字， 就表示该方法不会被实例继承， 而是直接通过类来调用， 这就称为“ 静态方法”。父类的静态方法， 可以被子类继承。\n例如:\n```js\n        //非静态方法,需要实例化来调用方法\n        class Foo {\n            classMethod() {\n                return 'hello';\n            }\n        }\n        class Bar extends Foo {\n            classMethod() {\n                return super.classMethod() + ', too';\n            }\n        }\n        let bar= new Bar()\n\n        bar.classMethod(); // hello,too\n        Bar.classMethod();//TypeError: Bar.classMethod is not a function\n\n\n\n        //静态方法,直接从 class 调用方法,实例化以后无法调用方法\n        class Foo {\n\t    static classMethod() {\n\t\treturn 'hello';\n\t        }\n        }\n        class Bar extends Foo {\n            static classMethod() {\n                return super.classMethod() + ', too';\n            }\n        }\n        Bar.classMethod(); //hello,too\n\n        let bar = new Bar;\n        bar.classMethod(); //TypeError: bar.classMethod is not a function\n\n\n```\n\n\n","slug":"2019.08.13.es6.class","published":1,"date":"2019-08-13T06:06:59.762Z","updated":"2019-08-30T03:40:30.452Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziiqa0018rh9zfkvwfzp0","content":"<h1 id=\"class-的简单介绍\"><a href=\"#class-的简单介绍\" class=\"headerlink\" title=\"class 的简单介绍\"></a>class 的简单介绍</h1><blockquote>\n<p>ES6 提供了更接近传统语言的写法，引入了 Class（类）这个概念，作为对象的模板。通过class关键字，可以定义类。</p>\n</blockquote>\n<h2 id=\"class-的定义\"><a href=\"#class-的定义\" class=\"headerlink\" title=\"class 的定义\"></a>class 的定义</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">constructor</span>(x, y) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">toString() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'('</span> + <span class=\"keyword\">this</span>.x + <span class=\"string\">', '</span> + <span class=\"keyword\">this</span>.y + <span class=\"string\">')'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码定义了一个“类”，可以看到里面有一个constructor方法，这就是构造方法，而this关键字则代表实例对象。也就是说，ES5 的构造函数Point，对应 ES6 的Point类的构造方法。</p>\n<h2 id=\"class-的使用\"><a href=\"#class-的使用\" class=\"headerlink\" title=\"class 的使用\"></a>class 的使用</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bar</span> </span>&#123;</span><br><span class=\"line\">doStuff() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'stuff'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"keyword\">new</span> Bar();</span><br><span class=\"line\">b.doStuff() <span class=\"comment\">// \"stuff\"</span></span><br></pre></td></tr></table></figure>\n<p>构造函数的prototype属性，在 ES6 的“类”上面继续存在。事实上，类的所有方法都定义在类的prototype属性上面。</p>\n<h2 id=\"constructor-方法\"><a href=\"#constructor-方法\" class=\"headerlink\" title=\"constructor 方法\"></a>constructor 方法</h2><p>constructor方法是类的默认方法，通过new命令生成对象实例时，自动调用该方法。一个类必须有constructor方法，如果没有显式定义，一个空的constructor方法会被默认添加。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">constructor</span>() &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>constructor方法默认返回实例对象（即this），完全可以指定返回另外一个对象。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Foo() <span class=\"keyword\">instanceof</span> Foo</span><br><span class=\"line\"><span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure><br>上面代码中，constructor函数返回一个全新的对象，结果导致实例对象不是Foo类的实例。</p>\n<blockquote>\n<p>在 JavaScript 中，判断一个变量的类型尝尝会用 typeof 运算符，在使用 typeof 运算符时采用引用类型存储值会出现一个问题，无论引用的是什么类型的对象，它都返回 “object”。ECMAScript 引入了另一个 Java 运算符 instanceof 来解决这个问题。instanceof 运算符与 typeof 运算符相似，用于识别正在处理的对象的类型。与 typeof 方法不同的是，instanceof 方法要求开发者明确地确认对象为某特定类型.通常来讲，使用 instanceof 就是判断一个实例是否属于某种类型.</p>\n</blockquote>\n<p>类必须使用new调用，否则会报错。这是它跟普通构造函数的一个主要区别，后者不用new也可以执行。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Foo()</span><br><span class=\"line\"><span class=\"comment\">// TypeError: Class constructor Foo cannot be invoked without 'new'</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"取值函数（getter）和存值函数（setter）\"><a href=\"#取值函数（getter）和存值函数（setter）\" class=\"headerlink\" title=\"取值函数（getter）和存值函数（setter）\"></a>取值函数（getter）和存值函数（setter）</h2><blockquote>\n<p>与 ES5 一样，在“类”的内部可以使用get和set关键字，对某个属性设置存值函数和取值函数，拦截该属性的存取行为。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">get</span> prop() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'getter'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">set</span> prop(value) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'setter: '</span>+value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> inst = <span class=\"keyword\">new</span> MyClass();</span><br><span class=\"line\"></span><br><span class=\"line\">inst.prop = <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"comment\">// setter: 123</span></span><br><span class=\"line\"></span><br><span class=\"line\">inst.prop</span><br><span class=\"line\"><span class=\"comment\">// 'getter'</span></span><br></pre></td></tr></table></figure><br>上面代码中，prop属性有对应的存值函数和取值函数，因此赋值和读取行为都被自定义了。</p>\n</blockquote>\n<p>存值函数和取值函数是设置在属性的 Descriptor 对象上的。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomHTMLElement</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">constructor</span>(element) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.element = element;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">get</span> html() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.element.innerHTML;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">set</span> html(value) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.element.innerHTML = value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> descriptor = <span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(</span><br><span class=\"line\">CustomHTMLElement.prototype, <span class=\"string\">\"html\"</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"get\"</span> <span class=\"keyword\">in</span> descriptor  <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"string\">\"set\"</span> <span class=\"keyword\">in</span> descriptor  <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure><br>上面代码中，存值函数和取值函数是定义在html属性的描述对象上面，这与 ES5 完全一致。</p>\n<h1 id=\"class-的继承\"><a href=\"#class-的继承\" class=\"headerlink\" title=\"class 的继承\"></a>class 的继承</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>Class 可以通过extends关键字实现继承，这比 ES5 的通过修改原型链实现继承，要清晰和方便很多。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ColorPoint</span> <span class=\"keyword\">extends</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">constructor</span>(x, y, color) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(x, y); <span class=\"comment\">// 调用父类的constructor(x, y)</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.color = color;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">toString() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.color + <span class=\"string\">' '</span> + <span class=\"keyword\">super</span>.toString(); <span class=\"comment\">// 调用父类的toString()</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>上面代码中，constructor方法和toString方法之中，都出现了super关键字，它在这里表示父类的构造函数，用来新建父类的this对象。</p>\n<p>子类必须在constructor方法中调用super方法，否则新建实例时会报错。这是因为子类自己的this对象，必须先通过父类的构造函数完成塑造，得到与父类同样的实例属性和方法，然后再对其进行加工，加上子类自己的实例属性和方法。如果不调用super方法，子类就得不到this对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ColorPoint</span> <span class=\"keyword\">extends</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> cp = <span class=\"keyword\">new</span> ColorPoint(); <span class=\"comment\">// ReferenceError</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，ColorPoint继承了父类Point，但是它的构造函数没有调用super方法，导致新建实例时报错。</p>\n<p>ES5 的继承，实质是先创造子类的实例对象this，然后再将父类的方法添加到this上面（<code>Parent.apply(this)）</code>。ES6 的继承机制完全不同，实质是先将父类实例对象的属性和方法，加到this上面（所以必须先调用super方法），然后再用子类的构造函数修改this。</p>\n<p>如果子类没有定义<code>constructor</code>方法，这个方法会被默认添加，代码如下。也就是说，不管有没有显式定义，任何一个子类都有<code>constructor</code>方法。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ColorPoint</span> <span class=\"keyword\">extends</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ColorPoint</span> <span class=\"keyword\">extends</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">constructor</span>(...args) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(...args);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>另一个需要注意的地方是，在子类的构造函数中，只有调用super之后，才可以使用this关键字，否则会报错。这是因为子类实例的构建，基于父类实例，只有super方法才能调用父类实例。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">constructor</span>(x, y) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ColorPoint</span> <span class=\"keyword\">extends</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">constructor</span>(x, y, color) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.color = color; <span class=\"comment\">// ReferenceError</span></span><br><span class=\"line\">    <span class=\"keyword\">super</span>(x, y);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.color = color; <span class=\"comment\">// 正确</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>上面代码中，子类的constructor方法没有调用super之前，就使用this关键字，结果报错，而放在super方法之后就是正确的。</p>\n<p>下面是生成子类实例的代码。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> cp = <span class=\"keyword\">new</span> ColorPoint(<span class=\"number\">25</span>, <span class=\"number\">8</span>, <span class=\"string\">'green'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">cp <span class=\"keyword\">instanceof</span> ColorPoint <span class=\"comment\">// true</span></span><br><span class=\"line\">cp <span class=\"keyword\">instanceof</span> Point <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure><br>上面代码中，实例对象cp同时是ColorPoint和Point两个类的实例，这与 ES5 的行为完全一致。</p>\n<h2 id=\"Object-getPrototypeOf\"><a href=\"#Object-getPrototypeOf\" class=\"headerlink\" title=\"Object.getPrototypeOf()\"></a>Object.getPrototypeOf()</h2><p>Object.getPrototypeOf方法可以用来从子类上获取父类。</p>\n<pre><code>Object.getPrototypeOf(ColorPoint) === Point\n// true\n</code></pre><p>因此，可以使用这个方法判断，一个类是否继承了另一个类。</p>\n<h2 id=\"super-关键字\"><a href=\"#super-关键字\" class=\"headerlink\" title=\"super 关键字\"></a>super 关键字</h2><p>super这个关键字，既可以当作函数使用，也可以当作对象使用。在这两种情况下，它的用法完全不同。</p>\n<ul>\n<li>第一种情况，super作为函数调用时，代表父类的构造函数。ES6 要求，子类的构造函数必须执行一次super函数。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n上面代码中，子类B的构造函数之中的super()，代表调用父类的构造函数。这是必须的，否则 JavaScript 引擎会报错。</li>\n</ul>\n<p>注意，super虽然代表了父类A的构造函数，但是返回的是子类B的实例，即super内部的this指的是B的实例，因此super()在这里相当于A.prototype.constructor.call(this)。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span>.target.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">new</span> A() <span class=\"comment\">// A</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> B() <span class=\"comment\">// B</span></span><br></pre></td></tr></table></figure><br>上面代码中，new.target指向当前正在执行的函数。可以看到，在super()执行时，它指向的是子类B的构造函数，而不是父类A的构造函数。也就是说，super()内部的this指向的是B。</p>\n<p>作为函数时，super()只能用在子类的构造函数之中，用在其他地方就会报错。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">m() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(); <span class=\"comment\">// 报错</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>上面代码中，super()用在B类的m方法之中，就会造成语法错误。</p>\n<ul>\n<li>第二种情况，super作为对象时，在普通方法中，指向父类的原型对象；在静态方法中，指向父类。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">p() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">super</span>.p()); <span class=\"comment\">// 2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"keyword\">new</span> B();</span><br></pre></td></tr></table></figure>\n上面代码中，子类B当中的super.p()，就是将super当作一个对象使用。这时，super在普通方法之中，指向A.prototype，所以super.p()就相当于A.prototype.p()。</li>\n</ul>\n<p>这里需要注意，由于super指向父类的原型对象，所以定义在父类实例上的方法或属性，是无法通过super调用的。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.p = <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">get</span> m() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"keyword\">new</span> B();</span><br><span class=\"line\">b.m <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure><br>上面代码中，p是父类A实例的属性，super.p就引用不到它。</p>\n<p>如果属性定义在父类的原型对象上，super就可以取到。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;&#125;</span><br><span class=\"line\">A.prototype.x = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">super</span>.x) <span class=\"comment\">// 2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"keyword\">new</span> B();</span><br></pre></td></tr></table></figure><br>上面代码中，属性x是定义在A.prototype上面的，所以super.x可以取到它的值。</p>\n<p>ES6 规定，在子类普通方法中通过super调用父类的方法时，方法内部的this指向当前的子类实例。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">print() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">m() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.print();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"keyword\">new</span> B();</span><br><span class=\"line\">b.m() <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure><br>上面代码中，super.print()虽然调用的是A.prototype.print()，但是A.prototype.print()内部的this指向子类B的实例，导致输出的是2，而不是1。也就是说，实际上执行的是super.print.call(this)。</p>\n<p><strong>由于this指向子类实例，所以如果通过super对某个属性赋值，这时super就是this，赋值的属性会变成子类实例的属性。</strong><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.x = <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">super</span>.x); <span class=\"comment\">// undefined</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.x); <span class=\"comment\">// 3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"keyword\">new</span> B();</span><br></pre></td></tr></table></figure><br>上面代码中，super.x赋值为3，这时等同于对this.x赋值为3。而当读取super.x的时候，读的是A.prototype.x，所以返回undefined。</p>\n<p>如果super作为对象，用在静态方法之中，这时super将指向父类，而不是父类的原型对象。</p>\n<blockquote>\n<p>如果在一个方法前， 加上static关键字， 就表示该方法不会被实例继承， 而是直接通过类来调用， 这就称为“ 静态方法”。父类的静态方法， 可以被子类继承。<br>例如:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"comment\">//非静态方法,需要实例化来调用方法</span></span><br><span class=\"line\">      <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> </span>&#123;</span><br><span class=\"line\">          classMethod() &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> <span class=\"string\">'hello'</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bar</span> <span class=\"keyword\">extends</span> <span class=\"title\">Foo</span> </span>&#123;</span><br><span class=\"line\">          classMethod() &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.classMethod() + <span class=\"string\">', too'</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> bar= <span class=\"keyword\">new</span> Bar()</span><br><span class=\"line\"></span><br><span class=\"line\">      bar.classMethod(); <span class=\"comment\">// hello,too</span></span><br><span class=\"line\">      Bar.classMethod();<span class=\"comment\">//TypeError: Bar.classMethod is not a function</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//静态方法,直接从 class 调用方法,实例化以后无法调用方法</span></span><br><span class=\"line\">      <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">static</span> classMethod() &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"string\">'hello'</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bar</span> <span class=\"keyword\">extends</span> <span class=\"title\">Foo</span> </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">static</span> classMethod() &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.classMethod() + <span class=\"string\">', too'</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      Bar.classMethod(); <span class=\"comment\">//hello,too</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">let</span> bar = <span class=\"keyword\">new</span> Bar;</span><br><span class=\"line\">      bar.classMethod(); <span class=\"comment\">//TypeError: bar.classMethod is not a function</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"class-的简单介绍\"><a href=\"#class-的简单介绍\" class=\"headerlink\" title=\"class 的简单介绍\"></a>class 的简单介绍</h1><blockquote>\n<p>ES6 提供了更接近传统语言的写法，引入了 Class（类）这个概念，作为对象的模板。通过class关键字，可以定义类。</p>\n</blockquote>\n<h2 id=\"class-的定义\"><a href=\"#class-的定义\" class=\"headerlink\" title=\"class 的定义\"></a>class 的定义</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">constructor</span>(x, y) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">toString() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'('</span> + <span class=\"keyword\">this</span>.x + <span class=\"string\">', '</span> + <span class=\"keyword\">this</span>.y + <span class=\"string\">')'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码定义了一个“类”，可以看到里面有一个constructor方法，这就是构造方法，而this关键字则代表实例对象。也就是说，ES5 的构造函数Point，对应 ES6 的Point类的构造方法。</p>\n<h2 id=\"class-的使用\"><a href=\"#class-的使用\" class=\"headerlink\" title=\"class 的使用\"></a>class 的使用</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bar</span> </span>&#123;</span><br><span class=\"line\">doStuff() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'stuff'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"keyword\">new</span> Bar();</span><br><span class=\"line\">b.doStuff() <span class=\"comment\">// \"stuff\"</span></span><br></pre></td></tr></table></figure>\n<p>构造函数的prototype属性，在 ES6 的“类”上面继续存在。事实上，类的所有方法都定义在类的prototype属性上面。</p>\n<h2 id=\"constructor-方法\"><a href=\"#constructor-方法\" class=\"headerlink\" title=\"constructor 方法\"></a>constructor 方法</h2><p>constructor方法是类的默认方法，通过new命令生成对象实例时，自动调用该方法。一个类必须有constructor方法，如果没有显式定义，一个空的constructor方法会被默认添加。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">constructor</span>() &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>constructor方法默认返回实例对象（即this），完全可以指定返回另外一个对象。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Foo() <span class=\"keyword\">instanceof</span> Foo</span><br><span class=\"line\"><span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure><br>上面代码中，constructor函数返回一个全新的对象，结果导致实例对象不是Foo类的实例。</p>\n<blockquote>\n<p>在 JavaScript 中，判断一个变量的类型尝尝会用 typeof 运算符，在使用 typeof 运算符时采用引用类型存储值会出现一个问题，无论引用的是什么类型的对象，它都返回 “object”。ECMAScript 引入了另一个 Java 运算符 instanceof 来解决这个问题。instanceof 运算符与 typeof 运算符相似，用于识别正在处理的对象的类型。与 typeof 方法不同的是，instanceof 方法要求开发者明确地确认对象为某特定类型.通常来讲，使用 instanceof 就是判断一个实例是否属于某种类型.</p>\n</blockquote>\n<p>类必须使用new调用，否则会报错。这是它跟普通构造函数的一个主要区别，后者不用new也可以执行。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Foo()</span><br><span class=\"line\"><span class=\"comment\">// TypeError: Class constructor Foo cannot be invoked without 'new'</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"取值函数（getter）和存值函数（setter）\"><a href=\"#取值函数（getter）和存值函数（setter）\" class=\"headerlink\" title=\"取值函数（getter）和存值函数（setter）\"></a>取值函数（getter）和存值函数（setter）</h2><blockquote>\n<p>与 ES5 一样，在“类”的内部可以使用get和set关键字，对某个属性设置存值函数和取值函数，拦截该属性的存取行为。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClass</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">get</span> prop() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'getter'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">set</span> prop(value) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'setter: '</span>+value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> inst = <span class=\"keyword\">new</span> MyClass();</span><br><span class=\"line\"></span><br><span class=\"line\">inst.prop = <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"comment\">// setter: 123</span></span><br><span class=\"line\"></span><br><span class=\"line\">inst.prop</span><br><span class=\"line\"><span class=\"comment\">// 'getter'</span></span><br></pre></td></tr></table></figure><br>上面代码中，prop属性有对应的存值函数和取值函数，因此赋值和读取行为都被自定义了。</p>\n</blockquote>\n<p>存值函数和取值函数是设置在属性的 Descriptor 对象上的。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomHTMLElement</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">constructor</span>(element) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.element = element;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">get</span> html() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.element.innerHTML;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">set</span> html(value) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.element.innerHTML = value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> descriptor = <span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(</span><br><span class=\"line\">CustomHTMLElement.prototype, <span class=\"string\">\"html\"</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"get\"</span> <span class=\"keyword\">in</span> descriptor  <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"string\">\"set\"</span> <span class=\"keyword\">in</span> descriptor  <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure><br>上面代码中，存值函数和取值函数是定义在html属性的描述对象上面，这与 ES5 完全一致。</p>\n<h1 id=\"class-的继承\"><a href=\"#class-的继承\" class=\"headerlink\" title=\"class 的继承\"></a>class 的继承</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>Class 可以通过extends关键字实现继承，这比 ES5 的通过修改原型链实现继承，要清晰和方便很多。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ColorPoint</span> <span class=\"keyword\">extends</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">constructor</span>(x, y, color) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(x, y); <span class=\"comment\">// 调用父类的constructor(x, y)</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.color = color;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">toString() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.color + <span class=\"string\">' '</span> + <span class=\"keyword\">super</span>.toString(); <span class=\"comment\">// 调用父类的toString()</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>上面代码中，constructor方法和toString方法之中，都出现了super关键字，它在这里表示父类的构造函数，用来新建父类的this对象。</p>\n<p>子类必须在constructor方法中调用super方法，否则新建实例时会报错。这是因为子类自己的this对象，必须先通过父类的构造函数完成塑造，得到与父类同样的实例属性和方法，然后再对其进行加工，加上子类自己的实例属性和方法。如果不调用super方法，子类就得不到this对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ColorPoint</span> <span class=\"keyword\">extends</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> cp = <span class=\"keyword\">new</span> ColorPoint(); <span class=\"comment\">// ReferenceError</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，ColorPoint继承了父类Point，但是它的构造函数没有调用super方法，导致新建实例时报错。</p>\n<p>ES5 的继承，实质是先创造子类的实例对象this，然后再将父类的方法添加到this上面（<code>Parent.apply(this)）</code>。ES6 的继承机制完全不同，实质是先将父类实例对象的属性和方法，加到this上面（所以必须先调用super方法），然后再用子类的构造函数修改this。</p>\n<p>如果子类没有定义<code>constructor</code>方法，这个方法会被默认添加，代码如下。也就是说，不管有没有显式定义，任何一个子类都有<code>constructor</code>方法。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ColorPoint</span> <span class=\"keyword\">extends</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ColorPoint</span> <span class=\"keyword\">extends</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">constructor</span>(...args) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(...args);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>另一个需要注意的地方是，在子类的构造函数中，只有调用super之后，才可以使用this关键字，否则会报错。这是因为子类实例的构建，基于父类实例，只有super方法才能调用父类实例。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">constructor</span>(x, y) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ColorPoint</span> <span class=\"keyword\">extends</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">constructor</span>(x, y, color) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.color = color; <span class=\"comment\">// ReferenceError</span></span><br><span class=\"line\">    <span class=\"keyword\">super</span>(x, y);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.color = color; <span class=\"comment\">// 正确</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>上面代码中，子类的constructor方法没有调用super之前，就使用this关键字，结果报错，而放在super方法之后就是正确的。</p>\n<p>下面是生成子类实例的代码。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> cp = <span class=\"keyword\">new</span> ColorPoint(<span class=\"number\">25</span>, <span class=\"number\">8</span>, <span class=\"string\">'green'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">cp <span class=\"keyword\">instanceof</span> ColorPoint <span class=\"comment\">// true</span></span><br><span class=\"line\">cp <span class=\"keyword\">instanceof</span> Point <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure><br>上面代码中，实例对象cp同时是ColorPoint和Point两个类的实例，这与 ES5 的行为完全一致。</p>\n<h2 id=\"Object-getPrototypeOf\"><a href=\"#Object-getPrototypeOf\" class=\"headerlink\" title=\"Object.getPrototypeOf()\"></a>Object.getPrototypeOf()</h2><p>Object.getPrototypeOf方法可以用来从子类上获取父类。</p>\n<pre><code>Object.getPrototypeOf(ColorPoint) === Point\n// true\n</code></pre><p>因此，可以使用这个方法判断，一个类是否继承了另一个类。</p>\n<h2 id=\"super-关键字\"><a href=\"#super-关键字\" class=\"headerlink\" title=\"super 关键字\"></a>super 关键字</h2><p>super这个关键字，既可以当作函数使用，也可以当作对象使用。在这两种情况下，它的用法完全不同。</p>\n<ul>\n<li>第一种情况，super作为函数调用时，代表父类的构造函数。ES6 要求，子类的构造函数必须执行一次super函数。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n上面代码中，子类B的构造函数之中的super()，代表调用父类的构造函数。这是必须的，否则 JavaScript 引擎会报错。</li>\n</ul>\n<p>注意，super虽然代表了父类A的构造函数，但是返回的是子类B的实例，即super内部的this指的是B的实例，因此super()在这里相当于A.prototype.constructor.call(this)。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span>.target.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">new</span> A() <span class=\"comment\">// A</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> B() <span class=\"comment\">// B</span></span><br></pre></td></tr></table></figure><br>上面代码中，new.target指向当前正在执行的函数。可以看到，在super()执行时，它指向的是子类B的构造函数，而不是父类A的构造函数。也就是说，super()内部的this指向的是B。</p>\n<p>作为函数时，super()只能用在子类的构造函数之中，用在其他地方就会报错。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">m() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(); <span class=\"comment\">// 报错</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>上面代码中，super()用在B类的m方法之中，就会造成语法错误。</p>\n<ul>\n<li>第二种情况，super作为对象时，在普通方法中，指向父类的原型对象；在静态方法中，指向父类。<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\">p() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">super</span>.p()); <span class=\"comment\">// 2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"keyword\">new</span> B();</span><br></pre></td></tr></table></figure>\n上面代码中，子类B当中的super.p()，就是将super当作一个对象使用。这时，super在普通方法之中，指向A.prototype，所以super.p()就相当于A.prototype.p()。</li>\n</ul>\n<p>这里需要注意，由于super指向父类的原型对象，所以定义在父类实例上的方法或属性，是无法通过super调用的。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.p = <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">get</span> m() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"keyword\">new</span> B();</span><br><span class=\"line\">b.m <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure><br>上面代码中，p是父类A实例的属性，super.p就引用不到它。</p>\n<p>如果属性定义在父类的原型对象上，super就可以取到。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;&#125;</span><br><span class=\"line\">A.prototype.x = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">super</span>.x) <span class=\"comment\">// 2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"keyword\">new</span> B();</span><br></pre></td></tr></table></figure><br>上面代码中，属性x是定义在A.prototype上面的，所以super.x可以取到它的值。</p>\n<p>ES6 规定，在子类普通方法中通过super调用父类的方法时，方法内部的this指向当前的子类实例。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">print() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">m() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.print();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"keyword\">new</span> B();</span><br><span class=\"line\">b.m() <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure><br>上面代码中，super.print()虽然调用的是A.prototype.print()，但是A.prototype.print()内部的this指向子类B的实例，导致输出的是2，而不是1。也就是说，实际上执行的是super.print.call(this)。</p>\n<p><strong>由于this指向子类实例，所以如果通过super对某个属性赋值，这时super就是this，赋值的属性会变成子类实例的属性。</strong><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.x = <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">super</span>.x); <span class=\"comment\">// undefined</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.x); <span class=\"comment\">// 3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"keyword\">new</span> B();</span><br></pre></td></tr></table></figure><br>上面代码中，super.x赋值为3，这时等同于对this.x赋值为3。而当读取super.x的时候，读的是A.prototype.x，所以返回undefined。</p>\n<p>如果super作为对象，用在静态方法之中，这时super将指向父类，而不是父类的原型对象。</p>\n<blockquote>\n<p>如果在一个方法前， 加上static关键字， 就表示该方法不会被实例继承， 而是直接通过类来调用， 这就称为“ 静态方法”。父类的静态方法， 可以被子类继承。<br>例如:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"comment\">//非静态方法,需要实例化来调用方法</span></span><br><span class=\"line\">      <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> </span>&#123;</span><br><span class=\"line\">          classMethod() &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> <span class=\"string\">'hello'</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bar</span> <span class=\"keyword\">extends</span> <span class=\"title\">Foo</span> </span>&#123;</span><br><span class=\"line\">          classMethod() &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.classMethod() + <span class=\"string\">', too'</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> bar= <span class=\"keyword\">new</span> Bar()</span><br><span class=\"line\"></span><br><span class=\"line\">      bar.classMethod(); <span class=\"comment\">// hello,too</span></span><br><span class=\"line\">      Bar.classMethod();<span class=\"comment\">//TypeError: Bar.classMethod is not a function</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//静态方法,直接从 class 调用方法,实例化以后无法调用方法</span></span><br><span class=\"line\">      <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">static</span> classMethod() &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"string\">'hello'</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bar</span> <span class=\"keyword\">extends</span> <span class=\"title\">Foo</span> </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">static</span> classMethod() &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.classMethod() + <span class=\"string\">', too'</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      Bar.classMethod(); <span class=\"comment\">//hello,too</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">let</span> bar = <span class=\"keyword\">new</span> Bar;</span><br><span class=\"line\">      bar.classMethod(); <span class=\"comment\">//TypeError: bar.classMethod is not a function</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n"},{"title":"简单了解npx","_content":"\n# 什么是 NPX\n\n>npx是一个工具，旨在提高从npm注册表使用软件包的体验 ，npm使得它非常容易地安装和管理托管在注册表上的依赖项，npx使得使用CLI工具和其他托管在注册表。它大大简化了一些事情.\n\n# NPX 的功能\n\nnpx 可以调用方便地调用项目安装的模块,同时也可以避免全局安装模块.\n## 调用项目安装模块\nnpx 的原理很简单，就是运行的时候，会到node_modules/.bin路径和环境变量$PATH里面，检查命令是否存在。\n## 避免全局安装模块\n\n除了调用项目内部模块，npx 还能避免全局安装的模块。比如，`create-react-app`这个模块是全局安装，npx 可以运行它，而且不进行全局安装。\n\n\n     npx create-react-app my-react-app\n上面代码运行时，npx 将`create-react-app`下载到一个临时目录，使用以后再删除。所以，以后再次执行上面的命令，会重新下载`create-react-app`。\n\n下载全局模块时，npx 允许指定版本。\n\n\n    npx uglify-js@3.1.0 main.js -o ./dist/main.js\n上面代码指定使用 3.1.0 版本的uglify-js压缩脚本。\n\n注意，只要 npx 后面的模块无法在本地发现，就会下载同名模块。比如，本地没有安装http-server模块，下面的命令会自动下载该模块，在当前目录启动一个 Web 服务。\n\n\n    $ npx http-server\n\n\n# npx 的参数\n\n## --no-install\n\n强制使用本地模块,不下载远程模块,如果远程模块不存在会报错.\n\n    npx --no-install http-server\n\n## --ignore-existing\n\n忽略本地模块,强制使用远程模块\n\n    npx --ignore-existing http-server\n\n\n## -p\n指定要安装的模块\n\n    npx -p node@0.12.8 node -v \n\n\n## -c\n\n-c 参数\n如果 npx 安装多个模块，默认情况下，所执行的命令之中，只有第一个可执行项会使用 npx 安装的模块，后面的可执行项还是会交给 Shell 解释。-c参数可以将所有命令都用 npx 解释。有了它，下面代码就可以正常执行。\n\n\n    npx -p lolcatjs -p cowsay -c 'cowsay hello | lolcatjs'\n\n# 执行远程模块\n\n## 执行 Gist 代码\n        npx https://gist.github.com/zkat/4bc19503fe9e9309e2bfaa2c58074d32\n\n##  执行仓库代码\n      npx github:piuccio/cowsay hello   \n\n","source":"_posts/2019.08.14.npx.md","raw":"---\ntitle: 简单了解npx\ntags: []\ncategories: 随笔\n---\n\n# 什么是 NPX\n\n>npx是一个工具，旨在提高从npm注册表使用软件包的体验 ，npm使得它非常容易地安装和管理托管在注册表上的依赖项，npx使得使用CLI工具和其他托管在注册表。它大大简化了一些事情.\n\n# NPX 的功能\n\nnpx 可以调用方便地调用项目安装的模块,同时也可以避免全局安装模块.\n## 调用项目安装模块\nnpx 的原理很简单，就是运行的时候，会到node_modules/.bin路径和环境变量$PATH里面，检查命令是否存在。\n## 避免全局安装模块\n\n除了调用项目内部模块，npx 还能避免全局安装的模块。比如，`create-react-app`这个模块是全局安装，npx 可以运行它，而且不进行全局安装。\n\n\n     npx create-react-app my-react-app\n上面代码运行时，npx 将`create-react-app`下载到一个临时目录，使用以后再删除。所以，以后再次执行上面的命令，会重新下载`create-react-app`。\n\n下载全局模块时，npx 允许指定版本。\n\n\n    npx uglify-js@3.1.0 main.js -o ./dist/main.js\n上面代码指定使用 3.1.0 版本的uglify-js压缩脚本。\n\n注意，只要 npx 后面的模块无法在本地发现，就会下载同名模块。比如，本地没有安装http-server模块，下面的命令会自动下载该模块，在当前目录启动一个 Web 服务。\n\n\n    $ npx http-server\n\n\n# npx 的参数\n\n## --no-install\n\n强制使用本地模块,不下载远程模块,如果远程模块不存在会报错.\n\n    npx --no-install http-server\n\n## --ignore-existing\n\n忽略本地模块,强制使用远程模块\n\n    npx --ignore-existing http-server\n\n\n## -p\n指定要安装的模块\n\n    npx -p node@0.12.8 node -v \n\n\n## -c\n\n-c 参数\n如果 npx 安装多个模块，默认情况下，所执行的命令之中，只有第一个可执行项会使用 npx 安装的模块，后面的可执行项还是会交给 Shell 解释。-c参数可以将所有命令都用 npx 解释。有了它，下面代码就可以正常执行。\n\n\n    npx -p lolcatjs -p cowsay -c 'cowsay hello | lolcatjs'\n\n# 执行远程模块\n\n## 执行 Gist 代码\n        npx https://gist.github.com/zkat/4bc19503fe9e9309e2bfaa2c58074d32\n\n##  执行仓库代码\n      npx github:piuccio/cowsay hello   \n\n","slug":"2019.08.14.npx","published":1,"date":"2019-08-14T02:13:09.649Z","updated":"2019-08-14T02:28:39.015Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziiqa0019rh9zgghi8v6a","content":"<h1 id=\"什么是-NPX\"><a href=\"#什么是-NPX\" class=\"headerlink\" title=\"什么是 NPX\"></a>什么是 NPX</h1><blockquote>\n<p>npx是一个工具，旨在提高从npm注册表使用软件包的体验 ，npm使得它非常容易地安装和管理托管在注册表上的依赖项，npx使得使用CLI工具和其他托管在注册表。它大大简化了一些事情.</p>\n</blockquote>\n<h1 id=\"NPX-的功能\"><a href=\"#NPX-的功能\" class=\"headerlink\" title=\"NPX 的功能\"></a>NPX 的功能</h1><p>npx 可以调用方便地调用项目安装的模块,同时也可以避免全局安装模块.</p>\n<h2 id=\"调用项目安装模块\"><a href=\"#调用项目安装模块\" class=\"headerlink\" title=\"调用项目安装模块\"></a>调用项目安装模块</h2><p>npx 的原理很简单，就是运行的时候，会到node_modules/.bin路径和环境变量$PATH里面，检查命令是否存在。</p>\n<h2 id=\"避免全局安装模块\"><a href=\"#避免全局安装模块\" class=\"headerlink\" title=\"避免全局安装模块\"></a>避免全局安装模块</h2><p>除了调用项目内部模块，npx 还能避免全局安装的模块。比如，<code>create-react-app</code>这个模块是全局安装，npx 可以运行它，而且不进行全局安装。</p>\n<pre><code>npx create-react-app my-react-app\n</code></pre><p>上面代码运行时，npx 将<code>create-react-app</code>下载到一个临时目录，使用以后再删除。所以，以后再次执行上面的命令，会重新下载<code>create-react-app</code>。</p>\n<p>下载全局模块时，npx 允许指定版本。</p>\n<pre><code>npx uglify-js@3.1.0 main.js -o ./dist/main.js\n</code></pre><p>上面代码指定使用 3.1.0 版本的uglify-js压缩脚本。</p>\n<p>注意，只要 npx 后面的模块无法在本地发现，就会下载同名模块。比如，本地没有安装http-server模块，下面的命令会自动下载该模块，在当前目录启动一个 Web 服务。</p>\n<pre><code>$ npx http-server\n</code></pre><h1 id=\"npx-的参数\"><a href=\"#npx-的参数\" class=\"headerlink\" title=\"npx 的参数\"></a>npx 的参数</h1><h2 id=\"–no-install\"><a href=\"#–no-install\" class=\"headerlink\" title=\"–no-install\"></a>–no-install</h2><p>强制使用本地模块,不下载远程模块,如果远程模块不存在会报错.</p>\n<pre><code>npx --no-install http-server\n</code></pre><h2 id=\"–ignore-existing\"><a href=\"#–ignore-existing\" class=\"headerlink\" title=\"–ignore-existing\"></a>–ignore-existing</h2><p>忽略本地模块,强制使用远程模块</p>\n<pre><code>npx --ignore-existing http-server\n</code></pre><h2 id=\"p\"><a href=\"#p\" class=\"headerlink\" title=\"-p\"></a>-p</h2><p>指定要安装的模块</p>\n<pre><code>npx -p node@0.12.8 node -v \n</code></pre><h2 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"-c\"></a>-c</h2><p>-c 参数<br>如果 npx 安装多个模块，默认情况下，所执行的命令之中，只有第一个可执行项会使用 npx 安装的模块，后面的可执行项还是会交给 Shell 解释。-c参数可以将所有命令都用 npx 解释。有了它，下面代码就可以正常执行。</p>\n<pre><code>npx -p lolcatjs -p cowsay -c &apos;cowsay hello | lolcatjs&apos;\n</code></pre><h1 id=\"执行远程模块\"><a href=\"#执行远程模块\" class=\"headerlink\" title=\"执行远程模块\"></a>执行远程模块</h1><h2 id=\"执行-Gist-代码\"><a href=\"#执行-Gist-代码\" class=\"headerlink\" title=\"执行 Gist 代码\"></a>执行 Gist 代码</h2><pre><code>npx https://gist.github.com/zkat/4bc19503fe9e9309e2bfaa2c58074d32\n</code></pre><h2 id=\"执行仓库代码\"><a href=\"#执行仓库代码\" class=\"headerlink\" title=\"执行仓库代码\"></a>执行仓库代码</h2><pre><code>npx github:piuccio/cowsay hello   \n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"什么是-NPX\"><a href=\"#什么是-NPX\" class=\"headerlink\" title=\"什么是 NPX\"></a>什么是 NPX</h1><blockquote>\n<p>npx是一个工具，旨在提高从npm注册表使用软件包的体验 ，npm使得它非常容易地安装和管理托管在注册表上的依赖项，npx使得使用CLI工具和其他托管在注册表。它大大简化了一些事情.</p>\n</blockquote>\n<h1 id=\"NPX-的功能\"><a href=\"#NPX-的功能\" class=\"headerlink\" title=\"NPX 的功能\"></a>NPX 的功能</h1><p>npx 可以调用方便地调用项目安装的模块,同时也可以避免全局安装模块.</p>\n<h2 id=\"调用项目安装模块\"><a href=\"#调用项目安装模块\" class=\"headerlink\" title=\"调用项目安装模块\"></a>调用项目安装模块</h2><p>npx 的原理很简单，就是运行的时候，会到node_modules/.bin路径和环境变量$PATH里面，检查命令是否存在。</p>\n<h2 id=\"避免全局安装模块\"><a href=\"#避免全局安装模块\" class=\"headerlink\" title=\"避免全局安装模块\"></a>避免全局安装模块</h2><p>除了调用项目内部模块，npx 还能避免全局安装的模块。比如，<code>create-react-app</code>这个模块是全局安装，npx 可以运行它，而且不进行全局安装。</p>\n<pre><code>npx create-react-app my-react-app\n</code></pre><p>上面代码运行时，npx 将<code>create-react-app</code>下载到一个临时目录，使用以后再删除。所以，以后再次执行上面的命令，会重新下载<code>create-react-app</code>。</p>\n<p>下载全局模块时，npx 允许指定版本。</p>\n<pre><code>npx uglify-js@3.1.0 main.js -o ./dist/main.js\n</code></pre><p>上面代码指定使用 3.1.0 版本的uglify-js压缩脚本。</p>\n<p>注意，只要 npx 后面的模块无法在本地发现，就会下载同名模块。比如，本地没有安装http-server模块，下面的命令会自动下载该模块，在当前目录启动一个 Web 服务。</p>\n<pre><code>$ npx http-server\n</code></pre><h1 id=\"npx-的参数\"><a href=\"#npx-的参数\" class=\"headerlink\" title=\"npx 的参数\"></a>npx 的参数</h1><h2 id=\"–no-install\"><a href=\"#–no-install\" class=\"headerlink\" title=\"–no-install\"></a>–no-install</h2><p>强制使用本地模块,不下载远程模块,如果远程模块不存在会报错.</p>\n<pre><code>npx --no-install http-server\n</code></pre><h2 id=\"–ignore-existing\"><a href=\"#–ignore-existing\" class=\"headerlink\" title=\"–ignore-existing\"></a>–ignore-existing</h2><p>忽略本地模块,强制使用远程模块</p>\n<pre><code>npx --ignore-existing http-server\n</code></pre><h2 id=\"p\"><a href=\"#p\" class=\"headerlink\" title=\"-p\"></a>-p</h2><p>指定要安装的模块</p>\n<pre><code>npx -p node@0.12.8 node -v \n</code></pre><h2 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"-c\"></a>-c</h2><p>-c 参数<br>如果 npx 安装多个模块，默认情况下，所执行的命令之中，只有第一个可执行项会使用 npx 安装的模块，后面的可执行项还是会交给 Shell 解释。-c参数可以将所有命令都用 npx 解释。有了它，下面代码就可以正常执行。</p>\n<pre><code>npx -p lolcatjs -p cowsay -c &apos;cowsay hello | lolcatjs&apos;\n</code></pre><h1 id=\"执行远程模块\"><a href=\"#执行远程模块\" class=\"headerlink\" title=\"执行远程模块\"></a>执行远程模块</h1><h2 id=\"执行-Gist-代码\"><a href=\"#执行-Gist-代码\" class=\"headerlink\" title=\"执行 Gist 代码\"></a>执行 Gist 代码</h2><pre><code>npx https://gist.github.com/zkat/4bc19503fe9e9309e2bfaa2c58074d32\n</code></pre><h2 id=\"执行仓库代码\"><a href=\"#执行仓库代码\" class=\"headerlink\" title=\"执行仓库代码\"></a>执行仓库代码</h2><pre><code>npx github:piuccio/cowsay hello   \n</code></pre>"},{"title":"el-upload 上传前计算文件的 MD5","_content":"\n## 获取要上传的文件\n\n使用`el-upload`的`beforeUpload`方法\n\n> `beforeUpload`:上传文件之前的钩子，参数为上传的文件，若返回 false 或者返回 Promise 且被 reject，则停止上传。\n```js\n\n    <el-upload\n            ref=\"upload\"\n            :action=\"postIP\"\n            :limit=\"1\"\n            :onError=\"uploadError\"\n            :onSuccess=\"uploadSuccess\"\n            :beforeUpload=\"beforeUpload\"\n        >\n    <el-button slot=\"trigger\" size=\"small\" type=\"primary\">选取人员信息 EXCEL 文件上传</el-button>\n    </el-upload>\n\n获取文件\n\n    beforeUpload(file) {\n        return utils.calcMd5(file).then(res => {\n            return Promise.resolve();\n            } else {\n            return Promise.reject();\n            }\n        });\n```\n获取到文件以后调用计算 md5 的函数,计算成功返回`Promise.resolve()`,文件进行上传,否则返回`Promise.reject()`,文件不上传.\n计算文件的 md5 值是一个比较耗时的操作,为了保证计算完文件的 md5 值以后再上传文件,`calcMd5()`中也使用了 `promise`.\n\n## 计算文件的 md5 值\n\n### 文件分割\n\n考虑到上传的文件可能很大,所以将文件分割.\n\n```js\n        //分割文件同时考虑到浏览器的兼容性\n        var blobSlice = File.prototype.slice || File.prototype.mozSlice || File.prototype.webkitSlice,\n        //每份文件 2MB\n        chunkSize = 2097152,\n        chunks = Math.ceil(file.size / chunkSize),\n        currentChunk = 0\n```\n### 调用 sparkMd5\n```js\n    spark = new SparkMD5.ArrayBuffer(),\n    fileReader = new FileReader();\n    fileReader.onload = function(e) {\n    // console.log(\"read chunk nr\", currentChunk + 1, \"of\", chunks);\n    spark.append(e.target.result); // Append array buffer\n    currentChunk++;\n\n    if (currentChunk < chunks) {\n        loadNext();\n    } else {\n        // console.log(\"finished loading\");\n        // console.info(\"computed hash\", spark.end()); // Compute hash\n    }\n    };\n    fileReader.onerror = function() {\n    console.log(\"oops, something went wrong.\");\n    };\n    function loadNext() {\n    var start = currentChunk * chunkSize,\n        end = start + chunkSize >= file.size ? file.size : start + chunkSize;\n\n    fileReader.readAsArrayBuffer(blobSlice.call(file, start, end));\n    }\n    loadNext();\n```\n### 完整代码\n```js\n        calcMd5(file) {\n        return new Promise((resolve, reject) => {\n        var blobSlice = File.prototype.slice || File.prototype.mozSlice || File.prototype.webkitSlice,\n            chunkSize = 2097152, // Read in chunks of 2MB\n            chunks = Math.ceil(file.size / chunkSize),\n            currentChunk = 0,\n            spark = new SparkMD5.ArrayBuffer(),\n            fileReader = new FileReader();\n        fileReader.onload = function(e) {\n            // console.log(\"read chunk nr\", currentChunk + 1, \"of\", chunks);\n            spark.append(e.target.result); // Append array buffer\n            currentChunk++;\n\n            if (currentChunk < chunks) {\n            loadNext();\n            } else {\n            // console.log(\"finished loading\");\n            // console.info(\"computed hash\", spark.end()); // Compute hash\n            resolve([true, spark.end()]);\n            }\n        };\n        fileReader.onerror = function() {\n            reject(\"oops, something went wrong.\");\n        };\n        function loadNext() {\n            var start = currentChunk * chunkSize,\n            end = start + chunkSize >= file.size ? file.size : start + chunkSize;\n\n            fileReader.readAsArrayBuffer(blobSlice.call(file, start, end));\n        }\n        loadNext();\n        });\n    }\n\n     beforeUpload(file) {\n      return utils.calcMd5(file).then(res => {\n        if (res[0]) {\n          console.log(res[1]) //计算完的 md5 值\n\n         \n          return Promise.resolve();\n        } else {\n          return Promise.reject();\n        }\n      });\n```","source":"_posts/2019.08.26.elUpload.md","raw":"---\ntitle: el-upload 上传前计算文件的 MD5\ntags: [vue, element]\ncategories: 随笔\n---\n\n## 获取要上传的文件\n\n使用`el-upload`的`beforeUpload`方法\n\n> `beforeUpload`:上传文件之前的钩子，参数为上传的文件，若返回 false 或者返回 Promise 且被 reject，则停止上传。\n```js\n\n    <el-upload\n            ref=\"upload\"\n            :action=\"postIP\"\n            :limit=\"1\"\n            :onError=\"uploadError\"\n            :onSuccess=\"uploadSuccess\"\n            :beforeUpload=\"beforeUpload\"\n        >\n    <el-button slot=\"trigger\" size=\"small\" type=\"primary\">选取人员信息 EXCEL 文件上传</el-button>\n    </el-upload>\n\n获取文件\n\n    beforeUpload(file) {\n        return utils.calcMd5(file).then(res => {\n            return Promise.resolve();\n            } else {\n            return Promise.reject();\n            }\n        });\n```\n获取到文件以后调用计算 md5 的函数,计算成功返回`Promise.resolve()`,文件进行上传,否则返回`Promise.reject()`,文件不上传.\n计算文件的 md5 值是一个比较耗时的操作,为了保证计算完文件的 md5 值以后再上传文件,`calcMd5()`中也使用了 `promise`.\n\n## 计算文件的 md5 值\n\n### 文件分割\n\n考虑到上传的文件可能很大,所以将文件分割.\n\n```js\n        //分割文件同时考虑到浏览器的兼容性\n        var blobSlice = File.prototype.slice || File.prototype.mozSlice || File.prototype.webkitSlice,\n        //每份文件 2MB\n        chunkSize = 2097152,\n        chunks = Math.ceil(file.size / chunkSize),\n        currentChunk = 0\n```\n### 调用 sparkMd5\n```js\n    spark = new SparkMD5.ArrayBuffer(),\n    fileReader = new FileReader();\n    fileReader.onload = function(e) {\n    // console.log(\"read chunk nr\", currentChunk + 1, \"of\", chunks);\n    spark.append(e.target.result); // Append array buffer\n    currentChunk++;\n\n    if (currentChunk < chunks) {\n        loadNext();\n    } else {\n        // console.log(\"finished loading\");\n        // console.info(\"computed hash\", spark.end()); // Compute hash\n    }\n    };\n    fileReader.onerror = function() {\n    console.log(\"oops, something went wrong.\");\n    };\n    function loadNext() {\n    var start = currentChunk * chunkSize,\n        end = start + chunkSize >= file.size ? file.size : start + chunkSize;\n\n    fileReader.readAsArrayBuffer(blobSlice.call(file, start, end));\n    }\n    loadNext();\n```\n### 完整代码\n```js\n        calcMd5(file) {\n        return new Promise((resolve, reject) => {\n        var blobSlice = File.prototype.slice || File.prototype.mozSlice || File.prototype.webkitSlice,\n            chunkSize = 2097152, // Read in chunks of 2MB\n            chunks = Math.ceil(file.size / chunkSize),\n            currentChunk = 0,\n            spark = new SparkMD5.ArrayBuffer(),\n            fileReader = new FileReader();\n        fileReader.onload = function(e) {\n            // console.log(\"read chunk nr\", currentChunk + 1, \"of\", chunks);\n            spark.append(e.target.result); // Append array buffer\n            currentChunk++;\n\n            if (currentChunk < chunks) {\n            loadNext();\n            } else {\n            // console.log(\"finished loading\");\n            // console.info(\"computed hash\", spark.end()); // Compute hash\n            resolve([true, spark.end()]);\n            }\n        };\n        fileReader.onerror = function() {\n            reject(\"oops, something went wrong.\");\n        };\n        function loadNext() {\n            var start = currentChunk * chunkSize,\n            end = start + chunkSize >= file.size ? file.size : start + chunkSize;\n\n            fileReader.readAsArrayBuffer(blobSlice.call(file, start, end));\n        }\n        loadNext();\n        });\n    }\n\n     beforeUpload(file) {\n      return utils.calcMd5(file).then(res => {\n        if (res[0]) {\n          console.log(res[1]) //计算完的 md5 值\n\n         \n          return Promise.resolve();\n        } else {\n          return Promise.reject();\n        }\n      });\n```","slug":"2019.08.26.elUpload","published":1,"date":"2019-08-26T08:11:25.034Z","updated":"2019-08-30T03:37:25.853Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziiqa001arh9zbw3yfn9t","content":"<h2 id=\"获取要上传的文件\"><a href=\"#获取要上传的文件\" class=\"headerlink\" title=\"获取要上传的文件\"></a>获取要上传的文件</h2><p>使用<code>el-upload</code>的<code>beforeUpload</code>方法</p>\n<blockquote>\n<p><code>beforeUpload</code>:上传文件之前的钩子，参数为上传的文件，若返回 false 或者返回 Promise 且被 reject，则停止上传。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    &lt;el-upload</span><br><span class=\"line\">            ref=<span class=\"string\">\"upload\"</span></span><br><span class=\"line\">            :action=<span class=\"string\">\"postIP\"</span></span><br><span class=\"line\">            :limit=<span class=\"string\">\"1\"</span></span><br><span class=\"line\">            :onError=<span class=\"string\">\"uploadError\"</span></span><br><span class=\"line\">            :onSuccess=<span class=\"string\">\"uploadSuccess\"</span></span><br><span class=\"line\">            :beforeUpload=<span class=\"string\">\"beforeUpload\"</span></span><br><span class=\"line\">        &gt;</span><br><span class=\"line\">    &lt;el-button slot=<span class=\"string\">\"trigger\"</span> size=<span class=\"string\">\"small\"</span> type=<span class=\"string\">\"primary\"</span>&gt;选取人员信息 EXCEL 文件上传&lt;<span class=\"regexp\">/el-button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>el-upload&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">获取文件</span><br><span class=\"line\"></span><br><span class=\"line\">    beforeUpload(file) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> utils.calcMd5(file).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure><br>获取到文件以后调用计算 md5 的函数,计算成功返回<code>Promise.resolve()</code>,文件进行上传,否则返回<code>Promise.reject()</code>,文件不上传.<br>计算文件的 md5 值是一个比较耗时的操作,为了保证计算完文件的 md5 值以后再上传文件,<code>calcMd5()</code>中也使用了 <code>promise</code>.</p>\n</blockquote>\n<h2 id=\"计算文件的-md5-值\"><a href=\"#计算文件的-md5-值\" class=\"headerlink\" title=\"计算文件的 md5 值\"></a>计算文件的 md5 值</h2><h3 id=\"文件分割\"><a href=\"#文件分割\" class=\"headerlink\" title=\"文件分割\"></a>文件分割</h3><p>考虑到上传的文件可能很大,所以将文件分割.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//分割文件同时考虑到浏览器的兼容性</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> blobSlice = File.prototype.slice || File.prototype.mozSlice || File.prototype.webkitSlice,</span><br><span class=\"line\"><span class=\"comment\">//每份文件 2MB</span></span><br><span class=\"line\">chunkSize = <span class=\"number\">2097152</span>,</span><br><span class=\"line\">chunks = <span class=\"built_in\">Math</span>.ceil(file.size / chunkSize),</span><br><span class=\"line\">currentChunk = <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"调用-sparkMd5\"><a href=\"#调用-sparkMd5\" class=\"headerlink\" title=\"调用 sparkMd5\"></a>调用 sparkMd5</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spark = <span class=\"keyword\">new</span> SparkMD5.ArrayBuffer(),</span><br><span class=\"line\">fileReader = <span class=\"keyword\">new</span> FileReader();</span><br><span class=\"line\">fileReader.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">// console.log(\"read chunk nr\", currentChunk + 1, \"of\", chunks);</span></span><br><span class=\"line\">spark.append(e.target.result); <span class=\"comment\">// Append array buffer</span></span><br><span class=\"line\">currentChunk++;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (currentChunk &lt; chunks) &#123;</span><br><span class=\"line\">    loadNext();</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// console.log(\"finished loading\");</span></span><br><span class=\"line\">    <span class=\"comment\">// console.info(\"computed hash\", spark.end()); // Compute hash</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">fileReader.onerror = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"oops, something went wrong.\"</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadNext</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> start = currentChunk * chunkSize,</span><br><span class=\"line\">    end = start + chunkSize &gt;= file.size ? file.size : start + chunkSize;</span><br><span class=\"line\"></span><br><span class=\"line\">fileReader.readAsArrayBuffer(blobSlice.call(file, start, end));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">loadNext();</span><br></pre></td></tr></table></figure>\n<h3 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    calcMd5(file) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> blobSlice = File.prototype.slice || File.prototype.mozSlice || File.prototype.webkitSlice,</span><br><span class=\"line\">        chunkSize = <span class=\"number\">2097152</span>, <span class=\"comment\">// Read in chunks of 2MB</span></span><br><span class=\"line\">        chunks = <span class=\"built_in\">Math</span>.ceil(file.size / chunkSize),</span><br><span class=\"line\">        currentChunk = <span class=\"number\">0</span>,</span><br><span class=\"line\">        spark = <span class=\"keyword\">new</span> SparkMD5.ArrayBuffer(),</span><br><span class=\"line\">        fileReader = <span class=\"keyword\">new</span> FileReader();</span><br><span class=\"line\">    fileReader.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// console.log(\"read chunk nr\", currentChunk + 1, \"of\", chunks);</span></span><br><span class=\"line\">        spark.append(e.target.result); <span class=\"comment\">// Append array buffer</span></span><br><span class=\"line\">        currentChunk++;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (currentChunk &lt; chunks) &#123;</span><br><span class=\"line\">        loadNext();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// console.log(\"finished loading\");</span></span><br><span class=\"line\">        <span class=\"comment\">// console.info(\"computed hash\", spark.end()); // Compute hash</span></span><br><span class=\"line\">        resolve([<span class=\"literal\">true</span>, spark.end()]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    fileReader.onerror = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        reject(<span class=\"string\">\"oops, something went wrong.\"</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadNext</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> start = currentChunk * chunkSize,</span><br><span class=\"line\">        end = start + chunkSize &gt;= file.size ? file.size : start + chunkSize;</span><br><span class=\"line\"></span><br><span class=\"line\">        fileReader.readAsArrayBuffer(blobSlice.call(file, start, end));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    loadNext();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> beforeUpload(file) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> utils.calcMd5(file).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (res[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(res[<span class=\"number\">1</span>]) <span class=\"comment\">//计算完的 md5 值</span></span><br><span class=\"line\"></span><br><span class=\"line\">     </span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"获取要上传的文件\"><a href=\"#获取要上传的文件\" class=\"headerlink\" title=\"获取要上传的文件\"></a>获取要上传的文件</h2><p>使用<code>el-upload</code>的<code>beforeUpload</code>方法</p>\n<blockquote>\n<p><code>beforeUpload</code>:上传文件之前的钩子，参数为上传的文件，若返回 false 或者返回 Promise 且被 reject，则停止上传。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">    &lt;el-upload</span><br><span class=\"line\">            ref=<span class=\"string\">\"upload\"</span></span><br><span class=\"line\">            :action=<span class=\"string\">\"postIP\"</span></span><br><span class=\"line\">            :limit=<span class=\"string\">\"1\"</span></span><br><span class=\"line\">            :onError=<span class=\"string\">\"uploadError\"</span></span><br><span class=\"line\">            :onSuccess=<span class=\"string\">\"uploadSuccess\"</span></span><br><span class=\"line\">            :beforeUpload=<span class=\"string\">\"beforeUpload\"</span></span><br><span class=\"line\">        &gt;</span><br><span class=\"line\">    &lt;el-button slot=<span class=\"string\">\"trigger\"</span> size=<span class=\"string\">\"small\"</span> type=<span class=\"string\">\"primary\"</span>&gt;选取人员信息 EXCEL 文件上传&lt;<span class=\"regexp\">/el-button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>el-upload&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">获取文件</span><br><span class=\"line\"></span><br><span class=\"line\">    beforeUpload(file) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> utils.calcMd5(file).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure><br>获取到文件以后调用计算 md5 的函数,计算成功返回<code>Promise.resolve()</code>,文件进行上传,否则返回<code>Promise.reject()</code>,文件不上传.<br>计算文件的 md5 值是一个比较耗时的操作,为了保证计算完文件的 md5 值以后再上传文件,<code>calcMd5()</code>中也使用了 <code>promise</code>.</p>\n</blockquote>\n<h2 id=\"计算文件的-md5-值\"><a href=\"#计算文件的-md5-值\" class=\"headerlink\" title=\"计算文件的 md5 值\"></a>计算文件的 md5 值</h2><h3 id=\"文件分割\"><a href=\"#文件分割\" class=\"headerlink\" title=\"文件分割\"></a>文件分割</h3><p>考虑到上传的文件可能很大,所以将文件分割.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//分割文件同时考虑到浏览器的兼容性</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> blobSlice = File.prototype.slice || File.prototype.mozSlice || File.prototype.webkitSlice,</span><br><span class=\"line\"><span class=\"comment\">//每份文件 2MB</span></span><br><span class=\"line\">chunkSize = <span class=\"number\">2097152</span>,</span><br><span class=\"line\">chunks = <span class=\"built_in\">Math</span>.ceil(file.size / chunkSize),</span><br><span class=\"line\">currentChunk = <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"调用-sparkMd5\"><a href=\"#调用-sparkMd5\" class=\"headerlink\" title=\"调用 sparkMd5\"></a>调用 sparkMd5</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spark = <span class=\"keyword\">new</span> SparkMD5.ArrayBuffer(),</span><br><span class=\"line\">fileReader = <span class=\"keyword\">new</span> FileReader();</span><br><span class=\"line\">fileReader.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">// console.log(\"read chunk nr\", currentChunk + 1, \"of\", chunks);</span></span><br><span class=\"line\">spark.append(e.target.result); <span class=\"comment\">// Append array buffer</span></span><br><span class=\"line\">currentChunk++;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (currentChunk &lt; chunks) &#123;</span><br><span class=\"line\">    loadNext();</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// console.log(\"finished loading\");</span></span><br><span class=\"line\">    <span class=\"comment\">// console.info(\"computed hash\", spark.end()); // Compute hash</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">fileReader.onerror = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"oops, something went wrong.\"</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadNext</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> start = currentChunk * chunkSize,</span><br><span class=\"line\">    end = start + chunkSize &gt;= file.size ? file.size : start + chunkSize;</span><br><span class=\"line\"></span><br><span class=\"line\">fileReader.readAsArrayBuffer(blobSlice.call(file, start, end));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">loadNext();</span><br></pre></td></tr></table></figure>\n<h3 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    calcMd5(file) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> blobSlice = File.prototype.slice || File.prototype.mozSlice || File.prototype.webkitSlice,</span><br><span class=\"line\">        chunkSize = <span class=\"number\">2097152</span>, <span class=\"comment\">// Read in chunks of 2MB</span></span><br><span class=\"line\">        chunks = <span class=\"built_in\">Math</span>.ceil(file.size / chunkSize),</span><br><span class=\"line\">        currentChunk = <span class=\"number\">0</span>,</span><br><span class=\"line\">        spark = <span class=\"keyword\">new</span> SparkMD5.ArrayBuffer(),</span><br><span class=\"line\">        fileReader = <span class=\"keyword\">new</span> FileReader();</span><br><span class=\"line\">    fileReader.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// console.log(\"read chunk nr\", currentChunk + 1, \"of\", chunks);</span></span><br><span class=\"line\">        spark.append(e.target.result); <span class=\"comment\">// Append array buffer</span></span><br><span class=\"line\">        currentChunk++;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (currentChunk &lt; chunks) &#123;</span><br><span class=\"line\">        loadNext();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// console.log(\"finished loading\");</span></span><br><span class=\"line\">        <span class=\"comment\">// console.info(\"computed hash\", spark.end()); // Compute hash</span></span><br><span class=\"line\">        resolve([<span class=\"literal\">true</span>, spark.end()]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    fileReader.onerror = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        reject(<span class=\"string\">\"oops, something went wrong.\"</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadNext</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> start = currentChunk * chunkSize,</span><br><span class=\"line\">        end = start + chunkSize &gt;= file.size ? file.size : start + chunkSize;</span><br><span class=\"line\"></span><br><span class=\"line\">        fileReader.readAsArrayBuffer(blobSlice.call(file, start, end));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    loadNext();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> beforeUpload(file) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> utils.calcMd5(file).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (res[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(res[<span class=\"number\">1</span>]) <span class=\"comment\">//计算完的 md5 值</span></span><br><span class=\"line\"></span><br><span class=\"line\">     </span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>"},{"title":"nodejs模块之 FTP","_content":"\n## 使用 nodejs 的 ftp 模块进行文件传输\n\n        var Client = require('ftp');\n        //导入ftp 模块\n        var fs = require('fs');\n\n        var c = new Client();\n        var connectionProperties = {\n        host: \"47.89.193.183”,\n        //不用加端口号，默认21\n        user: \"test\",\n        password: \"test\"\n        };\n        //链接信息\n\n        //把本地文件foo.txt上传到远程服务器foo.remote-copy.txt\n\n        c.on('ready', function() {\n        c.put('foo.txt', 'foo.remote-copy.txt', function(err) {\n            if (err) throw err;\n            console.dir(\"上传文件到服务器\");\n            c.end();\n        });\n        });\n\n        c.connect(connectionProperties);\n\n## 前端上传的文件传到指定 ftp 服务器\n后端接收文件\n\n    const file = ctx.request.files.file;\n    //创建可读流\n    const reader = fs.createReadStream(file.path);\n    const ext = file.name.split(\".\").pop();\n    const dir = path.join(__dirname, `../upload/${utils.getDirName()}`);\n    utils.checkDirExist(dir);\n    let fileName = `${utils.getDirName()}_${~~(Math.random() * 10000)}.${ext}`;\n    const fileLocation = `${dir}/${fileName}`;\n    //创建可写流\n    const upStream = fs.createWriteStream(fileLocation);\n    //写入文件\n    reader.pipe(upStream);\n    utils.transferFile(fileLocation, `/yunjia/${fileName}`);\n\n    //传输文件到服务器\n    transferFile(fileLocation, path) {\n    let ftpClient = new FtpClient();\n    ftpClient.on(\"ready\", function() {\n      ftpClient.put(fileLocation, path, function(err) {\n        if (err) throw err;\n        console.dir(\"成功上传文件到服务器\");\n        ftpClient.end();\n        fs.unlinkSync(fileLocation);\n      });\n    });\n    ftpClient.connect(ftpConnectionConfig.ftpConnectionConfig);\n  }","source":"_posts/2019.08.27.nodejs.ftp.md","raw":"---\ntitle: nodejs模块之 FTP\ntags: [nodejs]\ncategories: 随笔\n---\n\n## 使用 nodejs 的 ftp 模块进行文件传输\n\n        var Client = require('ftp');\n        //导入ftp 模块\n        var fs = require('fs');\n\n        var c = new Client();\n        var connectionProperties = {\n        host: \"47.89.193.183”,\n        //不用加端口号，默认21\n        user: \"test\",\n        password: \"test\"\n        };\n        //链接信息\n\n        //把本地文件foo.txt上传到远程服务器foo.remote-copy.txt\n\n        c.on('ready', function() {\n        c.put('foo.txt', 'foo.remote-copy.txt', function(err) {\n            if (err) throw err;\n            console.dir(\"上传文件到服务器\");\n            c.end();\n        });\n        });\n\n        c.connect(connectionProperties);\n\n## 前端上传的文件传到指定 ftp 服务器\n后端接收文件\n\n    const file = ctx.request.files.file;\n    //创建可读流\n    const reader = fs.createReadStream(file.path);\n    const ext = file.name.split(\".\").pop();\n    const dir = path.join(__dirname, `../upload/${utils.getDirName()}`);\n    utils.checkDirExist(dir);\n    let fileName = `${utils.getDirName()}_${~~(Math.random() * 10000)}.${ext}`;\n    const fileLocation = `${dir}/${fileName}`;\n    //创建可写流\n    const upStream = fs.createWriteStream(fileLocation);\n    //写入文件\n    reader.pipe(upStream);\n    utils.transferFile(fileLocation, `/yunjia/${fileName}`);\n\n    //传输文件到服务器\n    transferFile(fileLocation, path) {\n    let ftpClient = new FtpClient();\n    ftpClient.on(\"ready\", function() {\n      ftpClient.put(fileLocation, path, function(err) {\n        if (err) throw err;\n        console.dir(\"成功上传文件到服务器\");\n        ftpClient.end();\n        fs.unlinkSync(fileLocation);\n      });\n    });\n    ftpClient.connect(ftpConnectionConfig.ftpConnectionConfig);\n  }","slug":"2019.08.27.nodejs.ftp","published":1,"date":"2019-08-27T01:38:38.080Z","updated":"2019-08-27T01:53:12.095Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziiqb001brh9z629j0s4b","content":"<h2 id=\"使用-nodejs-的-ftp-模块进行文件传输\"><a href=\"#使用-nodejs-的-ftp-模块进行文件传输\" class=\"headerlink\" title=\"使用 nodejs 的 ftp 模块进行文件传输\"></a>使用 nodejs 的 ftp 模块进行文件传输</h2><pre><code>var Client = require(&apos;ftp&apos;);\n//导入ftp 模块\nvar fs = require(&apos;fs&apos;);\n\nvar c = new Client();\nvar connectionProperties = {\nhost: &quot;47.89.193.183”,\n//不用加端口号，默认21\nuser: &quot;test&quot;,\npassword: &quot;test&quot;\n};\n//链接信息\n\n//把本地文件foo.txt上传到远程服务器foo.remote-copy.txt\n\nc.on(&apos;ready&apos;, function() {\nc.put(&apos;foo.txt&apos;, &apos;foo.remote-copy.txt&apos;, function(err) {\n    if (err) throw err;\n    console.dir(&quot;上传文件到服务器&quot;);\n    c.end();\n});\n});\n\nc.connect(connectionProperties);\n</code></pre><h2 id=\"前端上传的文件传到指定-ftp-服务器\"><a href=\"#前端上传的文件传到指定-ftp-服务器\" class=\"headerlink\" title=\"前端上传的文件传到指定 ftp 服务器\"></a>前端上传的文件传到指定 ftp 服务器</h2><p>后端接收文件</p>\n<pre><code>const file = ctx.request.files.file;\n//创建可读流\nconst reader = fs.createReadStream(file.path);\nconst ext = file.name.split(&quot;.&quot;).pop();\nconst dir = path.join(__dirname, `../upload/${utils.getDirName()}`);\nutils.checkDirExist(dir);\nlet fileName = `${utils.getDirName()}_${~~(Math.random() * 10000)}.${ext}`;\nconst fileLocation = `${dir}/${fileName}`;\n//创建可写流\nconst upStream = fs.createWriteStream(fileLocation);\n//写入文件\nreader.pipe(upStream);\nutils.transferFile(fileLocation, `/yunjia/${fileName}`);\n\n//传输文件到服务器\ntransferFile(fileLocation, path) {\nlet ftpClient = new FtpClient();\nftpClient.on(&quot;ready&quot;, function() {\n  ftpClient.put(fileLocation, path, function(err) {\n    if (err) throw err;\n    console.dir(&quot;成功上传文件到服务器&quot;);\n    ftpClient.end();\n    fs.unlinkSync(fileLocation);\n  });\n});\nftpClient.connect(ftpConnectionConfig.ftpConnectionConfig);\n</code></pre><p>  }</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"使用-nodejs-的-ftp-模块进行文件传输\"><a href=\"#使用-nodejs-的-ftp-模块进行文件传输\" class=\"headerlink\" title=\"使用 nodejs 的 ftp 模块进行文件传输\"></a>使用 nodejs 的 ftp 模块进行文件传输</h2><pre><code>var Client = require(&apos;ftp&apos;);\n//导入ftp 模块\nvar fs = require(&apos;fs&apos;);\n\nvar c = new Client();\nvar connectionProperties = {\nhost: &quot;47.89.193.183”,\n//不用加端口号，默认21\nuser: &quot;test&quot;,\npassword: &quot;test&quot;\n};\n//链接信息\n\n//把本地文件foo.txt上传到远程服务器foo.remote-copy.txt\n\nc.on(&apos;ready&apos;, function() {\nc.put(&apos;foo.txt&apos;, &apos;foo.remote-copy.txt&apos;, function(err) {\n    if (err) throw err;\n    console.dir(&quot;上传文件到服务器&quot;);\n    c.end();\n});\n});\n\nc.connect(connectionProperties);\n</code></pre><h2 id=\"前端上传的文件传到指定-ftp-服务器\"><a href=\"#前端上传的文件传到指定-ftp-服务器\" class=\"headerlink\" title=\"前端上传的文件传到指定 ftp 服务器\"></a>前端上传的文件传到指定 ftp 服务器</h2><p>后端接收文件</p>\n<pre><code>const file = ctx.request.files.file;\n//创建可读流\nconst reader = fs.createReadStream(file.path);\nconst ext = file.name.split(&quot;.&quot;).pop();\nconst dir = path.join(__dirname, `../upload/${utils.getDirName()}`);\nutils.checkDirExist(dir);\nlet fileName = `${utils.getDirName()}_${~~(Math.random() * 10000)}.${ext}`;\nconst fileLocation = `${dir}/${fileName}`;\n//创建可写流\nconst upStream = fs.createWriteStream(fileLocation);\n//写入文件\nreader.pipe(upStream);\nutils.transferFile(fileLocation, `/yunjia/${fileName}`);\n\n//传输文件到服务器\ntransferFile(fileLocation, path) {\nlet ftpClient = new FtpClient();\nftpClient.on(&quot;ready&quot;, function() {\n  ftpClient.put(fileLocation, path, function(err) {\n    if (err) throw err;\n    console.dir(&quot;成功上传文件到服务器&quot;);\n    ftpClient.end();\n    fs.unlinkSync(fileLocation);\n  });\n});\nftpClient.connect(ftpConnectionConfig.ftpConnectionConfig);\n</code></pre><p>  }</p>\n"},{"title":"nodejs模块之path","_content":"\n##  path.join()\n\npath.join方法用于连接路径。该方法的主要用途在于，会正确使用当前系统的路径分隔符，Unix系统是”/“，Windows系统是”\\“。\n\n    var path = require('path');\n    path.join(mydir, \"foo\");\n\n上面代码在Unix系统下，会返回路径`mydir/foo`。\n\n## path.resolve()\npath.resolve方法用于将相对路径转为绝对路径。\n\n它可以接受多个参数，依次表示所要进入的路径，直到将最后一个参数转为绝对路径。如果根据参数无法得到绝对路径，就以当前所在路径作为基准。除了根目录，该方法的返回值都不带尾部的斜杠。\n\n\n    // 格式\n    path.resolve([from ...], to)\n\n    // 实例\n    path.resolve('foo/bar', '/tmp/file/', '..', 'a/../subfile')\n\n    上面代码的实例，执行效果类似下面的命令。\n\n\n    $ cd foo/bar\n    $ cd /tmp/file/\n    $ cd ..\n    $ cd a/../subfile\n    $ pwd\n\n更多例子。\n\n    path.resolve('/foo/bar', './baz')\n    // '/foo/bar/baz'\n\n    path.resolve('/foo/bar', '/tmp/file/')\n    // '/tmp/file'\n\n    path.resolve('wwwroot', 'static_files/png/', '../gif/image.gif')\n    // 如果当前目录是/home/myself/node，返回\n    // /home/myself/node/wwwroot/static_files/gif/image.gif\n    该方法忽略非字符串的参数。\n\n## accessSync()\naccessSync方法用于同步读取一个路径。\n\n下面的代码可以用于判断一个目录是否存在。\n\n    function exists(pth, mode) {\n    try {\n        fs.accessSync(pth, mode);\n        return true;\n    } catch (e) {\n        return false;\n    }\n    }\n## path.relative()\npath.relative方法接受两个参数，这两个参数都应该是绝对路径。该方法返回第二个路径相对于第一个路径的那个相对路径。\n\n    path.relative('/data/orandea/test/aaa', '/data/orandea/impl/bbb')\n    // '../../impl/bbb'\n上面代码中，如果当前目录是`/data/orandea/test/aaa`，进入`path.relative`返回的相对路径，就会到达`/data/orandea/impl/bbb`。\n\n如果`path.relative`方法的两个参数相同，则返回一个空字符串。\n\n## path.parse()\npath.parse()方法可以返回路径各部分的信息。\n\n    var myFilePath = '/someDir/someFile.json';\n    path.parse(myFilePath).base\n    // \"someFile.json\"\n    path.parse(myFilePath).name\n    // \"someFile\"\n    path.parse(myFilePath).ext\n    // \".json\"\n\n\n\n\n","source":"_posts/2019.08.27.nodejs.path.md","raw":"---\ntitle: nodejs模块之path\ntags: [nodejs]\ncategories: 随笔\n---\n\n##  path.join()\n\npath.join方法用于连接路径。该方法的主要用途在于，会正确使用当前系统的路径分隔符，Unix系统是”/“，Windows系统是”\\“。\n\n    var path = require('path');\n    path.join(mydir, \"foo\");\n\n上面代码在Unix系统下，会返回路径`mydir/foo`。\n\n## path.resolve()\npath.resolve方法用于将相对路径转为绝对路径。\n\n它可以接受多个参数，依次表示所要进入的路径，直到将最后一个参数转为绝对路径。如果根据参数无法得到绝对路径，就以当前所在路径作为基准。除了根目录，该方法的返回值都不带尾部的斜杠。\n\n\n    // 格式\n    path.resolve([from ...], to)\n\n    // 实例\n    path.resolve('foo/bar', '/tmp/file/', '..', 'a/../subfile')\n\n    上面代码的实例，执行效果类似下面的命令。\n\n\n    $ cd foo/bar\n    $ cd /tmp/file/\n    $ cd ..\n    $ cd a/../subfile\n    $ pwd\n\n更多例子。\n\n    path.resolve('/foo/bar', './baz')\n    // '/foo/bar/baz'\n\n    path.resolve('/foo/bar', '/tmp/file/')\n    // '/tmp/file'\n\n    path.resolve('wwwroot', 'static_files/png/', '../gif/image.gif')\n    // 如果当前目录是/home/myself/node，返回\n    // /home/myself/node/wwwroot/static_files/gif/image.gif\n    该方法忽略非字符串的参数。\n\n## accessSync()\naccessSync方法用于同步读取一个路径。\n\n下面的代码可以用于判断一个目录是否存在。\n\n    function exists(pth, mode) {\n    try {\n        fs.accessSync(pth, mode);\n        return true;\n    } catch (e) {\n        return false;\n    }\n    }\n## path.relative()\npath.relative方法接受两个参数，这两个参数都应该是绝对路径。该方法返回第二个路径相对于第一个路径的那个相对路径。\n\n    path.relative('/data/orandea/test/aaa', '/data/orandea/impl/bbb')\n    // '../../impl/bbb'\n上面代码中，如果当前目录是`/data/orandea/test/aaa`，进入`path.relative`返回的相对路径，就会到达`/data/orandea/impl/bbb`。\n\n如果`path.relative`方法的两个参数相同，则返回一个空字符串。\n\n## path.parse()\npath.parse()方法可以返回路径各部分的信息。\n\n    var myFilePath = '/someDir/someFile.json';\n    path.parse(myFilePath).base\n    // \"someFile.json\"\n    path.parse(myFilePath).name\n    // \"someFile\"\n    path.parse(myFilePath).ext\n    // \".json\"\n\n\n\n\n","slug":"2019.08.27.nodejs.path","published":1,"date":"2019-08-27T02:01:43.582Z","updated":"2019-08-27T02:11:06.635Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziiqb001crh9zb8y50v5a","content":"<h2 id=\"path-join\"><a href=\"#path-join\" class=\"headerlink\" title=\"path.join()\"></a>path.join()</h2><p>path.join方法用于连接路径。该方法的主要用途在于，会正确使用当前系统的路径分隔符，Unix系统是”/“，Windows系统是”\\“。</p>\n<pre><code>var path = require(&apos;path&apos;);\npath.join(mydir, &quot;foo&quot;);\n</code></pre><p>上面代码在Unix系统下，会返回路径<code>mydir/foo</code>。</p>\n<h2 id=\"path-resolve\"><a href=\"#path-resolve\" class=\"headerlink\" title=\"path.resolve()\"></a>path.resolve()</h2><p>path.resolve方法用于将相对路径转为绝对路径。</p>\n<p>它可以接受多个参数，依次表示所要进入的路径，直到将最后一个参数转为绝对路径。如果根据参数无法得到绝对路径，就以当前所在路径作为基准。除了根目录，该方法的返回值都不带尾部的斜杠。</p>\n<pre><code>// 格式\npath.resolve([from ...], to)\n\n// 实例\npath.resolve(&apos;foo/bar&apos;, &apos;/tmp/file/&apos;, &apos;..&apos;, &apos;a/../subfile&apos;)\n\n上面代码的实例，执行效果类似下面的命令。\n\n\n$ cd foo/bar\n$ cd /tmp/file/\n$ cd ..\n$ cd a/../subfile\n$ pwd\n</code></pre><p>更多例子。</p>\n<pre><code>path.resolve(&apos;/foo/bar&apos;, &apos;./baz&apos;)\n// &apos;/foo/bar/baz&apos;\n\npath.resolve(&apos;/foo/bar&apos;, &apos;/tmp/file/&apos;)\n// &apos;/tmp/file&apos;\n\npath.resolve(&apos;wwwroot&apos;, &apos;static_files/png/&apos;, &apos;../gif/image.gif&apos;)\n// 如果当前目录是/home/myself/node，返回\n// /home/myself/node/wwwroot/static_files/gif/image.gif\n该方法忽略非字符串的参数。\n</code></pre><h2 id=\"accessSync\"><a href=\"#accessSync\" class=\"headerlink\" title=\"accessSync()\"></a>accessSync()</h2><p>accessSync方法用于同步读取一个路径。</p>\n<p>下面的代码可以用于判断一个目录是否存在。</p>\n<pre><code>function exists(pth, mode) {\ntry {\n    fs.accessSync(pth, mode);\n    return true;\n} catch (e) {\n    return false;\n}\n}\n</code></pre><h2 id=\"path-relative\"><a href=\"#path-relative\" class=\"headerlink\" title=\"path.relative()\"></a>path.relative()</h2><p>path.relative方法接受两个参数，这两个参数都应该是绝对路径。该方法返回第二个路径相对于第一个路径的那个相对路径。</p>\n<pre><code>path.relative(&apos;/data/orandea/test/aaa&apos;, &apos;/data/orandea/impl/bbb&apos;)\n// &apos;../../impl/bbb&apos;\n</code></pre><p>上面代码中，如果当前目录是<code>/data/orandea/test/aaa</code>，进入<code>path.relative</code>返回的相对路径，就会到达<code>/data/orandea/impl/bbb</code>。</p>\n<p>如果<code>path.relative</code>方法的两个参数相同，则返回一个空字符串。</p>\n<h2 id=\"path-parse\"><a href=\"#path-parse\" class=\"headerlink\" title=\"path.parse()\"></a>path.parse()</h2><p>path.parse()方法可以返回路径各部分的信息。</p>\n<pre><code>var myFilePath = &apos;/someDir/someFile.json&apos;;\npath.parse(myFilePath).base\n// &quot;someFile.json&quot;\npath.parse(myFilePath).name\n// &quot;someFile&quot;\npath.parse(myFilePath).ext\n// &quot;.json&quot;\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"path-join\"><a href=\"#path-join\" class=\"headerlink\" title=\"path.join()\"></a>path.join()</h2><p>path.join方法用于连接路径。该方法的主要用途在于，会正确使用当前系统的路径分隔符，Unix系统是”/“，Windows系统是”\\“。</p>\n<pre><code>var path = require(&apos;path&apos;);\npath.join(mydir, &quot;foo&quot;);\n</code></pre><p>上面代码在Unix系统下，会返回路径<code>mydir/foo</code>。</p>\n<h2 id=\"path-resolve\"><a href=\"#path-resolve\" class=\"headerlink\" title=\"path.resolve()\"></a>path.resolve()</h2><p>path.resolve方法用于将相对路径转为绝对路径。</p>\n<p>它可以接受多个参数，依次表示所要进入的路径，直到将最后一个参数转为绝对路径。如果根据参数无法得到绝对路径，就以当前所在路径作为基准。除了根目录，该方法的返回值都不带尾部的斜杠。</p>\n<pre><code>// 格式\npath.resolve([from ...], to)\n\n// 实例\npath.resolve(&apos;foo/bar&apos;, &apos;/tmp/file/&apos;, &apos;..&apos;, &apos;a/../subfile&apos;)\n\n上面代码的实例，执行效果类似下面的命令。\n\n\n$ cd foo/bar\n$ cd /tmp/file/\n$ cd ..\n$ cd a/../subfile\n$ pwd\n</code></pre><p>更多例子。</p>\n<pre><code>path.resolve(&apos;/foo/bar&apos;, &apos;./baz&apos;)\n// &apos;/foo/bar/baz&apos;\n\npath.resolve(&apos;/foo/bar&apos;, &apos;/tmp/file/&apos;)\n// &apos;/tmp/file&apos;\n\npath.resolve(&apos;wwwroot&apos;, &apos;static_files/png/&apos;, &apos;../gif/image.gif&apos;)\n// 如果当前目录是/home/myself/node，返回\n// /home/myself/node/wwwroot/static_files/gif/image.gif\n该方法忽略非字符串的参数。\n</code></pre><h2 id=\"accessSync\"><a href=\"#accessSync\" class=\"headerlink\" title=\"accessSync()\"></a>accessSync()</h2><p>accessSync方法用于同步读取一个路径。</p>\n<p>下面的代码可以用于判断一个目录是否存在。</p>\n<pre><code>function exists(pth, mode) {\ntry {\n    fs.accessSync(pth, mode);\n    return true;\n} catch (e) {\n    return false;\n}\n}\n</code></pre><h2 id=\"path-relative\"><a href=\"#path-relative\" class=\"headerlink\" title=\"path.relative()\"></a>path.relative()</h2><p>path.relative方法接受两个参数，这两个参数都应该是绝对路径。该方法返回第二个路径相对于第一个路径的那个相对路径。</p>\n<pre><code>path.relative(&apos;/data/orandea/test/aaa&apos;, &apos;/data/orandea/impl/bbb&apos;)\n// &apos;../../impl/bbb&apos;\n</code></pre><p>上面代码中，如果当前目录是<code>/data/orandea/test/aaa</code>，进入<code>path.relative</code>返回的相对路径，就会到达<code>/data/orandea/impl/bbb</code>。</p>\n<p>如果<code>path.relative</code>方法的两个参数相同，则返回一个空字符串。</p>\n<h2 id=\"path-parse\"><a href=\"#path-parse\" class=\"headerlink\" title=\"path.parse()\"></a>path.parse()</h2><p>path.parse()方法可以返回路径各部分的信息。</p>\n<pre><code>var myFilePath = &apos;/someDir/someFile.json&apos;;\npath.parse(myFilePath).base\n// &quot;someFile.json&quot;\npath.parse(myFilePath).name\n// &quot;someFile&quot;\npath.parse(myFilePath).ext\n// &quot;.json&quot;\n</code></pre>"},{"title":"ios12.4越狱","_content":"## 前言\n>前不久大神 [Pwn20wnd](https://twitter.com/Pwn20wnd)放出了 ios12.4 的[越狱工具](https://github.com/pwn20wndstuff/Undecimus/releases),但仍然不是完美越狱.\n## 支持的设备\n\n* iPhone 5S\n* iPhone 6\n* iPhone 6 Plus\n* iPhone 6s\n* iPhone 6s Plus\n* iPhone SE\n* iPhone 7\n* iPhone 7 Plus\n* iPhone 8\n* iPhone 8 Plus\n* iPhone X\n* iPhone XS （A12设备）\n* iPhone XS Max （A12设备）\n* iPhone XR （A12设备）\n* iPod touch 6代\n* 12.9吋iPad Pro（第三代）（A12X设备）\n* 11吋iPad Pro （A12X设备）\n* iPad Air\n* iPad Air 2\n* iPad Air 3 （2019年款）\n* 9.7吋iPad Pro\n* 12.9吋iPad Pro（第一代）\n* 10.5吋iPad Pro\n* 12.9吋iPad Pro（第二代）\n* iPad 第六代（2018年款）\n* iPad 第五代（2017年款）\n* iPad mini 5 （A12X设备）\n* iPad mini 4\n* iPad mini 3\n* iPad mini 2\n\n\n## 工具\n* 越狱工具安装器 [ Cydia Impactor](http://www.cydiaimpactor.com/)\n*  apple id (关闭各种验证手段),用来注册7天的开发者证书\n* [越狱工具安装包 ](https://github.com/pwn20wndstuff/Undecimus/releases/download/v3.5.6/Undecimus-v3.5.6.ipa)\n## 开始 \n* 手机连接电脑,开启飞行模式;\n* 把越狱工具安装包拖到` cydia impactor `里,然后输入自己的 apple id 账号和密码,生成临时的安装证书;\n* 软件安装成功后,到手机 设置>通用>描述文件与设备管理>开发者应用中选择信任证书;\n![IMG_1DF82B6E3742-1](https://i.loli.net/2019/08/29/Na6ZG7YoVibl9m4.jpg)\n*打开 unc0ver ,在设置里面勾选 安装 openSSH.![IMG_AC461FEAF702-1](https://i.loli.net/2019/08/28/hTs6U5VREKI71WX.jpg)\n\n接着进行越狱操作 ⤵️\n\n![IMG_F8DC3F214AB2-1](https://i.loli.net/2019/08/28/QCtqv41pwKiVBug.jpg)\n\n\n* 完成以后设备重启,再次点击越狱(由于是不完美越狱,每次重启手机以后都需要重新打开越狱软件进行越狱)\n## cydia 无法联网的问题\n国行手机首次打开 cydia 发现无法联网,是因为 cydia 不是正常安装的,无法跳出联网方式的选择界面.\n### 解决\n手机和电脑连接到同一个 WiFi,先在 ios 设备上查到本机 ip,然后电脑上使用 ssh 客户端连接到手机.\n\n            ssh root@192.168.0.101\n\n接着输入密码 `alpine`\n\n移除/var/preferences下的3个文件\n\n    com.apple.networkextension.necp.plist\n    com.apple.networkextension.plist\n    com.apple.networkextension.uuidcache.plist\n\n\n执行:\n\n    rm /var/preferences/com.apple.networkextension*.plist\n\n手机重启,重新越狱,接着打开 cydia 就可以联网了.\n\n## 关于 cydia\n\n>Cydia的主要目的是为越狱的iOS用户提供一个高级包装工具的图形界面前端以安装不被App Store接受的程序。它也是一个软件仓库的聚合器，带有几个被社区信任的源以避免对某个服务器的过度依赖。大部分软件包的稳定版本都可以在这些源中找到；不过，用户也可以很容易地添加源。这使得iOS开发可以尽量开放；任何有服务器的人都可以设置、储存、管理和更新他自己的软件仓库并和社区分享。不过大部分的社区源是接受提交软件包的，相比起独立的源，这样也可以帮助软件获得更多关注。(via wiki)\n\n### cydia的源\ncydia 的源可以看成是若干插件的集合,包括官方源以及个人源.添加了 cydia 的源以后可以方便地添加越狱插件\n#### cydia 官方源\n* 【BigBoss源】 apt.thebigboss.org/repofiles/cydia Cydia内置大老板源、正版插件购买源，很多付费插件都是要这个上面购买。\n\n\n* 　【Cydia/Telesphoreo】 http://apt.saurik.com/　　我们越狱后安装AFC2补丁就可以去这个源上下载，也可以是【25PP手机助手源】中安装\n\n* 　【ModMyi.com】 http://apt.modmyi.com/ 该源上多为一些美化类的插件\n\n* 　【repo666.ultrasn0wn.com】 http://repo666.ultrasn0wn.com 目前只有一个ultrasn0w的插件，偏技术型，普通用户几乎用不上\n\n* 　【ZodTTD&MacCiti】 http://ctdua.zodttd.com/repo/cydia/ 该插件源上多为铃声和主题，用处不大，很多用户甚至想它删掉\n\n#### 国内的部分源\n\n* 【威锋源】 apt.weiphone.com 功能很多很强大，几乎是越狱人士必备一个插件源\n\n* 　【威锋精品源】 repo.weiphone.com 功能很多很强大，几乎是越狱人士必备一个插件源，与上面功能类似，安装一个即可\n\n* 　【第一中文源】 apt.178.com 功能很多很强大，几乎是越狱人士必备一个插件源\n\n* 　【25PP手机助手源】 apt.25pp.com 虽然该源上的插件数量不是很多，但pp助手作为一个越狱后必装软件商店的话，很多用户也是需要添加这个源的\n\n* 　【原创精品源】http://repo.so iOS8越狱后新推出插件源，多为一个汉化版的插件，\n\n\n","source":"_posts/2019.08.28.ios12.4jailbrake.md","raw":"---\ntitle: ios12.4越狱\ncategories: 随笔\n---\n## 前言\n>前不久大神 [Pwn20wnd](https://twitter.com/Pwn20wnd)放出了 ios12.4 的[越狱工具](https://github.com/pwn20wndstuff/Undecimus/releases),但仍然不是完美越狱.\n## 支持的设备\n\n* iPhone 5S\n* iPhone 6\n* iPhone 6 Plus\n* iPhone 6s\n* iPhone 6s Plus\n* iPhone SE\n* iPhone 7\n* iPhone 7 Plus\n* iPhone 8\n* iPhone 8 Plus\n* iPhone X\n* iPhone XS （A12设备）\n* iPhone XS Max （A12设备）\n* iPhone XR （A12设备）\n* iPod touch 6代\n* 12.9吋iPad Pro（第三代）（A12X设备）\n* 11吋iPad Pro （A12X设备）\n* iPad Air\n* iPad Air 2\n* iPad Air 3 （2019年款）\n* 9.7吋iPad Pro\n* 12.9吋iPad Pro（第一代）\n* 10.5吋iPad Pro\n* 12.9吋iPad Pro（第二代）\n* iPad 第六代（2018年款）\n* iPad 第五代（2017年款）\n* iPad mini 5 （A12X设备）\n* iPad mini 4\n* iPad mini 3\n* iPad mini 2\n\n\n## 工具\n* 越狱工具安装器 [ Cydia Impactor](http://www.cydiaimpactor.com/)\n*  apple id (关闭各种验证手段),用来注册7天的开发者证书\n* [越狱工具安装包 ](https://github.com/pwn20wndstuff/Undecimus/releases/download/v3.5.6/Undecimus-v3.5.6.ipa)\n## 开始 \n* 手机连接电脑,开启飞行模式;\n* 把越狱工具安装包拖到` cydia impactor `里,然后输入自己的 apple id 账号和密码,生成临时的安装证书;\n* 软件安装成功后,到手机 设置>通用>描述文件与设备管理>开发者应用中选择信任证书;\n![IMG_1DF82B6E3742-1](https://i.loli.net/2019/08/29/Na6ZG7YoVibl9m4.jpg)\n*打开 unc0ver ,在设置里面勾选 安装 openSSH.![IMG_AC461FEAF702-1](https://i.loli.net/2019/08/28/hTs6U5VREKI71WX.jpg)\n\n接着进行越狱操作 ⤵️\n\n![IMG_F8DC3F214AB2-1](https://i.loli.net/2019/08/28/QCtqv41pwKiVBug.jpg)\n\n\n* 完成以后设备重启,再次点击越狱(由于是不完美越狱,每次重启手机以后都需要重新打开越狱软件进行越狱)\n## cydia 无法联网的问题\n国行手机首次打开 cydia 发现无法联网,是因为 cydia 不是正常安装的,无法跳出联网方式的选择界面.\n### 解决\n手机和电脑连接到同一个 WiFi,先在 ios 设备上查到本机 ip,然后电脑上使用 ssh 客户端连接到手机.\n\n            ssh root@192.168.0.101\n\n接着输入密码 `alpine`\n\n移除/var/preferences下的3个文件\n\n    com.apple.networkextension.necp.plist\n    com.apple.networkextension.plist\n    com.apple.networkextension.uuidcache.plist\n\n\n执行:\n\n    rm /var/preferences/com.apple.networkextension*.plist\n\n手机重启,重新越狱,接着打开 cydia 就可以联网了.\n\n## 关于 cydia\n\n>Cydia的主要目的是为越狱的iOS用户提供一个高级包装工具的图形界面前端以安装不被App Store接受的程序。它也是一个软件仓库的聚合器，带有几个被社区信任的源以避免对某个服务器的过度依赖。大部分软件包的稳定版本都可以在这些源中找到；不过，用户也可以很容易地添加源。这使得iOS开发可以尽量开放；任何有服务器的人都可以设置、储存、管理和更新他自己的软件仓库并和社区分享。不过大部分的社区源是接受提交软件包的，相比起独立的源，这样也可以帮助软件获得更多关注。(via wiki)\n\n### cydia的源\ncydia 的源可以看成是若干插件的集合,包括官方源以及个人源.添加了 cydia 的源以后可以方便地添加越狱插件\n#### cydia 官方源\n* 【BigBoss源】 apt.thebigboss.org/repofiles/cydia Cydia内置大老板源、正版插件购买源，很多付费插件都是要这个上面购买。\n\n\n* 　【Cydia/Telesphoreo】 http://apt.saurik.com/　　我们越狱后安装AFC2补丁就可以去这个源上下载，也可以是【25PP手机助手源】中安装\n\n* 　【ModMyi.com】 http://apt.modmyi.com/ 该源上多为一些美化类的插件\n\n* 　【repo666.ultrasn0wn.com】 http://repo666.ultrasn0wn.com 目前只有一个ultrasn0w的插件，偏技术型，普通用户几乎用不上\n\n* 　【ZodTTD&MacCiti】 http://ctdua.zodttd.com/repo/cydia/ 该插件源上多为铃声和主题，用处不大，很多用户甚至想它删掉\n\n#### 国内的部分源\n\n* 【威锋源】 apt.weiphone.com 功能很多很强大，几乎是越狱人士必备一个插件源\n\n* 　【威锋精品源】 repo.weiphone.com 功能很多很强大，几乎是越狱人士必备一个插件源，与上面功能类似，安装一个即可\n\n* 　【第一中文源】 apt.178.com 功能很多很强大，几乎是越狱人士必备一个插件源\n\n* 　【25PP手机助手源】 apt.25pp.com 虽然该源上的插件数量不是很多，但pp助手作为一个越狱后必装软件商店的话，很多用户也是需要添加这个源的\n\n* 　【原创精品源】http://repo.so iOS8越狱后新推出插件源，多为一个汉化版的插件，\n\n\n","slug":"2019.08.28.ios12.4jailbrake","published":1,"date":"2019-08-28T09:03:08.172Z","updated":"2019-08-29T01:55:11.535Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziiqc001drh9zhj610x5v","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>前不久大神 <a href=\"https://twitter.com/Pwn20wnd\" target=\"_blank\" rel=\"noopener\">Pwn20wnd</a>放出了 ios12.4 的<a href=\"https://github.com/pwn20wndstuff/Undecimus/releases\" target=\"_blank\" rel=\"noopener\">越狱工具</a>,但仍然不是完美越狱.</p>\n<h2 id=\"支持的设备\"><a href=\"#支持的设备\" class=\"headerlink\" title=\"支持的设备\"></a>支持的设备</h2></blockquote>\n<ul>\n<li>iPhone 5S</li>\n<li>iPhone 6</li>\n<li>iPhone 6 Plus</li>\n<li>iPhone 6s</li>\n<li>iPhone 6s Plus</li>\n<li>iPhone SE</li>\n<li>iPhone 7</li>\n<li>iPhone 7 Plus</li>\n<li>iPhone 8</li>\n<li>iPhone 8 Plus</li>\n<li>iPhone X</li>\n<li>iPhone XS （A12设备）</li>\n<li>iPhone XS Max （A12设备）</li>\n<li>iPhone XR （A12设备）</li>\n<li>iPod touch 6代</li>\n<li>12.9吋iPad Pro（第三代）（A12X设备）</li>\n<li>11吋iPad Pro （A12X设备）</li>\n<li>iPad Air</li>\n<li>iPad Air 2</li>\n<li>iPad Air 3 （2019年款）</li>\n<li>9.7吋iPad Pro</li>\n<li>12.9吋iPad Pro（第一代）</li>\n<li>10.5吋iPad Pro</li>\n<li>12.9吋iPad Pro（第二代）</li>\n<li>iPad 第六代（2018年款）</li>\n<li>iPad 第五代（2017年款）</li>\n<li>iPad mini 5 （A12X设备）</li>\n<li>iPad mini 4</li>\n<li>iPad mini 3</li>\n<li>iPad mini 2</li>\n</ul>\n<h2 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h2><ul>\n<li>越狱工具安装器 <a href=\"http://www.cydiaimpactor.com/\" target=\"_blank\" rel=\"noopener\"> Cydia Impactor</a></li>\n<li>apple id (关闭各种验证手段),用来注册7天的开发者证书</li>\n<li><a href=\"https://github.com/pwn20wndstuff/Undecimus/releases/download/v3.5.6/Undecimus-v3.5.6.ipa\" target=\"_blank\" rel=\"noopener\">越狱工具安装包 </a><h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2></li>\n<li>手机连接电脑,开启飞行模式;</li>\n<li>把越狱工具安装包拖到<code>cydia impactor</code>里,然后输入自己的 apple id 账号和密码,生成临时的安装证书;</li>\n<li>软件安装成功后,到手机 设置&gt;通用&gt;描述文件与设备管理&gt;开发者应用中选择信任证书;<br><img src=\"https://i.loli.net/2019/08/29/Na6ZG7YoVibl9m4.jpg\" alt=\"IMG_1DF82B6E3742-1\"><br>*打开 unc0ver ,在设置里面勾选 安装 openSSH.<img src=\"https://i.loli.net/2019/08/28/hTs6U5VREKI71WX.jpg\" alt=\"IMG_AC461FEAF702-1\"></li>\n</ul>\n<p>接着进行越狱操作 ⤵️</p>\n<p><img src=\"https://i.loli.net/2019/08/28/QCtqv41pwKiVBug.jpg\" alt=\"IMG_F8DC3F214AB2-1\"></p>\n<ul>\n<li><p>完成以后设备重启,再次点击越狱(由于是不完美越狱,每次重启手机以后都需要重新打开越狱软件进行越狱)</p>\n<h2 id=\"cydia-无法联网的问题\"><a href=\"#cydia-无法联网的问题\" class=\"headerlink\" title=\"cydia 无法联网的问题\"></a>cydia 无法联网的问题</h2><p>国行手机首次打开 cydia 发现无法联网,是因为 cydia 不是正常安装的,无法跳出联网方式的选择界面.</p>\n<h3 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h3><p>手机和电脑连接到同一个 WiFi,先在 ios 设备上查到本机 ip,然后电脑上使用 ssh 客户端连接到手机.</p>\n<pre><code>ssh root@192.168.0.101\n</code></pre></li>\n</ul>\n<p>接着输入密码 <code>alpine</code></p>\n<p>移除/var/preferences下的3个文件</p>\n<pre><code>com.apple.networkextension.necp.plist\ncom.apple.networkextension.plist\ncom.apple.networkextension.uuidcache.plist\n</code></pre><p>执行:</p>\n<pre><code>rm /var/preferences/com.apple.networkextension*.plist\n</code></pre><p>手机重启,重新越狱,接着打开 cydia 就可以联网了.</p>\n<h2 id=\"关于-cydia\"><a href=\"#关于-cydia\" class=\"headerlink\" title=\"关于 cydia\"></a>关于 cydia</h2><blockquote>\n<p>Cydia的主要目的是为越狱的iOS用户提供一个高级包装工具的图形界面前端以安装不被App Store接受的程序。它也是一个软件仓库的聚合器，带有几个被社区信任的源以避免对某个服务器的过度依赖。大部分软件包的稳定版本都可以在这些源中找到；不过，用户也可以很容易地添加源。这使得iOS开发可以尽量开放；任何有服务器的人都可以设置、储存、管理和更新他自己的软件仓库并和社区分享。不过大部分的社区源是接受提交软件包的，相比起独立的源，这样也可以帮助软件获得更多关注。(via wiki)</p>\n</blockquote>\n<h3 id=\"cydia的源\"><a href=\"#cydia的源\" class=\"headerlink\" title=\"cydia的源\"></a>cydia的源</h3><p>cydia 的源可以看成是若干插件的集合,包括官方源以及个人源.添加了 cydia 的源以后可以方便地添加越狱插件</p>\n<h4 id=\"cydia-官方源\"><a href=\"#cydia-官方源\" class=\"headerlink\" title=\"cydia 官方源\"></a>cydia 官方源</h4><ul>\n<li>【BigBoss源】 apt.thebigboss.org/repofiles/cydia Cydia内置大老板源、正版插件购买源，很多付费插件都是要这个上面购买。</li>\n</ul>\n<ul>\n<li><p>　【Cydia/Telesphoreo】 <a href=\"http://apt.saurik.com/\" target=\"_blank\" rel=\"noopener\">http://apt.saurik.com/</a>　　我们越狱后安装AFC2补丁就可以去这个源上下载，也可以是【25PP手机助手源】中安装</p>\n</li>\n<li><p>　【ModMyi.com】 <a href=\"http://apt.modmyi.com/\" target=\"_blank\" rel=\"noopener\">http://apt.modmyi.com/</a> 该源上多为一些美化类的插件</p>\n</li>\n<li><p>　【repo666.ultrasn0wn.com】 <a href=\"http://repo666.ultrasn0wn.com\" target=\"_blank\" rel=\"noopener\">http://repo666.ultrasn0wn.com</a> 目前只有一个ultrasn0w的插件，偏技术型，普通用户几乎用不上</p>\n</li>\n<li><p>　【ZodTTD&amp;MacCiti】 <a href=\"http://ctdua.zodttd.com/repo/cydia/\" target=\"_blank\" rel=\"noopener\">http://ctdua.zodttd.com/repo/cydia/</a> 该插件源上多为铃声和主题，用处不大，很多用户甚至想它删掉</p>\n</li>\n</ul>\n<h4 id=\"国内的部分源\"><a href=\"#国内的部分源\" class=\"headerlink\" title=\"国内的部分源\"></a>国内的部分源</h4><ul>\n<li><p>【威锋源】 apt.weiphone.com 功能很多很强大，几乎是越狱人士必备一个插件源</p>\n</li>\n<li><p>　【威锋精品源】 repo.weiphone.com 功能很多很强大，几乎是越狱人士必备一个插件源，与上面功能类似，安装一个即可</p>\n</li>\n<li><p>　【第一中文源】 apt.178.com 功能很多很强大，几乎是越狱人士必备一个插件源</p>\n</li>\n<li><p>　【25PP手机助手源】 apt.25pp.com 虽然该源上的插件数量不是很多，但pp助手作为一个越狱后必装软件商店的话，很多用户也是需要添加这个源的</p>\n</li>\n<li><p>　【原创精品源】<a href=\"http://repo.so\" target=\"_blank\" rel=\"noopener\">http://repo.so</a> iOS8越狱后新推出插件源，多为一个汉化版的插件，</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>前不久大神 <a href=\"https://twitter.com/Pwn20wnd\" target=\"_blank\" rel=\"noopener\">Pwn20wnd</a>放出了 ios12.4 的<a href=\"https://github.com/pwn20wndstuff/Undecimus/releases\" target=\"_blank\" rel=\"noopener\">越狱工具</a>,但仍然不是完美越狱.</p>\n<h2 id=\"支持的设备\"><a href=\"#支持的设备\" class=\"headerlink\" title=\"支持的设备\"></a>支持的设备</h2></blockquote>\n<ul>\n<li>iPhone 5S</li>\n<li>iPhone 6</li>\n<li>iPhone 6 Plus</li>\n<li>iPhone 6s</li>\n<li>iPhone 6s Plus</li>\n<li>iPhone SE</li>\n<li>iPhone 7</li>\n<li>iPhone 7 Plus</li>\n<li>iPhone 8</li>\n<li>iPhone 8 Plus</li>\n<li>iPhone X</li>\n<li>iPhone XS （A12设备）</li>\n<li>iPhone XS Max （A12设备）</li>\n<li>iPhone XR （A12设备）</li>\n<li>iPod touch 6代</li>\n<li>12.9吋iPad Pro（第三代）（A12X设备）</li>\n<li>11吋iPad Pro （A12X设备）</li>\n<li>iPad Air</li>\n<li>iPad Air 2</li>\n<li>iPad Air 3 （2019年款）</li>\n<li>9.7吋iPad Pro</li>\n<li>12.9吋iPad Pro（第一代）</li>\n<li>10.5吋iPad Pro</li>\n<li>12.9吋iPad Pro（第二代）</li>\n<li>iPad 第六代（2018年款）</li>\n<li>iPad 第五代（2017年款）</li>\n<li>iPad mini 5 （A12X设备）</li>\n<li>iPad mini 4</li>\n<li>iPad mini 3</li>\n<li>iPad mini 2</li>\n</ul>\n<h2 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h2><ul>\n<li>越狱工具安装器 <a href=\"http://www.cydiaimpactor.com/\" target=\"_blank\" rel=\"noopener\"> Cydia Impactor</a></li>\n<li>apple id (关闭各种验证手段),用来注册7天的开发者证书</li>\n<li><a href=\"https://github.com/pwn20wndstuff/Undecimus/releases/download/v3.5.6/Undecimus-v3.5.6.ipa\" target=\"_blank\" rel=\"noopener\">越狱工具安装包 </a><h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2></li>\n<li>手机连接电脑,开启飞行模式;</li>\n<li>把越狱工具安装包拖到<code>cydia impactor</code>里,然后输入自己的 apple id 账号和密码,生成临时的安装证书;</li>\n<li>软件安装成功后,到手机 设置&gt;通用&gt;描述文件与设备管理&gt;开发者应用中选择信任证书;<br><img src=\"https://i.loli.net/2019/08/29/Na6ZG7YoVibl9m4.jpg\" alt=\"IMG_1DF82B6E3742-1\"><br>*打开 unc0ver ,在设置里面勾选 安装 openSSH.<img src=\"https://i.loli.net/2019/08/28/hTs6U5VREKI71WX.jpg\" alt=\"IMG_AC461FEAF702-1\"></li>\n</ul>\n<p>接着进行越狱操作 ⤵️</p>\n<p><img src=\"https://i.loli.net/2019/08/28/QCtqv41pwKiVBug.jpg\" alt=\"IMG_F8DC3F214AB2-1\"></p>\n<ul>\n<li><p>完成以后设备重启,再次点击越狱(由于是不完美越狱,每次重启手机以后都需要重新打开越狱软件进行越狱)</p>\n<h2 id=\"cydia-无法联网的问题\"><a href=\"#cydia-无法联网的问题\" class=\"headerlink\" title=\"cydia 无法联网的问题\"></a>cydia 无法联网的问题</h2><p>国行手机首次打开 cydia 发现无法联网,是因为 cydia 不是正常安装的,无法跳出联网方式的选择界面.</p>\n<h3 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h3><p>手机和电脑连接到同一个 WiFi,先在 ios 设备上查到本机 ip,然后电脑上使用 ssh 客户端连接到手机.</p>\n<pre><code>ssh root@192.168.0.101\n</code></pre></li>\n</ul>\n<p>接着输入密码 <code>alpine</code></p>\n<p>移除/var/preferences下的3个文件</p>\n<pre><code>com.apple.networkextension.necp.plist\ncom.apple.networkextension.plist\ncom.apple.networkextension.uuidcache.plist\n</code></pre><p>执行:</p>\n<pre><code>rm /var/preferences/com.apple.networkextension*.plist\n</code></pre><p>手机重启,重新越狱,接着打开 cydia 就可以联网了.</p>\n<h2 id=\"关于-cydia\"><a href=\"#关于-cydia\" class=\"headerlink\" title=\"关于 cydia\"></a>关于 cydia</h2><blockquote>\n<p>Cydia的主要目的是为越狱的iOS用户提供一个高级包装工具的图形界面前端以安装不被App Store接受的程序。它也是一个软件仓库的聚合器，带有几个被社区信任的源以避免对某个服务器的过度依赖。大部分软件包的稳定版本都可以在这些源中找到；不过，用户也可以很容易地添加源。这使得iOS开发可以尽量开放；任何有服务器的人都可以设置、储存、管理和更新他自己的软件仓库并和社区分享。不过大部分的社区源是接受提交软件包的，相比起独立的源，这样也可以帮助软件获得更多关注。(via wiki)</p>\n</blockquote>\n<h3 id=\"cydia的源\"><a href=\"#cydia的源\" class=\"headerlink\" title=\"cydia的源\"></a>cydia的源</h3><p>cydia 的源可以看成是若干插件的集合,包括官方源以及个人源.添加了 cydia 的源以后可以方便地添加越狱插件</p>\n<h4 id=\"cydia-官方源\"><a href=\"#cydia-官方源\" class=\"headerlink\" title=\"cydia 官方源\"></a>cydia 官方源</h4><ul>\n<li>【BigBoss源】 apt.thebigboss.org/repofiles/cydia Cydia内置大老板源、正版插件购买源，很多付费插件都是要这个上面购买。</li>\n</ul>\n<ul>\n<li><p>　【Cydia/Telesphoreo】 <a href=\"http://apt.saurik.com/\" target=\"_blank\" rel=\"noopener\">http://apt.saurik.com/</a>　　我们越狱后安装AFC2补丁就可以去这个源上下载，也可以是【25PP手机助手源】中安装</p>\n</li>\n<li><p>　【ModMyi.com】 <a href=\"http://apt.modmyi.com/\" target=\"_blank\" rel=\"noopener\">http://apt.modmyi.com/</a> 该源上多为一些美化类的插件</p>\n</li>\n<li><p>　【repo666.ultrasn0wn.com】 <a href=\"http://repo666.ultrasn0wn.com\" target=\"_blank\" rel=\"noopener\">http://repo666.ultrasn0wn.com</a> 目前只有一个ultrasn0w的插件，偏技术型，普通用户几乎用不上</p>\n</li>\n<li><p>　【ZodTTD&amp;MacCiti】 <a href=\"http://ctdua.zodttd.com/repo/cydia/\" target=\"_blank\" rel=\"noopener\">http://ctdua.zodttd.com/repo/cydia/</a> 该插件源上多为铃声和主题，用处不大，很多用户甚至想它删掉</p>\n</li>\n</ul>\n<h4 id=\"国内的部分源\"><a href=\"#国内的部分源\" class=\"headerlink\" title=\"国内的部分源\"></a>国内的部分源</h4><ul>\n<li><p>【威锋源】 apt.weiphone.com 功能很多很强大，几乎是越狱人士必备一个插件源</p>\n</li>\n<li><p>　【威锋精品源】 repo.weiphone.com 功能很多很强大，几乎是越狱人士必备一个插件源，与上面功能类似，安装一个即可</p>\n</li>\n<li><p>　【第一中文源】 apt.178.com 功能很多很强大，几乎是越狱人士必备一个插件源</p>\n</li>\n<li><p>　【25PP手机助手源】 apt.25pp.com 虽然该源上的插件数量不是很多，但pp助手作为一个越狱后必装软件商店的话，很多用户也是需要添加这个源的</p>\n</li>\n<li><p>　【原创精品源】<a href=\"http://repo.so\" target=\"_blank\" rel=\"noopener\">http://repo.so</a> iOS8越狱后新推出插件源，多为一个汉化版的插件，</p>\n</li>\n</ul>\n"},{"title":"给 hexo博客添加免费域名","_content":">使用hexo+github pages搭建完博客后，接下来当然是要进行域名绑定.毕竟用user_name.github.io太长,不方便记.在这里我们申请了freenom 的免费域名.\n\n## hexo 项目中文件中添加 CNAME 文件\n项目根目录下添加 CNAME 文件,内容是申请的域名,注意不要加`www`.例如我申请的域名是 `h123.cf`,则 CNAME 文件中写入的内容就是:\n\n     h123.cf\n\n在 github 的hexo 项目的 setting 中看到如下内容,代表设置成功.\n![屏幕快照 2019-08-29 下午8.48.45](https://i.loli.net/2019/08/29/UlDeB8yXf5gAmY9.png)\n## 域名解析\n登录[freenom](https://my.freenom.com/clientarea.php?action=domains),选择自己刚才注册的域名的` manage Domain`\n![屏幕快照 2019-08-29 下午8.52.01](https://i.loli.net/2019/08/29/UZSDdyliFK1rWNE.png)\n\n![WX20190829-205607@2x](https://i.loli.net/2019/08/29/hiyZA5JQla2gXRp.png)\n\n添加 CNAME记录.\n![WX20190829-205716@2x](https://i.loli.net/2019/08/29/tiTd6OBMewvhkYG.png)\n然后保存,过 0-72 小时以后就可以访问了.\n\n## 给解析后的域名添加 🔐(https)\n现在 github 支持直接给博客添加 https\n![屏幕快照 2019-08-29 下午9.50.42](https://i.loli.net/2019/08/29/2JFtUB7Mpsik5Qx.png)\n\n## 使用 DNSPod 添加域名解析\n使用国内的 DNSPod进行域名解析可以提高解析的速度.\n### DNSPod中的操作\n* 注册 DNSPod 账户,接着添加之前申请的域名.\n* 添加号以后,在域名解析页面中可以看到已经添加了两组NS 记录,我们再添加两条 CNAME 记录.\n![WX20190829-211258@2x](https://i.loli.net/2019/08/29/6xqiT4mD3QeXMyo.png)\n\n### freenom 的操作\n![WX20190829-210534@2x](https://i.loli.net/2019/08/29/Ff3JYhOtXpcq6zy.png)\n添加两组 DNSPod的 dns 服务器.\n![WX20190829-210624@2x](https://i.loli.net/2019/08/29/v8eBjA6YCmZu4Sa.png)\n\n        f1g1ns1.dnspod.net\n        f1g1ns2.dnspod.net\n\n\n等待0-72 小时生效.\n\n## 附:关于记录类型/记录值\n\n### 记录类型\n![屏幕快照 2019-08-29 下午9.57.25](https://i.loli.net/2019/08/29/MyAqPC8IhgbQXB5.png)\n\n### 记录值\n![屏幕快照 2019-08-29 下午9.58.30](https://i.loli.net/2019/08/29/pUGRMmNizAc7Jrh.png)\n","source":"_posts/2019.08.29.cname.md","raw":"---\ntitle: 给 hexo博客添加免费域名\ntags: [hexo]\ncategories: 随笔\n---\n>使用hexo+github pages搭建完博客后，接下来当然是要进行域名绑定.毕竟用user_name.github.io太长,不方便记.在这里我们申请了freenom 的免费域名.\n\n## hexo 项目中文件中添加 CNAME 文件\n项目根目录下添加 CNAME 文件,内容是申请的域名,注意不要加`www`.例如我申请的域名是 `h123.cf`,则 CNAME 文件中写入的内容就是:\n\n     h123.cf\n\n在 github 的hexo 项目的 setting 中看到如下内容,代表设置成功.\n![屏幕快照 2019-08-29 下午8.48.45](https://i.loli.net/2019/08/29/UlDeB8yXf5gAmY9.png)\n## 域名解析\n登录[freenom](https://my.freenom.com/clientarea.php?action=domains),选择自己刚才注册的域名的` manage Domain`\n![屏幕快照 2019-08-29 下午8.52.01](https://i.loli.net/2019/08/29/UZSDdyliFK1rWNE.png)\n\n![WX20190829-205607@2x](https://i.loli.net/2019/08/29/hiyZA5JQla2gXRp.png)\n\n添加 CNAME记录.\n![WX20190829-205716@2x](https://i.loli.net/2019/08/29/tiTd6OBMewvhkYG.png)\n然后保存,过 0-72 小时以后就可以访问了.\n\n## 给解析后的域名添加 🔐(https)\n现在 github 支持直接给博客添加 https\n![屏幕快照 2019-08-29 下午9.50.42](https://i.loli.net/2019/08/29/2JFtUB7Mpsik5Qx.png)\n\n## 使用 DNSPod 添加域名解析\n使用国内的 DNSPod进行域名解析可以提高解析的速度.\n### DNSPod中的操作\n* 注册 DNSPod 账户,接着添加之前申请的域名.\n* 添加号以后,在域名解析页面中可以看到已经添加了两组NS 记录,我们再添加两条 CNAME 记录.\n![WX20190829-211258@2x](https://i.loli.net/2019/08/29/6xqiT4mD3QeXMyo.png)\n\n### freenom 的操作\n![WX20190829-210534@2x](https://i.loli.net/2019/08/29/Ff3JYhOtXpcq6zy.png)\n添加两组 DNSPod的 dns 服务器.\n![WX20190829-210624@2x](https://i.loli.net/2019/08/29/v8eBjA6YCmZu4Sa.png)\n\n        f1g1ns1.dnspod.net\n        f1g1ns2.dnspod.net\n\n\n等待0-72 小时生效.\n\n## 附:关于记录类型/记录值\n\n### 记录类型\n![屏幕快照 2019-08-29 下午9.57.25](https://i.loli.net/2019/08/29/MyAqPC8IhgbQXB5.png)\n\n### 记录值\n![屏幕快照 2019-08-29 下午9.58.30](https://i.loli.net/2019/08/29/pUGRMmNizAc7Jrh.png)\n","slug":"2019.08.29.cname","published":1,"date":"2019-08-29T12:10:47.867Z","updated":"2019-08-29T14:01:36.724Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziiqc001erh9z22ksglm0","content":"<blockquote>\n<p>使用hexo+github pages搭建完博客后，接下来当然是要进行域名绑定.毕竟用user_name.github.io太长,不方便记.在这里我们申请了freenom 的免费域名.</p>\n</blockquote>\n<h2 id=\"hexo-项目中文件中添加-CNAME-文件\"><a href=\"#hexo-项目中文件中添加-CNAME-文件\" class=\"headerlink\" title=\"hexo 项目中文件中添加 CNAME 文件\"></a>hexo 项目中文件中添加 CNAME 文件</h2><p>项目根目录下添加 CNAME 文件,内容是申请的域名,注意不要加<code>www</code>.例如我申请的域名是 <code>h123.cf</code>,则 CNAME 文件中写入的内容就是:</p>\n<pre><code>h123.cf\n</code></pre><p>在 github 的hexo 项目的 setting 中看到如下内容,代表设置成功.<br><img src=\"https://i.loli.net/2019/08/29/UlDeB8yXf5gAmY9.png\" alt=\"屏幕快照 2019-08-29 下午8.48.45\"></p>\n<h2 id=\"域名解析\"><a href=\"#域名解析\" class=\"headerlink\" title=\"域名解析\"></a>域名解析</h2><p>登录<a href=\"https://my.freenom.com/clientarea.php?action=domains\" target=\"_blank\" rel=\"noopener\">freenom</a>,选择自己刚才注册的域名的<code>manage Domain</code><br><img src=\"https://i.loli.net/2019/08/29/UZSDdyliFK1rWNE.png\" alt=\"屏幕快照 2019-08-29 下午8.52.01\"></p>\n<p><img src=\"https://i.loli.net/2019/08/29/hiyZA5JQla2gXRp.png\" alt=\"WX20190829-205607@2x\"></p>\n<p>添加 CNAME记录.<br><img src=\"https://i.loli.net/2019/08/29/tiTd6OBMewvhkYG.png\" alt=\"WX20190829-205716@2x\"><br>然后保存,过 0-72 小时以后就可以访问了.</p>\n<h2 id=\"给解析后的域名添加-🔐-https\"><a href=\"#给解析后的域名添加-🔐-https\" class=\"headerlink\" title=\"给解析后的域名添加 🔐(https)\"></a>给解析后的域名添加 🔐(https)</h2><p>现在 github 支持直接给博客添加 https<br><img src=\"https://i.loli.net/2019/08/29/2JFtUB7Mpsik5Qx.png\" alt=\"屏幕快照 2019-08-29 下午9.50.42\"></p>\n<h2 id=\"使用-DNSPod-添加域名解析\"><a href=\"#使用-DNSPod-添加域名解析\" class=\"headerlink\" title=\"使用 DNSPod 添加域名解析\"></a>使用 DNSPod 添加域名解析</h2><p>使用国内的 DNSPod进行域名解析可以提高解析的速度.</p>\n<h3 id=\"DNSPod中的操作\"><a href=\"#DNSPod中的操作\" class=\"headerlink\" title=\"DNSPod中的操作\"></a>DNSPod中的操作</h3><ul>\n<li>注册 DNSPod 账户,接着添加之前申请的域名.</li>\n<li>添加号以后,在域名解析页面中可以看到已经添加了两组NS 记录,我们再添加两条 CNAME 记录.<br><img src=\"https://i.loli.net/2019/08/29/6xqiT4mD3QeXMyo.png\" alt=\"WX20190829-211258@2x\"></li>\n</ul>\n<h3 id=\"freenom-的操作\"><a href=\"#freenom-的操作\" class=\"headerlink\" title=\"freenom 的操作\"></a>freenom 的操作</h3><p><img src=\"https://i.loli.net/2019/08/29/Ff3JYhOtXpcq6zy.png\" alt=\"WX20190829-210534@2x\"><br>添加两组 DNSPod的 dns 服务器.<br><img src=\"https://i.loli.net/2019/08/29/v8eBjA6YCmZu4Sa.png\" alt=\"WX20190829-210624@2x\"></p>\n<pre><code>f1g1ns1.dnspod.net\nf1g1ns2.dnspod.net\n</code></pre><p>等待0-72 小时生效.</p>\n<h2 id=\"附-关于记录类型-记录值\"><a href=\"#附-关于记录类型-记录值\" class=\"headerlink\" title=\"附:关于记录类型/记录值\"></a>附:关于记录类型/记录值</h2><h3 id=\"记录类型\"><a href=\"#记录类型\" class=\"headerlink\" title=\"记录类型\"></a>记录类型</h3><p><img src=\"https://i.loli.net/2019/08/29/MyAqPC8IhgbQXB5.png\" alt=\"屏幕快照 2019-08-29 下午9.57.25\"></p>\n<h3 id=\"记录值\"><a href=\"#记录值\" class=\"headerlink\" title=\"记录值\"></a>记录值</h3><p><img src=\"https://i.loli.net/2019/08/29/pUGRMmNizAc7Jrh.png\" alt=\"屏幕快照 2019-08-29 下午9.58.30\"></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>使用hexo+github pages搭建完博客后，接下来当然是要进行域名绑定.毕竟用user_name.github.io太长,不方便记.在这里我们申请了freenom 的免费域名.</p>\n</blockquote>\n<h2 id=\"hexo-项目中文件中添加-CNAME-文件\"><a href=\"#hexo-项目中文件中添加-CNAME-文件\" class=\"headerlink\" title=\"hexo 项目中文件中添加 CNAME 文件\"></a>hexo 项目中文件中添加 CNAME 文件</h2><p>项目根目录下添加 CNAME 文件,内容是申请的域名,注意不要加<code>www</code>.例如我申请的域名是 <code>h123.cf</code>,则 CNAME 文件中写入的内容就是:</p>\n<pre><code>h123.cf\n</code></pre><p>在 github 的hexo 项目的 setting 中看到如下内容,代表设置成功.<br><img src=\"https://i.loli.net/2019/08/29/UlDeB8yXf5gAmY9.png\" alt=\"屏幕快照 2019-08-29 下午8.48.45\"></p>\n<h2 id=\"域名解析\"><a href=\"#域名解析\" class=\"headerlink\" title=\"域名解析\"></a>域名解析</h2><p>登录<a href=\"https://my.freenom.com/clientarea.php?action=domains\" target=\"_blank\" rel=\"noopener\">freenom</a>,选择自己刚才注册的域名的<code>manage Domain</code><br><img src=\"https://i.loli.net/2019/08/29/UZSDdyliFK1rWNE.png\" alt=\"屏幕快照 2019-08-29 下午8.52.01\"></p>\n<p><img src=\"https://i.loli.net/2019/08/29/hiyZA5JQla2gXRp.png\" alt=\"WX20190829-205607@2x\"></p>\n<p>添加 CNAME记录.<br><img src=\"https://i.loli.net/2019/08/29/tiTd6OBMewvhkYG.png\" alt=\"WX20190829-205716@2x\"><br>然后保存,过 0-72 小时以后就可以访问了.</p>\n<h2 id=\"给解析后的域名添加-🔐-https\"><a href=\"#给解析后的域名添加-🔐-https\" class=\"headerlink\" title=\"给解析后的域名添加 🔐(https)\"></a>给解析后的域名添加 🔐(https)</h2><p>现在 github 支持直接给博客添加 https<br><img src=\"https://i.loli.net/2019/08/29/2JFtUB7Mpsik5Qx.png\" alt=\"屏幕快照 2019-08-29 下午9.50.42\"></p>\n<h2 id=\"使用-DNSPod-添加域名解析\"><a href=\"#使用-DNSPod-添加域名解析\" class=\"headerlink\" title=\"使用 DNSPod 添加域名解析\"></a>使用 DNSPod 添加域名解析</h2><p>使用国内的 DNSPod进行域名解析可以提高解析的速度.</p>\n<h3 id=\"DNSPod中的操作\"><a href=\"#DNSPod中的操作\" class=\"headerlink\" title=\"DNSPod中的操作\"></a>DNSPod中的操作</h3><ul>\n<li>注册 DNSPod 账户,接着添加之前申请的域名.</li>\n<li>添加号以后,在域名解析页面中可以看到已经添加了两组NS 记录,我们再添加两条 CNAME 记录.<br><img src=\"https://i.loli.net/2019/08/29/6xqiT4mD3QeXMyo.png\" alt=\"WX20190829-211258@2x\"></li>\n</ul>\n<h3 id=\"freenom-的操作\"><a href=\"#freenom-的操作\" class=\"headerlink\" title=\"freenom 的操作\"></a>freenom 的操作</h3><p><img src=\"https://i.loli.net/2019/08/29/Ff3JYhOtXpcq6zy.png\" alt=\"WX20190829-210534@2x\"><br>添加两组 DNSPod的 dns 服务器.<br><img src=\"https://i.loli.net/2019/08/29/v8eBjA6YCmZu4Sa.png\" alt=\"WX20190829-210624@2x\"></p>\n<pre><code>f1g1ns1.dnspod.net\nf1g1ns2.dnspod.net\n</code></pre><p>等待0-72 小时生效.</p>\n<h2 id=\"附-关于记录类型-记录值\"><a href=\"#附-关于记录类型-记录值\" class=\"headerlink\" title=\"附:关于记录类型/记录值\"></a>附:关于记录类型/记录值</h2><h3 id=\"记录类型\"><a href=\"#记录类型\" class=\"headerlink\" title=\"记录类型\"></a>记录类型</h3><p><img src=\"https://i.loli.net/2019/08/29/MyAqPC8IhgbQXB5.png\" alt=\"屏幕快照 2019-08-29 下午9.57.25\"></p>\n<h3 id=\"记录值\"><a href=\"#记录值\" class=\"headerlink\" title=\"记录值\"></a>记录值</h3><p><img src=\"https://i.loli.net/2019/08/29/pUGRMmNizAc7Jrh.png\" alt=\"屏幕快照 2019-08-29 下午9.58.30\"></p>\n"},{"title":"使用 koa-body 接受 post 请求以及文件","_content":"# koa\n>Koa 是一个新的 web 框架，由 Express 幕后的原班人马打造， 致力于成为 web 应用和 API 开发领域中的一个更小、更富有表现力、更健壮的基石。 通过利用 async 函数，Koa 帮你丢弃回调函数，并有力地增强错误处理。 Koa 并没有捆绑任何中间件， 而是提供了一套优雅的方法，帮助您快速而愉快地编写服务端应用程序。\n# koa-body\n`koa`本身不能解析 post 的 body,因此需要添加中间件解析.\n`koa-bodyparser`可以解析 post 的 body,但是无法处理上传的文件.这里我们使用 `koa-body`,它可以处理上传的文件和 post 请求,同时可以搭配 `koa-router`使用,在需要的地方添加配置.\n## 可以处理的请求\n\n* multipart/form-data\n* application/x-www-urlencoded\n* application/json\n* application/json-patch+json\n* application/vnd.api+json\n* application/csp-report\n\n## 使用(搭配 koa-router)\n```js\n//处理 post 请求body 中的值\n    const Koa = require('koa');\n    const app = new Koa();\n    const router = require('koa-router')();\n    const koaBody = require('koa-body');\n    router.post('/users', koaBody(),\n    (ctx) => {\n        console.log(ctx.request.body);\n        // => POST body\n        ctx.body = JSON.stringify(ctx.request.body);\n    }\n    );\n    app.use(router.routes());\n    app.listen(3000);\n\n\n```\n```js\n//处理上传的文件\nconst routers = router.post(\n  \"/\",\n  koaBody({\n    multipart: true,\n    formidable: { maxFileSize: 1024*1000*100000 }\n  }),\n  uploadController.uploadVideo\n);\n```\n## 主要参数\n![WX20190829-112657@2x](https://i.loli.net/2019/08/29/Sukyz1jWfrXvYsh.png)\nformidable 的相关配置参数\n![屏幕快照 2019-08-29 上午11.28.05](https://i.loli.net/2019/08/29/XrnDoiH1356K2MW.png)\n\n\n## 获取上传信息\n\n### 文件\n\n使用`ctx.request.files`来获取文件.因为默认开启多个文件上传，因此 ctx.request.files 是一个对象.\n```js\n    async uploadVideo(ctx) {\n        const file = ctx.request.files.file;\n        const reader = fs.createReadStream(file.path);\n        const ext = file.name.split(\".\").pop();\n        const dir = path.join(__dirname, `../upload/${utils.getDirName()}`);\n        utils.checkDirExist(dir);\n        let fileName = `${utils.getDirName()}_${~~(Math.random() * 10000)}.${ext}`;\n        const fileLocation = `${dir}/${fileName}`;\n        const upStream = fs.createWriteStream(fileLocation);\n        reader.pipe(upStream);\n        await utils.transferFile(fileLocation, `/yunjia/${fileName}`);\n        ctx.body = {\n        code: 200,\n        url: `http://10.20.21.24:8080/${fileName}`\n        };\n    }\n```\n\n```js\n//utils.js中的 transferFile 函数用来上传文件到指定的 ftp 服务器,\n//同时确保返回前端 url 之前,上传已经完成\n//因此使用了 koa 框架支持的 async 函数, await transferFile()\n//确保文件上传完成以后,返回给前端文件的 url.\ntransferFile(fileLocation, path) {\n    return new Promise((resolve, reject) => {\n      let ftpClient = new FtpClient();\n      ftpClient.on(\"ready\", function() {\n        ftpClient.put(fileLocation, path, err => {\n          if (err) {\n            reject(err);\n          }\n          console.dir(\"成功上传文件到服务器\");\n          resolve();\n          ftpClient.end();\n          fs.unlinkSync(fileLocation);\n        });\n      });\n      ftpClient.connect(ftpConnectionConfig.ftpConnectionConfig);\n    });\n  }\n```\n\n### 获取 body 的值\n使用`ctx.request.body`来获取.\n","source":"_posts/2019.08.29.koa-body.md","raw":"---\ntitle: 使用 koa-body 接受 post 请求以及文件\ntags: [nodejs, koa]\ncategories: 技术\n---\n# koa\n>Koa 是一个新的 web 框架，由 Express 幕后的原班人马打造， 致力于成为 web 应用和 API 开发领域中的一个更小、更富有表现力、更健壮的基石。 通过利用 async 函数，Koa 帮你丢弃回调函数，并有力地增强错误处理。 Koa 并没有捆绑任何中间件， 而是提供了一套优雅的方法，帮助您快速而愉快地编写服务端应用程序。\n# koa-body\n`koa`本身不能解析 post 的 body,因此需要添加中间件解析.\n`koa-bodyparser`可以解析 post 的 body,但是无法处理上传的文件.这里我们使用 `koa-body`,它可以处理上传的文件和 post 请求,同时可以搭配 `koa-router`使用,在需要的地方添加配置.\n## 可以处理的请求\n\n* multipart/form-data\n* application/x-www-urlencoded\n* application/json\n* application/json-patch+json\n* application/vnd.api+json\n* application/csp-report\n\n## 使用(搭配 koa-router)\n```js\n//处理 post 请求body 中的值\n    const Koa = require('koa');\n    const app = new Koa();\n    const router = require('koa-router')();\n    const koaBody = require('koa-body');\n    router.post('/users', koaBody(),\n    (ctx) => {\n        console.log(ctx.request.body);\n        // => POST body\n        ctx.body = JSON.stringify(ctx.request.body);\n    }\n    );\n    app.use(router.routes());\n    app.listen(3000);\n\n\n```\n```js\n//处理上传的文件\nconst routers = router.post(\n  \"/\",\n  koaBody({\n    multipart: true,\n    formidable: { maxFileSize: 1024*1000*100000 }\n  }),\n  uploadController.uploadVideo\n);\n```\n## 主要参数\n![WX20190829-112657@2x](https://i.loli.net/2019/08/29/Sukyz1jWfrXvYsh.png)\nformidable 的相关配置参数\n![屏幕快照 2019-08-29 上午11.28.05](https://i.loli.net/2019/08/29/XrnDoiH1356K2MW.png)\n\n\n## 获取上传信息\n\n### 文件\n\n使用`ctx.request.files`来获取文件.因为默认开启多个文件上传，因此 ctx.request.files 是一个对象.\n```js\n    async uploadVideo(ctx) {\n        const file = ctx.request.files.file;\n        const reader = fs.createReadStream(file.path);\n        const ext = file.name.split(\".\").pop();\n        const dir = path.join(__dirname, `../upload/${utils.getDirName()}`);\n        utils.checkDirExist(dir);\n        let fileName = `${utils.getDirName()}_${~~(Math.random() * 10000)}.${ext}`;\n        const fileLocation = `${dir}/${fileName}`;\n        const upStream = fs.createWriteStream(fileLocation);\n        reader.pipe(upStream);\n        await utils.transferFile(fileLocation, `/yunjia/${fileName}`);\n        ctx.body = {\n        code: 200,\n        url: `http://10.20.21.24:8080/${fileName}`\n        };\n    }\n```\n\n```js\n//utils.js中的 transferFile 函数用来上传文件到指定的 ftp 服务器,\n//同时确保返回前端 url 之前,上传已经完成\n//因此使用了 koa 框架支持的 async 函数, await transferFile()\n//确保文件上传完成以后,返回给前端文件的 url.\ntransferFile(fileLocation, path) {\n    return new Promise((resolve, reject) => {\n      let ftpClient = new FtpClient();\n      ftpClient.on(\"ready\", function() {\n        ftpClient.put(fileLocation, path, err => {\n          if (err) {\n            reject(err);\n          }\n          console.dir(\"成功上传文件到服务器\");\n          resolve();\n          ftpClient.end();\n          fs.unlinkSync(fileLocation);\n        });\n      });\n      ftpClient.connect(ftpConnectionConfig.ftpConnectionConfig);\n    });\n  }\n```\n\n### 获取 body 的值\n使用`ctx.request.body`来获取.\n","slug":"2019.08.29.koa-body","published":1,"date":"2019-08-29T03:15:33.225Z","updated":"2019-09-10T05:47:38.521Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziiqc001frh9z476gc599","content":"<h1 id=\"koa\"><a href=\"#koa\" class=\"headerlink\" title=\"koa\"></a>koa</h1><blockquote>\n<p>Koa 是一个新的 web 框架，由 Express 幕后的原班人马打造， 致力于成为 web 应用和 API 开发领域中的一个更小、更富有表现力、更健壮的基石。 通过利用 async 函数，Koa 帮你丢弃回调函数，并有力地增强错误处理。 Koa 并没有捆绑任何中间件， 而是提供了一套优雅的方法，帮助您快速而愉快地编写服务端应用程序。</p>\n<h1 id=\"koa-body\"><a href=\"#koa-body\" class=\"headerlink\" title=\"koa-body\"></a>koa-body</h1><p><code>koa</code>本身不能解析 post 的 body,因此需要添加中间件解析.<br><code>koa-bodyparser</code>可以解析 post 的 body,但是无法处理上传的文件.这里我们使用 <code>koa-body</code>,它可以处理上传的文件和 post 请求,同时可以搭配 <code>koa-router</code>使用,在需要的地方添加配置.</p>\n<h2 id=\"可以处理的请求\"><a href=\"#可以处理的请求\" class=\"headerlink\" title=\"可以处理的请求\"></a>可以处理的请求</h2></blockquote>\n<ul>\n<li>multipart/form-data</li>\n<li>application/x-www-urlencoded</li>\n<li>application/json</li>\n<li>application/json-patch+json</li>\n<li>application/vnd.api+json</li>\n<li>application/csp-report</li>\n</ul>\n<h2 id=\"使用-搭配-koa-router\"><a href=\"#使用-搭配-koa-router\" class=\"headerlink\" title=\"使用(搭配 koa-router)\"></a>使用(搭配 koa-router)</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//处理 post 请求body 中的值</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> koaBody = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-body'</span>);</span><br><span class=\"line\">    router.post(<span class=\"string\">'/users'</span>, koaBody(),</span><br><span class=\"line\">    (ctx) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(ctx.request.body);</span><br><span class=\"line\">        <span class=\"comment\">// =&gt; POST body</span></span><br><span class=\"line\">        ctx.body = <span class=\"built_in\">JSON</span>.stringify(ctx.request.body);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    );</span><br><span class=\"line\">    app.use(router.routes());</span><br><span class=\"line\">    app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//处理上传的文件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> routers = router.post(</span><br><span class=\"line\">  <span class=\"string\">\"/\"</span>,</span><br><span class=\"line\">  koaBody(&#123;</span><br><span class=\"line\">    multipart: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    formidable: &#123; <span class=\"attr\">maxFileSize</span>: <span class=\"number\">1024</span>*<span class=\"number\">1000</span>*<span class=\"number\">100000</span> &#125;</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">  uploadController.uploadVideo</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h2 id=\"主要参数\"><a href=\"#主要参数\" class=\"headerlink\" title=\"主要参数\"></a>主要参数</h2><p><img src=\"https://i.loli.net/2019/08/29/Sukyz1jWfrXvYsh.png\" alt=\"WX20190829-112657@2x\"><br>formidable 的相关配置参数<br><img src=\"https://i.loli.net/2019/08/29/XrnDoiH1356K2MW.png\" alt=\"屏幕快照 2019-08-29 上午11.28.05\"></p>\n<h2 id=\"获取上传信息\"><a href=\"#获取上传信息\" class=\"headerlink\" title=\"获取上传信息\"></a>获取上传信息</h2><h3 id=\"文件\"><a href=\"#文件\" class=\"headerlink\" title=\"文件\"></a>文件</h3><p>使用<code>ctx.request.files</code>来获取文件.因为默认开启多个文件上传，因此 ctx.request.files 是一个对象.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> uploadVideo(ctx) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> file = ctx.request.files.file;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> reader = fs.createReadStream(file.path);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ext = file.name.split(<span class=\"string\">\".\"</span>).pop();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> dir = path.join(__dirname, <span class=\"string\">`../upload/<span class=\"subst\">$&#123;utils.getDirName()&#125;</span>`</span>);</span><br><span class=\"line\">    utils.checkDirExist(dir);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fileName = <span class=\"string\">`<span class=\"subst\">$&#123;utils.getDirName()&#125;</span>_<span class=\"subst\">$&#123;~~(<span class=\"built_in\">Math</span>.random() * <span class=\"number\">10000</span>)&#125;</span>.<span class=\"subst\">$&#123;ext&#125;</span>`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fileLocation = <span class=\"string\">`<span class=\"subst\">$&#123;dir&#125;</span>/<span class=\"subst\">$&#123;fileName&#125;</span>`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> upStream = fs.createWriteStream(fileLocation);</span><br><span class=\"line\">    reader.pipe(upStream);</span><br><span class=\"line\">    <span class=\"keyword\">await</span> utils.transferFile(fileLocation, <span class=\"string\">`/yunjia/<span class=\"subst\">$&#123;fileName&#125;</span>`</span>);</span><br><span class=\"line\">    ctx.body = &#123;</span><br><span class=\"line\">    code: <span class=\"number\">200</span>,</span><br><span class=\"line\">    url: <span class=\"string\">`http://10.20.21.24:8080/<span class=\"subst\">$&#123;fileName&#125;</span>`</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//utils.js中的 transferFile 函数用来上传文件到指定的 ftp 服务器,</span></span><br><span class=\"line\"><span class=\"comment\">//同时确保返回前端 url 之前,上传已经完成</span></span><br><span class=\"line\"><span class=\"comment\">//因此使用了 koa 框架支持的 async 函数, await transferFile()</span></span><br><span class=\"line\"><span class=\"comment\">//确保文件上传完成以后,返回给前端文件的 url.</span></span><br><span class=\"line\">transferFile(fileLocation, path) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> ftpClient = <span class=\"keyword\">new</span> FtpClient();</span><br><span class=\"line\">      ftpClient.on(<span class=\"string\">\"ready\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        ftpClient.put(fileLocation, path, err =&gt; &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            reject(err);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.dir(<span class=\"string\">\"成功上传文件到服务器\"</span>);</span><br><span class=\"line\">          resolve();</span><br><span class=\"line\">          ftpClient.end();</span><br><span class=\"line\">          fs.unlinkSync(fileLocation);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      ftpClient.connect(ftpConnectionConfig.ftpConnectionConfig);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取-body-的值\"><a href=\"#获取-body-的值\" class=\"headerlink\" title=\"获取 body 的值\"></a>获取 body 的值</h3><p>使用<code>ctx.request.body</code>来获取.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"koa\"><a href=\"#koa\" class=\"headerlink\" title=\"koa\"></a>koa</h1><blockquote>\n<p>Koa 是一个新的 web 框架，由 Express 幕后的原班人马打造， 致力于成为 web 应用和 API 开发领域中的一个更小、更富有表现力、更健壮的基石。 通过利用 async 函数，Koa 帮你丢弃回调函数，并有力地增强错误处理。 Koa 并没有捆绑任何中间件， 而是提供了一套优雅的方法，帮助您快速而愉快地编写服务端应用程序。</p>\n<h1 id=\"koa-body\"><a href=\"#koa-body\" class=\"headerlink\" title=\"koa-body\"></a>koa-body</h1><p><code>koa</code>本身不能解析 post 的 body,因此需要添加中间件解析.<br><code>koa-bodyparser</code>可以解析 post 的 body,但是无法处理上传的文件.这里我们使用 <code>koa-body</code>,它可以处理上传的文件和 post 请求,同时可以搭配 <code>koa-router</code>使用,在需要的地方添加配置.</p>\n<h2 id=\"可以处理的请求\"><a href=\"#可以处理的请求\" class=\"headerlink\" title=\"可以处理的请求\"></a>可以处理的请求</h2></blockquote>\n<ul>\n<li>multipart/form-data</li>\n<li>application/x-www-urlencoded</li>\n<li>application/json</li>\n<li>application/json-patch+json</li>\n<li>application/vnd.api+json</li>\n<li>application/csp-report</li>\n</ul>\n<h2 id=\"使用-搭配-koa-router\"><a href=\"#使用-搭配-koa-router\" class=\"headerlink\" title=\"使用(搭配 koa-router)\"></a>使用(搭配 koa-router)</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//处理 post 请求body 中的值</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>(<span class=\"string\">'koa'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> router = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-router'</span>)();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> koaBody = <span class=\"built_in\">require</span>(<span class=\"string\">'koa-body'</span>);</span><br><span class=\"line\">    router.post(<span class=\"string\">'/users'</span>, koaBody(),</span><br><span class=\"line\">    (ctx) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(ctx.request.body);</span><br><span class=\"line\">        <span class=\"comment\">// =&gt; POST body</span></span><br><span class=\"line\">        ctx.body = <span class=\"built_in\">JSON</span>.stringify(ctx.request.body);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    );</span><br><span class=\"line\">    app.use(router.routes());</span><br><span class=\"line\">    app.listen(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//处理上传的文件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> routers = router.post(</span><br><span class=\"line\">  <span class=\"string\">\"/\"</span>,</span><br><span class=\"line\">  koaBody(&#123;</span><br><span class=\"line\">    multipart: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    formidable: &#123; <span class=\"attr\">maxFileSize</span>: <span class=\"number\">1024</span>*<span class=\"number\">1000</span>*<span class=\"number\">100000</span> &#125;</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">  uploadController.uploadVideo</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h2 id=\"主要参数\"><a href=\"#主要参数\" class=\"headerlink\" title=\"主要参数\"></a>主要参数</h2><p><img src=\"https://i.loli.net/2019/08/29/Sukyz1jWfrXvYsh.png\" alt=\"WX20190829-112657@2x\"><br>formidable 的相关配置参数<br><img src=\"https://i.loli.net/2019/08/29/XrnDoiH1356K2MW.png\" alt=\"屏幕快照 2019-08-29 上午11.28.05\"></p>\n<h2 id=\"获取上传信息\"><a href=\"#获取上传信息\" class=\"headerlink\" title=\"获取上传信息\"></a>获取上传信息</h2><h3 id=\"文件\"><a href=\"#文件\" class=\"headerlink\" title=\"文件\"></a>文件</h3><p>使用<code>ctx.request.files</code>来获取文件.因为默认开启多个文件上传，因此 ctx.request.files 是一个对象.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> uploadVideo(ctx) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> file = ctx.request.files.file;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> reader = fs.createReadStream(file.path);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ext = file.name.split(<span class=\"string\">\".\"</span>).pop();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> dir = path.join(__dirname, <span class=\"string\">`../upload/<span class=\"subst\">$&#123;utils.getDirName()&#125;</span>`</span>);</span><br><span class=\"line\">    utils.checkDirExist(dir);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fileName = <span class=\"string\">`<span class=\"subst\">$&#123;utils.getDirName()&#125;</span>_<span class=\"subst\">$&#123;~~(<span class=\"built_in\">Math</span>.random() * <span class=\"number\">10000</span>)&#125;</span>.<span class=\"subst\">$&#123;ext&#125;</span>`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> fileLocation = <span class=\"string\">`<span class=\"subst\">$&#123;dir&#125;</span>/<span class=\"subst\">$&#123;fileName&#125;</span>`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> upStream = fs.createWriteStream(fileLocation);</span><br><span class=\"line\">    reader.pipe(upStream);</span><br><span class=\"line\">    <span class=\"keyword\">await</span> utils.transferFile(fileLocation, <span class=\"string\">`/yunjia/<span class=\"subst\">$&#123;fileName&#125;</span>`</span>);</span><br><span class=\"line\">    ctx.body = &#123;</span><br><span class=\"line\">    code: <span class=\"number\">200</span>,</span><br><span class=\"line\">    url: <span class=\"string\">`http://10.20.21.24:8080/<span class=\"subst\">$&#123;fileName&#125;</span>`</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//utils.js中的 transferFile 函数用来上传文件到指定的 ftp 服务器,</span></span><br><span class=\"line\"><span class=\"comment\">//同时确保返回前端 url 之前,上传已经完成</span></span><br><span class=\"line\"><span class=\"comment\">//因此使用了 koa 框架支持的 async 函数, await transferFile()</span></span><br><span class=\"line\"><span class=\"comment\">//确保文件上传完成以后,返回给前端文件的 url.</span></span><br><span class=\"line\">transferFile(fileLocation, path) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> ftpClient = <span class=\"keyword\">new</span> FtpClient();</span><br><span class=\"line\">      ftpClient.on(<span class=\"string\">\"ready\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        ftpClient.put(fileLocation, path, err =&gt; &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            reject(err);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.dir(<span class=\"string\">\"成功上传文件到服务器\"</span>);</span><br><span class=\"line\">          resolve();</span><br><span class=\"line\">          ftpClient.end();</span><br><span class=\"line\">          fs.unlinkSync(fileLocation);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      ftpClient.connect(ftpConnectionConfig.ftpConnectionConfig);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取-body-的值\"><a href=\"#获取-body-的值\" class=\"headerlink\" title=\"获取 body 的值\"></a>获取 body 的值</h3><p>使用<code>ctx.request.body</code>来获取.</p>\n"},{"title":"使用nvm管理 node版本","_content":"\n>在我们的日常开发中经常会遇到这种情况：手上有好几个项目，每个项目的需求不同，进而不同项目必须依赖不同版的 NodeJS 运行环境。如果没有一个合适的工具，这个问题将非常棘手。nvm 应运而生，nvm 是 Mac 下的 node 管理工具，有点类似管理 Ruby 的 rvm，如果需要管理 Windows 下的 node，官方推荐使用 nvmw 或 nvm-windows。不过，nvm-windows 并不是 nvm 的简单移植，他们也没有任何关系。但下面介绍的所有命令，都可以在 nvm-windows 中运行。\n\n使用 nvm 方面地切换 node 版本,同时在全局安装的时候也不需要加 `sudo `.\n\n# 安装过程\n## 卸载现有的所有 node 以及 modules\n首先，打开你 Finder，按 shift+command+G，打开前往文件夹的窗口，分别输入下列目录进去之后删除 node 和 node_modules 相关的文件和文件夹:\n\n打开 /usr/local/lib，删除 node 和 node_modules 相关的文件和文件夹\n打开 /usr/local/include，删除 node 和 node_modules 相关的文件和文件夹\n如果你是使用的 brew install node 安装的 NodeJS，那么你还需要在终端中执行 brew uninstall node 命令来卸载\n检查你的个人主文件夹下面的所有的 local、lib 以及 include 文件夹，并且删除所有与 node 和 node_modules 相关的文件以及文件夹\n打开 /usr/local/bin 并删除 node 可执行文件\n你可能还需要在你的终端中输入一些额外的指令：\n\n\n    sudo rm /usr/local/bin/npm\n    sudo rm /usr/local/share/man/man1/node.1\n    sudo rm /usr/local/lib/dtrace/node.d\n    sudo rm -rf ~/.npm\n    sudo rm -rf ~/.node-gyp\n    sudo rm /opt/local/bin/node\n    sudo rm /opt/local/include/node\n    sudo rm -rf /opt/local/lib/node_modules\n\n## 开始安装 nvm\n\n可以参照 nvm 的官方安装[方法](https://github.com/nvm-sh/nvm),注意不要使用 homebrew 安装.\n\n    //使用 curl\n    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash\n    //使用Wget\n    wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash\n\n## 配置环境变量\n\n安装以后输入`nvm`发现找不到命令,这个时候需要我们配置环境变量,复制下面的代码到shell 对应的配置文件中.如你使用的 shell 是 zsh,则复制到 `~/.zshrc`最下面,使用默认的 bash 则复制到 `~/.bash_profile`最下面,接着 `source ~/.zshrc 或者source ~/.bash_profile`,或者重启terminal.\n\n    export NVM_DIR=\"$HOME/.nvm\"\n    [ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\"  # This loads nvm\n    [ -s \"$NVM_DIR/bash_completion\" ] && \\. \"$NVM_DIR/bash_completion\"  # This loads nvm bash_completion\n\n安装完成以后输入 nvm,提示:\n\n    Node Version Manager\n\n    Usage:\n        nvm help                    Show this message\n        nvm --version               Print out the latest released version of nvm\n        nvm install [-s] <version>  Download and install a <version>, [-s] from source\n        nvm uninstall <version>     Uninstall a version\n        nvm use <version>           Modify PATH to use <version>\n        nvm run <version> [<args>]  Run <version> with <args> as arguments\n        nvm current                 Display currently activated version\n        nvm ls                      List installed versions\n        nvm ls <version>            List versions matching a given description\n        nvm ls-remote               List remote versions available for install\n        nvm deactivate              Undo effects of NVM on current shell\n        nvm alias [<pattern>]       Show all aliases beginning with <pattern>\n        nvm alias <name> <version>  Set an alias named <name> pointing to <version>\n        nvm unalias <name>          Deletes the alias named <name>\n        nvm copy-packages <version> Install global NPM packages contained in <version> to current version\n\n    Example:\n        nvm install v0.10.24        Install a specific version number\n        nvm use 0.10                Use the latest available 0.10.x release\n        nvm run 0.10.24 myApp.js    Run myApp.js using node v0.10.24\n        nvm alias default 0.10.24   Set default node version on a shell\n\n    Note:\n        to remove, delete or uninstall nvm - just remove ~/.nvm, ~/.npm and ~/.bower folders\n\n\n## 常用nvm命令\n\n    nvm ls-remote //列出所有可安装的版本\n\n    nvm install <version> //安装指定的版本，如nvm install v8.14.0\n\n\n    nmv install stable //安装最新稳定版\n\n    nvm uninstall <version> //卸载指定的版本\n\n    nvm ls //列出所有已经安装的版本\n\n    nvm use <version> //切换使用指定的版本\n\n    nvm current //显示当前使用的版本\n\n    nvm alias default <version> //设置默认node版本(常用,避免每次都要设定 node 版本)\n\n\n## 更换 npm 的源\n由于某些原因,npm 本身的镜像地址(https://registry.npmjs.org/)下载速度极慢,因此我们可以更换国内淘宝的镜像地址,或者直接使用 cnpm.\n### 使用淘宝镜像\n1.临时使用\n`npm --registry https://registry.npm.taobao.org install express`\n2.持久使用\n`npm config set registry https://registry.npm.taobao.org`\n3.通过cnpm\n`npm install -g cnpm --registry=https://registry.npm.taobao.org`\n二、使用官方镜像\n`npm config set registry https://registry.npmjs.org/`\n三、查看npm源地址\n`npm config get registry`\n\n\n\n\n","source":"_posts/2019.08.29.nvm.md","raw":"---\ntitle: 使用nvm管理 node版本\ntags: [ nodejs,npm]\ncategories: 随笔\n---\n\n>在我们的日常开发中经常会遇到这种情况：手上有好几个项目，每个项目的需求不同，进而不同项目必须依赖不同版的 NodeJS 运行环境。如果没有一个合适的工具，这个问题将非常棘手。nvm 应运而生，nvm 是 Mac 下的 node 管理工具，有点类似管理 Ruby 的 rvm，如果需要管理 Windows 下的 node，官方推荐使用 nvmw 或 nvm-windows。不过，nvm-windows 并不是 nvm 的简单移植，他们也没有任何关系。但下面介绍的所有命令，都可以在 nvm-windows 中运行。\n\n使用 nvm 方面地切换 node 版本,同时在全局安装的时候也不需要加 `sudo `.\n\n# 安装过程\n## 卸载现有的所有 node 以及 modules\n首先，打开你 Finder，按 shift+command+G，打开前往文件夹的窗口，分别输入下列目录进去之后删除 node 和 node_modules 相关的文件和文件夹:\n\n打开 /usr/local/lib，删除 node 和 node_modules 相关的文件和文件夹\n打开 /usr/local/include，删除 node 和 node_modules 相关的文件和文件夹\n如果你是使用的 brew install node 安装的 NodeJS，那么你还需要在终端中执行 brew uninstall node 命令来卸载\n检查你的个人主文件夹下面的所有的 local、lib 以及 include 文件夹，并且删除所有与 node 和 node_modules 相关的文件以及文件夹\n打开 /usr/local/bin 并删除 node 可执行文件\n你可能还需要在你的终端中输入一些额外的指令：\n\n\n    sudo rm /usr/local/bin/npm\n    sudo rm /usr/local/share/man/man1/node.1\n    sudo rm /usr/local/lib/dtrace/node.d\n    sudo rm -rf ~/.npm\n    sudo rm -rf ~/.node-gyp\n    sudo rm /opt/local/bin/node\n    sudo rm /opt/local/include/node\n    sudo rm -rf /opt/local/lib/node_modules\n\n## 开始安装 nvm\n\n可以参照 nvm 的官方安装[方法](https://github.com/nvm-sh/nvm),注意不要使用 homebrew 安装.\n\n    //使用 curl\n    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash\n    //使用Wget\n    wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash\n\n## 配置环境变量\n\n安装以后输入`nvm`发现找不到命令,这个时候需要我们配置环境变量,复制下面的代码到shell 对应的配置文件中.如你使用的 shell 是 zsh,则复制到 `~/.zshrc`最下面,使用默认的 bash 则复制到 `~/.bash_profile`最下面,接着 `source ~/.zshrc 或者source ~/.bash_profile`,或者重启terminal.\n\n    export NVM_DIR=\"$HOME/.nvm\"\n    [ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\"  # This loads nvm\n    [ -s \"$NVM_DIR/bash_completion\" ] && \\. \"$NVM_DIR/bash_completion\"  # This loads nvm bash_completion\n\n安装完成以后输入 nvm,提示:\n\n    Node Version Manager\n\n    Usage:\n        nvm help                    Show this message\n        nvm --version               Print out the latest released version of nvm\n        nvm install [-s] <version>  Download and install a <version>, [-s] from source\n        nvm uninstall <version>     Uninstall a version\n        nvm use <version>           Modify PATH to use <version>\n        nvm run <version> [<args>]  Run <version> with <args> as arguments\n        nvm current                 Display currently activated version\n        nvm ls                      List installed versions\n        nvm ls <version>            List versions matching a given description\n        nvm ls-remote               List remote versions available for install\n        nvm deactivate              Undo effects of NVM on current shell\n        nvm alias [<pattern>]       Show all aliases beginning with <pattern>\n        nvm alias <name> <version>  Set an alias named <name> pointing to <version>\n        nvm unalias <name>          Deletes the alias named <name>\n        nvm copy-packages <version> Install global NPM packages contained in <version> to current version\n\n    Example:\n        nvm install v0.10.24        Install a specific version number\n        nvm use 0.10                Use the latest available 0.10.x release\n        nvm run 0.10.24 myApp.js    Run myApp.js using node v0.10.24\n        nvm alias default 0.10.24   Set default node version on a shell\n\n    Note:\n        to remove, delete or uninstall nvm - just remove ~/.nvm, ~/.npm and ~/.bower folders\n\n\n## 常用nvm命令\n\n    nvm ls-remote //列出所有可安装的版本\n\n    nvm install <version> //安装指定的版本，如nvm install v8.14.0\n\n\n    nmv install stable //安装最新稳定版\n\n    nvm uninstall <version> //卸载指定的版本\n\n    nvm ls //列出所有已经安装的版本\n\n    nvm use <version> //切换使用指定的版本\n\n    nvm current //显示当前使用的版本\n\n    nvm alias default <version> //设置默认node版本(常用,避免每次都要设定 node 版本)\n\n\n## 更换 npm 的源\n由于某些原因,npm 本身的镜像地址(https://registry.npmjs.org/)下载速度极慢,因此我们可以更换国内淘宝的镜像地址,或者直接使用 cnpm.\n### 使用淘宝镜像\n1.临时使用\n`npm --registry https://registry.npm.taobao.org install express`\n2.持久使用\n`npm config set registry https://registry.npm.taobao.org`\n3.通过cnpm\n`npm install -g cnpm --registry=https://registry.npm.taobao.org`\n二、使用官方镜像\n`npm config set registry https://registry.npmjs.org/`\n三、查看npm源地址\n`npm config get registry`\n\n\n\n\n","slug":"2019.08.29.nvm","published":1,"date":"2019-08-29T07:12:19.708Z","updated":"2019-08-29T07:43:15.791Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziiqd001grh9z5jau2tz0","content":"<blockquote>\n<p>在我们的日常开发中经常会遇到这种情况：手上有好几个项目，每个项目的需求不同，进而不同项目必须依赖不同版的 NodeJS 运行环境。如果没有一个合适的工具，这个问题将非常棘手。nvm 应运而生，nvm 是 Mac 下的 node 管理工具，有点类似管理 Ruby 的 rvm，如果需要管理 Windows 下的 node，官方推荐使用 nvmw 或 nvm-windows。不过，nvm-windows 并不是 nvm 的简单移植，他们也没有任何关系。但下面介绍的所有命令，都可以在 nvm-windows 中运行。</p>\n</blockquote>\n<p>使用 nvm 方面地切换 node 版本,同时在全局安装的时候也不需要加 <code>sudo</code>.</p>\n<h1 id=\"安装过程\"><a href=\"#安装过程\" class=\"headerlink\" title=\"安装过程\"></a>安装过程</h1><h2 id=\"卸载现有的所有-node-以及-modules\"><a href=\"#卸载现有的所有-node-以及-modules\" class=\"headerlink\" title=\"卸载现有的所有 node 以及 modules\"></a>卸载现有的所有 node 以及 modules</h2><p>首先，打开你 Finder，按 shift+command+G，打开前往文件夹的窗口，分别输入下列目录进去之后删除 node 和 node_modules 相关的文件和文件夹:</p>\n<p>打开 /usr/local/lib，删除 node 和 node_modules 相关的文件和文件夹<br>打开 /usr/local/include，删除 node 和 node_modules 相关的文件和文件夹<br>如果你是使用的 brew install node 安装的 NodeJS，那么你还需要在终端中执行 brew uninstall node 命令来卸载<br>检查你的个人主文件夹下面的所有的 local、lib 以及 include 文件夹，并且删除所有与 node 和 node_modules 相关的文件以及文件夹<br>打开 /usr/local/bin 并删除 node 可执行文件<br>你可能还需要在你的终端中输入一些额外的指令：</p>\n<pre><code>sudo rm /usr/local/bin/npm\nsudo rm /usr/local/share/man/man1/node.1\nsudo rm /usr/local/lib/dtrace/node.d\nsudo rm -rf ~/.npm\nsudo rm -rf ~/.node-gyp\nsudo rm /opt/local/bin/node\nsudo rm /opt/local/include/node\nsudo rm -rf /opt/local/lib/node_modules\n</code></pre><h2 id=\"开始安装-nvm\"><a href=\"#开始安装-nvm\" class=\"headerlink\" title=\"开始安装 nvm\"></a>开始安装 nvm</h2><p>可以参照 nvm 的官方安装<a href=\"https://github.com/nvm-sh/nvm\" target=\"_blank\" rel=\"noopener\">方法</a>,注意不要使用 homebrew 安装.</p>\n<pre><code>//使用 curl\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash\n//使用Wget\nwget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash\n</code></pre><h2 id=\"配置环境变量\"><a href=\"#配置环境变量\" class=\"headerlink\" title=\"配置环境变量\"></a>配置环境变量</h2><p>安装以后输入<code>nvm</code>发现找不到命令,这个时候需要我们配置环境变量,复制下面的代码到shell 对应的配置文件中.如你使用的 shell 是 zsh,则复制到 <code>~/.zshrc</code>最下面,使用默认的 bash 则复制到 <code>~/.bash_profile</code>最下面,接着 <code>source ~/.zshrc 或者source ~/.bash_profile</code>,或者重启terminal.</p>\n<pre><code>export NVM_DIR=&quot;$HOME/.nvm&quot;\n[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \\. &quot;$NVM_DIR/nvm.sh&quot;  # This loads nvm\n[ -s &quot;$NVM_DIR/bash_completion&quot; ] &amp;&amp; \\. &quot;$NVM_DIR/bash_completion&quot;  # This loads nvm bash_completion\n</code></pre><p>安装完成以后输入 nvm,提示:</p>\n<pre><code>Node Version Manager\n\nUsage:\n    nvm help                    Show this message\n    nvm --version               Print out the latest released version of nvm\n    nvm install [-s] &lt;version&gt;  Download and install a &lt;version&gt;, [-s] from source\n    nvm uninstall &lt;version&gt;     Uninstall a version\n    nvm use &lt;version&gt;           Modify PATH to use &lt;version&gt;\n    nvm run &lt;version&gt; [&lt;args&gt;]  Run &lt;version&gt; with &lt;args&gt; as arguments\n    nvm current                 Display currently activated version\n    nvm ls                      List installed versions\n    nvm ls &lt;version&gt;            List versions matching a given description\n    nvm ls-remote               List remote versions available for install\n    nvm deactivate              Undo effects of NVM on current shell\n    nvm alias [&lt;pattern&gt;]       Show all aliases beginning with &lt;pattern&gt;\n    nvm alias &lt;name&gt; &lt;version&gt;  Set an alias named &lt;name&gt; pointing to &lt;version&gt;\n    nvm unalias &lt;name&gt;          Deletes the alias named &lt;name&gt;\n    nvm copy-packages &lt;version&gt; Install global NPM packages contained in &lt;version&gt; to current version\n\nExample:\n    nvm install v0.10.24        Install a specific version number\n    nvm use 0.10                Use the latest available 0.10.x release\n    nvm run 0.10.24 myApp.js    Run myApp.js using node v0.10.24\n    nvm alias default 0.10.24   Set default node version on a shell\n\nNote:\n    to remove, delete or uninstall nvm - just remove ~/.nvm, ~/.npm and ~/.bower folders\n</code></pre><h2 id=\"常用nvm命令\"><a href=\"#常用nvm命令\" class=\"headerlink\" title=\"常用nvm命令\"></a>常用nvm命令</h2><pre><code>nvm ls-remote //列出所有可安装的版本\n\nnvm install &lt;version&gt; //安装指定的版本，如nvm install v8.14.0\n\n\nnmv install stable //安装最新稳定版\n\nnvm uninstall &lt;version&gt; //卸载指定的版本\n\nnvm ls //列出所有已经安装的版本\n\nnvm use &lt;version&gt; //切换使用指定的版本\n\nnvm current //显示当前使用的版本\n\nnvm alias default &lt;version&gt; //设置默认node版本(常用,避免每次都要设定 node 版本)\n</code></pre><h2 id=\"更换-npm-的源\"><a href=\"#更换-npm-的源\" class=\"headerlink\" title=\"更换 npm 的源\"></a>更换 npm 的源</h2><p>由于某些原因,npm 本身的镜像地址(<a href=\"https://registry.npmjs.org/)下载速度极慢,因此我们可以更换国内淘宝的镜像地址,或者直接使用\" target=\"_blank\" rel=\"noopener\">https://registry.npmjs.org/)下载速度极慢,因此我们可以更换国内淘宝的镜像地址,或者直接使用</a> cnpm.</p>\n<h3 id=\"使用淘宝镜像\"><a href=\"#使用淘宝镜像\" class=\"headerlink\" title=\"使用淘宝镜像\"></a>使用淘宝镜像</h3><p>1.临时使用<br><code>npm --registry https://registry.npm.taobao.org install express</code><br>2.持久使用<br><code>npm config set registry https://registry.npm.taobao.org</code><br>3.通过cnpm<br><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code><br>二、使用官方镜像<br><code>npm config set registry https://registry.npmjs.org/</code><br>三、查看npm源地址<br><code>npm config get registry</code></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>在我们的日常开发中经常会遇到这种情况：手上有好几个项目，每个项目的需求不同，进而不同项目必须依赖不同版的 NodeJS 运行环境。如果没有一个合适的工具，这个问题将非常棘手。nvm 应运而生，nvm 是 Mac 下的 node 管理工具，有点类似管理 Ruby 的 rvm，如果需要管理 Windows 下的 node，官方推荐使用 nvmw 或 nvm-windows。不过，nvm-windows 并不是 nvm 的简单移植，他们也没有任何关系。但下面介绍的所有命令，都可以在 nvm-windows 中运行。</p>\n</blockquote>\n<p>使用 nvm 方面地切换 node 版本,同时在全局安装的时候也不需要加 <code>sudo</code>.</p>\n<h1 id=\"安装过程\"><a href=\"#安装过程\" class=\"headerlink\" title=\"安装过程\"></a>安装过程</h1><h2 id=\"卸载现有的所有-node-以及-modules\"><a href=\"#卸载现有的所有-node-以及-modules\" class=\"headerlink\" title=\"卸载现有的所有 node 以及 modules\"></a>卸载现有的所有 node 以及 modules</h2><p>首先，打开你 Finder，按 shift+command+G，打开前往文件夹的窗口，分别输入下列目录进去之后删除 node 和 node_modules 相关的文件和文件夹:</p>\n<p>打开 /usr/local/lib，删除 node 和 node_modules 相关的文件和文件夹<br>打开 /usr/local/include，删除 node 和 node_modules 相关的文件和文件夹<br>如果你是使用的 brew install node 安装的 NodeJS，那么你还需要在终端中执行 brew uninstall node 命令来卸载<br>检查你的个人主文件夹下面的所有的 local、lib 以及 include 文件夹，并且删除所有与 node 和 node_modules 相关的文件以及文件夹<br>打开 /usr/local/bin 并删除 node 可执行文件<br>你可能还需要在你的终端中输入一些额外的指令：</p>\n<pre><code>sudo rm /usr/local/bin/npm\nsudo rm /usr/local/share/man/man1/node.1\nsudo rm /usr/local/lib/dtrace/node.d\nsudo rm -rf ~/.npm\nsudo rm -rf ~/.node-gyp\nsudo rm /opt/local/bin/node\nsudo rm /opt/local/include/node\nsudo rm -rf /opt/local/lib/node_modules\n</code></pre><h2 id=\"开始安装-nvm\"><a href=\"#开始安装-nvm\" class=\"headerlink\" title=\"开始安装 nvm\"></a>开始安装 nvm</h2><p>可以参照 nvm 的官方安装<a href=\"https://github.com/nvm-sh/nvm\" target=\"_blank\" rel=\"noopener\">方法</a>,注意不要使用 homebrew 安装.</p>\n<pre><code>//使用 curl\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash\n//使用Wget\nwget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash\n</code></pre><h2 id=\"配置环境变量\"><a href=\"#配置环境变量\" class=\"headerlink\" title=\"配置环境变量\"></a>配置环境变量</h2><p>安装以后输入<code>nvm</code>发现找不到命令,这个时候需要我们配置环境变量,复制下面的代码到shell 对应的配置文件中.如你使用的 shell 是 zsh,则复制到 <code>~/.zshrc</code>最下面,使用默认的 bash 则复制到 <code>~/.bash_profile</code>最下面,接着 <code>source ~/.zshrc 或者source ~/.bash_profile</code>,或者重启terminal.</p>\n<pre><code>export NVM_DIR=&quot;$HOME/.nvm&quot;\n[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \\. &quot;$NVM_DIR/nvm.sh&quot;  # This loads nvm\n[ -s &quot;$NVM_DIR/bash_completion&quot; ] &amp;&amp; \\. &quot;$NVM_DIR/bash_completion&quot;  # This loads nvm bash_completion\n</code></pre><p>安装完成以后输入 nvm,提示:</p>\n<pre><code>Node Version Manager\n\nUsage:\n    nvm help                    Show this message\n    nvm --version               Print out the latest released version of nvm\n    nvm install [-s] &lt;version&gt;  Download and install a &lt;version&gt;, [-s] from source\n    nvm uninstall &lt;version&gt;     Uninstall a version\n    nvm use &lt;version&gt;           Modify PATH to use &lt;version&gt;\n    nvm run &lt;version&gt; [&lt;args&gt;]  Run &lt;version&gt; with &lt;args&gt; as arguments\n    nvm current                 Display currently activated version\n    nvm ls                      List installed versions\n    nvm ls &lt;version&gt;            List versions matching a given description\n    nvm ls-remote               List remote versions available for install\n    nvm deactivate              Undo effects of NVM on current shell\n    nvm alias [&lt;pattern&gt;]       Show all aliases beginning with &lt;pattern&gt;\n    nvm alias &lt;name&gt; &lt;version&gt;  Set an alias named &lt;name&gt; pointing to &lt;version&gt;\n    nvm unalias &lt;name&gt;          Deletes the alias named &lt;name&gt;\n    nvm copy-packages &lt;version&gt; Install global NPM packages contained in &lt;version&gt; to current version\n\nExample:\n    nvm install v0.10.24        Install a specific version number\n    nvm use 0.10                Use the latest available 0.10.x release\n    nvm run 0.10.24 myApp.js    Run myApp.js using node v0.10.24\n    nvm alias default 0.10.24   Set default node version on a shell\n\nNote:\n    to remove, delete or uninstall nvm - just remove ~/.nvm, ~/.npm and ~/.bower folders\n</code></pre><h2 id=\"常用nvm命令\"><a href=\"#常用nvm命令\" class=\"headerlink\" title=\"常用nvm命令\"></a>常用nvm命令</h2><pre><code>nvm ls-remote //列出所有可安装的版本\n\nnvm install &lt;version&gt; //安装指定的版本，如nvm install v8.14.0\n\n\nnmv install stable //安装最新稳定版\n\nnvm uninstall &lt;version&gt; //卸载指定的版本\n\nnvm ls //列出所有已经安装的版本\n\nnvm use &lt;version&gt; //切换使用指定的版本\n\nnvm current //显示当前使用的版本\n\nnvm alias default &lt;version&gt; //设置默认node版本(常用,避免每次都要设定 node 版本)\n</code></pre><h2 id=\"更换-npm-的源\"><a href=\"#更换-npm-的源\" class=\"headerlink\" title=\"更换 npm 的源\"></a>更换 npm 的源</h2><p>由于某些原因,npm 本身的镜像地址(<a href=\"https://registry.npmjs.org/)下载速度极慢,因此我们可以更换国内淘宝的镜像地址,或者直接使用\" target=\"_blank\" rel=\"noopener\">https://registry.npmjs.org/)下载速度极慢,因此我们可以更换国内淘宝的镜像地址,或者直接使用</a> cnpm.</p>\n<h3 id=\"使用淘宝镜像\"><a href=\"#使用淘宝镜像\" class=\"headerlink\" title=\"使用淘宝镜像\"></a>使用淘宝镜像</h3><p>1.临时使用<br><code>npm --registry https://registry.npm.taobao.org install express</code><br>2.持久使用<br><code>npm config set registry https://registry.npm.taobao.org</code><br>3.通过cnpm<br><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code><br>二、使用官方镜像<br><code>npm config set registry https://registry.npmjs.org/</code><br>三、查看npm源地址<br><code>npm config get registry</code></p>\n"},{"title":"flux架构的粗浅理解","_content":"\n## Flux 是什么\nFlux 是 Facebook 推出的一种架构思想,专门解决软件的架构问题,和 mvc 类似,但是更加简洁和清晰.\n## 概念\n![flux](https://i.loli.net/2019/09/04/nhCSIQaKdi8JblG.png)\n\nFlux 把一个应用分为四个部分:\n\n* View： 视图层\n* Action（动作）：视图层发出的消息（比如mouseClick）\n* Dispatcher（派发器）：用来接收Actions、执行回调函数\n* Store（数据层）：用来存放应用的状态，一旦发生变动，就提醒Views要更新页面\n\nFlux 最大的特点,就是数据的单向流动性.\n以下是 Flux 运行时的步骤:\n\n* 在 view 层触发 Action\n* Action 被传递到 Dispatcher\n* Dispatcher 要求 store 进行对应的更新\n* store 更新,触发 view 改变,从而更新页面\n\n## 实战\n\n文件目录如下:\n![WX20190904-141112@2x](https://i.loli.net/2019/09/04/FWnPToBe3YqfScs.png)\n\n```jsx\n//Mybutton.js\nimport React, {Component} from 'react'\n\nclass MyButton extends Component {\n\n    render() {\n        let items = this.props.items;\n        return (\n            <div>\n                <ul>\n                    {items.map((result, key) => {\n                        return (\n                            <div key={key}>{result}</div>\n                        )\n                    })}\n                </ul>\n                <button onClick={this.props.onClick}>New Item</button>\n            </div>\n        )\n    }\n}\n\nexport default MyButton\n```\n对 Mybutton.js封装的 MybuttonController.js\n\n```jsx\nimport React, {Component} from 'react'\nimport MyButton from 'app/components/MyButton'\nimport listStore from 'app/stores/listStore'\nimport ButtonActions from 'app/actions/ButtonActions'\n\n//对Action发生器进行初始化，buttonActions能发出不同类型action给Dispatcher\nlet buttonActions = new ButtonActions()\n\nclass MyButtonController extends Component {\n\n    constructor(props) {\n        //把props作为参数传递到super(),这样在constructor里即可访问this.props属性\n        super(props)\n        this.state = {\n            items: []\n        }\n    }\n\n    componentDidMount() {\n        //在组件挂载后绑定组件的私有方法_onChange到Store,之后listStore状态变化即可通知组件调用_onChange方法进行改变\n        listStore.addChangeListener(this._onChange.bind(this))\n    }\n\n    componentWillUnmount() {\n        //在组件移除后解除绑定组件的私有方法_onChange到Store\n        listStore.removeChangeListener(this._onChange.bind(this))\n    }\n\n    //组件响应Store变化的回调函数\n    _onChange() {\n        this.setState({\n            items: listStore.getAll()\n        })\n    }\n\n    render() {\n        return (\n            <MyButton\n                items={this.state.items}\n                onClick={this.createNewItem}\n            />\n        )\n    }\n\n    createNewItem() {\n        //调用Action发生器发出增加Item的Action\n        buttonActions.addNewItem('new item')\n    }\n}\n\nexport default MyButtonController\n```\n\n在我们点击新增按钮后调用createNewItem方法发出一个'ADD_NEW_ITEM'的Action到Dispatcher\n\n接下来我们看看ButtonActions.js\n\n```jsx\nimport AppDispatcher from 'app/dispatcher/AppDispatcher'\n\nclass ButtonActions {\n\n    //发送ADD_NEW_ITEM的Action的方法\n    addNewItem(text) {\n        //调用Dispatcher获取actionType为ADD_NEW_ITEM的Action\n        AppDispatcher.dispatch({\n            actionType: 'ADD_NEW_ITEM',\n            text: text\n        })\n    }\n}\n\nexport default ButtonActions\n```\n\n这里的addNewItem方法发起了一个actionType为ADD_NEW_ITEM的Action到Dispatcher\n\n然后我们再看AppDispatcher.js\n\n```jsx\nimport flux from 'flux'\nimport listStore from 'app/stores/listStore'\n\n//拿到flux模块里的Dispatcher类\nlet Dispatcher = flux.Dispatcher;\n//用Dispatcher类new一个AppDispatcher对象\nlet AppDispatcher = new Dispatcher();\n\n//调用register方法注册接收到各种actionType的Action之后的回调函数\nAppDispatcher.register(function (action) {\n    switch (action.actionType) {\n        case 'ADD_NEW_ITEM':\n            listStore.addNewItemHandler(action.text)\n            listStore.emitChange()\n            break;\n        default:\n    }\n})\n\nexport default AppDispatcher\n\n\n```\n\n最后是ListStore.js\n```jsx\nimport EventEmitter from 'events'\n\nclass ListStore extends EventEmitter {\n\n    constructor() {\n        super()\n        //初始化数据\n        this.items = []\n    }\n    \n    //返回所有数据的方法\n    getAll() {\n        return this.items\n    }\n\n    //增加数据的处理函数\n    addNewItemHandler(text) {\n        this.items.push(text)\n    }\n\n    //提交变化\n    emitChange() {\n        this.emit('change')\n    }\n\n    //监听函数，当有变化时调用注册的回调方法\n    addChangeListener(callback) {\n        this.on('change', callback)\n    }\n\n    //remore监听函数\n    removeChangeListener(callback) {\n        this.removeListener('change', callback)\n    }\n}\n\n//new一个listStore作为单例暴露给其它模块使用\nlet listStore = new ListStore()\n\nexport default listStore\n```\n它负责记录数据和状态并在有变化时改变View","source":"_posts/2019.09.04.flux.md","raw":"---\ntitle: flux架构的粗浅理解\ntags: [JavaScript]\ncategories: 技术\n---\n\n## Flux 是什么\nFlux 是 Facebook 推出的一种架构思想,专门解决软件的架构问题,和 mvc 类似,但是更加简洁和清晰.\n## 概念\n![flux](https://i.loli.net/2019/09/04/nhCSIQaKdi8JblG.png)\n\nFlux 把一个应用分为四个部分:\n\n* View： 视图层\n* Action（动作）：视图层发出的消息（比如mouseClick）\n* Dispatcher（派发器）：用来接收Actions、执行回调函数\n* Store（数据层）：用来存放应用的状态，一旦发生变动，就提醒Views要更新页面\n\nFlux 最大的特点,就是数据的单向流动性.\n以下是 Flux 运行时的步骤:\n\n* 在 view 层触发 Action\n* Action 被传递到 Dispatcher\n* Dispatcher 要求 store 进行对应的更新\n* store 更新,触发 view 改变,从而更新页面\n\n## 实战\n\n文件目录如下:\n![WX20190904-141112@2x](https://i.loli.net/2019/09/04/FWnPToBe3YqfScs.png)\n\n```jsx\n//Mybutton.js\nimport React, {Component} from 'react'\n\nclass MyButton extends Component {\n\n    render() {\n        let items = this.props.items;\n        return (\n            <div>\n                <ul>\n                    {items.map((result, key) => {\n                        return (\n                            <div key={key}>{result}</div>\n                        )\n                    })}\n                </ul>\n                <button onClick={this.props.onClick}>New Item</button>\n            </div>\n        )\n    }\n}\n\nexport default MyButton\n```\n对 Mybutton.js封装的 MybuttonController.js\n\n```jsx\nimport React, {Component} from 'react'\nimport MyButton from 'app/components/MyButton'\nimport listStore from 'app/stores/listStore'\nimport ButtonActions from 'app/actions/ButtonActions'\n\n//对Action发生器进行初始化，buttonActions能发出不同类型action给Dispatcher\nlet buttonActions = new ButtonActions()\n\nclass MyButtonController extends Component {\n\n    constructor(props) {\n        //把props作为参数传递到super(),这样在constructor里即可访问this.props属性\n        super(props)\n        this.state = {\n            items: []\n        }\n    }\n\n    componentDidMount() {\n        //在组件挂载后绑定组件的私有方法_onChange到Store,之后listStore状态变化即可通知组件调用_onChange方法进行改变\n        listStore.addChangeListener(this._onChange.bind(this))\n    }\n\n    componentWillUnmount() {\n        //在组件移除后解除绑定组件的私有方法_onChange到Store\n        listStore.removeChangeListener(this._onChange.bind(this))\n    }\n\n    //组件响应Store变化的回调函数\n    _onChange() {\n        this.setState({\n            items: listStore.getAll()\n        })\n    }\n\n    render() {\n        return (\n            <MyButton\n                items={this.state.items}\n                onClick={this.createNewItem}\n            />\n        )\n    }\n\n    createNewItem() {\n        //调用Action发生器发出增加Item的Action\n        buttonActions.addNewItem('new item')\n    }\n}\n\nexport default MyButtonController\n```\n\n在我们点击新增按钮后调用createNewItem方法发出一个'ADD_NEW_ITEM'的Action到Dispatcher\n\n接下来我们看看ButtonActions.js\n\n```jsx\nimport AppDispatcher from 'app/dispatcher/AppDispatcher'\n\nclass ButtonActions {\n\n    //发送ADD_NEW_ITEM的Action的方法\n    addNewItem(text) {\n        //调用Dispatcher获取actionType为ADD_NEW_ITEM的Action\n        AppDispatcher.dispatch({\n            actionType: 'ADD_NEW_ITEM',\n            text: text\n        })\n    }\n}\n\nexport default ButtonActions\n```\n\n这里的addNewItem方法发起了一个actionType为ADD_NEW_ITEM的Action到Dispatcher\n\n然后我们再看AppDispatcher.js\n\n```jsx\nimport flux from 'flux'\nimport listStore from 'app/stores/listStore'\n\n//拿到flux模块里的Dispatcher类\nlet Dispatcher = flux.Dispatcher;\n//用Dispatcher类new一个AppDispatcher对象\nlet AppDispatcher = new Dispatcher();\n\n//调用register方法注册接收到各种actionType的Action之后的回调函数\nAppDispatcher.register(function (action) {\n    switch (action.actionType) {\n        case 'ADD_NEW_ITEM':\n            listStore.addNewItemHandler(action.text)\n            listStore.emitChange()\n            break;\n        default:\n    }\n})\n\nexport default AppDispatcher\n\n\n```\n\n最后是ListStore.js\n```jsx\nimport EventEmitter from 'events'\n\nclass ListStore extends EventEmitter {\n\n    constructor() {\n        super()\n        //初始化数据\n        this.items = []\n    }\n    \n    //返回所有数据的方法\n    getAll() {\n        return this.items\n    }\n\n    //增加数据的处理函数\n    addNewItemHandler(text) {\n        this.items.push(text)\n    }\n\n    //提交变化\n    emitChange() {\n        this.emit('change')\n    }\n\n    //监听函数，当有变化时调用注册的回调方法\n    addChangeListener(callback) {\n        this.on('change', callback)\n    }\n\n    //remore监听函数\n    removeChangeListener(callback) {\n        this.removeListener('change', callback)\n    }\n}\n\n//new一个listStore作为单例暴露给其它模块使用\nlet listStore = new ListStore()\n\nexport default listStore\n```\n它负责记录数据和状态并在有变化时改变View","slug":"2019.09.04.flux","published":1,"date":"2019-09-04T05:51:40.896Z","updated":"2019-09-04T06:28:55.230Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziiqd001hrh9zdjpw49lp","content":"<h2 id=\"Flux-是什么\"><a href=\"#Flux-是什么\" class=\"headerlink\" title=\"Flux 是什么\"></a>Flux 是什么</h2><p>Flux 是 Facebook 推出的一种架构思想,专门解决软件的架构问题,和 mvc 类似,但是更加简洁和清晰.</p>\n<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p><img src=\"https://i.loli.net/2019/09/04/nhCSIQaKdi8JblG.png\" alt=\"flux\"></p>\n<p>Flux 把一个应用分为四个部分:</p>\n<ul>\n<li>View： 视图层</li>\n<li>Action（动作）：视图层发出的消息（比如mouseClick）</li>\n<li>Dispatcher（派发器）：用来接收Actions、执行回调函数</li>\n<li>Store（数据层）：用来存放应用的状态，一旦发生变动，就提醒Views要更新页面</li>\n</ul>\n<p>Flux 最大的特点,就是数据的单向流动性.<br>以下是 Flux 运行时的步骤:</p>\n<ul>\n<li>在 view 层触发 Action</li>\n<li>Action 被传递到 Dispatcher</li>\n<li>Dispatcher 要求 store 进行对应的更新</li>\n<li>store 更新,触发 view 改变,从而更新页面</li>\n</ul>\n<h2 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h2><p>文件目录如下:<br><img src=\"https://i.loli.net/2019/09/04/FWnPToBe3YqfScs.png\" alt=\"WX20190904-141112@2x\"></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Mybutton.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React, &#123;Component&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyButton</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> items = <span class=\"keyword\">this</span>.props.items;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\">                &lt;ul&gt;</span><br><span class=\"line\">                    &#123;items.map(<span class=\"function\">(<span class=\"params\">result, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">                            &lt;div key=&#123;key&#125;&gt;&#123;result&#125;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                        )</span></span><br><span class=\"line\"><span class=\"regexp\">                    &#125;)&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">                &lt;/u</span>l&gt;</span><br><span class=\"line\">                &lt;button onClick=&#123;<span class=\"keyword\">this</span>.props.onClick&#125;&gt;New Item&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;/</span>div&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> MyButton</span><br></pre></td></tr></table></figure>\n<p>对 Mybutton.js封装的 MybuttonController.js</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123;Component&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> MyButton <span class=\"keyword\">from</span> <span class=\"string\">'app/components/MyButton'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> listStore <span class=\"keyword\">from</span> <span class=\"string\">'app/stores/listStore'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> ButtonActions <span class=\"keyword\">from</span> <span class=\"string\">'app/actions/ButtonActions'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//对Action发生器进行初始化，buttonActions能发出不同类型action给Dispatcher</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> buttonActions = <span class=\"keyword\">new</span> ButtonActions()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyButtonController</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//把props作为参数传递到super(),这样在constructor里即可访问this.props属性</span></span><br><span class=\"line\">        <span class=\"keyword\">super</span>(props)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = &#123;</span><br><span class=\"line\">            items: []</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    componentDidMount() &#123;</span><br><span class=\"line\">        <span class=\"comment\">//在组件挂载后绑定组件的私有方法_onChange到Store,之后listStore状态变化即可通知组件调用_onChange方法进行改变</span></span><br><span class=\"line\">        listStore.addChangeListener(<span class=\"keyword\">this</span>._onChange.bind(<span class=\"keyword\">this</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    componentWillUnmount() &#123;</span><br><span class=\"line\">        <span class=\"comment\">//在组件移除后解除绑定组件的私有方法_onChange到Store</span></span><br><span class=\"line\">        listStore.removeChangeListener(<span class=\"keyword\">this</span>._onChange.bind(<span class=\"keyword\">this</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//组件响应Store变化的回调函数</span></span><br><span class=\"line\">    _onChange() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">            items: listStore.getAll()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            &lt;MyButton</span><br><span class=\"line\">                items=&#123;<span class=\"keyword\">this</span>.state.items&#125;</span><br><span class=\"line\">                onClick=&#123;<span class=\"keyword\">this</span>.createNewItem&#125;</span><br><span class=\"line\">            /&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    createNewItem() &#123;</span><br><span class=\"line\">        <span class=\"comment\">//调用Action发生器发出增加Item的Action</span></span><br><span class=\"line\">        buttonActions.addNewItem(<span class=\"string\">'new item'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> MyButtonController</span><br></pre></td></tr></table></figure>\n<p>在我们点击新增按钮后调用createNewItem方法发出一个’ADD_NEW_ITEM’的Action到Dispatcher</p>\n<p>接下来我们看看ButtonActions.js</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> AppDispatcher <span class=\"keyword\">from</span> <span class=\"string\">'app/dispatcher/AppDispatcher'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ButtonActions</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//发送ADD_NEW_ITEM的Action的方法</span></span><br><span class=\"line\">    addNewItem(text) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//调用Dispatcher获取actionType为ADD_NEW_ITEM的Action</span></span><br><span class=\"line\">        AppDispatcher.dispatch(&#123;</span><br><span class=\"line\">            actionType: <span class=\"string\">'ADD_NEW_ITEM'</span>,</span><br><span class=\"line\">            text: text</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> ButtonActions</span><br></pre></td></tr></table></figure>\n<p>这里的addNewItem方法发起了一个actionType为ADD_NEW_ITEM的Action到Dispatcher</p>\n<p>然后我们再看AppDispatcher.js</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> flux <span class=\"keyword\">from</span> <span class=\"string\">'flux'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> listStore <span class=\"keyword\">from</span> <span class=\"string\">'app/stores/listStore'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//拿到flux模块里的Dispatcher类</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> Dispatcher = flux.Dispatcher;</span><br><span class=\"line\"><span class=\"comment\">//用Dispatcher类new一个AppDispatcher对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> AppDispatcher = <span class=\"keyword\">new</span> Dispatcher();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//调用register方法注册接收到各种actionType的Action之后的回调函数</span></span><br><span class=\"line\">AppDispatcher.register(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">action</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (action.actionType) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'ADD_NEW_ITEM'</span>:</span><br><span class=\"line\">            listStore.addNewItemHandler(action.text)</span><br><span class=\"line\">            listStore.emitChange()</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> AppDispatcher</span><br></pre></td></tr></table></figure>\n<p>最后是ListStore.js<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> EventEmitter <span class=\"keyword\">from</span> <span class=\"string\">'events'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListStore</span> <span class=\"keyword\">extends</span> <span class=\"title\">EventEmitter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>()</span><br><span class=\"line\">        <span class=\"comment\">//初始化数据</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.items = []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//返回所有数据的方法</span></span><br><span class=\"line\">    getAll() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.items</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//增加数据的处理函数</span></span><br><span class=\"line\">    addNewItemHandler(text) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.items.push(text)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//提交变化</span></span><br><span class=\"line\">    emitChange() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.emit(<span class=\"string\">'change'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//监听函数，当有变化时调用注册的回调方法</span></span><br><span class=\"line\">    addChangeListener(callback) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.on(<span class=\"string\">'change'</span>, callback)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//remore监听函数</span></span><br><span class=\"line\">    removeChangeListener(callback) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.removeListener(<span class=\"string\">'change'</span>, callback)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//new一个listStore作为单例暴露给其它模块使用</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> listStore = <span class=\"keyword\">new</span> ListStore()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> listStore</span><br></pre></td></tr></table></figure><br>它负责记录数据和状态并在有变化时改变View</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Flux-是什么\"><a href=\"#Flux-是什么\" class=\"headerlink\" title=\"Flux 是什么\"></a>Flux 是什么</h2><p>Flux 是 Facebook 推出的一种架构思想,专门解决软件的架构问题,和 mvc 类似,但是更加简洁和清晰.</p>\n<h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p><img src=\"https://i.loli.net/2019/09/04/nhCSIQaKdi8JblG.png\" alt=\"flux\"></p>\n<p>Flux 把一个应用分为四个部分:</p>\n<ul>\n<li>View： 视图层</li>\n<li>Action（动作）：视图层发出的消息（比如mouseClick）</li>\n<li>Dispatcher（派发器）：用来接收Actions、执行回调函数</li>\n<li>Store（数据层）：用来存放应用的状态，一旦发生变动，就提醒Views要更新页面</li>\n</ul>\n<p>Flux 最大的特点,就是数据的单向流动性.<br>以下是 Flux 运行时的步骤:</p>\n<ul>\n<li>在 view 层触发 Action</li>\n<li>Action 被传递到 Dispatcher</li>\n<li>Dispatcher 要求 store 进行对应的更新</li>\n<li>store 更新,触发 view 改变,从而更新页面</li>\n</ul>\n<h2 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h2><p>文件目录如下:<br><img src=\"https://i.loli.net/2019/09/04/FWnPToBe3YqfScs.png\" alt=\"WX20190904-141112@2x\"></p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Mybutton.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React, &#123;Component&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyButton</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> items = <span class=\"keyword\">this</span>.props.items;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            &lt;div&gt;</span><br><span class=\"line\">                &lt;ul&gt;</span><br><span class=\"line\">                    &#123;items.map(<span class=\"function\">(<span class=\"params\">result, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">                            &lt;div key=&#123;key&#125;&gt;&#123;result&#125;&lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">                        )</span></span><br><span class=\"line\"><span class=\"regexp\">                    &#125;)&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">                &lt;/u</span>l&gt;</span><br><span class=\"line\">                &lt;button onClick=&#123;<span class=\"keyword\">this</span>.props.onClick&#125;&gt;New Item&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">            &lt;/</span>div&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> MyButton</span><br></pre></td></tr></table></figure>\n<p>对 Mybutton.js封装的 MybuttonController.js</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123;Component&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> MyButton <span class=\"keyword\">from</span> <span class=\"string\">'app/components/MyButton'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> listStore <span class=\"keyword\">from</span> <span class=\"string\">'app/stores/listStore'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> ButtonActions <span class=\"keyword\">from</span> <span class=\"string\">'app/actions/ButtonActions'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//对Action发生器进行初始化，buttonActions能发出不同类型action给Dispatcher</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> buttonActions = <span class=\"keyword\">new</span> ButtonActions()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyButtonController</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(props) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//把props作为参数传递到super(),这样在constructor里即可访问this.props属性</span></span><br><span class=\"line\">        <span class=\"keyword\">super</span>(props)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.state = &#123;</span><br><span class=\"line\">            items: []</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    componentDidMount() &#123;</span><br><span class=\"line\">        <span class=\"comment\">//在组件挂载后绑定组件的私有方法_onChange到Store,之后listStore状态变化即可通知组件调用_onChange方法进行改变</span></span><br><span class=\"line\">        listStore.addChangeListener(<span class=\"keyword\">this</span>._onChange.bind(<span class=\"keyword\">this</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    componentWillUnmount() &#123;</span><br><span class=\"line\">        <span class=\"comment\">//在组件移除后解除绑定组件的私有方法_onChange到Store</span></span><br><span class=\"line\">        listStore.removeChangeListener(<span class=\"keyword\">this</span>._onChange.bind(<span class=\"keyword\">this</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//组件响应Store变化的回调函数</span></span><br><span class=\"line\">    _onChange() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setState(&#123;</span><br><span class=\"line\">            items: listStore.getAll()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            &lt;MyButton</span><br><span class=\"line\">                items=&#123;<span class=\"keyword\">this</span>.state.items&#125;</span><br><span class=\"line\">                onClick=&#123;<span class=\"keyword\">this</span>.createNewItem&#125;</span><br><span class=\"line\">            /&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    createNewItem() &#123;</span><br><span class=\"line\">        <span class=\"comment\">//调用Action发生器发出增加Item的Action</span></span><br><span class=\"line\">        buttonActions.addNewItem(<span class=\"string\">'new item'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> MyButtonController</span><br></pre></td></tr></table></figure>\n<p>在我们点击新增按钮后调用createNewItem方法发出一个’ADD_NEW_ITEM’的Action到Dispatcher</p>\n<p>接下来我们看看ButtonActions.js</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> AppDispatcher <span class=\"keyword\">from</span> <span class=\"string\">'app/dispatcher/AppDispatcher'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ButtonActions</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//发送ADD_NEW_ITEM的Action的方法</span></span><br><span class=\"line\">    addNewItem(text) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//调用Dispatcher获取actionType为ADD_NEW_ITEM的Action</span></span><br><span class=\"line\">        AppDispatcher.dispatch(&#123;</span><br><span class=\"line\">            actionType: <span class=\"string\">'ADD_NEW_ITEM'</span>,</span><br><span class=\"line\">            text: text</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> ButtonActions</span><br></pre></td></tr></table></figure>\n<p>这里的addNewItem方法发起了一个actionType为ADD_NEW_ITEM的Action到Dispatcher</p>\n<p>然后我们再看AppDispatcher.js</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> flux <span class=\"keyword\">from</span> <span class=\"string\">'flux'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> listStore <span class=\"keyword\">from</span> <span class=\"string\">'app/stores/listStore'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//拿到flux模块里的Dispatcher类</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> Dispatcher = flux.Dispatcher;</span><br><span class=\"line\"><span class=\"comment\">//用Dispatcher类new一个AppDispatcher对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> AppDispatcher = <span class=\"keyword\">new</span> Dispatcher();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//调用register方法注册接收到各种actionType的Action之后的回调函数</span></span><br><span class=\"line\">AppDispatcher.register(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">action</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (action.actionType) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">'ADD_NEW_ITEM'</span>:</span><br><span class=\"line\">            listStore.addNewItemHandler(action.text)</span><br><span class=\"line\">            listStore.emitChange()</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> AppDispatcher</span><br></pre></td></tr></table></figure>\n<p>最后是ListStore.js<br><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> EventEmitter <span class=\"keyword\">from</span> <span class=\"string\">'events'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListStore</span> <span class=\"keyword\">extends</span> <span class=\"title\">EventEmitter</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>()</span><br><span class=\"line\">        <span class=\"comment\">//初始化数据</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.items = []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//返回所有数据的方法</span></span><br><span class=\"line\">    getAll() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.items</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//增加数据的处理函数</span></span><br><span class=\"line\">    addNewItemHandler(text) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.items.push(text)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//提交变化</span></span><br><span class=\"line\">    emitChange() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.emit(<span class=\"string\">'change'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//监听函数，当有变化时调用注册的回调方法</span></span><br><span class=\"line\">    addChangeListener(callback) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.on(<span class=\"string\">'change'</span>, callback)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//remore监听函数</span></span><br><span class=\"line\">    removeChangeListener(callback) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.removeListener(<span class=\"string\">'change'</span>, callback)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//new一个listStore作为单例暴露给其它模块使用</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> listStore = <span class=\"keyword\">new</span> ListStore()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> listStore</span><br></pre></td></tr></table></figure><br>它负责记录数据和状态并在有变化时改变View</p>\n"},{"title":"熟悉ipv6","_content":"\n## 什么是 IPV6\n\nIPv6 是 Internet Protocol Version 6 的缩写，其中 Internet Protocol 译为“互联网协议”.IPv6 是用于替代现行版本 IP 协议(IPv4)的下一代 IP 协议，号称可以为全世界的每一粒沙子编上一个网址.\nIPv6 地址大小为 128 位。首选 IPv6 地址表示法为 `x:x:x:x:x:x:x:x`，其中每个 x 是地址的 8 个 16 位部分的十六进制值.IPv6 地址范围从 `0000:0000:0000:0000:0000:0000:0000:0000`至 `ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff`.\n\nIPv6 能够提供的地址数为：2^128-1 个（大约 340 万亿个）.\n\n## ipv6 的好处\n\n- 1、拥有使用不完的 ip 地址数量\n- 2、多等级层次有助于路由聚合，提供了路由的效率和可扩展性\n- 3、能够更有效的处理移动性和安全机制\n- 4、会让智能家居和物联网迎来最好的时代\n  ![未命名](https://i.loli.net/2019/09/05/OLGgXCsnoQWNt8z.png)\n\n## ipv6 表示法\n\nIPV6 地址的表示采用 16 进制的表示方法。将 128bit 分为 8 组，每组 16 比特，用 4 个 16 进制数表示，各组之间用\"：\"隔开，每组中最前面的 0 可以省略，但每组必须得有一个数。\n\n### 冒分十六进制表示法\n\n格式为 X:X:X:X:X:X:X:X，其中每个 X 代表 16 个 bit，以十六进制显示，如下面这些：\n\n        ABCD:EF01:2345:6789:ABCD:EF01:2345:6789\n\n        FEDC:BA98:7654:3210:FEDC:BA98:7654:3210\n\n        1080:0:0:0:8:800:200C:417A\n### 省略先导 0\n通过省略前导零指定 IPv6 地址。例如，IPv6 地址 1050:0000:0000:0000:0005:0600:300c:326b 可写作 1050:0:0:0:5:600:300c:326b。\n### 双冒号\n通过使用双冒号（::）替换一系列零来指定 IPv6 地址。例如，IPv6 地址 ff06:0:0:0:0:0:0:c3 可写作 ff06::c3。一个 IP 地址中只可使用一次双冒号。\n\n    1080:0:0:0:8:800:200C:417A =1080::8:800:200C:417A\n    FF01:0:0:0:0:0:0:101=FF01::101\n\n    FF01:0:0:0:0:0:0:1101 = FF01::1101\n\n    0:0:0:0:0:0:0:1 = ::1\n    0:0:0:0:0:0:0:0 = ::\n\n### 内嵌 ipv4\n\n为了实现 IPv4-IPv6 互通，IPv4 地址会嵌入 IPv6 地址中，此时地址常表示为：`X:X:X:X:X:X:d.d.d.d`，\n也就是前 6 组用冒分十六进制表示，后二组用十进制表示，而最后 32bit 地址则使用 IPv4 的点分十进制表示，例如`::192.168.0.1`与就是一个典型的例子 。\n\n## ipv4 转 ipv6\n\n### 非标准转换\n\n只需要在 ip 地址前面 6 组共 96 位补充 0 即可，即\n\n0000:0000:0000:0000:0000:0000:135.75.43.52\n\n也就是::135.75.43.52（内嵌 IPv4 表示法）\n\n### 标准转换\n\n135.75.43.52 按十六进制算出即 87.4B.2B.34，\n\n而 87.4B.2B.34 串地址一组还是 8 位，所以需要两组 v4 地址合成 v6 地址，\n\n再把前 96 位补零，它可以被转化为\n\n0000:0000:0000:0000:0000:0000:874B:2B34 或者::874B:2B34。\n","source":"_posts/2019.09.05.ipv6.md","raw":"---\ntitle: 熟悉ipv6\ntags: [网络]\ncategories: 随笔\n---\n\n## 什么是 IPV6\n\nIPv6 是 Internet Protocol Version 6 的缩写，其中 Internet Protocol 译为“互联网协议”.IPv6 是用于替代现行版本 IP 协议(IPv4)的下一代 IP 协议，号称可以为全世界的每一粒沙子编上一个网址.\nIPv6 地址大小为 128 位。首选 IPv6 地址表示法为 `x:x:x:x:x:x:x:x`，其中每个 x 是地址的 8 个 16 位部分的十六进制值.IPv6 地址范围从 `0000:0000:0000:0000:0000:0000:0000:0000`至 `ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff`.\n\nIPv6 能够提供的地址数为：2^128-1 个（大约 340 万亿个）.\n\n## ipv6 的好处\n\n- 1、拥有使用不完的 ip 地址数量\n- 2、多等级层次有助于路由聚合，提供了路由的效率和可扩展性\n- 3、能够更有效的处理移动性和安全机制\n- 4、会让智能家居和物联网迎来最好的时代\n  ![未命名](https://i.loli.net/2019/09/05/OLGgXCsnoQWNt8z.png)\n\n## ipv6 表示法\n\nIPV6 地址的表示采用 16 进制的表示方法。将 128bit 分为 8 组，每组 16 比特，用 4 个 16 进制数表示，各组之间用\"：\"隔开，每组中最前面的 0 可以省略，但每组必须得有一个数。\n\n### 冒分十六进制表示法\n\n格式为 X:X:X:X:X:X:X:X，其中每个 X 代表 16 个 bit，以十六进制显示，如下面这些：\n\n        ABCD:EF01:2345:6789:ABCD:EF01:2345:6789\n\n        FEDC:BA98:7654:3210:FEDC:BA98:7654:3210\n\n        1080:0:0:0:8:800:200C:417A\n### 省略先导 0\n通过省略前导零指定 IPv6 地址。例如，IPv6 地址 1050:0000:0000:0000:0005:0600:300c:326b 可写作 1050:0:0:0:5:600:300c:326b。\n### 双冒号\n通过使用双冒号（::）替换一系列零来指定 IPv6 地址。例如，IPv6 地址 ff06:0:0:0:0:0:0:c3 可写作 ff06::c3。一个 IP 地址中只可使用一次双冒号。\n\n    1080:0:0:0:8:800:200C:417A =1080::8:800:200C:417A\n    FF01:0:0:0:0:0:0:101=FF01::101\n\n    FF01:0:0:0:0:0:0:1101 = FF01::1101\n\n    0:0:0:0:0:0:0:1 = ::1\n    0:0:0:0:0:0:0:0 = ::\n\n### 内嵌 ipv4\n\n为了实现 IPv4-IPv6 互通，IPv4 地址会嵌入 IPv6 地址中，此时地址常表示为：`X:X:X:X:X:X:d.d.d.d`，\n也就是前 6 组用冒分十六进制表示，后二组用十进制表示，而最后 32bit 地址则使用 IPv4 的点分十进制表示，例如`::192.168.0.1`与就是一个典型的例子 。\n\n## ipv4 转 ipv6\n\n### 非标准转换\n\n只需要在 ip 地址前面 6 组共 96 位补充 0 即可，即\n\n0000:0000:0000:0000:0000:0000:135.75.43.52\n\n也就是::135.75.43.52（内嵌 IPv4 表示法）\n\n### 标准转换\n\n135.75.43.52 按十六进制算出即 87.4B.2B.34，\n\n而 87.4B.2B.34 串地址一组还是 8 位，所以需要两组 v4 地址合成 v6 地址，\n\n再把前 96 位补零，它可以被转化为\n\n0000:0000:0000:0000:0000:0000:874B:2B34 或者::874B:2B34。\n","slug":"2019.09.05.ipv6","published":1,"date":"2019-09-05T03:08:12.704Z","updated":"2019-09-05T03:33:32.149Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziiqd001irh9z63ne7h7q","content":"<h2 id=\"什么是-IPV6\"><a href=\"#什么是-IPV6\" class=\"headerlink\" title=\"什么是 IPV6\"></a>什么是 IPV6</h2><p>IPv6 是 Internet Protocol Version 6 的缩写，其中 Internet Protocol 译为“互联网协议”.IPv6 是用于替代现行版本 IP 协议(IPv4)的下一代 IP 协议，号称可以为全世界的每一粒沙子编上一个网址.<br>IPv6 地址大小为 128 位。首选 IPv6 地址表示法为 <code>x:x:x:x:x:x:x:x</code>，其中每个 x 是地址的 8 个 16 位部分的十六进制值.IPv6 地址范围从 <code>0000:0000:0000:0000:0000:0000:0000:0000</code>至 <code>ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff</code>.</p>\n<p>IPv6 能够提供的地址数为：2^128-1 个（大约 340 万亿个）.</p>\n<h2 id=\"ipv6-的好处\"><a href=\"#ipv6-的好处\" class=\"headerlink\" title=\"ipv6 的好处\"></a>ipv6 的好处</h2><ul>\n<li>1、拥有使用不完的 ip 地址数量</li>\n<li>2、多等级层次有助于路由聚合，提供了路由的效率和可扩展性</li>\n<li>3、能够更有效的处理移动性和安全机制</li>\n<li>4、会让智能家居和物联网迎来最好的时代<br><img src=\"https://i.loli.net/2019/09/05/OLGgXCsnoQWNt8z.png\" alt=\"未命名\"></li>\n</ul>\n<h2 id=\"ipv6-表示法\"><a href=\"#ipv6-表示法\" class=\"headerlink\" title=\"ipv6 表示法\"></a>ipv6 表示法</h2><p>IPV6 地址的表示采用 16 进制的表示方法。将 128bit 分为 8 组，每组 16 比特，用 4 个 16 进制数表示，各组之间用”：”隔开，每组中最前面的 0 可以省略，但每组必须得有一个数。</p>\n<h3 id=\"冒分十六进制表示法\"><a href=\"#冒分十六进制表示法\" class=\"headerlink\" title=\"冒分十六进制表示法\"></a>冒分十六进制表示法</h3><p>格式为 X:X:X:X:X:X:X:X，其中每个 X 代表 16 个 bit，以十六进制显示，如下面这些：</p>\n<pre><code>ABCD:EF01:2345:6789:ABCD:EF01:2345:6789\n\nFEDC:BA98:7654:3210:FEDC:BA98:7654:3210\n\n1080:0:0:0:8:800:200C:417A\n</code></pre><h3 id=\"省略先导-0\"><a href=\"#省略先导-0\" class=\"headerlink\" title=\"省略先导 0\"></a>省略先导 0</h3><p>通过省略前导零指定 IPv6 地址。例如，IPv6 地址 1050:0000:0000:0000:0005:0600:300c:326b 可写作 1050:0:0:0:5:600:300c:326b。</p>\n<h3 id=\"双冒号\"><a href=\"#双冒号\" class=\"headerlink\" title=\"双冒号\"></a>双冒号</h3><p>通过使用双冒号（::）替换一系列零来指定 IPv6 地址。例如，IPv6 地址 ff06:0:0:0:0:0:0:c3 可写作 ff06::c3。一个 IP 地址中只可使用一次双冒号。</p>\n<pre><code>1080:0:0:0:8:800:200C:417A =1080::8:800:200C:417A\nFF01:0:0:0:0:0:0:101=FF01::101\n\nFF01:0:0:0:0:0:0:1101 = FF01::1101\n\n0:0:0:0:0:0:0:1 = ::1\n0:0:0:0:0:0:0:0 = ::\n</code></pre><h3 id=\"内嵌-ipv4\"><a href=\"#内嵌-ipv4\" class=\"headerlink\" title=\"内嵌 ipv4\"></a>内嵌 ipv4</h3><p>为了实现 IPv4-IPv6 互通，IPv4 地址会嵌入 IPv6 地址中，此时地址常表示为：<code>X:X:X:X:X:X:d.d.d.d</code>，<br>也就是前 6 组用冒分十六进制表示，后二组用十进制表示，而最后 32bit 地址则使用 IPv4 的点分十进制表示，例如<code>::192.168.0.1</code>与就是一个典型的例子 。</p>\n<h2 id=\"ipv4-转-ipv6\"><a href=\"#ipv4-转-ipv6\" class=\"headerlink\" title=\"ipv4 转 ipv6\"></a>ipv4 转 ipv6</h2><h3 id=\"非标准转换\"><a href=\"#非标准转换\" class=\"headerlink\" title=\"非标准转换\"></a>非标准转换</h3><p>只需要在 ip 地址前面 6 组共 96 位补充 0 即可，即</p>\n<p>0000:0000:0000:0000:0000:0000:135.75.43.52</p>\n<p>也就是::135.75.43.52（内嵌 IPv4 表示法）</p>\n<h3 id=\"标准转换\"><a href=\"#标准转换\" class=\"headerlink\" title=\"标准转换\"></a>标准转换</h3><p>135.75.43.52 按十六进制算出即 87.4B.2B.34，</p>\n<p>而 87.4B.2B.34 串地址一组还是 8 位，所以需要两组 v4 地址合成 v6 地址，</p>\n<p>再把前 96 位补零，它可以被转化为</p>\n<p>0000:0000:0000:0000:0000:0000:874B:2B34 或者::874B:2B34。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是-IPV6\"><a href=\"#什么是-IPV6\" class=\"headerlink\" title=\"什么是 IPV6\"></a>什么是 IPV6</h2><p>IPv6 是 Internet Protocol Version 6 的缩写，其中 Internet Protocol 译为“互联网协议”.IPv6 是用于替代现行版本 IP 协议(IPv4)的下一代 IP 协议，号称可以为全世界的每一粒沙子编上一个网址.<br>IPv6 地址大小为 128 位。首选 IPv6 地址表示法为 <code>x:x:x:x:x:x:x:x</code>，其中每个 x 是地址的 8 个 16 位部分的十六进制值.IPv6 地址范围从 <code>0000:0000:0000:0000:0000:0000:0000:0000</code>至 <code>ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff</code>.</p>\n<p>IPv6 能够提供的地址数为：2^128-1 个（大约 340 万亿个）.</p>\n<h2 id=\"ipv6-的好处\"><a href=\"#ipv6-的好处\" class=\"headerlink\" title=\"ipv6 的好处\"></a>ipv6 的好处</h2><ul>\n<li>1、拥有使用不完的 ip 地址数量</li>\n<li>2、多等级层次有助于路由聚合，提供了路由的效率和可扩展性</li>\n<li>3、能够更有效的处理移动性和安全机制</li>\n<li>4、会让智能家居和物联网迎来最好的时代<br><img src=\"https://i.loli.net/2019/09/05/OLGgXCsnoQWNt8z.png\" alt=\"未命名\"></li>\n</ul>\n<h2 id=\"ipv6-表示法\"><a href=\"#ipv6-表示法\" class=\"headerlink\" title=\"ipv6 表示法\"></a>ipv6 表示法</h2><p>IPV6 地址的表示采用 16 进制的表示方法。将 128bit 分为 8 组，每组 16 比特，用 4 个 16 进制数表示，各组之间用”：”隔开，每组中最前面的 0 可以省略，但每组必须得有一个数。</p>\n<h3 id=\"冒分十六进制表示法\"><a href=\"#冒分十六进制表示法\" class=\"headerlink\" title=\"冒分十六进制表示法\"></a>冒分十六进制表示法</h3><p>格式为 X:X:X:X:X:X:X:X，其中每个 X 代表 16 个 bit，以十六进制显示，如下面这些：</p>\n<pre><code>ABCD:EF01:2345:6789:ABCD:EF01:2345:6789\n\nFEDC:BA98:7654:3210:FEDC:BA98:7654:3210\n\n1080:0:0:0:8:800:200C:417A\n</code></pre><h3 id=\"省略先导-0\"><a href=\"#省略先导-0\" class=\"headerlink\" title=\"省略先导 0\"></a>省略先导 0</h3><p>通过省略前导零指定 IPv6 地址。例如，IPv6 地址 1050:0000:0000:0000:0005:0600:300c:326b 可写作 1050:0:0:0:5:600:300c:326b。</p>\n<h3 id=\"双冒号\"><a href=\"#双冒号\" class=\"headerlink\" title=\"双冒号\"></a>双冒号</h3><p>通过使用双冒号（::）替换一系列零来指定 IPv6 地址。例如，IPv6 地址 ff06:0:0:0:0:0:0:c3 可写作 ff06::c3。一个 IP 地址中只可使用一次双冒号。</p>\n<pre><code>1080:0:0:0:8:800:200C:417A =1080::8:800:200C:417A\nFF01:0:0:0:0:0:0:101=FF01::101\n\nFF01:0:0:0:0:0:0:1101 = FF01::1101\n\n0:0:0:0:0:0:0:1 = ::1\n0:0:0:0:0:0:0:0 = ::\n</code></pre><h3 id=\"内嵌-ipv4\"><a href=\"#内嵌-ipv4\" class=\"headerlink\" title=\"内嵌 ipv4\"></a>内嵌 ipv4</h3><p>为了实现 IPv4-IPv6 互通，IPv4 地址会嵌入 IPv6 地址中，此时地址常表示为：<code>X:X:X:X:X:X:d.d.d.d</code>，<br>也就是前 6 组用冒分十六进制表示，后二组用十进制表示，而最后 32bit 地址则使用 IPv4 的点分十进制表示，例如<code>::192.168.0.1</code>与就是一个典型的例子 。</p>\n<h2 id=\"ipv4-转-ipv6\"><a href=\"#ipv4-转-ipv6\" class=\"headerlink\" title=\"ipv4 转 ipv6\"></a>ipv4 转 ipv6</h2><h3 id=\"非标准转换\"><a href=\"#非标准转换\" class=\"headerlink\" title=\"非标准转换\"></a>非标准转换</h3><p>只需要在 ip 地址前面 6 组共 96 位补充 0 即可，即</p>\n<p>0000:0000:0000:0000:0000:0000:135.75.43.52</p>\n<p>也就是::135.75.43.52（内嵌 IPv4 表示法）</p>\n<h3 id=\"标准转换\"><a href=\"#标准转换\" class=\"headerlink\" title=\"标准转换\"></a>标准转换</h3><p>135.75.43.52 按十六进制算出即 87.4B.2B.34，</p>\n<p>而 87.4B.2B.34 串地址一组还是 8 位，所以需要两组 v4 地址合成 v6 地址，</p>\n<p>再把前 96 位补零，它可以被转化为</p>\n<p>0000:0000:0000:0000:0000:0000:874B:2B34 或者::874B:2B34。</p>\n"},{"title":"群辉 NAS 使用 frp 实现内网穿透","_content":"\n# 前言\n\n之前懒着折腾直接买了白群辉,发现群辉的 quickConnect 实在是不给力.群辉放在单位, 在家里电视上串流看电影的需求都满足不了,1M 的小水管也只能看看文档了.\n然后去看了花生壳和花生棒,发现更是个天坑.免费版一个月 1g 流量+1M 带宽,付费版不限流量但是带宽比 qc 宽不了多少,可以说是性价比极低.(见下图)![WX20190912-155910@2x](https://i.loli.net/2019/09/12/B4ZQTRLl7oDACJd.png)\n今天同时安利了 frp,试了下发现配置简单 ,同时内网穿透的效果也比较好,播放视频的速度也很满意,于是写下这边技术总结.\n\n# 关于 frp\n\n> [frp](https://github.com/fatedier/frp/blob/master/README_zh.md)是一个可用于内网穿透的高性能的反向代理应用，支持 tcp, udp 协议，为 http 和 https 应用协议提供了额外的能力，且尝试性支持了点对点穿透。\n\n![architecture](https://i.loli.net/2019/09/12/usQ4WgUnldPrZb7.png)\n简单来说,frp 借助有公网 ip 的 vps 实现了内网穿透的功能.\n\n# 流程\n\n架构图:\n\n![未命名](https://i.loli.net/2019/09/16/Se9RnyXj4gcDxVq.png)\n\n## 工具\n\n- 有公网 ip 的 vps,最好是国内的主机.\n- 域名,并且做了域名解析.\n- ssh 客户端.\n- 群辉 DS218+\n\n## 配置\n\n在这里要说一句,客户端与服务端的软件版本必须保证相同,否则会报错.\n\n### 服务端配置\n\n#### 1.登录服务器,下载服务器对应的软件版本.\n\n    [root@instance-ssr ~]# uname -a\n    Linux instance-ssr 5.1.15-1.el7.elrepo.x86_64 #1 SMP Tue Jun 25 10:52:45 EDT 2019 x86_64 x86_64 x86_64 GNU/Linux\n\n    我的主机是 centos7,所以下载了 amd64 版本.\n\n#### 解压文件\n\n    tar -zxvf frp_0.29.0_linux_amd64.tar.gz\n\n#### 删除不必要的客户端文件\n\n    //frpc 是客户端(client)文件,frps 为服务端(frps)文件.\n\n    cd frp_0.12.0_linux_amd64\n\n    rm -f frpc frpc_full.ini frpc.ini\n\n#### 编辑配置文件 `frpc.ini`\n\n```ini\n    // common 为必填项\n    [common]\n    // Frp 服务端口（可自定义）\n    bind_port = 7000\n    //http 访问端口（可自定义）\n    vhost_http_port = 8080\n    //dashboard 界面端口\n    dashboard_port = 7500\n    // 登录 dashboard 用户名\n    dashboard_user = 用户名\n    // 登录 dashboard 密码\n    dashboard_pwd = 密码\n    // 最大连接池数量\n    max_pool_count = 5\n    // 超时验证时间\n    authentication_timeout = 900\n    // 自定义二级域名\n    subdomain_host =\n\n    [ssh]\n    //ssh 访问端口\n    listen_port = 6000\n    //  用户身份认证\n    auth_token = 和客服端 token 对应\n\n    //人人影视docker 配置\n   [renren]\n\nlisten_port =3001\n```\n\n#### 运行\n\n保存上面的文件,接着:\n\n    ./frps -c ./frps.ini\n\n来运行服务端程序.\n\n### 客户端配置\n\n这里的客户端主要是指群辉.\n\n#### ssh 登录群晖\n\n群辉必须开启 ssh\n![WX20190912-163142@2x](https://i.loli.net/2019/09/12/7TO6KShUNwc92tR.png)\n\n    ssh admin@local_nas_ip\n\n#### 群晖下载 frp 客户端\n\n```sh\nsudo -i // 切换 root 用户\nwget https://github.com/fatedier/frp/releases/download/v0.29.0/frp_0.29.0_linux_amd64.tar.gz\ntar -zxvf  frp_0.29.0_linux_amd64.tar.gz\ncd frp_0.12.0_linux_amd64\nrm -f frps frps_full.ini frps.ini\n```\n\n#### 编辑 frpc.ini\n\n```ini\n\n\n[common]\n\n// 服务器端公网ip\nserver_addr = ip\n\n//frp 服务端口，和服务器端 bind_port 一致\nserver_port = 7000\n\n// 和前面服务器端 [ssh] auth_token 一致\nauth_token = 和服务器端对应\n\n// 连接池数量\npool_count = 1\n\n\n[ssh]\n\n// type 服务类型（tcp、http、https、udp）\ntype = tcp\n\n// NAS 本地局域网内网 ip\nlocal_ip = NAS 局域网ip\n\n//  NAS 开启 ssh 服务端口号，默认 22\nlocal_port = 22\n\n// 服务器端 ssh 端口，和服务器端 [ssh] listen_port 配置一致\nremote_port = 6000\n\n\n//配置访问 nas 的主要方式(通过网页)\n[nas]\n\n// 服务类型为 http\ntype = http\n\n// NAS 默认端口 5000\nlocal_port = 5000\n\n//域名(我这里申请了一个免费域名,然后在 dnspod与我 vps 的公网 ip 绑定,细节可以参考我之前写的[这篇文章](https://h123.cf/2019/08/29/2019.08.29.cname/#more))\n\ncustom_domains = hhbnas.cf\n\n\n\n// NAS web Station 服务，没用可以不用设置\n[web]\ntype = http\nlocal_port = 80\nsubdomain = web\n\n\n//人人影视 docker 配置\n[renren]\n\ntype = tcp\nlocal_ip = 10.200.11.144\nlocal_port = 3001\nremote_port = 3001\n\n\n```\n\n#### 运行\n\n与服务端类似,保存上面编辑的文件,接着:\n\n    ./ frpc -c ./frpc.ini\n\n## 测试\n\n    // user是你登录 nas 的用户名.\n    ssh -p 6000 user@你的公网 ip\n\n配置成功以后就可以使用 ssh 链接了.\n\n网页登录:\n\n![WX20190912-164543@2x](https://i.loli.net/2019/09/12/icpGZvtXQwoLux5.png)\n\n# two more things\n\n## 后台运行\n\n现在客户端和服务端的程序都在运行了,但是我们断开链接以后服务就会中断,因此我们需要把服务转为后台运行.\n\n### 服务端\n\nnohup ./frps -c ./frps.ini &\n\n### 客户端\n\nnohup ./frpc -c ./frpc.ini &\n\n同时我们可以使用群辉的定时任务功能,让 frp 在群辉重启以后自启动,方法如下:\n\n```sh\n    //新建脚本\n    vi /usr/syno/etc.defaults/rc.sysv/frp.sh\n\n    // 编辑脚本\n    #/bin/bash\n    cd /root/frp_0.29.0_linux_amd64\n    nohup ./frpc -c ./frpc.ini &\n\n    // 设置文件权限\n    chmod +x frp.sh\n\n\n```\n\n群辉中新建计划任务.\n控制面板>任务计划>触发的任务>用户定义的脚本\n\n![WX20190912-165240@2x](https://i.loli.net/2019/09/12/uZvh4w2nE1lbCOD.png)\n\n![WX20190912-165429@2x](https://i.loli.net/2019/09/12/2VqfkA6cWSZGnTi.png)\n\n## 隐藏 8080 端口\n\n在服务器的 nginx 配置文件(/ect/nginx/nginx.conf)中修改:\n\n```conf\n    server {\n        listen       80;\n        server_name  localhost;\n\tserver_name_in_redirect off;\n\tproxy_set_header Host $host:$server_port;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header REMOTE-HOST $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\tlocation / {\n\t    proxy_pass http://127.0.0.1:8080/;\n        }\n    }\n```\n\n映射 80 到 8080 .\n\n\n## 配置 ssh 别名\n\n配置别名（alias）的过程比较简单，在~/.ssh/config这个文件（如果目录下没有这个文件，可以新建一个）接着按下面格式添加服务器信息：\n\n    # 服务器1\n    Host 别名\n        HostName IP地址\n        Port 22\n        User 用户名\n    # 服务器2\n    Host 别名\n        HostName IP地址\n        Port 22\n        User 用户名\n    ...\n    # 更多服务器\n\n例如, config 添加如下内容 \n\n    Host ssr\n    HostName 35.234.36.117\n    Port 22\n    User root\n\n可以通过  `ssh ssr`来直接进行登录.\n\n\ndone.\n","source":"_posts/2019.09.12.frp.md","raw":"---\ntitle: 群辉 NAS 使用 frp 实现内网穿透\ntags: [nas, frp]\ncategories: 技术\n---\n\n# 前言\n\n之前懒着折腾直接买了白群辉,发现群辉的 quickConnect 实在是不给力.群辉放在单位, 在家里电视上串流看电影的需求都满足不了,1M 的小水管也只能看看文档了.\n然后去看了花生壳和花生棒,发现更是个天坑.免费版一个月 1g 流量+1M 带宽,付费版不限流量但是带宽比 qc 宽不了多少,可以说是性价比极低.(见下图)![WX20190912-155910@2x](https://i.loli.net/2019/09/12/B4ZQTRLl7oDACJd.png)\n今天同时安利了 frp,试了下发现配置简单 ,同时内网穿透的效果也比较好,播放视频的速度也很满意,于是写下这边技术总结.\n\n# 关于 frp\n\n> [frp](https://github.com/fatedier/frp/blob/master/README_zh.md)是一个可用于内网穿透的高性能的反向代理应用，支持 tcp, udp 协议，为 http 和 https 应用协议提供了额外的能力，且尝试性支持了点对点穿透。\n\n![architecture](https://i.loli.net/2019/09/12/usQ4WgUnldPrZb7.png)\n简单来说,frp 借助有公网 ip 的 vps 实现了内网穿透的功能.\n\n# 流程\n\n架构图:\n\n![未命名](https://i.loli.net/2019/09/16/Se9RnyXj4gcDxVq.png)\n\n## 工具\n\n- 有公网 ip 的 vps,最好是国内的主机.\n- 域名,并且做了域名解析.\n- ssh 客户端.\n- 群辉 DS218+\n\n## 配置\n\n在这里要说一句,客户端与服务端的软件版本必须保证相同,否则会报错.\n\n### 服务端配置\n\n#### 1.登录服务器,下载服务器对应的软件版本.\n\n    [root@instance-ssr ~]# uname -a\n    Linux instance-ssr 5.1.15-1.el7.elrepo.x86_64 #1 SMP Tue Jun 25 10:52:45 EDT 2019 x86_64 x86_64 x86_64 GNU/Linux\n\n    我的主机是 centos7,所以下载了 amd64 版本.\n\n#### 解压文件\n\n    tar -zxvf frp_0.29.0_linux_amd64.tar.gz\n\n#### 删除不必要的客户端文件\n\n    //frpc 是客户端(client)文件,frps 为服务端(frps)文件.\n\n    cd frp_0.12.0_linux_amd64\n\n    rm -f frpc frpc_full.ini frpc.ini\n\n#### 编辑配置文件 `frpc.ini`\n\n```ini\n    // common 为必填项\n    [common]\n    // Frp 服务端口（可自定义）\n    bind_port = 7000\n    //http 访问端口（可自定义）\n    vhost_http_port = 8080\n    //dashboard 界面端口\n    dashboard_port = 7500\n    // 登录 dashboard 用户名\n    dashboard_user = 用户名\n    // 登录 dashboard 密码\n    dashboard_pwd = 密码\n    // 最大连接池数量\n    max_pool_count = 5\n    // 超时验证时间\n    authentication_timeout = 900\n    // 自定义二级域名\n    subdomain_host =\n\n    [ssh]\n    //ssh 访问端口\n    listen_port = 6000\n    //  用户身份认证\n    auth_token = 和客服端 token 对应\n\n    //人人影视docker 配置\n   [renren]\n\nlisten_port =3001\n```\n\n#### 运行\n\n保存上面的文件,接着:\n\n    ./frps -c ./frps.ini\n\n来运行服务端程序.\n\n### 客户端配置\n\n这里的客户端主要是指群辉.\n\n#### ssh 登录群晖\n\n群辉必须开启 ssh\n![WX20190912-163142@2x](https://i.loli.net/2019/09/12/7TO6KShUNwc92tR.png)\n\n    ssh admin@local_nas_ip\n\n#### 群晖下载 frp 客户端\n\n```sh\nsudo -i // 切换 root 用户\nwget https://github.com/fatedier/frp/releases/download/v0.29.0/frp_0.29.0_linux_amd64.tar.gz\ntar -zxvf  frp_0.29.0_linux_amd64.tar.gz\ncd frp_0.12.0_linux_amd64\nrm -f frps frps_full.ini frps.ini\n```\n\n#### 编辑 frpc.ini\n\n```ini\n\n\n[common]\n\n// 服务器端公网ip\nserver_addr = ip\n\n//frp 服务端口，和服务器端 bind_port 一致\nserver_port = 7000\n\n// 和前面服务器端 [ssh] auth_token 一致\nauth_token = 和服务器端对应\n\n// 连接池数量\npool_count = 1\n\n\n[ssh]\n\n// type 服务类型（tcp、http、https、udp）\ntype = tcp\n\n// NAS 本地局域网内网 ip\nlocal_ip = NAS 局域网ip\n\n//  NAS 开启 ssh 服务端口号，默认 22\nlocal_port = 22\n\n// 服务器端 ssh 端口，和服务器端 [ssh] listen_port 配置一致\nremote_port = 6000\n\n\n//配置访问 nas 的主要方式(通过网页)\n[nas]\n\n// 服务类型为 http\ntype = http\n\n// NAS 默认端口 5000\nlocal_port = 5000\n\n//域名(我这里申请了一个免费域名,然后在 dnspod与我 vps 的公网 ip 绑定,细节可以参考我之前写的[这篇文章](https://h123.cf/2019/08/29/2019.08.29.cname/#more))\n\ncustom_domains = hhbnas.cf\n\n\n\n// NAS web Station 服务，没用可以不用设置\n[web]\ntype = http\nlocal_port = 80\nsubdomain = web\n\n\n//人人影视 docker 配置\n[renren]\n\ntype = tcp\nlocal_ip = 10.200.11.144\nlocal_port = 3001\nremote_port = 3001\n\n\n```\n\n#### 运行\n\n与服务端类似,保存上面编辑的文件,接着:\n\n    ./ frpc -c ./frpc.ini\n\n## 测试\n\n    // user是你登录 nas 的用户名.\n    ssh -p 6000 user@你的公网 ip\n\n配置成功以后就可以使用 ssh 链接了.\n\n网页登录:\n\n![WX20190912-164543@2x](https://i.loli.net/2019/09/12/icpGZvtXQwoLux5.png)\n\n# two more things\n\n## 后台运行\n\n现在客户端和服务端的程序都在运行了,但是我们断开链接以后服务就会中断,因此我们需要把服务转为后台运行.\n\n### 服务端\n\nnohup ./frps -c ./frps.ini &\n\n### 客户端\n\nnohup ./frpc -c ./frpc.ini &\n\n同时我们可以使用群辉的定时任务功能,让 frp 在群辉重启以后自启动,方法如下:\n\n```sh\n    //新建脚本\n    vi /usr/syno/etc.defaults/rc.sysv/frp.sh\n\n    // 编辑脚本\n    #/bin/bash\n    cd /root/frp_0.29.0_linux_amd64\n    nohup ./frpc -c ./frpc.ini &\n\n    // 设置文件权限\n    chmod +x frp.sh\n\n\n```\n\n群辉中新建计划任务.\n控制面板>任务计划>触发的任务>用户定义的脚本\n\n![WX20190912-165240@2x](https://i.loli.net/2019/09/12/uZvh4w2nE1lbCOD.png)\n\n![WX20190912-165429@2x](https://i.loli.net/2019/09/12/2VqfkA6cWSZGnTi.png)\n\n## 隐藏 8080 端口\n\n在服务器的 nginx 配置文件(/ect/nginx/nginx.conf)中修改:\n\n```conf\n    server {\n        listen       80;\n        server_name  localhost;\n\tserver_name_in_redirect off;\n\tproxy_set_header Host $host:$server_port;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header REMOTE-HOST $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n\tlocation / {\n\t    proxy_pass http://127.0.0.1:8080/;\n        }\n    }\n```\n\n映射 80 到 8080 .\n\n\n## 配置 ssh 别名\n\n配置别名（alias）的过程比较简单，在~/.ssh/config这个文件（如果目录下没有这个文件，可以新建一个）接着按下面格式添加服务器信息：\n\n    # 服务器1\n    Host 别名\n        HostName IP地址\n        Port 22\n        User 用户名\n    # 服务器2\n    Host 别名\n        HostName IP地址\n        Port 22\n        User 用户名\n    ...\n    # 更多服务器\n\n例如, config 添加如下内容 \n\n    Host ssr\n    HostName 35.234.36.117\n    Port 22\n    User root\n\n可以通过  `ssh ssr`来直接进行登录.\n\n\ndone.\n","slug":"2019.09.12.frp","published":1,"date":"2019-09-12T07:44:41.539Z","updated":"2019-09-16T02:42:59.974Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziiqe001jrh9z7bqhcabj","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>之前懒着折腾直接买了白群辉,发现群辉的 quickConnect 实在是不给力.群辉放在单位, 在家里电视上串流看电影的需求都满足不了,1M 的小水管也只能看看文档了.<br>然后去看了花生壳和花生棒,发现更是个天坑.免费版一个月 1g 流量+1M 带宽,付费版不限流量但是带宽比 qc 宽不了多少,可以说是性价比极低.(见下图)<img src=\"https://i.loli.net/2019/09/12/B4ZQTRLl7oDACJd.png\" alt=\"WX20190912-155910@2x\"><br>今天同时安利了 frp,试了下发现配置简单 ,同时内网穿透的效果也比较好,播放视频的速度也很满意,于是写下这边技术总结.</p>\n<h1 id=\"关于-frp\"><a href=\"#关于-frp\" class=\"headerlink\" title=\"关于 frp\"></a>关于 frp</h1><blockquote>\n<p><a href=\"https://github.com/fatedier/frp/blob/master/README_zh.md\" target=\"_blank\" rel=\"noopener\">frp</a>是一个可用于内网穿透的高性能的反向代理应用，支持 tcp, udp 协议，为 http 和 https 应用协议提供了额外的能力，且尝试性支持了点对点穿透。</p>\n</blockquote>\n<p><img src=\"https://i.loli.net/2019/09/12/usQ4WgUnldPrZb7.png\" alt=\"architecture\"><br>简单来说,frp 借助有公网 ip 的 vps 实现了内网穿透的功能.</p>\n<h1 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h1><p>架构图:</p>\n<p><img src=\"https://i.loli.net/2019/09/16/Se9RnyXj4gcDxVq.png\" alt=\"未命名\"></p>\n<h2 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h2><ul>\n<li>有公网 ip 的 vps,最好是国内的主机.</li>\n<li>域名,并且做了域名解析.</li>\n<li>ssh 客户端.</li>\n<li>群辉 DS218+</li>\n</ul>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>在这里要说一句,客户端与服务端的软件版本必须保证相同,否则会报错.</p>\n<h3 id=\"服务端配置\"><a href=\"#服务端配置\" class=\"headerlink\" title=\"服务端配置\"></a>服务端配置</h3><h4 id=\"1-登录服务器-下载服务器对应的软件版本\"><a href=\"#1-登录服务器-下载服务器对应的软件版本\" class=\"headerlink\" title=\"1.登录服务器,下载服务器对应的软件版本.\"></a>1.登录服务器,下载服务器对应的软件版本.</h4><pre><code>[root@instance-ssr ~]# uname -a\nLinux instance-ssr 5.1.15-1.el7.elrepo.x86_64 #1 SMP Tue Jun 25 10:52:45 EDT 2019 x86_64 x86_64 x86_64 GNU/Linux\n\n我的主机是 centos7,所以下载了 amd64 版本.\n</code></pre><h4 id=\"解压文件\"><a href=\"#解压文件\" class=\"headerlink\" title=\"解压文件\"></a>解压文件</h4><pre><code>tar -zxvf frp_0.29.0_linux_amd64.tar.gz\n</code></pre><h4 id=\"删除不必要的客户端文件\"><a href=\"#删除不必要的客户端文件\" class=\"headerlink\" title=\"删除不必要的客户端文件\"></a>删除不必要的客户端文件</h4><pre><code>//frpc 是客户端(client)文件,frps 为服务端(frps)文件.\n\ncd frp_0.12.0_linux_amd64\n\nrm -f frpc frpc_full.ini frpc.ini\n</code></pre><h4 id=\"编辑配置文件-frpc-ini\"><a href=\"#编辑配置文件-frpc-ini\" class=\"headerlink\" title=\"编辑配置文件 frpc.ini\"></a>编辑配置文件 <code>frpc.ini</code></h4><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    // common 为必填项</span><br><span class=\"line\">    <span class=\"section\">[common]</span></span><br><span class=\"line\">    // Frp 服务端口（可自定义）</span><br><span class=\"line\">    bind_port = 7000</span><br><span class=\"line\">    //http 访问端口（可自定义）</span><br><span class=\"line\">    vhost_http_port = 8080</span><br><span class=\"line\">    //dashboard 界面端口</span><br><span class=\"line\">    dashboard_port = 7500</span><br><span class=\"line\">    // 登录 dashboard 用户名</span><br><span class=\"line\">    dashboard_user = 用户名</span><br><span class=\"line\">    // 登录 dashboard 密码</span><br><span class=\"line\">    dashboard_pwd = 密码</span><br><span class=\"line\">    // 最大连接池数量</span><br><span class=\"line\">    max_pool_count = 5</span><br><span class=\"line\">    // 超时验证时间</span><br><span class=\"line\">    authentication_timeout = 900</span><br><span class=\"line\">    // 自定义二级域名</span><br><span class=\"line\">    subdomain_host =</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">[ssh]</span></span><br><span class=\"line\">    //ssh 访问端口</span><br><span class=\"line\">    listen_port = 6000</span><br><span class=\"line\">    //  用户身份认证</span><br><span class=\"line\">    auth_token = 和客服端 token 对应</span><br><span class=\"line\"></span><br><span class=\"line\">    //人人影视docker 配置</span><br><span class=\"line\">   <span class=\"section\">[renren]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">listen_port</span> =<span class=\"number\">3001</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h4><p>保存上面的文件,接着:</p>\n<pre><code>./frps -c ./frps.ini\n</code></pre><p>来运行服务端程序.</p>\n<h3 id=\"客户端配置\"><a href=\"#客户端配置\" class=\"headerlink\" title=\"客户端配置\"></a>客户端配置</h3><p>这里的客户端主要是指群辉.</p>\n<h4 id=\"ssh-登录群晖\"><a href=\"#ssh-登录群晖\" class=\"headerlink\" title=\"ssh 登录群晖\"></a>ssh 登录群晖</h4><p>群辉必须开启 ssh<br><img src=\"https://i.loli.net/2019/09/12/7TO6KShUNwc92tR.png\" alt=\"WX20190912-163142@2x\"></p>\n<pre><code>ssh admin@local_nas_ip\n</code></pre><h4 id=\"群晖下载-frp-客户端\"><a href=\"#群晖下载-frp-客户端\" class=\"headerlink\" title=\"群晖下载 frp 客户端\"></a>群晖下载 frp 客户端</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo -i // 切换 root 用户</span><br><span class=\"line\">wget https://github.com/fatedier/frp/releases/download/v0.29.0/frp_0.29.0_linux_amd64.tar.gz</span><br><span class=\"line\">tar -zxvf  frp_0.29.0_linux_amd64.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> frp_0.12.0_linux_amd64</span><br><span class=\"line\">rm -f frps frps_full.ini frps.ini</span><br></pre></td></tr></table></figure>\n<h4 id=\"编辑-frpc-ini\"><a href=\"#编辑-frpc-ini\" class=\"headerlink\" title=\"编辑 frpc.ini\"></a>编辑 frpc.ini</h4><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[common]</span></span><br><span class=\"line\"></span><br><span class=\"line\">// 服务器端公网ip</span><br><span class=\"line\"><span class=\"attr\">server_addr</span> = ip</span><br><span class=\"line\"></span><br><span class=\"line\">//frp 服务端口，和服务器端 bind_port 一致</span><br><span class=\"line\"><span class=\"attr\">server_port</span> = <span class=\"number\">7000</span></span><br><span class=\"line\"></span><br><span class=\"line\">// 和前面服务器端 [ssh] auth_token 一致</span><br><span class=\"line\"><span class=\"attr\">auth_token</span> = 和服务器端对应</span><br><span class=\"line\"></span><br><span class=\"line\">// 连接池数量</span><br><span class=\"line\"><span class=\"attr\">pool_count</span> = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[ssh]</span></span><br><span class=\"line\"></span><br><span class=\"line\">// type 服务类型（tcp、http、https、udp）</span><br><span class=\"line\"><span class=\"attr\">type</span> = tcp</span><br><span class=\"line\"></span><br><span class=\"line\">// NAS 本地局域网内网 ip</span><br><span class=\"line\"><span class=\"attr\">local_ip</span> = NAS 局域网ip</span><br><span class=\"line\"></span><br><span class=\"line\">//  NAS 开启 ssh 服务端口号，默认 22</span><br><span class=\"line\"><span class=\"attr\">local_port</span> = <span class=\"number\">22</span></span><br><span class=\"line\"></span><br><span class=\"line\">// 服务器端 ssh 端口，和服务器端 [ssh] listen_port 配置一致</span><br><span class=\"line\"><span class=\"attr\">remote_port</span> = <span class=\"number\">6000</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//配置访问 nas 的主要方式(通过网页)</span><br><span class=\"line\"><span class=\"section\">[nas]</span></span><br><span class=\"line\"></span><br><span class=\"line\">// 服务类型为 http</span><br><span class=\"line\"><span class=\"attr\">type</span> = http</span><br><span class=\"line\"></span><br><span class=\"line\">// NAS 默认端口 5000</span><br><span class=\"line\"><span class=\"attr\">local_port</span> = <span class=\"number\">5000</span></span><br><span class=\"line\"></span><br><span class=\"line\">//域名(我这里申请了一个免费域名,然后在 dnspod与我 vps 的公网 ip 绑定,细节可以参考我之前写的[这篇文章](https://h123.cf/2019/08/29/2019.08.29.cname/#more))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">custom_domains</span> = hhbnas.cf</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// NAS web Station 服务，没用可以不用设置</span><br><span class=\"line\"><span class=\"section\">[web]</span></span><br><span class=\"line\"><span class=\"attr\">type</span> = http</span><br><span class=\"line\"><span class=\"attr\">local_port</span> = <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"attr\">subdomain</span> = web</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//人人影视 docker 配置</span><br><span class=\"line\"><span class=\"section\">[renren]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">type</span> = tcp</span><br><span class=\"line\"><span class=\"attr\">local_ip</span> = <span class=\"number\">10.200</span>.<span class=\"number\">11.144</span></span><br><span class=\"line\"><span class=\"attr\">local_port</span> = <span class=\"number\">3001</span></span><br><span class=\"line\"><span class=\"attr\">remote_port</span> = <span class=\"number\">3001</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"运行-1\"><a href=\"#运行-1\" class=\"headerlink\" title=\"运行\"></a>运行</h4><p>与服务端类似,保存上面编辑的文件,接着:</p>\n<pre><code>./ frpc -c ./frpc.ini\n</code></pre><h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><pre><code>// user是你登录 nas 的用户名.\nssh -p 6000 user@你的公网 ip\n</code></pre><p>配置成功以后就可以使用 ssh 链接了.</p>\n<p>网页登录:</p>\n<p><img src=\"https://i.loli.net/2019/09/12/icpGZvtXQwoLux5.png\" alt=\"WX20190912-164543@2x\"></p>\n<h1 id=\"two-more-things\"><a href=\"#two-more-things\" class=\"headerlink\" title=\"two more things\"></a>two more things</h1><h2 id=\"后台运行\"><a href=\"#后台运行\" class=\"headerlink\" title=\"后台运行\"></a>后台运行</h2><p>现在客户端和服务端的程序都在运行了,但是我们断开链接以后服务就会中断,因此我们需要把服务转为后台运行.</p>\n<h3 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h3><p>nohup ./frps -c ./frps.ini &amp;</p>\n<h3 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h3><p>nohup ./frpc -c ./frpc.ini &amp;</p>\n<p>同时我们可以使用群辉的定时任务功能,让 frp 在群辉重启以后自启动,方法如下:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//新建脚本</span><br><span class=\"line\">vi /usr/syno/etc.defaults/rc.sysv/frp.sh</span><br><span class=\"line\"></span><br><span class=\"line\">// 编辑脚本</span><br><span class=\"line\"><span class=\"comment\">#/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /root/frp_0.29.0_linux_amd64</span><br><span class=\"line\">nohup ./frpc -c ./frpc.ini &amp;</span><br><span class=\"line\"></span><br><span class=\"line\">// 设置文件权限</span><br><span class=\"line\">chmod +x frp.sh</span><br></pre></td></tr></table></figure>\n<p>群辉中新建计划任务.<br>控制面板&gt;任务计划&gt;触发的任务&gt;用户定义的脚本</p>\n<p><img src=\"https://i.loli.net/2019/09/12/uZvh4w2nE1lbCOD.png\" alt=\"WX20190912-165240@2x\"></p>\n<p><img src=\"https://i.loli.net/2019/09/12/2VqfkA6cWSZGnTi.png\" alt=\"WX20190912-165429@2x\"></p>\n<h2 id=\"隐藏-8080-端口\"><a href=\"#隐藏-8080-端口\" class=\"headerlink\" title=\"隐藏 8080 端口\"></a>隐藏 8080 端口</h2><p>在服务器的 nginx 配置文件(/ect/nginx/nginx.conf)中修改:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   server &#123;</span><br><span class=\"line\">       listen       80;</span><br><span class=\"line\">       server_name  localhost;</span><br><span class=\"line\">server_name_in_redirect off;</span><br><span class=\"line\">proxy_set_header Host $host:$server_port;</span><br><span class=\"line\">       proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">       proxy_set_header REMOTE-HOST $remote_addr;</span><br><span class=\"line\">       proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">location &#x2F; &#123;</span><br><span class=\"line\">    proxy_pass http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>映射 80 到 8080 .</p>\n<h2 id=\"配置-ssh-别名\"><a href=\"#配置-ssh-别名\" class=\"headerlink\" title=\"配置 ssh 别名\"></a>配置 ssh 别名</h2><p>配置别名（alias）的过程比较简单，在~/.ssh/config这个文件（如果目录下没有这个文件，可以新建一个）接着按下面格式添加服务器信息：</p>\n<pre><code># 服务器1\nHost 别名\n    HostName IP地址\n    Port 22\n    User 用户名\n# 服务器2\nHost 别名\n    HostName IP地址\n    Port 22\n    User 用户名\n...\n# 更多服务器\n</code></pre><p>例如, config 添加如下内容 </p>\n<pre><code>Host ssr\nHostName 35.234.36.117\nPort 22\nUser root\n</code></pre><p>可以通过  <code>ssh ssr</code>来直接进行登录.</p>\n<p>done.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>之前懒着折腾直接买了白群辉,发现群辉的 quickConnect 实在是不给力.群辉放在单位, 在家里电视上串流看电影的需求都满足不了,1M 的小水管也只能看看文档了.<br>然后去看了花生壳和花生棒,发现更是个天坑.免费版一个月 1g 流量+1M 带宽,付费版不限流量但是带宽比 qc 宽不了多少,可以说是性价比极低.(见下图)<img src=\"https://i.loli.net/2019/09/12/B4ZQTRLl7oDACJd.png\" alt=\"WX20190912-155910@2x\"><br>今天同时安利了 frp,试了下发现配置简单 ,同时内网穿透的效果也比较好,播放视频的速度也很满意,于是写下这边技术总结.</p>\n<h1 id=\"关于-frp\"><a href=\"#关于-frp\" class=\"headerlink\" title=\"关于 frp\"></a>关于 frp</h1><blockquote>\n<p><a href=\"https://github.com/fatedier/frp/blob/master/README_zh.md\" target=\"_blank\" rel=\"noopener\">frp</a>是一个可用于内网穿透的高性能的反向代理应用，支持 tcp, udp 协议，为 http 和 https 应用协议提供了额外的能力，且尝试性支持了点对点穿透。</p>\n</blockquote>\n<p><img src=\"https://i.loli.net/2019/09/12/usQ4WgUnldPrZb7.png\" alt=\"architecture\"><br>简单来说,frp 借助有公网 ip 的 vps 实现了内网穿透的功能.</p>\n<h1 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h1><p>架构图:</p>\n<p><img src=\"https://i.loli.net/2019/09/16/Se9RnyXj4gcDxVq.png\" alt=\"未命名\"></p>\n<h2 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h2><ul>\n<li>有公网 ip 的 vps,最好是国内的主机.</li>\n<li>域名,并且做了域名解析.</li>\n<li>ssh 客户端.</li>\n<li>群辉 DS218+</li>\n</ul>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>在这里要说一句,客户端与服务端的软件版本必须保证相同,否则会报错.</p>\n<h3 id=\"服务端配置\"><a href=\"#服务端配置\" class=\"headerlink\" title=\"服务端配置\"></a>服务端配置</h3><h4 id=\"1-登录服务器-下载服务器对应的软件版本\"><a href=\"#1-登录服务器-下载服务器对应的软件版本\" class=\"headerlink\" title=\"1.登录服务器,下载服务器对应的软件版本.\"></a>1.登录服务器,下载服务器对应的软件版本.</h4><pre><code>[root@instance-ssr ~]# uname -a\nLinux instance-ssr 5.1.15-1.el7.elrepo.x86_64 #1 SMP Tue Jun 25 10:52:45 EDT 2019 x86_64 x86_64 x86_64 GNU/Linux\n\n我的主机是 centos7,所以下载了 amd64 版本.\n</code></pre><h4 id=\"解压文件\"><a href=\"#解压文件\" class=\"headerlink\" title=\"解压文件\"></a>解压文件</h4><pre><code>tar -zxvf frp_0.29.0_linux_amd64.tar.gz\n</code></pre><h4 id=\"删除不必要的客户端文件\"><a href=\"#删除不必要的客户端文件\" class=\"headerlink\" title=\"删除不必要的客户端文件\"></a>删除不必要的客户端文件</h4><pre><code>//frpc 是客户端(client)文件,frps 为服务端(frps)文件.\n\ncd frp_0.12.0_linux_amd64\n\nrm -f frpc frpc_full.ini frpc.ini\n</code></pre><h4 id=\"编辑配置文件-frpc-ini\"><a href=\"#编辑配置文件-frpc-ini\" class=\"headerlink\" title=\"编辑配置文件 frpc.ini\"></a>编辑配置文件 <code>frpc.ini</code></h4><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    // common 为必填项</span><br><span class=\"line\">    <span class=\"section\">[common]</span></span><br><span class=\"line\">    // Frp 服务端口（可自定义）</span><br><span class=\"line\">    bind_port = 7000</span><br><span class=\"line\">    //http 访问端口（可自定义）</span><br><span class=\"line\">    vhost_http_port = 8080</span><br><span class=\"line\">    //dashboard 界面端口</span><br><span class=\"line\">    dashboard_port = 7500</span><br><span class=\"line\">    // 登录 dashboard 用户名</span><br><span class=\"line\">    dashboard_user = 用户名</span><br><span class=\"line\">    // 登录 dashboard 密码</span><br><span class=\"line\">    dashboard_pwd = 密码</span><br><span class=\"line\">    // 最大连接池数量</span><br><span class=\"line\">    max_pool_count = 5</span><br><span class=\"line\">    // 超时验证时间</span><br><span class=\"line\">    authentication_timeout = 900</span><br><span class=\"line\">    // 自定义二级域名</span><br><span class=\"line\">    subdomain_host =</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"section\">[ssh]</span></span><br><span class=\"line\">    //ssh 访问端口</span><br><span class=\"line\">    listen_port = 6000</span><br><span class=\"line\">    //  用户身份认证</span><br><span class=\"line\">    auth_token = 和客服端 token 对应</span><br><span class=\"line\"></span><br><span class=\"line\">    //人人影视docker 配置</span><br><span class=\"line\">   <span class=\"section\">[renren]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">listen_port</span> =<span class=\"number\">3001</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h4><p>保存上面的文件,接着:</p>\n<pre><code>./frps -c ./frps.ini\n</code></pre><p>来运行服务端程序.</p>\n<h3 id=\"客户端配置\"><a href=\"#客户端配置\" class=\"headerlink\" title=\"客户端配置\"></a>客户端配置</h3><p>这里的客户端主要是指群辉.</p>\n<h4 id=\"ssh-登录群晖\"><a href=\"#ssh-登录群晖\" class=\"headerlink\" title=\"ssh 登录群晖\"></a>ssh 登录群晖</h4><p>群辉必须开启 ssh<br><img src=\"https://i.loli.net/2019/09/12/7TO6KShUNwc92tR.png\" alt=\"WX20190912-163142@2x\"></p>\n<pre><code>ssh admin@local_nas_ip\n</code></pre><h4 id=\"群晖下载-frp-客户端\"><a href=\"#群晖下载-frp-客户端\" class=\"headerlink\" title=\"群晖下载 frp 客户端\"></a>群晖下载 frp 客户端</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo -i // 切换 root 用户</span><br><span class=\"line\">wget https://github.com/fatedier/frp/releases/download/v0.29.0/frp_0.29.0_linux_amd64.tar.gz</span><br><span class=\"line\">tar -zxvf  frp_0.29.0_linux_amd64.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> frp_0.12.0_linux_amd64</span><br><span class=\"line\">rm -f frps frps_full.ini frps.ini</span><br></pre></td></tr></table></figure>\n<h4 id=\"编辑-frpc-ini\"><a href=\"#编辑-frpc-ini\" class=\"headerlink\" title=\"编辑 frpc.ini\"></a>编辑 frpc.ini</h4><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[common]</span></span><br><span class=\"line\"></span><br><span class=\"line\">// 服务器端公网ip</span><br><span class=\"line\"><span class=\"attr\">server_addr</span> = ip</span><br><span class=\"line\"></span><br><span class=\"line\">//frp 服务端口，和服务器端 bind_port 一致</span><br><span class=\"line\"><span class=\"attr\">server_port</span> = <span class=\"number\">7000</span></span><br><span class=\"line\"></span><br><span class=\"line\">// 和前面服务器端 [ssh] auth_token 一致</span><br><span class=\"line\"><span class=\"attr\">auth_token</span> = 和服务器端对应</span><br><span class=\"line\"></span><br><span class=\"line\">// 连接池数量</span><br><span class=\"line\"><span class=\"attr\">pool_count</span> = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[ssh]</span></span><br><span class=\"line\"></span><br><span class=\"line\">// type 服务类型（tcp、http、https、udp）</span><br><span class=\"line\"><span class=\"attr\">type</span> = tcp</span><br><span class=\"line\"></span><br><span class=\"line\">// NAS 本地局域网内网 ip</span><br><span class=\"line\"><span class=\"attr\">local_ip</span> = NAS 局域网ip</span><br><span class=\"line\"></span><br><span class=\"line\">//  NAS 开启 ssh 服务端口号，默认 22</span><br><span class=\"line\"><span class=\"attr\">local_port</span> = <span class=\"number\">22</span></span><br><span class=\"line\"></span><br><span class=\"line\">// 服务器端 ssh 端口，和服务器端 [ssh] listen_port 配置一致</span><br><span class=\"line\"><span class=\"attr\">remote_port</span> = <span class=\"number\">6000</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//配置访问 nas 的主要方式(通过网页)</span><br><span class=\"line\"><span class=\"section\">[nas]</span></span><br><span class=\"line\"></span><br><span class=\"line\">// 服务类型为 http</span><br><span class=\"line\"><span class=\"attr\">type</span> = http</span><br><span class=\"line\"></span><br><span class=\"line\">// NAS 默认端口 5000</span><br><span class=\"line\"><span class=\"attr\">local_port</span> = <span class=\"number\">5000</span></span><br><span class=\"line\"></span><br><span class=\"line\">//域名(我这里申请了一个免费域名,然后在 dnspod与我 vps 的公网 ip 绑定,细节可以参考我之前写的[这篇文章](https://h123.cf/2019/08/29/2019.08.29.cname/#more))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">custom_domains</span> = hhbnas.cf</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// NAS web Station 服务，没用可以不用设置</span><br><span class=\"line\"><span class=\"section\">[web]</span></span><br><span class=\"line\"><span class=\"attr\">type</span> = http</span><br><span class=\"line\"><span class=\"attr\">local_port</span> = <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"attr\">subdomain</span> = web</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//人人影视 docker 配置</span><br><span class=\"line\"><span class=\"section\">[renren]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">type</span> = tcp</span><br><span class=\"line\"><span class=\"attr\">local_ip</span> = <span class=\"number\">10.200</span>.<span class=\"number\">11.144</span></span><br><span class=\"line\"><span class=\"attr\">local_port</span> = <span class=\"number\">3001</span></span><br><span class=\"line\"><span class=\"attr\">remote_port</span> = <span class=\"number\">3001</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"运行-1\"><a href=\"#运行-1\" class=\"headerlink\" title=\"运行\"></a>运行</h4><p>与服务端类似,保存上面编辑的文件,接着:</p>\n<pre><code>./ frpc -c ./frpc.ini\n</code></pre><h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><pre><code>// user是你登录 nas 的用户名.\nssh -p 6000 user@你的公网 ip\n</code></pre><p>配置成功以后就可以使用 ssh 链接了.</p>\n<p>网页登录:</p>\n<p><img src=\"https://i.loli.net/2019/09/12/icpGZvtXQwoLux5.png\" alt=\"WX20190912-164543@2x\"></p>\n<h1 id=\"two-more-things\"><a href=\"#two-more-things\" class=\"headerlink\" title=\"two more things\"></a>two more things</h1><h2 id=\"后台运行\"><a href=\"#后台运行\" class=\"headerlink\" title=\"后台运行\"></a>后台运行</h2><p>现在客户端和服务端的程序都在运行了,但是我们断开链接以后服务就会中断,因此我们需要把服务转为后台运行.</p>\n<h3 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h3><p>nohup ./frps -c ./frps.ini &amp;</p>\n<h3 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h3><p>nohup ./frpc -c ./frpc.ini &amp;</p>\n<p>同时我们可以使用群辉的定时任务功能,让 frp 在群辉重启以后自启动,方法如下:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//新建脚本</span><br><span class=\"line\">vi /usr/syno/etc.defaults/rc.sysv/frp.sh</span><br><span class=\"line\"></span><br><span class=\"line\">// 编辑脚本</span><br><span class=\"line\"><span class=\"comment\">#/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /root/frp_0.29.0_linux_amd64</span><br><span class=\"line\">nohup ./frpc -c ./frpc.ini &amp;</span><br><span class=\"line\"></span><br><span class=\"line\">// 设置文件权限</span><br><span class=\"line\">chmod +x frp.sh</span><br></pre></td></tr></table></figure>\n<p>群辉中新建计划任务.<br>控制面板&gt;任务计划&gt;触发的任务&gt;用户定义的脚本</p>\n<p><img src=\"https://i.loli.net/2019/09/12/uZvh4w2nE1lbCOD.png\" alt=\"WX20190912-165240@2x\"></p>\n<p><img src=\"https://i.loli.net/2019/09/12/2VqfkA6cWSZGnTi.png\" alt=\"WX20190912-165429@2x\"></p>\n<h2 id=\"隐藏-8080-端口\"><a href=\"#隐藏-8080-端口\" class=\"headerlink\" title=\"隐藏 8080 端口\"></a>隐藏 8080 端口</h2><p>在服务器的 nginx 配置文件(/ect/nginx/nginx.conf)中修改:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   server &#123;</span><br><span class=\"line\">       listen       80;</span><br><span class=\"line\">       server_name  localhost;</span><br><span class=\"line\">server_name_in_redirect off;</span><br><span class=\"line\">proxy_set_header Host $host:$server_port;</span><br><span class=\"line\">       proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">       proxy_set_header REMOTE-HOST $remote_addr;</span><br><span class=\"line\">       proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">location &#x2F; &#123;</span><br><span class=\"line\">    proxy_pass http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>映射 80 到 8080 .</p>\n<h2 id=\"配置-ssh-别名\"><a href=\"#配置-ssh-别名\" class=\"headerlink\" title=\"配置 ssh 别名\"></a>配置 ssh 别名</h2><p>配置别名（alias）的过程比较简单，在~/.ssh/config这个文件（如果目录下没有这个文件，可以新建一个）接着按下面格式添加服务器信息：</p>\n<pre><code># 服务器1\nHost 别名\n    HostName IP地址\n    Port 22\n    User 用户名\n# 服务器2\nHost 别名\n    HostName IP地址\n    Port 22\n    User 用户名\n...\n# 更多服务器\n</code></pre><p>例如, config 添加如下内容 </p>\n<pre><code>Host ssr\nHostName 35.234.36.117\nPort 22\nUser root\n</code></pre><p>可以通过  <code>ssh ssr</code>来直接进行登录.</p>\n<p>done.</p>\n"},{"title":"koa连接 mysql 进行 crud","_content":"\n> 使用 koa 的 mysql 模块可以方便地连接 mysql 并进行 crud 操作.\n\n## npm 安装 mysql 模块\n\n    npm i mysql -S\n\n使用-S 来把包信息写到 package.json 中.\n\n## 使用\n\n```js\nconst mysql = require(\"mysql\");\n\nconst config = {\n  host: \"mysql ip\",\n  user: \"root\",\n  password: \"123456\",\n  database: \"mysql database\"\n};\n\n//使用 config 创建连接池\n\nconst pool = mysql.createPool(config.config);\n```\n\n```js\n//使用 promise封装查询函数\n\nlet query = (sql, values) => {\n  return new Promise((resolve, reject) => {\n    pool.getConnection((err, connection) => {\n      if (err) {\n        reject(err);\n      } else {\n        connection.query(sql, values, (err, rows) => {\n          if (err) {\n            reject({ err: err });\n          } else {\n            resolve(rows);\n          }\n          connection.release();\n        });\n      }\n    });\n  });\n};\n```\n\n```js\n\n//使用\n\nlet result = await queryByLoginName(ctx.request.body.loginName);\nif (result.length == 0) {\n  util.response(ctx, 1000, \"账户不存在\");\n} else {\n    ...\n}\n\nqueryByLoginName: async name => {\n    let sql = `SELECT * FROM user WHERE login_name = \"${name}\"`;\n    let data = await query(sql);\n    return data;\n  },\n```\n\n## extra\n\n### 封装查询结果\n\n定义 `const [err,data]`来 分别接收 `promise.reject()`的 `err`和 `project.resolve()`的`data`.\n\n```js\n\n\nawaitWrap: promise => {\n    return promise.then(data => [null, data]).catch(err => [err, null]);\n  }\n\n\n  check: async function(ctx) {\n    const [err, data] = await awaitWrap(token.verifyJwt(ctx));\n    if (err) {\n      return { status: false, data: err.message };\n    }\n    ...\n  }\n```\n\n### js 生成 sql 语句\n\n自己一点一点拼接 sql 语句很麻烦,这里我用了[https://github.com/wangweianger/mysqls/blob/6a1e7590a5c45f5d5600a6964a1bc474fc2972f3/docs/curd/update.md](https://github.com/wangweianger/mysqls/blob/6a1e7590a5c45f5d5600a6964a1bc474fc2972f3/docs/curd/update.md),来自动生成 sql 语句.\n\n#### 安装\n\n        npm install mysqls --save\n\n#### 使用\n详细的使用方法可以看下这个轮子的作者写的[文档](https://wangweianger.gitbooks.io/node-transform-mysql/content/docs/curd/update.html),十分详细.\n```js\nconst genSql = require(\"node-transform-mysql\");\nupdateUser: async (ctx, jwt) => {\n  let userId = ctx.request.body.id;\n  let sqlQuery = {};\n  if (ctx.request.body.status) {\n    sqlQuery.status = ctx.request.body.status;\n  }\n  if (ctx.request.body.nickName) {\n    sqlQuery.nick_name = ctx.request.body.nickName;\n  }\n  if (ctx.request.body.adminType) {\n    sqlQuery.admin_type = ctx.request.body.adminType;\n  }\n  let sql = genSql\n    .table(\"user\")\n    .data(sqlQuery)\n    .where({ id: userId })\n    .update();\n\n  const [err, data] = await util.awaitWrap(query(sql));\n  if (err) {\n    return { data: err.err.code, status: false };\n  }\n  return { data: data.message, status: true };\n};\n```\n","source":"_posts/2019.09.29.koaMysql1.md","raw":"---\ntitle: koa连接 mysql 进行 crud\ntags: [koa, nodejs, mysql]\ncategories: 随笔\n---\n\n> 使用 koa 的 mysql 模块可以方便地连接 mysql 并进行 crud 操作.\n\n## npm 安装 mysql 模块\n\n    npm i mysql -S\n\n使用-S 来把包信息写到 package.json 中.\n\n## 使用\n\n```js\nconst mysql = require(\"mysql\");\n\nconst config = {\n  host: \"mysql ip\",\n  user: \"root\",\n  password: \"123456\",\n  database: \"mysql database\"\n};\n\n//使用 config 创建连接池\n\nconst pool = mysql.createPool(config.config);\n```\n\n```js\n//使用 promise封装查询函数\n\nlet query = (sql, values) => {\n  return new Promise((resolve, reject) => {\n    pool.getConnection((err, connection) => {\n      if (err) {\n        reject(err);\n      } else {\n        connection.query(sql, values, (err, rows) => {\n          if (err) {\n            reject({ err: err });\n          } else {\n            resolve(rows);\n          }\n          connection.release();\n        });\n      }\n    });\n  });\n};\n```\n\n```js\n\n//使用\n\nlet result = await queryByLoginName(ctx.request.body.loginName);\nif (result.length == 0) {\n  util.response(ctx, 1000, \"账户不存在\");\n} else {\n    ...\n}\n\nqueryByLoginName: async name => {\n    let sql = `SELECT * FROM user WHERE login_name = \"${name}\"`;\n    let data = await query(sql);\n    return data;\n  },\n```\n\n## extra\n\n### 封装查询结果\n\n定义 `const [err,data]`来 分别接收 `promise.reject()`的 `err`和 `project.resolve()`的`data`.\n\n```js\n\n\nawaitWrap: promise => {\n    return promise.then(data => [null, data]).catch(err => [err, null]);\n  }\n\n\n  check: async function(ctx) {\n    const [err, data] = await awaitWrap(token.verifyJwt(ctx));\n    if (err) {\n      return { status: false, data: err.message };\n    }\n    ...\n  }\n```\n\n### js 生成 sql 语句\n\n自己一点一点拼接 sql 语句很麻烦,这里我用了[https://github.com/wangweianger/mysqls/blob/6a1e7590a5c45f5d5600a6964a1bc474fc2972f3/docs/curd/update.md](https://github.com/wangweianger/mysqls/blob/6a1e7590a5c45f5d5600a6964a1bc474fc2972f3/docs/curd/update.md),来自动生成 sql 语句.\n\n#### 安装\n\n        npm install mysqls --save\n\n#### 使用\n详细的使用方法可以看下这个轮子的作者写的[文档](https://wangweianger.gitbooks.io/node-transform-mysql/content/docs/curd/update.html),十分详细.\n```js\nconst genSql = require(\"node-transform-mysql\");\nupdateUser: async (ctx, jwt) => {\n  let userId = ctx.request.body.id;\n  let sqlQuery = {};\n  if (ctx.request.body.status) {\n    sqlQuery.status = ctx.request.body.status;\n  }\n  if (ctx.request.body.nickName) {\n    sqlQuery.nick_name = ctx.request.body.nickName;\n  }\n  if (ctx.request.body.adminType) {\n    sqlQuery.admin_type = ctx.request.body.adminType;\n  }\n  let sql = genSql\n    .table(\"user\")\n    .data(sqlQuery)\n    .where({ id: userId })\n    .update();\n\n  const [err, data] = await util.awaitWrap(query(sql));\n  if (err) {\n    return { data: err.err.code, status: false };\n  }\n  return { data: data.message, status: true };\n};\n```\n","slug":"2019.09.29.koaMysql1","published":1,"date":"2019-09-29T09:14:44.174Z","updated":"2019-09-29T09:30:12.051Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziiqe001krh9zc1f8be8j","content":"<blockquote>\n<p>使用 koa 的 mysql 模块可以方便地连接 mysql 并进行 crud 操作.</p>\n</blockquote>\n<h2 id=\"npm-安装-mysql-模块\"><a href=\"#npm-安装-mysql-模块\" class=\"headerlink\" title=\"npm 安装 mysql 模块\"></a>npm 安装 mysql 模块</h2><pre><code>npm i mysql -S\n</code></pre><p>使用-S 来把包信息写到 package.json 中.</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">\"mysql\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> config = &#123;</span><br><span class=\"line\">  host: <span class=\"string\">\"mysql ip\"</span>,</span><br><span class=\"line\">  user: <span class=\"string\">\"root\"</span>,</span><br><span class=\"line\">  password: <span class=\"string\">\"123456\"</span>,</span><br><span class=\"line\">  database: <span class=\"string\">\"mysql database\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用 config 创建连接池</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> pool = mysql.createPool(config.config);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用 promise封装查询函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> query = <span class=\"function\">(<span class=\"params\">sql, values</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    pool.getConnection(<span class=\"function\">(<span class=\"params\">err, connection</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        reject(err);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        connection.query(sql, values, (err, rows) =&gt; &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            reject(&#123; <span class=\"attr\">err</span>: err &#125;);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            resolve(rows);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          connection.release();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> result = <span class=\"keyword\">await</span> queryByLoginName(ctx.request.body.loginName);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (result.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">  util.response(ctx, <span class=\"number\">1000</span>, <span class=\"string\">\"账户不存在\"</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">queryByLoginName: <span class=\"keyword\">async</span> name =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sql = <span class=\"string\">`SELECT * FROM user WHERE login_name = \"<span class=\"subst\">$&#123;name&#125;</span>\"`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> data = <span class=\"keyword\">await</span> query(sql);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<h2 id=\"extra\"><a href=\"#extra\" class=\"headerlink\" title=\"extra\"></a>extra</h2><h3 id=\"封装查询结果\"><a href=\"#封装查询结果\" class=\"headerlink\" title=\"封装查询结果\"></a>封装查询结果</h3><p>定义 <code>const [err,data]</code>来 分别接收 <code>promise.reject()</code>的 <code>err</code>和 <code>project.resolve()</code>的<code>data</code>.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">awaitWrap: <span class=\"function\"><span class=\"params\">promise</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> promise.then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> [<span class=\"literal\">null</span>, data]).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> [err, <span class=\"literal\">null</span>]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  check: <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ctx</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [err, data] = <span class=\"keyword\">await</span> awaitWrap(token.verifyJwt(ctx));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">status</span>: <span class=\"literal\">false</span>, <span class=\"attr\">data</span>: err.message &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"js-生成-sql-语句\"><a href=\"#js-生成-sql-语句\" class=\"headerlink\" title=\"js 生成 sql 语句\"></a>js 生成 sql 语句</h3><p>自己一点一点拼接 sql 语句很麻烦,这里我用了<a href=\"https://github.com/wangweianger/mysqls/blob/6a1e7590a5c45f5d5600a6964a1bc474fc2972f3/docs/curd/update.md\" target=\"_blank\" rel=\"noopener\">https://github.com/wangweianger/mysqls/blob/6a1e7590a5c45f5d5600a6964a1bc474fc2972f3/docs/curd/update.md</a>,来自动生成 sql 语句.</p>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><pre><code>npm install mysqls --save\n</code></pre><h4 id=\"使用-1\"><a href=\"#使用-1\" class=\"headerlink\" title=\"使用\"></a>使用</h4><p>详细的使用方法可以看下这个轮子的作者写的<a href=\"https://wangweianger.gitbooks.io/node-transform-mysql/content/docs/curd/update.html\" target=\"_blank\" rel=\"noopener\">文档</a>,十分详细.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> genSql = <span class=\"built_in\">require</span>(<span class=\"string\">\"node-transform-mysql\"</span>);</span><br><span class=\"line\">updateUser: <span class=\"keyword\">async</span> (ctx, jwt) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> userId = ctx.request.body.id;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sqlQuery = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ctx.request.body.status) &#123;</span><br><span class=\"line\">    sqlQuery.status = ctx.request.body.status;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ctx.request.body.nickName) &#123;</span><br><span class=\"line\">    sqlQuery.nick_name = ctx.request.body.nickName;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ctx.request.body.adminType) &#123;</span><br><span class=\"line\">    sqlQuery.admin_type = ctx.request.body.adminType;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sql = genSql</span><br><span class=\"line\">    .table(<span class=\"string\">\"user\"</span>)</span><br><span class=\"line\">    .data(sqlQuery)</span><br><span class=\"line\">    .where(&#123; <span class=\"attr\">id</span>: userId &#125;)</span><br><span class=\"line\">    .update();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> [err, data] = <span class=\"keyword\">await</span> util.awaitWrap(query(sql));</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; <span class=\"attr\">data</span>: err.err.code, <span class=\"attr\">status</span>: <span class=\"literal\">false</span> &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">data</span>: data.message, <span class=\"attr\">status</span>: <span class=\"literal\">true</span> &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>使用 koa 的 mysql 模块可以方便地连接 mysql 并进行 crud 操作.</p>\n</blockquote>\n<h2 id=\"npm-安装-mysql-模块\"><a href=\"#npm-安装-mysql-模块\" class=\"headerlink\" title=\"npm 安装 mysql 模块\"></a>npm 安装 mysql 模块</h2><pre><code>npm i mysql -S\n</code></pre><p>使用-S 来把包信息写到 package.json 中.</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">\"mysql\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> config = &#123;</span><br><span class=\"line\">  host: <span class=\"string\">\"mysql ip\"</span>,</span><br><span class=\"line\">  user: <span class=\"string\">\"root\"</span>,</span><br><span class=\"line\">  password: <span class=\"string\">\"123456\"</span>,</span><br><span class=\"line\">  database: <span class=\"string\">\"mysql database\"</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用 config 创建连接池</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> pool = mysql.createPool(config.config);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用 promise封装查询函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> query = <span class=\"function\">(<span class=\"params\">sql, values</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    pool.getConnection(<span class=\"function\">(<span class=\"params\">err, connection</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        reject(err);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        connection.query(sql, values, (err, rows) =&gt; &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            reject(&#123; <span class=\"attr\">err</span>: err &#125;);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            resolve(rows);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          connection.release();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> result = <span class=\"keyword\">await</span> queryByLoginName(ctx.request.body.loginName);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (result.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">  util.response(ctx, <span class=\"number\">1000</span>, <span class=\"string\">\"账户不存在\"</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">queryByLoginName: <span class=\"keyword\">async</span> name =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sql = <span class=\"string\">`SELECT * FROM user WHERE login_name = \"<span class=\"subst\">$&#123;name&#125;</span>\"`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> data = <span class=\"keyword\">await</span> query(sql);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<h2 id=\"extra\"><a href=\"#extra\" class=\"headerlink\" title=\"extra\"></a>extra</h2><h3 id=\"封装查询结果\"><a href=\"#封装查询结果\" class=\"headerlink\" title=\"封装查询结果\"></a>封装查询结果</h3><p>定义 <code>const [err,data]</code>来 分别接收 <code>promise.reject()</code>的 <code>err</code>和 <code>project.resolve()</code>的<code>data</code>.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">awaitWrap: <span class=\"function\"><span class=\"params\">promise</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> promise.then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> [<span class=\"literal\">null</span>, data]).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> [err, <span class=\"literal\">null</span>]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  check: <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ctx</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [err, data] = <span class=\"keyword\">await</span> awaitWrap(token.verifyJwt(ctx));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">status</span>: <span class=\"literal\">false</span>, <span class=\"attr\">data</span>: err.message &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"js-生成-sql-语句\"><a href=\"#js-生成-sql-语句\" class=\"headerlink\" title=\"js 生成 sql 语句\"></a>js 生成 sql 语句</h3><p>自己一点一点拼接 sql 语句很麻烦,这里我用了<a href=\"https://github.com/wangweianger/mysqls/blob/6a1e7590a5c45f5d5600a6964a1bc474fc2972f3/docs/curd/update.md\" target=\"_blank\" rel=\"noopener\">https://github.com/wangweianger/mysqls/blob/6a1e7590a5c45f5d5600a6964a1bc474fc2972f3/docs/curd/update.md</a>,来自动生成 sql 语句.</p>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><pre><code>npm install mysqls --save\n</code></pre><h4 id=\"使用-1\"><a href=\"#使用-1\" class=\"headerlink\" title=\"使用\"></a>使用</h4><p>详细的使用方法可以看下这个轮子的作者写的<a href=\"https://wangweianger.gitbooks.io/node-transform-mysql/content/docs/curd/update.html\" target=\"_blank\" rel=\"noopener\">文档</a>,十分详细.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> genSql = <span class=\"built_in\">require</span>(<span class=\"string\">\"node-transform-mysql\"</span>);</span><br><span class=\"line\">updateUser: <span class=\"keyword\">async</span> (ctx, jwt) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> userId = ctx.request.body.id;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sqlQuery = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ctx.request.body.status) &#123;</span><br><span class=\"line\">    sqlQuery.status = ctx.request.body.status;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ctx.request.body.nickName) &#123;</span><br><span class=\"line\">    sqlQuery.nick_name = ctx.request.body.nickName;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ctx.request.body.adminType) &#123;</span><br><span class=\"line\">    sqlQuery.admin_type = ctx.request.body.adminType;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sql = genSql</span><br><span class=\"line\">    .table(<span class=\"string\">\"user\"</span>)</span><br><span class=\"line\">    .data(sqlQuery)</span><br><span class=\"line\">    .where(&#123; <span class=\"attr\">id</span>: userId &#125;)</span><br><span class=\"line\">    .update();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> [err, data] = <span class=\"keyword\">await</span> util.awaitWrap(query(sql));</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123; <span class=\"attr\">data</span>: err.err.code, <span class=\"attr\">status</span>: <span class=\"literal\">false</span> &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">data</span>: data.message, <span class=\"attr\">status</span>: <span class=\"literal\">true</span> &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"nodejs 实现 jwt 鉴权","_content":"\n# 当前 session 认证存在的问题\n\n当前 session 认证的流程为:\n\n1、用户向服务器发送用户名和密码\n\n2、服务器验证通过后，在当前对话（session）里面保存相关数据，比如用户角色、登录时间等等\n\n3、服务器向用户返回一个 session_id，写入用户的 Cookie\n\n4、用户随后的每一次请求，都会通过 Cookie，将 session_id 传回服务器\n\n5、服务器收到 session_id，找到前期保存的数据，由此得知用户的身份\n\n如果服务器做了集群,就要求 session 共享,这样提高了开发的难度,所有的 session 都要放在持久层供服务器存取,一旦持久层出现问题,服务也就挂掉了.所以有人提出了一种叫 jwt(JSON Web Token) 的技术.这种技术提出将所有的信息传给前端,后端只负责解析.\n\n# jwt 的原理\n\n服务器认证以后,就会传给前端一个 json 对象,这个 json 对象是经过加密的,服务器只靠这个 json 来鉴别用户.从而服务器不会再保存任何数据,实现后端无状态,方便扩展.\n\n# jwt 的使用\n\n实际的 jwt 如下:\n\n    eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsb2dpbk5hbWUiOiJoaGIwNTQiLCJzeXN0ZW1JZCI6IjEiLCJzdGF0dXMiOjEsImFkbWluVHlwZSI6NCwic2lnblRpbWUiOiIxNTY5NzQ1NjAyIiwiaWF0IjoxNTY5NzQ1NjAyLCJleHAiOjE1Njk3NTI4MDJ9.929QHnye3W3XuJVpY9GFrcTTTFxMBfEOBFCwL7HqxE0\n\njwt 由 `.`分成三个部分.分别是 header,payload 和 Signature.\nheader 和 payload 都使用 base64 编码,所以可以简单地解析出其中的内容.\n\n## header\n\n    eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\n\n使用 base64 解码的结果:\n\n    {\"alg\":\"HS256\",\"typ\":\"JWT\"}\n\n上面代码中，alg 属性表示签名的算法（algorithm），默认是 HMAC SHA256（写成 HS256）；typ 属性表示这个令牌（token）的类型（type），JWT 令牌统一写为 JWT。\n\n最后，将上面的 JSON 对象使用 Base64URL 算法（详见后文）转成字符串。\n\n## payload\n\n    eyJsb2dpbk5hbWUiOiJoaGIwNTQiLCJzeXN0ZW1JZCI6IjEiLCJzdGF0dXMiOjEsImFkbWluVHlwZSI6NCwic2lnblRpbWUiOiIxNTY5NzQ1NjAyIiwiaWF0IjoxNTY5NzQ1NjAyLCJleHAiOjE1Njk3NTI4MDJ9\n\n使用 base64 解码的结果:\n\n```js\n    {\"loginName\":\"hhb054\",\"systemId\":\"1\",\"status\":1,\"adminType\":4,\"signTime\":\"1569745602\",\"iat\":1569745602,\"exp\":1569752802}\n\n```\n\n注意，JWT 默认是不加密的，任何人都可以读到，所以不要把秘密信息放在这个部分。\n\n这个 JSON 对象也要使用 Base64URL 算法转成字符串.\n\n## Signature\n\nSignature 部分是对前两部分的签名，防止数据篡改。\n\n首先，需要指定一个密钥（secret）。这个密钥只有服务器才知道，不能泄露给用户。然后，使用 Header 里面指定的签名算法（默认是 HMAC SHA256），按照下面的公式产生签名。\n\n    HMACSHA256(\n    base64UrlEncode(header) + \".\" +\n    base64UrlEncode(payload),\n    secret)\n\n算出签名以后，把 Header、Payload、Signature 三个部分拼成一个字符串，每个部分之间用\"点\"（.）分隔，就可以返回给用户。\n\n## base64 url\n\n前面提到，Header 和 Payload 串型化的算法是 Base64URL。这个算法跟 Base64 算法基本类似，但有一些小的不同。\n\nJWT 作为一个令牌（token），有些场合可能会放到 URL（比如 api.example.com/?token=xxx）。Base64 有三个字符+、/和=，在 URL 里面有特殊含义，所以要被替换掉：=被省略、+替换成-，/替换成\\_ 。这就是 Base64URL 算法。\n\n## jwt 的特点\n\n(1）JWT 默认是不加密，但也是可以加密的。生成原始 Token 以后，可以用密钥再加密一次。\n\n（2）JWT 不加密的情况下，不能将秘密数据写入 JWT。\n\n（3）JWT 不仅可以用于认证，也可以用于交换信息。有效使用 JWT，可以降低服务器查询数据库的次数。\n\n（4）JWT 的最大缺点是，由于服务器不保存 session 状态，因此无法在使用过程中废止某个 token，或者更改 token 的权限。也就是说，一旦 JWT 签发了，在到期之前就会始终有效，除非服务器部署额外的逻辑。\n\n（5）JWT 本身包含了认证信息，一旦泄露，任何人都可以获得该令牌的所有权限。为了减少盗用，JWT 的有效期应该设置得比较短。对于一些比较重要的权限，使用时应该再次对用户进行认证。\n\n（6）为了减少盗用，JWT 不应该使用 HTTP 协议明码传输，要使用 HTTPS 协议传输。\n\n# 在 node 项目中实现 jwt\n\n安装 jsonwebtoken\n\n    npm i jsonwebtoken -S\n\n使用\n\n```js\nconst jwt = require(\"jsonwebtoken\");\n//签发 token\n//在验证了用户名密码正确之后，调用 jsonwebtoken 的 sign() 方法来生成token，\n//接收三个参数，\n//第一个是载荷，用于编码后存储在 token 中的数据，也是验证 token 后可以拿到的数据；\n//第二个是密钥，自己定义的，验证的时候也是要相同的密钥才能解码；\n//第三个是options，可以设置 token 的过期时间。\nconst token = jwt.sign(\n  {\n    name: result.name,\n    _id: result._id\n  },\n  \"my_token\",\n  { expiresIn: \"2h\" }\n);\n//验证 token\n//token 放在请求头中的authorization里面\nverifyJwt: ctx => {\n    return new Promise((resolve, reject) => {\n      jwt.verify(ctx.request.header.authorization, key.privKey, (err, decode) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(decode);\n        }\n      });\n    });\n  }\n```\n\n# 解决 token 过期时间问题\n前面签署 token 的时候,设置了 expireIn 过期时间,但是后端无法让 jwt 提前过期,也无法解决多个 token 同时操作的问题,这里我采用了一种折中的方式,在mysql 数据库中添加了一个 refresh_time 参数,每次登陆以后,保证 refresh_time 与最新的 token 中的自定的 signTime保持一致.\n这样,在前端调用接口是,先解析 token,再根据解析出来的 payload 来判断是不是最新的 token,从而做到同时只有一个 token 有效的功能.\n代码如下:\n```js\n\ncheck: async function(ctx) {\n    const [err, data] = await util.awaitWrap(token.verifyJwt(ctx));\n    if (err) {\n      return { status: false, data: err.message };\n    }\n    let queryResult = await sql.queryByLoginName(data.loginName);\n    if (queryResult.length == 0) {\n      return { status: false, data: \"token 校验出错\" };\n    } else if (queryResult[0].refresh_time == data.signTime) {\n      return { status: true, data: queryResult, jwt: data };\n    } else {\n      return { status: false, data: \"token 过期\" };\n    }\n  }\n```\n","source":"_posts/2019.09.30.jwtVerify.md","raw":"---\ntitle: nodejs 实现 jwt 鉴权\ntags: [nodejs, jwt]\ncategories: 技术\n---\n\n# 当前 session 认证存在的问题\n\n当前 session 认证的流程为:\n\n1、用户向服务器发送用户名和密码\n\n2、服务器验证通过后，在当前对话（session）里面保存相关数据，比如用户角色、登录时间等等\n\n3、服务器向用户返回一个 session_id，写入用户的 Cookie\n\n4、用户随后的每一次请求，都会通过 Cookie，将 session_id 传回服务器\n\n5、服务器收到 session_id，找到前期保存的数据，由此得知用户的身份\n\n如果服务器做了集群,就要求 session 共享,这样提高了开发的难度,所有的 session 都要放在持久层供服务器存取,一旦持久层出现问题,服务也就挂掉了.所以有人提出了一种叫 jwt(JSON Web Token) 的技术.这种技术提出将所有的信息传给前端,后端只负责解析.\n\n# jwt 的原理\n\n服务器认证以后,就会传给前端一个 json 对象,这个 json 对象是经过加密的,服务器只靠这个 json 来鉴别用户.从而服务器不会再保存任何数据,实现后端无状态,方便扩展.\n\n# jwt 的使用\n\n实际的 jwt 如下:\n\n    eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsb2dpbk5hbWUiOiJoaGIwNTQiLCJzeXN0ZW1JZCI6IjEiLCJzdGF0dXMiOjEsImFkbWluVHlwZSI6NCwic2lnblRpbWUiOiIxNTY5NzQ1NjAyIiwiaWF0IjoxNTY5NzQ1NjAyLCJleHAiOjE1Njk3NTI4MDJ9.929QHnye3W3XuJVpY9GFrcTTTFxMBfEOBFCwL7HqxE0\n\njwt 由 `.`分成三个部分.分别是 header,payload 和 Signature.\nheader 和 payload 都使用 base64 编码,所以可以简单地解析出其中的内容.\n\n## header\n\n    eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\n\n使用 base64 解码的结果:\n\n    {\"alg\":\"HS256\",\"typ\":\"JWT\"}\n\n上面代码中，alg 属性表示签名的算法（algorithm），默认是 HMAC SHA256（写成 HS256）；typ 属性表示这个令牌（token）的类型（type），JWT 令牌统一写为 JWT。\n\n最后，将上面的 JSON 对象使用 Base64URL 算法（详见后文）转成字符串。\n\n## payload\n\n    eyJsb2dpbk5hbWUiOiJoaGIwNTQiLCJzeXN0ZW1JZCI6IjEiLCJzdGF0dXMiOjEsImFkbWluVHlwZSI6NCwic2lnblRpbWUiOiIxNTY5NzQ1NjAyIiwiaWF0IjoxNTY5NzQ1NjAyLCJleHAiOjE1Njk3NTI4MDJ9\n\n使用 base64 解码的结果:\n\n```js\n    {\"loginName\":\"hhb054\",\"systemId\":\"1\",\"status\":1,\"adminType\":4,\"signTime\":\"1569745602\",\"iat\":1569745602,\"exp\":1569752802}\n\n```\n\n注意，JWT 默认是不加密的，任何人都可以读到，所以不要把秘密信息放在这个部分。\n\n这个 JSON 对象也要使用 Base64URL 算法转成字符串.\n\n## Signature\n\nSignature 部分是对前两部分的签名，防止数据篡改。\n\n首先，需要指定一个密钥（secret）。这个密钥只有服务器才知道，不能泄露给用户。然后，使用 Header 里面指定的签名算法（默认是 HMAC SHA256），按照下面的公式产生签名。\n\n    HMACSHA256(\n    base64UrlEncode(header) + \".\" +\n    base64UrlEncode(payload),\n    secret)\n\n算出签名以后，把 Header、Payload、Signature 三个部分拼成一个字符串，每个部分之间用\"点\"（.）分隔，就可以返回给用户。\n\n## base64 url\n\n前面提到，Header 和 Payload 串型化的算法是 Base64URL。这个算法跟 Base64 算法基本类似，但有一些小的不同。\n\nJWT 作为一个令牌（token），有些场合可能会放到 URL（比如 api.example.com/?token=xxx）。Base64 有三个字符+、/和=，在 URL 里面有特殊含义，所以要被替换掉：=被省略、+替换成-，/替换成\\_ 。这就是 Base64URL 算法。\n\n## jwt 的特点\n\n(1）JWT 默认是不加密，但也是可以加密的。生成原始 Token 以后，可以用密钥再加密一次。\n\n（2）JWT 不加密的情况下，不能将秘密数据写入 JWT。\n\n（3）JWT 不仅可以用于认证，也可以用于交换信息。有效使用 JWT，可以降低服务器查询数据库的次数。\n\n（4）JWT 的最大缺点是，由于服务器不保存 session 状态，因此无法在使用过程中废止某个 token，或者更改 token 的权限。也就是说，一旦 JWT 签发了，在到期之前就会始终有效，除非服务器部署额外的逻辑。\n\n（5）JWT 本身包含了认证信息，一旦泄露，任何人都可以获得该令牌的所有权限。为了减少盗用，JWT 的有效期应该设置得比较短。对于一些比较重要的权限，使用时应该再次对用户进行认证。\n\n（6）为了减少盗用，JWT 不应该使用 HTTP 协议明码传输，要使用 HTTPS 协议传输。\n\n# 在 node 项目中实现 jwt\n\n安装 jsonwebtoken\n\n    npm i jsonwebtoken -S\n\n使用\n\n```js\nconst jwt = require(\"jsonwebtoken\");\n//签发 token\n//在验证了用户名密码正确之后，调用 jsonwebtoken 的 sign() 方法来生成token，\n//接收三个参数，\n//第一个是载荷，用于编码后存储在 token 中的数据，也是验证 token 后可以拿到的数据；\n//第二个是密钥，自己定义的，验证的时候也是要相同的密钥才能解码；\n//第三个是options，可以设置 token 的过期时间。\nconst token = jwt.sign(\n  {\n    name: result.name,\n    _id: result._id\n  },\n  \"my_token\",\n  { expiresIn: \"2h\" }\n);\n//验证 token\n//token 放在请求头中的authorization里面\nverifyJwt: ctx => {\n    return new Promise((resolve, reject) => {\n      jwt.verify(ctx.request.header.authorization, key.privKey, (err, decode) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(decode);\n        }\n      });\n    });\n  }\n```\n\n# 解决 token 过期时间问题\n前面签署 token 的时候,设置了 expireIn 过期时间,但是后端无法让 jwt 提前过期,也无法解决多个 token 同时操作的问题,这里我采用了一种折中的方式,在mysql 数据库中添加了一个 refresh_time 参数,每次登陆以后,保证 refresh_time 与最新的 token 中的自定的 signTime保持一致.\n这样,在前端调用接口是,先解析 token,再根据解析出来的 payload 来判断是不是最新的 token,从而做到同时只有一个 token 有效的功能.\n代码如下:\n```js\n\ncheck: async function(ctx) {\n    const [err, data] = await util.awaitWrap(token.verifyJwt(ctx));\n    if (err) {\n      return { status: false, data: err.message };\n    }\n    let queryResult = await sql.queryByLoginName(data.loginName);\n    if (queryResult.length == 0) {\n      return { status: false, data: \"token 校验出错\" };\n    } else if (queryResult[0].refresh_time == data.signTime) {\n      return { status: true, data: queryResult, jwt: data };\n    } else {\n      return { status: false, data: \"token 过期\" };\n    }\n  }\n```\n","slug":"2019.09.30.jwtVerify","published":1,"date":"2019-09-30T01:52:28.220Z","updated":"2019-09-30T02:36:43.878Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziiqe001lrh9z1gpe2mw2","content":"<h1 id=\"当前-session-认证存在的问题\"><a href=\"#当前-session-认证存在的问题\" class=\"headerlink\" title=\"当前 session 认证存在的问题\"></a>当前 session 认证存在的问题</h1><p>当前 session 认证的流程为:</p>\n<p>1、用户向服务器发送用户名和密码</p>\n<p>2、服务器验证通过后，在当前对话（session）里面保存相关数据，比如用户角色、登录时间等等</p>\n<p>3、服务器向用户返回一个 session_id，写入用户的 Cookie</p>\n<p>4、用户随后的每一次请求，都会通过 Cookie，将 session_id 传回服务器</p>\n<p>5、服务器收到 session_id，找到前期保存的数据，由此得知用户的身份</p>\n<p>如果服务器做了集群,就要求 session 共享,这样提高了开发的难度,所有的 session 都要放在持久层供服务器存取,一旦持久层出现问题,服务也就挂掉了.所以有人提出了一种叫 jwt(JSON Web Token) 的技术.这种技术提出将所有的信息传给前端,后端只负责解析.</p>\n<h1 id=\"jwt-的原理\"><a href=\"#jwt-的原理\" class=\"headerlink\" title=\"jwt 的原理\"></a>jwt 的原理</h1><p>服务器认证以后,就会传给前端一个 json 对象,这个 json 对象是经过加密的,服务器只靠这个 json 来鉴别用户.从而服务器不会再保存任何数据,实现后端无状态,方便扩展.</p>\n<h1 id=\"jwt-的使用\"><a href=\"#jwt-的使用\" class=\"headerlink\" title=\"jwt 的使用\"></a>jwt 的使用</h1><p>实际的 jwt 如下:</p>\n<pre><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsb2dpbk5hbWUiOiJoaGIwNTQiLCJzeXN0ZW1JZCI6IjEiLCJzdGF0dXMiOjEsImFkbWluVHlwZSI6NCwic2lnblRpbWUiOiIxNTY5NzQ1NjAyIiwiaWF0IjoxNTY5NzQ1NjAyLCJleHAiOjE1Njk3NTI4MDJ9.929QHnye3W3XuJVpY9GFrcTTTFxMBfEOBFCwL7HqxE0\n</code></pre><p>jwt 由 <code>.</code>分成三个部分.分别是 header,payload 和 Signature.<br>header 和 payload 都使用 base64 编码,所以可以简单地解析出其中的内容.</p>\n<h2 id=\"header\"><a href=\"#header\" class=\"headerlink\" title=\"header\"></a>header</h2><pre><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\n</code></pre><p>使用 base64 解码的结果:</p>\n<pre><code>{&quot;alg&quot;:&quot;HS256&quot;,&quot;typ&quot;:&quot;JWT&quot;}\n</code></pre><p>上面代码中，alg 属性表示签名的算法（algorithm），默认是 HMAC SHA256（写成 HS256）；typ 属性表示这个令牌（token）的类型（type），JWT 令牌统一写为 JWT。</p>\n<p>最后，将上面的 JSON 对象使用 Base64URL 算法（详见后文）转成字符串。</p>\n<h2 id=\"payload\"><a href=\"#payload\" class=\"headerlink\" title=\"payload\"></a>payload</h2><pre><code>eyJsb2dpbk5hbWUiOiJoaGIwNTQiLCJzeXN0ZW1JZCI6IjEiLCJzdGF0dXMiOjEsImFkbWluVHlwZSI6NCwic2lnblRpbWUiOiIxNTY5NzQ1NjAyIiwiaWF0IjoxNTY5NzQ1NjAyLCJleHAiOjE1Njk3NTI4MDJ9\n</code></pre><p>使用 base64 解码的结果:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">\"loginName\"</span>:<span class=\"string\">\"hhb054\"</span>,<span class=\"string\">\"systemId\"</span>:<span class=\"string\">\"1\"</span>,<span class=\"string\">\"status\"</span>:<span class=\"number\">1</span>,<span class=\"string\">\"adminType\"</span>:<span class=\"number\">4</span>,<span class=\"string\">\"signTime\"</span>:<span class=\"string\">\"1569745602\"</span>,<span class=\"string\">\"iat\"</span>:<span class=\"number\">1569745602</span>,<span class=\"string\">\"exp\"</span>:<span class=\"number\">1569752802</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>注意，JWT 默认是不加密的，任何人都可以读到，所以不要把秘密信息放在这个部分。</p>\n<p>这个 JSON 对象也要使用 Base64URL 算法转成字符串.</p>\n<h2 id=\"Signature\"><a href=\"#Signature\" class=\"headerlink\" title=\"Signature\"></a>Signature</h2><p>Signature 部分是对前两部分的签名，防止数据篡改。</p>\n<p>首先，需要指定一个密钥（secret）。这个密钥只有服务器才知道，不能泄露给用户。然后，使用 Header 里面指定的签名算法（默认是 HMAC SHA256），按照下面的公式产生签名。</p>\n<pre><code>HMACSHA256(\nbase64UrlEncode(header) + &quot;.&quot; +\nbase64UrlEncode(payload),\nsecret)\n</code></pre><p>算出签名以后，把 Header、Payload、Signature 三个部分拼成一个字符串，每个部分之间用”点”（.）分隔，就可以返回给用户。</p>\n<h2 id=\"base64-url\"><a href=\"#base64-url\" class=\"headerlink\" title=\"base64 url\"></a>base64 url</h2><p>前面提到，Header 和 Payload 串型化的算法是 Base64URL。这个算法跟 Base64 算法基本类似，但有一些小的不同。</p>\n<p>JWT 作为一个令牌（token），有些场合可能会放到 URL（比如 api.example.com/?token=xxx）。Base64 有三个字符+、/和=，在 URL 里面有特殊含义，所以要被替换掉：=被省略、+替换成-，/替换成_ 。这就是 Base64URL 算法。</p>\n<h2 id=\"jwt-的特点\"><a href=\"#jwt-的特点\" class=\"headerlink\" title=\"jwt 的特点\"></a>jwt 的特点</h2><p>(1）JWT 默认是不加密，但也是可以加密的。生成原始 Token 以后，可以用密钥再加密一次。</p>\n<p>（2）JWT 不加密的情况下，不能将秘密数据写入 JWT。</p>\n<p>（3）JWT 不仅可以用于认证，也可以用于交换信息。有效使用 JWT，可以降低服务器查询数据库的次数。</p>\n<p>（4）JWT 的最大缺点是，由于服务器不保存 session 状态，因此无法在使用过程中废止某个 token，或者更改 token 的权限。也就是说，一旦 JWT 签发了，在到期之前就会始终有效，除非服务器部署额外的逻辑。</p>\n<p>（5）JWT 本身包含了认证信息，一旦泄露，任何人都可以获得该令牌的所有权限。为了减少盗用，JWT 的有效期应该设置得比较短。对于一些比较重要的权限，使用时应该再次对用户进行认证。</p>\n<p>（6）为了减少盗用，JWT 不应该使用 HTTP 协议明码传输，要使用 HTTPS 协议传输。</p>\n<h1 id=\"在-node-项目中实现-jwt\"><a href=\"#在-node-项目中实现-jwt\" class=\"headerlink\" title=\"在 node 项目中实现 jwt\"></a>在 node 项目中实现 jwt</h1><p>安装 jsonwebtoken</p>\n<pre><code>npm i jsonwebtoken -S\n</code></pre><p>使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> jwt = <span class=\"built_in\">require</span>(<span class=\"string\">\"jsonwebtoken\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//签发 token</span></span><br><span class=\"line\"><span class=\"comment\">//在验证了用户名密码正确之后，调用 jsonwebtoken 的 sign() 方法来生成token，</span></span><br><span class=\"line\"><span class=\"comment\">//接收三个参数，</span></span><br><span class=\"line\"><span class=\"comment\">//第一个是载荷，用于编码后存储在 token 中的数据，也是验证 token 后可以拿到的数据；</span></span><br><span class=\"line\"><span class=\"comment\">//第二个是密钥，自己定义的，验证的时候也是要相同的密钥才能解码；</span></span><br><span class=\"line\"><span class=\"comment\">//第三个是options，可以设置 token 的过期时间。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> token = jwt.sign(</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: result.name,</span><br><span class=\"line\">    _id: result._id</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"my_token\"</span>,</span><br><span class=\"line\">  &#123; <span class=\"attr\">expiresIn</span>: <span class=\"string\">\"2h\"</span> &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">//验证 token</span></span><br><span class=\"line\"><span class=\"comment\">//token 放在请求头中的authorization里面</span></span><br><span class=\"line\">verifyJwt: <span class=\"function\"><span class=\"params\">ctx</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      jwt.verify(ctx.request.header.authorization, key.privKey, (err, decode) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">          reject(err);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          resolve(decode);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"解决-token-过期时间问题\"><a href=\"#解决-token-过期时间问题\" class=\"headerlink\" title=\"解决 token 过期时间问题\"></a>解决 token 过期时间问题</h1><p>前面签署 token 的时候,设置了 expireIn 过期时间,但是后端无法让 jwt 提前过期,也无法解决多个 token 同时操作的问题,这里我采用了一种折中的方式,在mysql 数据库中添加了一个 refresh_time 参数,每次登陆以后,保证 refresh_time 与最新的 token 中的自定的 signTime保持一致.<br>这样,在前端调用接口是,先解析 token,再根据解析出来的 payload 来判断是不是最新的 token,从而做到同时只有一个 token 有效的功能.<br>代码如下:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">check: <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ctx</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [err, data] = <span class=\"keyword\">await</span> util.awaitWrap(token.verifyJwt(ctx));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">status</span>: <span class=\"literal\">false</span>, <span class=\"attr\">data</span>: err.message &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> queryResult = <span class=\"keyword\">await</span> sql.queryByLoginName(data.loginName);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (queryResult.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">status</span>: <span class=\"literal\">false</span>, <span class=\"attr\">data</span>: <span class=\"string\">\"token 校验出错\"</span> &#125;;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (queryResult[<span class=\"number\">0</span>].refresh_time == data.signTime) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">status</span>: <span class=\"literal\">true</span>, <span class=\"attr\">data</span>: queryResult, <span class=\"attr\">jwt</span>: data &#125;;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">status</span>: <span class=\"literal\">false</span>, <span class=\"attr\">data</span>: <span class=\"string\">\"token 过期\"</span> &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"当前-session-认证存在的问题\"><a href=\"#当前-session-认证存在的问题\" class=\"headerlink\" title=\"当前 session 认证存在的问题\"></a>当前 session 认证存在的问题</h1><p>当前 session 认证的流程为:</p>\n<p>1、用户向服务器发送用户名和密码</p>\n<p>2、服务器验证通过后，在当前对话（session）里面保存相关数据，比如用户角色、登录时间等等</p>\n<p>3、服务器向用户返回一个 session_id，写入用户的 Cookie</p>\n<p>4、用户随后的每一次请求，都会通过 Cookie，将 session_id 传回服务器</p>\n<p>5、服务器收到 session_id，找到前期保存的数据，由此得知用户的身份</p>\n<p>如果服务器做了集群,就要求 session 共享,这样提高了开发的难度,所有的 session 都要放在持久层供服务器存取,一旦持久层出现问题,服务也就挂掉了.所以有人提出了一种叫 jwt(JSON Web Token) 的技术.这种技术提出将所有的信息传给前端,后端只负责解析.</p>\n<h1 id=\"jwt-的原理\"><a href=\"#jwt-的原理\" class=\"headerlink\" title=\"jwt 的原理\"></a>jwt 的原理</h1><p>服务器认证以后,就会传给前端一个 json 对象,这个 json 对象是经过加密的,服务器只靠这个 json 来鉴别用户.从而服务器不会再保存任何数据,实现后端无状态,方便扩展.</p>\n<h1 id=\"jwt-的使用\"><a href=\"#jwt-的使用\" class=\"headerlink\" title=\"jwt 的使用\"></a>jwt 的使用</h1><p>实际的 jwt 如下:</p>\n<pre><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsb2dpbk5hbWUiOiJoaGIwNTQiLCJzeXN0ZW1JZCI6IjEiLCJzdGF0dXMiOjEsImFkbWluVHlwZSI6NCwic2lnblRpbWUiOiIxNTY5NzQ1NjAyIiwiaWF0IjoxNTY5NzQ1NjAyLCJleHAiOjE1Njk3NTI4MDJ9.929QHnye3W3XuJVpY9GFrcTTTFxMBfEOBFCwL7HqxE0\n</code></pre><p>jwt 由 <code>.</code>分成三个部分.分别是 header,payload 和 Signature.<br>header 和 payload 都使用 base64 编码,所以可以简单地解析出其中的内容.</p>\n<h2 id=\"header\"><a href=\"#header\" class=\"headerlink\" title=\"header\"></a>header</h2><pre><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\n</code></pre><p>使用 base64 解码的结果:</p>\n<pre><code>{&quot;alg&quot;:&quot;HS256&quot;,&quot;typ&quot;:&quot;JWT&quot;}\n</code></pre><p>上面代码中，alg 属性表示签名的算法（algorithm），默认是 HMAC SHA256（写成 HS256）；typ 属性表示这个令牌（token）的类型（type），JWT 令牌统一写为 JWT。</p>\n<p>最后，将上面的 JSON 对象使用 Base64URL 算法（详见后文）转成字符串。</p>\n<h2 id=\"payload\"><a href=\"#payload\" class=\"headerlink\" title=\"payload\"></a>payload</h2><pre><code>eyJsb2dpbk5hbWUiOiJoaGIwNTQiLCJzeXN0ZW1JZCI6IjEiLCJzdGF0dXMiOjEsImFkbWluVHlwZSI6NCwic2lnblRpbWUiOiIxNTY5NzQ1NjAyIiwiaWF0IjoxNTY5NzQ1NjAyLCJleHAiOjE1Njk3NTI4MDJ9\n</code></pre><p>使用 base64 解码的结果:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">\"loginName\"</span>:<span class=\"string\">\"hhb054\"</span>,<span class=\"string\">\"systemId\"</span>:<span class=\"string\">\"1\"</span>,<span class=\"string\">\"status\"</span>:<span class=\"number\">1</span>,<span class=\"string\">\"adminType\"</span>:<span class=\"number\">4</span>,<span class=\"string\">\"signTime\"</span>:<span class=\"string\">\"1569745602\"</span>,<span class=\"string\">\"iat\"</span>:<span class=\"number\">1569745602</span>,<span class=\"string\">\"exp\"</span>:<span class=\"number\">1569752802</span>&#125;</span><br></pre></td></tr></table></figure>\n<p>注意，JWT 默认是不加密的，任何人都可以读到，所以不要把秘密信息放在这个部分。</p>\n<p>这个 JSON 对象也要使用 Base64URL 算法转成字符串.</p>\n<h2 id=\"Signature\"><a href=\"#Signature\" class=\"headerlink\" title=\"Signature\"></a>Signature</h2><p>Signature 部分是对前两部分的签名，防止数据篡改。</p>\n<p>首先，需要指定一个密钥（secret）。这个密钥只有服务器才知道，不能泄露给用户。然后，使用 Header 里面指定的签名算法（默认是 HMAC SHA256），按照下面的公式产生签名。</p>\n<pre><code>HMACSHA256(\nbase64UrlEncode(header) + &quot;.&quot; +\nbase64UrlEncode(payload),\nsecret)\n</code></pre><p>算出签名以后，把 Header、Payload、Signature 三个部分拼成一个字符串，每个部分之间用”点”（.）分隔，就可以返回给用户。</p>\n<h2 id=\"base64-url\"><a href=\"#base64-url\" class=\"headerlink\" title=\"base64 url\"></a>base64 url</h2><p>前面提到，Header 和 Payload 串型化的算法是 Base64URL。这个算法跟 Base64 算法基本类似，但有一些小的不同。</p>\n<p>JWT 作为一个令牌（token），有些场合可能会放到 URL（比如 api.example.com/?token=xxx）。Base64 有三个字符+、/和=，在 URL 里面有特殊含义，所以要被替换掉：=被省略、+替换成-，/替换成_ 。这就是 Base64URL 算法。</p>\n<h2 id=\"jwt-的特点\"><a href=\"#jwt-的特点\" class=\"headerlink\" title=\"jwt 的特点\"></a>jwt 的特点</h2><p>(1）JWT 默认是不加密，但也是可以加密的。生成原始 Token 以后，可以用密钥再加密一次。</p>\n<p>（2）JWT 不加密的情况下，不能将秘密数据写入 JWT。</p>\n<p>（3）JWT 不仅可以用于认证，也可以用于交换信息。有效使用 JWT，可以降低服务器查询数据库的次数。</p>\n<p>（4）JWT 的最大缺点是，由于服务器不保存 session 状态，因此无法在使用过程中废止某个 token，或者更改 token 的权限。也就是说，一旦 JWT 签发了，在到期之前就会始终有效，除非服务器部署额外的逻辑。</p>\n<p>（5）JWT 本身包含了认证信息，一旦泄露，任何人都可以获得该令牌的所有权限。为了减少盗用，JWT 的有效期应该设置得比较短。对于一些比较重要的权限，使用时应该再次对用户进行认证。</p>\n<p>（6）为了减少盗用，JWT 不应该使用 HTTP 协议明码传输，要使用 HTTPS 协议传输。</p>\n<h1 id=\"在-node-项目中实现-jwt\"><a href=\"#在-node-项目中实现-jwt\" class=\"headerlink\" title=\"在 node 项目中实现 jwt\"></a>在 node 项目中实现 jwt</h1><p>安装 jsonwebtoken</p>\n<pre><code>npm i jsonwebtoken -S\n</code></pre><p>使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> jwt = <span class=\"built_in\">require</span>(<span class=\"string\">\"jsonwebtoken\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//签发 token</span></span><br><span class=\"line\"><span class=\"comment\">//在验证了用户名密码正确之后，调用 jsonwebtoken 的 sign() 方法来生成token，</span></span><br><span class=\"line\"><span class=\"comment\">//接收三个参数，</span></span><br><span class=\"line\"><span class=\"comment\">//第一个是载荷，用于编码后存储在 token 中的数据，也是验证 token 后可以拿到的数据；</span></span><br><span class=\"line\"><span class=\"comment\">//第二个是密钥，自己定义的，验证的时候也是要相同的密钥才能解码；</span></span><br><span class=\"line\"><span class=\"comment\">//第三个是options，可以设置 token 的过期时间。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> token = jwt.sign(</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: result.name,</span><br><span class=\"line\">    _id: result._id</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"my_token\"</span>,</span><br><span class=\"line\">  &#123; <span class=\"attr\">expiresIn</span>: <span class=\"string\">\"2h\"</span> &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">//验证 token</span></span><br><span class=\"line\"><span class=\"comment\">//token 放在请求头中的authorization里面</span></span><br><span class=\"line\">verifyJwt: <span class=\"function\"><span class=\"params\">ctx</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      jwt.verify(ctx.request.header.authorization, key.privKey, (err, decode) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">          reject(err);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          resolve(decode);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"解决-token-过期时间问题\"><a href=\"#解决-token-过期时间问题\" class=\"headerlink\" title=\"解决 token 过期时间问题\"></a>解决 token 过期时间问题</h1><p>前面签署 token 的时候,设置了 expireIn 过期时间,但是后端无法让 jwt 提前过期,也无法解决多个 token 同时操作的问题,这里我采用了一种折中的方式,在mysql 数据库中添加了一个 refresh_time 参数,每次登陆以后,保证 refresh_time 与最新的 token 中的自定的 signTime保持一致.<br>这样,在前端调用接口是,先解析 token,再根据解析出来的 payload 来判断是不是最新的 token,从而做到同时只有一个 token 有效的功能.<br>代码如下:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">check: <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ctx</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [err, data] = <span class=\"keyword\">await</span> util.awaitWrap(token.verifyJwt(ctx));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">status</span>: <span class=\"literal\">false</span>, <span class=\"attr\">data</span>: err.message &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> queryResult = <span class=\"keyword\">await</span> sql.queryByLoginName(data.loginName);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (queryResult.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">status</span>: <span class=\"literal\">false</span>, <span class=\"attr\">data</span>: <span class=\"string\">\"token 校验出错\"</span> &#125;;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (queryResult[<span class=\"number\">0</span>].refresh_time == data.signTime) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">status</span>: <span class=\"literal\">true</span>, <span class=\"attr\">data</span>: queryResult, <span class=\"attr\">jwt</span>: data &#125;;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; <span class=\"attr\">status</span>: <span class=\"literal\">false</span>, <span class=\"attr\">data</span>: <span class=\"string\">\"token 过期\"</span> &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"node 项目连接 ldap","_content":"## ldap 简单介绍\nldap 是一种树形数据库,一般用于存储公司员工相关信息.\n![WX20190930-112724@2x](https://i.loli.net/2019/09/30/oQhLr5OmesYBdtq.png)\n\n\n## 使用 ldap 模块查询\n用到 ldap 模块,使用 npm 安装:\nnpm i ldapjs -S\n\n使用:\n\n```js\nconst ldap = require(\"ldapjs\");\nconst ldapConfig = { url: \"ldap://10.20.21.24\" };\n\nconst opts = {\n  //   filter: \"\", //查询条件过滤器，查找uid=kxh的用户节点\n  //   scope: \"\", //查询范围\n  timeLimit: 5 //查询超时\n};\n\nmodule.exports = {\n  ldapAuth: userName => {\n    return new Promise((resolve, reject) => {\n      const client = ldap.createClient(ldapConfig.config);\n      //连接 ldap 的账户名&密码\n      client.bind(\"账户名\", \"密码\", (err1, res1) => {\n        client.search(`cn=${userName},ou=employee,dc=zrtg,dc=com`, opts, (err, res2) => {\n          res2.on(\"searchEntry\", entry => {\n            user = entry.object;\n            resolve(user);\n          });\n          res2.on(\"searchReference\", referral => {\n            console.log(\"referral: \" + referral.uris.join());\n          });\n          res2.on(\"error\", err => {\n            client.unbind();\n            reject(err);\n          });\n          res2.on(\"end\", result => {\n            client.unbind();\n          });\n        });\n      });\n    });\n  }\n};\n```\n","source":"_posts/2019.09.30.koaLdap.md","raw":"---\ntitle: node 项目连接 ldap\ntags: [nodejs, ldap]\ncategories: 随笔\n---\n## ldap 简单介绍\nldap 是一种树形数据库,一般用于存储公司员工相关信息.\n![WX20190930-112724@2x](https://i.loli.net/2019/09/30/oQhLr5OmesYBdtq.png)\n\n\n## 使用 ldap 模块查询\n用到 ldap 模块,使用 npm 安装:\nnpm i ldapjs -S\n\n使用:\n\n```js\nconst ldap = require(\"ldapjs\");\nconst ldapConfig = { url: \"ldap://10.20.21.24\" };\n\nconst opts = {\n  //   filter: \"\", //查询条件过滤器，查找uid=kxh的用户节点\n  //   scope: \"\", //查询范围\n  timeLimit: 5 //查询超时\n};\n\nmodule.exports = {\n  ldapAuth: userName => {\n    return new Promise((resolve, reject) => {\n      const client = ldap.createClient(ldapConfig.config);\n      //连接 ldap 的账户名&密码\n      client.bind(\"账户名\", \"密码\", (err1, res1) => {\n        client.search(`cn=${userName},ou=employee,dc=zrtg,dc=com`, opts, (err, res2) => {\n          res2.on(\"searchEntry\", entry => {\n            user = entry.object;\n            resolve(user);\n          });\n          res2.on(\"searchReference\", referral => {\n            console.log(\"referral: \" + referral.uris.join());\n          });\n          res2.on(\"error\", err => {\n            client.unbind();\n            reject(err);\n          });\n          res2.on(\"end\", result => {\n            client.unbind();\n          });\n        });\n      });\n    });\n  }\n};\n```\n","slug":"2019.09.30.koaLdap","published":1,"date":"2019-09-30T03:19:53.704Z","updated":"2019-09-30T03:28:56.721Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziiqf001mrh9z8c2r3m2b","content":"<h2 id=\"ldap-简单介绍\"><a href=\"#ldap-简单介绍\" class=\"headerlink\" title=\"ldap 简单介绍\"></a>ldap 简单介绍</h2><p>ldap 是一种树形数据库,一般用于存储公司员工相关信息.<br><img src=\"https://i.loli.net/2019/09/30/oQhLr5OmesYBdtq.png\" alt=\"WX20190930-112724@2x\"></p>\n<h2 id=\"使用-ldap-模块查询\"><a href=\"#使用-ldap-模块查询\" class=\"headerlink\" title=\"使用 ldap 模块查询\"></a>使用 ldap 模块查询</h2><p>用到 ldap 模块,使用 npm 安装:<br>npm i ldapjs -S</p>\n<p>使用:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ldap = <span class=\"built_in\">require</span>(<span class=\"string\">\"ldapjs\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> ldapConfig = &#123; <span class=\"attr\">url</span>: <span class=\"string\">\"ldap://10.20.21.24\"</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> opts = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//   filter: \"\", //查询条件过滤器，查找uid=kxh的用户节点</span></span><br><span class=\"line\">  <span class=\"comment\">//   scope: \"\", //查询范围</span></span><br><span class=\"line\">  timeLimit: <span class=\"number\">5</span> <span class=\"comment\">//查询超时</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  ldapAuth: <span class=\"function\"><span class=\"params\">userName</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> client = ldap.createClient(ldapConfig.config);</span><br><span class=\"line\">      <span class=\"comment\">//连接 ldap 的账户名&amp;密码</span></span><br><span class=\"line\">      client.bind(<span class=\"string\">\"账户名\"</span>, <span class=\"string\">\"密码\"</span>, (err1, res1) =&gt; &#123;</span><br><span class=\"line\">        client.search(<span class=\"string\">`cn=<span class=\"subst\">$&#123;userName&#125;</span>,ou=employee,dc=zrtg,dc=com`</span>, opts, (err, res2) =&gt; &#123;</span><br><span class=\"line\">          res2.on(<span class=\"string\">\"searchEntry\"</span>, entry =&gt; &#123;</span><br><span class=\"line\">            user = entry.object;</span><br><span class=\"line\">            resolve(user);</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">          res2.on(<span class=\"string\">\"searchReference\"</span>, referral =&gt; &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"referral: \"</span> + referral.uris.join());</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">          res2.on(<span class=\"string\">\"error\"</span>, err =&gt; &#123;</span><br><span class=\"line\">            client.unbind();</span><br><span class=\"line\">            reject(err);</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">          res2.on(<span class=\"string\">\"end\"</span>, result =&gt; &#123;</span><br><span class=\"line\">            client.unbind();</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"ldap-简单介绍\"><a href=\"#ldap-简单介绍\" class=\"headerlink\" title=\"ldap 简单介绍\"></a>ldap 简单介绍</h2><p>ldap 是一种树形数据库,一般用于存储公司员工相关信息.<br><img src=\"https://i.loli.net/2019/09/30/oQhLr5OmesYBdtq.png\" alt=\"WX20190930-112724@2x\"></p>\n<h2 id=\"使用-ldap-模块查询\"><a href=\"#使用-ldap-模块查询\" class=\"headerlink\" title=\"使用 ldap 模块查询\"></a>使用 ldap 模块查询</h2><p>用到 ldap 模块,使用 npm 安装:<br>npm i ldapjs -S</p>\n<p>使用:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ldap = <span class=\"built_in\">require</span>(<span class=\"string\">\"ldapjs\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> ldapConfig = &#123; <span class=\"attr\">url</span>: <span class=\"string\">\"ldap://10.20.21.24\"</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> opts = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//   filter: \"\", //查询条件过滤器，查找uid=kxh的用户节点</span></span><br><span class=\"line\">  <span class=\"comment\">//   scope: \"\", //查询范围</span></span><br><span class=\"line\">  timeLimit: <span class=\"number\">5</span> <span class=\"comment\">//查询超时</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  ldapAuth: <span class=\"function\"><span class=\"params\">userName</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> client = ldap.createClient(ldapConfig.config);</span><br><span class=\"line\">      <span class=\"comment\">//连接 ldap 的账户名&amp;密码</span></span><br><span class=\"line\">      client.bind(<span class=\"string\">\"账户名\"</span>, <span class=\"string\">\"密码\"</span>, (err1, res1) =&gt; &#123;</span><br><span class=\"line\">        client.search(<span class=\"string\">`cn=<span class=\"subst\">$&#123;userName&#125;</span>,ou=employee,dc=zrtg,dc=com`</span>, opts, (err, res2) =&gt; &#123;</span><br><span class=\"line\">          res2.on(<span class=\"string\">\"searchEntry\"</span>, entry =&gt; &#123;</span><br><span class=\"line\">            user = entry.object;</span><br><span class=\"line\">            resolve(user);</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">          res2.on(<span class=\"string\">\"searchReference\"</span>, referral =&gt; &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"referral: \"</span> + referral.uris.join());</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">          res2.on(<span class=\"string\">\"error\"</span>, err =&gt; &#123;</span><br><span class=\"line\">            client.unbind();</span><br><span class=\"line\">            reject(err);</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">          res2.on(<span class=\"string\">\"end\"</span>, result =&gt; &#123;</span><br><span class=\"line\">            client.unbind();</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"debounce在vue 中的使用","_content":"# 什么是 debounce\n>n. 防反跳\n按键防反跳（Debounce）为什么要去抖动呢？机械按键在按下时，并非按下就接触的很好，尤其是有簧片的机械开关，会在接触的瞬间反复的开合多次，直到开关状态完全改变。大学时候做过电子实验的都知道,按键的时候需要加上消抖函数.\n\n# debounce 的使用场景\n* 调整页面宽度 ,resize 时,避免频繁渲染导致页面卡顿\n* 输入框输入搜索🔍条件,为了优化体验,没有设置搜索按钮,但是尽量减少 api 调用\n* ...\n\n# JavaScript 实现 debounce\nJavaScript 实现 debounce 利用了[闭包](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures)的概念.\n\n```js\nfunction debounce(fn, wait) {\n  let timeout = null;\n  return function() {\n    if (timeout !== null) clearTimeout(timeout);\n    timeout = setTimeout(fn, wait);\n  };\n}\n```\n\n上面的函数接收一个函数和一个延时秒数.\n其中`let timeout = null;`只有在第一次调用 debounce 函数时定义.\n实现如果没有计时器,则新建一个计时器.已经存在计时器的情况下,会销毁当前存在的计时器,并重新创建一个计时器.\n这样就可以达到消抖的效果.例如,用户在输入框进行输入时,设置了一个 1000ms 的延时函数,那么在用户输入完毕以后才会像后端发起查询请求,可以减少大量的网路请求.\n\n# debounce 在 vue 中的使用\n\n```js\n//utils.js\nfunction debounce(fn, wait) {\n  let timeout = null;\n  return function() {\n    if (timeout !== null) clearTimeout(timeout);\n    timeout = setTimeout(fn, wait);\n  };\n}\n\nexport {  debounce };\n```\n```js\n// app.vue\nimport { debounce } from \"./../utils/utils\";\n\n//在 vue 中的 created 声明周期中,添加对数据的监听\n//而不是在 watch 中调用\ncreated() {\n\n    this.$watch(\n      \"filter\",\n      debounce(() => {\n        this.getList();\n      }, 500)\n    );\n    \n\n  }\nmounted:{\n    getList(){\n        //your code here\n    }\n}\n```\n","source":"_posts/2019.11.06.debounce.md","raw":"---\ntitle: debounce在vue 中的使用\ntags: [JavaScript, vue]\ncategories: 技术\n---\n# 什么是 debounce\n>n. 防反跳\n按键防反跳（Debounce）为什么要去抖动呢？机械按键在按下时，并非按下就接触的很好，尤其是有簧片的机械开关，会在接触的瞬间反复的开合多次，直到开关状态完全改变。大学时候做过电子实验的都知道,按键的时候需要加上消抖函数.\n\n# debounce 的使用场景\n* 调整页面宽度 ,resize 时,避免频繁渲染导致页面卡顿\n* 输入框输入搜索🔍条件,为了优化体验,没有设置搜索按钮,但是尽量减少 api 调用\n* ...\n\n# JavaScript 实现 debounce\nJavaScript 实现 debounce 利用了[闭包](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures)的概念.\n\n```js\nfunction debounce(fn, wait) {\n  let timeout = null;\n  return function() {\n    if (timeout !== null) clearTimeout(timeout);\n    timeout = setTimeout(fn, wait);\n  };\n}\n```\n\n上面的函数接收一个函数和一个延时秒数.\n其中`let timeout = null;`只有在第一次调用 debounce 函数时定义.\n实现如果没有计时器,则新建一个计时器.已经存在计时器的情况下,会销毁当前存在的计时器,并重新创建一个计时器.\n这样就可以达到消抖的效果.例如,用户在输入框进行输入时,设置了一个 1000ms 的延时函数,那么在用户输入完毕以后才会像后端发起查询请求,可以减少大量的网路请求.\n\n# debounce 在 vue 中的使用\n\n```js\n//utils.js\nfunction debounce(fn, wait) {\n  let timeout = null;\n  return function() {\n    if (timeout !== null) clearTimeout(timeout);\n    timeout = setTimeout(fn, wait);\n  };\n}\n\nexport {  debounce };\n```\n```js\n// app.vue\nimport { debounce } from \"./../utils/utils\";\n\n//在 vue 中的 created 声明周期中,添加对数据的监听\n//而不是在 watch 中调用\ncreated() {\n\n    this.$watch(\n      \"filter\",\n      debounce(() => {\n        this.getList();\n      }, 500)\n    );\n    \n\n  }\nmounted:{\n    getList(){\n        //your code here\n    }\n}\n```\n","slug":"2019.11.06.debounce","published":1,"date":"2019-11-06T03:30:24.517Z","updated":"2019-11-06T06:51:13.403Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziiqf001nrh9z4lxy5rbz","content":"<h1 id=\"什么是-debounce\"><a href=\"#什么是-debounce\" class=\"headerlink\" title=\"什么是 debounce\"></a>什么是 debounce</h1><blockquote>\n<p>n. 防反跳<br>按键防反跳（Debounce）为什么要去抖动呢？机械按键在按下时，并非按下就接触的很好，尤其是有簧片的机械开关，会在接触的瞬间反复的开合多次，直到开关状态完全改变。大学时候做过电子实验的都知道,按键的时候需要加上消抖函数.</p>\n</blockquote>\n<h1 id=\"debounce-的使用场景\"><a href=\"#debounce-的使用场景\" class=\"headerlink\" title=\"debounce 的使用场景\"></a>debounce 的使用场景</h1><ul>\n<li>调整页面宽度 ,resize 时,避免频繁渲染导致页面卡顿</li>\n<li>输入框输入搜索🔍条件,为了优化体验,没有设置搜索按钮,但是尽量减少 api 调用</li>\n<li>…</li>\n</ul>\n<h1 id=\"JavaScript-实现-debounce\"><a href=\"#JavaScript-实现-debounce\" class=\"headerlink\" title=\"JavaScript 实现 debounce\"></a>JavaScript 实现 debounce</h1><p>JavaScript 实现 debounce 利用了<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures\" target=\"_blank\" rel=\"noopener\">闭包</a>的概念.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">fn, wait</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (timeout !== <span class=\"literal\">null</span>) clearTimeout(timeout);</span><br><span class=\"line\">    timeout = setTimeout(fn, wait);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的函数接收一个函数和一个延时秒数.<br>其中<code>let timeout = null;</code>只有在第一次调用 debounce 函数时定义.<br>实现如果没有计时器,则新建一个计时器.已经存在计时器的情况下,会销毁当前存在的计时器,并重新创建一个计时器.<br>这样就可以达到消抖的效果.例如,用户在输入框进行输入时,设置了一个 1000ms 的延时函数,那么在用户输入完毕以后才会像后端发起查询请求,可以减少大量的网路请求.</p>\n<h1 id=\"debounce-在-vue-中的使用\"><a href=\"#debounce-在-vue-中的使用\" class=\"headerlink\" title=\"debounce 在 vue 中的使用\"></a>debounce 在 vue 中的使用</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//utils.js</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">fn, wait</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (timeout !== <span class=\"literal\">null</span>) clearTimeout(timeout);</span><br><span class=\"line\">    timeout = setTimeout(fn, wait);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;  debounce &#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app.vue</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; debounce &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"./../utils/utils\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//在 vue 中的 created 声明周期中,添加对数据的监听</span></span><br><span class=\"line\"><span class=\"comment\">//而不是在 watch 中调用</span></span><br><span class=\"line\">created() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$watch(</span><br><span class=\"line\">      <span class=\"string\">\"filter\"</span>,</span><br><span class=\"line\">      debounce(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.getList();</span><br><span class=\"line\">      &#125;, <span class=\"number\">500</span>)</span><br><span class=\"line\">    );</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">mounted:&#123;</span><br><span class=\"line\">    getList()&#123;</span><br><span class=\"line\">        <span class=\"comment\">//your code here</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"什么是-debounce\"><a href=\"#什么是-debounce\" class=\"headerlink\" title=\"什么是 debounce\"></a>什么是 debounce</h1><blockquote>\n<p>n. 防反跳<br>按键防反跳（Debounce）为什么要去抖动呢？机械按键在按下时，并非按下就接触的很好，尤其是有簧片的机械开关，会在接触的瞬间反复的开合多次，直到开关状态完全改变。大学时候做过电子实验的都知道,按键的时候需要加上消抖函数.</p>\n</blockquote>\n<h1 id=\"debounce-的使用场景\"><a href=\"#debounce-的使用场景\" class=\"headerlink\" title=\"debounce 的使用场景\"></a>debounce 的使用场景</h1><ul>\n<li>调整页面宽度 ,resize 时,避免频繁渲染导致页面卡顿</li>\n<li>输入框输入搜索🔍条件,为了优化体验,没有设置搜索按钮,但是尽量减少 api 调用</li>\n<li>…</li>\n</ul>\n<h1 id=\"JavaScript-实现-debounce\"><a href=\"#JavaScript-实现-debounce\" class=\"headerlink\" title=\"JavaScript 实现 debounce\"></a>JavaScript 实现 debounce</h1><p>JavaScript 实现 debounce 利用了<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures\" target=\"_blank\" rel=\"noopener\">闭包</a>的概念.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">fn, wait</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (timeout !== <span class=\"literal\">null</span>) clearTimeout(timeout);</span><br><span class=\"line\">    timeout = setTimeout(fn, wait);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的函数接收一个函数和一个延时秒数.<br>其中<code>let timeout = null;</code>只有在第一次调用 debounce 函数时定义.<br>实现如果没有计时器,则新建一个计时器.已经存在计时器的情况下,会销毁当前存在的计时器,并重新创建一个计时器.<br>这样就可以达到消抖的效果.例如,用户在输入框进行输入时,设置了一个 1000ms 的延时函数,那么在用户输入完毕以后才会像后端发起查询请求,可以减少大量的网路请求.</p>\n<h1 id=\"debounce-在-vue-中的使用\"><a href=\"#debounce-在-vue-中的使用\" class=\"headerlink\" title=\"debounce 在 vue 中的使用\"></a>debounce 在 vue 中的使用</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//utils.js</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">fn, wait</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (timeout !== <span class=\"literal\">null</span>) clearTimeout(timeout);</span><br><span class=\"line\">    timeout = setTimeout(fn, wait);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;  debounce &#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app.vue</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; debounce &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"./../utils/utils\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//在 vue 中的 created 声明周期中,添加对数据的监听</span></span><br><span class=\"line\"><span class=\"comment\">//而不是在 watch 中调用</span></span><br><span class=\"line\">created() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$watch(</span><br><span class=\"line\">      <span class=\"string\">\"filter\"</span>,</span><br><span class=\"line\">      debounce(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.getList();</span><br><span class=\"line\">      &#125;, <span class=\"number\">500</span>)</span><br><span class=\"line\">    );</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">mounted:&#123;</span><br><span class=\"line\">    getList()&#123;</span><br><span class=\"line\">        <span class=\"comment\">//your code here</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"nodejs(koa)中封装网络请求","_content":"\n#1\n封装 axios\n\n```js\nconst axios = require(\"axios\");\n\n// // axios 配置\n// axios.defaults.timeout = 5000;\n// // axios.defaults.withCredentials = true;\n// // axios.defaults.baseURL = \"https://api.github.com\";\n\n// // http request 拦截器\n// axios.interceptors.request.use(\n//   config => {\n//     // config.headers['content-type'] = \"application/json\";\n//     return config;\n//   },\n//   err => {\n//     return Promise.reject(err);\n//   }\n// );\n// axios.interceptors.response.use(\n//   res => {\n//     return Promise.resolve(res);\n//   },\n//   err => {\n//     return Promise.reject(err);\n//   }\n// );\n// function post(url, body = \"\", path = \"\") {\n//   return new Promise((resolve, reject) => {\n//     axios\n//       .post(url + path, body)\n//       .then(res => {\n//         resolve(res);\n//       })\n//       .catch(err => {\n//         reject(err);\n//       });\n//   });\n// }\nmodule.exports = {\n  get: (url, params = \"\", path = \"\") => {\n    return new Promise((resolve, reject) => {\n      axios\n        .get(url + path, {\n          params: params\n        })\n        .then(res => {\n          resolve(res.data);\n        })\n        .catch(err => {\n          reject(err);\n        });\n    });\n  },\n  post:(url, body = \"\", path = \"\")=> {\n  return new Promise((resolve, reject) => {\n    axios\n      .post(url + path, body)\n      .then(res => {\n        resolve(res);\n      })\n      .catch(err => {\n        reject(err);\n      });\n  });\n};\n\n```\n\n#2\n封装 api\n\n```js\nconst ip = require(\"./../config/config\");\nconst methods = require(\"./index\");\nmodule.exports = {\n  auth: async params => {\n    return methods.get(ip.sessionIp, params);\n  }\n};\n```\n\n# 3\n\n调用网络请求\n\n```js\nmodule.exports = {\n  async auth(ctx) {\n    let [err, res] = await utils.awaitWrap(api.auth(ctx.request.query));\n    ctx.body = res;\n  }\n};\n```\n\n```js\n//util.js\n//用到了 es6 的解构赋值,确保可以获取到 data 或者 err\nmodule.exports = {\n  awaitWrap: promise => {\n    return promise.then(data => [null, data]).catch(err => [err, null]);\n  }\n};\n```\n","source":"_posts/2019.11.15.nodejsAxios.md","raw":"---\ntitle: nodejs(koa)中封装网络请求\ntags: [nodejs, koa, axios]\ncategories: 技术\n---\n\n#1\n封装 axios\n\n```js\nconst axios = require(\"axios\");\n\n// // axios 配置\n// axios.defaults.timeout = 5000;\n// // axios.defaults.withCredentials = true;\n// // axios.defaults.baseURL = \"https://api.github.com\";\n\n// // http request 拦截器\n// axios.interceptors.request.use(\n//   config => {\n//     // config.headers['content-type'] = \"application/json\";\n//     return config;\n//   },\n//   err => {\n//     return Promise.reject(err);\n//   }\n// );\n// axios.interceptors.response.use(\n//   res => {\n//     return Promise.resolve(res);\n//   },\n//   err => {\n//     return Promise.reject(err);\n//   }\n// );\n// function post(url, body = \"\", path = \"\") {\n//   return new Promise((resolve, reject) => {\n//     axios\n//       .post(url + path, body)\n//       .then(res => {\n//         resolve(res);\n//       })\n//       .catch(err => {\n//         reject(err);\n//       });\n//   });\n// }\nmodule.exports = {\n  get: (url, params = \"\", path = \"\") => {\n    return new Promise((resolve, reject) => {\n      axios\n        .get(url + path, {\n          params: params\n        })\n        .then(res => {\n          resolve(res.data);\n        })\n        .catch(err => {\n          reject(err);\n        });\n    });\n  },\n  post:(url, body = \"\", path = \"\")=> {\n  return new Promise((resolve, reject) => {\n    axios\n      .post(url + path, body)\n      .then(res => {\n        resolve(res);\n      })\n      .catch(err => {\n        reject(err);\n      });\n  });\n};\n\n```\n\n#2\n封装 api\n\n```js\nconst ip = require(\"./../config/config\");\nconst methods = require(\"./index\");\nmodule.exports = {\n  auth: async params => {\n    return methods.get(ip.sessionIp, params);\n  }\n};\n```\n\n# 3\n\n调用网络请求\n\n```js\nmodule.exports = {\n  async auth(ctx) {\n    let [err, res] = await utils.awaitWrap(api.auth(ctx.request.query));\n    ctx.body = res;\n  }\n};\n```\n\n```js\n//util.js\n//用到了 es6 的解构赋值,确保可以获取到 data 或者 err\nmodule.exports = {\n  awaitWrap: promise => {\n    return promise.then(data => [null, data]).catch(err => [err, null]);\n  }\n};\n```\n","slug":"2019.11.15.nodejsAxios","published":1,"date":"2019-11-15T09:15:26.978Z","updated":"2019-11-15T09:20:32.512Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziiqf001orh9z2cfvhm2l","content":"<p>#1<br>封装 axios</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> axios = <span class=\"built_in\">require</span>(<span class=\"string\">\"axios\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// // axios 配置</span></span><br><span class=\"line\"><span class=\"comment\">// axios.defaults.timeout = 5000;</span></span><br><span class=\"line\"><span class=\"comment\">// // axios.defaults.withCredentials = true;</span></span><br><span class=\"line\"><span class=\"comment\">// // axios.defaults.baseURL = \"https://api.github.com\";</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// // http request 拦截器</span></span><br><span class=\"line\"><span class=\"comment\">// axios.interceptors.request.use(</span></span><br><span class=\"line\"><span class=\"comment\">//   config =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     // config.headers['content-type'] = \"application/json\";</span></span><br><span class=\"line\"><span class=\"comment\">//     return config;</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//   err =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     return Promise.reject(err);</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// );</span></span><br><span class=\"line\"><span class=\"comment\">// axios.interceptors.response.use(</span></span><br><span class=\"line\"><span class=\"comment\">//   res =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     return Promise.resolve(res);</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//   err =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     return Promise.reject(err);</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// );</span></span><br><span class=\"line\"><span class=\"comment\">// function post(url, body = \"\", path = \"\") &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   return new Promise((resolve, reject) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     axios</span></span><br><span class=\"line\"><span class=\"comment\">//       .post(url + path, body)</span></span><br><span class=\"line\"><span class=\"comment\">//       .then(res =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//         resolve(res);</span></span><br><span class=\"line\"><span class=\"comment\">//       &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">//       .catch(err =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//         reject(err);</span></span><br><span class=\"line\"><span class=\"comment\">//       &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span>: (url, params = \"\", path = \"\") =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      axios</span><br><span class=\"line\">        .get(url + path, &#123;</span><br><span class=\"line\">          params: params</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">          resolve(res.data);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">          reject(err);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  post:<span class=\"function\">(<span class=\"params\">url, body = <span class=\"string\">\"\"</span>, path = <span class=\"string\">\"\"</span></span>)=&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    axios</span><br><span class=\"line\">      .post(url + path, body)</span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(res);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">        reject(err);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>#2<br>封装 api</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ip = <span class=\"built_in\">require</span>(<span class=\"string\">\"./../config/config\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> methods = <span class=\"built_in\">require</span>(<span class=\"string\">\"./index\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  auth: <span class=\"keyword\">async</span> params =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> methods.get(ip.sessionIp, params);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h1 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3\"></a>3</h1><p>调用网络请求</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"keyword\">async</span> auth(ctx) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> [err, res] = <span class=\"keyword\">await</span> utils.awaitWrap(api.auth(ctx.request.query));</span><br><span class=\"line\">    ctx.body = res;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//util.js</span></span><br><span class=\"line\"><span class=\"comment\">//用到了 es6 的解构赋值,确保可以获取到 data 或者 err</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  awaitWrap: <span class=\"function\"><span class=\"params\">promise</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> promise.then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> [<span class=\"literal\">null</span>, data]).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> [err, <span class=\"literal\">null</span>]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>#1<br>封装 axios</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> axios = <span class=\"built_in\">require</span>(<span class=\"string\">\"axios\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// // axios 配置</span></span><br><span class=\"line\"><span class=\"comment\">// axios.defaults.timeout = 5000;</span></span><br><span class=\"line\"><span class=\"comment\">// // axios.defaults.withCredentials = true;</span></span><br><span class=\"line\"><span class=\"comment\">// // axios.defaults.baseURL = \"https://api.github.com\";</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// // http request 拦截器</span></span><br><span class=\"line\"><span class=\"comment\">// axios.interceptors.request.use(</span></span><br><span class=\"line\"><span class=\"comment\">//   config =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     // config.headers['content-type'] = \"application/json\";</span></span><br><span class=\"line\"><span class=\"comment\">//     return config;</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//   err =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     return Promise.reject(err);</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// );</span></span><br><span class=\"line\"><span class=\"comment\">// axios.interceptors.response.use(</span></span><br><span class=\"line\"><span class=\"comment\">//   res =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     return Promise.resolve(res);</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//   err =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     return Promise.reject(err);</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// );</span></span><br><span class=\"line\"><span class=\"comment\">// function post(url, body = \"\", path = \"\") &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   return new Promise((resolve, reject) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     axios</span></span><br><span class=\"line\"><span class=\"comment\">//       .post(url + path, body)</span></span><br><span class=\"line\"><span class=\"comment\">//       .then(res =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//         resolve(res);</span></span><br><span class=\"line\"><span class=\"comment\">//       &#125;)</span></span><br><span class=\"line\"><span class=\"comment\">//       .catch(err =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//         reject(err);</span></span><br><span class=\"line\"><span class=\"comment\">//       &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">//   &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span>: (url, params = \"\", path = \"\") =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      axios</span><br><span class=\"line\">        .get(url + path, &#123;</span><br><span class=\"line\">          params: params</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">          resolve(res.data);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">          reject(err);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  post:<span class=\"function\">(<span class=\"params\">url, body = <span class=\"string\">\"\"</span>, path = <span class=\"string\">\"\"</span></span>)=&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    axios</span><br><span class=\"line\">      .post(url + path, body)</span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(res);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">        reject(err);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>#2<br>封装 api</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ip = <span class=\"built_in\">require</span>(<span class=\"string\">\"./../config/config\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> methods = <span class=\"built_in\">require</span>(<span class=\"string\">\"./index\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  auth: <span class=\"keyword\">async</span> params =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> methods.get(ip.sessionIp, params);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h1 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3\"></a>3</h1><p>调用网络请求</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"keyword\">async</span> auth(ctx) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> [err, res] = <span class=\"keyword\">await</span> utils.awaitWrap(api.auth(ctx.request.query));</span><br><span class=\"line\">    ctx.body = res;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//util.js</span></span><br><span class=\"line\"><span class=\"comment\">//用到了 es6 的解构赋值,确保可以获取到 data 或者 err</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  awaitWrap: <span class=\"function\"><span class=\"params\">promise</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> promise.then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> [<span class=\"literal\">null</span>, data]).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> [err, <span class=\"literal\">null</span>]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"封装 axios","_content":"\n# axios 的封装\n\n## 安装 axios\n\n    npm install axios; // 安装axios\n\n## 引入 axios\n\n在项目目录下新建 http 文件夹,并在 http 文件夹下新建 http.js,用来封装 axios 以及各种方法,新建 api.js 用来统一管理接口.\n\n```js\n// http.js\n\nimport axios from \"axios\";\nimport { Notification } from \"element-ui\";\nimport router from \"./../router/index\";\n\n// axios 配置\n\n//设置 axios 超时\naxios.defaults.timeout = 5000;\n\n//设置每次网络请求都要携带 cookie\n//这里有个坑,由于浏览器的cors 策略,当我们设置携带 cookie 时,后端的`Access-Control-Allow-Origin`不能设置为*,\n// 必须指定ip\naxios.defaults.withCredentials = true;\n\n//设置 baseUrl\n// axios.defaults.baseURL = \"https://api.github.com\";\n\n// http request 拦截器\naxios.interceptors.request.use(\n  config => {\n    //这里可以统一配置请求头\n    //比如每次都携带后端认证需要的 token 等.\n    // config.headers['content-type'] = \"application/json\";\n    return config;\n  },\n  err => {\n    return Promise.reject(err);\n  }\n);\n//http response 拦截器\naxios.interceptors.response.use(\n  res => {\n    if (res.data.status == 200 && res.data.success) {\n      return Promise.resolve(res.data);\n    } else {\n      //router.resolve(location).location.path 获取当前页面的路由信息\n      if (res.data.status == 5001) {\n        if (router.resolve(location).location.path != \"/\") {\n          router.replace(\"/\");\n          sessionStorage.clear();\n          Notification.error({ title: \"error\", message: `${res.data.message}(错误码${res.data.status})` });\n        }\n      } else {\n        Notification.error({ title: \"error\", message: `${res.data.message}(错误码${res.data.status})` });\n      }\n      return Promise.reject(res.data);\n    }\n  },\n  err => {\n    Notification.error({ title: \"error\", message: err });\n    return Promise.reject(err);\n  }\n);\n\n//封装方法\n\nfunction get(url, params = \"\", path = \"\") {\n  return new Promise((resolve, reject) => {\n    axios\n      .get(url + path, {\n        params: params\n      })\n      .then(res => {\n        resolve(res);\n      })\n      .catch(err => {\n        reject(err);\n      });\n  });\n}\nfunction post(url, body = \"\", path = \"\") {\n  return new Promise((resolve, reject) => {\n    axios\n      .post(url + path, body)\n      .then(res => {\n        resolve(res);\n      })\n      .catch(err => {\n        reject(err);\n      });\n  });\n}\nfunction put(url, body = \"\", path = \"\") {\n  return new Promise((resolve, reject) => {\n    axios\n      .put(url + path, body)\n      .then(res => {\n        resolve(res);\n      })\n      .catch(err => {\n        reject(err);\n      });\n  });\n}\n\nexport { get, post, put };\n```\n\napi.js 用于封装接口\n\n```js\n//api.js\nimport { reqIp } from \"../config/httpConfig\";\nimport { get, post, put } from \"./http\";\nconst req = {\n  //检测登录状态\n  isLogin: params => {\n    return get(reqIp + \"/guest/is-login\", params);\n  },\n  //登陆接口\n  login: body => {\n    return post(reqIp + \"/api/v1/logon\", body);\n  },\n  // 注销接口\n  logout: body => {\n    return post(reqIp + \"/api/v1/logout\", body);\n  },\n  // 获取通知列表接口\n  getNotice: params => {\n    return get(reqIp + \"/manager/notice/list\", params);\n  },\n  // 添加通知接口\n  addNotice: body => {\n    return put(reqIp + \"/manager/notice/set\", body);\n  },\n  // 获取工具列表接口\n  getToolList: params => {\n    return get(reqIp + \"/member/tool/list\", params);\n  },\n  // 查看权限代码是否可用接口\n  checkPermission: path => {\n    return get(reqIp + \"/manager/tool/check\", \"\", path);\n  },\n  // 添加工具接口\n  addTool: body => {\n    return post(reqIp + \"/manager/tool/set\", body);\n  },\n  //停用/启用工具接口\n  switchToolStatus: path => {\n    return put(reqIp + `/manager/tool/${path}/switch`);\n  },\n  //修改工具接口\n  modifyTool: (body, path) => {\n    return put(reqIp + `/manager/tool/${path}/modify`, body);\n  },\n  //上传logo 接口\n  uploadLogo: (body, path) => {\n    return post(reqIp + `/manager/tool/${path}/upload-avatar`, body);\n  },\n  //获取任务状态信息接口\n  getMissionStatus: () => {\n    return get(reqIp + \"/manager/mission/status\");\n  },\n  //获取历史任务列表接口\n  getMissionList: params => {\n    return get(reqIp + \"/manager/mission/list\", params);\n  },\n\n  //查询日志接口\n  getLogList: params => {\n    return get(reqIp + \"/manager/operation/list\", params);\n  }\n};\nexport { req };\n```\n","source":"_posts/2019.11.08.axios.md","raw":"---\ntitle: 封装 axios\ntags: [axios]\ncategories: 随笔\n---\n\n# axios 的封装\n\n## 安装 axios\n\n    npm install axios; // 安装axios\n\n## 引入 axios\n\n在项目目录下新建 http 文件夹,并在 http 文件夹下新建 http.js,用来封装 axios 以及各种方法,新建 api.js 用来统一管理接口.\n\n```js\n// http.js\n\nimport axios from \"axios\";\nimport { Notification } from \"element-ui\";\nimport router from \"./../router/index\";\n\n// axios 配置\n\n//设置 axios 超时\naxios.defaults.timeout = 5000;\n\n//设置每次网络请求都要携带 cookie\n//这里有个坑,由于浏览器的cors 策略,当我们设置携带 cookie 时,后端的`Access-Control-Allow-Origin`不能设置为*,\n// 必须指定ip\naxios.defaults.withCredentials = true;\n\n//设置 baseUrl\n// axios.defaults.baseURL = \"https://api.github.com\";\n\n// http request 拦截器\naxios.interceptors.request.use(\n  config => {\n    //这里可以统一配置请求头\n    //比如每次都携带后端认证需要的 token 等.\n    // config.headers['content-type'] = \"application/json\";\n    return config;\n  },\n  err => {\n    return Promise.reject(err);\n  }\n);\n//http response 拦截器\naxios.interceptors.response.use(\n  res => {\n    if (res.data.status == 200 && res.data.success) {\n      return Promise.resolve(res.data);\n    } else {\n      //router.resolve(location).location.path 获取当前页面的路由信息\n      if (res.data.status == 5001) {\n        if (router.resolve(location).location.path != \"/\") {\n          router.replace(\"/\");\n          sessionStorage.clear();\n          Notification.error({ title: \"error\", message: `${res.data.message}(错误码${res.data.status})` });\n        }\n      } else {\n        Notification.error({ title: \"error\", message: `${res.data.message}(错误码${res.data.status})` });\n      }\n      return Promise.reject(res.data);\n    }\n  },\n  err => {\n    Notification.error({ title: \"error\", message: err });\n    return Promise.reject(err);\n  }\n);\n\n//封装方法\n\nfunction get(url, params = \"\", path = \"\") {\n  return new Promise((resolve, reject) => {\n    axios\n      .get(url + path, {\n        params: params\n      })\n      .then(res => {\n        resolve(res);\n      })\n      .catch(err => {\n        reject(err);\n      });\n  });\n}\nfunction post(url, body = \"\", path = \"\") {\n  return new Promise((resolve, reject) => {\n    axios\n      .post(url + path, body)\n      .then(res => {\n        resolve(res);\n      })\n      .catch(err => {\n        reject(err);\n      });\n  });\n}\nfunction put(url, body = \"\", path = \"\") {\n  return new Promise((resolve, reject) => {\n    axios\n      .put(url + path, body)\n      .then(res => {\n        resolve(res);\n      })\n      .catch(err => {\n        reject(err);\n      });\n  });\n}\n\nexport { get, post, put };\n```\n\napi.js 用于封装接口\n\n```js\n//api.js\nimport { reqIp } from \"../config/httpConfig\";\nimport { get, post, put } from \"./http\";\nconst req = {\n  //检测登录状态\n  isLogin: params => {\n    return get(reqIp + \"/guest/is-login\", params);\n  },\n  //登陆接口\n  login: body => {\n    return post(reqIp + \"/api/v1/logon\", body);\n  },\n  // 注销接口\n  logout: body => {\n    return post(reqIp + \"/api/v1/logout\", body);\n  },\n  // 获取通知列表接口\n  getNotice: params => {\n    return get(reqIp + \"/manager/notice/list\", params);\n  },\n  // 添加通知接口\n  addNotice: body => {\n    return put(reqIp + \"/manager/notice/set\", body);\n  },\n  // 获取工具列表接口\n  getToolList: params => {\n    return get(reqIp + \"/member/tool/list\", params);\n  },\n  // 查看权限代码是否可用接口\n  checkPermission: path => {\n    return get(reqIp + \"/manager/tool/check\", \"\", path);\n  },\n  // 添加工具接口\n  addTool: body => {\n    return post(reqIp + \"/manager/tool/set\", body);\n  },\n  //停用/启用工具接口\n  switchToolStatus: path => {\n    return put(reqIp + `/manager/tool/${path}/switch`);\n  },\n  //修改工具接口\n  modifyTool: (body, path) => {\n    return put(reqIp + `/manager/tool/${path}/modify`, body);\n  },\n  //上传logo 接口\n  uploadLogo: (body, path) => {\n    return post(reqIp + `/manager/tool/${path}/upload-avatar`, body);\n  },\n  //获取任务状态信息接口\n  getMissionStatus: () => {\n    return get(reqIp + \"/manager/mission/status\");\n  },\n  //获取历史任务列表接口\n  getMissionList: params => {\n    return get(reqIp + \"/manager/mission/list\", params);\n  },\n\n  //查询日志接口\n  getLogList: params => {\n    return get(reqIp + \"/manager/operation/list\", params);\n  }\n};\nexport { req };\n```\n","slug":"2019.11.08.axios","published":1,"date":"2019-11-08T02:54:46.837Z","updated":"2019-11-08T06:41:14.497Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziiqg001prh9z0ega9tqm","content":"<h1 id=\"axios-的封装\"><a href=\"#axios-的封装\" class=\"headerlink\" title=\"axios 的封装\"></a>axios 的封装</h1><h2 id=\"安装-axios\"><a href=\"#安装-axios\" class=\"headerlink\" title=\"安装 axios\"></a>安装 axios</h2><pre><code>npm install axios; // 安装axios\n</code></pre><h2 id=\"引入-axios\"><a href=\"#引入-axios\" class=\"headerlink\" title=\"引入 axios\"></a>引入 axios</h2><p>在项目目录下新建 http 文件夹,并在 http 文件夹下新建 http.js,用来封装 axios 以及各种方法,新建 api.js 用来统一管理接口.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// http.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">\"axios\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Notification &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"element-ui\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">\"./../router/index\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// axios 配置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//设置 axios 超时</span></span><br><span class=\"line\">axios.defaults.timeout = <span class=\"number\">5000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//设置每次网络请求都要携带 cookie</span></span><br><span class=\"line\"><span class=\"comment\">//这里有个坑,由于浏览器的cors 策略,当我们设置携带 cookie 时,后端的`Access-Control-Allow-Origin`不能设置为*,</span></span><br><span class=\"line\"><span class=\"comment\">// 必须指定ip</span></span><br><span class=\"line\">axios.defaults.withCredentials = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//设置 baseUrl</span></span><br><span class=\"line\"><span class=\"comment\">// axios.defaults.baseURL = \"https://api.github.com\";</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// http request 拦截器</span></span><br><span class=\"line\">axios.interceptors.request.use(</span><br><span class=\"line\">  config =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">//这里可以统一配置请求头</span></span><br><span class=\"line\">    <span class=\"comment\">//比如每次都携带后端认证需要的 token 等.</span></span><br><span class=\"line\">    <span class=\"comment\">// config.headers['content-type'] = \"application/json\";</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  err =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(err);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">//http response 拦截器</span></span><br><span class=\"line\">axios.interceptors.response.use(</span><br><span class=\"line\">  res =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (res.data.status == <span class=\"number\">200</span> &amp;&amp; res.data.success) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve(res.data);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//router.resolve(location).location.path 获取当前页面的路由信息</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (res.data.status == <span class=\"number\">5001</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (router.resolve(location).location.path != <span class=\"string\">\"/\"</span>) &#123;</span><br><span class=\"line\">          router.replace(<span class=\"string\">\"/\"</span>);</span><br><span class=\"line\">          sessionStorage.clear();</span><br><span class=\"line\">          Notification.error(&#123; <span class=\"attr\">title</span>: <span class=\"string\">\"error\"</span>, <span class=\"attr\">message</span>: <span class=\"string\">`<span class=\"subst\">$&#123;res.data.message&#125;</span>(错误码<span class=\"subst\">$&#123;res.data.status&#125;</span>)`</span> &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        Notification.error(&#123; <span class=\"attr\">title</span>: <span class=\"string\">\"error\"</span>, <span class=\"attr\">message</span>: <span class=\"string\">`<span class=\"subst\">$&#123;res.data.message&#125;</span>(错误码<span class=\"subst\">$&#123;res.data.status&#125;</span>)`</span> &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(res.data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  err =&gt; &#123;</span><br><span class=\"line\">    Notification.error(&#123; <span class=\"attr\">title</span>: <span class=\"string\">\"error\"</span>, <span class=\"attr\">message</span>: err &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(err);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//封装方法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span>(<span class=\"params\">url, params = <span class=\"string\">\"\"</span>, path = <span class=\"string\">\"\"</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    axios</span><br><span class=\"line\">      .get(url + path, &#123;</span><br><span class=\"line\">        params: params</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(res);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">        reject(err);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">post</span>(<span class=\"params\">url, body = <span class=\"string\">\"\"</span>, path = <span class=\"string\">\"\"</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    axios</span><br><span class=\"line\">      .post(url + path, body)</span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(res);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">        reject(err);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">put</span>(<span class=\"params\">url, body = <span class=\"string\">\"\"</span>, path = <span class=\"string\">\"\"</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    axios</span><br><span class=\"line\">      .put(url + path, body)</span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(res);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">        reject(err);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; <span class=\"keyword\">get</span>, post, put &#125;;</span><br></pre></td></tr></table></figure>\n<p>api.js 用于封装接口</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//api.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; reqIp &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"../config/httpConfig\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"keyword\">get</span>, post, put &#125; from \"./http\";</span><br><span class=\"line\">const req = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//检测登录状态</span></span><br><span class=\"line\">  isLogin: <span class=\"function\"><span class=\"params\">params</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">get</span>(reqIp + \"/guest/is-login\", params);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  //登陆接口</span><br><span class=\"line\">  login: body =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> post(reqIp + <span class=\"string\">\"/api/v1/logon\"</span>, body);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 注销接口</span></span><br><span class=\"line\">  logout: <span class=\"function\"><span class=\"params\">body</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> post(reqIp + <span class=\"string\">\"/api/v1/logout\"</span>, body);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 获取通知列表接口</span></span><br><span class=\"line\">  getNotice: <span class=\"function\"><span class=\"params\">params</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">get</span>(reqIp + \"/manager/notice/list\", params);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  // 添加通知接口</span><br><span class=\"line\">  addNotice: body =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> put(reqIp + <span class=\"string\">\"/manager/notice/set\"</span>, body);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 获取工具列表接口</span></span><br><span class=\"line\">  getToolList: <span class=\"function\"><span class=\"params\">params</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">get</span>(reqIp + \"/member/tool/list\", params);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  // 查看权限代码是否可用接口</span><br><span class=\"line\">  checkPermission: path =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">get</span>(reqIp + \"/manager/tool/check\", \"\", path);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  // 添加工具接口</span><br><span class=\"line\">  addTool: body =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> post(reqIp + <span class=\"string\">\"/manager/tool/set\"</span>, body);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">//停用/启用工具接口</span></span><br><span class=\"line\">  switchToolStatus: <span class=\"function\"><span class=\"params\">path</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> put(reqIp + <span class=\"string\">`/manager/tool/<span class=\"subst\">$&#123;path&#125;</span>/switch`</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">//修改工具接口</span></span><br><span class=\"line\">  modifyTool: <span class=\"function\">(<span class=\"params\">body, path</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> put(reqIp + <span class=\"string\">`/manager/tool/<span class=\"subst\">$&#123;path&#125;</span>/modify`</span>, body);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">//上传logo 接口</span></span><br><span class=\"line\">  uploadLogo: <span class=\"function\">(<span class=\"params\">body, path</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> post(reqIp + <span class=\"string\">`/manager/tool/<span class=\"subst\">$&#123;path&#125;</span>/upload-avatar`</span>, body);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">//获取任务状态信息接口</span></span><br><span class=\"line\">  getMissionStatus: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">get</span>(reqIp + \"/manager/mission/status\");</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  //获取历史任务列表接口</span><br><span class=\"line\">  getMissionList: params =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">get</span>(reqIp + \"/manager/mission/list\", params);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  //查询日志接口</span><br><span class=\"line\">  getLogList: params =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">get</span>(reqIp + \"/manager/operation/list\", params);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">export &#123; req &#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"axios-的封装\"><a href=\"#axios-的封装\" class=\"headerlink\" title=\"axios 的封装\"></a>axios 的封装</h1><h2 id=\"安装-axios\"><a href=\"#安装-axios\" class=\"headerlink\" title=\"安装 axios\"></a>安装 axios</h2><pre><code>npm install axios; // 安装axios\n</code></pre><h2 id=\"引入-axios\"><a href=\"#引入-axios\" class=\"headerlink\" title=\"引入 axios\"></a>引入 axios</h2><p>在项目目录下新建 http 文件夹,并在 http 文件夹下新建 http.js,用来封装 axios 以及各种方法,新建 api.js 用来统一管理接口.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// http.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">\"axios\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Notification &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"element-ui\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">\"./../router/index\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// axios 配置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//设置 axios 超时</span></span><br><span class=\"line\">axios.defaults.timeout = <span class=\"number\">5000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//设置每次网络请求都要携带 cookie</span></span><br><span class=\"line\"><span class=\"comment\">//这里有个坑,由于浏览器的cors 策略,当我们设置携带 cookie 时,后端的`Access-Control-Allow-Origin`不能设置为*,</span></span><br><span class=\"line\"><span class=\"comment\">// 必须指定ip</span></span><br><span class=\"line\">axios.defaults.withCredentials = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//设置 baseUrl</span></span><br><span class=\"line\"><span class=\"comment\">// axios.defaults.baseURL = \"https://api.github.com\";</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// http request 拦截器</span></span><br><span class=\"line\">axios.interceptors.request.use(</span><br><span class=\"line\">  config =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">//这里可以统一配置请求头</span></span><br><span class=\"line\">    <span class=\"comment\">//比如每次都携带后端认证需要的 token 等.</span></span><br><span class=\"line\">    <span class=\"comment\">// config.headers['content-type'] = \"application/json\";</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  err =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(err);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">//http response 拦截器</span></span><br><span class=\"line\">axios.interceptors.response.use(</span><br><span class=\"line\">  res =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (res.data.status == <span class=\"number\">200</span> &amp;&amp; res.data.success) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve(res.data);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//router.resolve(location).location.path 获取当前页面的路由信息</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (res.data.status == <span class=\"number\">5001</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (router.resolve(location).location.path != <span class=\"string\">\"/\"</span>) &#123;</span><br><span class=\"line\">          router.replace(<span class=\"string\">\"/\"</span>);</span><br><span class=\"line\">          sessionStorage.clear();</span><br><span class=\"line\">          Notification.error(&#123; <span class=\"attr\">title</span>: <span class=\"string\">\"error\"</span>, <span class=\"attr\">message</span>: <span class=\"string\">`<span class=\"subst\">$&#123;res.data.message&#125;</span>(错误码<span class=\"subst\">$&#123;res.data.status&#125;</span>)`</span> &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        Notification.error(&#123; <span class=\"attr\">title</span>: <span class=\"string\">\"error\"</span>, <span class=\"attr\">message</span>: <span class=\"string\">`<span class=\"subst\">$&#123;res.data.message&#125;</span>(错误码<span class=\"subst\">$&#123;res.data.status&#125;</span>)`</span> &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(res.data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  err =&gt; &#123;</span><br><span class=\"line\">    Notification.error(&#123; <span class=\"attr\">title</span>: <span class=\"string\">\"error\"</span>, <span class=\"attr\">message</span>: err &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(err);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//封装方法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span>(<span class=\"params\">url, params = <span class=\"string\">\"\"</span>, path = <span class=\"string\">\"\"</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    axios</span><br><span class=\"line\">      .get(url + path, &#123;</span><br><span class=\"line\">        params: params</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(res);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">        reject(err);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">post</span>(<span class=\"params\">url, body = <span class=\"string\">\"\"</span>, path = <span class=\"string\">\"\"</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    axios</span><br><span class=\"line\">      .post(url + path, body)</span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(res);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">        reject(err);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">put</span>(<span class=\"params\">url, body = <span class=\"string\">\"\"</span>, path = <span class=\"string\">\"\"</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    axios</span><br><span class=\"line\">      .put(url + path, body)</span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(res);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">        reject(err);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; <span class=\"keyword\">get</span>, post, put &#125;;</span><br></pre></td></tr></table></figure>\n<p>api.js 用于封装接口</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//api.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; reqIp &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"../config/httpConfig\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"keyword\">get</span>, post, put &#125; from \"./http\";</span><br><span class=\"line\">const req = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//检测登录状态</span></span><br><span class=\"line\">  isLogin: <span class=\"function\"><span class=\"params\">params</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">get</span>(reqIp + \"/guest/is-login\", params);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  //登陆接口</span><br><span class=\"line\">  login: body =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> post(reqIp + <span class=\"string\">\"/api/v1/logon\"</span>, body);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 注销接口</span></span><br><span class=\"line\">  logout: <span class=\"function\"><span class=\"params\">body</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> post(reqIp + <span class=\"string\">\"/api/v1/logout\"</span>, body);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 获取通知列表接口</span></span><br><span class=\"line\">  getNotice: <span class=\"function\"><span class=\"params\">params</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">get</span>(reqIp + \"/manager/notice/list\", params);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  // 添加通知接口</span><br><span class=\"line\">  addNotice: body =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> put(reqIp + <span class=\"string\">\"/manager/notice/set\"</span>, body);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 获取工具列表接口</span></span><br><span class=\"line\">  getToolList: <span class=\"function\"><span class=\"params\">params</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">get</span>(reqIp + \"/member/tool/list\", params);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  // 查看权限代码是否可用接口</span><br><span class=\"line\">  checkPermission: path =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">get</span>(reqIp + \"/manager/tool/check\", \"\", path);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  // 添加工具接口</span><br><span class=\"line\">  addTool: body =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> post(reqIp + <span class=\"string\">\"/manager/tool/set\"</span>, body);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">//停用/启用工具接口</span></span><br><span class=\"line\">  switchToolStatus: <span class=\"function\"><span class=\"params\">path</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> put(reqIp + <span class=\"string\">`/manager/tool/<span class=\"subst\">$&#123;path&#125;</span>/switch`</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">//修改工具接口</span></span><br><span class=\"line\">  modifyTool: <span class=\"function\">(<span class=\"params\">body, path</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> put(reqIp + <span class=\"string\">`/manager/tool/<span class=\"subst\">$&#123;path&#125;</span>/modify`</span>, body);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">//上传logo 接口</span></span><br><span class=\"line\">  uploadLogo: <span class=\"function\">(<span class=\"params\">body, path</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> post(reqIp + <span class=\"string\">`/manager/tool/<span class=\"subst\">$&#123;path&#125;</span>/upload-avatar`</span>, body);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">//获取任务状态信息接口</span></span><br><span class=\"line\">  getMissionStatus: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">get</span>(reqIp + \"/manager/mission/status\");</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  //获取历史任务列表接口</span><br><span class=\"line\">  getMissionList: params =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">get</span>(reqIp + \"/manager/mission/list\", params);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  //查询日志接口</span><br><span class=\"line\">  getLogList: params =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">get</span>(reqIp + \"/manager/operation/list\", params);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">export &#123; req &#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"docker部署 mysql","_content":"\n# why\n\n在 linux 中部署 mysql 是一件比较复杂的事情,使用 docker 部署可以减少很多麻烦.\n\n# how\n\n## 拉取 mysql 镜像\n\n这里我们使用 mysql:5.7 镜像\n\n```sh\ndocker pull mysql:5.7\n```\n\n## 创建 mysql 镜像并后台启动\n\n```sh\ndocker run -d -p 3306:3306 -e MYSQL_USER=\"user\" -e MYSQL_PASSWORD=\"123456\" -e MYSQL_ROOT_PASSWORD=\"123456\" --name mysqlService mysql:5.7 --character-set-server=utf8 --collation-server=utf8_general_ci\n```\n\n参数说明:\n\n- -p 设置端口映射 3306:3306 代表外部 3306 端口映射到容器内 3306 端口\n\n- -d 表示作为一个守护进程在后台运行\n\n- -e MYSQL_USER=\"user\"  ：添加用户 user\n\n- -e MYSQL_PASSWORD=\"123456\"：设置添加的用户密码\n\n- -e MYSQL_ROOT_PASSWORD=\"123456\"：设置 root 用户密码\n\n- --character-set-server=utf8：设置字符集为 utf8\n\n- --collation-server=utf8_general_cli：设置字符比较规则为 utf8_general_cli\n\n## 挂载外部配置和数据\n\n启动上面的容器时,配置文件和数据是保存在容器内部的,这样容器停止运行的时候,数据就会丢失,我们现在要把 mysql 的配置文件以及 mysql 数据存放从外部挂载.\n\n```sh\nmkdir /docker\nmkdir /docker/mysql\nmkdir /docker/mysql/conf\nmkdir /docker/mysql/data\n\n创建my.cnf配置文件\ntouch /docker/mysql/conf/my.cnf\n\nmy.cnf添加如下内容：\n[mysqld]\nuser=mysql\ncharacter-set-server=utf8\ndefault_authentication_plugin=mysql_native_password\n[client]\ndefault-character-set=utf8\n[mysql]\ndefault-character-set=utf8\n```\n\n```sh\ndocker run -d -p 3306:3306 --privileged=true -v /docker/mysql/conf/my.cnf:/etc/mysql/my.cnf -v /docker/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysqltest2 mysql:5.7\n```\n\n参数说明:\n\n--privileged=true：容器内的 root 拥有真正 root 权限，否则容器内 root 只是外部普通用户权限\n\n`-v /docker/mysql/conf/my.cnf:/etc/my.cnf`：映射配置文件\n\n`-v /docker/mysql/data:/var/lib/mysql`：映射数据目录\n\n# then\n\n使用 navicat 或者其他工具连接数据库即可,如果 docker 部署在 ecs 记得开放对应端口\n","source":"_posts/2019.11.14.dockerMysql.md","raw":"---\ntitle: docker部署 mysql\ntags: [docker, mysql]\ncategories: 随笔\n---\n\n# why\n\n在 linux 中部署 mysql 是一件比较复杂的事情,使用 docker 部署可以减少很多麻烦.\n\n# how\n\n## 拉取 mysql 镜像\n\n这里我们使用 mysql:5.7 镜像\n\n```sh\ndocker pull mysql:5.7\n```\n\n## 创建 mysql 镜像并后台启动\n\n```sh\ndocker run -d -p 3306:3306 -e MYSQL_USER=\"user\" -e MYSQL_PASSWORD=\"123456\" -e MYSQL_ROOT_PASSWORD=\"123456\" --name mysqlService mysql:5.7 --character-set-server=utf8 --collation-server=utf8_general_ci\n```\n\n参数说明:\n\n- -p 设置端口映射 3306:3306 代表外部 3306 端口映射到容器内 3306 端口\n\n- -d 表示作为一个守护进程在后台运行\n\n- -e MYSQL_USER=\"user\"  ：添加用户 user\n\n- -e MYSQL_PASSWORD=\"123456\"：设置添加的用户密码\n\n- -e MYSQL_ROOT_PASSWORD=\"123456\"：设置 root 用户密码\n\n- --character-set-server=utf8：设置字符集为 utf8\n\n- --collation-server=utf8_general_cli：设置字符比较规则为 utf8_general_cli\n\n## 挂载外部配置和数据\n\n启动上面的容器时,配置文件和数据是保存在容器内部的,这样容器停止运行的时候,数据就会丢失,我们现在要把 mysql 的配置文件以及 mysql 数据存放从外部挂载.\n\n```sh\nmkdir /docker\nmkdir /docker/mysql\nmkdir /docker/mysql/conf\nmkdir /docker/mysql/data\n\n创建my.cnf配置文件\ntouch /docker/mysql/conf/my.cnf\n\nmy.cnf添加如下内容：\n[mysqld]\nuser=mysql\ncharacter-set-server=utf8\ndefault_authentication_plugin=mysql_native_password\n[client]\ndefault-character-set=utf8\n[mysql]\ndefault-character-set=utf8\n```\n\n```sh\ndocker run -d -p 3306:3306 --privileged=true -v /docker/mysql/conf/my.cnf:/etc/mysql/my.cnf -v /docker/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysqltest2 mysql:5.7\n```\n\n参数说明:\n\n--privileged=true：容器内的 root 拥有真正 root 权限，否则容器内 root 只是外部普通用户权限\n\n`-v /docker/mysql/conf/my.cnf:/etc/my.cnf`：映射配置文件\n\n`-v /docker/mysql/data:/var/lib/mysql`：映射数据目录\n\n# then\n\n使用 navicat 或者其他工具连接数据库即可,如果 docker 部署在 ecs 记得开放对应端口\n","slug":"2019.11.14.dockerMysql","published":1,"date":"2019-11-14T01:21:20.927Z","updated":"2019-11-14T01:36:13.010Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziiqg001qrh9zaj4m9o4e","content":"<h1 id=\"why\"><a href=\"#why\" class=\"headerlink\" title=\"why\"></a>why</h1><p>在 linux 中部署 mysql 是一件比较复杂的事情,使用 docker 部署可以减少很多麻烦.</p>\n<h1 id=\"how\"><a href=\"#how\" class=\"headerlink\" title=\"how\"></a>how</h1><h2 id=\"拉取-mysql-镜像\"><a href=\"#拉取-mysql-镜像\" class=\"headerlink\" title=\"拉取 mysql 镜像\"></a>拉取 mysql 镜像</h2><p>这里我们使用 mysql:5.7 镜像</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mysql:5.7</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建-mysql-镜像并后台启动\"><a href=\"#创建-mysql-镜像并后台启动\" class=\"headerlink\" title=\"创建 mysql 镜像并后台启动\"></a>创建 mysql 镜像并后台启动</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 3306:3306 -e MYSQL_USER=<span class=\"string\">\"user\"</span> -e MYSQL_PASSWORD=<span class=\"string\">\"123456\"</span> -e MYSQL_ROOT_PASSWORD=<span class=\"string\">\"123456\"</span> --name mysqlService mysql:5.7 --character-set-server=utf8 --collation-server=utf8_general_ci</span><br></pre></td></tr></table></figure>\n<p>参数说明:</p>\n<ul>\n<li><p>-p 设置端口映射 3306:3306 代表外部 3306 端口映射到容器内 3306 端口</p>\n</li>\n<li><p>-d 表示作为一个守护进程在后台运行</p>\n</li>\n<li><p>-e MYSQL_USER=”user”  ：添加用户 user</p>\n</li>\n<li><p>-e MYSQL_PASSWORD=”123456”：设置添加的用户密码</p>\n</li>\n<li><p>-e MYSQL_ROOT_PASSWORD=”123456”：设置 root 用户密码</p>\n</li>\n<li><p>–character-set-server=utf8：设置字符集为 utf8</p>\n</li>\n<li><p>–collation-server=utf8_general_cli：设置字符比较规则为 utf8_general_cli</p>\n</li>\n</ul>\n<h2 id=\"挂载外部配置和数据\"><a href=\"#挂载外部配置和数据\" class=\"headerlink\" title=\"挂载外部配置和数据\"></a>挂载外部配置和数据</h2><p>启动上面的容器时,配置文件和数据是保存在容器内部的,这样容器停止运行的时候,数据就会丢失,我们现在要把 mysql 的配置文件以及 mysql 数据存放从外部挂载.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /docker</span><br><span class=\"line\">mkdir /docker/mysql</span><br><span class=\"line\">mkdir /docker/mysql/conf</span><br><span class=\"line\">mkdir /docker/mysql/data</span><br><span class=\"line\"></span><br><span class=\"line\">创建my.cnf配置文件</span><br><span class=\"line\">touch /docker/mysql/conf/my.cnf</span><br><span class=\"line\"></span><br><span class=\"line\">my.cnf添加如下内容：</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">user=mysql</span><br><span class=\"line\">character-set-server=utf8</span><br><span class=\"line\">default_authentication_plugin=mysql_native_password</span><br><span class=\"line\">[client]</span><br><span class=\"line\">default-character-set=utf8</span><br><span class=\"line\">[mysql]</span><br><span class=\"line\">default-character-set=utf8</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 3306:3306 --privileged=<span class=\"literal\">true</span> -v /docker/mysql/conf/my.cnf:/etc/mysql/my.cnf -v /docker/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysqltest2 mysql:5.7</span><br></pre></td></tr></table></figure>\n<p>参数说明:</p>\n<p>–privileged=true：容器内的 root 拥有真正 root 权限，否则容器内 root 只是外部普通用户权限</p>\n<p><code>-v /docker/mysql/conf/my.cnf:/etc/my.cnf</code>：映射配置文件</p>\n<p><code>-v /docker/mysql/data:/var/lib/mysql</code>：映射数据目录</p>\n<h1 id=\"then\"><a href=\"#then\" class=\"headerlink\" title=\"then\"></a>then</h1><p>使用 navicat 或者其他工具连接数据库即可,如果 docker 部署在 ecs 记得开放对应端口</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"why\"><a href=\"#why\" class=\"headerlink\" title=\"why\"></a>why</h1><p>在 linux 中部署 mysql 是一件比较复杂的事情,使用 docker 部署可以减少很多麻烦.</p>\n<h1 id=\"how\"><a href=\"#how\" class=\"headerlink\" title=\"how\"></a>how</h1><h2 id=\"拉取-mysql-镜像\"><a href=\"#拉取-mysql-镜像\" class=\"headerlink\" title=\"拉取 mysql 镜像\"></a>拉取 mysql 镜像</h2><p>这里我们使用 mysql:5.7 镜像</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull mysql:5.7</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建-mysql-镜像并后台启动\"><a href=\"#创建-mysql-镜像并后台启动\" class=\"headerlink\" title=\"创建 mysql 镜像并后台启动\"></a>创建 mysql 镜像并后台启动</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 3306:3306 -e MYSQL_USER=<span class=\"string\">\"user\"</span> -e MYSQL_PASSWORD=<span class=\"string\">\"123456\"</span> -e MYSQL_ROOT_PASSWORD=<span class=\"string\">\"123456\"</span> --name mysqlService mysql:5.7 --character-set-server=utf8 --collation-server=utf8_general_ci</span><br></pre></td></tr></table></figure>\n<p>参数说明:</p>\n<ul>\n<li><p>-p 设置端口映射 3306:3306 代表外部 3306 端口映射到容器内 3306 端口</p>\n</li>\n<li><p>-d 表示作为一个守护进程在后台运行</p>\n</li>\n<li><p>-e MYSQL_USER=”user”  ：添加用户 user</p>\n</li>\n<li><p>-e MYSQL_PASSWORD=”123456”：设置添加的用户密码</p>\n</li>\n<li><p>-e MYSQL_ROOT_PASSWORD=”123456”：设置 root 用户密码</p>\n</li>\n<li><p>–character-set-server=utf8：设置字符集为 utf8</p>\n</li>\n<li><p>–collation-server=utf8_general_cli：设置字符比较规则为 utf8_general_cli</p>\n</li>\n</ul>\n<h2 id=\"挂载外部配置和数据\"><a href=\"#挂载外部配置和数据\" class=\"headerlink\" title=\"挂载外部配置和数据\"></a>挂载外部配置和数据</h2><p>启动上面的容器时,配置文件和数据是保存在容器内部的,这样容器停止运行的时候,数据就会丢失,我们现在要把 mysql 的配置文件以及 mysql 数据存放从外部挂载.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /docker</span><br><span class=\"line\">mkdir /docker/mysql</span><br><span class=\"line\">mkdir /docker/mysql/conf</span><br><span class=\"line\">mkdir /docker/mysql/data</span><br><span class=\"line\"></span><br><span class=\"line\">创建my.cnf配置文件</span><br><span class=\"line\">touch /docker/mysql/conf/my.cnf</span><br><span class=\"line\"></span><br><span class=\"line\">my.cnf添加如下内容：</span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">user=mysql</span><br><span class=\"line\">character-set-server=utf8</span><br><span class=\"line\">default_authentication_plugin=mysql_native_password</span><br><span class=\"line\">[client]</span><br><span class=\"line\">default-character-set=utf8</span><br><span class=\"line\">[mysql]</span><br><span class=\"line\">default-character-set=utf8</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 3306:3306 --privileged=<span class=\"literal\">true</span> -v /docker/mysql/conf/my.cnf:/etc/mysql/my.cnf -v /docker/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysqltest2 mysql:5.7</span><br></pre></td></tr></table></figure>\n<p>参数说明:</p>\n<p>–privileged=true：容器内的 root 拥有真正 root 权限，否则容器内 root 只是外部普通用户权限</p>\n<p><code>-v /docker/mysql/conf/my.cnf:/etc/my.cnf</code>：映射配置文件</p>\n<p><code>-v /docker/mysql/data:/var/lib/mysql</code>：映射数据目录</p>\n<h1 id=\"then\"><a href=\"#then\" class=\"headerlink\" title=\"then\"></a>then</h1><p>使用 navicat 或者其他工具连接数据库即可,如果 docker 部署在 ecs 记得开放对应端口</p>\n"},{"title":"arraybuffer","_content":"\n> The ArrayBuffer is a data type that is used to represent a generic, fixed-length binary data buffer. You can't directly manipulate the contents of an ArrayBuffer; instead, you create an ArrayBufferView object which represents the buffer in a specific format, and use that to read and write the contents of the buffer.\n> 表示二进制数据的原始缓冲区，该缓冲区用于存储各种类型化数组的数据。 无法直接读取或写入 ArrayBuffer，但可根据需要将其传递到类型化数组或 DataView 对象 来解释原始缓冲区。\n\n## 为什么会用到 arrayBuffer\n\n有一个需求,获取到前端实时语音并通过 websocket 传到后端,具体的实现过程我后面会再更新一篇博客讲.这里简单说下:\n\n```js\nlet constraints = {\n  audio: true,\n  video: false\n};\n//这里获取到的是音频数据\nnavigator.mediaDevices\n  .getUserMedia(constraints)\n  //mediaStream是获取到的音频流\n  .then(mediaStream => {\n    //使用 audioContext 来处理获取到的音频流\n    this.audioContext = new (window.AudioContext ||\n      window.webkitAudioContext)();\n    let audioInput = this.audioContext.createMediaStreamSource(mediaStream);\n    //createScriptProcessor中可以填入缓冲区大小,不填则自动选择\n    //缓冲区大小为 2的指数次方\n    let recorder =\n    this.audioContext.createScriptProcessor();\n    //sampleRate为声音采样率\n    console.log(this.audioContext.sampleRate);\n    //onaudioprocess代表缓冲区满了以后触发的操作\n    recorder.onaudioprocess = this.recorderProcess;\n    audioInput.connect(recorder);\n    recorder.connect(this.audioContext.destination);\n  })\n\n\n  recorderProcess(e) {\n      //left 为获取到的单声道音频流\n      //类型为 float32Array\n      const left = e.inputBuffer.getChannelData(1);\n      this.sendMessage(this.changeRate(left));\n    },\n    //处理音频流\n    changeRate(e) {\n        //变更采样率\n        //浏览器无法手动设置采样率,所以要根据需求的采样率进行修改\n        //浏览器的的采样率是 44100,而我们需要的采样率是 16000\n      let t = e.length;\n      let sampleRate = 44100.0;\n      let outputSampleRate = 16000.0;\n      var s = 0,\n        o = sampleRate / outputSampleRate,\n        u = Math.ceil((t * outputSampleRate) / sampleRate),\n        a = new Float32Array(u);\n      for (let i = 0; i < u; i++) {\n        a[i] = e[Math.floor(s)];\n        s += o;\n      }\n      //float32Array 转化为 int16Array,因为后端需要的是 16 位深的pcm 数据\n      let b = new Int16Array(a.buffer);\n      console.log(b);\n      return b;\n    }\n\n```\n\n# arraybuffer\n## 原始缓冲区的创建\n    var buffer  = new ArrayBuffer(30);\n\nbuffer 实例拥有一个 byteLength 的属性，用于获取 buffer 的 size，一个只有 IE11+ 以及 ios6+ 支持的 slice 方法，用于对 buffer 长度进行截取操作。\n\n    ArrayBuffer slice(\n    unsigned long begin\n    unsigned long end Optional\n    );\n可以测试这个 DEMO：\n```js\nvar buffer = new ArrayBuffer(12);\nvar x = new Int32Array(buffer);\nx[1] = 1234;\nvar slice = buffer.slice(4);\nvar y = new Int32Array(slice);\nconsole.log(x[1]); \nconsole.log(y[0]);\nx[1] = 6789;\nconsole.log(x[1]); \nconsole.log(y[0]);\n```\n\n## 数据化数组\n类型化数组类型表示可编制索引和操纵的 ArrayBuffer 对象 的各种视图。 所有数组类型的长度均固定。\n\n![WX20191120-103621@2x](https://i.loli.net/2019/11/20/7Gc9KfQYHJyWLMv.png)\n\nInt 就是整型，Uint 为无符号整形，Float 为浮点型，这些是 C 语言中的基本概念，我就不具体解释了。由于这些视图化结构都是大同小异，本文只对 Float32Array 类型作说明，读者可以举一反三。\n\nFloat32Array 跟 Array 是十分类似的，只不过他每一个元素都是都是一个 32位（4字节） 的浮点型数据。Float32Array 一旦创建其大小不能再修改。\n\n我们可以直接创建一个 Float32Array:\n```js\nvar x = new Float32Array(2);\nx[0] = 17;\nconsole.log(x[0]); // 17\nconsole.log(x[1]); // 0\nconsole.log(x.length); // 2\n```\n需要有这么一个概念，他依然是一个数组，只不过该数组中的每个元素都是 Float 32 位的数据类型，再如：\n```js\nvar x = new Float32Array([17, -45.3]);\nconsole.log(x[0]);  // 17\nconsole.log(x[1]);  // -45.29999923706055\nconsole.log(x.length); // 2\n```\n我们把一个数组的值直接赋给了 x 这个 Float32Array 对象，那么在储存之前会将它转换成一个 32位浮点数。\n\n由于该类数组的每个元素都是同一类型，所以在堆栈模型中，他们全部会被压入到栈之中，因此数据化数组都是值类型，他并不是引用类型！这个要引起注意，从下面的例子中也可以反映出来：\n```js\nvar x = new Float32Array([17, -45.3]);\nvar y = new Float32Array(x);\nconsole.log(x[0]); // 17\nconsole.log(x[1]); //-45.29999923706055\nconsole.log(x.length); // 2\nx[0] = -2;\nconsole.log(y[0]); // 17, y的值没变\n```\n将 x 的值复制给 y，修改 x[0], y[0] 并没有变化。\n\n\n### 类型转换\n\n直接从ArrayBuffer执行操作\n```js\nvar dataAsInt16Array = new Int16Array(data.buffer);\nvar f32 = new Float32Array(4);\nf32[0] = 0.1, f32[1] = 0.2, f32[2] = 0.3, f32[3] = 0.4;\n// [0.10000000149011612, 0.20000000298023224, 0.30000001192092896, 0.4000000059604645]\n\nvar i16 = new Int16Array(f32.buffer);\n// [-13107, 15820, -13107, 15948, -26214, 16025, -13107, 16076]\n\n// and back again\nnew Float32Array(i16.buffer);\n// [0.10000000149011612, 0.20000000298023224, 0.30000001192092896, 0.4000000059604645]\n```\n\n\n","source":"_posts/2019.11.20.arraybuffer.md","raw":"---\ntitle: arraybuffer\ntags: [JavaScript]\ncategories: 随笔\n---\n\n> The ArrayBuffer is a data type that is used to represent a generic, fixed-length binary data buffer. You can't directly manipulate the contents of an ArrayBuffer; instead, you create an ArrayBufferView object which represents the buffer in a specific format, and use that to read and write the contents of the buffer.\n> 表示二进制数据的原始缓冲区，该缓冲区用于存储各种类型化数组的数据。 无法直接读取或写入 ArrayBuffer，但可根据需要将其传递到类型化数组或 DataView 对象 来解释原始缓冲区。\n\n## 为什么会用到 arrayBuffer\n\n有一个需求,获取到前端实时语音并通过 websocket 传到后端,具体的实现过程我后面会再更新一篇博客讲.这里简单说下:\n\n```js\nlet constraints = {\n  audio: true,\n  video: false\n};\n//这里获取到的是音频数据\nnavigator.mediaDevices\n  .getUserMedia(constraints)\n  //mediaStream是获取到的音频流\n  .then(mediaStream => {\n    //使用 audioContext 来处理获取到的音频流\n    this.audioContext = new (window.AudioContext ||\n      window.webkitAudioContext)();\n    let audioInput = this.audioContext.createMediaStreamSource(mediaStream);\n    //createScriptProcessor中可以填入缓冲区大小,不填则自动选择\n    //缓冲区大小为 2的指数次方\n    let recorder =\n    this.audioContext.createScriptProcessor();\n    //sampleRate为声音采样率\n    console.log(this.audioContext.sampleRate);\n    //onaudioprocess代表缓冲区满了以后触发的操作\n    recorder.onaudioprocess = this.recorderProcess;\n    audioInput.connect(recorder);\n    recorder.connect(this.audioContext.destination);\n  })\n\n\n  recorderProcess(e) {\n      //left 为获取到的单声道音频流\n      //类型为 float32Array\n      const left = e.inputBuffer.getChannelData(1);\n      this.sendMessage(this.changeRate(left));\n    },\n    //处理音频流\n    changeRate(e) {\n        //变更采样率\n        //浏览器无法手动设置采样率,所以要根据需求的采样率进行修改\n        //浏览器的的采样率是 44100,而我们需要的采样率是 16000\n      let t = e.length;\n      let sampleRate = 44100.0;\n      let outputSampleRate = 16000.0;\n      var s = 0,\n        o = sampleRate / outputSampleRate,\n        u = Math.ceil((t * outputSampleRate) / sampleRate),\n        a = new Float32Array(u);\n      for (let i = 0; i < u; i++) {\n        a[i] = e[Math.floor(s)];\n        s += o;\n      }\n      //float32Array 转化为 int16Array,因为后端需要的是 16 位深的pcm 数据\n      let b = new Int16Array(a.buffer);\n      console.log(b);\n      return b;\n    }\n\n```\n\n# arraybuffer\n## 原始缓冲区的创建\n    var buffer  = new ArrayBuffer(30);\n\nbuffer 实例拥有一个 byteLength 的属性，用于获取 buffer 的 size，一个只有 IE11+ 以及 ios6+ 支持的 slice 方法，用于对 buffer 长度进行截取操作。\n\n    ArrayBuffer slice(\n    unsigned long begin\n    unsigned long end Optional\n    );\n可以测试这个 DEMO：\n```js\nvar buffer = new ArrayBuffer(12);\nvar x = new Int32Array(buffer);\nx[1] = 1234;\nvar slice = buffer.slice(4);\nvar y = new Int32Array(slice);\nconsole.log(x[1]); \nconsole.log(y[0]);\nx[1] = 6789;\nconsole.log(x[1]); \nconsole.log(y[0]);\n```\n\n## 数据化数组\n类型化数组类型表示可编制索引和操纵的 ArrayBuffer 对象 的各种视图。 所有数组类型的长度均固定。\n\n![WX20191120-103621@2x](https://i.loli.net/2019/11/20/7Gc9KfQYHJyWLMv.png)\n\nInt 就是整型，Uint 为无符号整形，Float 为浮点型，这些是 C 语言中的基本概念，我就不具体解释了。由于这些视图化结构都是大同小异，本文只对 Float32Array 类型作说明，读者可以举一反三。\n\nFloat32Array 跟 Array 是十分类似的，只不过他每一个元素都是都是一个 32位（4字节） 的浮点型数据。Float32Array 一旦创建其大小不能再修改。\n\n我们可以直接创建一个 Float32Array:\n```js\nvar x = new Float32Array(2);\nx[0] = 17;\nconsole.log(x[0]); // 17\nconsole.log(x[1]); // 0\nconsole.log(x.length); // 2\n```\n需要有这么一个概念，他依然是一个数组，只不过该数组中的每个元素都是 Float 32 位的数据类型，再如：\n```js\nvar x = new Float32Array([17, -45.3]);\nconsole.log(x[0]);  // 17\nconsole.log(x[1]);  // -45.29999923706055\nconsole.log(x.length); // 2\n```\n我们把一个数组的值直接赋给了 x 这个 Float32Array 对象，那么在储存之前会将它转换成一个 32位浮点数。\n\n由于该类数组的每个元素都是同一类型，所以在堆栈模型中，他们全部会被压入到栈之中，因此数据化数组都是值类型，他并不是引用类型！这个要引起注意，从下面的例子中也可以反映出来：\n```js\nvar x = new Float32Array([17, -45.3]);\nvar y = new Float32Array(x);\nconsole.log(x[0]); // 17\nconsole.log(x[1]); //-45.29999923706055\nconsole.log(x.length); // 2\nx[0] = -2;\nconsole.log(y[0]); // 17, y的值没变\n```\n将 x 的值复制给 y，修改 x[0], y[0] 并没有变化。\n\n\n### 类型转换\n\n直接从ArrayBuffer执行操作\n```js\nvar dataAsInt16Array = new Int16Array(data.buffer);\nvar f32 = new Float32Array(4);\nf32[0] = 0.1, f32[1] = 0.2, f32[2] = 0.3, f32[3] = 0.4;\n// [0.10000000149011612, 0.20000000298023224, 0.30000001192092896, 0.4000000059604645]\n\nvar i16 = new Int16Array(f32.buffer);\n// [-13107, 15820, -13107, 15948, -26214, 16025, -13107, 16076]\n\n// and back again\nnew Float32Array(i16.buffer);\n// [0.10000000149011612, 0.20000000298023224, 0.30000001192092896, 0.4000000059604645]\n```\n\n\n","slug":"2019.11.20.arraybuffer","published":1,"date":"2019-11-20T02:24:29.640Z","updated":"2019-11-20T03:12:21.884Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziiqg001rrh9z8xlkdqwu","content":"<blockquote>\n<p>The ArrayBuffer is a data type that is used to represent a generic, fixed-length binary data buffer. You can’t directly manipulate the contents of an ArrayBuffer; instead, you create an ArrayBufferView object which represents the buffer in a specific format, and use that to read and write the contents of the buffer.<br>表示二进制数据的原始缓冲区，该缓冲区用于存储各种类型化数组的数据。 无法直接读取或写入 ArrayBuffer，但可根据需要将其传递到类型化数组或 DataView 对象 来解释原始缓冲区。</p>\n</blockquote>\n<h2 id=\"为什么会用到-arrayBuffer\"><a href=\"#为什么会用到-arrayBuffer\" class=\"headerlink\" title=\"为什么会用到 arrayBuffer\"></a>为什么会用到 arrayBuffer</h2><p>有一个需求,获取到前端实时语音并通过 websocket 传到后端,具体的实现过程我后面会再更新一篇博客讲.这里简单说下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> constraints = &#123;</span><br><span class=\"line\">  audio: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  video: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//这里获取到的是音频数据</span></span><br><span class=\"line\">navigator.mediaDevices</span><br><span class=\"line\">  .getUserMedia(constraints)</span><br><span class=\"line\">  <span class=\"comment\">//mediaStream是获取到的音频流</span></span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">mediaStream</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//使用 audioContext 来处理获取到的音频流</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.audioContext = <span class=\"keyword\">new</span> (<span class=\"built_in\">window</span>.AudioContext ||</span><br><span class=\"line\">      <span class=\"built_in\">window</span>.webkitAudioContext)();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> audioInput = <span class=\"keyword\">this</span>.audioContext.createMediaStreamSource(mediaStream);</span><br><span class=\"line\">    <span class=\"comment\">//createScriptProcessor中可以填入缓冲区大小,不填则自动选择</span></span><br><span class=\"line\">    <span class=\"comment\">//缓冲区大小为 2的指数次方</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> recorder =</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.audioContext.createScriptProcessor();</span><br><span class=\"line\">    <span class=\"comment\">//sampleRate为声音采样率</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.audioContext.sampleRate);</span><br><span class=\"line\">    <span class=\"comment\">//onaudioprocess代表缓冲区满了以后触发的操作</span></span><br><span class=\"line\">    recorder.onaudioprocess = <span class=\"keyword\">this</span>.recorderProcess;</span><br><span class=\"line\">    audioInput.connect(recorder);</span><br><span class=\"line\">    recorder.connect(<span class=\"keyword\">this</span>.audioContext.destination);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  recorderProcess(e) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//left 为获取到的单声道音频流</span></span><br><span class=\"line\">      <span class=\"comment\">//类型为 float32Array</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> left = e.inputBuffer.getChannelData(<span class=\"number\">1</span>);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.sendMessage(<span class=\"keyword\">this</span>.changeRate(left));</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//处理音频流</span></span><br><span class=\"line\">    changeRate(e) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//变更采样率</span></span><br><span class=\"line\">        <span class=\"comment\">//浏览器无法手动设置采样率,所以要根据需求的采样率进行修改</span></span><br><span class=\"line\">        <span class=\"comment\">//浏览器的的采样率是 44100,而我们需要的采样率是 16000</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> t = e.length;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> sampleRate = <span class=\"number\">44100.0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> outputSampleRate = <span class=\"number\">16000.0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> s = <span class=\"number\">0</span>,</span><br><span class=\"line\">        o = sampleRate / outputSampleRate,</span><br><span class=\"line\">        u = <span class=\"built_in\">Math</span>.ceil((t * outputSampleRate) / sampleRate),</span><br><span class=\"line\">        a = <span class=\"keyword\">new</span> <span class=\"built_in\">Float32Array</span>(u);</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; u; i++) &#123;</span><br><span class=\"line\">        a[i] = e[<span class=\"built_in\">Math</span>.floor(s)];</span><br><span class=\"line\">        s += o;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">//float32Array 转化为 int16Array,因为后端需要的是 16 位深的pcm 数据</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> b = <span class=\"keyword\">new</span> <span class=\"built_in\">Int16Array</span>(a.buffer);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"arraybuffer\"><a href=\"#arraybuffer\" class=\"headerlink\" title=\"arraybuffer\"></a>arraybuffer</h1><h2 id=\"原始缓冲区的创建\"><a href=\"#原始缓冲区的创建\" class=\"headerlink\" title=\"原始缓冲区的创建\"></a>原始缓冲区的创建</h2><pre><code>var buffer  = new ArrayBuffer(30);\n</code></pre><p>buffer 实例拥有一个 byteLength 的属性，用于获取 buffer 的 size，一个只有 IE11+ 以及 ios6+ 支持的 slice 方法，用于对 buffer 长度进行截取操作。</p>\n<pre><code>ArrayBuffer slice(\nunsigned long begin\nunsigned long end Optional\n);\n</code></pre><p>可以测试这个 DEMO：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> buffer = <span class=\"keyword\">new</span> <span class=\"built_in\">ArrayBuffer</span>(<span class=\"number\">12</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"keyword\">new</span> <span class=\"built_in\">Int32Array</span>(buffer);</span><br><span class=\"line\">x[<span class=\"number\">1</span>] = <span class=\"number\">1234</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> slice = buffer.slice(<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> y = <span class=\"keyword\">new</span> <span class=\"built_in\">Int32Array</span>(slice);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x[<span class=\"number\">1</span>]); </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(y[<span class=\"number\">0</span>]);</span><br><span class=\"line\">x[<span class=\"number\">1</span>] = <span class=\"number\">6789</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x[<span class=\"number\">1</span>]); </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(y[<span class=\"number\">0</span>]);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"数据化数组\"><a href=\"#数据化数组\" class=\"headerlink\" title=\"数据化数组\"></a>数据化数组</h2><p>类型化数组类型表示可编制索引和操纵的 ArrayBuffer 对象 的各种视图。 所有数组类型的长度均固定。</p>\n<p><img src=\"https://i.loli.net/2019/11/20/7Gc9KfQYHJyWLMv.png\" alt=\"WX20191120-103621@2x\"></p>\n<p>Int 就是整型，Uint 为无符号整形，Float 为浮点型，这些是 C 语言中的基本概念，我就不具体解释了。由于这些视图化结构都是大同小异，本文只对 Float32Array 类型作说明，读者可以举一反三。</p>\n<p>Float32Array 跟 Array 是十分类似的，只不过他每一个元素都是都是一个 32位（4字节） 的浮点型数据。Float32Array 一旦创建其大小不能再修改。</p>\n<p>我们可以直接创建一个 Float32Array:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"keyword\">new</span> <span class=\"built_in\">Float32Array</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">x[<span class=\"number\">0</span>] = <span class=\"number\">17</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x[<span class=\"number\">0</span>]); <span class=\"comment\">// 17</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x[<span class=\"number\">1</span>]); <span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x.length); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure><br>需要有这么一个概念，他依然是一个数组，只不过该数组中的每个元素都是 Float 32 位的数据类型，再如：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"keyword\">new</span> <span class=\"built_in\">Float32Array</span>([<span class=\"number\">17</span>, <span class=\"number\">-45.3</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x[<span class=\"number\">0</span>]);  <span class=\"comment\">// 17</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x[<span class=\"number\">1</span>]);  <span class=\"comment\">// -45.29999923706055</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x.length); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure><br>我们把一个数组的值直接赋给了 x 这个 Float32Array 对象，那么在储存之前会将它转换成一个 32位浮点数。</p>\n<p>由于该类数组的每个元素都是同一类型，所以在堆栈模型中，他们全部会被压入到栈之中，因此数据化数组都是值类型，他并不是引用类型！这个要引起注意，从下面的例子中也可以反映出来：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"keyword\">new</span> <span class=\"built_in\">Float32Array</span>([<span class=\"number\">17</span>, <span class=\"number\">-45.3</span>]);</span><br><span class=\"line\"><span class=\"keyword\">var</span> y = <span class=\"keyword\">new</span> <span class=\"built_in\">Float32Array</span>(x);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x[<span class=\"number\">0</span>]); <span class=\"comment\">// 17</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x[<span class=\"number\">1</span>]); <span class=\"comment\">//-45.29999923706055</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x.length); <span class=\"comment\">// 2</span></span><br><span class=\"line\">x[<span class=\"number\">0</span>] = <span class=\"number\">-2</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(y[<span class=\"number\">0</span>]); <span class=\"comment\">// 17, y的值没变</span></span><br></pre></td></tr></table></figure><br>将 x 的值复制给 y，修改 x[0], y[0] 并没有变化。</p>\n<h3 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h3><p>直接从ArrayBuffer执行操作<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> dataAsInt16Array = <span class=\"keyword\">new</span> <span class=\"built_in\">Int16Array</span>(data.buffer);</span><br><span class=\"line\"><span class=\"keyword\">var</span> f32 = <span class=\"keyword\">new</span> <span class=\"built_in\">Float32Array</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">f32[<span class=\"number\">0</span>] = <span class=\"number\">0.1</span>, f32[<span class=\"number\">1</span>] = <span class=\"number\">0.2</span>, f32[<span class=\"number\">2</span>] = <span class=\"number\">0.3</span>, f32[<span class=\"number\">3</span>] = <span class=\"number\">0.4</span>;</span><br><span class=\"line\"><span class=\"comment\">// [0.10000000149011612, 0.20000000298023224, 0.30000001192092896, 0.4000000059604645]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> i16 = <span class=\"keyword\">new</span> <span class=\"built_in\">Int16Array</span>(f32.buffer);</span><br><span class=\"line\"><span class=\"comment\">// [-13107, 15820, -13107, 15948, -26214, 16025, -13107, 16076]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// and back again</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Float32Array</span>(i16.buffer);</span><br><span class=\"line\"><span class=\"comment\">// [0.10000000149011612, 0.20000000298023224, 0.30000001192092896, 0.4000000059604645]</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>The ArrayBuffer is a data type that is used to represent a generic, fixed-length binary data buffer. You can’t directly manipulate the contents of an ArrayBuffer; instead, you create an ArrayBufferView object which represents the buffer in a specific format, and use that to read and write the contents of the buffer.<br>表示二进制数据的原始缓冲区，该缓冲区用于存储各种类型化数组的数据。 无法直接读取或写入 ArrayBuffer，但可根据需要将其传递到类型化数组或 DataView 对象 来解释原始缓冲区。</p>\n</blockquote>\n<h2 id=\"为什么会用到-arrayBuffer\"><a href=\"#为什么会用到-arrayBuffer\" class=\"headerlink\" title=\"为什么会用到 arrayBuffer\"></a>为什么会用到 arrayBuffer</h2><p>有一个需求,获取到前端实时语音并通过 websocket 传到后端,具体的实现过程我后面会再更新一篇博客讲.这里简单说下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> constraints = &#123;</span><br><span class=\"line\">  audio: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  video: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//这里获取到的是音频数据</span></span><br><span class=\"line\">navigator.mediaDevices</span><br><span class=\"line\">  .getUserMedia(constraints)</span><br><span class=\"line\">  <span class=\"comment\">//mediaStream是获取到的音频流</span></span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">mediaStream</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//使用 audioContext 来处理获取到的音频流</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.audioContext = <span class=\"keyword\">new</span> (<span class=\"built_in\">window</span>.AudioContext ||</span><br><span class=\"line\">      <span class=\"built_in\">window</span>.webkitAudioContext)();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> audioInput = <span class=\"keyword\">this</span>.audioContext.createMediaStreamSource(mediaStream);</span><br><span class=\"line\">    <span class=\"comment\">//createScriptProcessor中可以填入缓冲区大小,不填则自动选择</span></span><br><span class=\"line\">    <span class=\"comment\">//缓冲区大小为 2的指数次方</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> recorder =</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.audioContext.createScriptProcessor();</span><br><span class=\"line\">    <span class=\"comment\">//sampleRate为声音采样率</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.audioContext.sampleRate);</span><br><span class=\"line\">    <span class=\"comment\">//onaudioprocess代表缓冲区满了以后触发的操作</span></span><br><span class=\"line\">    recorder.onaudioprocess = <span class=\"keyword\">this</span>.recorderProcess;</span><br><span class=\"line\">    audioInput.connect(recorder);</span><br><span class=\"line\">    recorder.connect(<span class=\"keyword\">this</span>.audioContext.destination);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  recorderProcess(e) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//left 为获取到的单声道音频流</span></span><br><span class=\"line\">      <span class=\"comment\">//类型为 float32Array</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> left = e.inputBuffer.getChannelData(<span class=\"number\">1</span>);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.sendMessage(<span class=\"keyword\">this</span>.changeRate(left));</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//处理音频流</span></span><br><span class=\"line\">    changeRate(e) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//变更采样率</span></span><br><span class=\"line\">        <span class=\"comment\">//浏览器无法手动设置采样率,所以要根据需求的采样率进行修改</span></span><br><span class=\"line\">        <span class=\"comment\">//浏览器的的采样率是 44100,而我们需要的采样率是 16000</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> t = e.length;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> sampleRate = <span class=\"number\">44100.0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> outputSampleRate = <span class=\"number\">16000.0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> s = <span class=\"number\">0</span>,</span><br><span class=\"line\">        o = sampleRate / outputSampleRate,</span><br><span class=\"line\">        u = <span class=\"built_in\">Math</span>.ceil((t * outputSampleRate) / sampleRate),</span><br><span class=\"line\">        a = <span class=\"keyword\">new</span> <span class=\"built_in\">Float32Array</span>(u);</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; u; i++) &#123;</span><br><span class=\"line\">        a[i] = e[<span class=\"built_in\">Math</span>.floor(s)];</span><br><span class=\"line\">        s += o;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">//float32Array 转化为 int16Array,因为后端需要的是 16 位深的pcm 数据</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> b = <span class=\"keyword\">new</span> <span class=\"built_in\">Int16Array</span>(a.buffer);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"arraybuffer\"><a href=\"#arraybuffer\" class=\"headerlink\" title=\"arraybuffer\"></a>arraybuffer</h1><h2 id=\"原始缓冲区的创建\"><a href=\"#原始缓冲区的创建\" class=\"headerlink\" title=\"原始缓冲区的创建\"></a>原始缓冲区的创建</h2><pre><code>var buffer  = new ArrayBuffer(30);\n</code></pre><p>buffer 实例拥有一个 byteLength 的属性，用于获取 buffer 的 size，一个只有 IE11+ 以及 ios6+ 支持的 slice 方法，用于对 buffer 长度进行截取操作。</p>\n<pre><code>ArrayBuffer slice(\nunsigned long begin\nunsigned long end Optional\n);\n</code></pre><p>可以测试这个 DEMO：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> buffer = <span class=\"keyword\">new</span> <span class=\"built_in\">ArrayBuffer</span>(<span class=\"number\">12</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"keyword\">new</span> <span class=\"built_in\">Int32Array</span>(buffer);</span><br><span class=\"line\">x[<span class=\"number\">1</span>] = <span class=\"number\">1234</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> slice = buffer.slice(<span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> y = <span class=\"keyword\">new</span> <span class=\"built_in\">Int32Array</span>(slice);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x[<span class=\"number\">1</span>]); </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(y[<span class=\"number\">0</span>]);</span><br><span class=\"line\">x[<span class=\"number\">1</span>] = <span class=\"number\">6789</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x[<span class=\"number\">1</span>]); </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(y[<span class=\"number\">0</span>]);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"数据化数组\"><a href=\"#数据化数组\" class=\"headerlink\" title=\"数据化数组\"></a>数据化数组</h2><p>类型化数组类型表示可编制索引和操纵的 ArrayBuffer 对象 的各种视图。 所有数组类型的长度均固定。</p>\n<p><img src=\"https://i.loli.net/2019/11/20/7Gc9KfQYHJyWLMv.png\" alt=\"WX20191120-103621@2x\"></p>\n<p>Int 就是整型，Uint 为无符号整形，Float 为浮点型，这些是 C 语言中的基本概念，我就不具体解释了。由于这些视图化结构都是大同小异，本文只对 Float32Array 类型作说明，读者可以举一反三。</p>\n<p>Float32Array 跟 Array 是十分类似的，只不过他每一个元素都是都是一个 32位（4字节） 的浮点型数据。Float32Array 一旦创建其大小不能再修改。</p>\n<p>我们可以直接创建一个 Float32Array:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"keyword\">new</span> <span class=\"built_in\">Float32Array</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">x[<span class=\"number\">0</span>] = <span class=\"number\">17</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x[<span class=\"number\">0</span>]); <span class=\"comment\">// 17</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x[<span class=\"number\">1</span>]); <span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x.length); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure><br>需要有这么一个概念，他依然是一个数组，只不过该数组中的每个元素都是 Float 32 位的数据类型，再如：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"keyword\">new</span> <span class=\"built_in\">Float32Array</span>([<span class=\"number\">17</span>, <span class=\"number\">-45.3</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x[<span class=\"number\">0</span>]);  <span class=\"comment\">// 17</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x[<span class=\"number\">1</span>]);  <span class=\"comment\">// -45.29999923706055</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x.length); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure><br>我们把一个数组的值直接赋给了 x 这个 Float32Array 对象，那么在储存之前会将它转换成一个 32位浮点数。</p>\n<p>由于该类数组的每个元素都是同一类型，所以在堆栈模型中，他们全部会被压入到栈之中，因此数据化数组都是值类型，他并不是引用类型！这个要引起注意，从下面的例子中也可以反映出来：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"keyword\">new</span> <span class=\"built_in\">Float32Array</span>([<span class=\"number\">17</span>, <span class=\"number\">-45.3</span>]);</span><br><span class=\"line\"><span class=\"keyword\">var</span> y = <span class=\"keyword\">new</span> <span class=\"built_in\">Float32Array</span>(x);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x[<span class=\"number\">0</span>]); <span class=\"comment\">// 17</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x[<span class=\"number\">1</span>]); <span class=\"comment\">//-45.29999923706055</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(x.length); <span class=\"comment\">// 2</span></span><br><span class=\"line\">x[<span class=\"number\">0</span>] = <span class=\"number\">-2</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(y[<span class=\"number\">0</span>]); <span class=\"comment\">// 17, y的值没变</span></span><br></pre></td></tr></table></figure><br>将 x 的值复制给 y，修改 x[0], y[0] 并没有变化。</p>\n<h3 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h3><p>直接从ArrayBuffer执行操作<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> dataAsInt16Array = <span class=\"keyword\">new</span> <span class=\"built_in\">Int16Array</span>(data.buffer);</span><br><span class=\"line\"><span class=\"keyword\">var</span> f32 = <span class=\"keyword\">new</span> <span class=\"built_in\">Float32Array</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">f32[<span class=\"number\">0</span>] = <span class=\"number\">0.1</span>, f32[<span class=\"number\">1</span>] = <span class=\"number\">0.2</span>, f32[<span class=\"number\">2</span>] = <span class=\"number\">0.3</span>, f32[<span class=\"number\">3</span>] = <span class=\"number\">0.4</span>;</span><br><span class=\"line\"><span class=\"comment\">// [0.10000000149011612, 0.20000000298023224, 0.30000001192092896, 0.4000000059604645]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> i16 = <span class=\"keyword\">new</span> <span class=\"built_in\">Int16Array</span>(f32.buffer);</span><br><span class=\"line\"><span class=\"comment\">// [-13107, 15820, -13107, 15948, -26214, 16025, -13107, 16076]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// and back again</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Float32Array</span>(i16.buffer);</span><br><span class=\"line\"><span class=\"comment\">// [0.10000000149011612, 0.20000000298023224, 0.30000001192092896, 0.4000000059604645]</span></span><br></pre></td></tr></table></figure></p>\n"},{"title":"微信小程序开发踩坑记录一(获取用户信息)","_content":"\n先放一篇微信更改获取用户接口的公告,可以感受一下广大开发者的怒火.[链接](https://developers.weixin.qq.com/community/develop/doc/0000a26e1aca6012e896a517556c01)\n\n我使用的 jd 的 taro 框架,其中有一个 taro.getUserInfo[接口](https://nervjs.github.io/taro/docs/apis/open-api/userinfo/getUserInfo.html#docsNav),调了半天发现不能用,仔细读了微信官方的公告才发现这个接口已经被他们废除了,现在只能通过按钮设置`openType`,来手动获取用户信息.\n\n[wx 小程序实现代码](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/user-info/wx.getUserInfo.html)\n\ntaro 代码如下:\n\n```jsx\nrender() {\n    return (\n      <View className=\"index\">\n        <Button openType=\"getUserInfo\" onGetUserInfo={this.onGotUserInfo}>\n          获取用户状态\n        </Button>\n      </View>\n    );\n  }\n\n  onGotUserInfo(e) {\n    console.log(e);\n  }\n```\n\n## 获取权限列表\n\n使用 getSetting 可以获取所有的权限\n\n```jsx\ngetSetting() {\n    Taro.getSetting().then(res => {\n      console.log(res);\n      // console.log(!res.authSetting[\"scope.userInfo\"]);\n      // if (!res.authSetting[\"scope.userInfo\"]) {\n      //   Taro.authorize({ scope: \"scope.userInfo\" });\n      // }\n    });\n```\n\n## 获取权限菜单\n\n使用 openSetting\n\n```jsx\ngetSetting() {\n    Taro.openSetting().then(res => {\n\n    });\n```\n","source":"_posts/2019.11.20.wx_taro.md","raw":"---\ntitle: 微信小程序开发踩坑记录一(获取用户信息)\ntags: [taro, 微信]\ncategories: 随笔\n---\n\n先放一篇微信更改获取用户接口的公告,可以感受一下广大开发者的怒火.[链接](https://developers.weixin.qq.com/community/develop/doc/0000a26e1aca6012e896a517556c01)\n\n我使用的 jd 的 taro 框架,其中有一个 taro.getUserInfo[接口](https://nervjs.github.io/taro/docs/apis/open-api/userinfo/getUserInfo.html#docsNav),调了半天发现不能用,仔细读了微信官方的公告才发现这个接口已经被他们废除了,现在只能通过按钮设置`openType`,来手动获取用户信息.\n\n[wx 小程序实现代码](https://developers.weixin.qq.com/miniprogram/dev/api/open-api/user-info/wx.getUserInfo.html)\n\ntaro 代码如下:\n\n```jsx\nrender() {\n    return (\n      <View className=\"index\">\n        <Button openType=\"getUserInfo\" onGetUserInfo={this.onGotUserInfo}>\n          获取用户状态\n        </Button>\n      </View>\n    );\n  }\n\n  onGotUserInfo(e) {\n    console.log(e);\n  }\n```\n\n## 获取权限列表\n\n使用 getSetting 可以获取所有的权限\n\n```jsx\ngetSetting() {\n    Taro.getSetting().then(res => {\n      console.log(res);\n      // console.log(!res.authSetting[\"scope.userInfo\"]);\n      // if (!res.authSetting[\"scope.userInfo\"]) {\n      //   Taro.authorize({ scope: \"scope.userInfo\" });\n      // }\n    });\n```\n\n## 获取权限菜单\n\n使用 openSetting\n\n```jsx\ngetSetting() {\n    Taro.openSetting().then(res => {\n\n    });\n```\n","slug":"2019.11.20.wx_taro","published":1,"date":"2019-11-20T08:04:07.819Z","updated":"2019-11-20T08:33:31.630Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziiqh001srh9zcg6447o1","content":"<p>先放一篇微信更改获取用户接口的公告,可以感受一下广大开发者的怒火.<a href=\"https://developers.weixin.qq.com/community/develop/doc/0000a26e1aca6012e896a517556c01\" target=\"_blank\" rel=\"noopener\">链接</a></p>\n<p>我使用的 jd 的 taro 框架,其中有一个 taro.getUserInfo<a href=\"https://nervjs.github.io/taro/docs/apis/open-api/userinfo/getUserInfo.html#docsNav\" target=\"_blank\" rel=\"noopener\">接口</a>,调了半天发现不能用,仔细读了微信官方的公告才发现这个接口已经被他们废除了,现在只能通过按钮设置<code>openType</code>,来手动获取用户信息.</p>\n<p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/open-api/user-info/wx.getUserInfo.html\" target=\"_blank\" rel=\"noopener\">wx 小程序实现代码</a></p>\n<p>taro 代码如下:</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;View className=<span class=\"string\">\"index\"</span>&gt;</span><br><span class=\"line\">        &lt;Button openType=<span class=\"string\">\"getUserInfo\"</span> onGetUserInfo=&#123;<span class=\"keyword\">this</span>.onGotUserInfo&#125;&gt;</span><br><span class=\"line\">          获取用户状态</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/Button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>View&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  onGotUserInfo(e) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"获取权限列表\"><a href=\"#获取权限列表\" class=\"headerlink\" title=\"获取权限列表\"></a>获取权限列表</h2><p>使用 getSetting 可以获取所有的权限</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getSetting() &#123;</span><br><span class=\"line\">    Taro.getSetting().then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">      <span class=\"comment\">// console.log(!res.authSetting[\"scope.userInfo\"]);</span></span><br><span class=\"line\">      <span class=\"comment\">// if (!res.authSetting[\"scope.userInfo\"]) &#123;</span></span><br><span class=\"line\">      <span class=\"comment\">//   Taro.authorize(&#123; scope: \"scope.userInfo\" &#125;);</span></span><br><span class=\"line\">      <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"获取权限菜单\"><a href=\"#获取权限菜单\" class=\"headerlink\" title=\"获取权限菜单\"></a>获取权限菜单</h2><p>使用 openSetting</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getSetting() &#123;</span><br><span class=\"line\">    Taro.openSetting().then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>先放一篇微信更改获取用户接口的公告,可以感受一下广大开发者的怒火.<a href=\"https://developers.weixin.qq.com/community/develop/doc/0000a26e1aca6012e896a517556c01\" target=\"_blank\" rel=\"noopener\">链接</a></p>\n<p>我使用的 jd 的 taro 框架,其中有一个 taro.getUserInfo<a href=\"https://nervjs.github.io/taro/docs/apis/open-api/userinfo/getUserInfo.html#docsNav\" target=\"_blank\" rel=\"noopener\">接口</a>,调了半天发现不能用,仔细读了微信官方的公告才发现这个接口已经被他们废除了,现在只能通过按钮设置<code>openType</code>,来手动获取用户信息.</p>\n<p><a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/open-api/user-info/wx.getUserInfo.html\" target=\"_blank\" rel=\"noopener\">wx 小程序实现代码</a></p>\n<p>taro 代码如下:</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;View className=<span class=\"string\">\"index\"</span>&gt;</span><br><span class=\"line\">        &lt;Button openType=<span class=\"string\">\"getUserInfo\"</span> onGetUserInfo=&#123;<span class=\"keyword\">this</span>.onGotUserInfo&#125;&gt;</span><br><span class=\"line\">          获取用户状态</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/Button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;/</span>View&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  onGotUserInfo(e) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"获取权限列表\"><a href=\"#获取权限列表\" class=\"headerlink\" title=\"获取权限列表\"></a>获取权限列表</h2><p>使用 getSetting 可以获取所有的权限</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getSetting() &#123;</span><br><span class=\"line\">    Taro.getSetting().then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">      <span class=\"comment\">// console.log(!res.authSetting[\"scope.userInfo\"]);</span></span><br><span class=\"line\">      <span class=\"comment\">// if (!res.authSetting[\"scope.userInfo\"]) &#123;</span></span><br><span class=\"line\">      <span class=\"comment\">//   Taro.authorize(&#123; scope: \"scope.userInfo\" &#125;);</span></span><br><span class=\"line\">      <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"获取权限菜单\"><a href=\"#获取权限菜单\" class=\"headerlink\" title=\"获取权限菜单\"></a>获取权限菜单</h2><p>使用 openSetting</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getSetting() &#123;</span><br><span class=\"line\">    Taro.openSetting().then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n"},{"title":"前端页面使用 mediaRecorder 录音","_content":"\n> MediaRecorder 是 MediaStream Recording API 提供的用来进行媒体轻松录制的接口, 需要通过调用 MediaRecorder() 构造方法进行实例化.\n\n\n# 流程\n* 首先调用浏览器 api 获取录音权限,开始录音,作为录音器的输入源.也可以使用 video 或者 audio 标签中的声源,同时可以配合 videojs 实现直播流的录音和录像功能.\n* 实例化 MediaRecoder(let mediaRecoder = new MediaRecoder)\n\n* 开始录音 (mediaRecoder.start())\n* 结束录音(mediRecoder.stop()),触发ondataavailable方法\n* 从 ondataavailable 获取视频流/音频流 blob\n* 浏览器使用获取到的 blob 转换为连接进行下载功能\n\n# 语法\n\n    var mediaRecorder = new MediaRecorder(stream[, options]);\n\n## 参数\n\n> stream\n\n        MediaStream 将要录制的流. 它可以是来自于使用 `navigator.mediaDevices.getUserMedia()` 创建的流或者来自于 `<audio>`, `<video>` 以及 `<canvas>` DOM元素.\n\n> options (可选)\n\n    一个字典对象,它可以包含下列属性:\n    mimeType: 为新构建的 MediaRecorder 指定录制容器的MIME类型. 在应用中通过调用 MediaRecorder.isTypeSupported() 来检查浏览器是否支持此种mimeType .\n    audioBitsPerSecond: 指定音频的比特率.\n    videoBitsPerSecond: 指定视频的比特率.\n    bitsPerSecond: 指定音频和视频的比特率. 此属性可以用来指定上面两个属性. 如果上面两个属性只有其中之一和此属性被指定, 则此属性可以用于设定另外一个属性.\n\n## 方法\n\n    MediaRecorder.isTypeSupported()\n    返回一个Boolean 值,来表示设置的MIME type 是否被当前用户的设备支持.\n\n    MediaRecorder.pause()\n    暂停媒体录制\n    MediaRecorder.requestData()\n    请求一个从开始到当前接收到的,存储为Blob类型的录制内容. (或者是返回从上一次调用requestData() 方法之后到现在的内容).  调用这个方法后,录制将会继续进行,但是会创建一个新的Blob对象\n    MediaRecorder.resume()\n    继续录制之前被暂停的录制动作.\n    MediaRecorder.start()\n    开始录制媒体,这个方法调用时可以通过给timeslice参数设置一个毫秒值,如果设置这个毫秒值,那么录制的媒体会按照你设置的值进行分割成一个个单独的区块, 而不是以默认的方式录制一个非常大的整块内容.\n    MediaRecorder.stop()\n    停止录制. 同时触发dataavailable事件,返回一个存储Blob内容的录制数据.之后不再记录\n\n## 事件\n\n    MediaRecorder.ondataavailable\n    调用它用来处理 dataavailable 事件, 该事件可用于获取录制的媒体资源 (在事件的 data 属性中会提供一个可用的 Blob 对象.)\n    MediaRecorder.onerror\n    An EventHandler called to handle the recordingerror event, including reporting errors that arise with media recording. These are fatal errors that stop recording.\n    MediaRecorder.onpause\n    用来处理 pause 事件, 该事件在媒体暂停录制时触发（MediaRecorder.pause()）.\n    MediaRecorder.onresume\n    用来处理 resume 事件, 该事件在暂停后回复录制视频时触发（MediaRecorder.resume()）.\n    MediaRecorder.onstart\n    用来处理 start 事件, 该事件在媒体开始录制时触发（MediaRecorder.start()）.\n    MediaRecorder.onstop\n    用来处理 stop 事件, 该事件会在媒体录制结束时、媒体流（MediaStream）结束时、或者调用MediaRecorder.stop() 方法后触发.\n\n## 使用(在 vue 中)\n\n```js\nlet constraints = {\n  audio: true,\n  video: false\n};\n//获取录音权限并录音\nlet getMedia = navigator.mediaDevices || navigator.webkitGetUserMedia;\nif (getMedia) {\n  getMedia\n    .getUserMedia(constraints)\n    .then(mediaStream => {\n      //录音\n      //初始化录音器\n      this.recorder = new MediaRecorder(mediaStream);\n      //开始录音\n      this.recorder.start();\n      //结束录音时触发ondataavailable,返回格式为 blob\n      this.recorder.ondataavailable = getRecordingData;\n    })\n    .catch(err => {\n      console.log(err.name + \": \" + err.message);\n    });\n} else {\n  console.log(\"无法使用麦克风\");\n\n\n//获取录到 blob\n  getRecordingData(e) {\n      this.chunk = e.data;\n    }\n}\n//下载文件\n\nlet blob = this.thunk;\nif (\"msSaveOrOpenBlob\" in navigator) {\n        window.navigator.msSaveOrOpenBlob(blob, fileUrl);\n      } else {\n        let downloadElement = document.createElement(\"a\");\n        let href = window.URL.createObjectURL(blob);\n        downloadElement.href = href;\n        downloadElement.download = fileUrl;\n        document.body.appendChild(downloadElement);\n        downloadElement.click();\n        document.body.removeChild(downloadElement);\n        window.URL.revokeObjectURL(href);\n      }\n```\n","source":"_posts/2019.12.13.mediarecorder.md","raw":"---\ntitle: 前端页面使用 mediaRecorder 录音\ntags: []\ncategories: 随笔\n---\n\n> MediaRecorder 是 MediaStream Recording API 提供的用来进行媒体轻松录制的接口, 需要通过调用 MediaRecorder() 构造方法进行实例化.\n\n\n# 流程\n* 首先调用浏览器 api 获取录音权限,开始录音,作为录音器的输入源.也可以使用 video 或者 audio 标签中的声源,同时可以配合 videojs 实现直播流的录音和录像功能.\n* 实例化 MediaRecoder(let mediaRecoder = new MediaRecoder)\n\n* 开始录音 (mediaRecoder.start())\n* 结束录音(mediRecoder.stop()),触发ondataavailable方法\n* 从 ondataavailable 获取视频流/音频流 blob\n* 浏览器使用获取到的 blob 转换为连接进行下载功能\n\n# 语法\n\n    var mediaRecorder = new MediaRecorder(stream[, options]);\n\n## 参数\n\n> stream\n\n        MediaStream 将要录制的流. 它可以是来自于使用 `navigator.mediaDevices.getUserMedia()` 创建的流或者来自于 `<audio>`, `<video>` 以及 `<canvas>` DOM元素.\n\n> options (可选)\n\n    一个字典对象,它可以包含下列属性:\n    mimeType: 为新构建的 MediaRecorder 指定录制容器的MIME类型. 在应用中通过调用 MediaRecorder.isTypeSupported() 来检查浏览器是否支持此种mimeType .\n    audioBitsPerSecond: 指定音频的比特率.\n    videoBitsPerSecond: 指定视频的比特率.\n    bitsPerSecond: 指定音频和视频的比特率. 此属性可以用来指定上面两个属性. 如果上面两个属性只有其中之一和此属性被指定, 则此属性可以用于设定另外一个属性.\n\n## 方法\n\n    MediaRecorder.isTypeSupported()\n    返回一个Boolean 值,来表示设置的MIME type 是否被当前用户的设备支持.\n\n    MediaRecorder.pause()\n    暂停媒体录制\n    MediaRecorder.requestData()\n    请求一个从开始到当前接收到的,存储为Blob类型的录制内容. (或者是返回从上一次调用requestData() 方法之后到现在的内容).  调用这个方法后,录制将会继续进行,但是会创建一个新的Blob对象\n    MediaRecorder.resume()\n    继续录制之前被暂停的录制动作.\n    MediaRecorder.start()\n    开始录制媒体,这个方法调用时可以通过给timeslice参数设置一个毫秒值,如果设置这个毫秒值,那么录制的媒体会按照你设置的值进行分割成一个个单独的区块, 而不是以默认的方式录制一个非常大的整块内容.\n    MediaRecorder.stop()\n    停止录制. 同时触发dataavailable事件,返回一个存储Blob内容的录制数据.之后不再记录\n\n## 事件\n\n    MediaRecorder.ondataavailable\n    调用它用来处理 dataavailable 事件, 该事件可用于获取录制的媒体资源 (在事件的 data 属性中会提供一个可用的 Blob 对象.)\n    MediaRecorder.onerror\n    An EventHandler called to handle the recordingerror event, including reporting errors that arise with media recording. These are fatal errors that stop recording.\n    MediaRecorder.onpause\n    用来处理 pause 事件, 该事件在媒体暂停录制时触发（MediaRecorder.pause()）.\n    MediaRecorder.onresume\n    用来处理 resume 事件, 该事件在暂停后回复录制视频时触发（MediaRecorder.resume()）.\n    MediaRecorder.onstart\n    用来处理 start 事件, 该事件在媒体开始录制时触发（MediaRecorder.start()）.\n    MediaRecorder.onstop\n    用来处理 stop 事件, 该事件会在媒体录制结束时、媒体流（MediaStream）结束时、或者调用MediaRecorder.stop() 方法后触发.\n\n## 使用(在 vue 中)\n\n```js\nlet constraints = {\n  audio: true,\n  video: false\n};\n//获取录音权限并录音\nlet getMedia = navigator.mediaDevices || navigator.webkitGetUserMedia;\nif (getMedia) {\n  getMedia\n    .getUserMedia(constraints)\n    .then(mediaStream => {\n      //录音\n      //初始化录音器\n      this.recorder = new MediaRecorder(mediaStream);\n      //开始录音\n      this.recorder.start();\n      //结束录音时触发ondataavailable,返回格式为 blob\n      this.recorder.ondataavailable = getRecordingData;\n    })\n    .catch(err => {\n      console.log(err.name + \": \" + err.message);\n    });\n} else {\n  console.log(\"无法使用麦克风\");\n\n\n//获取录到 blob\n  getRecordingData(e) {\n      this.chunk = e.data;\n    }\n}\n//下载文件\n\nlet blob = this.thunk;\nif (\"msSaveOrOpenBlob\" in navigator) {\n        window.navigator.msSaveOrOpenBlob(blob, fileUrl);\n      } else {\n        let downloadElement = document.createElement(\"a\");\n        let href = window.URL.createObjectURL(blob);\n        downloadElement.href = href;\n        downloadElement.download = fileUrl;\n        document.body.appendChild(downloadElement);\n        downloadElement.click();\n        document.body.removeChild(downloadElement);\n        window.URL.revokeObjectURL(href);\n      }\n```\n","slug":"2019.12.13.mediarecorder","published":1,"date":"2019-12-13T08:45:09.270Z","updated":"2019-12-23T07:12:55.215Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziiqh001trh9z8mfreci5","content":"<blockquote>\n<p>MediaRecorder 是 MediaStream Recording API 提供的用来进行媒体轻松录制的接口, 需要通过调用 MediaRecorder() 构造方法进行实例化.</p>\n</blockquote>\n<h1 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h1><ul>\n<li>首先调用浏览器 api 获取录音权限,开始录音,作为录音器的输入源.也可以使用 video 或者 audio 标签中的声源,同时可以配合 videojs 实现直播流的录音和录像功能.</li>\n<li><p>实例化 MediaRecoder(let mediaRecoder = new MediaRecoder)</p>\n</li>\n<li><p>开始录音 (mediaRecoder.start())</p>\n</li>\n<li>结束录音(mediRecoder.stop()),触发ondataavailable方法</li>\n<li>从 ondataavailable 获取视频流/音频流 blob</li>\n<li>浏览器使用获取到的 blob 转换为连接进行下载功能</li>\n</ul>\n<h1 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h1><pre><code>var mediaRecorder = new MediaRecorder(stream[, options]);\n</code></pre><h2 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h2><blockquote>\n<p>stream</p>\n</blockquote>\n<pre><code>MediaStream 将要录制的流. 它可以是来自于使用 `navigator.mediaDevices.getUserMedia()` 创建的流或者来自于 `&lt;audio&gt;`, `&lt;video&gt;` 以及 `&lt;canvas&gt;` DOM元素.\n</code></pre><blockquote>\n<p>options (可选)</p>\n</blockquote>\n<pre><code>一个字典对象,它可以包含下列属性:\nmimeType: 为新构建的 MediaRecorder 指定录制容器的MIME类型. 在应用中通过调用 MediaRecorder.isTypeSupported() 来检查浏览器是否支持此种mimeType .\naudioBitsPerSecond: 指定音频的比特率.\nvideoBitsPerSecond: 指定视频的比特率.\nbitsPerSecond: 指定音频和视频的比特率. 此属性可以用来指定上面两个属性. 如果上面两个属性只有其中之一和此属性被指定, 则此属性可以用于设定另外一个属性.\n</code></pre><h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><pre><code>MediaRecorder.isTypeSupported()\n返回一个Boolean 值,来表示设置的MIME type 是否被当前用户的设备支持.\n\nMediaRecorder.pause()\n暂停媒体录制\nMediaRecorder.requestData()\n请求一个从开始到当前接收到的,存储为Blob类型的录制内容. (或者是返回从上一次调用requestData() 方法之后到现在的内容).  调用这个方法后,录制将会继续进行,但是会创建一个新的Blob对象\nMediaRecorder.resume()\n继续录制之前被暂停的录制动作.\nMediaRecorder.start()\n开始录制媒体,这个方法调用时可以通过给timeslice参数设置一个毫秒值,如果设置这个毫秒值,那么录制的媒体会按照你设置的值进行分割成一个个单独的区块, 而不是以默认的方式录制一个非常大的整块内容.\nMediaRecorder.stop()\n停止录制. 同时触发dataavailable事件,返回一个存储Blob内容的录制数据.之后不再记录\n</code></pre><h2 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h2><pre><code>MediaRecorder.ondataavailable\n调用它用来处理 dataavailable 事件, 该事件可用于获取录制的媒体资源 (在事件的 data 属性中会提供一个可用的 Blob 对象.)\nMediaRecorder.onerror\nAn EventHandler called to handle the recordingerror event, including reporting errors that arise with media recording. These are fatal errors that stop recording.\nMediaRecorder.onpause\n用来处理 pause 事件, 该事件在媒体暂停录制时触发（MediaRecorder.pause()）.\nMediaRecorder.onresume\n用来处理 resume 事件, 该事件在暂停后回复录制视频时触发（MediaRecorder.resume()）.\nMediaRecorder.onstart\n用来处理 start 事件, 该事件在媒体开始录制时触发（MediaRecorder.start()）.\nMediaRecorder.onstop\n用来处理 stop 事件, 该事件会在媒体录制结束时、媒体流（MediaStream）结束时、或者调用MediaRecorder.stop() 方法后触发.\n</code></pre><h2 id=\"使用-在-vue-中\"><a href=\"#使用-在-vue-中\" class=\"headerlink\" title=\"使用(在 vue 中)\"></a>使用(在 vue 中)</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> constraints = &#123;</span><br><span class=\"line\">  audio: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  video: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//获取录音权限并录音</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> getMedia = navigator.mediaDevices || navigator.webkitGetUserMedia;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (getMedia) &#123;</span><br><span class=\"line\">  getMedia</span><br><span class=\"line\">    .getUserMedia(constraints)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">mediaStream</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//录音</span></span><br><span class=\"line\">      <span class=\"comment\">//初始化录音器</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.recorder = <span class=\"keyword\">new</span> MediaRecorder(mediaStream);</span><br><span class=\"line\">      <span class=\"comment\">//开始录音</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.recorder.start();</span><br><span class=\"line\">      <span class=\"comment\">//结束录音时触发ondataavailable,返回格式为 blob</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.recorder.ondataavailable = getRecordingData;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(err.name + <span class=\"string\">\": \"</span> + err.message);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"无法使用麦克风\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取录到 blob</span></span><br><span class=\"line\">  getRecordingData(e) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.chunk = e.data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//下载文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> blob = <span class=\"keyword\">this</span>.thunk;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"string\">\"msSaveOrOpenBlob\"</span> <span class=\"keyword\">in</span> navigator) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.navigator.msSaveOrOpenBlob(blob, fileUrl);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> downloadElement = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"a\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> href = <span class=\"built_in\">window</span>.URL.createObjectURL(blob);</span><br><span class=\"line\">        downloadElement.href = href;</span><br><span class=\"line\">        downloadElement.download = fileUrl;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.body.appendChild(downloadElement);</span><br><span class=\"line\">        downloadElement.click();</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.body.removeChild(downloadElement);</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.URL.revokeObjectURL(href);</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>MediaRecorder 是 MediaStream Recording API 提供的用来进行媒体轻松录制的接口, 需要通过调用 MediaRecorder() 构造方法进行实例化.</p>\n</blockquote>\n<h1 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h1><ul>\n<li>首先调用浏览器 api 获取录音权限,开始录音,作为录音器的输入源.也可以使用 video 或者 audio 标签中的声源,同时可以配合 videojs 实现直播流的录音和录像功能.</li>\n<li><p>实例化 MediaRecoder(let mediaRecoder = new MediaRecoder)</p>\n</li>\n<li><p>开始录音 (mediaRecoder.start())</p>\n</li>\n<li>结束录音(mediRecoder.stop()),触发ondataavailable方法</li>\n<li>从 ondataavailable 获取视频流/音频流 blob</li>\n<li>浏览器使用获取到的 blob 转换为连接进行下载功能</li>\n</ul>\n<h1 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h1><pre><code>var mediaRecorder = new MediaRecorder(stream[, options]);\n</code></pre><h2 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h2><blockquote>\n<p>stream</p>\n</blockquote>\n<pre><code>MediaStream 将要录制的流. 它可以是来自于使用 `navigator.mediaDevices.getUserMedia()` 创建的流或者来自于 `&lt;audio&gt;`, `&lt;video&gt;` 以及 `&lt;canvas&gt;` DOM元素.\n</code></pre><blockquote>\n<p>options (可选)</p>\n</blockquote>\n<pre><code>一个字典对象,它可以包含下列属性:\nmimeType: 为新构建的 MediaRecorder 指定录制容器的MIME类型. 在应用中通过调用 MediaRecorder.isTypeSupported() 来检查浏览器是否支持此种mimeType .\naudioBitsPerSecond: 指定音频的比特率.\nvideoBitsPerSecond: 指定视频的比特率.\nbitsPerSecond: 指定音频和视频的比特率. 此属性可以用来指定上面两个属性. 如果上面两个属性只有其中之一和此属性被指定, 则此属性可以用于设定另外一个属性.\n</code></pre><h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><pre><code>MediaRecorder.isTypeSupported()\n返回一个Boolean 值,来表示设置的MIME type 是否被当前用户的设备支持.\n\nMediaRecorder.pause()\n暂停媒体录制\nMediaRecorder.requestData()\n请求一个从开始到当前接收到的,存储为Blob类型的录制内容. (或者是返回从上一次调用requestData() 方法之后到现在的内容).  调用这个方法后,录制将会继续进行,但是会创建一个新的Blob对象\nMediaRecorder.resume()\n继续录制之前被暂停的录制动作.\nMediaRecorder.start()\n开始录制媒体,这个方法调用时可以通过给timeslice参数设置一个毫秒值,如果设置这个毫秒值,那么录制的媒体会按照你设置的值进行分割成一个个单独的区块, 而不是以默认的方式录制一个非常大的整块内容.\nMediaRecorder.stop()\n停止录制. 同时触发dataavailable事件,返回一个存储Blob内容的录制数据.之后不再记录\n</code></pre><h2 id=\"事件\"><a href=\"#事件\" class=\"headerlink\" title=\"事件\"></a>事件</h2><pre><code>MediaRecorder.ondataavailable\n调用它用来处理 dataavailable 事件, 该事件可用于获取录制的媒体资源 (在事件的 data 属性中会提供一个可用的 Blob 对象.)\nMediaRecorder.onerror\nAn EventHandler called to handle the recordingerror event, including reporting errors that arise with media recording. These are fatal errors that stop recording.\nMediaRecorder.onpause\n用来处理 pause 事件, 该事件在媒体暂停录制时触发（MediaRecorder.pause()）.\nMediaRecorder.onresume\n用来处理 resume 事件, 该事件在暂停后回复录制视频时触发（MediaRecorder.resume()）.\nMediaRecorder.onstart\n用来处理 start 事件, 该事件在媒体开始录制时触发（MediaRecorder.start()）.\nMediaRecorder.onstop\n用来处理 stop 事件, 该事件会在媒体录制结束时、媒体流（MediaStream）结束时、或者调用MediaRecorder.stop() 方法后触发.\n</code></pre><h2 id=\"使用-在-vue-中\"><a href=\"#使用-在-vue-中\" class=\"headerlink\" title=\"使用(在 vue 中)\"></a>使用(在 vue 中)</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> constraints = &#123;</span><br><span class=\"line\">  audio: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  video: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//获取录音权限并录音</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> getMedia = navigator.mediaDevices || navigator.webkitGetUserMedia;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (getMedia) &#123;</span><br><span class=\"line\">  getMedia</span><br><span class=\"line\">    .getUserMedia(constraints)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">mediaStream</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//录音</span></span><br><span class=\"line\">      <span class=\"comment\">//初始化录音器</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.recorder = <span class=\"keyword\">new</span> MediaRecorder(mediaStream);</span><br><span class=\"line\">      <span class=\"comment\">//开始录音</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.recorder.start();</span><br><span class=\"line\">      <span class=\"comment\">//结束录音时触发ondataavailable,返回格式为 blob</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.recorder.ondataavailable = getRecordingData;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(err.name + <span class=\"string\">\": \"</span> + err.message);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"无法使用麦克风\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取录到 blob</span></span><br><span class=\"line\">  getRecordingData(e) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.chunk = e.data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//下载文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> blob = <span class=\"keyword\">this</span>.thunk;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"string\">\"msSaveOrOpenBlob\"</span> <span class=\"keyword\">in</span> navigator) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.navigator.msSaveOrOpenBlob(blob, fileUrl);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> downloadElement = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"a\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> href = <span class=\"built_in\">window</span>.URL.createObjectURL(blob);</span><br><span class=\"line\">        downloadElement.href = href;</span><br><span class=\"line\">        downloadElement.download = fileUrl;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.body.appendChild(downloadElement);</span><br><span class=\"line\">        downloadElement.click();</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.body.removeChild(downloadElement);</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.URL.revokeObjectURL(href);</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"音频可视化","_content":"\n# 浏览器录音的实时识别\n\n```js\nlet constraints = {\n  audio: true,\n  video: false\n};\nlet getMedia = navigator.mediaDevices || navigator.webkitGetUserMedia;\nif (getMedia) {\n  getMedia.getUserMedia(constraints).then(mediaStream => {\n    //音频可视化与实时语音识别\n    //使用 audioContext 来分析音频流\n    this.audioContext = new (window.AudioContext ||\n      window.webkitAudioContext)();\n    //初始化分析器\n    this.initAnalyser();\n    //获取输入的音频流\n    let audioInput = this.audioContext.createMediaStreamSource(mediaStream);\n    let compressScript = this.audioContext.createScriptProcessor();\n    //缓冲区满的时候触发compressProgress方法,执行绘图和其他操作\n    compressScript.onaudioprocess = this.compressProgress;\n    //这里要把各个模块连接起来\n    //音频输入连接分析器\n    audioInput.connect(this.analyser);\n    //分析器连接处理脚本\n    this.analyser.connect(compressScript);\n    //脚本连接输出\n    compressScript.connect(this.audioContext.destination);\n  });\n\n\n\n}\n//初始化分析器\n\ninitAnalyser() {\n      this.analyser = this.audioContext.createAnalyser();\n      this.analyser.fftSize = 128;\n      this.bufferLength = this.analyser.frequencyBinCount;\n      this.dataArray = new Uint8Array(this.bufferLength);\n    },\n\n//处理音频片段\ncompressProgress(e) {\n    //绘图\n      this.draw();\n      //获取音频 buffer\n      const buffer = e.inputBuffer.getChannelData(0);\n      //音频 buffer 的处理脚本,这里用到了科大讯飞的实时语音识别 ws 接口\n      const audioCompiler = new AudioCompiler();\n      const compressedBuffer = audioCompiler.convertBuffer(buffer);\n      const int8Array = new Int8Array(compressedBuffer.buffer);\n      this.webSocket.send(int8Array);\n    }\n\n\n\n draw() {\n     //使用 canvas 绘图\n      const canvas = document.getElementById(\"canvas\");\n      this.canvasCtx = canvas.getContext(\"2d\");\n      let cWidth = this.canvas.width,\n        cHeight = this.canvas.height,\n        barWidth = parseInt((1.8 * cWidth) / this.bufferLength),\n        barHeight,\n        x = 0;\n      this.canvasCtx.clearRect(0, 0, cWidth, cHeight);\n      //分析器获取音频数据“切片”\n      this.analyser.getByteFrequencyData(this.dataArray);\n\n      //把每个音频“切片”画在画布上\n      for (var i = 0; i < this.bufferLength; i++) {\n        barHeight = parseInt(1.4 * this.dataArray[i]);\n        // this.canvasCtx.fillStyle = \"rgb(27, 49, 114)\";\n        let color = `rgb(${i + 87}, ${6 * i + 174},${6 * i + 248})`;\n        // console.log(color);\n        this.canvasCtx.fillStyle = color;\n        this.canvasCtx.fillRect(x, cHeight - barHeight, barWidth, barHeight);\n        x += barWidth + 5;\n      }\n    },\n```\n\n## video/audio 标签识别(包括文件以及直播流识别)\n\n与上面唯一的区别是获取输入源的方式\n\n```js\n//使用createMediaElementSource获取 video/audio 标签的音源analysis\n\nthis.audioInput = this.audioContext.createMediaElementSource(\n  this.$refs.videoPlayer\n);\n```\n样例:\n![WX20191223-154447@2x](https://i.loli.net/2019/12/23/piSNYJ7nvXBmoZc.png)\n","source":"_posts/2019.12.23.voiceAnalysis.md","raw":"---\ntitle: 音频可视化\ntags: []\ncategories: 随笔\n---\n\n# 浏览器录音的实时识别\n\n```js\nlet constraints = {\n  audio: true,\n  video: false\n};\nlet getMedia = navigator.mediaDevices || navigator.webkitGetUserMedia;\nif (getMedia) {\n  getMedia.getUserMedia(constraints).then(mediaStream => {\n    //音频可视化与实时语音识别\n    //使用 audioContext 来分析音频流\n    this.audioContext = new (window.AudioContext ||\n      window.webkitAudioContext)();\n    //初始化分析器\n    this.initAnalyser();\n    //获取输入的音频流\n    let audioInput = this.audioContext.createMediaStreamSource(mediaStream);\n    let compressScript = this.audioContext.createScriptProcessor();\n    //缓冲区满的时候触发compressProgress方法,执行绘图和其他操作\n    compressScript.onaudioprocess = this.compressProgress;\n    //这里要把各个模块连接起来\n    //音频输入连接分析器\n    audioInput.connect(this.analyser);\n    //分析器连接处理脚本\n    this.analyser.connect(compressScript);\n    //脚本连接输出\n    compressScript.connect(this.audioContext.destination);\n  });\n\n\n\n}\n//初始化分析器\n\ninitAnalyser() {\n      this.analyser = this.audioContext.createAnalyser();\n      this.analyser.fftSize = 128;\n      this.bufferLength = this.analyser.frequencyBinCount;\n      this.dataArray = new Uint8Array(this.bufferLength);\n    },\n\n//处理音频片段\ncompressProgress(e) {\n    //绘图\n      this.draw();\n      //获取音频 buffer\n      const buffer = e.inputBuffer.getChannelData(0);\n      //音频 buffer 的处理脚本,这里用到了科大讯飞的实时语音识别 ws 接口\n      const audioCompiler = new AudioCompiler();\n      const compressedBuffer = audioCompiler.convertBuffer(buffer);\n      const int8Array = new Int8Array(compressedBuffer.buffer);\n      this.webSocket.send(int8Array);\n    }\n\n\n\n draw() {\n     //使用 canvas 绘图\n      const canvas = document.getElementById(\"canvas\");\n      this.canvasCtx = canvas.getContext(\"2d\");\n      let cWidth = this.canvas.width,\n        cHeight = this.canvas.height,\n        barWidth = parseInt((1.8 * cWidth) / this.bufferLength),\n        barHeight,\n        x = 0;\n      this.canvasCtx.clearRect(0, 0, cWidth, cHeight);\n      //分析器获取音频数据“切片”\n      this.analyser.getByteFrequencyData(this.dataArray);\n\n      //把每个音频“切片”画在画布上\n      for (var i = 0; i < this.bufferLength; i++) {\n        barHeight = parseInt(1.4 * this.dataArray[i]);\n        // this.canvasCtx.fillStyle = \"rgb(27, 49, 114)\";\n        let color = `rgb(${i + 87}, ${6 * i + 174},${6 * i + 248})`;\n        // console.log(color);\n        this.canvasCtx.fillStyle = color;\n        this.canvasCtx.fillRect(x, cHeight - barHeight, barWidth, barHeight);\n        x += barWidth + 5;\n      }\n    },\n```\n\n## video/audio 标签识别(包括文件以及直播流识别)\n\n与上面唯一的区别是获取输入源的方式\n\n```js\n//使用createMediaElementSource获取 video/audio 标签的音源analysis\n\nthis.audioInput = this.audioContext.createMediaElementSource(\n  this.$refs.videoPlayer\n);\n```\n样例:\n![WX20191223-154447@2x](https://i.loli.net/2019/12/23/piSNYJ7nvXBmoZc.png)\n","slug":"2019.12.23.voiceAnalysis","published":1,"date":"2019-12-23T07:19:10.229Z","updated":"2019-12-23T07:46:05.731Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziiqi001urh9zg5pkeabo","content":"<h1 id=\"浏览器录音的实时识别\"><a href=\"#浏览器录音的实时识别\" class=\"headerlink\" title=\"浏览器录音的实时识别\"></a>浏览器录音的实时识别</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> constraints = &#123;</span><br><span class=\"line\">  audio: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  video: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> getMedia = navigator.mediaDevices || navigator.webkitGetUserMedia;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (getMedia) &#123;</span><br><span class=\"line\">  getMedia.getUserMedia(constraints).then(<span class=\"function\"><span class=\"params\">mediaStream</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//音频可视化与实时语音识别</span></span><br><span class=\"line\">    <span class=\"comment\">//使用 audioContext 来分析音频流</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.audioContext = <span class=\"keyword\">new</span> (<span class=\"built_in\">window</span>.AudioContext ||</span><br><span class=\"line\">      <span class=\"built_in\">window</span>.webkitAudioContext)();</span><br><span class=\"line\">    <span class=\"comment\">//初始化分析器</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.initAnalyser();</span><br><span class=\"line\">    <span class=\"comment\">//获取输入的音频流</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> audioInput = <span class=\"keyword\">this</span>.audioContext.createMediaStreamSource(mediaStream);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> compressScript = <span class=\"keyword\">this</span>.audioContext.createScriptProcessor();</span><br><span class=\"line\">    <span class=\"comment\">//缓冲区满的时候触发compressProgress方法,执行绘图和其他操作</span></span><br><span class=\"line\">    compressScript.onaudioprocess = <span class=\"keyword\">this</span>.compressProgress;</span><br><span class=\"line\">    <span class=\"comment\">//这里要把各个模块连接起来</span></span><br><span class=\"line\">    <span class=\"comment\">//音频输入连接分析器</span></span><br><span class=\"line\">    audioInput.connect(<span class=\"keyword\">this</span>.analyser);</span><br><span class=\"line\">    <span class=\"comment\">//分析器连接处理脚本</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.analyser.connect(compressScript);</span><br><span class=\"line\">    <span class=\"comment\">//脚本连接输出</span></span><br><span class=\"line\">    compressScript.connect(<span class=\"keyword\">this</span>.audioContext.destination);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//初始化分析器</span></span><br><span class=\"line\"></span><br><span class=\"line\">initAnalyser() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.analyser = <span class=\"keyword\">this</span>.audioContext.createAnalyser();</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.analyser.fftSize = <span class=\"number\">128</span>;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.bufferLength = <span class=\"keyword\">this</span>.analyser.frequencyBinCount;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.dataArray = <span class=\"keyword\">new</span> <span class=\"built_in\">Uint8Array</span>(<span class=\"keyword\">this</span>.bufferLength);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//处理音频片段</span></span><br><span class=\"line\">compressProgress(e) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//绘图</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.draw();</span><br><span class=\"line\">      <span class=\"comment\">//获取音频 buffer</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> buffer = e.inputBuffer.getChannelData(<span class=\"number\">0</span>);</span><br><span class=\"line\">      <span class=\"comment\">//音频 buffer 的处理脚本,这里用到了科大讯飞的实时语音识别 ws 接口</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> audioCompiler = <span class=\"keyword\">new</span> AudioCompiler();</span><br><span class=\"line\">      <span class=\"keyword\">const</span> compressedBuffer = audioCompiler.convertBuffer(buffer);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> int8Array = <span class=\"keyword\">new</span> <span class=\"built_in\">Int8Array</span>(compressedBuffer.buffer);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.webSocket.send(int8Array);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> draw() &#123;</span><br><span class=\"line\">     <span class=\"comment\">//使用 canvas 绘图</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> canvas = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"canvas\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.canvasCtx = canvas.getContext(<span class=\"string\">\"2d\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">let</span> cWidth = <span class=\"keyword\">this</span>.canvas.width,</span><br><span class=\"line\">        cHeight = <span class=\"keyword\">this</span>.canvas.height,</span><br><span class=\"line\">        barWidth = <span class=\"built_in\">parseInt</span>((<span class=\"number\">1.8</span> * cWidth) / <span class=\"keyword\">this</span>.bufferLength),</span><br><span class=\"line\">        barHeight,</span><br><span class=\"line\">        x = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.canvasCtx.clearRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, cWidth, cHeight);</span><br><span class=\"line\">      <span class=\"comment\">//分析器获取音频数据“切片”</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.analyser.getByteFrequencyData(<span class=\"keyword\">this</span>.dataArray);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//把每个音频“切片”画在画布上</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.bufferLength; i++) &#123;</span><br><span class=\"line\">        barHeight = <span class=\"built_in\">parseInt</span>(<span class=\"number\">1.4</span> * <span class=\"keyword\">this</span>.dataArray[i]);</span><br><span class=\"line\">        <span class=\"comment\">// this.canvasCtx.fillStyle = \"rgb(27, 49, 114)\";</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> color = <span class=\"string\">`rgb(<span class=\"subst\">$&#123;i + <span class=\"number\">87</span>&#125;</span>, <span class=\"subst\">$&#123;<span class=\"number\">6</span> * i + <span class=\"number\">174</span>&#125;</span>,<span class=\"subst\">$&#123;<span class=\"number\">6</span> * i + <span class=\"number\">248</span>&#125;</span>)`</span>;</span><br><span class=\"line\">        <span class=\"comment\">// console.log(color);</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.canvasCtx.fillStyle = color;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.canvasCtx.fillRect(x, cHeight - barHeight, barWidth, barHeight);</span><br><span class=\"line\">        x += barWidth + <span class=\"number\">5</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br></pre></td></tr></table></figure>\n<h2 id=\"video-audio-标签识别-包括文件以及直播流识别\"><a href=\"#video-audio-标签识别-包括文件以及直播流识别\" class=\"headerlink\" title=\"video/audio 标签识别(包括文件以及直播流识别)\"></a>video/audio 标签识别(包括文件以及直播流识别)</h2><p>与上面唯一的区别是获取输入源的方式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用createMediaElementSource获取 video/audio 标签的音源analysis</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">this</span>.audioInput = <span class=\"keyword\">this</span>.audioContext.createMediaElementSource(</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.$refs.videoPlayer</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>样例:<br><img src=\"https://i.loli.net/2019/12/23/piSNYJ7nvXBmoZc.png\" alt=\"WX20191223-154447@2x\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"浏览器录音的实时识别\"><a href=\"#浏览器录音的实时识别\" class=\"headerlink\" title=\"浏览器录音的实时识别\"></a>浏览器录音的实时识别</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> constraints = &#123;</span><br><span class=\"line\">  audio: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  video: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> getMedia = navigator.mediaDevices || navigator.webkitGetUserMedia;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (getMedia) &#123;</span><br><span class=\"line\">  getMedia.getUserMedia(constraints).then(<span class=\"function\"><span class=\"params\">mediaStream</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//音频可视化与实时语音识别</span></span><br><span class=\"line\">    <span class=\"comment\">//使用 audioContext 来分析音频流</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.audioContext = <span class=\"keyword\">new</span> (<span class=\"built_in\">window</span>.AudioContext ||</span><br><span class=\"line\">      <span class=\"built_in\">window</span>.webkitAudioContext)();</span><br><span class=\"line\">    <span class=\"comment\">//初始化分析器</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.initAnalyser();</span><br><span class=\"line\">    <span class=\"comment\">//获取输入的音频流</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> audioInput = <span class=\"keyword\">this</span>.audioContext.createMediaStreamSource(mediaStream);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> compressScript = <span class=\"keyword\">this</span>.audioContext.createScriptProcessor();</span><br><span class=\"line\">    <span class=\"comment\">//缓冲区满的时候触发compressProgress方法,执行绘图和其他操作</span></span><br><span class=\"line\">    compressScript.onaudioprocess = <span class=\"keyword\">this</span>.compressProgress;</span><br><span class=\"line\">    <span class=\"comment\">//这里要把各个模块连接起来</span></span><br><span class=\"line\">    <span class=\"comment\">//音频输入连接分析器</span></span><br><span class=\"line\">    audioInput.connect(<span class=\"keyword\">this</span>.analyser);</span><br><span class=\"line\">    <span class=\"comment\">//分析器连接处理脚本</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.analyser.connect(compressScript);</span><br><span class=\"line\">    <span class=\"comment\">//脚本连接输出</span></span><br><span class=\"line\">    compressScript.connect(<span class=\"keyword\">this</span>.audioContext.destination);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//初始化分析器</span></span><br><span class=\"line\"></span><br><span class=\"line\">initAnalyser() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.analyser = <span class=\"keyword\">this</span>.audioContext.createAnalyser();</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.analyser.fftSize = <span class=\"number\">128</span>;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.bufferLength = <span class=\"keyword\">this</span>.analyser.frequencyBinCount;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.dataArray = <span class=\"keyword\">new</span> <span class=\"built_in\">Uint8Array</span>(<span class=\"keyword\">this</span>.bufferLength);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//处理音频片段</span></span><br><span class=\"line\">compressProgress(e) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//绘图</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.draw();</span><br><span class=\"line\">      <span class=\"comment\">//获取音频 buffer</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> buffer = e.inputBuffer.getChannelData(<span class=\"number\">0</span>);</span><br><span class=\"line\">      <span class=\"comment\">//音频 buffer 的处理脚本,这里用到了科大讯飞的实时语音识别 ws 接口</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> audioCompiler = <span class=\"keyword\">new</span> AudioCompiler();</span><br><span class=\"line\">      <span class=\"keyword\">const</span> compressedBuffer = audioCompiler.convertBuffer(buffer);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> int8Array = <span class=\"keyword\">new</span> <span class=\"built_in\">Int8Array</span>(compressedBuffer.buffer);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.webSocket.send(int8Array);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> draw() &#123;</span><br><span class=\"line\">     <span class=\"comment\">//使用 canvas 绘图</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> canvas = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"canvas\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.canvasCtx = canvas.getContext(<span class=\"string\">\"2d\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">let</span> cWidth = <span class=\"keyword\">this</span>.canvas.width,</span><br><span class=\"line\">        cHeight = <span class=\"keyword\">this</span>.canvas.height,</span><br><span class=\"line\">        barWidth = <span class=\"built_in\">parseInt</span>((<span class=\"number\">1.8</span> * cWidth) / <span class=\"keyword\">this</span>.bufferLength),</span><br><span class=\"line\">        barHeight,</span><br><span class=\"line\">        x = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.canvasCtx.clearRect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, cWidth, cHeight);</span><br><span class=\"line\">      <span class=\"comment\">//分析器获取音频数据“切片”</span></span><br><span class=\"line\">      <span class=\"keyword\">this</span>.analyser.getByteFrequencyData(<span class=\"keyword\">this</span>.dataArray);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//把每个音频“切片”画在画布上</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.bufferLength; i++) &#123;</span><br><span class=\"line\">        barHeight = <span class=\"built_in\">parseInt</span>(<span class=\"number\">1.4</span> * <span class=\"keyword\">this</span>.dataArray[i]);</span><br><span class=\"line\">        <span class=\"comment\">// this.canvasCtx.fillStyle = \"rgb(27, 49, 114)\";</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> color = <span class=\"string\">`rgb(<span class=\"subst\">$&#123;i + <span class=\"number\">87</span>&#125;</span>, <span class=\"subst\">$&#123;<span class=\"number\">6</span> * i + <span class=\"number\">174</span>&#125;</span>,<span class=\"subst\">$&#123;<span class=\"number\">6</span> * i + <span class=\"number\">248</span>&#125;</span>)`</span>;</span><br><span class=\"line\">        <span class=\"comment\">// console.log(color);</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.canvasCtx.fillStyle = color;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.canvasCtx.fillRect(x, cHeight - barHeight, barWidth, barHeight);</span><br><span class=\"line\">        x += barWidth + <span class=\"number\">5</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br></pre></td></tr></table></figure>\n<h2 id=\"video-audio-标签识别-包括文件以及直播流识别\"><a href=\"#video-audio-标签识别-包括文件以及直播流识别\" class=\"headerlink\" title=\"video/audio 标签识别(包括文件以及直播流识别)\"></a>video/audio 标签识别(包括文件以及直播流识别)</h2><p>与上面唯一的区别是获取输入源的方式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用createMediaElementSource获取 video/audio 标签的音源analysis</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">this</span>.audioInput = <span class=\"keyword\">this</span>.audioContext.createMediaElementSource(</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.$refs.videoPlayer</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>样例:<br><img src=\"https://i.loli.net/2019/12/23/piSNYJ7nvXBmoZc.png\" alt=\"WX20191223-154447@2x\"></p>\n"},{"title":"前端页面嵌入 lcd 字体","_content":"\n# 前端嵌入 lcd 数字字体\n\n## 前端如何嵌入字体\n\n> 这篇文章主要讨论的是如何嵌入数字 lcd 字体.\n\n为了超越“Web 安全字体”的局限，在网页上使用一些用户电脑上不太可能会安装的字体，微软曾率先提出了@font-face 规则。这个规则后来进入 W3C 的 CSS Fonts Module Level 3 模块，于是就有了前端常用的 Web 自定义字体技术：\n\n```css\n@font-face {\n  font-family: \"MyWebFont\";\n  src: url(\"webfont.eot\"); /* 兼容IE9 */\n  src: url(\"webfont.eot?#iefix\") format(\"embedded-opentype\"), /* IE6-IE8 */\n      url(\"webfont.woff2\") format(\"woff2\"),\n    /* 最新浏览器 */ url(\"webfont.woff\") format(\"woff\"), /* 较新浏览器 */\n      url(\"webfont.ttf\") format(\"truetype\"),\n    /* Safari、Android、iOS */ url(\"webfont.svg#svgFontName\") format(\"svg\"); /* 早期iOS */\n}\n```\n\n当然，上面的代码是几乎可以兼容所有浏览器的方案。大约在两年前，也就是 2016 年，由于浏览器版本的快速更迭，写成下面这样已经是比较现实的了：\n\n```css\n@font-face {\n  font-family: \"MyWebFont\";\n  src: url(\"myfont.woff2\") format(\"woff2\"), url(\"myfont.woff\") format(\"woff\");\n}\n```\n\n最终目标 只使用自带压缩格式的 woff2:\n\n```css\n@font-face {\n  font-family: \"MyWebFont\";\n  src: url(\"myfont.woff2\") format(\"woff2\");\n}\n```\n\n## 获取 lcd 字体\n\n到 [dafont](https://www.dafont.com/theme.php?cat=302#null)下载 ttf 格式字体.\n\n筛选条件中选择 lcd,Preview 填入数字 (0123456789),接着下载需要的字体即可.\n\n## 格式化字体\n\n下载的 ttf 字体需要格式化为 woff/woff2 等字体.\n到[fontsquirrel.com](https://www.fontsquirrel.com/tools/webfont-generator)可以格式化字体.\n同时这个网站也可以截取需要的字符来生成字体,例如我下载的 lcd 字体中包含了 数字 0-9 和字母 a-z,但是我只需要 0-9,就可以进行筛选,接着生成自己需要的字体,只包含 0-9 的 lcd 字体的 woff2 文件大概只有 2kb 大小,机会可以忽略了.\n\n## css 文件中引入字体文件:\n\n```css\n@font-face {\n  font-family: \"ds-digitalbold\";\n  src: url(\"./../font//ds-digib-webfont.woff2\") format(\"woff2\"), url(\"./../font/ds-digib-webfont.ttf\")\n      format(\"truetype\");\n  font-weight: bold;\n}\n```\n\n## 样式用使用\n\n```css\n& p {\n  font-family: \"ds-digitalbold\";\n  font-size: 50px;\n  color: #ffde00;\n}\n```\n\n## 后记\n\n众所周知，相对于英文字体，中文字体天生是“庞然大物”。英文字体两三百KB已经很大了，而中文字体几MB十几MB都算小的。一方面，中文字体包含的字形数量极多，动辄数以千计甚至万计，而英文字体则只需包含几十个基本字符和符号，哪怕支持多种语言及字符变体，容量达到三千多个字形已经算非常庞大的了。另一方面，中文字形的曲折变化复杂度高，在基于轮廓的矢量字体设计中，用于控制中文字形曲线的控制点普遍比英文更多，因而需要的数据量更大，也会导致字体文件膨胀。\n前端开发实践中，为了实现一些特殊视觉效果，经常需要使用某些特殊字体，而用户电脑上几乎不太可能安装这些字体，这时候通常需要使用Web字体技术，让浏览器动态下载我们的自定义字体。可是中文字体非常庞大，很多时候“全量”加载某个字体文件是不现实的。特别是对于一些动态页面且每个页面只有少量字符用到该字体的情况下。当然，也不是每个页面都会用到一个字体文件中的所有字符，全量加载本身也极其浪费。\n\n-----\n","source":"_posts/2020.01.03.lcdFont.md","raw":"---\ntitle: 前端页面嵌入 lcd 字体\ntags: [css, font]\ncategories: 随笔\n---\n\n# 前端嵌入 lcd 数字字体\n\n## 前端如何嵌入字体\n\n> 这篇文章主要讨论的是如何嵌入数字 lcd 字体.\n\n为了超越“Web 安全字体”的局限，在网页上使用一些用户电脑上不太可能会安装的字体，微软曾率先提出了@font-face 规则。这个规则后来进入 W3C 的 CSS Fonts Module Level 3 模块，于是就有了前端常用的 Web 自定义字体技术：\n\n```css\n@font-face {\n  font-family: \"MyWebFont\";\n  src: url(\"webfont.eot\"); /* 兼容IE9 */\n  src: url(\"webfont.eot?#iefix\") format(\"embedded-opentype\"), /* IE6-IE8 */\n      url(\"webfont.woff2\") format(\"woff2\"),\n    /* 最新浏览器 */ url(\"webfont.woff\") format(\"woff\"), /* 较新浏览器 */\n      url(\"webfont.ttf\") format(\"truetype\"),\n    /* Safari、Android、iOS */ url(\"webfont.svg#svgFontName\") format(\"svg\"); /* 早期iOS */\n}\n```\n\n当然，上面的代码是几乎可以兼容所有浏览器的方案。大约在两年前，也就是 2016 年，由于浏览器版本的快速更迭，写成下面这样已经是比较现实的了：\n\n```css\n@font-face {\n  font-family: \"MyWebFont\";\n  src: url(\"myfont.woff2\") format(\"woff2\"), url(\"myfont.woff\") format(\"woff\");\n}\n```\n\n最终目标 只使用自带压缩格式的 woff2:\n\n```css\n@font-face {\n  font-family: \"MyWebFont\";\n  src: url(\"myfont.woff2\") format(\"woff2\");\n}\n```\n\n## 获取 lcd 字体\n\n到 [dafont](https://www.dafont.com/theme.php?cat=302#null)下载 ttf 格式字体.\n\n筛选条件中选择 lcd,Preview 填入数字 (0123456789),接着下载需要的字体即可.\n\n## 格式化字体\n\n下载的 ttf 字体需要格式化为 woff/woff2 等字体.\n到[fontsquirrel.com](https://www.fontsquirrel.com/tools/webfont-generator)可以格式化字体.\n同时这个网站也可以截取需要的字符来生成字体,例如我下载的 lcd 字体中包含了 数字 0-9 和字母 a-z,但是我只需要 0-9,就可以进行筛选,接着生成自己需要的字体,只包含 0-9 的 lcd 字体的 woff2 文件大概只有 2kb 大小,机会可以忽略了.\n\n## css 文件中引入字体文件:\n\n```css\n@font-face {\n  font-family: \"ds-digitalbold\";\n  src: url(\"./../font//ds-digib-webfont.woff2\") format(\"woff2\"), url(\"./../font/ds-digib-webfont.ttf\")\n      format(\"truetype\");\n  font-weight: bold;\n}\n```\n\n## 样式用使用\n\n```css\n& p {\n  font-family: \"ds-digitalbold\";\n  font-size: 50px;\n  color: #ffde00;\n}\n```\n\n## 后记\n\n众所周知，相对于英文字体，中文字体天生是“庞然大物”。英文字体两三百KB已经很大了，而中文字体几MB十几MB都算小的。一方面，中文字体包含的字形数量极多，动辄数以千计甚至万计，而英文字体则只需包含几十个基本字符和符号，哪怕支持多种语言及字符变体，容量达到三千多个字形已经算非常庞大的了。另一方面，中文字形的曲折变化复杂度高，在基于轮廓的矢量字体设计中，用于控制中文字形曲线的控制点普遍比英文更多，因而需要的数据量更大，也会导致字体文件膨胀。\n前端开发实践中，为了实现一些特殊视觉效果，经常需要使用某些特殊字体，而用户电脑上几乎不太可能安装这些字体，这时候通常需要使用Web字体技术，让浏览器动态下载我们的自定义字体。可是中文字体非常庞大，很多时候“全量”加载某个字体文件是不现实的。特别是对于一些动态页面且每个页面只有少量字符用到该字体的情况下。当然，也不是每个页面都会用到一个字体文件中的所有字符，全量加载本身也极其浪费。\n\n-----\n","slug":"2020.01.03.lcdFont","published":1,"date":"2020-01-03T03:42:59.809Z","updated":"2020-01-03T05:00:32.173Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziiqi001vrh9z53d0152s","content":"<h1 id=\"前端嵌入-lcd-数字字体\"><a href=\"#前端嵌入-lcd-数字字体\" class=\"headerlink\" title=\"前端嵌入 lcd 数字字体\"></a>前端嵌入 lcd 数字字体</h1><h2 id=\"前端如何嵌入字体\"><a href=\"#前端如何嵌入字体\" class=\"headerlink\" title=\"前端如何嵌入字体\"></a>前端如何嵌入字体</h2><blockquote>\n<p>这篇文章主要讨论的是如何嵌入数字 lcd 字体.</p>\n</blockquote>\n<p>为了超越“Web 安全字体”的局限，在网页上使用一些用户电脑上不太可能会安装的字体，微软曾率先提出了@font-face 规则。这个规则后来进入 W3C 的 CSS Fonts Module Level 3 模块，于是就有了前端常用的 Web 自定义字体技术：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">\"MyWebFont\"</span>;</span><br><span class=\"line\">  <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"webfont.eot\"</span>); <span class=\"comment\">/* 兼容IE9 */</span></span><br><span class=\"line\">  <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"webfont.eot?#iefix\"</span>) <span class=\"built_in\">format</span>(<span class=\"string\">\"embedded-opentype\"</span>), <span class=\"comment\">/* IE6-IE8 */</span></span><br><span class=\"line\">      <span class=\"built_in\">url</span>(<span class=\"string\">\"webfont.woff2\"</span>) <span class=\"built_in\">format</span>(<span class=\"string\">\"woff2\"</span>),</span><br><span class=\"line\">    <span class=\"comment\">/* 最新浏览器 */</span> <span class=\"built_in\">url</span>(<span class=\"string\">\"webfont.woff\"</span>) <span class=\"built_in\">format</span>(<span class=\"string\">\"woff\"</span>), <span class=\"comment\">/* 较新浏览器 */</span></span><br><span class=\"line\">      <span class=\"built_in\">url</span>(<span class=\"string\">\"webfont.ttf\"</span>) <span class=\"built_in\">format</span>(<span class=\"string\">\"truetype\"</span>),</span><br><span class=\"line\">    <span class=\"comment\">/* Safari、Android、iOS */</span> <span class=\"built_in\">url</span>(<span class=\"string\">\"webfont.svg#svgFontName\"</span>) <span class=\"built_in\">format</span>(<span class=\"string\">\"svg\"</span>); <span class=\"comment\">/* 早期iOS */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当然，上面的代码是几乎可以兼容所有浏览器的方案。大约在两年前，也就是 2016 年，由于浏览器版本的快速更迭，写成下面这样已经是比较现实的了：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">\"MyWebFont\"</span>;</span><br><span class=\"line\">  <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"myfont.woff2\"</span>) <span class=\"built_in\">format</span>(<span class=\"string\">\"woff2\"</span>), <span class=\"built_in\">url</span>(<span class=\"string\">\"myfont.woff\"</span>) <span class=\"built_in\">format</span>(<span class=\"string\">\"woff\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最终目标 只使用自带压缩格式的 woff2:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">\"MyWebFont\"</span>;</span><br><span class=\"line\">  <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"myfont.woff2\"</span>) <span class=\"built_in\">format</span>(<span class=\"string\">\"woff2\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"获取-lcd-字体\"><a href=\"#获取-lcd-字体\" class=\"headerlink\" title=\"获取 lcd 字体\"></a>获取 lcd 字体</h2><p>到 <a href=\"https://www.dafont.com/theme.php?cat=302#null\" target=\"_blank\" rel=\"noopener\">dafont</a>下载 ttf 格式字体.</p>\n<p>筛选条件中选择 lcd,Preview 填入数字 (0123456789),接着下载需要的字体即可.</p>\n<h2 id=\"格式化字体\"><a href=\"#格式化字体\" class=\"headerlink\" title=\"格式化字体\"></a>格式化字体</h2><p>下载的 ttf 字体需要格式化为 woff/woff2 等字体.<br>到<a href=\"https://www.fontsquirrel.com/tools/webfont-generator\" target=\"_blank\" rel=\"noopener\">fontsquirrel.com</a>可以格式化字体.<br>同时这个网站也可以截取需要的字符来生成字体,例如我下载的 lcd 字体中包含了 数字 0-9 和字母 a-z,但是我只需要 0-9,就可以进行筛选,接着生成自己需要的字体,只包含 0-9 的 lcd 字体的 woff2 文件大概只有 2kb 大小,机会可以忽略了.</p>\n<h2 id=\"css-文件中引入字体文件\"><a href=\"#css-文件中引入字体文件\" class=\"headerlink\" title=\"css 文件中引入字体文件:\"></a>css 文件中引入字体文件:</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">\"ds-digitalbold\"</span>;</span><br><span class=\"line\">  <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"./../font//ds-digib-webfont.woff2\"</span>) <span class=\"built_in\">format</span>(<span class=\"string\">\"woff2\"</span>), <span class=\"built_in\">url</span>(<span class=\"string\">\"./../font/ds-digib-webfont.ttf\"</span>)</span><br><span class=\"line\">      <span class=\"built_in\">format</span>(<span class=\"string\">\"truetype\"</span>);</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"样式用使用\"><a href=\"#样式用使用\" class=\"headerlink\" title=\"样式用使用\"></a>样式用使用</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp; <span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">\"ds-digitalbold\"</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#ffde00</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>众所周知，相对于英文字体，中文字体天生是“庞然大物”。英文字体两三百KB已经很大了，而中文字体几MB十几MB都算小的。一方面，中文字体包含的字形数量极多，动辄数以千计甚至万计，而英文字体则只需包含几十个基本字符和符号，哪怕支持多种语言及字符变体，容量达到三千多个字形已经算非常庞大的了。另一方面，中文字形的曲折变化复杂度高，在基于轮廓的矢量字体设计中，用于控制中文字形曲线的控制点普遍比英文更多，因而需要的数据量更大，也会导致字体文件膨胀。<br>前端开发实践中，为了实现一些特殊视觉效果，经常需要使用某些特殊字体，而用户电脑上几乎不太可能安装这些字体，这时候通常需要使用Web字体技术，让浏览器动态下载我们的自定义字体。可是中文字体非常庞大，很多时候“全量”加载某个字体文件是不现实的。特别是对于一些动态页面且每个页面只有少量字符用到该字体的情况下。当然，也不是每个页面都会用到一个字体文件中的所有字符，全量加载本身也极其浪费。</p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前端嵌入-lcd-数字字体\"><a href=\"#前端嵌入-lcd-数字字体\" class=\"headerlink\" title=\"前端嵌入 lcd 数字字体\"></a>前端嵌入 lcd 数字字体</h1><h2 id=\"前端如何嵌入字体\"><a href=\"#前端如何嵌入字体\" class=\"headerlink\" title=\"前端如何嵌入字体\"></a>前端如何嵌入字体</h2><blockquote>\n<p>这篇文章主要讨论的是如何嵌入数字 lcd 字体.</p>\n</blockquote>\n<p>为了超越“Web 安全字体”的局限，在网页上使用一些用户电脑上不太可能会安装的字体，微软曾率先提出了@font-face 规则。这个规则后来进入 W3C 的 CSS Fonts Module Level 3 模块，于是就有了前端常用的 Web 自定义字体技术：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">\"MyWebFont\"</span>;</span><br><span class=\"line\">  <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"webfont.eot\"</span>); <span class=\"comment\">/* 兼容IE9 */</span></span><br><span class=\"line\">  <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"webfont.eot?#iefix\"</span>) <span class=\"built_in\">format</span>(<span class=\"string\">\"embedded-opentype\"</span>), <span class=\"comment\">/* IE6-IE8 */</span></span><br><span class=\"line\">      <span class=\"built_in\">url</span>(<span class=\"string\">\"webfont.woff2\"</span>) <span class=\"built_in\">format</span>(<span class=\"string\">\"woff2\"</span>),</span><br><span class=\"line\">    <span class=\"comment\">/* 最新浏览器 */</span> <span class=\"built_in\">url</span>(<span class=\"string\">\"webfont.woff\"</span>) <span class=\"built_in\">format</span>(<span class=\"string\">\"woff\"</span>), <span class=\"comment\">/* 较新浏览器 */</span></span><br><span class=\"line\">      <span class=\"built_in\">url</span>(<span class=\"string\">\"webfont.ttf\"</span>) <span class=\"built_in\">format</span>(<span class=\"string\">\"truetype\"</span>),</span><br><span class=\"line\">    <span class=\"comment\">/* Safari、Android、iOS */</span> <span class=\"built_in\">url</span>(<span class=\"string\">\"webfont.svg#svgFontName\"</span>) <span class=\"built_in\">format</span>(<span class=\"string\">\"svg\"</span>); <span class=\"comment\">/* 早期iOS */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当然，上面的代码是几乎可以兼容所有浏览器的方案。大约在两年前，也就是 2016 年，由于浏览器版本的快速更迭，写成下面这样已经是比较现实的了：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">\"MyWebFont\"</span>;</span><br><span class=\"line\">  <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"myfont.woff2\"</span>) <span class=\"built_in\">format</span>(<span class=\"string\">\"woff2\"</span>), <span class=\"built_in\">url</span>(<span class=\"string\">\"myfont.woff\"</span>) <span class=\"built_in\">format</span>(<span class=\"string\">\"woff\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最终目标 只使用自带压缩格式的 woff2:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">\"MyWebFont\"</span>;</span><br><span class=\"line\">  <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"myfont.woff2\"</span>) <span class=\"built_in\">format</span>(<span class=\"string\">\"woff2\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"获取-lcd-字体\"><a href=\"#获取-lcd-字体\" class=\"headerlink\" title=\"获取 lcd 字体\"></a>获取 lcd 字体</h2><p>到 <a href=\"https://www.dafont.com/theme.php?cat=302#null\" target=\"_blank\" rel=\"noopener\">dafont</a>下载 ttf 格式字体.</p>\n<p>筛选条件中选择 lcd,Preview 填入数字 (0123456789),接着下载需要的字体即可.</p>\n<h2 id=\"格式化字体\"><a href=\"#格式化字体\" class=\"headerlink\" title=\"格式化字体\"></a>格式化字体</h2><p>下载的 ttf 字体需要格式化为 woff/woff2 等字体.<br>到<a href=\"https://www.fontsquirrel.com/tools/webfont-generator\" target=\"_blank\" rel=\"noopener\">fontsquirrel.com</a>可以格式化字体.<br>同时这个网站也可以截取需要的字符来生成字体,例如我下载的 lcd 字体中包含了 数字 0-9 和字母 a-z,但是我只需要 0-9,就可以进行筛选,接着生成自己需要的字体,只包含 0-9 的 lcd 字体的 woff2 文件大概只有 2kb 大小,机会可以忽略了.</p>\n<h2 id=\"css-文件中引入字体文件\"><a href=\"#css-文件中引入字体文件\" class=\"headerlink\" title=\"css 文件中引入字体文件:\"></a>css 文件中引入字体文件:</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">\"ds-digitalbold\"</span>;</span><br><span class=\"line\">  <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"./../font//ds-digib-webfont.woff2\"</span>) <span class=\"built_in\">format</span>(<span class=\"string\">\"woff2\"</span>), <span class=\"built_in\">url</span>(<span class=\"string\">\"./../font/ds-digib-webfont.ttf\"</span>)</span><br><span class=\"line\">      <span class=\"built_in\">format</span>(<span class=\"string\">\"truetype\"</span>);</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"样式用使用\"><a href=\"#样式用使用\" class=\"headerlink\" title=\"样式用使用\"></a>样式用使用</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp; <span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">\"ds-digitalbold\"</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#ffde00</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>众所周知，相对于英文字体，中文字体天生是“庞然大物”。英文字体两三百KB已经很大了，而中文字体几MB十几MB都算小的。一方面，中文字体包含的字形数量极多，动辄数以千计甚至万计，而英文字体则只需包含几十个基本字符和符号，哪怕支持多种语言及字符变体，容量达到三千多个字形已经算非常庞大的了。另一方面，中文字形的曲折变化复杂度高，在基于轮廓的矢量字体设计中，用于控制中文字形曲线的控制点普遍比英文更多，因而需要的数据量更大，也会导致字体文件膨胀。<br>前端开发实践中，为了实现一些特殊视觉效果，经常需要使用某些特殊字体，而用户电脑上几乎不太可能安装这些字体，这时候通常需要使用Web字体技术，让浏览器动态下载我们的自定义字体。可是中文字体非常庞大，很多时候“全量”加载某个字体文件是不现实的。特别是对于一些动态页面且每个页面只有少量字符用到该字体的情况下。当然，也不是每个页面都会用到一个字体文件中的所有字符，全量加载本身也极其浪费。</p>\n<hr>\n"},{"title":"在 vue 项目中使用 postcss-px-to-viewport","_content":"\n在用 vue 开发手机端页面时,推荐使用 postcss-px-to-viewport 来将 px 转为 viewport\n\n## 安装\n\n```sh\nnpm install postcss-loader postcss-px-to-viewport --save-dev\n\n```\n\n## 在 vue.config.js 中配置\n\n```js\ncss: {\n  loaderOptions: {\n    postcss: {\n      plugins: [\n        require(\"postcss-px-to-viewport\")({\n      unitToConvert: 'px', //需要转换的单位，默认为\"px\"\n      viewportWidth: 375, // 视窗的宽度，对应的是我们设计稿的宽度\n      viewportHeight: 1334,//视窗的高度，根据375设备的宽度来指定，一般指定667，也可以不配置\n      unitPrecision: 13, // 指定`px`转换为视窗单位值的小数位数（很多时候无法整除）\n      propList: ['*'], // 能转化为vw的属性列表\n      viewportUnit: 'vw', // 指定需要转换成的视窗单位，建议使用vw\n      fontViewportUnit: 'vw', //字体使用的视口单位\n      selectorBlackList: ['.ignore-', '.hairlines'], //指定不转换为视窗单位的类，可以自定义，可以无限添加,建议定义一至两个通用的类名\n      minPixelValue: 1, // 小于或等于`1px`不转换为视窗单位，你也可以设置为你想要的值\n      mediaQuery: false, // 允许在媒体查询中转换`px`\n      replace: true, //是否直接更换属性值，而不添加备用属性\n      exclude: [\n        /RightBar/,\n        /gotop.vue/,\n      ], //忽略某些文件夹下的文件或特定文件，例如 'node_modules' 下的文件\n      landscape: false, //是否添加根据 landscapeWidth 生成的媒体查询条件 @media (orientation: landscape)\n      landscapeUnit: 'vw', //横屏时使用的单位\n      landscapeWidth: 1134 //横屏时使用的视口宽度\n\n。\n        })\n      ];\n    }\n  }\n}\n```\n","source":"_posts/2020.01.09.px2vw.md","raw":"---\ntitle: 在 vue 项目中使用 postcss-px-to-viewport\ntags: []\ncategories: 随笔\n---\n\n在用 vue 开发手机端页面时,推荐使用 postcss-px-to-viewport 来将 px 转为 viewport\n\n## 安装\n\n```sh\nnpm install postcss-loader postcss-px-to-viewport --save-dev\n\n```\n\n## 在 vue.config.js 中配置\n\n```js\ncss: {\n  loaderOptions: {\n    postcss: {\n      plugins: [\n        require(\"postcss-px-to-viewport\")({\n      unitToConvert: 'px', //需要转换的单位，默认为\"px\"\n      viewportWidth: 375, // 视窗的宽度，对应的是我们设计稿的宽度\n      viewportHeight: 1334,//视窗的高度，根据375设备的宽度来指定，一般指定667，也可以不配置\n      unitPrecision: 13, // 指定`px`转换为视窗单位值的小数位数（很多时候无法整除）\n      propList: ['*'], // 能转化为vw的属性列表\n      viewportUnit: 'vw', // 指定需要转换成的视窗单位，建议使用vw\n      fontViewportUnit: 'vw', //字体使用的视口单位\n      selectorBlackList: ['.ignore-', '.hairlines'], //指定不转换为视窗单位的类，可以自定义，可以无限添加,建议定义一至两个通用的类名\n      minPixelValue: 1, // 小于或等于`1px`不转换为视窗单位，你也可以设置为你想要的值\n      mediaQuery: false, // 允许在媒体查询中转换`px`\n      replace: true, //是否直接更换属性值，而不添加备用属性\n      exclude: [\n        /RightBar/,\n        /gotop.vue/,\n      ], //忽略某些文件夹下的文件或特定文件，例如 'node_modules' 下的文件\n      landscape: false, //是否添加根据 landscapeWidth 生成的媒体查询条件 @media (orientation: landscape)\n      landscapeUnit: 'vw', //横屏时使用的单位\n      landscapeWidth: 1134 //横屏时使用的视口宽度\n\n。\n        })\n      ];\n    }\n  }\n}\n```\n","slug":"2020.01.09.px2vw","published":1,"date":"2020-01-09T05:43:01.226Z","updated":"2020-01-09T05:48:28.116Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziiqi001wrh9zbuhq05j5","content":"<p>在用 vue 开发手机端页面时,推荐使用 postcss-px-to-viewport 来将 px 转为 viewport</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install postcss-loader postcss-px-to-viewport --save-dev</span><br></pre></td></tr></table></figure>\n<h2 id=\"在-vue-config-js-中配置\"><a href=\"#在-vue-config-js-中配置\" class=\"headerlink\" title=\"在 vue.config.js 中配置\"></a>在 vue.config.js 中配置</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">css: &#123;</span><br><span class=\"line\">  loaderOptions: &#123;</span><br><span class=\"line\">    postcss: &#123;</span><br><span class=\"line\">      plugins: [</span><br><span class=\"line\">        <span class=\"built_in\">require</span>(<span class=\"string\">\"postcss-px-to-viewport\"</span>)(&#123;</span><br><span class=\"line\">      unitToConvert: <span class=\"string\">'px'</span>, <span class=\"comment\">//需要转换的单位，默认为\"px\"</span></span><br><span class=\"line\">      viewportWidth: <span class=\"number\">375</span>, <span class=\"comment\">// 视窗的宽度，对应的是我们设计稿的宽度</span></span><br><span class=\"line\">      viewportHeight: <span class=\"number\">1334</span>,<span class=\"comment\">//视窗的高度，根据375设备的宽度来指定，一般指定667，也可以不配置</span></span><br><span class=\"line\">      unitPrecision: <span class=\"number\">13</span>, <span class=\"comment\">// 指定`px`转换为视窗单位值的小数位数（很多时候无法整除）</span></span><br><span class=\"line\">      propList: [<span class=\"string\">'*'</span>], <span class=\"comment\">// 能转化为vw的属性列表</span></span><br><span class=\"line\">      viewportUnit: <span class=\"string\">'vw'</span>, <span class=\"comment\">// 指定需要转换成的视窗单位，建议使用vw</span></span><br><span class=\"line\">      fontViewportUnit: <span class=\"string\">'vw'</span>, <span class=\"comment\">//字体使用的视口单位</span></span><br><span class=\"line\">      selectorBlackList: [<span class=\"string\">'.ignore-'</span>, <span class=\"string\">'.hairlines'</span>], <span class=\"comment\">//指定不转换为视窗单位的类，可以自定义，可以无限添加,建议定义一至两个通用的类名</span></span><br><span class=\"line\">      minPixelValue: <span class=\"number\">1</span>, <span class=\"comment\">// 小于或等于`1px`不转换为视窗单位，你也可以设置为你想要的值</span></span><br><span class=\"line\">      mediaQuery: <span class=\"literal\">false</span>, <span class=\"comment\">// 允许在媒体查询中转换`px`</span></span><br><span class=\"line\">      replace: <span class=\"literal\">true</span>, <span class=\"comment\">//是否直接更换属性值，而不添加备用属性</span></span><br><span class=\"line\">      exclude: [</span><br><span class=\"line\">        /RightBar/,</span><br><span class=\"line\">        /gotop.vue/,</span><br><span class=\"line\">      ], <span class=\"comment\">//忽略某些文件夹下的文件或特定文件，例如 'node_modules' 下的文件</span></span><br><span class=\"line\">      landscape: <span class=\"literal\">false</span>, <span class=\"comment\">//是否添加根据 landscapeWidth 生成的媒体查询条件 @media (orientation: landscape)</span></span><br><span class=\"line\">      landscapeUnit: <span class=\"string\">'vw'</span>, <span class=\"comment\">//横屏时使用的单位</span></span><br><span class=\"line\">      landscapeWidth: <span class=\"number\">1134</span> <span class=\"comment\">//横屏时使用的视口宽度</span></span><br><span class=\"line\"></span><br><span class=\"line\">。</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      ];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>在用 vue 开发手机端页面时,推荐使用 postcss-px-to-viewport 来将 px 转为 viewport</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install postcss-loader postcss-px-to-viewport --save-dev</span><br></pre></td></tr></table></figure>\n<h2 id=\"在-vue-config-js-中配置\"><a href=\"#在-vue-config-js-中配置\" class=\"headerlink\" title=\"在 vue.config.js 中配置\"></a>在 vue.config.js 中配置</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">css: &#123;</span><br><span class=\"line\">  loaderOptions: &#123;</span><br><span class=\"line\">    postcss: &#123;</span><br><span class=\"line\">      plugins: [</span><br><span class=\"line\">        <span class=\"built_in\">require</span>(<span class=\"string\">\"postcss-px-to-viewport\"</span>)(&#123;</span><br><span class=\"line\">      unitToConvert: <span class=\"string\">'px'</span>, <span class=\"comment\">//需要转换的单位，默认为\"px\"</span></span><br><span class=\"line\">      viewportWidth: <span class=\"number\">375</span>, <span class=\"comment\">// 视窗的宽度，对应的是我们设计稿的宽度</span></span><br><span class=\"line\">      viewportHeight: <span class=\"number\">1334</span>,<span class=\"comment\">//视窗的高度，根据375设备的宽度来指定，一般指定667，也可以不配置</span></span><br><span class=\"line\">      unitPrecision: <span class=\"number\">13</span>, <span class=\"comment\">// 指定`px`转换为视窗单位值的小数位数（很多时候无法整除）</span></span><br><span class=\"line\">      propList: [<span class=\"string\">'*'</span>], <span class=\"comment\">// 能转化为vw的属性列表</span></span><br><span class=\"line\">      viewportUnit: <span class=\"string\">'vw'</span>, <span class=\"comment\">// 指定需要转换成的视窗单位，建议使用vw</span></span><br><span class=\"line\">      fontViewportUnit: <span class=\"string\">'vw'</span>, <span class=\"comment\">//字体使用的视口单位</span></span><br><span class=\"line\">      selectorBlackList: [<span class=\"string\">'.ignore-'</span>, <span class=\"string\">'.hairlines'</span>], <span class=\"comment\">//指定不转换为视窗单位的类，可以自定义，可以无限添加,建议定义一至两个通用的类名</span></span><br><span class=\"line\">      minPixelValue: <span class=\"number\">1</span>, <span class=\"comment\">// 小于或等于`1px`不转换为视窗单位，你也可以设置为你想要的值</span></span><br><span class=\"line\">      mediaQuery: <span class=\"literal\">false</span>, <span class=\"comment\">// 允许在媒体查询中转换`px`</span></span><br><span class=\"line\">      replace: <span class=\"literal\">true</span>, <span class=\"comment\">//是否直接更换属性值，而不添加备用属性</span></span><br><span class=\"line\">      exclude: [</span><br><span class=\"line\">        /RightBar/,</span><br><span class=\"line\">        /gotop.vue/,</span><br><span class=\"line\">      ], <span class=\"comment\">//忽略某些文件夹下的文件或特定文件，例如 'node_modules' 下的文件</span></span><br><span class=\"line\">      landscape: <span class=\"literal\">false</span>, <span class=\"comment\">//是否添加根据 landscapeWidth 生成的媒体查询条件 @media (orientation: landscape)</span></span><br><span class=\"line\">      landscapeUnit: <span class=\"string\">'vw'</span>, <span class=\"comment\">//横屏时使用的单位</span></span><br><span class=\"line\">      landscapeWidth: <span class=\"number\">1134</span> <span class=\"comment\">//横屏时使用的视口宽度</span></span><br><span class=\"line\"></span><br><span class=\"line\">。</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      ];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"react 项目中按需加载 antd","_content":"\n初次接触 react 和 antd,如有不对的地方请谅解.\n\n## 安装 antd\n\n```sh\nyarn add antd\n```\n\n在 app.js 中使用:\n\n    import { Button } from 'antd';\n\n这时浏览器会有提示信息:\n\n> You are using a whole package of antd, please use https://www.npmjs.com/package/babel-plugin-import to reduce app bundle size.\n\n意味着我们是在全量引入 antd,这样会对网络请求与性能有一定的影响,这里我们借助`babel-plugin-import`来按需加载 antd.\n\n安装 `babel-plugin-import`\n\n```sh\nyarn add babel-plugin-import\n\n```\n\n## 暴露 react-app 配置文件\n\n使用 `yarn reject`来暴露项目配置文件.\n\n## 配置 package.json\n\n修改项目根目录下的 `package.json`文件:\n\n```json\n\"babel\": {\n    \"presets\": [\n      \"react-app\"\n    ],\n    \"plugins\": [\n      [\n        \"import\",\n        {\n          \"libraryName\": \"antd\",\n          \"style\": \"css\"\n        }\n      ]\n    ]\n  }\n\n```\n\n## 按需引入\n\n在 app.js 中按需引入:\n\n```js\nimport { Button } from \"antd\";\n```\n","source":"_posts/2020.01.13.reactAntd.md","raw":"---\ntitle: react 项目中按需加载 antd\ntags: []\ncategories: 随笔\n---\n\n初次接触 react 和 antd,如有不对的地方请谅解.\n\n## 安装 antd\n\n```sh\nyarn add antd\n```\n\n在 app.js 中使用:\n\n    import { Button } from 'antd';\n\n这时浏览器会有提示信息:\n\n> You are using a whole package of antd, please use https://www.npmjs.com/package/babel-plugin-import to reduce app bundle size.\n\n意味着我们是在全量引入 antd,这样会对网络请求与性能有一定的影响,这里我们借助`babel-plugin-import`来按需加载 antd.\n\n安装 `babel-plugin-import`\n\n```sh\nyarn add babel-plugin-import\n\n```\n\n## 暴露 react-app 配置文件\n\n使用 `yarn reject`来暴露项目配置文件.\n\n## 配置 package.json\n\n修改项目根目录下的 `package.json`文件:\n\n```json\n\"babel\": {\n    \"presets\": [\n      \"react-app\"\n    ],\n    \"plugins\": [\n      [\n        \"import\",\n        {\n          \"libraryName\": \"antd\",\n          \"style\": \"css\"\n        }\n      ]\n    ]\n  }\n\n```\n\n## 按需引入\n\n在 app.js 中按需引入:\n\n```js\nimport { Button } from \"antd\";\n```\n","slug":"2020.01.13.reactAntd","published":1,"date":"2020-01-13T02:08:44.283Z","updated":"2020-01-15T08:58:38.695Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziiqi001xrh9zahrh8tg0","content":"<p>初次接触 react 和 antd,如有不对的地方请谅解.</p>\n<h2 id=\"安装-antd\"><a href=\"#安装-antd\" class=\"headerlink\" title=\"安装 antd\"></a>安装 antd</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add antd</span><br></pre></td></tr></table></figure>\n<p>在 app.js 中使用:</p>\n<pre><code>import { Button } from &apos;antd&apos;;\n</code></pre><p>这时浏览器会有提示信息:</p>\n<blockquote>\n<p>You are using a whole package of antd, please use <a href=\"https://www.npmjs.com/package/babel-plugin-import\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/babel-plugin-import</a> to reduce app bundle size.</p>\n</blockquote>\n<p>意味着我们是在全量引入 antd,这样会对网络请求与性能有一定的影响,这里我们借助<code>babel-plugin-import</code>来按需加载 antd.</p>\n<p>安装 <code>babel-plugin-import</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add babel-plugin-import</span><br></pre></td></tr></table></figure>\n<h2 id=\"暴露-react-app-配置文件\"><a href=\"#暴露-react-app-配置文件\" class=\"headerlink\" title=\"暴露 react-app 配置文件\"></a>暴露 react-app 配置文件</h2><p>使用 <code>yarn reject</code>来暴露项目配置文件.</p>\n<h2 id=\"配置-package-json\"><a href=\"#配置-package-json\" class=\"headerlink\" title=\"配置 package.json\"></a>配置 package.json</h2><p>修改项目根目录下的 <code>package.json</code>文件:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"babel\": &#123;</span><br><span class=\"line\">    \"presets\": [</span><br><span class=\"line\">      <span class=\"string\">\"react-app\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    \"plugins\": [</span><br><span class=\"line\">      [</span><br><span class=\"line\">        <span class=\"string\">\"import\"</span>,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"attr\">\"libraryName\"</span>: <span class=\"string\">\"antd\"</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"style\"</span>: <span class=\"string\">\"css\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"按需引入\"><a href=\"#按需引入\" class=\"headerlink\" title=\"按需引入\"></a>按需引入</h2><p>在 app.js 中按需引入:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Button &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"antd\"</span>;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>初次接触 react 和 antd,如有不对的地方请谅解.</p>\n<h2 id=\"安装-antd\"><a href=\"#安装-antd\" class=\"headerlink\" title=\"安装 antd\"></a>安装 antd</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add antd</span><br></pre></td></tr></table></figure>\n<p>在 app.js 中使用:</p>\n<pre><code>import { Button } from &apos;antd&apos;;\n</code></pre><p>这时浏览器会有提示信息:</p>\n<blockquote>\n<p>You are using a whole package of antd, please use <a href=\"https://www.npmjs.com/package/babel-plugin-import\" target=\"_blank\" rel=\"noopener\">https://www.npmjs.com/package/babel-plugin-import</a> to reduce app bundle size.</p>\n</blockquote>\n<p>意味着我们是在全量引入 antd,这样会对网络请求与性能有一定的影响,这里我们借助<code>babel-plugin-import</code>来按需加载 antd.</p>\n<p>安装 <code>babel-plugin-import</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add babel-plugin-import</span><br></pre></td></tr></table></figure>\n<h2 id=\"暴露-react-app-配置文件\"><a href=\"#暴露-react-app-配置文件\" class=\"headerlink\" title=\"暴露 react-app 配置文件\"></a>暴露 react-app 配置文件</h2><p>使用 <code>yarn reject</code>来暴露项目配置文件.</p>\n<h2 id=\"配置-package-json\"><a href=\"#配置-package-json\" class=\"headerlink\" title=\"配置 package.json\"></a>配置 package.json</h2><p>修改项目根目录下的 <code>package.json</code>文件:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"babel\": &#123;</span><br><span class=\"line\">    \"presets\": [</span><br><span class=\"line\">      <span class=\"string\">\"react-app\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    \"plugins\": [</span><br><span class=\"line\">      [</span><br><span class=\"line\">        <span class=\"string\">\"import\"</span>,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"attr\">\"libraryName\"</span>: <span class=\"string\">\"antd\"</span>,</span><br><span class=\"line\">          <span class=\"attr\">\"style\"</span>: <span class=\"string\">\"css\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"按需引入\"><a href=\"#按需引入\" class=\"headerlink\" title=\"按需引入\"></a>按需引入</h2><p>在 app.js 中按需引入:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Button &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"antd\"</span>;</span><br></pre></td></tr></table></figure>\n"},{"title":"在 chrome 中启用不安全的脚本的解决办法","reward":false,"_content":"\n> 在 chrome 中启用\"不安全脚本\"的办法\n\n![WX20200203-123009@2x.png](https://i.loli.net/2020/02/03/UhrjeOzWZbkxCav.png)\n\n![WX20200203-123522@2x.png](https://i.loli.net/2020/02/03/PbUsinftgDo26hH.png)\n\n![WX20200203-123722@2x.png](https://i.loli.net/2020/02/03/nC5j9Zp8312EomK.png)\n","source":"_posts/2020.02.03.enableHttpOverHttpsWebpage.md","raw":"---\ntitle: 在 chrome 中启用不安全的脚本的解决办法\ntags: [chrome]\ncategories: 随笔\nreward: false\n---\n\n> 在 chrome 中启用\"不安全脚本\"的办法\n\n![WX20200203-123009@2x.png](https://i.loli.net/2020/02/03/UhrjeOzWZbkxCav.png)\n\n![WX20200203-123522@2x.png](https://i.loli.net/2020/02/03/PbUsinftgDo26hH.png)\n\n![WX20200203-123722@2x.png](https://i.loli.net/2020/02/03/nC5j9Zp8312EomK.png)\n","slug":"2020.02.03.enableHttpOverHttpsWebpage","published":1,"date":"2020-02-03T04:27:14.623Z","updated":"2020-02-08T04:07:17.131Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziiqj001yrh9zebpm07ee","content":"<blockquote>\n<p>在 chrome 中启用”不安全脚本”的办法</p>\n</blockquote>\n<p><img src=\"https://i.loli.net/2020/02/03/UhrjeOzWZbkxCav.png\" alt=\"WX20200203-123009@2x.png\"></p>\n<p><img src=\"https://i.loli.net/2020/02/03/PbUsinftgDo26hH.png\" alt=\"WX20200203-123522@2x.png\"></p>\n<p><img src=\"https://i.loli.net/2020/02/03/nC5j9Zp8312EomK.png\" alt=\"WX20200203-123722@2x.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>在 chrome 中启用”不安全脚本”的办法</p>\n</blockquote>\n<p><img src=\"https://i.loli.net/2020/02/03/UhrjeOzWZbkxCav.png\" alt=\"WX20200203-123009@2x.png\"></p>\n<p><img src=\"https://i.loli.net/2020/02/03/PbUsinftgDo26hH.png\" alt=\"WX20200203-123522@2x.png\"></p>\n<p><img src=\"https://i.loli.net/2020/02/03/nC5j9Zp8312EomK.png\" alt=\"WX20200203-123722@2x.png\"></p>\n"},{"title":"微信 jssdk 踩坑实录(nodejs实现后台)","_content":"\n# 1\n\n最近做 H5 有一个需求,要在网页链接分享到微信好友的显示描述和自定义缩略图,并在分享到朋友圈的时候显示缩略图.开始我觉得这是一个很简单的需求,应该在网页上配置一下就好了,后来才发现自己的真的是 too young,我花了一天半的时间来处理这个问题,最终得到了完美的解决,这里我记录下自己的踩坑经历,以便日后查阅.\n\n# 2\n\n微信官方是这么说的:\n\n> 为规范自定义分享链接功能在网页上的使用，自 2017 年 4 月 25 日起，JSSDK“分享到朋友圈”及“发送给朋友”接口，自定义的分享链接，其域名或路径必须与当前页面对应的公众号 JS 安全域名一致，否则将调用失败。例如，当前页面是 http://www.abc.com/123，其公众号对应的JS安全域名为 www.abc.com 以及 www.xyz.com，则分享自定义链接 http://www.abc.com/456 可以成功，分享 http://www.xyz.com/123 或 http://www.def.com/123 均将失败。对于未接入微信 JSSDK 或已接入但 JSSDK 调用失败的网页，被用户分享时，分享卡片将统一使用默认缩略图和标题简介，不允许自定义。\n\n意思是如果要自定义缩略图和简介,我们就需要接入微信的 [jssdk](https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html#2).好,那我们现在就开始接入辣鸡微信的 jssdk.\n\n微信文档地址:https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html#2\n\n# 3.准备工作\n\n如果要接入微信的 jssdk,必要条件如下,如果缺少其中任意一个,就不用继续看下去了,因为不能接入 jssdk:\n\n- 一个认证了的微信公众号(需要公众号的 appid 和 screct)\n- 一个已经备案的域名\n\n可选的配置:\n\n- 后台开发语言(这里我选用了 nodejs).\n- js 安全域名(要求 80/443 端口),这个后面还会提到.\n- ssl 证书(用于添加 https,这里推荐用 https,防劫持这样的有点就不说了,还有一个很重要的原因就是:如果不是 https 的话,使用微信浏览页面会有一个 confirm 安全的页面,确认以后虽然可以进入 h5,但是在 ios 下底部会有一个难看的导航栏,十分影响体验)\n\n# 4.微信公众号配置\n\n## (1)ip 白名单配置\n\nip 白名单主要是用于后端根据 appid 和 screct 获取 access_token,只有在白名单中的 ip 才可以访问微信的官方接口.\n![WX20200121-093121@2x.png](https://i.loli.net/2020/01/21/9Il3jxBwF5edG6r.png)\n\n## (2)添加 js 安全域名\n\n![](https://i.loli.net/2020/01/21/dvEwPeDUXmhLNf9.png)\n需要注意的是:\n\n- 安全域名最多只能填写三个,而且一个月内最多可以修改并保存三次.\n- 和上面提到的一样,这个域名必须是备案过的;\n- 需要下载微信提供的 txt 验证文件上传到 web 服务器网页的路径下,例如:我使用 vue(webpack)打包的文件在 https://example.com/nh 下,那么这个文件也存放在这个路径下,确保微信可以虎获取到这个文件就可以,因为如果获取不到是无法添加域名的.(这一步其实是为了限制一个认证公众号可以绑定的域名数量)\n\n# 5 后端服务开发(使用 nodejs)\n\n使用 koa 框架:\n\n```js\nvar http = require(\"http\");\nvar https = require(\"https\");\nvar fs = require(\"fs\");\n\nconst Koa = require(\"koa\");\n\n//使用 axios 向微信服务器发起请求\nconst axios = require(\"axios\");\n\nconst app = new Koa();\nconst cors = require(\"koa-cors\");\nconst utils = require(\"./utils/utils\");\n\n//config 中包含微信公众号的 appid 和 screct\n//这两条数据很重要,不能泄露\nconst config = require(\"./config/config\");\n\n//引入微信 jssdk校验代码\n//微信开发者文档中中包含了python/java/php/nodejs 的代码\n//这里我选择了 nodejs 的生成签名的包\nvar sign = require(\"./sign.js\");\n\n//这里是从阿里云申请的免费 ssl 证书,方便为接口添加 https\nvar options = {\n  key: fs.readFileSync(\"./https/3400951_wxshare.cf.key\"), //ssl文件路径\n  cert: fs.readFileSync(\"./https/3400951_wxshare.cf.pem\") //ssl文件路径\n};\n//添加跨域相关信息\napp.use(\n  cors({\n    origin: function() {\n      return \"*\";\n    },\n    exposeHeaders: [\"WWW-Authenticate\", \"Server-Authorization\"],\n    maxAge: 5,\n    credentials: true,\n    allowMethods: [\"GET\", \"POST\"],\n    allowHeaders: [\"Content-Type\", \"Authorization\", \"Accept\"]\n  })\n);\napp.use(async ctx => {\n  if (ctx.request.query.url2) {\n    //根据公众号的 appid和 screct 获取 access_token\n    let [err, data] = await utils.awaitWrap(\n      axios.get(\n        `https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=${config.config.appId}&secret=${config.config.secret}`\n      )\n    );\n    if (err) {\n      return utils.res(ctx, 1001, \"查询 access-token 失败\");\n    } else {\n      if (data.data.access_token) {\n        //根据 access_token 换取 ticket\n        let [err2, data2] = await utils.awaitWrap(\n          axios.get(\n            `https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=${data.data.access_token}&type=jsapi`\n          )\n        );\n        if (err2) {\n          return utils.res(ctx, 1002, \"查询 ticket 失败\");\n        } else {\n          //根据 ticket 以及前端传过来的 url,生成signature等若干信息返回给前端进行 jssdk 验证.\n          let signature = sign(\n            data2.data.ticket,\n            decodeURIComponent(ctx.request.query.url2)\n          );\n          signature.appId = config.config.appId;\n          console.log(signature);\n          //返回给前端\n          return utils.res(ctx, 200, \"success\", signature);\n        }\n      } else {\n        return utils.res(ctx, 1001, data.data.errmsg);\n      }\n    }\n  } else {\n    return utils.res(ctx, 1003, \"没有参数\");\n  }\n});\n//创建http服务并监听 80 端口\n//创建 https 服务并监听 443 端口\nhttp.createServer(app.callback()).listen(3000);\nhttps.createServer(options, app.callback()).listen(3001);\n```\n\n需要注意的事项:\n\n- 1.微信获取 access_token 和 ticket 的接口是有访问频率限制的,据称是每天 2000 次.\n\n> 生成签名之前必须先了解一下 jsapi_ticket，jsapi_ticket 是公众号用于调用微信 JS 接口的临时票据。正常情况下，jsapi_ticket 的有效期为 7200 秒，通过 access_token 来获取。由于获取 jsapi_ticket 的 api 调用次数非常有限，频繁刷新 jsapi_ticket 会导致 api 调用受限，影响自身业务，开发者必须在自己的服务全局缓存 jsapi_ticket 。参考以下文档获取 access_token（有效期 7200 秒，开发者必须在自己的服务全局缓存 access_token）：https://developers.weixin.qq.com/doc/offiaccount/Basic_Information/Get_access_token.html用第一步拿到的access_token 采用 http GET 方式请求获得 jsapi_ticket（有效期 7200 秒，开发者必须在自己的服务全局缓存 jsapi_ticket）：https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=ACCESS_TOKEN&type=jsapi\n\n- 2.签名算法\n  > 签名生成规则如下：参与签名的字段包括 noncestr（随机字符串）, 有效的 jsapi_ticket, timestamp（时间戳）, url（当前网页的 URL，不包含#及其后面部分） 。对所有待签名参数按照字段名的 ASCII 码从小到大排序（字典序）后，使用 URL 键值对的格式（即 key1=value1&key2=value2…）拼接成字符串 string1。这里需要注意的是所有参数名均为小写字符。对 string1 作 sha1 加密，字段名和字段值都采用原始值，不进行 URL 转义。即 signature=sha1(string1)。\n\n这里我直接用了微信给的 example 中的代码:\n\n```js\n//sign.js\nvar createNonceStr = function() {\n  return Math.random()\n    .toString(36)\n    .substr(2, 15);\n};\n\nvar createTimestamp = function() {\n  return parseInt(new Date().getTime() / 1000) + \"\";\n};\n\nvar raw = function(args) {\n  var keys = Object.keys(args);\n  keys = keys.sort();\n  var newArgs = {};\n  keys.forEach(function(key) {\n    newArgs[key.toLowerCase()] = args[key];\n  });\n\n  var string = \"\";\n  for (var k in newArgs) {\n    string += \"&\" + k + \"=\" + newArgs[k];\n  }\n  string = string.substr(1);\n  return string;\n};\n\n/**\n * @synopsis 签名算法\n *\n * @param jsapi_ticket 用于签名的 jsapi_ticket\n * @param url 用于签名的 url ，注意必须动态获取，不能 hardcode\n *\n * @returns\n */\nvar sign = function(jsapi_ticket, url) {\n  var ret = {\n    jsapi_ticket: jsapi_ticket,\n    nonceStr: createNonceStr(),\n    timestamp: createTimestamp(),\n    url: url\n  };\n  var string = raw(ret);\n  jsSHA = require(\"jssha\");\n  shaObj = new jsSHA(string, \"TEXT\");\n  ret.signature = shaObj.getHash(\"SHA-1\", \"HEX\");\n\n  return ret;\n};\n\nmodule.exports = sign;\n```\n\n可以在这里验证生成微信签名的正确性:http://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=jsapisign\n\n# 6.前端开发\n\n## (1) 引入 JS 文件\n\n在需要调用 JS 接口的页面引入如下 JS 文件，（支持 https）：http://res.wx.qq.com/open/js/jweixin-1.6.0.js\n\n如需进一步提升服务稳定性，当上述资源不可访问时，可改访问：http://res2.wx.qq.com/open/js/jweixin-1.6.0.js （支持 https）。\n\n## (2)通过 config 接口注入权限验证配置\n\n所有需要使用 JS-SDK 的页面必须先注入配置信息，否则将无法调用（同一个 url 仅需调用一次，对于变化 url 的 SPA 的 web app 可在每次 url 变化时进行调用,目前 Android 微信客户端不支持 pushState 的 H5 新特性，所以使用 pushState 来实现 web app 的页面会导致签名失败，此问题会在 Android6.2 中修复）。\n\n```js\nwx.config({\n  debug: true, // 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。\n  appId: '', // 必填，公众号的唯一标识\n  timestamp: , // 必填，生成签名的时间戳\n  nonceStr: '', // 必填，生成签名的随机串\n  signature: '',// 必填，签名\n  jsApiList: [] // 必填，需要使用的JS接口列表\n});\n```\n\n## (3)通过 ready 接口处理成功验证\n\n```js\nwx.ready(function() {\n  // config信息验证后会执行ready方法，所有接口调用都必须在config接口获得结果之后，config是一个客户端的异步操作，所以如果需要在页面加载时就调用相关接口，则须把相关接口放在ready函数中调用来确保正确执行。对于用户触发时才调用的接口，则可以直接调用，不需要放在ready函数中。\n});\n```\n\n## (4)通过 error 接口处理失败验证\n\nwx.error(function(res){\n// config 信息验证失败会执行 error 函数，如签名过期导致验证失败，具体错误信息可以打开 config 的 debug 模式查看，也可以在返回的 res 参数中查看，对于 SPA 可以在这里更新签名。\n});\n\n样例:\n\n```js\n//index.html\n//使用 fetch 获取接口数据\n//同时注意 webpack 没有编译 index.html,所以 es6 语法并不支持\n<script src=https://res2.wx.qq.com/open/js/jweixin-1.6.0.js></script>\n    <script>\n    //这里请求之前写好的后端接口,发送当前页面的 url\n    //url 必须使用window.location.href.split(\"#\")[0] 获取\n    var wxshareAuthAddress = \"https://example.com:3001?url2=\" + encodeURIComponent(window.location.href.split(\"#\")[0]);\n    fetch(wxshareAuthAddress)\n      .then(res => {\n        res.json().then(res => {\n    //根据获取到的结果验证权限\n          wx.config({\n            debug: false,\n            appId: res.data.appId,\n            timestamp: res.data.timestamp,\n            nonceStr: res.data.nonceStr,\n            signature: res.data.signature,\n            jsApiList: [\"updateTimelineShareData\", \"updateAppMessageShareData\"] // 必填，需要使用的JS接口列表\n          });\n    //验证成功以后出发的方法\n          wx.ready(function(res) {\n            console.log(\"ready\");\n    //updateAppMessageShareData是分享到微信消息的api\n            wx.updateAppMessageShareData({\n              title: \"\", // 分享标题\n              desc: \"\", // 分享描述\n              link: \"/\", // 分享链接，该链接域名或路径必须与当前页面对应的公众号JS安全域名一致\n              imgUrl: \"\", // 分享图标\n              success: function() {\n                // 设置成功\n                console.log(\"设置发送给微信好友消息成功\");\n              }\n            });\n            // console.log(res);\n            // config信息验证后会执行ready方法，所有接口调用都必须在config接口获得结果之后，config是一个客户端的异步操作，所以如果需要在页面加载时就调用相关接口，则须把相关接口放在ready函数中调用来确保正确执行。对于用户触发时才调用的接口，则可以直接调用，不需要放在ready函数中。\n\n            //分享到朋友圈设置的 api\n            wx.updateTimelineShareData({\n              title: \"\", // 分享标题\n              link: \"\", // 分享链接，该链接域名或路径必须与当前页面对应的公众号JS安全域名一致\n              imgUrl: \"\", // 分享图标\n              success: function(res) {\n                // 设置成功\n                console.log(\"设置朋友圈分享成功\");\n              }\n            });\n            // wx.showMenuItems({\n            //   menuList: [\"menuItem:readMode\", \"menuItem:share:facebook\"] // 要显示的菜单项，所有menu项见附录3\n            // });\n          });\n          wx.error(function(res) {\n            console.log(\"error\" + res);\n            // config信息验证失败会执行error函数，如签名过期导致验证失败，具体错误信息可以打开config的debug模式查看，也可以在返回的res参数中查看，对于SPA可以在这里更新签名。\n          });\n        });\n      })\n      .catch(err => {\n        console.log(err);\n      });</script>\n```\n\n# 7 问题汇总\n\n## 运维\n\n### https\n\n注意接口一定要添加 https,而且绑定域名.\n如果不绑定域名,使用 https://ip这样的形式,使用微信开发者工具调试时接口不会报错,但是在手机端会拦截请求.\n证书可以到阿里云上申请,域名可以到 freedom 申请免费域名,然后在 dnspod 添加域名解析以及证书与域名的绑定关系;\n\n![WX20200121-120951@2x.png](https://i.loli.net/2020/01/21/9YUG2OxMAKPz81w.png)\n\n### 部署服务\n\n我使用了 docker 部署了服务,这样可以免去配置环境等问题.\n\n```sh\n# Dockerfile\nFROM node\nRUN mkdir -p /home/Service\nWORKDIR /home/Service\nCOPY . /home/Service\nRUN npm install\nEXPOSE 3000\nEXPOSE 3001\nCMD node ./serve.js\n ## 如果想运行多条指令可以这样：\n## CMD git pull && npm install && npm start\n```\n\n### 暴露端口\n\n部署在阿里云上的主机记得开放端口方便外部访问:\n![WX20200121-120715@2x.png](https://i.loli.net/2020/01/21/7QCLpaMv5HBNszO.png)\n\n## 前端开发\n\n### invalid signature\n\n#### 1.url\n绝大多数`invalid signature`问题的原因都是 url 的问题,\nurl 必须与之前填入的 js 安全域名相同.\n\n确保 url 是动态生成的,同时一定要使用 `encodeUrlComponent`编码!!!\n\n```js\nencodeURIComponent(window.location.href.split(\"#\")[0]);\n```\n\n#### 2.确保签名算法无误\n\n签名生成规则如下：\n\n参与签名的字段包括有效的 jsapi_ticket（获取方式详见微信 JSSDK 文档）， noncestr （随机字符串，由开发者随机生成），timestamp （由开发者生成的当前时间戳）， url（当前网页的URL，不包含#及其后面部分。注意：对于没有只有域名没有 path 的 URL ，浏览器会自动加上 / 作为 path，如打开 http://qq.com 则获取到的 URL 为 http://qq.com/）。\n对所有待签名参数按照字段名的 ASCII 码从小到大排序（字典序）后，使用 URL 键值对的格式（即key1=value1&key2=value2…）拼接成字符串 string1。这里需要注意的是所有参数名均为小写字符。\n接下来对 string1 作 sha1 加密，字段名和字段值都采用原始值，不进行 URL 转义。即 signature=sha1(string1)。\n\n\n## 后端开发\n\n### api 调用限制\n\n微信对 access_token 以及 ticket 的获取有每日调用次数的限制,对于稍大的项目就需要考虑缓存 ticket(ticket 的有效期是 7200s),这一点微信文档中有详细的说明.\n\n### 安全相关\nappid 和 screct 不能轻易泄露,返回给前端的数据中需要传 appid.\n","source":"_posts/2020.01.21.wxjssdk.md","raw":"---\ntitle: 微信 jssdk 踩坑实录(nodejs实现后台)\ntags: [wechat, nodejs]\ncategories: 随笔\n---\n\n# 1\n\n最近做 H5 有一个需求,要在网页链接分享到微信好友的显示描述和自定义缩略图,并在分享到朋友圈的时候显示缩略图.开始我觉得这是一个很简单的需求,应该在网页上配置一下就好了,后来才发现自己的真的是 too young,我花了一天半的时间来处理这个问题,最终得到了完美的解决,这里我记录下自己的踩坑经历,以便日后查阅.\n\n# 2\n\n微信官方是这么说的:\n\n> 为规范自定义分享链接功能在网页上的使用，自 2017 年 4 月 25 日起，JSSDK“分享到朋友圈”及“发送给朋友”接口，自定义的分享链接，其域名或路径必须与当前页面对应的公众号 JS 安全域名一致，否则将调用失败。例如，当前页面是 http://www.abc.com/123，其公众号对应的JS安全域名为 www.abc.com 以及 www.xyz.com，则分享自定义链接 http://www.abc.com/456 可以成功，分享 http://www.xyz.com/123 或 http://www.def.com/123 均将失败。对于未接入微信 JSSDK 或已接入但 JSSDK 调用失败的网页，被用户分享时，分享卡片将统一使用默认缩略图和标题简介，不允许自定义。\n\n意思是如果要自定义缩略图和简介,我们就需要接入微信的 [jssdk](https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html#2).好,那我们现在就开始接入辣鸡微信的 jssdk.\n\n微信文档地址:https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html#2\n\n# 3.准备工作\n\n如果要接入微信的 jssdk,必要条件如下,如果缺少其中任意一个,就不用继续看下去了,因为不能接入 jssdk:\n\n- 一个认证了的微信公众号(需要公众号的 appid 和 screct)\n- 一个已经备案的域名\n\n可选的配置:\n\n- 后台开发语言(这里我选用了 nodejs).\n- js 安全域名(要求 80/443 端口),这个后面还会提到.\n- ssl 证书(用于添加 https,这里推荐用 https,防劫持这样的有点就不说了,还有一个很重要的原因就是:如果不是 https 的话,使用微信浏览页面会有一个 confirm 安全的页面,确认以后虽然可以进入 h5,但是在 ios 下底部会有一个难看的导航栏,十分影响体验)\n\n# 4.微信公众号配置\n\n## (1)ip 白名单配置\n\nip 白名单主要是用于后端根据 appid 和 screct 获取 access_token,只有在白名单中的 ip 才可以访问微信的官方接口.\n![WX20200121-093121@2x.png](https://i.loli.net/2020/01/21/9Il3jxBwF5edG6r.png)\n\n## (2)添加 js 安全域名\n\n![](https://i.loli.net/2020/01/21/dvEwPeDUXmhLNf9.png)\n需要注意的是:\n\n- 安全域名最多只能填写三个,而且一个月内最多可以修改并保存三次.\n- 和上面提到的一样,这个域名必须是备案过的;\n- 需要下载微信提供的 txt 验证文件上传到 web 服务器网页的路径下,例如:我使用 vue(webpack)打包的文件在 https://example.com/nh 下,那么这个文件也存放在这个路径下,确保微信可以虎获取到这个文件就可以,因为如果获取不到是无法添加域名的.(这一步其实是为了限制一个认证公众号可以绑定的域名数量)\n\n# 5 后端服务开发(使用 nodejs)\n\n使用 koa 框架:\n\n```js\nvar http = require(\"http\");\nvar https = require(\"https\");\nvar fs = require(\"fs\");\n\nconst Koa = require(\"koa\");\n\n//使用 axios 向微信服务器发起请求\nconst axios = require(\"axios\");\n\nconst app = new Koa();\nconst cors = require(\"koa-cors\");\nconst utils = require(\"./utils/utils\");\n\n//config 中包含微信公众号的 appid 和 screct\n//这两条数据很重要,不能泄露\nconst config = require(\"./config/config\");\n\n//引入微信 jssdk校验代码\n//微信开发者文档中中包含了python/java/php/nodejs 的代码\n//这里我选择了 nodejs 的生成签名的包\nvar sign = require(\"./sign.js\");\n\n//这里是从阿里云申请的免费 ssl 证书,方便为接口添加 https\nvar options = {\n  key: fs.readFileSync(\"./https/3400951_wxshare.cf.key\"), //ssl文件路径\n  cert: fs.readFileSync(\"./https/3400951_wxshare.cf.pem\") //ssl文件路径\n};\n//添加跨域相关信息\napp.use(\n  cors({\n    origin: function() {\n      return \"*\";\n    },\n    exposeHeaders: [\"WWW-Authenticate\", \"Server-Authorization\"],\n    maxAge: 5,\n    credentials: true,\n    allowMethods: [\"GET\", \"POST\"],\n    allowHeaders: [\"Content-Type\", \"Authorization\", \"Accept\"]\n  })\n);\napp.use(async ctx => {\n  if (ctx.request.query.url2) {\n    //根据公众号的 appid和 screct 获取 access_token\n    let [err, data] = await utils.awaitWrap(\n      axios.get(\n        `https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=${config.config.appId}&secret=${config.config.secret}`\n      )\n    );\n    if (err) {\n      return utils.res(ctx, 1001, \"查询 access-token 失败\");\n    } else {\n      if (data.data.access_token) {\n        //根据 access_token 换取 ticket\n        let [err2, data2] = await utils.awaitWrap(\n          axios.get(\n            `https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=${data.data.access_token}&type=jsapi`\n          )\n        );\n        if (err2) {\n          return utils.res(ctx, 1002, \"查询 ticket 失败\");\n        } else {\n          //根据 ticket 以及前端传过来的 url,生成signature等若干信息返回给前端进行 jssdk 验证.\n          let signature = sign(\n            data2.data.ticket,\n            decodeURIComponent(ctx.request.query.url2)\n          );\n          signature.appId = config.config.appId;\n          console.log(signature);\n          //返回给前端\n          return utils.res(ctx, 200, \"success\", signature);\n        }\n      } else {\n        return utils.res(ctx, 1001, data.data.errmsg);\n      }\n    }\n  } else {\n    return utils.res(ctx, 1003, \"没有参数\");\n  }\n});\n//创建http服务并监听 80 端口\n//创建 https 服务并监听 443 端口\nhttp.createServer(app.callback()).listen(3000);\nhttps.createServer(options, app.callback()).listen(3001);\n```\n\n需要注意的事项:\n\n- 1.微信获取 access_token 和 ticket 的接口是有访问频率限制的,据称是每天 2000 次.\n\n> 生成签名之前必须先了解一下 jsapi_ticket，jsapi_ticket 是公众号用于调用微信 JS 接口的临时票据。正常情况下，jsapi_ticket 的有效期为 7200 秒，通过 access_token 来获取。由于获取 jsapi_ticket 的 api 调用次数非常有限，频繁刷新 jsapi_ticket 会导致 api 调用受限，影响自身业务，开发者必须在自己的服务全局缓存 jsapi_ticket 。参考以下文档获取 access_token（有效期 7200 秒，开发者必须在自己的服务全局缓存 access_token）：https://developers.weixin.qq.com/doc/offiaccount/Basic_Information/Get_access_token.html用第一步拿到的access_token 采用 http GET 方式请求获得 jsapi_ticket（有效期 7200 秒，开发者必须在自己的服务全局缓存 jsapi_ticket）：https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=ACCESS_TOKEN&type=jsapi\n\n- 2.签名算法\n  > 签名生成规则如下：参与签名的字段包括 noncestr（随机字符串）, 有效的 jsapi_ticket, timestamp（时间戳）, url（当前网页的 URL，不包含#及其后面部分） 。对所有待签名参数按照字段名的 ASCII 码从小到大排序（字典序）后，使用 URL 键值对的格式（即 key1=value1&key2=value2…）拼接成字符串 string1。这里需要注意的是所有参数名均为小写字符。对 string1 作 sha1 加密，字段名和字段值都采用原始值，不进行 URL 转义。即 signature=sha1(string1)。\n\n这里我直接用了微信给的 example 中的代码:\n\n```js\n//sign.js\nvar createNonceStr = function() {\n  return Math.random()\n    .toString(36)\n    .substr(2, 15);\n};\n\nvar createTimestamp = function() {\n  return parseInt(new Date().getTime() / 1000) + \"\";\n};\n\nvar raw = function(args) {\n  var keys = Object.keys(args);\n  keys = keys.sort();\n  var newArgs = {};\n  keys.forEach(function(key) {\n    newArgs[key.toLowerCase()] = args[key];\n  });\n\n  var string = \"\";\n  for (var k in newArgs) {\n    string += \"&\" + k + \"=\" + newArgs[k];\n  }\n  string = string.substr(1);\n  return string;\n};\n\n/**\n * @synopsis 签名算法\n *\n * @param jsapi_ticket 用于签名的 jsapi_ticket\n * @param url 用于签名的 url ，注意必须动态获取，不能 hardcode\n *\n * @returns\n */\nvar sign = function(jsapi_ticket, url) {\n  var ret = {\n    jsapi_ticket: jsapi_ticket,\n    nonceStr: createNonceStr(),\n    timestamp: createTimestamp(),\n    url: url\n  };\n  var string = raw(ret);\n  jsSHA = require(\"jssha\");\n  shaObj = new jsSHA(string, \"TEXT\");\n  ret.signature = shaObj.getHash(\"SHA-1\", \"HEX\");\n\n  return ret;\n};\n\nmodule.exports = sign;\n```\n\n可以在这里验证生成微信签名的正确性:http://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=jsapisign\n\n# 6.前端开发\n\n## (1) 引入 JS 文件\n\n在需要调用 JS 接口的页面引入如下 JS 文件，（支持 https）：http://res.wx.qq.com/open/js/jweixin-1.6.0.js\n\n如需进一步提升服务稳定性，当上述资源不可访问时，可改访问：http://res2.wx.qq.com/open/js/jweixin-1.6.0.js （支持 https）。\n\n## (2)通过 config 接口注入权限验证配置\n\n所有需要使用 JS-SDK 的页面必须先注入配置信息，否则将无法调用（同一个 url 仅需调用一次，对于变化 url 的 SPA 的 web app 可在每次 url 变化时进行调用,目前 Android 微信客户端不支持 pushState 的 H5 新特性，所以使用 pushState 来实现 web app 的页面会导致签名失败，此问题会在 Android6.2 中修复）。\n\n```js\nwx.config({\n  debug: true, // 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。\n  appId: '', // 必填，公众号的唯一标识\n  timestamp: , // 必填，生成签名的时间戳\n  nonceStr: '', // 必填，生成签名的随机串\n  signature: '',// 必填，签名\n  jsApiList: [] // 必填，需要使用的JS接口列表\n});\n```\n\n## (3)通过 ready 接口处理成功验证\n\n```js\nwx.ready(function() {\n  // config信息验证后会执行ready方法，所有接口调用都必须在config接口获得结果之后，config是一个客户端的异步操作，所以如果需要在页面加载时就调用相关接口，则须把相关接口放在ready函数中调用来确保正确执行。对于用户触发时才调用的接口，则可以直接调用，不需要放在ready函数中。\n});\n```\n\n## (4)通过 error 接口处理失败验证\n\nwx.error(function(res){\n// config 信息验证失败会执行 error 函数，如签名过期导致验证失败，具体错误信息可以打开 config 的 debug 模式查看，也可以在返回的 res 参数中查看，对于 SPA 可以在这里更新签名。\n});\n\n样例:\n\n```js\n//index.html\n//使用 fetch 获取接口数据\n//同时注意 webpack 没有编译 index.html,所以 es6 语法并不支持\n<script src=https://res2.wx.qq.com/open/js/jweixin-1.6.0.js></script>\n    <script>\n    //这里请求之前写好的后端接口,发送当前页面的 url\n    //url 必须使用window.location.href.split(\"#\")[0] 获取\n    var wxshareAuthAddress = \"https://example.com:3001?url2=\" + encodeURIComponent(window.location.href.split(\"#\")[0]);\n    fetch(wxshareAuthAddress)\n      .then(res => {\n        res.json().then(res => {\n    //根据获取到的结果验证权限\n          wx.config({\n            debug: false,\n            appId: res.data.appId,\n            timestamp: res.data.timestamp,\n            nonceStr: res.data.nonceStr,\n            signature: res.data.signature,\n            jsApiList: [\"updateTimelineShareData\", \"updateAppMessageShareData\"] // 必填，需要使用的JS接口列表\n          });\n    //验证成功以后出发的方法\n          wx.ready(function(res) {\n            console.log(\"ready\");\n    //updateAppMessageShareData是分享到微信消息的api\n            wx.updateAppMessageShareData({\n              title: \"\", // 分享标题\n              desc: \"\", // 分享描述\n              link: \"/\", // 分享链接，该链接域名或路径必须与当前页面对应的公众号JS安全域名一致\n              imgUrl: \"\", // 分享图标\n              success: function() {\n                // 设置成功\n                console.log(\"设置发送给微信好友消息成功\");\n              }\n            });\n            // console.log(res);\n            // config信息验证后会执行ready方法，所有接口调用都必须在config接口获得结果之后，config是一个客户端的异步操作，所以如果需要在页面加载时就调用相关接口，则须把相关接口放在ready函数中调用来确保正确执行。对于用户触发时才调用的接口，则可以直接调用，不需要放在ready函数中。\n\n            //分享到朋友圈设置的 api\n            wx.updateTimelineShareData({\n              title: \"\", // 分享标题\n              link: \"\", // 分享链接，该链接域名或路径必须与当前页面对应的公众号JS安全域名一致\n              imgUrl: \"\", // 分享图标\n              success: function(res) {\n                // 设置成功\n                console.log(\"设置朋友圈分享成功\");\n              }\n            });\n            // wx.showMenuItems({\n            //   menuList: [\"menuItem:readMode\", \"menuItem:share:facebook\"] // 要显示的菜单项，所有menu项见附录3\n            // });\n          });\n          wx.error(function(res) {\n            console.log(\"error\" + res);\n            // config信息验证失败会执行error函数，如签名过期导致验证失败，具体错误信息可以打开config的debug模式查看，也可以在返回的res参数中查看，对于SPA可以在这里更新签名。\n          });\n        });\n      })\n      .catch(err => {\n        console.log(err);\n      });</script>\n```\n\n# 7 问题汇总\n\n## 运维\n\n### https\n\n注意接口一定要添加 https,而且绑定域名.\n如果不绑定域名,使用 https://ip这样的形式,使用微信开发者工具调试时接口不会报错,但是在手机端会拦截请求.\n证书可以到阿里云上申请,域名可以到 freedom 申请免费域名,然后在 dnspod 添加域名解析以及证书与域名的绑定关系;\n\n![WX20200121-120951@2x.png](https://i.loli.net/2020/01/21/9YUG2OxMAKPz81w.png)\n\n### 部署服务\n\n我使用了 docker 部署了服务,这样可以免去配置环境等问题.\n\n```sh\n# Dockerfile\nFROM node\nRUN mkdir -p /home/Service\nWORKDIR /home/Service\nCOPY . /home/Service\nRUN npm install\nEXPOSE 3000\nEXPOSE 3001\nCMD node ./serve.js\n ## 如果想运行多条指令可以这样：\n## CMD git pull && npm install && npm start\n```\n\n### 暴露端口\n\n部署在阿里云上的主机记得开放端口方便外部访问:\n![WX20200121-120715@2x.png](https://i.loli.net/2020/01/21/7QCLpaMv5HBNszO.png)\n\n## 前端开发\n\n### invalid signature\n\n#### 1.url\n绝大多数`invalid signature`问题的原因都是 url 的问题,\nurl 必须与之前填入的 js 安全域名相同.\n\n确保 url 是动态生成的,同时一定要使用 `encodeUrlComponent`编码!!!\n\n```js\nencodeURIComponent(window.location.href.split(\"#\")[0]);\n```\n\n#### 2.确保签名算法无误\n\n签名生成规则如下：\n\n参与签名的字段包括有效的 jsapi_ticket（获取方式详见微信 JSSDK 文档）， noncestr （随机字符串，由开发者随机生成），timestamp （由开发者生成的当前时间戳）， url（当前网页的URL，不包含#及其后面部分。注意：对于没有只有域名没有 path 的 URL ，浏览器会自动加上 / 作为 path，如打开 http://qq.com 则获取到的 URL 为 http://qq.com/）。\n对所有待签名参数按照字段名的 ASCII 码从小到大排序（字典序）后，使用 URL 键值对的格式（即key1=value1&key2=value2…）拼接成字符串 string1。这里需要注意的是所有参数名均为小写字符。\n接下来对 string1 作 sha1 加密，字段名和字段值都采用原始值，不进行 URL 转义。即 signature=sha1(string1)。\n\n\n## 后端开发\n\n### api 调用限制\n\n微信对 access_token 以及 ticket 的获取有每日调用次数的限制,对于稍大的项目就需要考虑缓存 ticket(ticket 的有效期是 7200s),这一点微信文档中有详细的说明.\n\n### 安全相关\nappid 和 screct 不能轻易泄露,返回给前端的数据中需要传 appid.\n","slug":"2020.01.21.wxjssdk","published":1,"date":"2020-01-21T01:09:49.770Z","updated":"2020-01-21T04:18:54.999Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziiqk001zrh9zgfxg3jkb","content":"<h1 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h1><p>最近做 H5 有一个需求,要在网页链接分享到微信好友的显示描述和自定义缩略图,并在分享到朋友圈的时候显示缩略图.开始我觉得这是一个很简单的需求,应该在网页上配置一下就好了,后来才发现自己的真的是 too young,我花了一天半的时间来处理这个问题,最终得到了完美的解决,这里我记录下自己的踩坑经历,以便日后查阅.</p>\n<h1 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h1><p>微信官方是这么说的:</p>\n<blockquote>\n<p>为规范自定义分享链接功能在网页上的使用，自 2017 年 4 月 25 日起，JSSDK“分享到朋友圈”及“发送给朋友”接口，自定义的分享链接，其域名或路径必须与当前页面对应的公众号 JS 安全域名一致，否则将调用失败。例如，当前页面是 <a href=\"http://www.abc.com/123，其公众号对应的JS安全域名为\" target=\"_blank\" rel=\"noopener\">http://www.abc.com/123，其公众号对应的JS安全域名为</a> www.abc.com 以及 www.xyz.com，则分享自定义链接 <a href=\"http://www.abc.com/456\" target=\"_blank\" rel=\"noopener\">http://www.abc.com/456</a> 可以成功，分享 <a href=\"http://www.xyz.com/123\" target=\"_blank\" rel=\"noopener\">http://www.xyz.com/123</a> 或 <a href=\"http://www.def.com/123\" target=\"_blank\" rel=\"noopener\">http://www.def.com/123</a> 均将失败。对于未接入微信 JSSDK 或已接入但 JSSDK 调用失败的网页，被用户分享时，分享卡片将统一使用默认缩略图和标题简介，不允许自定义。</p>\n</blockquote>\n<p>意思是如果要自定义缩略图和简介,我们就需要接入微信的 <a href=\"https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html#2\" target=\"_blank\" rel=\"noopener\">jssdk</a>.好,那我们现在就开始接入辣鸡微信的 jssdk.</p>\n<p>微信文档地址:<a href=\"https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html#2\" target=\"_blank\" rel=\"noopener\">https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html#2</a></p>\n<h1 id=\"3-准备工作\"><a href=\"#3-准备工作\" class=\"headerlink\" title=\"3.准备工作\"></a>3.准备工作</h1><p>如果要接入微信的 jssdk,必要条件如下,如果缺少其中任意一个,就不用继续看下去了,因为不能接入 jssdk:</p>\n<ul>\n<li>一个认证了的微信公众号(需要公众号的 appid 和 screct)</li>\n<li>一个已经备案的域名</li>\n</ul>\n<p>可选的配置:</p>\n<ul>\n<li>后台开发语言(这里我选用了 nodejs).</li>\n<li>js 安全域名(要求 80/443 端口),这个后面还会提到.</li>\n<li>ssl 证书(用于添加 https,这里推荐用 https,防劫持这样的有点就不说了,还有一个很重要的原因就是:如果不是 https 的话,使用微信浏览页面会有一个 confirm 安全的页面,确认以后虽然可以进入 h5,但是在 ios 下底部会有一个难看的导航栏,十分影响体验)</li>\n</ul>\n<h1 id=\"4-微信公众号配置\"><a href=\"#4-微信公众号配置\" class=\"headerlink\" title=\"4.微信公众号配置\"></a>4.微信公众号配置</h1><h2 id=\"1-ip-白名单配置\"><a href=\"#1-ip-白名单配置\" class=\"headerlink\" title=\"(1)ip 白名单配置\"></a>(1)ip 白名单配置</h2><p>ip 白名单主要是用于后端根据 appid 和 screct 获取 access_token,只有在白名单中的 ip 才可以访问微信的官方接口.<br><img src=\"https://i.loli.net/2020/01/21/9Il3jxBwF5edG6r.png\" alt=\"WX20200121-093121@2x.png\"></p>\n<h2 id=\"2-添加-js-安全域名\"><a href=\"#2-添加-js-安全域名\" class=\"headerlink\" title=\"(2)添加 js 安全域名\"></a>(2)添加 js 安全域名</h2><p><img src=\"https://i.loli.net/2020/01/21/dvEwPeDUXmhLNf9.png\" alt=\"\"><br>需要注意的是:</p>\n<ul>\n<li>安全域名最多只能填写三个,而且一个月内最多可以修改并保存三次.</li>\n<li>和上面提到的一样,这个域名必须是备案过的;</li>\n<li>需要下载微信提供的 txt 验证文件上传到 web 服务器网页的路径下,例如:我使用 vue(webpack)打包的文件在 <a href=\"https://example.com/nh\" target=\"_blank\" rel=\"noopener\">https://example.com/nh</a> 下,那么这个文件也存放在这个路径下,确保微信可以虎获取到这个文件就可以,因为如果获取不到是无法添加域名的.(这一步其实是为了限制一个认证公众号可以绑定的域名数量)</li>\n</ul>\n<h1 id=\"5-后端服务开发-使用-nodejs\"><a href=\"#5-后端服务开发-使用-nodejs\" class=\"headerlink\" title=\"5 后端服务开发(使用 nodejs)\"></a>5 后端服务开发(使用 nodejs)</h1><p>使用 koa 框架:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> https = <span class=\"built_in\">require</span>(<span class=\"string\">\"https\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>(<span class=\"string\">\"koa\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用 axios 向微信服务器发起请求</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> axios = <span class=\"built_in\">require</span>(<span class=\"string\">\"axios\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa();</span><br><span class=\"line\"><span class=\"keyword\">const</span> cors = <span class=\"built_in\">require</span>(<span class=\"string\">\"koa-cors\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> utils = <span class=\"built_in\">require</span>(<span class=\"string\">\"./utils/utils\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//config 中包含微信公众号的 appid 和 screct</span></span><br><span class=\"line\"><span class=\"comment\">//这两条数据很重要,不能泄露</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">\"./config/config\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//引入微信 jssdk校验代码</span></span><br><span class=\"line\"><span class=\"comment\">//微信开发者文档中中包含了python/java/php/nodejs 的代码</span></span><br><span class=\"line\"><span class=\"comment\">//这里我选择了 nodejs 的生成签名的包</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sign = <span class=\"built_in\">require</span>(<span class=\"string\">\"./sign.js\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这里是从阿里云申请的免费 ssl 证书,方便为接口添加 https</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> options = &#123;</span><br><span class=\"line\">  key: fs.readFileSync(<span class=\"string\">\"./https/3400951_wxshare.cf.key\"</span>), <span class=\"comment\">//ssl文件路径</span></span><br><span class=\"line\">  cert: fs.readFileSync(<span class=\"string\">\"./https/3400951_wxshare.cf.pem\"</span>) <span class=\"comment\">//ssl文件路径</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//添加跨域相关信息</span></span><br><span class=\"line\">app.use(</span><br><span class=\"line\">  cors(&#123;</span><br><span class=\"line\">    origin: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">\"*\"</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    exposeHeaders: [<span class=\"string\">\"WWW-Authenticate\"</span>, <span class=\"string\">\"Server-Authorization\"</span>],</span><br><span class=\"line\">    maxAge: <span class=\"number\">5</span>,</span><br><span class=\"line\">    credentials: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    allowMethods: [<span class=\"string\">\"GET\"</span>, <span class=\"string\">\"POST\"</span>],</span><br><span class=\"line\">    allowHeaders: [<span class=\"string\">\"Content-Type\"</span>, <span class=\"string\">\"Authorization\"</span>, <span class=\"string\">\"Accept\"</span>]</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">);</span><br><span class=\"line\">app.use(<span class=\"keyword\">async</span> ctx =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ctx.request.query.url2) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//根据公众号的 appid和 screct 获取 access_token</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> [err, data] = <span class=\"keyword\">await</span> utils.awaitWrap(</span><br><span class=\"line\">      axios.get(</span><br><span class=\"line\">        <span class=\"string\">`https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=<span class=\"subst\">$&#123;config.config.appId&#125;</span>&amp;secret=<span class=\"subst\">$&#123;config.config.secret&#125;</span>`</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> utils.res(ctx, <span class=\"number\">1001</span>, <span class=\"string\">\"查询 access-token 失败\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (data.data.access_token) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//根据 access_token 换取 ticket</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> [err2, data2] = <span class=\"keyword\">await</span> utils.awaitWrap(</span><br><span class=\"line\">          axios.get(</span><br><span class=\"line\">            <span class=\"string\">`https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=<span class=\"subst\">$&#123;data.data.access_token&#125;</span>&amp;type=jsapi`</span></span><br><span class=\"line\">          )</span><br><span class=\"line\">        );</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err2) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> utils.res(ctx, <span class=\"number\">1002</span>, <span class=\"string\">\"查询 ticket 失败\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">//根据 ticket 以及前端传过来的 url,生成signature等若干信息返回给前端进行 jssdk 验证.</span></span><br><span class=\"line\">          <span class=\"keyword\">let</span> signature = sign(</span><br><span class=\"line\">            data2.data.ticket,</span><br><span class=\"line\">            <span class=\"built_in\">decodeURIComponent</span>(ctx.request.query.url2)</span><br><span class=\"line\">          );</span><br><span class=\"line\">          signature.appId = config.config.appId;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(signature);</span><br><span class=\"line\">          <span class=\"comment\">//返回给前端</span></span><br><span class=\"line\">          <span class=\"keyword\">return</span> utils.res(ctx, <span class=\"number\">200</span>, <span class=\"string\">\"success\"</span>, signature);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> utils.res(ctx, <span class=\"number\">1001</span>, data.data.errmsg);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> utils.res(ctx, <span class=\"number\">1003</span>, <span class=\"string\">\"没有参数\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//创建http服务并监听 80 端口</span></span><br><span class=\"line\"><span class=\"comment\">//创建 https 服务并监听 443 端口</span></span><br><span class=\"line\">http.createServer(app.callback()).listen(<span class=\"number\">3000</span>);</span><br><span class=\"line\">https.createServer(options, app.callback()).listen(<span class=\"number\">3001</span>);</span><br></pre></td></tr></table></figure>\n<p>需要注意的事项:</p>\n<ul>\n<li>1.微信获取 access_token 和 ticket 的接口是有访问频率限制的,据称是每天 2000 次.</li>\n</ul>\n<blockquote>\n<p>生成签名之前必须先了解一下 jsapi_ticket，jsapi_ticket 是公众号用于调用微信 JS 接口的临时票据。正常情况下，jsapi_ticket 的有效期为 7200 秒，通过 access_token 来获取。由于获取 jsapi_ticket 的 api 调用次数非常有限，频繁刷新 jsapi_ticket 会导致 api 调用受限，影响自身业务，开发者必须在自己的服务全局缓存 jsapi_ticket 。参考以下文档获取 access_token（有效期 7200 秒，开发者必须在自己的服务全局缓存 access_token）：<a href=\"https://developers.weixin.qq.com/doc/offiaccount/Basic_Information/Get_access_token.html用第一步拿到的access_token\" target=\"_blank\" rel=\"noopener\">https://developers.weixin.qq.com/doc/offiaccount/Basic_Information/Get_access_token.html用第一步拿到的access_token</a> 采用 http GET 方式请求获得 jsapi_ticket（有效期 7200 秒，开发者必须在自己的服务全局缓存 jsapi_ticket）：<a href=\"https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=ACCESS_TOKEN&amp;type=jsapi\" target=\"_blank\" rel=\"noopener\">https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=ACCESS_TOKEN&amp;type=jsapi</a></p>\n</blockquote>\n<ul>\n<li>2.签名算法<blockquote>\n<p>签名生成规则如下：参与签名的字段包括 noncestr（随机字符串）, 有效的 jsapi_ticket, timestamp（时间戳）, url（当前网页的 URL，不包含#及其后面部分） 。对所有待签名参数按照字段名的 ASCII 码从小到大排序（字典序）后，使用 URL 键值对的格式（即 key1=value1&amp;key2=value2…）拼接成字符串 string1。这里需要注意的是所有参数名均为小写字符。对 string1 作 sha1 加密，字段名和字段值都采用原始值，不进行 URL 转义。即 signature=sha1(string1)。</p>\n</blockquote>\n</li>\n</ul>\n<p>这里我直接用了微信给的 example 中的代码:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//sign.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> createNonceStr = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.random()</span><br><span class=\"line\">    .toString(<span class=\"number\">36</span>)</span><br><span class=\"line\">    .substr(<span class=\"number\">2</span>, <span class=\"number\">15</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> createTimestamp = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() / <span class=\"number\">1000</span>) + <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> raw = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> keys = <span class=\"built_in\">Object</span>.keys(args);</span><br><span class=\"line\">  keys = keys.sort();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> newArgs = &#123;&#125;;</span><br><span class=\"line\">  keys.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">    newArgs[key.toLowerCase()] = args[key];</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> string = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> newArgs) &#123;</span><br><span class=\"line\">    string += <span class=\"string\">\"&amp;\"</span> + k + <span class=\"string\">\"=\"</span> + newArgs[k];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  string = string.substr(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> string;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@synopsis </span>签名算法</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>jsapi_ticket 用于签名的 jsapi_ticket</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>url 用于签名的 url ，注意必须动态获取，不能 hardcode</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sign = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">jsapi_ticket, url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> ret = &#123;</span><br><span class=\"line\">    jsapi_ticket: jsapi_ticket,</span><br><span class=\"line\">    nonceStr: createNonceStr(),</span><br><span class=\"line\">    timestamp: createTimestamp(),</span><br><span class=\"line\">    url: url</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> string = raw(ret);</span><br><span class=\"line\">  jsSHA = <span class=\"built_in\">require</span>(<span class=\"string\">\"jssha\"</span>);</span><br><span class=\"line\">  shaObj = <span class=\"keyword\">new</span> jsSHA(string, <span class=\"string\">\"TEXT\"</span>);</span><br><span class=\"line\">  ret.signature = shaObj.getHash(<span class=\"string\">\"SHA-1\"</span>, <span class=\"string\">\"HEX\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = sign;</span><br></pre></td></tr></table></figure>\n<p>可以在这里验证生成微信签名的正确性:<a href=\"http://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=jsapisign\" target=\"_blank\" rel=\"noopener\">http://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=jsapisign</a></p>\n<h1 id=\"6-前端开发\"><a href=\"#6-前端开发\" class=\"headerlink\" title=\"6.前端开发\"></a>6.前端开发</h1><h2 id=\"1-引入-JS-文件\"><a href=\"#1-引入-JS-文件\" class=\"headerlink\" title=\"(1) 引入 JS 文件\"></a>(1) 引入 JS 文件</h2><p>在需要调用 JS 接口的页面引入如下 JS 文件，（支持 https）：<a href=\"http://res.wx.qq.com/open/js/jweixin-1.6.0.js\" target=\"_blank\" rel=\"noopener\">http://res.wx.qq.com/open/js/jweixin-1.6.0.js</a></p>\n<p>如需进一步提升服务稳定性，当上述资源不可访问时，可改访问：<a href=\"http://res2.wx.qq.com/open/js/jweixin-1.6.0.js\" target=\"_blank\" rel=\"noopener\">http://res2.wx.qq.com/open/js/jweixin-1.6.0.js</a> （支持 https）。</p>\n<h2 id=\"2-通过-config-接口注入权限验证配置\"><a href=\"#2-通过-config-接口注入权限验证配置\" class=\"headerlink\" title=\"(2)通过 config 接口注入权限验证配置\"></a>(2)通过 config 接口注入权限验证配置</h2><p>所有需要使用 JS-SDK 的页面必须先注入配置信息，否则将无法调用（同一个 url 仅需调用一次，对于变化 url 的 SPA 的 web app 可在每次 url 变化时进行调用,目前 Android 微信客户端不支持 pushState 的 H5 新特性，所以使用 pushState 来实现 web app 的页面会导致签名失败，此问题会在 Android6.2 中修复）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.config(&#123;</span><br><span class=\"line\">  debug: <span class=\"literal\">true</span>, <span class=\"comment\">// 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</span></span><br><span class=\"line\">  appId: <span class=\"string\">''</span>, <span class=\"comment\">// 必填，公众号的唯一标识</span></span><br><span class=\"line\">  timestamp: , <span class=\"comment\">// 必填，生成签名的时间戳</span></span><br><span class=\"line\">  nonceStr: <span class=\"string\">''</span>, <span class=\"comment\">// 必填，生成签名的随机串</span></span><br><span class=\"line\">  signature: <span class=\"string\">''</span>,<span class=\"comment\">// 必填，签名</span></span><br><span class=\"line\">  jsApiList: [] <span class=\"comment\">// 必填，需要使用的JS接口列表</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-通过-ready-接口处理成功验证\"><a href=\"#3-通过-ready-接口处理成功验证\" class=\"headerlink\" title=\"(3)通过 ready 接口处理成功验证\"></a>(3)通过 ready 接口处理成功验证</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// config信息验证后会执行ready方法，所有接口调用都必须在config接口获得结果之后，config是一个客户端的异步操作，所以如果需要在页面加载时就调用相关接口，则须把相关接口放在ready函数中调用来确保正确执行。对于用户触发时才调用的接口，则可以直接调用，不需要放在ready函数中。</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-通过-error-接口处理失败验证\"><a href=\"#4-通过-error-接口处理失败验证\" class=\"headerlink\" title=\"(4)通过 error 接口处理失败验证\"></a>(4)通过 error 接口处理失败验证</h2><p>wx.error(function(res){<br>// config 信息验证失败会执行 error 函数，如签名过期导致验证失败，具体错误信息可以打开 config 的 debug 模式查看，也可以在返回的 res 参数中查看，对于 SPA 可以在这里更新签名。<br>});</p>\n<p>样例:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//index.html</span></span><br><span class=\"line\"><span class=\"comment\">//使用 fetch 获取接口数据</span></span><br><span class=\"line\"><span class=\"comment\">//同时注意 webpack 没有编译 index.html,所以 es6 语法并不支持</span></span><br><span class=\"line\">&lt;script src=https:<span class=\"comment\">//res2.wx.qq.com/open/js/jweixin-1.6.0.js&gt;&lt;/script&gt;</span></span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">    <span class=\"comment\">//这里请求之前写好的后端接口,发送当前页面的 url</span></span><br><span class=\"line\">    <span class=\"comment\">//url 必须使用window.location.href.split(\"#\")[0] 获取</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> wxshareAuthAddress = <span class=\"string\">\"https://example.com:3001?url2=\"</span> + <span class=\"built_in\">encodeURIComponent</span>(<span class=\"built_in\">window</span>.location.href.split(<span class=\"string\">\"#\"</span>)[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    fetch(wxshareAuthAddress)</span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">        res.json().then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//根据获取到的结果验证权限</span></span><br><span class=\"line\">          wx.config(&#123;</span><br><span class=\"line\">            debug: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            appId: res.data.appId,</span><br><span class=\"line\">            timestamp: res.data.timestamp,</span><br><span class=\"line\">            nonceStr: res.data.nonceStr,</span><br><span class=\"line\">            signature: res.data.signature,</span><br><span class=\"line\">            jsApiList: [<span class=\"string\">\"updateTimelineShareData\"</span>, <span class=\"string\">\"updateAppMessageShareData\"</span>] <span class=\"comment\">// 必填，需要使用的JS接口列表</span></span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">    <span class=\"comment\">//验证成功以后出发的方法</span></span><br><span class=\"line\">          wx.ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ready\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//updateAppMessageShareData是分享到微信消息的api</span></span><br><span class=\"line\">            wx.updateAppMessageShareData(&#123;</span><br><span class=\"line\">              title: <span class=\"string\">\"\"</span>, <span class=\"comment\">// 分享标题</span></span><br><span class=\"line\">              desc: <span class=\"string\">\"\"</span>, <span class=\"comment\">// 分享描述</span></span><br><span class=\"line\">              link: <span class=\"string\">\"/\"</span>, <span class=\"comment\">// 分享链接，该链接域名或路径必须与当前页面对应的公众号JS安全域名一致</span></span><br><span class=\"line\">              imgUrl: <span class=\"string\">\"\"</span>, <span class=\"comment\">// 分享图标</span></span><br><span class=\"line\">              success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 设置成功</span></span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">\"设置发送给微信好友消息成功\"</span>);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"comment\">// console.log(res);</span></span><br><span class=\"line\">            <span class=\"comment\">// config信息验证后会执行ready方法，所有接口调用都必须在config接口获得结果之后，config是一个客户端的异步操作，所以如果需要在页面加载时就调用相关接口，则须把相关接口放在ready函数中调用来确保正确执行。对于用户触发时才调用的接口，则可以直接调用，不需要放在ready函数中。</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//分享到朋友圈设置的 api</span></span><br><span class=\"line\">            wx.updateTimelineShareData(&#123;</span><br><span class=\"line\">              title: <span class=\"string\">\"\"</span>, <span class=\"comment\">// 分享标题</span></span><br><span class=\"line\">              link: <span class=\"string\">\"\"</span>, <span class=\"comment\">// 分享链接，该链接域名或路径必须与当前页面对应的公众号JS安全域名一致</span></span><br><span class=\"line\">              imgUrl: <span class=\"string\">\"\"</span>, <span class=\"comment\">// 分享图标</span></span><br><span class=\"line\">              success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 设置成功</span></span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">\"设置朋友圈分享成功\"</span>);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"comment\">// wx.showMenuItems(&#123;</span></span><br><span class=\"line\">            <span class=\"comment\">//   menuList: [\"menuItem:readMode\", \"menuItem:share:facebook\"] // 要显示的菜单项，所有menu项见附录3</span></span><br><span class=\"line\">            <span class=\"comment\">// &#125;);</span></span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">          wx.error(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"error\"</span> + res);</span><br><span class=\"line\">            <span class=\"comment\">// config信息验证失败会执行error函数，如签名过期导致验证失败，具体错误信息可以打开config的debug模式查看，也可以在返回的res参数中查看，对于SPA可以在这里更新签名。</span></span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">      &#125;);&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"7-问题汇总\"><a href=\"#7-问题汇总\" class=\"headerlink\" title=\"7 问题汇总\"></a>7 问题汇总</h1><h2 id=\"运维\"><a href=\"#运维\" class=\"headerlink\" title=\"运维\"></a>运维</h2><h3 id=\"https\"><a href=\"#https\" class=\"headerlink\" title=\"https\"></a>https</h3><p>注意接口一定要添加 https,而且绑定域名.<br>如果不绑定域名,使用 <a href=\"https://ip这样的形式,使用微信开发者工具调试时接口不会报错,但是在手机端会拦截请求\" target=\"_blank\" rel=\"noopener\">https://ip这样的形式,使用微信开发者工具调试时接口不会报错,但是在手机端会拦截请求</a>.<br>证书可以到阿里云上申请,域名可以到 freedom 申请免费域名,然后在 dnspod 添加域名解析以及证书与域名的绑定关系;</p>\n<p><img src=\"https://i.loli.net/2020/01/21/9YUG2OxMAKPz81w.png\" alt=\"WX20200121-120951@2x.png\"></p>\n<h3 id=\"部署服务\"><a href=\"#部署服务\" class=\"headerlink\" title=\"部署服务\"></a>部署服务</h3><p>我使用了 docker 部署了服务,这样可以免去配置环境等问题.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Dockerfile</span></span><br><span class=\"line\">FROM node</span><br><span class=\"line\">RUN mkdir -p /home/Service</span><br><span class=\"line\">WORKDIR /home/Service</span><br><span class=\"line\">COPY . /home/Service</span><br><span class=\"line\">RUN npm install</span><br><span class=\"line\">EXPOSE 3000</span><br><span class=\"line\">EXPOSE 3001</span><br><span class=\"line\">CMD node ./serve.js</span><br><span class=\"line\"> <span class=\"comment\">## 如果想运行多条指令可以这样：</span></span><br><span class=\"line\"><span class=\"comment\">## CMD git pull &amp;&amp; npm install &amp;&amp; npm start</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"暴露端口\"><a href=\"#暴露端口\" class=\"headerlink\" title=\"暴露端口\"></a>暴露端口</h3><p>部署在阿里云上的主机记得开放端口方便外部访问:<br><img src=\"https://i.loli.net/2020/01/21/7QCLpaMv5HBNszO.png\" alt=\"WX20200121-120715@2x.png\"></p>\n<h2 id=\"前端开发\"><a href=\"#前端开发\" class=\"headerlink\" title=\"前端开发\"></a>前端开发</h2><h3 id=\"invalid-signature\"><a href=\"#invalid-signature\" class=\"headerlink\" title=\"invalid signature\"></a>invalid signature</h3><h4 id=\"1-url\"><a href=\"#1-url\" class=\"headerlink\" title=\"1.url\"></a>1.url</h4><p>绝大多数<code>invalid signature</code>问题的原因都是 url 的问题,<br>url 必须与之前填入的 js 安全域名相同.</p>\n<p>确保 url 是动态生成的,同时一定要使用 <code>encodeUrlComponent</code>编码!!!</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">encodeURIComponent</span>(<span class=\"built_in\">window</span>.location.href.split(<span class=\"string\">\"#\"</span>)[<span class=\"number\">0</span>]);</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-确保签名算法无误\"><a href=\"#2-确保签名算法无误\" class=\"headerlink\" title=\"2.确保签名算法无误\"></a>2.确保签名算法无误</h4><p>签名生成规则如下：</p>\n<p>参与签名的字段包括有效的 jsapi_ticket（获取方式详见微信 JSSDK 文档）， noncestr （随机字符串，由开发者随机生成），timestamp （由开发者生成的当前时间戳）， url（当前网页的URL，不包含#及其后面部分。注意：对于没有只有域名没有 path 的 URL ，浏览器会自动加上 / 作为 path，如打开 <a href=\"http://qq.com\" target=\"_blank\" rel=\"noopener\">http://qq.com</a> 则获取到的 URL 为 <a href=\"http://qq.com/）。\" target=\"_blank\" rel=\"noopener\">http://qq.com/）。</a><br>对所有待签名参数按照字段名的 ASCII 码从小到大排序（字典序）后，使用 URL 键值对的格式（即key1=value1&amp;key2=value2…）拼接成字符串 string1。这里需要注意的是所有参数名均为小写字符。<br>接下来对 string1 作 sha1 加密，字段名和字段值都采用原始值，不进行 URL 转义。即 signature=sha1(string1)。</p>\n<h2 id=\"后端开发\"><a href=\"#后端开发\" class=\"headerlink\" title=\"后端开发\"></a>后端开发</h2><h3 id=\"api-调用限制\"><a href=\"#api-调用限制\" class=\"headerlink\" title=\"api 调用限制\"></a>api 调用限制</h3><p>微信对 access_token 以及 ticket 的获取有每日调用次数的限制,对于稍大的项目就需要考虑缓存 ticket(ticket 的有效期是 7200s),这一点微信文档中有详细的说明.</p>\n<h3 id=\"安全相关\"><a href=\"#安全相关\" class=\"headerlink\" title=\"安全相关\"></a>安全相关</h3><p>appid 和 screct 不能轻易泄露,返回给前端的数据中需要传 appid.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h1><p>最近做 H5 有一个需求,要在网页链接分享到微信好友的显示描述和自定义缩略图,并在分享到朋友圈的时候显示缩略图.开始我觉得这是一个很简单的需求,应该在网页上配置一下就好了,后来才发现自己的真的是 too young,我花了一天半的时间来处理这个问题,最终得到了完美的解决,这里我记录下自己的踩坑经历,以便日后查阅.</p>\n<h1 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h1><p>微信官方是这么说的:</p>\n<blockquote>\n<p>为规范自定义分享链接功能在网页上的使用，自 2017 年 4 月 25 日起，JSSDK“分享到朋友圈”及“发送给朋友”接口，自定义的分享链接，其域名或路径必须与当前页面对应的公众号 JS 安全域名一致，否则将调用失败。例如，当前页面是 <a href=\"http://www.abc.com/123，其公众号对应的JS安全域名为\" target=\"_blank\" rel=\"noopener\">http://www.abc.com/123，其公众号对应的JS安全域名为</a> www.abc.com 以及 www.xyz.com，则分享自定义链接 <a href=\"http://www.abc.com/456\" target=\"_blank\" rel=\"noopener\">http://www.abc.com/456</a> 可以成功，分享 <a href=\"http://www.xyz.com/123\" target=\"_blank\" rel=\"noopener\">http://www.xyz.com/123</a> 或 <a href=\"http://www.def.com/123\" target=\"_blank\" rel=\"noopener\">http://www.def.com/123</a> 均将失败。对于未接入微信 JSSDK 或已接入但 JSSDK 调用失败的网页，被用户分享时，分享卡片将统一使用默认缩略图和标题简介，不允许自定义。</p>\n</blockquote>\n<p>意思是如果要自定义缩略图和简介,我们就需要接入微信的 <a href=\"https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html#2\" target=\"_blank\" rel=\"noopener\">jssdk</a>.好,那我们现在就开始接入辣鸡微信的 jssdk.</p>\n<p>微信文档地址:<a href=\"https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html#2\" target=\"_blank\" rel=\"noopener\">https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html#2</a></p>\n<h1 id=\"3-准备工作\"><a href=\"#3-准备工作\" class=\"headerlink\" title=\"3.准备工作\"></a>3.准备工作</h1><p>如果要接入微信的 jssdk,必要条件如下,如果缺少其中任意一个,就不用继续看下去了,因为不能接入 jssdk:</p>\n<ul>\n<li>一个认证了的微信公众号(需要公众号的 appid 和 screct)</li>\n<li>一个已经备案的域名</li>\n</ul>\n<p>可选的配置:</p>\n<ul>\n<li>后台开发语言(这里我选用了 nodejs).</li>\n<li>js 安全域名(要求 80/443 端口),这个后面还会提到.</li>\n<li>ssl 证书(用于添加 https,这里推荐用 https,防劫持这样的有点就不说了,还有一个很重要的原因就是:如果不是 https 的话,使用微信浏览页面会有一个 confirm 安全的页面,确认以后虽然可以进入 h5,但是在 ios 下底部会有一个难看的导航栏,十分影响体验)</li>\n</ul>\n<h1 id=\"4-微信公众号配置\"><a href=\"#4-微信公众号配置\" class=\"headerlink\" title=\"4.微信公众号配置\"></a>4.微信公众号配置</h1><h2 id=\"1-ip-白名单配置\"><a href=\"#1-ip-白名单配置\" class=\"headerlink\" title=\"(1)ip 白名单配置\"></a>(1)ip 白名单配置</h2><p>ip 白名单主要是用于后端根据 appid 和 screct 获取 access_token,只有在白名单中的 ip 才可以访问微信的官方接口.<br><img src=\"https://i.loli.net/2020/01/21/9Il3jxBwF5edG6r.png\" alt=\"WX20200121-093121@2x.png\"></p>\n<h2 id=\"2-添加-js-安全域名\"><a href=\"#2-添加-js-安全域名\" class=\"headerlink\" title=\"(2)添加 js 安全域名\"></a>(2)添加 js 安全域名</h2><p><img src=\"https://i.loli.net/2020/01/21/dvEwPeDUXmhLNf9.png\" alt=\"\"><br>需要注意的是:</p>\n<ul>\n<li>安全域名最多只能填写三个,而且一个月内最多可以修改并保存三次.</li>\n<li>和上面提到的一样,这个域名必须是备案过的;</li>\n<li>需要下载微信提供的 txt 验证文件上传到 web 服务器网页的路径下,例如:我使用 vue(webpack)打包的文件在 <a href=\"https://example.com/nh\" target=\"_blank\" rel=\"noopener\">https://example.com/nh</a> 下,那么这个文件也存放在这个路径下,确保微信可以虎获取到这个文件就可以,因为如果获取不到是无法添加域名的.(这一步其实是为了限制一个认证公众号可以绑定的域名数量)</li>\n</ul>\n<h1 id=\"5-后端服务开发-使用-nodejs\"><a href=\"#5-后端服务开发-使用-nodejs\" class=\"headerlink\" title=\"5 后端服务开发(使用 nodejs)\"></a>5 后端服务开发(使用 nodejs)</h1><p>使用 koa 框架:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> https = <span class=\"built_in\">require</span>(<span class=\"string\">\"https\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Koa = <span class=\"built_in\">require</span>(<span class=\"string\">\"koa\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用 axios 向微信服务器发起请求</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> axios = <span class=\"built_in\">require</span>(<span class=\"string\">\"axios\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Koa();</span><br><span class=\"line\"><span class=\"keyword\">const</span> cors = <span class=\"built_in\">require</span>(<span class=\"string\">\"koa-cors\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> utils = <span class=\"built_in\">require</span>(<span class=\"string\">\"./utils/utils\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//config 中包含微信公众号的 appid 和 screct</span></span><br><span class=\"line\"><span class=\"comment\">//这两条数据很重要,不能泄露</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> config = <span class=\"built_in\">require</span>(<span class=\"string\">\"./config/config\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//引入微信 jssdk校验代码</span></span><br><span class=\"line\"><span class=\"comment\">//微信开发者文档中中包含了python/java/php/nodejs 的代码</span></span><br><span class=\"line\"><span class=\"comment\">//这里我选择了 nodejs 的生成签名的包</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sign = <span class=\"built_in\">require</span>(<span class=\"string\">\"./sign.js\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这里是从阿里云申请的免费 ssl 证书,方便为接口添加 https</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> options = &#123;</span><br><span class=\"line\">  key: fs.readFileSync(<span class=\"string\">\"./https/3400951_wxshare.cf.key\"</span>), <span class=\"comment\">//ssl文件路径</span></span><br><span class=\"line\">  cert: fs.readFileSync(<span class=\"string\">\"./https/3400951_wxshare.cf.pem\"</span>) <span class=\"comment\">//ssl文件路径</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//添加跨域相关信息</span></span><br><span class=\"line\">app.use(</span><br><span class=\"line\">  cors(&#123;</span><br><span class=\"line\">    origin: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">\"*\"</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    exposeHeaders: [<span class=\"string\">\"WWW-Authenticate\"</span>, <span class=\"string\">\"Server-Authorization\"</span>],</span><br><span class=\"line\">    maxAge: <span class=\"number\">5</span>,</span><br><span class=\"line\">    credentials: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    allowMethods: [<span class=\"string\">\"GET\"</span>, <span class=\"string\">\"POST\"</span>],</span><br><span class=\"line\">    allowHeaders: [<span class=\"string\">\"Content-Type\"</span>, <span class=\"string\">\"Authorization\"</span>, <span class=\"string\">\"Accept\"</span>]</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">);</span><br><span class=\"line\">app.use(<span class=\"keyword\">async</span> ctx =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (ctx.request.query.url2) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//根据公众号的 appid和 screct 获取 access_token</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> [err, data] = <span class=\"keyword\">await</span> utils.awaitWrap(</span><br><span class=\"line\">      axios.get(</span><br><span class=\"line\">        <span class=\"string\">`https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=<span class=\"subst\">$&#123;config.config.appId&#125;</span>&amp;secret=<span class=\"subst\">$&#123;config.config.secret&#125;</span>`</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> utils.res(ctx, <span class=\"number\">1001</span>, <span class=\"string\">\"查询 access-token 失败\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (data.data.access_token) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//根据 access_token 换取 ticket</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> [err2, data2] = <span class=\"keyword\">await</span> utils.awaitWrap(</span><br><span class=\"line\">          axios.get(</span><br><span class=\"line\">            <span class=\"string\">`https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=<span class=\"subst\">$&#123;data.data.access_token&#125;</span>&amp;type=jsapi`</span></span><br><span class=\"line\">          )</span><br><span class=\"line\">        );</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err2) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> utils.res(ctx, <span class=\"number\">1002</span>, <span class=\"string\">\"查询 ticket 失败\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">//根据 ticket 以及前端传过来的 url,生成signature等若干信息返回给前端进行 jssdk 验证.</span></span><br><span class=\"line\">          <span class=\"keyword\">let</span> signature = sign(</span><br><span class=\"line\">            data2.data.ticket,</span><br><span class=\"line\">            <span class=\"built_in\">decodeURIComponent</span>(ctx.request.query.url2)</span><br><span class=\"line\">          );</span><br><span class=\"line\">          signature.appId = config.config.appId;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(signature);</span><br><span class=\"line\">          <span class=\"comment\">//返回给前端</span></span><br><span class=\"line\">          <span class=\"keyword\">return</span> utils.res(ctx, <span class=\"number\">200</span>, <span class=\"string\">\"success\"</span>, signature);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> utils.res(ctx, <span class=\"number\">1001</span>, data.data.errmsg);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> utils.res(ctx, <span class=\"number\">1003</span>, <span class=\"string\">\"没有参数\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//创建http服务并监听 80 端口</span></span><br><span class=\"line\"><span class=\"comment\">//创建 https 服务并监听 443 端口</span></span><br><span class=\"line\">http.createServer(app.callback()).listen(<span class=\"number\">3000</span>);</span><br><span class=\"line\">https.createServer(options, app.callback()).listen(<span class=\"number\">3001</span>);</span><br></pre></td></tr></table></figure>\n<p>需要注意的事项:</p>\n<ul>\n<li>1.微信获取 access_token 和 ticket 的接口是有访问频率限制的,据称是每天 2000 次.</li>\n</ul>\n<blockquote>\n<p>生成签名之前必须先了解一下 jsapi_ticket，jsapi_ticket 是公众号用于调用微信 JS 接口的临时票据。正常情况下，jsapi_ticket 的有效期为 7200 秒，通过 access_token 来获取。由于获取 jsapi_ticket 的 api 调用次数非常有限，频繁刷新 jsapi_ticket 会导致 api 调用受限，影响自身业务，开发者必须在自己的服务全局缓存 jsapi_ticket 。参考以下文档获取 access_token（有效期 7200 秒，开发者必须在自己的服务全局缓存 access_token）：<a href=\"https://developers.weixin.qq.com/doc/offiaccount/Basic_Information/Get_access_token.html用第一步拿到的access_token\" target=\"_blank\" rel=\"noopener\">https://developers.weixin.qq.com/doc/offiaccount/Basic_Information/Get_access_token.html用第一步拿到的access_token</a> 采用 http GET 方式请求获得 jsapi_ticket（有效期 7200 秒，开发者必须在自己的服务全局缓存 jsapi_ticket）：<a href=\"https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=ACCESS_TOKEN&amp;type=jsapi\" target=\"_blank\" rel=\"noopener\">https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=ACCESS_TOKEN&amp;type=jsapi</a></p>\n</blockquote>\n<ul>\n<li>2.签名算法<blockquote>\n<p>签名生成规则如下：参与签名的字段包括 noncestr（随机字符串）, 有效的 jsapi_ticket, timestamp（时间戳）, url（当前网页的 URL，不包含#及其后面部分） 。对所有待签名参数按照字段名的 ASCII 码从小到大排序（字典序）后，使用 URL 键值对的格式（即 key1=value1&amp;key2=value2…）拼接成字符串 string1。这里需要注意的是所有参数名均为小写字符。对 string1 作 sha1 加密，字段名和字段值都采用原始值，不进行 URL 转义。即 signature=sha1(string1)。</p>\n</blockquote>\n</li>\n</ul>\n<p>这里我直接用了微信给的 example 中的代码:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//sign.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> createNonceStr = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.random()</span><br><span class=\"line\">    .toString(<span class=\"number\">36</span>)</span><br><span class=\"line\">    .substr(<span class=\"number\">2</span>, <span class=\"number\">15</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> createTimestamp = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime() / <span class=\"number\">1000</span>) + <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> raw = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">args</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> keys = <span class=\"built_in\">Object</span>.keys(args);</span><br><span class=\"line\">  keys = keys.sort();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> newArgs = &#123;&#125;;</span><br><span class=\"line\">  keys.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">    newArgs[key.toLowerCase()] = args[key];</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> string = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> newArgs) &#123;</span><br><span class=\"line\">    string += <span class=\"string\">\"&amp;\"</span> + k + <span class=\"string\">\"=\"</span> + newArgs[k];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  string = string.substr(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> string;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@synopsis </span>签名算法</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>jsapi_ticket 用于签名的 jsapi_ticket</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param </span>url 用于签名的 url ，注意必须动态获取，不能 hardcode</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sign = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">jsapi_ticket, url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> ret = &#123;</span><br><span class=\"line\">    jsapi_ticket: jsapi_ticket,</span><br><span class=\"line\">    nonceStr: createNonceStr(),</span><br><span class=\"line\">    timestamp: createTimestamp(),</span><br><span class=\"line\">    url: url</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> string = raw(ret);</span><br><span class=\"line\">  jsSHA = <span class=\"built_in\">require</span>(<span class=\"string\">\"jssha\"</span>);</span><br><span class=\"line\">  shaObj = <span class=\"keyword\">new</span> jsSHA(string, <span class=\"string\">\"TEXT\"</span>);</span><br><span class=\"line\">  ret.signature = shaObj.getHash(<span class=\"string\">\"SHA-1\"</span>, <span class=\"string\">\"HEX\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = sign;</span><br></pre></td></tr></table></figure>\n<p>可以在这里验证生成微信签名的正确性:<a href=\"http://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=jsapisign\" target=\"_blank\" rel=\"noopener\">http://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=jsapisign</a></p>\n<h1 id=\"6-前端开发\"><a href=\"#6-前端开发\" class=\"headerlink\" title=\"6.前端开发\"></a>6.前端开发</h1><h2 id=\"1-引入-JS-文件\"><a href=\"#1-引入-JS-文件\" class=\"headerlink\" title=\"(1) 引入 JS 文件\"></a>(1) 引入 JS 文件</h2><p>在需要调用 JS 接口的页面引入如下 JS 文件，（支持 https）：<a href=\"http://res.wx.qq.com/open/js/jweixin-1.6.0.js\" target=\"_blank\" rel=\"noopener\">http://res.wx.qq.com/open/js/jweixin-1.6.0.js</a></p>\n<p>如需进一步提升服务稳定性，当上述资源不可访问时，可改访问：<a href=\"http://res2.wx.qq.com/open/js/jweixin-1.6.0.js\" target=\"_blank\" rel=\"noopener\">http://res2.wx.qq.com/open/js/jweixin-1.6.0.js</a> （支持 https）。</p>\n<h2 id=\"2-通过-config-接口注入权限验证配置\"><a href=\"#2-通过-config-接口注入权限验证配置\" class=\"headerlink\" title=\"(2)通过 config 接口注入权限验证配置\"></a>(2)通过 config 接口注入权限验证配置</h2><p>所有需要使用 JS-SDK 的页面必须先注入配置信息，否则将无法调用（同一个 url 仅需调用一次，对于变化 url 的 SPA 的 web app 可在每次 url 变化时进行调用,目前 Android 微信客户端不支持 pushState 的 H5 新特性，所以使用 pushState 来实现 web app 的页面会导致签名失败，此问题会在 Android6.2 中修复）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.config(&#123;</span><br><span class=\"line\">  debug: <span class=\"literal\">true</span>, <span class=\"comment\">// 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</span></span><br><span class=\"line\">  appId: <span class=\"string\">''</span>, <span class=\"comment\">// 必填，公众号的唯一标识</span></span><br><span class=\"line\">  timestamp: , <span class=\"comment\">// 必填，生成签名的时间戳</span></span><br><span class=\"line\">  nonceStr: <span class=\"string\">''</span>, <span class=\"comment\">// 必填，生成签名的随机串</span></span><br><span class=\"line\">  signature: <span class=\"string\">''</span>,<span class=\"comment\">// 必填，签名</span></span><br><span class=\"line\">  jsApiList: [] <span class=\"comment\">// 必填，需要使用的JS接口列表</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-通过-ready-接口处理成功验证\"><a href=\"#3-通过-ready-接口处理成功验证\" class=\"headerlink\" title=\"(3)通过 ready 接口处理成功验证\"></a>(3)通过 ready 接口处理成功验证</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// config信息验证后会执行ready方法，所有接口调用都必须在config接口获得结果之后，config是一个客户端的异步操作，所以如果需要在页面加载时就调用相关接口，则须把相关接口放在ready函数中调用来确保正确执行。对于用户触发时才调用的接口，则可以直接调用，不需要放在ready函数中。</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"4-通过-error-接口处理失败验证\"><a href=\"#4-通过-error-接口处理失败验证\" class=\"headerlink\" title=\"(4)通过 error 接口处理失败验证\"></a>(4)通过 error 接口处理失败验证</h2><p>wx.error(function(res){<br>// config 信息验证失败会执行 error 函数，如签名过期导致验证失败，具体错误信息可以打开 config 的 debug 模式查看，也可以在返回的 res 参数中查看，对于 SPA 可以在这里更新签名。<br>});</p>\n<p>样例:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//index.html</span></span><br><span class=\"line\"><span class=\"comment\">//使用 fetch 获取接口数据</span></span><br><span class=\"line\"><span class=\"comment\">//同时注意 webpack 没有编译 index.html,所以 es6 语法并不支持</span></span><br><span class=\"line\">&lt;script src=https:<span class=\"comment\">//res2.wx.qq.com/open/js/jweixin-1.6.0.js&gt;&lt;/script&gt;</span></span><br><span class=\"line\">    &lt;script&gt;</span><br><span class=\"line\">    <span class=\"comment\">//这里请求之前写好的后端接口,发送当前页面的 url</span></span><br><span class=\"line\">    <span class=\"comment\">//url 必须使用window.location.href.split(\"#\")[0] 获取</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> wxshareAuthAddress = <span class=\"string\">\"https://example.com:3001?url2=\"</span> + <span class=\"built_in\">encodeURIComponent</span>(<span class=\"built_in\">window</span>.location.href.split(<span class=\"string\">\"#\"</span>)[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    fetch(wxshareAuthAddress)</span><br><span class=\"line\">      .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">        res.json().then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//根据获取到的结果验证权限</span></span><br><span class=\"line\">          wx.config(&#123;</span><br><span class=\"line\">            debug: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            appId: res.data.appId,</span><br><span class=\"line\">            timestamp: res.data.timestamp,</span><br><span class=\"line\">            nonceStr: res.data.nonceStr,</span><br><span class=\"line\">            signature: res.data.signature,</span><br><span class=\"line\">            jsApiList: [<span class=\"string\">\"updateTimelineShareData\"</span>, <span class=\"string\">\"updateAppMessageShareData\"</span>] <span class=\"comment\">// 必填，需要使用的JS接口列表</span></span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">    <span class=\"comment\">//验证成功以后出发的方法</span></span><br><span class=\"line\">          wx.ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ready\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//updateAppMessageShareData是分享到微信消息的api</span></span><br><span class=\"line\">            wx.updateAppMessageShareData(&#123;</span><br><span class=\"line\">              title: <span class=\"string\">\"\"</span>, <span class=\"comment\">// 分享标题</span></span><br><span class=\"line\">              desc: <span class=\"string\">\"\"</span>, <span class=\"comment\">// 分享描述</span></span><br><span class=\"line\">              link: <span class=\"string\">\"/\"</span>, <span class=\"comment\">// 分享链接，该链接域名或路径必须与当前页面对应的公众号JS安全域名一致</span></span><br><span class=\"line\">              imgUrl: <span class=\"string\">\"\"</span>, <span class=\"comment\">// 分享图标</span></span><br><span class=\"line\">              success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 设置成功</span></span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">\"设置发送给微信好友消息成功\"</span>);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"comment\">// console.log(res);</span></span><br><span class=\"line\">            <span class=\"comment\">// config信息验证后会执行ready方法，所有接口调用都必须在config接口获得结果之后，config是一个客户端的异步操作，所以如果需要在页面加载时就调用相关接口，则须把相关接口放在ready函数中调用来确保正确执行。对于用户触发时才调用的接口，则可以直接调用，不需要放在ready函数中。</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//分享到朋友圈设置的 api</span></span><br><span class=\"line\">            wx.updateTimelineShareData(&#123;</span><br><span class=\"line\">              title: <span class=\"string\">\"\"</span>, <span class=\"comment\">// 分享标题</span></span><br><span class=\"line\">              link: <span class=\"string\">\"\"</span>, <span class=\"comment\">// 分享链接，该链接域名或路径必须与当前页面对应的公众号JS安全域名一致</span></span><br><span class=\"line\">              imgUrl: <span class=\"string\">\"\"</span>, <span class=\"comment\">// 分享图标</span></span><br><span class=\"line\">              success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 设置成功</span></span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">\"设置朋友圈分享成功\"</span>);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"comment\">// wx.showMenuItems(&#123;</span></span><br><span class=\"line\">            <span class=\"comment\">//   menuList: [\"menuItem:readMode\", \"menuItem:share:facebook\"] // 要显示的菜单项，所有menu项见附录3</span></span><br><span class=\"line\">            <span class=\"comment\">// &#125;);</span></span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">          wx.error(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">\"error\"</span> + res);</span><br><span class=\"line\">            <span class=\"comment\">// config信息验证失败会执行error函数，如签名过期导致验证失败，具体错误信息可以打开config的debug模式查看，也可以在返回的res参数中查看，对于SPA可以在这里更新签名。</span></span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">      &#125;);&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"7-问题汇总\"><a href=\"#7-问题汇总\" class=\"headerlink\" title=\"7 问题汇总\"></a>7 问题汇总</h1><h2 id=\"运维\"><a href=\"#运维\" class=\"headerlink\" title=\"运维\"></a>运维</h2><h3 id=\"https\"><a href=\"#https\" class=\"headerlink\" title=\"https\"></a>https</h3><p>注意接口一定要添加 https,而且绑定域名.<br>如果不绑定域名,使用 <a href=\"https://ip这样的形式,使用微信开发者工具调试时接口不会报错,但是在手机端会拦截请求\" target=\"_blank\" rel=\"noopener\">https://ip这样的形式,使用微信开发者工具调试时接口不会报错,但是在手机端会拦截请求</a>.<br>证书可以到阿里云上申请,域名可以到 freedom 申请免费域名,然后在 dnspod 添加域名解析以及证书与域名的绑定关系;</p>\n<p><img src=\"https://i.loli.net/2020/01/21/9YUG2OxMAKPz81w.png\" alt=\"WX20200121-120951@2x.png\"></p>\n<h3 id=\"部署服务\"><a href=\"#部署服务\" class=\"headerlink\" title=\"部署服务\"></a>部署服务</h3><p>我使用了 docker 部署了服务,这样可以免去配置环境等问题.</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Dockerfile</span></span><br><span class=\"line\">FROM node</span><br><span class=\"line\">RUN mkdir -p /home/Service</span><br><span class=\"line\">WORKDIR /home/Service</span><br><span class=\"line\">COPY . /home/Service</span><br><span class=\"line\">RUN npm install</span><br><span class=\"line\">EXPOSE 3000</span><br><span class=\"line\">EXPOSE 3001</span><br><span class=\"line\">CMD node ./serve.js</span><br><span class=\"line\"> <span class=\"comment\">## 如果想运行多条指令可以这样：</span></span><br><span class=\"line\"><span class=\"comment\">## CMD git pull &amp;&amp; npm install &amp;&amp; npm start</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"暴露端口\"><a href=\"#暴露端口\" class=\"headerlink\" title=\"暴露端口\"></a>暴露端口</h3><p>部署在阿里云上的主机记得开放端口方便外部访问:<br><img src=\"https://i.loli.net/2020/01/21/7QCLpaMv5HBNszO.png\" alt=\"WX20200121-120715@2x.png\"></p>\n<h2 id=\"前端开发\"><a href=\"#前端开发\" class=\"headerlink\" title=\"前端开发\"></a>前端开发</h2><h3 id=\"invalid-signature\"><a href=\"#invalid-signature\" class=\"headerlink\" title=\"invalid signature\"></a>invalid signature</h3><h4 id=\"1-url\"><a href=\"#1-url\" class=\"headerlink\" title=\"1.url\"></a>1.url</h4><p>绝大多数<code>invalid signature</code>问题的原因都是 url 的问题,<br>url 必须与之前填入的 js 安全域名相同.</p>\n<p>确保 url 是动态生成的,同时一定要使用 <code>encodeUrlComponent</code>编码!!!</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">encodeURIComponent</span>(<span class=\"built_in\">window</span>.location.href.split(<span class=\"string\">\"#\"</span>)[<span class=\"number\">0</span>]);</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-确保签名算法无误\"><a href=\"#2-确保签名算法无误\" class=\"headerlink\" title=\"2.确保签名算法无误\"></a>2.确保签名算法无误</h4><p>签名生成规则如下：</p>\n<p>参与签名的字段包括有效的 jsapi_ticket（获取方式详见微信 JSSDK 文档）， noncestr （随机字符串，由开发者随机生成），timestamp （由开发者生成的当前时间戳）， url（当前网页的URL，不包含#及其后面部分。注意：对于没有只有域名没有 path 的 URL ，浏览器会自动加上 / 作为 path，如打开 <a href=\"http://qq.com\" target=\"_blank\" rel=\"noopener\">http://qq.com</a> 则获取到的 URL 为 <a href=\"http://qq.com/）。\" target=\"_blank\" rel=\"noopener\">http://qq.com/）。</a><br>对所有待签名参数按照字段名的 ASCII 码从小到大排序（字典序）后，使用 URL 键值对的格式（即key1=value1&amp;key2=value2…）拼接成字符串 string1。这里需要注意的是所有参数名均为小写字符。<br>接下来对 string1 作 sha1 加密，字段名和字段值都采用原始值，不进行 URL 转义。即 signature=sha1(string1)。</p>\n<h2 id=\"后端开发\"><a href=\"#后端开发\" class=\"headerlink\" title=\"后端开发\"></a>后端开发</h2><h3 id=\"api-调用限制\"><a href=\"#api-调用限制\" class=\"headerlink\" title=\"api 调用限制\"></a>api 调用限制</h3><p>微信对 access_token 以及 ticket 的获取有每日调用次数的限制,对于稍大的项目就需要考虑缓存 ticket(ticket 的有效期是 7200s),这一点微信文档中有详细的说明.</p>\n<h3 id=\"安全相关\"><a href=\"#安全相关\" class=\"headerlink\" title=\"安全相关\"></a>安全相关</h3><p>appid 和 screct 不能轻易泄露,返回给前端的数据中需要传 appid.</p>\n"},{"title":"echarts.js 绘制地图/图表","_content":"\n# 安装 echart.js\n\nnpm\n\n    npm install echarts --save\n\nyarn\n\n    yarn add echarts\n\n# 按需加载 ehcart.js\n\n全量加载:\n\n    var echarts = require('echarts');\n\n默认使用 require('echarts') 得到的是已经加载了所有图表和组件的 ECharts 包，因此体积会比较大，如果在项目中对体积要求比较苛刻，也可以只按需引入需要的模块。\n\n    // 引入 ECharts 主模块\n    var echarts = require('echarts/lib/echarts');\n    // 引入柱状图\n    require('echarts/lib/chart/bar');\n    // 引入提示框和标题组件\n    require('echarts/lib/component/tooltip');\n    require('echarts/lib/component/title');\n\n可以按需引入的模块列表见 [https://github.com/apache/incubator-echarts/blob/master/index.js](https://github.com/apache/incubator-echarts/blob/master/index.js)\n\n# 初始化 echart.js\n\n```html\n<body>\n  <!-- 为 ECharts 准备一个具备大小（宽高）的 DOM -->\n  <div id=\"main\" style=\"width: 600px;height:400px;\"></div>\n</body>\n```\n\n```js\n// 基于准备好的dom，初始化echarts实例\nvar myChart = echarts.init(document.getElementById(\"main\"));\n\n// 指定图表的配置项和数据\nvar option = {\n  title: {\n    text: \"ECharts 入门示例\",\n  },\n  tooltip: {},\n  legend: {\n    data: [\"销量\"],\n  },\n  xAxis: {\n    data: [\"衬衫\", \"羊毛衫\", \"雪纺衫\", \"裤子\", \"高跟鞋\", \"袜子\"],\n  },\n  yAxis: {},\n  series: [\n    {\n      name: \"销量\",\n      type: \"bar\",\n      data: [5, 20, 36, 10, 10, 20],\n    },\n  ],\n};\n\n// 使用刚指定的配置项和数据显示图表。\nmyChart.setOption(option);\n```\n\n核心就是使用 `echart`的 `setOption`方法来显示图表.\n\n# echart 绘制图表\n\n```js\n initTrending() {\n      this.trendingChart = echarts.init(document.getElementById(\"trending\"));\n      this.trendingChart.setOption({\n        tooltip: {},\n        //图例\n        legend: {\n          data: [\"新增确诊\", \"新增治愈\", \"死亡人数\"]\n        },\n        //横坐标\n        xAxis: {\n          data: [\"02.04\", \"02.05\", \"02.06\", \"02.07\", \"02.08\", \"02.09\", \"02.10\"]\n        },\n        //纵坐标\n        yAxis: {},\n        //数据集合\n        series: [\n          {\n            name: \"新增确诊\",\n            type: \"line\",\n            // symbol:true,\n            color: \"#AD443D\",\n            smooth: true,\n            data: [80, 67, 51, 42, 31, 20, 11]\n          },\n          {\n            name: \"新增治愈\",\n            type: \"line\",\n            color: \"#85B89E\",\n            smooth: true,\n            data: [6, 12, 21, 23, 31, 21, 27]\n          },\n          {\n            name: \"死亡人数\",\n            type: \"line\",\n            color: \"grey\",\n            smooth: true,\n            data: [0, 0, 0, 0, 0, 0, 0]\n          }\n        ]\n      });\n    }\n```\n\n效果:\n\n![WX20200211-151258@2x.png](https://i.loli.net/2020/02/11/ZvhJqsxPHdt7IKE.png)\n\n# echart 渲染地图\n\n首先需要下载地图文件.地图文件分为两种,一种是 `.js`格式,一种是`.json(.geoJson)`格式.\nechart 官方目前不提供地图数据下载,需要从[https://gallery.echartsjs.com/editor.html?c=xmCAi_XNuJ](https://gallery.echartsjs.com/editor.html?c=xmCAi_XNuJ)下载.下载下来的数据格式为`.geoJson`,\n关于 geojson 的介绍,可以看下[https://juejin.im/post/5d8e0eaa5188250915506b9b](https://juejin.im/post/5d8e0eaa5188250915506b9b).\n我们把需要的地图数据都下载下来备用.\n\n## 注册地图\n\n```js\nthis.mapChart = echarts.init(document.getElementById(\"main\"));\n\necharts.registerMap(mapName, require(`@/static/${mapName}.json`));\n```\n\n## 根据数据渲染地图不同区域颜色\n\n```js\n//按需引入 echart 模块\n//主模块\nvar echarts = require(\"echarts/lib/echarts\");\n//图标线组件\n// require(\"echarts/lib/chart/line\");\n//地图图标模块\nrequire(\"echarts/lib/chart/map\");\n//提示框组件\nrequire(\"echarts/lib/component/tooltip\");\n//图例组件\nrequire(\"echarts/lib/component/legend\");\n//地图组件\nrequire(\"echarts/lib/component/geo\");\n//视觉映射组件\nrequire(\"echarts/lib/component/visualMap\");\n\n//定义 options\n\noptions: {\n    //配置需要的提示框组件\n        tooltip: {},\n        //视觉映射组件\n        visualMap: {\n            //类型:分段式(根据数据大小划分为不同的区段,并根据不同区段来渲染颜色)\n          type: \"piecewise\",\n          //定义不同区段的值域以及对应的颜色\n          pieces: [\n            {\n              max: 10,\n              color: \"#FAEBD2\"\n            },\n            {\n              min: 10,\n              max: 100,\n              color: \"#E9A188\"\n            },\n            {\n              min: 100,\n              max: 200,\n              color: \"#D56354\"\n            },\n            {\n              min: 200,\n              max: 500,\n              color: \"#BB3A37\"\n            },\n            {\n              min: 500,\n              color: \"#480F10\"\n            }\n          ],\n          calculable: true,\n          //对应的数据索引\n          seriesIndex: [0]\n        },\n        //数据\n        series: [\n          {\n              //tooltip 名称\n            name: \"确诊人数\",\n            //类型\n            type: \"map\",\n            //对应 geo 索引\n            geoIndex: 0,\n            //数据(通过 ajax 获取)\n            data: [\n                {\n                    name:\"name\",\n                    value:10\n                }\n            ]\n          }\n        ],\n        //地图组件\n        geo: {\n            //地图名称(需要提前使用registerMap注册)\n          map: \"zhejiang\",\n          //是否允许用户手动缩放\n          roam: false,\n          //放大比例\n          zoom: 1.2,\n          //标识名称\n          label: {\n            show: true,\n            color: \"rgba(0,0,0,0.4)\",\n            fontSize: 12\n          },\n          itemStyle: {\n            borderColor: \"rgba(0, 0, 0, 0.2)\"\n          },\n          emphasis: {\n            itemStyle: {\n              areaColor: null,\n              shadowOffsetX: 0,\n              shadowOffsetY: 0,\n              shadowBlur: 20,\n              borderWidth: 0,\n              shadowColor: \"rgba(0, 0, 0, 0.5)\"\n            }\n          }\n        }\n      }\n\n```\n\n效果:\n![WX20200211-150537@2x.png](https://i.loli.net/2020/02/11/QDVhovzdLZ7Tsyb.png)\n\n## 地图下钻/上浮\n\n### 地图下钻\n\n监听点击事件,根据点击的名称 require 地图,注册地图,修改 options,接着 setOptions 就可以了.\n\n```js\nmapChart.on(\"click\", (data) => {\n  echarts.registerMap(data.name, require(`@/static/${data.name}.json`));\n\n  this.options.geo.map = data.name;\n  this.mapChart.setOption(this.options);\n});\n```\n\n### 地图上浮\n\n与地图下钻的方法类似,使用父地图重新渲染就可以了.\n\n## 添加地图标点\n\n在`option`中添加新的 series,类型为:`effectScatter`\n\n```js\n{\n          type: \"effectScatter\",\n          //坐标系统,因为我们使用的是geo 组件,所以选择geo.\n          coordinateSystem: \"geo\",\n          data: [\n            {\n              //名称\n              name: \"name\",\n              //点的坐标,可以到地图的 json 文件中查找或者从地图 app 中查找.\n\n              value: []\n            }\n          ],\n          // 标点的大小\n          symbolSize: 12,\n          showEffectOn: \"render\",\n          //动态效果\n          rippleEffect: {\n            //周期\n            period: 5,\n            //放大倍数\n            scale:  6\n          },\n          itemStyle: {\n            color: \"#FFB93D\",\n            borderWidth: 3,\n            shadowColor: \"rgba(0, 0, 0, 0.5)\",\n            shadowBlur: 6\n            // borderColor: \"red\"\n          }\n        }\n\n```\n\n如图:\n\n![img](https://i.loli.net/2020/04/15/cnpjLi39XClMOFN.png)\n\n同时可以监听点击事件,根据 e.name 获取点击的名称.\n```js\nechart.on(\"click\",e=>{\n  console.log(e.name)\n}\n\n```\n\n\n# 自定义地图\n\n打开[http://geojson.io](http://geojson.io)，这是一个可以在线绘制 geoJson 的网站，就是因为它我们才能随心所欲的绘制我们想要的地图样式和 geoJson 数据。\n绘制好的地图可以以 `json` 格式下载,在 `echart.js` 中使用`registerMap`注册以后就可以使用了.\n\n# 附\n\n[echart.js 官方教程](https://www.echartsjs.com/zh/api.html#echarts)\n\n[w3c echart 教程](https://www.w3cschool.cn/echarts_tutorial/echarts_tutorial-mec528xa.html)\n","source":"_posts/2020.02.11.echart.md","raw":"---\ntitle: echarts.js 绘制地图/图表\ntags: [echarts]\ncategories: 技术\n---\n\n# 安装 echart.js\n\nnpm\n\n    npm install echarts --save\n\nyarn\n\n    yarn add echarts\n\n# 按需加载 ehcart.js\n\n全量加载:\n\n    var echarts = require('echarts');\n\n默认使用 require('echarts') 得到的是已经加载了所有图表和组件的 ECharts 包，因此体积会比较大，如果在项目中对体积要求比较苛刻，也可以只按需引入需要的模块。\n\n    // 引入 ECharts 主模块\n    var echarts = require('echarts/lib/echarts');\n    // 引入柱状图\n    require('echarts/lib/chart/bar');\n    // 引入提示框和标题组件\n    require('echarts/lib/component/tooltip');\n    require('echarts/lib/component/title');\n\n可以按需引入的模块列表见 [https://github.com/apache/incubator-echarts/blob/master/index.js](https://github.com/apache/incubator-echarts/blob/master/index.js)\n\n# 初始化 echart.js\n\n```html\n<body>\n  <!-- 为 ECharts 准备一个具备大小（宽高）的 DOM -->\n  <div id=\"main\" style=\"width: 600px;height:400px;\"></div>\n</body>\n```\n\n```js\n// 基于准备好的dom，初始化echarts实例\nvar myChart = echarts.init(document.getElementById(\"main\"));\n\n// 指定图表的配置项和数据\nvar option = {\n  title: {\n    text: \"ECharts 入门示例\",\n  },\n  tooltip: {},\n  legend: {\n    data: [\"销量\"],\n  },\n  xAxis: {\n    data: [\"衬衫\", \"羊毛衫\", \"雪纺衫\", \"裤子\", \"高跟鞋\", \"袜子\"],\n  },\n  yAxis: {},\n  series: [\n    {\n      name: \"销量\",\n      type: \"bar\",\n      data: [5, 20, 36, 10, 10, 20],\n    },\n  ],\n};\n\n// 使用刚指定的配置项和数据显示图表。\nmyChart.setOption(option);\n```\n\n核心就是使用 `echart`的 `setOption`方法来显示图表.\n\n# echart 绘制图表\n\n```js\n initTrending() {\n      this.trendingChart = echarts.init(document.getElementById(\"trending\"));\n      this.trendingChart.setOption({\n        tooltip: {},\n        //图例\n        legend: {\n          data: [\"新增确诊\", \"新增治愈\", \"死亡人数\"]\n        },\n        //横坐标\n        xAxis: {\n          data: [\"02.04\", \"02.05\", \"02.06\", \"02.07\", \"02.08\", \"02.09\", \"02.10\"]\n        },\n        //纵坐标\n        yAxis: {},\n        //数据集合\n        series: [\n          {\n            name: \"新增确诊\",\n            type: \"line\",\n            // symbol:true,\n            color: \"#AD443D\",\n            smooth: true,\n            data: [80, 67, 51, 42, 31, 20, 11]\n          },\n          {\n            name: \"新增治愈\",\n            type: \"line\",\n            color: \"#85B89E\",\n            smooth: true,\n            data: [6, 12, 21, 23, 31, 21, 27]\n          },\n          {\n            name: \"死亡人数\",\n            type: \"line\",\n            color: \"grey\",\n            smooth: true,\n            data: [0, 0, 0, 0, 0, 0, 0]\n          }\n        ]\n      });\n    }\n```\n\n效果:\n\n![WX20200211-151258@2x.png](https://i.loli.net/2020/02/11/ZvhJqsxPHdt7IKE.png)\n\n# echart 渲染地图\n\n首先需要下载地图文件.地图文件分为两种,一种是 `.js`格式,一种是`.json(.geoJson)`格式.\nechart 官方目前不提供地图数据下载,需要从[https://gallery.echartsjs.com/editor.html?c=xmCAi_XNuJ](https://gallery.echartsjs.com/editor.html?c=xmCAi_XNuJ)下载.下载下来的数据格式为`.geoJson`,\n关于 geojson 的介绍,可以看下[https://juejin.im/post/5d8e0eaa5188250915506b9b](https://juejin.im/post/5d8e0eaa5188250915506b9b).\n我们把需要的地图数据都下载下来备用.\n\n## 注册地图\n\n```js\nthis.mapChart = echarts.init(document.getElementById(\"main\"));\n\necharts.registerMap(mapName, require(`@/static/${mapName}.json`));\n```\n\n## 根据数据渲染地图不同区域颜色\n\n```js\n//按需引入 echart 模块\n//主模块\nvar echarts = require(\"echarts/lib/echarts\");\n//图标线组件\n// require(\"echarts/lib/chart/line\");\n//地图图标模块\nrequire(\"echarts/lib/chart/map\");\n//提示框组件\nrequire(\"echarts/lib/component/tooltip\");\n//图例组件\nrequire(\"echarts/lib/component/legend\");\n//地图组件\nrequire(\"echarts/lib/component/geo\");\n//视觉映射组件\nrequire(\"echarts/lib/component/visualMap\");\n\n//定义 options\n\noptions: {\n    //配置需要的提示框组件\n        tooltip: {},\n        //视觉映射组件\n        visualMap: {\n            //类型:分段式(根据数据大小划分为不同的区段,并根据不同区段来渲染颜色)\n          type: \"piecewise\",\n          //定义不同区段的值域以及对应的颜色\n          pieces: [\n            {\n              max: 10,\n              color: \"#FAEBD2\"\n            },\n            {\n              min: 10,\n              max: 100,\n              color: \"#E9A188\"\n            },\n            {\n              min: 100,\n              max: 200,\n              color: \"#D56354\"\n            },\n            {\n              min: 200,\n              max: 500,\n              color: \"#BB3A37\"\n            },\n            {\n              min: 500,\n              color: \"#480F10\"\n            }\n          ],\n          calculable: true,\n          //对应的数据索引\n          seriesIndex: [0]\n        },\n        //数据\n        series: [\n          {\n              //tooltip 名称\n            name: \"确诊人数\",\n            //类型\n            type: \"map\",\n            //对应 geo 索引\n            geoIndex: 0,\n            //数据(通过 ajax 获取)\n            data: [\n                {\n                    name:\"name\",\n                    value:10\n                }\n            ]\n          }\n        ],\n        //地图组件\n        geo: {\n            //地图名称(需要提前使用registerMap注册)\n          map: \"zhejiang\",\n          //是否允许用户手动缩放\n          roam: false,\n          //放大比例\n          zoom: 1.2,\n          //标识名称\n          label: {\n            show: true,\n            color: \"rgba(0,0,0,0.4)\",\n            fontSize: 12\n          },\n          itemStyle: {\n            borderColor: \"rgba(0, 0, 0, 0.2)\"\n          },\n          emphasis: {\n            itemStyle: {\n              areaColor: null,\n              shadowOffsetX: 0,\n              shadowOffsetY: 0,\n              shadowBlur: 20,\n              borderWidth: 0,\n              shadowColor: \"rgba(0, 0, 0, 0.5)\"\n            }\n          }\n        }\n      }\n\n```\n\n效果:\n![WX20200211-150537@2x.png](https://i.loli.net/2020/02/11/QDVhovzdLZ7Tsyb.png)\n\n## 地图下钻/上浮\n\n### 地图下钻\n\n监听点击事件,根据点击的名称 require 地图,注册地图,修改 options,接着 setOptions 就可以了.\n\n```js\nmapChart.on(\"click\", (data) => {\n  echarts.registerMap(data.name, require(`@/static/${data.name}.json`));\n\n  this.options.geo.map = data.name;\n  this.mapChart.setOption(this.options);\n});\n```\n\n### 地图上浮\n\n与地图下钻的方法类似,使用父地图重新渲染就可以了.\n\n## 添加地图标点\n\n在`option`中添加新的 series,类型为:`effectScatter`\n\n```js\n{\n          type: \"effectScatter\",\n          //坐标系统,因为我们使用的是geo 组件,所以选择geo.\n          coordinateSystem: \"geo\",\n          data: [\n            {\n              //名称\n              name: \"name\",\n              //点的坐标,可以到地图的 json 文件中查找或者从地图 app 中查找.\n\n              value: []\n            }\n          ],\n          // 标点的大小\n          symbolSize: 12,\n          showEffectOn: \"render\",\n          //动态效果\n          rippleEffect: {\n            //周期\n            period: 5,\n            //放大倍数\n            scale:  6\n          },\n          itemStyle: {\n            color: \"#FFB93D\",\n            borderWidth: 3,\n            shadowColor: \"rgba(0, 0, 0, 0.5)\",\n            shadowBlur: 6\n            // borderColor: \"red\"\n          }\n        }\n\n```\n\n如图:\n\n![img](https://i.loli.net/2020/04/15/cnpjLi39XClMOFN.png)\n\n同时可以监听点击事件,根据 e.name 获取点击的名称.\n```js\nechart.on(\"click\",e=>{\n  console.log(e.name)\n}\n\n```\n\n\n# 自定义地图\n\n打开[http://geojson.io](http://geojson.io)，这是一个可以在线绘制 geoJson 的网站，就是因为它我们才能随心所欲的绘制我们想要的地图样式和 geoJson 数据。\n绘制好的地图可以以 `json` 格式下载,在 `echart.js` 中使用`registerMap`注册以后就可以使用了.\n\n# 附\n\n[echart.js 官方教程](https://www.echartsjs.com/zh/api.html#echarts)\n\n[w3c echart 教程](https://www.w3cschool.cn/echarts_tutorial/echarts_tutorial-mec528xa.html)\n","slug":"2020.02.11.echart","published":1,"date":"2020-02-11T06:31:21.809Z","updated":"2020-04-15T06:56:07.441Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziiqk0020rh9z2dnxdz28","content":"<h1 id=\"安装-echart-js\"><a href=\"#安装-echart-js\" class=\"headerlink\" title=\"安装 echart.js\"></a>安装 echart.js</h1><p>npm</p>\n<pre><code>npm install echarts --save\n</code></pre><p>yarn</p>\n<pre><code>yarn add echarts\n</code></pre><h1 id=\"按需加载-ehcart-js\"><a href=\"#按需加载-ehcart-js\" class=\"headerlink\" title=\"按需加载 ehcart.js\"></a>按需加载 ehcart.js</h1><p>全量加载:</p>\n<pre><code>var echarts = require(&apos;echarts&apos;);\n</code></pre><p>默认使用 require(‘echarts’) 得到的是已经加载了所有图表和组件的 ECharts 包，因此体积会比较大，如果在项目中对体积要求比较苛刻，也可以只按需引入需要的模块。</p>\n<pre><code>// 引入 ECharts 主模块\nvar echarts = require(&apos;echarts/lib/echarts&apos;);\n// 引入柱状图\nrequire(&apos;echarts/lib/chart/bar&apos;);\n// 引入提示框和标题组件\nrequire(&apos;echarts/lib/component/tooltip&apos;);\nrequire(&apos;echarts/lib/component/title&apos;);\n</code></pre><p>可以按需引入的模块列表见 <a href=\"https://github.com/apache/incubator-echarts/blob/master/index.js\" target=\"_blank\" rel=\"noopener\">https://github.com/apache/incubator-echarts/blob/master/index.js</a></p>\n<h1 id=\"初始化-echart-js\"><a href=\"#初始化-echart-js\" class=\"headerlink\" title=\"初始化 echart.js\"></a>初始化 echart.js</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 为 ECharts 准备一个具备大小（宽高）的 DOM --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"main\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 600px;height:400px;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 基于准备好的dom，初始化echarts实例</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> myChart = echarts.init(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"main\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 指定图表的配置项和数据</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> option = &#123;</span><br><span class=\"line\">  title: &#123;</span><br><span class=\"line\">    text: <span class=\"string\">\"ECharts 入门示例\"</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  tooltip: &#123;&#125;,</span><br><span class=\"line\">  legend: &#123;</span><br><span class=\"line\">    data: [<span class=\"string\">\"销量\"</span>],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  xAxis: &#123;</span><br><span class=\"line\">    data: [<span class=\"string\">\"衬衫\"</span>, <span class=\"string\">\"羊毛衫\"</span>, <span class=\"string\">\"雪纺衫\"</span>, <span class=\"string\">\"裤子\"</span>, <span class=\"string\">\"高跟鞋\"</span>, <span class=\"string\">\"袜子\"</span>],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  yAxis: &#123;&#125;,</span><br><span class=\"line\">  series: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      name: <span class=\"string\">\"销量\"</span>,</span><br><span class=\"line\">      type: <span class=\"string\">\"bar\"</span>,</span><br><span class=\"line\">      data: [<span class=\"number\">5</span>, <span class=\"number\">20</span>, <span class=\"number\">36</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">20</span>],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用刚指定的配置项和数据显示图表。</span></span><br><span class=\"line\">myChart.setOption(option);</span><br></pre></td></tr></table></figure>\n<p>核心就是使用 <code>echart</code>的 <code>setOption</code>方法来显示图表.</p>\n<h1 id=\"echart-绘制图表\"><a href=\"#echart-绘制图表\" class=\"headerlink\" title=\"echart 绘制图表\"></a>echart 绘制图表</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">initTrending() &#123;</span><br><span class=\"line\">     <span class=\"keyword\">this</span>.trendingChart = echarts.init(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"trending\"</span>));</span><br><span class=\"line\">     <span class=\"keyword\">this</span>.trendingChart.setOption(&#123;</span><br><span class=\"line\">       tooltip: &#123;&#125;,</span><br><span class=\"line\">       <span class=\"comment\">//图例</span></span><br><span class=\"line\">       legend: &#123;</span><br><span class=\"line\">         data: [<span class=\"string\">\"新增确诊\"</span>, <span class=\"string\">\"新增治愈\"</span>, <span class=\"string\">\"死亡人数\"</span>]</span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\">       <span class=\"comment\">//横坐标</span></span><br><span class=\"line\">       xAxis: &#123;</span><br><span class=\"line\">         data: [<span class=\"string\">\"02.04\"</span>, <span class=\"string\">\"02.05\"</span>, <span class=\"string\">\"02.06\"</span>, <span class=\"string\">\"02.07\"</span>, <span class=\"string\">\"02.08\"</span>, <span class=\"string\">\"02.09\"</span>, <span class=\"string\">\"02.10\"</span>]</span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\">       <span class=\"comment\">//纵坐标</span></span><br><span class=\"line\">       yAxis: &#123;&#125;,</span><br><span class=\"line\">       <span class=\"comment\">//数据集合</span></span><br><span class=\"line\">       series: [</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">           name: <span class=\"string\">\"新增确诊\"</span>,</span><br><span class=\"line\">           type: <span class=\"string\">\"line\"</span>,</span><br><span class=\"line\">           <span class=\"comment\">// symbol:true,</span></span><br><span class=\"line\">           color: <span class=\"string\">\"#AD443D\"</span>,</span><br><span class=\"line\">           smooth: <span class=\"literal\">true</span>,</span><br><span class=\"line\">           data: [<span class=\"number\">80</span>, <span class=\"number\">67</span>, <span class=\"number\">51</span>, <span class=\"number\">42</span>, <span class=\"number\">31</span>, <span class=\"number\">20</span>, <span class=\"number\">11</span>]</span><br><span class=\"line\">         &#125;,</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">           name: <span class=\"string\">\"新增治愈\"</span>,</span><br><span class=\"line\">           type: <span class=\"string\">\"line\"</span>,</span><br><span class=\"line\">           color: <span class=\"string\">\"#85B89E\"</span>,</span><br><span class=\"line\">           smooth: <span class=\"literal\">true</span>,</span><br><span class=\"line\">           data: [<span class=\"number\">6</span>, <span class=\"number\">12</span>, <span class=\"number\">21</span>, <span class=\"number\">23</span>, <span class=\"number\">31</span>, <span class=\"number\">21</span>, <span class=\"number\">27</span>]</span><br><span class=\"line\">         &#125;,</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">           name: <span class=\"string\">\"死亡人数\"</span>,</span><br><span class=\"line\">           type: <span class=\"string\">\"line\"</span>,</span><br><span class=\"line\">           color: <span class=\"string\">\"grey\"</span>,</span><br><span class=\"line\">           smooth: <span class=\"literal\">true</span>,</span><br><span class=\"line\">           data: [<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">       ]</span><br><span class=\"line\">     &#125;);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>效果:</p>\n<p><img src=\"https://i.loli.net/2020/02/11/ZvhJqsxPHdt7IKE.png\" alt=\"WX20200211-151258@2x.png\"></p>\n<h1 id=\"echart-渲染地图\"><a href=\"#echart-渲染地图\" class=\"headerlink\" title=\"echart 渲染地图\"></a>echart 渲染地图</h1><p>首先需要下载地图文件.地图文件分为两种,一种是 <code>.js</code>格式,一种是<code>.json(.geoJson)</code>格式.<br>echart 官方目前不提供地图数据下载,需要从<a href=\"https://gallery.echartsjs.com/editor.html?c=xmCAi_XNuJ\" target=\"_blank\" rel=\"noopener\">https://gallery.echartsjs.com/editor.html?c=xmCAi_XNuJ</a>下载.下载下来的数据格式为<code>.geoJson</code>,<br>关于 geojson 的介绍,可以看下<a href=\"https://juejin.im/post/5d8e0eaa5188250915506b9b\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5d8e0eaa5188250915506b9b</a>.<br>我们把需要的地图数据都下载下来备用.</p>\n<h2 id=\"注册地图\"><a href=\"#注册地图\" class=\"headerlink\" title=\"注册地图\"></a>注册地图</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.mapChart = echarts.init(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"main\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">echarts.registerMap(mapName, <span class=\"built_in\">require</span>(<span class=\"string\">`@/static/<span class=\"subst\">$&#123;mapName&#125;</span>.json`</span>));</span><br></pre></td></tr></table></figure>\n<h2 id=\"根据数据渲染地图不同区域颜色\"><a href=\"#根据数据渲染地图不同区域颜色\" class=\"headerlink\" title=\"根据数据渲染地图不同区域颜色\"></a>根据数据渲染地图不同区域颜色</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//按需引入 echart 模块</span></span><br><span class=\"line\"><span class=\"comment\">//主模块</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> echarts = <span class=\"built_in\">require</span>(<span class=\"string\">\"echarts/lib/echarts\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//图标线组件</span></span><br><span class=\"line\"><span class=\"comment\">// require(\"echarts/lib/chart/line\");</span></span><br><span class=\"line\"><span class=\"comment\">//地图图标模块</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"echarts/lib/chart/map\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//提示框组件</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"echarts/lib/component/tooltip\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//图例组件</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"echarts/lib/component/legend\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//地图组件</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"echarts/lib/component/geo\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//视觉映射组件</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"echarts/lib/component/visualMap\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义 options</span></span><br><span class=\"line\"></span><br><span class=\"line\">options: &#123;</span><br><span class=\"line\">    <span class=\"comment\">//配置需要的提示框组件</span></span><br><span class=\"line\">        tooltip: &#123;&#125;,</span><br><span class=\"line\">        <span class=\"comment\">//视觉映射组件</span></span><br><span class=\"line\">        visualMap: &#123;</span><br><span class=\"line\">            <span class=\"comment\">//类型:分段式(根据数据大小划分为不同的区段,并根据不同区段来渲染颜色)</span></span><br><span class=\"line\">          type: <span class=\"string\">\"piecewise\"</span>,</span><br><span class=\"line\">          <span class=\"comment\">//定义不同区段的值域以及对应的颜色</span></span><br><span class=\"line\">          pieces: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              max: <span class=\"number\">10</span>,</span><br><span class=\"line\">              color: <span class=\"string\">\"#FAEBD2\"</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              min: <span class=\"number\">10</span>,</span><br><span class=\"line\">              max: <span class=\"number\">100</span>,</span><br><span class=\"line\">              color: <span class=\"string\">\"#E9A188\"</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              min: <span class=\"number\">100</span>,</span><br><span class=\"line\">              max: <span class=\"number\">200</span>,</span><br><span class=\"line\">              color: <span class=\"string\">\"#D56354\"</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              min: <span class=\"number\">200</span>,</span><br><span class=\"line\">              max: <span class=\"number\">500</span>,</span><br><span class=\"line\">              color: <span class=\"string\">\"#BB3A37\"</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              min: <span class=\"number\">500</span>,</span><br><span class=\"line\">              color: <span class=\"string\">\"#480F10\"</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          ],</span><br><span class=\"line\">          calculable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"comment\">//对应的数据索引</span></span><br><span class=\"line\">          seriesIndex: [<span class=\"number\">0</span>]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">//数据</span></span><br><span class=\"line\">        series: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              <span class=\"comment\">//tooltip 名称</span></span><br><span class=\"line\">            name: <span class=\"string\">\"确诊人数\"</span>,</span><br><span class=\"line\">            <span class=\"comment\">//类型</span></span><br><span class=\"line\">            type: <span class=\"string\">\"map\"</span>,</span><br><span class=\"line\">            <span class=\"comment\">//对应 geo 索引</span></span><br><span class=\"line\">            geoIndex: <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"comment\">//数据(通过 ajax 获取)</span></span><br><span class=\"line\">            data: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    name:<span class=\"string\">\"name\"</span>,</span><br><span class=\"line\">                    value:<span class=\"number\">10</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"comment\">//地图组件</span></span><br><span class=\"line\">        geo: &#123;</span><br><span class=\"line\">            <span class=\"comment\">//地图名称(需要提前使用registerMap注册)</span></span><br><span class=\"line\">          map: <span class=\"string\">\"zhejiang\"</span>,</span><br><span class=\"line\">          <span class=\"comment\">//是否允许用户手动缩放</span></span><br><span class=\"line\">          roam: <span class=\"literal\">false</span>,</span><br><span class=\"line\">          <span class=\"comment\">//放大比例</span></span><br><span class=\"line\">          zoom: <span class=\"number\">1.2</span>,</span><br><span class=\"line\">          <span class=\"comment\">//标识名称</span></span><br><span class=\"line\">          label: &#123;</span><br><span class=\"line\">            show: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            color: <span class=\"string\">\"rgba(0,0,0,0.4)\"</span>,</span><br><span class=\"line\">            fontSize: <span class=\"number\">12</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          itemStyle: &#123;</span><br><span class=\"line\">            borderColor: <span class=\"string\">\"rgba(0, 0, 0, 0.2)\"</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          emphasis: &#123;</span><br><span class=\"line\">            itemStyle: &#123;</span><br><span class=\"line\">              areaColor: <span class=\"literal\">null</span>,</span><br><span class=\"line\">              shadowOffsetX: <span class=\"number\">0</span>,</span><br><span class=\"line\">              shadowOffsetY: <span class=\"number\">0</span>,</span><br><span class=\"line\">              shadowBlur: <span class=\"number\">20</span>,</span><br><span class=\"line\">              borderWidth: <span class=\"number\">0</span>,</span><br><span class=\"line\">              shadowColor: <span class=\"string\">\"rgba(0, 0, 0, 0.5)\"</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n<p>效果:<br><img src=\"https://i.loli.net/2020/02/11/QDVhovzdLZ7Tsyb.png\" alt=\"WX20200211-150537@2x.png\"></p>\n<h2 id=\"地图下钻-上浮\"><a href=\"#地图下钻-上浮\" class=\"headerlink\" title=\"地图下钻/上浮\"></a>地图下钻/上浮</h2><h3 id=\"地图下钻\"><a href=\"#地图下钻\" class=\"headerlink\" title=\"地图下钻\"></a>地图下钻</h3><p>监听点击事件,根据点击的名称 require 地图,注册地图,修改 options,接着 setOptions 就可以了.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mapChart.on(<span class=\"string\">\"click\"</span>, (data) =&gt; &#123;</span><br><span class=\"line\">  echarts.registerMap(data.name, <span class=\"built_in\">require</span>(<span class=\"string\">`@/static/<span class=\"subst\">$&#123;data.name&#125;</span>.json`</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.options.geo.map = data.name;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.mapChart.setOption(<span class=\"keyword\">this</span>.options);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"地图上浮\"><a href=\"#地图上浮\" class=\"headerlink\" title=\"地图上浮\"></a>地图上浮</h3><p>与地图下钻的方法类似,使用父地图重新渲染就可以了.</p>\n<h2 id=\"添加地图标点\"><a href=\"#添加地图标点\" class=\"headerlink\" title=\"添加地图标点\"></a>添加地图标点</h2><p>在<code>option</code>中添加新的 series,类型为:<code>effectScatter</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">          type: <span class=\"string\">\"effectScatter\"</span>,</span><br><span class=\"line\">          <span class=\"comment\">//坐标系统,因为我们使用的是geo 组件,所以选择geo.</span></span><br><span class=\"line\">          coordinateSystem: <span class=\"string\">\"geo\"</span>,</span><br><span class=\"line\">          data: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              <span class=\"comment\">//名称</span></span><br><span class=\"line\">              name: <span class=\"string\">\"name\"</span>,</span><br><span class=\"line\">              <span class=\"comment\">//点的坐标,可以到地图的 json 文件中查找或者从地图 app 中查找.</span></span><br><span class=\"line\"></span><br><span class=\"line\">              value: []</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          ],</span><br><span class=\"line\">          <span class=\"comment\">// 标点的大小</span></span><br><span class=\"line\">          symbolSize: <span class=\"number\">12</span>,</span><br><span class=\"line\">          showEffectOn: <span class=\"string\">\"render\"</span>,</span><br><span class=\"line\">          <span class=\"comment\">//动态效果</span></span><br><span class=\"line\">          rippleEffect: &#123;</span><br><span class=\"line\">            <span class=\"comment\">//周期</span></span><br><span class=\"line\">            period: <span class=\"number\">5</span>,</span><br><span class=\"line\">            <span class=\"comment\">//放大倍数</span></span><br><span class=\"line\">            scale:  <span class=\"number\">6</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          itemStyle: &#123;</span><br><span class=\"line\">            color: <span class=\"string\">\"#FFB93D\"</span>,</span><br><span class=\"line\">            borderWidth: <span class=\"number\">3</span>,</span><br><span class=\"line\">            shadowColor: <span class=\"string\">\"rgba(0, 0, 0, 0.5)\"</span>,</span><br><span class=\"line\">            shadowBlur: <span class=\"number\">6</span></span><br><span class=\"line\">            <span class=\"comment\">// borderColor: \"red\"</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<p>如图:</p>\n<p><img src=\"https://i.loli.net/2020/04/15/cnpjLi39XClMOFN.png\" alt=\"img\"></p>\n<p>同时可以监听点击事件,根据 e.name 获取点击的名称.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echart.on(<span class=\"string\">\"click\"</span>,e=&gt;&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e.name)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"自定义地图\"><a href=\"#自定义地图\" class=\"headerlink\" title=\"自定义地图\"></a>自定义地图</h1><p>打开<a href=\"http://geojson.io\" target=\"_blank\" rel=\"noopener\">http://geojson.io</a>，这是一个可以在线绘制 geoJson 的网站，就是因为它我们才能随心所欲的绘制我们想要的地图样式和 geoJson 数据。<br>绘制好的地图可以以 <code>json</code> 格式下载,在 <code>echart.js</code> 中使用<code>registerMap</code>注册以后就可以使用了.</p>\n<h1 id=\"附\"><a href=\"#附\" class=\"headerlink\" title=\"附\"></a>附</h1><p><a href=\"https://www.echartsjs.com/zh/api.html#echarts\" target=\"_blank\" rel=\"noopener\">echart.js 官方教程</a></p>\n<p><a href=\"https://www.w3cschool.cn/echarts_tutorial/echarts_tutorial-mec528xa.html\" target=\"_blank\" rel=\"noopener\">w3c echart 教程</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"安装-echart-js\"><a href=\"#安装-echart-js\" class=\"headerlink\" title=\"安装 echart.js\"></a>安装 echart.js</h1><p>npm</p>\n<pre><code>npm install echarts --save\n</code></pre><p>yarn</p>\n<pre><code>yarn add echarts\n</code></pre><h1 id=\"按需加载-ehcart-js\"><a href=\"#按需加载-ehcart-js\" class=\"headerlink\" title=\"按需加载 ehcart.js\"></a>按需加载 ehcart.js</h1><p>全量加载:</p>\n<pre><code>var echarts = require(&apos;echarts&apos;);\n</code></pre><p>默认使用 require(‘echarts’) 得到的是已经加载了所有图表和组件的 ECharts 包，因此体积会比较大，如果在项目中对体积要求比较苛刻，也可以只按需引入需要的模块。</p>\n<pre><code>// 引入 ECharts 主模块\nvar echarts = require(&apos;echarts/lib/echarts&apos;);\n// 引入柱状图\nrequire(&apos;echarts/lib/chart/bar&apos;);\n// 引入提示框和标题组件\nrequire(&apos;echarts/lib/component/tooltip&apos;);\nrequire(&apos;echarts/lib/component/title&apos;);\n</code></pre><p>可以按需引入的模块列表见 <a href=\"https://github.com/apache/incubator-echarts/blob/master/index.js\" target=\"_blank\" rel=\"noopener\">https://github.com/apache/incubator-echarts/blob/master/index.js</a></p>\n<h1 id=\"初始化-echart-js\"><a href=\"#初始化-echart-js\" class=\"headerlink\" title=\"初始化 echart.js\"></a>初始化 echart.js</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 为 ECharts 准备一个具备大小（宽高）的 DOM --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"main\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 600px;height:400px;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 基于准备好的dom，初始化echarts实例</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> myChart = echarts.init(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"main\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 指定图表的配置项和数据</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> option = &#123;</span><br><span class=\"line\">  title: &#123;</span><br><span class=\"line\">    text: <span class=\"string\">\"ECharts 入门示例\"</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  tooltip: &#123;&#125;,</span><br><span class=\"line\">  legend: &#123;</span><br><span class=\"line\">    data: [<span class=\"string\">\"销量\"</span>],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  xAxis: &#123;</span><br><span class=\"line\">    data: [<span class=\"string\">\"衬衫\"</span>, <span class=\"string\">\"羊毛衫\"</span>, <span class=\"string\">\"雪纺衫\"</span>, <span class=\"string\">\"裤子\"</span>, <span class=\"string\">\"高跟鞋\"</span>, <span class=\"string\">\"袜子\"</span>],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  yAxis: &#123;&#125;,</span><br><span class=\"line\">  series: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      name: <span class=\"string\">\"销量\"</span>,</span><br><span class=\"line\">      type: <span class=\"string\">\"bar\"</span>,</span><br><span class=\"line\">      data: [<span class=\"number\">5</span>, <span class=\"number\">20</span>, <span class=\"number\">36</span>, <span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">20</span>],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用刚指定的配置项和数据显示图表。</span></span><br><span class=\"line\">myChart.setOption(option);</span><br></pre></td></tr></table></figure>\n<p>核心就是使用 <code>echart</code>的 <code>setOption</code>方法来显示图表.</p>\n<h1 id=\"echart-绘制图表\"><a href=\"#echart-绘制图表\" class=\"headerlink\" title=\"echart 绘制图表\"></a>echart 绘制图表</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">initTrending() &#123;</span><br><span class=\"line\">     <span class=\"keyword\">this</span>.trendingChart = echarts.init(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"trending\"</span>));</span><br><span class=\"line\">     <span class=\"keyword\">this</span>.trendingChart.setOption(&#123;</span><br><span class=\"line\">       tooltip: &#123;&#125;,</span><br><span class=\"line\">       <span class=\"comment\">//图例</span></span><br><span class=\"line\">       legend: &#123;</span><br><span class=\"line\">         data: [<span class=\"string\">\"新增确诊\"</span>, <span class=\"string\">\"新增治愈\"</span>, <span class=\"string\">\"死亡人数\"</span>]</span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\">       <span class=\"comment\">//横坐标</span></span><br><span class=\"line\">       xAxis: &#123;</span><br><span class=\"line\">         data: [<span class=\"string\">\"02.04\"</span>, <span class=\"string\">\"02.05\"</span>, <span class=\"string\">\"02.06\"</span>, <span class=\"string\">\"02.07\"</span>, <span class=\"string\">\"02.08\"</span>, <span class=\"string\">\"02.09\"</span>, <span class=\"string\">\"02.10\"</span>]</span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\">       <span class=\"comment\">//纵坐标</span></span><br><span class=\"line\">       yAxis: &#123;&#125;,</span><br><span class=\"line\">       <span class=\"comment\">//数据集合</span></span><br><span class=\"line\">       series: [</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">           name: <span class=\"string\">\"新增确诊\"</span>,</span><br><span class=\"line\">           type: <span class=\"string\">\"line\"</span>,</span><br><span class=\"line\">           <span class=\"comment\">// symbol:true,</span></span><br><span class=\"line\">           color: <span class=\"string\">\"#AD443D\"</span>,</span><br><span class=\"line\">           smooth: <span class=\"literal\">true</span>,</span><br><span class=\"line\">           data: [<span class=\"number\">80</span>, <span class=\"number\">67</span>, <span class=\"number\">51</span>, <span class=\"number\">42</span>, <span class=\"number\">31</span>, <span class=\"number\">20</span>, <span class=\"number\">11</span>]</span><br><span class=\"line\">         &#125;,</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">           name: <span class=\"string\">\"新增治愈\"</span>,</span><br><span class=\"line\">           type: <span class=\"string\">\"line\"</span>,</span><br><span class=\"line\">           color: <span class=\"string\">\"#85B89E\"</span>,</span><br><span class=\"line\">           smooth: <span class=\"literal\">true</span>,</span><br><span class=\"line\">           data: [<span class=\"number\">6</span>, <span class=\"number\">12</span>, <span class=\"number\">21</span>, <span class=\"number\">23</span>, <span class=\"number\">31</span>, <span class=\"number\">21</span>, <span class=\"number\">27</span>]</span><br><span class=\"line\">         &#125;,</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">           name: <span class=\"string\">\"死亡人数\"</span>,</span><br><span class=\"line\">           type: <span class=\"string\">\"line\"</span>,</span><br><span class=\"line\">           color: <span class=\"string\">\"grey\"</span>,</span><br><span class=\"line\">           smooth: <span class=\"literal\">true</span>,</span><br><span class=\"line\">           data: [<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>]</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">       ]</span><br><span class=\"line\">     &#125;);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>效果:</p>\n<p><img src=\"https://i.loli.net/2020/02/11/ZvhJqsxPHdt7IKE.png\" alt=\"WX20200211-151258@2x.png\"></p>\n<h1 id=\"echart-渲染地图\"><a href=\"#echart-渲染地图\" class=\"headerlink\" title=\"echart 渲染地图\"></a>echart 渲染地图</h1><p>首先需要下载地图文件.地图文件分为两种,一种是 <code>.js</code>格式,一种是<code>.json(.geoJson)</code>格式.<br>echart 官方目前不提供地图数据下载,需要从<a href=\"https://gallery.echartsjs.com/editor.html?c=xmCAi_XNuJ\" target=\"_blank\" rel=\"noopener\">https://gallery.echartsjs.com/editor.html?c=xmCAi_XNuJ</a>下载.下载下来的数据格式为<code>.geoJson</code>,<br>关于 geojson 的介绍,可以看下<a href=\"https://juejin.im/post/5d8e0eaa5188250915506b9b\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5d8e0eaa5188250915506b9b</a>.<br>我们把需要的地图数据都下载下来备用.</p>\n<h2 id=\"注册地图\"><a href=\"#注册地图\" class=\"headerlink\" title=\"注册地图\"></a>注册地图</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.mapChart = echarts.init(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"main\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">echarts.registerMap(mapName, <span class=\"built_in\">require</span>(<span class=\"string\">`@/static/<span class=\"subst\">$&#123;mapName&#125;</span>.json`</span>));</span><br></pre></td></tr></table></figure>\n<h2 id=\"根据数据渲染地图不同区域颜色\"><a href=\"#根据数据渲染地图不同区域颜色\" class=\"headerlink\" title=\"根据数据渲染地图不同区域颜色\"></a>根据数据渲染地图不同区域颜色</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//按需引入 echart 模块</span></span><br><span class=\"line\"><span class=\"comment\">//主模块</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> echarts = <span class=\"built_in\">require</span>(<span class=\"string\">\"echarts/lib/echarts\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//图标线组件</span></span><br><span class=\"line\"><span class=\"comment\">// require(\"echarts/lib/chart/line\");</span></span><br><span class=\"line\"><span class=\"comment\">//地图图标模块</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"echarts/lib/chart/map\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//提示框组件</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"echarts/lib/component/tooltip\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//图例组件</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"echarts/lib/component/legend\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//地图组件</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"echarts/lib/component/geo\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//视觉映射组件</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"echarts/lib/component/visualMap\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//定义 options</span></span><br><span class=\"line\"></span><br><span class=\"line\">options: &#123;</span><br><span class=\"line\">    <span class=\"comment\">//配置需要的提示框组件</span></span><br><span class=\"line\">        tooltip: &#123;&#125;,</span><br><span class=\"line\">        <span class=\"comment\">//视觉映射组件</span></span><br><span class=\"line\">        visualMap: &#123;</span><br><span class=\"line\">            <span class=\"comment\">//类型:分段式(根据数据大小划分为不同的区段,并根据不同区段来渲染颜色)</span></span><br><span class=\"line\">          type: <span class=\"string\">\"piecewise\"</span>,</span><br><span class=\"line\">          <span class=\"comment\">//定义不同区段的值域以及对应的颜色</span></span><br><span class=\"line\">          pieces: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              max: <span class=\"number\">10</span>,</span><br><span class=\"line\">              color: <span class=\"string\">\"#FAEBD2\"</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              min: <span class=\"number\">10</span>,</span><br><span class=\"line\">              max: <span class=\"number\">100</span>,</span><br><span class=\"line\">              color: <span class=\"string\">\"#E9A188\"</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              min: <span class=\"number\">100</span>,</span><br><span class=\"line\">              max: <span class=\"number\">200</span>,</span><br><span class=\"line\">              color: <span class=\"string\">\"#D56354\"</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              min: <span class=\"number\">200</span>,</span><br><span class=\"line\">              max: <span class=\"number\">500</span>,</span><br><span class=\"line\">              color: <span class=\"string\">\"#BB3A37\"</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              min: <span class=\"number\">500</span>,</span><br><span class=\"line\">              color: <span class=\"string\">\"#480F10\"</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          ],</span><br><span class=\"line\">          calculable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"comment\">//对应的数据索引</span></span><br><span class=\"line\">          seriesIndex: [<span class=\"number\">0</span>]</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">//数据</span></span><br><span class=\"line\">        series: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              <span class=\"comment\">//tooltip 名称</span></span><br><span class=\"line\">            name: <span class=\"string\">\"确诊人数\"</span>,</span><br><span class=\"line\">            <span class=\"comment\">//类型</span></span><br><span class=\"line\">            type: <span class=\"string\">\"map\"</span>,</span><br><span class=\"line\">            <span class=\"comment\">//对应 geo 索引</span></span><br><span class=\"line\">            geoIndex: <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"comment\">//数据(通过 ajax 获取)</span></span><br><span class=\"line\">            data: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    name:<span class=\"string\">\"name\"</span>,</span><br><span class=\"line\">                    value:<span class=\"number\">10</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"comment\">//地图组件</span></span><br><span class=\"line\">        geo: &#123;</span><br><span class=\"line\">            <span class=\"comment\">//地图名称(需要提前使用registerMap注册)</span></span><br><span class=\"line\">          map: <span class=\"string\">\"zhejiang\"</span>,</span><br><span class=\"line\">          <span class=\"comment\">//是否允许用户手动缩放</span></span><br><span class=\"line\">          roam: <span class=\"literal\">false</span>,</span><br><span class=\"line\">          <span class=\"comment\">//放大比例</span></span><br><span class=\"line\">          zoom: <span class=\"number\">1.2</span>,</span><br><span class=\"line\">          <span class=\"comment\">//标识名称</span></span><br><span class=\"line\">          label: &#123;</span><br><span class=\"line\">            show: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            color: <span class=\"string\">\"rgba(0,0,0,0.4)\"</span>,</span><br><span class=\"line\">            fontSize: <span class=\"number\">12</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          itemStyle: &#123;</span><br><span class=\"line\">            borderColor: <span class=\"string\">\"rgba(0, 0, 0, 0.2)\"</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          emphasis: &#123;</span><br><span class=\"line\">            itemStyle: &#123;</span><br><span class=\"line\">              areaColor: <span class=\"literal\">null</span>,</span><br><span class=\"line\">              shadowOffsetX: <span class=\"number\">0</span>,</span><br><span class=\"line\">              shadowOffsetY: <span class=\"number\">0</span>,</span><br><span class=\"line\">              shadowBlur: <span class=\"number\">20</span>,</span><br><span class=\"line\">              borderWidth: <span class=\"number\">0</span>,</span><br><span class=\"line\">              shadowColor: <span class=\"string\">\"rgba(0, 0, 0, 0.5)\"</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n<p>效果:<br><img src=\"https://i.loli.net/2020/02/11/QDVhovzdLZ7Tsyb.png\" alt=\"WX20200211-150537@2x.png\"></p>\n<h2 id=\"地图下钻-上浮\"><a href=\"#地图下钻-上浮\" class=\"headerlink\" title=\"地图下钻/上浮\"></a>地图下钻/上浮</h2><h3 id=\"地图下钻\"><a href=\"#地图下钻\" class=\"headerlink\" title=\"地图下钻\"></a>地图下钻</h3><p>监听点击事件,根据点击的名称 require 地图,注册地图,修改 options,接着 setOptions 就可以了.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mapChart.on(<span class=\"string\">\"click\"</span>, (data) =&gt; &#123;</span><br><span class=\"line\">  echarts.registerMap(data.name, <span class=\"built_in\">require</span>(<span class=\"string\">`@/static/<span class=\"subst\">$&#123;data.name&#125;</span>.json`</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.options.geo.map = data.name;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.mapChart.setOption(<span class=\"keyword\">this</span>.options);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"地图上浮\"><a href=\"#地图上浮\" class=\"headerlink\" title=\"地图上浮\"></a>地图上浮</h3><p>与地图下钻的方法类似,使用父地图重新渲染就可以了.</p>\n<h2 id=\"添加地图标点\"><a href=\"#添加地图标点\" class=\"headerlink\" title=\"添加地图标点\"></a>添加地图标点</h2><p>在<code>option</code>中添加新的 series,类型为:<code>effectScatter</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">          type: <span class=\"string\">\"effectScatter\"</span>,</span><br><span class=\"line\">          <span class=\"comment\">//坐标系统,因为我们使用的是geo 组件,所以选择geo.</span></span><br><span class=\"line\">          coordinateSystem: <span class=\"string\">\"geo\"</span>,</span><br><span class=\"line\">          data: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              <span class=\"comment\">//名称</span></span><br><span class=\"line\">              name: <span class=\"string\">\"name\"</span>,</span><br><span class=\"line\">              <span class=\"comment\">//点的坐标,可以到地图的 json 文件中查找或者从地图 app 中查找.</span></span><br><span class=\"line\"></span><br><span class=\"line\">              value: []</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          ],</span><br><span class=\"line\">          <span class=\"comment\">// 标点的大小</span></span><br><span class=\"line\">          symbolSize: <span class=\"number\">12</span>,</span><br><span class=\"line\">          showEffectOn: <span class=\"string\">\"render\"</span>,</span><br><span class=\"line\">          <span class=\"comment\">//动态效果</span></span><br><span class=\"line\">          rippleEffect: &#123;</span><br><span class=\"line\">            <span class=\"comment\">//周期</span></span><br><span class=\"line\">            period: <span class=\"number\">5</span>,</span><br><span class=\"line\">            <span class=\"comment\">//放大倍数</span></span><br><span class=\"line\">            scale:  <span class=\"number\">6</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          itemStyle: &#123;</span><br><span class=\"line\">            color: <span class=\"string\">\"#FFB93D\"</span>,</span><br><span class=\"line\">            borderWidth: <span class=\"number\">3</span>,</span><br><span class=\"line\">            shadowColor: <span class=\"string\">\"rgba(0, 0, 0, 0.5)\"</span>,</span><br><span class=\"line\">            shadowBlur: <span class=\"number\">6</span></span><br><span class=\"line\">            <span class=\"comment\">// borderColor: \"red\"</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<p>如图:</p>\n<p><img src=\"https://i.loli.net/2020/04/15/cnpjLi39XClMOFN.png\" alt=\"img\"></p>\n<p>同时可以监听点击事件,根据 e.name 获取点击的名称.<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echart.on(<span class=\"string\">\"click\"</span>,e=&gt;&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e.name)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"自定义地图\"><a href=\"#自定义地图\" class=\"headerlink\" title=\"自定义地图\"></a>自定义地图</h1><p>打开<a href=\"http://geojson.io\" target=\"_blank\" rel=\"noopener\">http://geojson.io</a>，这是一个可以在线绘制 geoJson 的网站，就是因为它我们才能随心所欲的绘制我们想要的地图样式和 geoJson 数据。<br>绘制好的地图可以以 <code>json</code> 格式下载,在 <code>echart.js</code> 中使用<code>registerMap</code>注册以后就可以使用了.</p>\n<h1 id=\"附\"><a href=\"#附\" class=\"headerlink\" title=\"附\"></a>附</h1><p><a href=\"https://www.echartsjs.com/zh/api.html#echarts\" target=\"_blank\" rel=\"noopener\">echart.js 官方教程</a></p>\n<p><a href=\"https://www.w3cschool.cn/echarts_tutorial/echarts_tutorial-mec528xa.html\" target=\"_blank\" rel=\"noopener\">w3c echart 教程</a></p>\n"},{"title":"vue 项目 监听页面滚动并固定元素到顶部","_content":"\n> 一个常见的需求,页面滚动过一段距离后将某个元素固定在页面顶端,常见于固定长表格的表头\n\n实现:\n\n# 1. 监听滚动距离\n\n```js\n\n//项目初始化时监听滚动事件\n\n\ndata(){\n    return {\n\n        isFixed:false\n    }\n}\nmounted() {\n\n    window.addEventListener(\"scroll\", this.handleScroll);\n  },\n\n//摧毁组件时取消监听\n  destroyed() {\n    window.removeEventListener(\"scroll\", this.handleScroll);\n  }\n\n\nmethods:{\n    handleScroll() {\n    //获取 ref 为 mainContainer 的 dom 到屏幕顶端的距离\n      let offsetTop = this.$refs.mainContainer.offsetTop;\n      //兼容性获取滚动高度\n      var scrollTop = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop;\n\n      //根据滚动距离判断是否需要固定 dom\n      if (offsetTop - scrollTop < 0) {\n        this.isFixed = true;\n      } else {\n        this.isFixed = false;\n      }\n    }\n}\n```\n\n# 2. 为 dom 添加动态 class\n\n```html\n<div :class=\"isFixed?'fixed':''\"></div>\n```\n\n# 3.配置 fixed 样式\n\n```css\n/* main.scss */\n.fixed {\n  width: 96%;\n  position: fixed;\n  background-color: #fff;\n  height: 30px;\n  top: 0;\n  left: 0;\n  font-size: 14px;\n  font-weight: 900;\n  padding-top: 4px;\n  padding-left: 2%;\n  padding-right: 2%;\n  //   z-index: 9;\n}\n```\n\n# 4.tip\n\n## 1\n使用 `this.$refs`时必须确保 dom 已经渲染,例如放在 v-else\n中切条件为 `true` 时是无法获取到 dom 的.\n\n## 2\n\n针对默认表格固定 thead 以后 tbody 中数据样式错乱的问题,可以再添加一个表头,在超过预设滚定距离以后显示,并固定在页面顶端.\n\n```html\n<table class=\"table\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\n  <div v-show=\"isFixed\" :class=\"isFixed?'fixed':''\">\n    <div class=\"flex center\">\n      <div>排名</div>\n      <div style=\"width:110px\">{{activeIndex==0?\"微信号文章\":\"微博\"}}</div>\n    </div>\n  </div>\n  <thead >\n    <tr>\n      <th>排名</th>\n      <th class=\"title\">微信号文章</th>\n      <th>阅读数</th>\n      <th>在看数</th>\n      <th>点赞率</th>\n    </tr>\n  </thead>\n</table>\n```\n","source":"_posts/2020.03.06.listenScroll.md","raw":"---\ntitle: vue 项目 监听页面滚动并固定元素到顶部\ntags: [vue, JavaScript]\ncategories: 技术\n---\n\n> 一个常见的需求,页面滚动过一段距离后将某个元素固定在页面顶端,常见于固定长表格的表头\n\n实现:\n\n# 1. 监听滚动距离\n\n```js\n\n//项目初始化时监听滚动事件\n\n\ndata(){\n    return {\n\n        isFixed:false\n    }\n}\nmounted() {\n\n    window.addEventListener(\"scroll\", this.handleScroll);\n  },\n\n//摧毁组件时取消监听\n  destroyed() {\n    window.removeEventListener(\"scroll\", this.handleScroll);\n  }\n\n\nmethods:{\n    handleScroll() {\n    //获取 ref 为 mainContainer 的 dom 到屏幕顶端的距离\n      let offsetTop = this.$refs.mainContainer.offsetTop;\n      //兼容性获取滚动高度\n      var scrollTop = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop;\n\n      //根据滚动距离判断是否需要固定 dom\n      if (offsetTop - scrollTop < 0) {\n        this.isFixed = true;\n      } else {\n        this.isFixed = false;\n      }\n    }\n}\n```\n\n# 2. 为 dom 添加动态 class\n\n```html\n<div :class=\"isFixed?'fixed':''\"></div>\n```\n\n# 3.配置 fixed 样式\n\n```css\n/* main.scss */\n.fixed {\n  width: 96%;\n  position: fixed;\n  background-color: #fff;\n  height: 30px;\n  top: 0;\n  left: 0;\n  font-size: 14px;\n  font-weight: 900;\n  padding-top: 4px;\n  padding-left: 2%;\n  padding-right: 2%;\n  //   z-index: 9;\n}\n```\n\n# 4.tip\n\n## 1\n使用 `this.$refs`时必须确保 dom 已经渲染,例如放在 v-else\n中切条件为 `true` 时是无法获取到 dom 的.\n\n## 2\n\n针对默认表格固定 thead 以后 tbody 中数据样式错乱的问题,可以再添加一个表头,在超过预设滚定距离以后显示,并固定在页面顶端.\n\n```html\n<table class=\"table\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\n  <div v-show=\"isFixed\" :class=\"isFixed?'fixed':''\">\n    <div class=\"flex center\">\n      <div>排名</div>\n      <div style=\"width:110px\">{{activeIndex==0?\"微信号文章\":\"微博\"}}</div>\n    </div>\n  </div>\n  <thead >\n    <tr>\n      <th>排名</th>\n      <th class=\"title\">微信号文章</th>\n      <th>阅读数</th>\n      <th>在看数</th>\n      <th>点赞率</th>\n    </tr>\n  </thead>\n</table>\n```\n","slug":"2020.03.06.listenScroll","published":1,"date":"2020-03-06T06:44:07.270Z","updated":"2020-03-06T06:55:46.478Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziiqk0021rh9zd532580o","content":"<blockquote>\n<p>一个常见的需求,页面滚动过一段距离后将某个元素固定在页面顶端,常见于固定长表格的表头</p>\n</blockquote>\n<p>实现:</p>\n<h1 id=\"1-监听滚动距离\"><a href=\"#1-监听滚动距离\" class=\"headerlink\" title=\"1. 监听滚动距离\"></a>1. 监听滚动距离</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//项目初始化时监听滚动事件</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">data()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        isFixed:<span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">mounted() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"scroll\"</span>, <span class=\"keyword\">this</span>.handleScroll);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//摧毁组件时取消监听</span></span><br><span class=\"line\">  destroyed() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.removeEventListener(<span class=\"string\">\"scroll\"</span>, <span class=\"keyword\">this</span>.handleScroll);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">methods:&#123;</span><br><span class=\"line\">    handleScroll() &#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取 ref 为 mainContainer 的 dom 到屏幕顶端的距离</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> offsetTop = <span class=\"keyword\">this</span>.$refs.mainContainer.offsetTop;</span><br><span class=\"line\">      <span class=\"comment\">//兼容性获取滚动高度</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> scrollTop = <span class=\"built_in\">window</span>.pageYOffset || <span class=\"built_in\">document</span>.documentElement.scrollTop || <span class=\"built_in\">document</span>.body.scrollTop;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//根据滚动距离判断是否需要固定 dom</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (offsetTop - scrollTop &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.isFixed = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.isFixed = <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-为-dom-添加动态-class\"><a href=\"#2-为-dom-添加动态-class\" class=\"headerlink\" title=\"2. 为 dom 添加动态 class\"></a>2. 为 dom 添加动态 class</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"isFixed?'fixed':''\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"3-配置-fixed-样式\"><a href=\"#3-配置-fixed-样式\" class=\"headerlink\" title=\"3.配置 fixed 样式\"></a>3.配置 fixed 样式</h1><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* main.scss */</span></span><br><span class=\"line\"><span class=\"selector-class\">.fixed</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">96%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: <span class=\"number\">900</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding-top</span>: <span class=\"number\">4px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding-left</span>: <span class=\"number\">2%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding-right</span>: <span class=\"number\">2%</span>;</span><br><span class=\"line\">  //   z-index: 9;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-tip\"><a href=\"#4-tip\" class=\"headerlink\" title=\"4.tip\"></a>4.tip</h1><h2 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h2><p>使用 <code>this.$refs</code>时必须确保 dom 已经渲染,例如放在 v-else<br>中切条件为 <code>true</code> 时是无法获取到 dom 的.</p>\n<h2 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h2><p>针对默认表格固定 thead 以后 tbody 中数据样式错乱的问题,可以再添加一个表头,在超过预设滚定距离以后显示,并固定在页面顶端.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">class</span>=<span class=\"string\">\"table\"</span> <span class=\"attr\">border</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">cellspacing</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">cellpadding</span>=<span class=\"string\">\"0\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"isFixed\"</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"isFixed?'fixed':''\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"flex center\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>排名<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width:110px\"</span>&gt;</span>&#123;&#123;activeIndex==0?\"微信号文章\":\"微博\"&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">thead</span> &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>排名<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">th</span> <span class=\"attr\">class</span>=<span class=\"string\">\"title\"</span>&gt;</span>微信号文章<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>阅读数<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>在看数<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>点赞率<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>一个常见的需求,页面滚动过一段距离后将某个元素固定在页面顶端,常见于固定长表格的表头</p>\n</blockquote>\n<p>实现:</p>\n<h1 id=\"1-监听滚动距离\"><a href=\"#1-监听滚动距离\" class=\"headerlink\" title=\"1. 监听滚动距离\"></a>1. 监听滚动距离</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//项目初始化时监听滚动事件</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">data()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        isFixed:<span class=\"literal\">false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">mounted() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"scroll\"</span>, <span class=\"keyword\">this</span>.handleScroll);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//摧毁组件时取消监听</span></span><br><span class=\"line\">  destroyed() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.removeEventListener(<span class=\"string\">\"scroll\"</span>, <span class=\"keyword\">this</span>.handleScroll);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">methods:&#123;</span><br><span class=\"line\">    handleScroll() &#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取 ref 为 mainContainer 的 dom 到屏幕顶端的距离</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> offsetTop = <span class=\"keyword\">this</span>.$refs.mainContainer.offsetTop;</span><br><span class=\"line\">      <span class=\"comment\">//兼容性获取滚动高度</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> scrollTop = <span class=\"built_in\">window</span>.pageYOffset || <span class=\"built_in\">document</span>.documentElement.scrollTop || <span class=\"built_in\">document</span>.body.scrollTop;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//根据滚动距离判断是否需要固定 dom</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (offsetTop - scrollTop &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.isFixed = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.isFixed = <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-为-dom-添加动态-class\"><a href=\"#2-为-dom-添加动态-class\" class=\"headerlink\" title=\"2. 为 dom 添加动态 class\"></a>2. 为 dom 添加动态 class</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"isFixed?'fixed':''\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"3-配置-fixed-样式\"><a href=\"#3-配置-fixed-样式\" class=\"headerlink\" title=\"3.配置 fixed 样式\"></a>3.配置 fixed 样式</h1><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* main.scss */</span></span><br><span class=\"line\"><span class=\"selector-class\">.fixed</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">96%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: <span class=\"number\">900</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding-top</span>: <span class=\"number\">4px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding-left</span>: <span class=\"number\">2%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding-right</span>: <span class=\"number\">2%</span>;</span><br><span class=\"line\">  //   z-index: 9;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-tip\"><a href=\"#4-tip\" class=\"headerlink\" title=\"4.tip\"></a>4.tip</h1><h2 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h2><p>使用 <code>this.$refs</code>时必须确保 dom 已经渲染,例如放在 v-else<br>中切条件为 <code>true</code> 时是无法获取到 dom 的.</p>\n<h2 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h2><p>针对默认表格固定 thead 以后 tbody 中数据样式错乱的问题,可以再添加一个表头,在超过预设滚定距离以后显示,并固定在页面顶端.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">class</span>=<span class=\"string\">\"table\"</span> <span class=\"attr\">border</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">cellspacing</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">cellpadding</span>=<span class=\"string\">\"0\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-show</span>=<span class=\"string\">\"isFixed\"</span> <span class=\"attr\">:class</span>=<span class=\"string\">\"isFixed?'fixed':''\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"flex center\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>排名<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width:110px\"</span>&gt;</span>&#123;&#123;activeIndex==0?\"微信号文章\":\"微博\"&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">thead</span> &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>排名<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">th</span> <span class=\"attr\">class</span>=<span class=\"string\">\"title\"</span>&gt;</span>微信号文章<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>阅读数<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>在看数<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>点赞率<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"使用 vscode 插件实现在小程序中使用 less/sass/scss","_content":"\n> 总所周知,微信小程序的官方开发工具(微信开发者工具极其难用),因此我切换到了宇宙第一编辑器 vscode 进行小程序的开发.使用 vscode 开发可以安装两个扩展插件:minapp(支持微信小程序标签、属性的智能补全，并且提示中包含文档内容)和 wechat-snippet(这个插件主要的功能就是代码辅助，代码片段自动完成，可以作为上个插件的补充)\n\n> 同时由于微信魔改的 css 文件(.wxss)并不支持 scss/less 等,所以这里我们也通过 vscode 插件来实现用 scss/less 写小程序样式\n\n# 1.less\n\n## 安装 easy-less\n\n## 修改 vscode 配置文件\n\n```json\n\n\n  // 对EasyLess的配置，此段配置去掉则默认生成一个css文件\n  \"less.compile\": {\n    \"compress\": false, //是否压缩\n    \"sourceMap\": false, //是否生成map文件\n    \"out\": true, // 是否输出文件，false为不输出\n    \"outExt\": \".wxss\", // 输出文件的后缀,小程序可以写'wxss'\n  },\n```\n\n## 在需要 wxss 文件的目录下新建一个 less 文件,保存以后就会在同级目录中生成一个 wxss 文件.\n\n# 2.sass/scss\n\n## 安装 easy-sass\n\n## 修改 vscode 配置文件\n\n```json\n\n\n   // 对EasySass的配置，此段配置去掉则默认生成一个css文件和一个压缩的min.css文件\n  \"easysass.formats\": [\n    {\n      \"format\": \"expanded\", //格式，expanded不压缩，compressed压缩\n      \"extension\": \".wxss\" //输出文件的后缀,小程序可以写'wxss'\n    },\n    // {\n    //   \"format\": \"compressed\",\n    //   \"extension\": \".min.css\"\n    // }\n  ],\n```\n\n相对于前者，EasySass支持一次多生成几种类型的文件，在配置数组里如上多写几个就行了。\n\n## 使用方法同上\n","source":"_posts/2020.03.10.useSassInWeApp.md","raw":"---\ntitle: 使用 vscode 插件实现在小程序中使用 less/sass/scss\ntags: [vscode, 小程序, css, scss, less]\ncategories: 技术\n---\n\n> 总所周知,微信小程序的官方开发工具(微信开发者工具极其难用),因此我切换到了宇宙第一编辑器 vscode 进行小程序的开发.使用 vscode 开发可以安装两个扩展插件:minapp(支持微信小程序标签、属性的智能补全，并且提示中包含文档内容)和 wechat-snippet(这个插件主要的功能就是代码辅助，代码片段自动完成，可以作为上个插件的补充)\n\n> 同时由于微信魔改的 css 文件(.wxss)并不支持 scss/less 等,所以这里我们也通过 vscode 插件来实现用 scss/less 写小程序样式\n\n# 1.less\n\n## 安装 easy-less\n\n## 修改 vscode 配置文件\n\n```json\n\n\n  // 对EasyLess的配置，此段配置去掉则默认生成一个css文件\n  \"less.compile\": {\n    \"compress\": false, //是否压缩\n    \"sourceMap\": false, //是否生成map文件\n    \"out\": true, // 是否输出文件，false为不输出\n    \"outExt\": \".wxss\", // 输出文件的后缀,小程序可以写'wxss'\n  },\n```\n\n## 在需要 wxss 文件的目录下新建一个 less 文件,保存以后就会在同级目录中生成一个 wxss 文件.\n\n# 2.sass/scss\n\n## 安装 easy-sass\n\n## 修改 vscode 配置文件\n\n```json\n\n\n   // 对EasySass的配置，此段配置去掉则默认生成一个css文件和一个压缩的min.css文件\n  \"easysass.formats\": [\n    {\n      \"format\": \"expanded\", //格式，expanded不压缩，compressed压缩\n      \"extension\": \".wxss\" //输出文件的后缀,小程序可以写'wxss'\n    },\n    // {\n    //   \"format\": \"compressed\",\n    //   \"extension\": \".min.css\"\n    // }\n  ],\n```\n\n相对于前者，EasySass支持一次多生成几种类型的文件，在配置数组里如上多写几个就行了。\n\n## 使用方法同上\n","slug":"2020.03.10.useSassInWeApp","published":1,"date":"2020-03-10T06:58:21.094Z","updated":"2020-03-10T07:08:20.351Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziiql0022rh9z6u1kdivj","content":"<blockquote>\n<p>总所周知,微信小程序的官方开发工具(微信开发者工具极其难用),因此我切换到了宇宙第一编辑器 vscode 进行小程序的开发.使用 vscode 开发可以安装两个扩展插件:minapp(支持微信小程序标签、属性的智能补全，并且提示中包含文档内容)和 wechat-snippet(这个插件主要的功能就是代码辅助，代码片段自动完成，可以作为上个插件的补充)</p>\n<p>同时由于微信魔改的 css 文件(.wxss)并不支持 scss/less 等,所以这里我们也通过 vscode 插件来实现用 scss/less 写小程序样式</p>\n</blockquote>\n<h1 id=\"1-less\"><a href=\"#1-less\" class=\"headerlink\" title=\"1.less\"></a>1.less</h1><h2 id=\"安装-easy-less\"><a href=\"#安装-easy-less\" class=\"headerlink\" title=\"安装 easy-less\"></a>安装 easy-less</h2><h2 id=\"修改-vscode-配置文件\"><a href=\"#修改-vscode-配置文件\" class=\"headerlink\" title=\"修改 vscode 配置文件\"></a>修改 vscode 配置文件</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对EasyLess的配置，此段配置去掉则默认生成一个css文件</span></span><br><span class=\"line\">\"less.compile\": &#123;</span><br><span class=\"line\">  \"compress\": false, //是否压缩</span><br><span class=\"line\">  \"sourceMap\": false, //是否生成map文件</span><br><span class=\"line\">  \"out\": true, // 是否输出文件，false为不输出</span><br><span class=\"line\">  \"outExt\": \".wxss\", // 输出文件的后缀,小程序可以写'wxss'</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h2 id=\"在需要-wxss-文件的目录下新建一个-less-文件-保存以后就会在同级目录中生成一个-wxss-文件\"><a href=\"#在需要-wxss-文件的目录下新建一个-less-文件-保存以后就会在同级目录中生成一个-wxss-文件\" class=\"headerlink\" title=\"在需要 wxss 文件的目录下新建一个 less 文件,保存以后就会在同级目录中生成一个 wxss 文件.\"></a>在需要 wxss 文件的目录下新建一个 less 文件,保存以后就会在同级目录中生成一个 wxss 文件.</h2><h1 id=\"2-sass-scss\"><a href=\"#2-sass-scss\" class=\"headerlink\" title=\"2.sass/scss\"></a>2.sass/scss</h1><h2 id=\"安装-easy-sass\"><a href=\"#安装-easy-sass\" class=\"headerlink\" title=\"安装 easy-sass\"></a>安装 easy-sass</h2><h2 id=\"修改-vscode-配置文件-1\"><a href=\"#修改-vscode-配置文件-1\" class=\"headerlink\" title=\"修改 vscode 配置文件\"></a>修改 vscode 配置文件</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 对EasySass的配置，此段配置去掉则默认生成一个css文件和一个压缩的min.css文件</span></span><br><span class=\"line\">\"easysass.formats\": [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"format\"</span>: <span class=\"string\">\"expanded\"</span>, <span class=\"comment\">//格式，expanded不压缩，compressed压缩</span></span><br><span class=\"line\">    <span class=\"attr\">\"extension\"</span>: <span class=\"string\">\".wxss\"</span> <span class=\"comment\">//输出文件的后缀,小程序可以写'wxss'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//   \"format\": \"compressed\",</span></span><br><span class=\"line\">  <span class=\"comment\">//   \"extension\": \".min.css\"</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure>\n<p>相对于前者，EasySass支持一次多生成几种类型的文件，在配置数组里如上多写几个就行了。</p>\n<h2 id=\"使用方法同上\"><a href=\"#使用方法同上\" class=\"headerlink\" title=\"使用方法同上\"></a>使用方法同上</h2>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>总所周知,微信小程序的官方开发工具(微信开发者工具极其难用),因此我切换到了宇宙第一编辑器 vscode 进行小程序的开发.使用 vscode 开发可以安装两个扩展插件:minapp(支持微信小程序标签、属性的智能补全，并且提示中包含文档内容)和 wechat-snippet(这个插件主要的功能就是代码辅助，代码片段自动完成，可以作为上个插件的补充)</p>\n<p>同时由于微信魔改的 css 文件(.wxss)并不支持 scss/less 等,所以这里我们也通过 vscode 插件来实现用 scss/less 写小程序样式</p>\n</blockquote>\n<h1 id=\"1-less\"><a href=\"#1-less\" class=\"headerlink\" title=\"1.less\"></a>1.less</h1><h2 id=\"安装-easy-less\"><a href=\"#安装-easy-less\" class=\"headerlink\" title=\"安装 easy-less\"></a>安装 easy-less</h2><h2 id=\"修改-vscode-配置文件\"><a href=\"#修改-vscode-配置文件\" class=\"headerlink\" title=\"修改 vscode 配置文件\"></a>修改 vscode 配置文件</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对EasyLess的配置，此段配置去掉则默认生成一个css文件</span></span><br><span class=\"line\">\"less.compile\": &#123;</span><br><span class=\"line\">  \"compress\": false, //是否压缩</span><br><span class=\"line\">  \"sourceMap\": false, //是否生成map文件</span><br><span class=\"line\">  \"out\": true, // 是否输出文件，false为不输出</span><br><span class=\"line\">  \"outExt\": \".wxss\", // 输出文件的后缀,小程序可以写'wxss'</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h2 id=\"在需要-wxss-文件的目录下新建一个-less-文件-保存以后就会在同级目录中生成一个-wxss-文件\"><a href=\"#在需要-wxss-文件的目录下新建一个-less-文件-保存以后就会在同级目录中生成一个-wxss-文件\" class=\"headerlink\" title=\"在需要 wxss 文件的目录下新建一个 less 文件,保存以后就会在同级目录中生成一个 wxss 文件.\"></a>在需要 wxss 文件的目录下新建一个 less 文件,保存以后就会在同级目录中生成一个 wxss 文件.</h2><h1 id=\"2-sass-scss\"><a href=\"#2-sass-scss\" class=\"headerlink\" title=\"2.sass/scss\"></a>2.sass/scss</h1><h2 id=\"安装-easy-sass\"><a href=\"#安装-easy-sass\" class=\"headerlink\" title=\"安装 easy-sass\"></a>安装 easy-sass</h2><h2 id=\"修改-vscode-配置文件-1\"><a href=\"#修改-vscode-配置文件-1\" class=\"headerlink\" title=\"修改 vscode 配置文件\"></a>修改 vscode 配置文件</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 对EasySass的配置，此段配置去掉则默认生成一个css文件和一个压缩的min.css文件</span></span><br><span class=\"line\">\"easysass.formats\": [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"format\"</span>: <span class=\"string\">\"expanded\"</span>, <span class=\"comment\">//格式，expanded不压缩，compressed压缩</span></span><br><span class=\"line\">    <span class=\"attr\">\"extension\"</span>: <span class=\"string\">\".wxss\"</span> <span class=\"comment\">//输出文件的后缀,小程序可以写'wxss'</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// &#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//   \"format\": \"compressed\",</span></span><br><span class=\"line\">  <span class=\"comment\">//   \"extension\": \".min.css\"</span></span><br><span class=\"line\">  <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure>\n<p>相对于前者，EasySass支持一次多生成几种类型的文件，在配置数组里如上多写几个就行了。</p>\n<h2 id=\"使用方法同上\"><a href=\"#使用方法同上\" class=\"headerlink\" title=\"使用方法同上\"></a>使用方法同上</h2>"},{"title":"v2ray + nginx 实现 traffic_mask","_content":"\n> 本文介绍的是将穿墙流量用常见的 https/tls 方式包装，大大降低 vps 被 block 的几率，在敏感时期保持稳如狗的外网访问通道。\n\n# v2ray 介绍\n\nV2Ray 是近几年十分流行的网络工具，其功能强大，用途不限于突破防火墙，但因其能有效翻墙而广为人知。V2Ray 有如下大放异彩的特点：\n\n开源。V2Ray 是 Project V 的核心工具，源代码开源；\n多协议支持。传输层支持 TCP、mKCP、WebSocket 等，上层协议支持 Socks、Shadowsocks、以及自定义的 VMess 等；\n多入口和多出口。V2Ray 可同时支持多个入站和出站协议，每个协议独立工作；\n多平台支持。原生支持 Windows、Linux、MacOS 三大常用平台，安卓、iOS 两大移动平台有丰富的第三方工具；\n隐蔽性。V2Ray 流量可伪装成网页流量，更难被检测和干扰。\n与另一个知名的翻墙工具 Shadowsocks(R)相比，两者区别在于：\n\nV2Ray 是一个框架/平台，而 Shadowsocks(R)是一个代理工具；\nV2Ray 功能强大配置复杂，Shadowsocks(R)简单易用；\nV2Ray 性能更好，协议支持更完善。\n一句话总结：V2Ray 更好更强大，但更难上手和用好。\n\n# 工具准备\n\n- 一台外网 vps\n- 一个域名(备案不备案均可,备案可以提升访问速度)\n- ssh 工具\n- 为域名申请一个证书\n- 基本的 linux 技巧\n\n# 前提\n\n伪装技术的选择:`websocket+tls+web`\n\n演示域名: `artray.cf`\n\n最终实现效果: http/https 方式打开域名，显示正常的网页；V2Ray 客户端请求特定的路径，例如 https:/artray.cf//awesomepath，能科学上网；浏览器直接请求https://artray.cf/awesomepath，返回”400 bad request”。即外部看起来完全是一个人畜无害的正规网站，特定手段请求特定网址才是科学上网的通道。\n\n# 服务端配置步骤\n\n## dns 解析\n\n首先将你申请的域名解析到你的 vps 的 ip 上.可以尝试在`freenom`上申请一个免费域名.免费的域名有效期一年,一年后可以免费续期(如果没有人付费和你抢的话)\n\ndns 解析可以选择 dnspod 或者 dnsla 等服务商,我选择的是 dnsla.\n\n![WX20200312-144255@2x.png](https://i.loli.net/2020/03/12/tIWQMOJURdSBX75.png)\n\n如上图,添加两条 A 记录,记录值为你的主机的 ip.\n\n![WX20200312-144433@2x](https://i.loli.net/2020/03/12/lgX2HtjUN8fTnOz.png)\n\n接着在你的域名控制台添加 dnsla 的 dns 服务器(这里以 freenom 为例.)\n\n接着等待域名解析生效即可.\n\n## 使用 Let’s Encrypt 获取免费证书\n\n### 安装 certbot\n\n首先安装 certbot：`yum install -y python36 && pip3 install certbot`（注意：该安装方式不是官方推荐的，但一直都很好使）\n\n安装完毕后，运行 certbot --help 可以查看该工具的命令详情。\n\n### 获取证书\n\n运行命令 certbot certonly --standalone -d artray.cf -d www.artray.cf 为域名获取证书。如果你要获取多个站点，继续添加-d 参数即可。certbot 会检测 80 和 443 端口是否已经占用，如果已被占用需要先停止 web 服务器（例如停止 Nginx：systemctl stop nginx）再运行命令。如果域名的 A 记录未指向该服务器，会报错提示域名解析问题。\n\n运行 `certbot certificates`命令可查看获取到所有申请的证书及所在目录。\n\n![WX20200312-144955@2x.png](https://i.loli.net/2020/03/12/12bJdHgNIXTnSP7.png)\n\n### 配置 nginx\n\n```conf\nserver {\n    listen 80;\n    server_name www.artray.cf artray.cf;\n    rewrite ^(.*) https://$server_name$1 permanent;\n}\n\nserver {\n    listen 443 ssl;\n    server_name www.artray.cf artray.cf;\n    charset utf-8;\n\n    ssl_certificate /etc/letsencrypt/live/artray.cf/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/artray.cf/privkey.pem;\n    ssl_protocols TLSv1.2 TLSv1.3; # TLSv1.3需要nginx 1.13.0以上版本\n    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE\n-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;\n    ssl_ecdh_curve secp384r1;\n    ssl_prefer_server_ciphers on;\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_timeout 10m;\n    ssl_session_tickets off;\n    keepalive_timeout 70;\n\n    # 这里填写其他配置\n}\n```\n\n配置分为两个 server 段，第一段是所有 http 请求都导向 https；第二段以 ssl 开头的配置都和证书相关：设置证书和私钥的位置、证书采用的协议、证书的加密算法等信息。\n\n为了增强安全性，ssl_protocols、ssl_ciphers 和 ssl_perfer_server_ciphers 的配置建议采用以上配置。\n\n配置好以后，运行 nginx -t 命令查看有无错误。如果没有可运行 systemctl restart nginx 重新开启 web 服务.\n\n### 证书自动更新\n\n通过 certbot certificates 命令可以看到证书的有效期是三个月，超过期限则需要续签。证书续期可以手动完成，例如：\n\n`systemctl stop nginx`\n`certbot renew`\n`systemctl restart nginx`\n也可以配置 crontab 任务自动续签，在`/etc/crontab`文件末添加一行：\n\n`0 0 0 */2 0 root nginx -s stop; /usr/bin/certbot renew; nginx -s start`\n证书将每两个月自动续签一次。如果你的证书快到期了还没有续签，贴心的 EFF（电子前哨基金会）会发邮件提醒，记得到期前续签就行。\n\n## 安装 v2ray\n\n### 服务端安装与配置\n\n`bash <(curl -L -s https://install.direct/go.sh)`\n\n安装完成后，配置文件为/etc/v2ray/config.json，cat 命令可查看内容：cat /etc/v2ray/config.json。一个安装时自动生成的配置文件示例：\n\n```json\n{\n  \"inbounds\": [\n    {\n      \"port\": 23581,\n      \"protocol\": \"vmess\",\n      \"settings\": {\n        \"clients\": [\n          {\n            \"id\": \"ceb793e6-49cf-25d8-e4de-ae542e62748e\",\n            \"level\": 1,\n            \"alterId\": 64\n          }\n        ]\n      }\n    }\n  ],\n  \"outbounds\": [\n    {\n      \"protocol\": \"freedom\",\n      \"settings\": {}\n    },\n    {\n      \"protocol\": \"blackhole\",\n      \"settings\": {},\n      \"tag\": \"blocked\"\n    }\n  ],\n  \"routing\": {\n    \"rules\": [\n      {\n        \"type\": \"field\",\n        \"ip\": [\"geoip:private\"],\n        \"outboundTag\": \"blocked\"\n      }\n    ]\n  }\n}\n```\n\n配置文件中”inbounds”下的这几项信息需要留意：port（端口）、clients 中的 id（用户 id）和 alterId（额外 id），它们将在配置客户端时用到。\n\n配置文件无需任何改动即可正常使用，但注意防火墙要放行监听的端口。接下来启动 V2Ray 并设置开机启动：\n\n`systemctl enable v2ray`\n`systemctl start v2ray`\n\n### 客户端的配置和使用放在最后,讲完结合 nginx 和 v2ray 以后\n\n到这里,v2ray 的安装就完成了.\n\n## 组合 v2ray 和 nginx,配置服务端 websocket\n\n选择一个比较长的路径,这里我选择的是 `/ray/ray`\n\n### nginx 添加配置\n\n配置 nginx 将这个路径的访问都转发到 v2ray。编辑`/etc/nginx/nginx.conf`的第二个`server`段，增加以下转发配置：\n\n```\nlocation /ray/ray { # 与 V2Ray 配置中的 path 保持一致\n      proxy_redirect off;\n      proxy_pass http://127.0.0.1:12345; # 假设v2ray的监听地址是12345\n      proxy_http_version 1.1;\n      proxy_set_header Upgrade $http_upgrade;\n      proxy_set_header Connection \"upgrade\";\n      proxy_set_header Host $host;\n      # Show real IP in v2ray access.log\n      proxy_set_header X-Real-IP $remote_addr;\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n}\n```\n\n配置好后重启 nginx：`nginx -s reload`\n\n### v2ray 修改配置\n\n配置 v2ray 接受 nginx 传来的数据。编辑 /etc/v2ray/config.json 文件，在“inbounds”中新增“streamSetting”配置，设置传输协议为“websocket”。配置好后 config.json 文件看起来是：\n\n```json\n\n{\n  \"log\": {\n    \"loglevel\": \"warning\",\n    \"access\": \"/var/log/v2ray/access.log\",\n    \"error\": \"/var/log/v2ray/error.log\"\n   },\n  \"inbounds\": [{\n    \"port\": 12345,\n    \"protocol\": \"vmess\",\n    \"settings\": {\n      \"clients\": [\n        {\n          \"id\": \"xxxxx\", # 可以使用v2ctl uuid生成\n          \"level\": 1,\n          \"alterId\": 64\n        }\n      ]\n    },\n    \"streamSettings\": {     # 载体配置段，设置为websocket\n        \"network\": \"ws\",\n        \"wsSettings\": {\n          \"path\": \"/ray/ray\"  # 与nginx中的路径保持一致\n        }\n      },\n    \"listen\": \"127.0.0.1\" # 出于安全考虑，建议只接受本地链接\n  }],\n  \"outbounds\": [{\n    \"protocol\": \"freedom\",\n    \"settings\": {}\n  },{\n    \"protocol\": \"blackhole\",\n    \"settings\": {},\n    \"tag\": \"blocked\"\n  }],\n  \"routing\": {\n    \"rules\": [\n      {\n        \"type\": \"field\",\n        \"ip\": [\"geoip:private\"],\n        \"outboundTag\": \"blocked\"\n      }\n    ]\n  }\n}\n\n```\n\n注意：json 文件不支持注释，上述配置中”#”号及后续内容都要删掉。\n\n配置无误后，重启 v2ray 服务：systemctl restart v2ray。\n\n如何测试 nginx 与 v2ray 结合没有问题？打开浏览器，输入域名及其他路径，应该显示正常网页或者页面不存在，说明 nginx 正常工作；输入域名加 v2ray 路径，例如https://artray.cf/ray/ray，应该出现”Bad Request”，说明 nginx 将流量转发给了 v2ray，并且 v2ray 收到了请求。\n\n这样就完成了 nginx 和 v2ray 的组合.\n\n\n# 客户端配置\n\n## mac 客户端(V2RayU)\n首先设置模式为 pac,接着打开服务器设置,新增服务器并配置:\n\n![WX20200312-152016@2x.png](https://i.loli.net/2020/03/12/LafeBj3YJu8qvU7.png)\n\n\n\n\n\n","source":"_posts/2020.03.12.v2ray+traffic_mask.md","raw":"---\ntitle: v2ray + nginx 实现 traffic_mask\ntags: [v2ray, nginx]\ncategories: 随笔\n---\n\n> 本文介绍的是将穿墙流量用常见的 https/tls 方式包装，大大降低 vps 被 block 的几率，在敏感时期保持稳如狗的外网访问通道。\n\n# v2ray 介绍\n\nV2Ray 是近几年十分流行的网络工具，其功能强大，用途不限于突破防火墙，但因其能有效翻墙而广为人知。V2Ray 有如下大放异彩的特点：\n\n开源。V2Ray 是 Project V 的核心工具，源代码开源；\n多协议支持。传输层支持 TCP、mKCP、WebSocket 等，上层协议支持 Socks、Shadowsocks、以及自定义的 VMess 等；\n多入口和多出口。V2Ray 可同时支持多个入站和出站协议，每个协议独立工作；\n多平台支持。原生支持 Windows、Linux、MacOS 三大常用平台，安卓、iOS 两大移动平台有丰富的第三方工具；\n隐蔽性。V2Ray 流量可伪装成网页流量，更难被检测和干扰。\n与另一个知名的翻墙工具 Shadowsocks(R)相比，两者区别在于：\n\nV2Ray 是一个框架/平台，而 Shadowsocks(R)是一个代理工具；\nV2Ray 功能强大配置复杂，Shadowsocks(R)简单易用；\nV2Ray 性能更好，协议支持更完善。\n一句话总结：V2Ray 更好更强大，但更难上手和用好。\n\n# 工具准备\n\n- 一台外网 vps\n- 一个域名(备案不备案均可,备案可以提升访问速度)\n- ssh 工具\n- 为域名申请一个证书\n- 基本的 linux 技巧\n\n# 前提\n\n伪装技术的选择:`websocket+tls+web`\n\n演示域名: `artray.cf`\n\n最终实现效果: http/https 方式打开域名，显示正常的网页；V2Ray 客户端请求特定的路径，例如 https:/artray.cf//awesomepath，能科学上网；浏览器直接请求https://artray.cf/awesomepath，返回”400 bad request”。即外部看起来完全是一个人畜无害的正规网站，特定手段请求特定网址才是科学上网的通道。\n\n# 服务端配置步骤\n\n## dns 解析\n\n首先将你申请的域名解析到你的 vps 的 ip 上.可以尝试在`freenom`上申请一个免费域名.免费的域名有效期一年,一年后可以免费续期(如果没有人付费和你抢的话)\n\ndns 解析可以选择 dnspod 或者 dnsla 等服务商,我选择的是 dnsla.\n\n![WX20200312-144255@2x.png](https://i.loli.net/2020/03/12/tIWQMOJURdSBX75.png)\n\n如上图,添加两条 A 记录,记录值为你的主机的 ip.\n\n![WX20200312-144433@2x](https://i.loli.net/2020/03/12/lgX2HtjUN8fTnOz.png)\n\n接着在你的域名控制台添加 dnsla 的 dns 服务器(这里以 freenom 为例.)\n\n接着等待域名解析生效即可.\n\n## 使用 Let’s Encrypt 获取免费证书\n\n### 安装 certbot\n\n首先安装 certbot：`yum install -y python36 && pip3 install certbot`（注意：该安装方式不是官方推荐的，但一直都很好使）\n\n安装完毕后，运行 certbot --help 可以查看该工具的命令详情。\n\n### 获取证书\n\n运行命令 certbot certonly --standalone -d artray.cf -d www.artray.cf 为域名获取证书。如果你要获取多个站点，继续添加-d 参数即可。certbot 会检测 80 和 443 端口是否已经占用，如果已被占用需要先停止 web 服务器（例如停止 Nginx：systemctl stop nginx）再运行命令。如果域名的 A 记录未指向该服务器，会报错提示域名解析问题。\n\n运行 `certbot certificates`命令可查看获取到所有申请的证书及所在目录。\n\n![WX20200312-144955@2x.png](https://i.loli.net/2020/03/12/12bJdHgNIXTnSP7.png)\n\n### 配置 nginx\n\n```conf\nserver {\n    listen 80;\n    server_name www.artray.cf artray.cf;\n    rewrite ^(.*) https://$server_name$1 permanent;\n}\n\nserver {\n    listen 443 ssl;\n    server_name www.artray.cf artray.cf;\n    charset utf-8;\n\n    ssl_certificate /etc/letsencrypt/live/artray.cf/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/artray.cf/privkey.pem;\n    ssl_protocols TLSv1.2 TLSv1.3; # TLSv1.3需要nginx 1.13.0以上版本\n    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE\n-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;\n    ssl_ecdh_curve secp384r1;\n    ssl_prefer_server_ciphers on;\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_timeout 10m;\n    ssl_session_tickets off;\n    keepalive_timeout 70;\n\n    # 这里填写其他配置\n}\n```\n\n配置分为两个 server 段，第一段是所有 http 请求都导向 https；第二段以 ssl 开头的配置都和证书相关：设置证书和私钥的位置、证书采用的协议、证书的加密算法等信息。\n\n为了增强安全性，ssl_protocols、ssl_ciphers 和 ssl_perfer_server_ciphers 的配置建议采用以上配置。\n\n配置好以后，运行 nginx -t 命令查看有无错误。如果没有可运行 systemctl restart nginx 重新开启 web 服务.\n\n### 证书自动更新\n\n通过 certbot certificates 命令可以看到证书的有效期是三个月，超过期限则需要续签。证书续期可以手动完成，例如：\n\n`systemctl stop nginx`\n`certbot renew`\n`systemctl restart nginx`\n也可以配置 crontab 任务自动续签，在`/etc/crontab`文件末添加一行：\n\n`0 0 0 */2 0 root nginx -s stop; /usr/bin/certbot renew; nginx -s start`\n证书将每两个月自动续签一次。如果你的证书快到期了还没有续签，贴心的 EFF（电子前哨基金会）会发邮件提醒，记得到期前续签就行。\n\n## 安装 v2ray\n\n### 服务端安装与配置\n\n`bash <(curl -L -s https://install.direct/go.sh)`\n\n安装完成后，配置文件为/etc/v2ray/config.json，cat 命令可查看内容：cat /etc/v2ray/config.json。一个安装时自动生成的配置文件示例：\n\n```json\n{\n  \"inbounds\": [\n    {\n      \"port\": 23581,\n      \"protocol\": \"vmess\",\n      \"settings\": {\n        \"clients\": [\n          {\n            \"id\": \"ceb793e6-49cf-25d8-e4de-ae542e62748e\",\n            \"level\": 1,\n            \"alterId\": 64\n          }\n        ]\n      }\n    }\n  ],\n  \"outbounds\": [\n    {\n      \"protocol\": \"freedom\",\n      \"settings\": {}\n    },\n    {\n      \"protocol\": \"blackhole\",\n      \"settings\": {},\n      \"tag\": \"blocked\"\n    }\n  ],\n  \"routing\": {\n    \"rules\": [\n      {\n        \"type\": \"field\",\n        \"ip\": [\"geoip:private\"],\n        \"outboundTag\": \"blocked\"\n      }\n    ]\n  }\n}\n```\n\n配置文件中”inbounds”下的这几项信息需要留意：port（端口）、clients 中的 id（用户 id）和 alterId（额外 id），它们将在配置客户端时用到。\n\n配置文件无需任何改动即可正常使用，但注意防火墙要放行监听的端口。接下来启动 V2Ray 并设置开机启动：\n\n`systemctl enable v2ray`\n`systemctl start v2ray`\n\n### 客户端的配置和使用放在最后,讲完结合 nginx 和 v2ray 以后\n\n到这里,v2ray 的安装就完成了.\n\n## 组合 v2ray 和 nginx,配置服务端 websocket\n\n选择一个比较长的路径,这里我选择的是 `/ray/ray`\n\n### nginx 添加配置\n\n配置 nginx 将这个路径的访问都转发到 v2ray。编辑`/etc/nginx/nginx.conf`的第二个`server`段，增加以下转发配置：\n\n```\nlocation /ray/ray { # 与 V2Ray 配置中的 path 保持一致\n      proxy_redirect off;\n      proxy_pass http://127.0.0.1:12345; # 假设v2ray的监听地址是12345\n      proxy_http_version 1.1;\n      proxy_set_header Upgrade $http_upgrade;\n      proxy_set_header Connection \"upgrade\";\n      proxy_set_header Host $host;\n      # Show real IP in v2ray access.log\n      proxy_set_header X-Real-IP $remote_addr;\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n}\n```\n\n配置好后重启 nginx：`nginx -s reload`\n\n### v2ray 修改配置\n\n配置 v2ray 接受 nginx 传来的数据。编辑 /etc/v2ray/config.json 文件，在“inbounds”中新增“streamSetting”配置，设置传输协议为“websocket”。配置好后 config.json 文件看起来是：\n\n```json\n\n{\n  \"log\": {\n    \"loglevel\": \"warning\",\n    \"access\": \"/var/log/v2ray/access.log\",\n    \"error\": \"/var/log/v2ray/error.log\"\n   },\n  \"inbounds\": [{\n    \"port\": 12345,\n    \"protocol\": \"vmess\",\n    \"settings\": {\n      \"clients\": [\n        {\n          \"id\": \"xxxxx\", # 可以使用v2ctl uuid生成\n          \"level\": 1,\n          \"alterId\": 64\n        }\n      ]\n    },\n    \"streamSettings\": {     # 载体配置段，设置为websocket\n        \"network\": \"ws\",\n        \"wsSettings\": {\n          \"path\": \"/ray/ray\"  # 与nginx中的路径保持一致\n        }\n      },\n    \"listen\": \"127.0.0.1\" # 出于安全考虑，建议只接受本地链接\n  }],\n  \"outbounds\": [{\n    \"protocol\": \"freedom\",\n    \"settings\": {}\n  },{\n    \"protocol\": \"blackhole\",\n    \"settings\": {},\n    \"tag\": \"blocked\"\n  }],\n  \"routing\": {\n    \"rules\": [\n      {\n        \"type\": \"field\",\n        \"ip\": [\"geoip:private\"],\n        \"outboundTag\": \"blocked\"\n      }\n    ]\n  }\n}\n\n```\n\n注意：json 文件不支持注释，上述配置中”#”号及后续内容都要删掉。\n\n配置无误后，重启 v2ray 服务：systemctl restart v2ray。\n\n如何测试 nginx 与 v2ray 结合没有问题？打开浏览器，输入域名及其他路径，应该显示正常网页或者页面不存在，说明 nginx 正常工作；输入域名加 v2ray 路径，例如https://artray.cf/ray/ray，应该出现”Bad Request”，说明 nginx 将流量转发给了 v2ray，并且 v2ray 收到了请求。\n\n这样就完成了 nginx 和 v2ray 的组合.\n\n\n# 客户端配置\n\n## mac 客户端(V2RayU)\n首先设置模式为 pac,接着打开服务器设置,新增服务器并配置:\n\n![WX20200312-152016@2x.png](https://i.loli.net/2020/03/12/LafeBj3YJu8qvU7.png)\n\n\n\n\n\n","slug":"2020.03.12.v2ray+traffic_mask","published":1,"date":"2020-03-20T01:54:55.671Z","updated":"2020-03-20T01:54:55.671Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziiql0023rh9z9bvm3pmq","content":"<blockquote>\n<p>本文介绍的是将穿墙流量用常见的 https/tls 方式包装，大大降低 vps 被 block 的几率，在敏感时期保持稳如狗的外网访问通道。</p>\n</blockquote>\n<h1 id=\"v2ray-介绍\"><a href=\"#v2ray-介绍\" class=\"headerlink\" title=\"v2ray 介绍\"></a>v2ray 介绍</h1><p>V2Ray 是近几年十分流行的网络工具，其功能强大，用途不限于突破防火墙，但因其能有效翻墙而广为人知。V2Ray 有如下大放异彩的特点：</p>\n<p>开源。V2Ray 是 Project V 的核心工具，源代码开源；<br>多协议支持。传输层支持 TCP、mKCP、WebSocket 等，上层协议支持 Socks、Shadowsocks、以及自定义的 VMess 等；<br>多入口和多出口。V2Ray 可同时支持多个入站和出站协议，每个协议独立工作；<br>多平台支持。原生支持 Windows、Linux、MacOS 三大常用平台，安卓、iOS 两大移动平台有丰富的第三方工具；<br>隐蔽性。V2Ray 流量可伪装成网页流量，更难被检测和干扰。<br>与另一个知名的翻墙工具 Shadowsocks(R)相比，两者区别在于：</p>\n<p>V2Ray 是一个框架/平台，而 Shadowsocks(R)是一个代理工具；<br>V2Ray 功能强大配置复杂，Shadowsocks(R)简单易用；<br>V2Ray 性能更好，协议支持更完善。<br>一句话总结：V2Ray 更好更强大，但更难上手和用好。</p>\n<h1 id=\"工具准备\"><a href=\"#工具准备\" class=\"headerlink\" title=\"工具准备\"></a>工具准备</h1><ul>\n<li>一台外网 vps</li>\n<li>一个域名(备案不备案均可,备案可以提升访问速度)</li>\n<li>ssh 工具</li>\n<li>为域名申请一个证书</li>\n<li>基本的 linux 技巧</li>\n</ul>\n<h1 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h1><p>伪装技术的选择:<code>websocket+tls+web</code></p>\n<p>演示域名: <code>artray.cf</code></p>\n<p>最终实现效果: http/https 方式打开域名，显示正常的网页；V2Ray 客户端请求特定的路径，例如 https:/artray.cf//awesomepath，能科学上网；浏览器直接请求<a href=\"https://artray.cf/awesomepath，返回”400\" target=\"_blank\" rel=\"noopener\">https://artray.cf/awesomepath，返回”400</a> bad request”。即外部看起来完全是一个人畜无害的正规网站，特定手段请求特定网址才是科学上网的通道。</p>\n<h1 id=\"服务端配置步骤\"><a href=\"#服务端配置步骤\" class=\"headerlink\" title=\"服务端配置步骤\"></a>服务端配置步骤</h1><h2 id=\"dns-解析\"><a href=\"#dns-解析\" class=\"headerlink\" title=\"dns 解析\"></a>dns 解析</h2><p>首先将你申请的域名解析到你的 vps 的 ip 上.可以尝试在<code>freenom</code>上申请一个免费域名.免费的域名有效期一年,一年后可以免费续期(如果没有人付费和你抢的话)</p>\n<p>dns 解析可以选择 dnspod 或者 dnsla 等服务商,我选择的是 dnsla.</p>\n<p><img src=\"https://i.loli.net/2020/03/12/tIWQMOJURdSBX75.png\" alt=\"WX20200312-144255@2x.png\"></p>\n<p>如上图,添加两条 A 记录,记录值为你的主机的 ip.</p>\n<p><img src=\"https://i.loli.net/2020/03/12/lgX2HtjUN8fTnOz.png\" alt=\"WX20200312-144433@2x\"></p>\n<p>接着在你的域名控制台添加 dnsla 的 dns 服务器(这里以 freenom 为例.)</p>\n<p>接着等待域名解析生效即可.</p>\n<h2 id=\"使用-Let’s-Encrypt-获取免费证书\"><a href=\"#使用-Let’s-Encrypt-获取免费证书\" class=\"headerlink\" title=\"使用 Let’s Encrypt 获取免费证书\"></a>使用 Let’s Encrypt 获取免费证书</h2><h3 id=\"安装-certbot\"><a href=\"#安装-certbot\" class=\"headerlink\" title=\"安装 certbot\"></a>安装 certbot</h3><p>首先安装 certbot：<code>yum install -y python36 &amp;&amp; pip3 install certbot</code>（注意：该安装方式不是官方推荐的，但一直都很好使）</p>\n<p>安装完毕后，运行 certbot –help 可以查看该工具的命令详情。</p>\n<h3 id=\"获取证书\"><a href=\"#获取证书\" class=\"headerlink\" title=\"获取证书\"></a>获取证书</h3><p>运行命令 certbot certonly –standalone -d artray.cf -d www.artray.cf 为域名获取证书。如果你要获取多个站点，继续添加-d 参数即可。certbot 会检测 80 和 443 端口是否已经占用，如果已被占用需要先停止 web 服务器（例如停止 Nginx：systemctl stop nginx）再运行命令。如果域名的 A 记录未指向该服务器，会报错提示域名解析问题。</p>\n<p>运行 <code>certbot certificates</code>命令可查看获取到所有申请的证书及所在目录。</p>\n<p><img src=\"https://i.loli.net/2020/03/12/12bJdHgNIXTnSP7.png\" alt=\"WX20200312-144955@2x.png\"></p>\n<h3 id=\"配置-nginx\"><a href=\"#配置-nginx\" class=\"headerlink\" title=\"配置 nginx\"></a>配置 nginx</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name www.artray.cf artray.cf;</span><br><span class=\"line\">    rewrite ^(.*) https:&#x2F;&#x2F;$server_name$1 permanent;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 443 ssl;</span><br><span class=\"line\">    server_name www.artray.cf artray.cf;</span><br><span class=\"line\">    charset utf-8;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl_certificate &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;artray.cf&#x2F;fullchain.pem;</span><br><span class=\"line\">    ssl_certificate_key &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;artray.cf&#x2F;privkey.pem;</span><br><span class=\"line\">    ssl_protocols TLSv1.2 TLSv1.3; # TLSv1.3需要nginx 1.13.0以上版本</span><br><span class=\"line\">    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE</span><br><span class=\"line\">-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;</span><br><span class=\"line\">    ssl_ecdh_curve secp384r1;</span><br><span class=\"line\">    ssl_prefer_server_ciphers on;</span><br><span class=\"line\">    ssl_session_cache shared:SSL:10m;</span><br><span class=\"line\">    ssl_session_timeout 10m;</span><br><span class=\"line\">    ssl_session_tickets off;</span><br><span class=\"line\">    keepalive_timeout 70;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 这里填写其他配置</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>配置分为两个 server 段，第一段是所有 http 请求都导向 https；第二段以 ssl 开头的配置都和证书相关：设置证书和私钥的位置、证书采用的协议、证书的加密算法等信息。</p>\n<p>为了增强安全性，ssl_protocols、ssl_ciphers 和 ssl_perfer_server_ciphers 的配置建议采用以上配置。</p>\n<p>配置好以后，运行 nginx -t 命令查看有无错误。如果没有可运行 systemctl restart nginx 重新开启 web 服务.</p>\n<h3 id=\"证书自动更新\"><a href=\"#证书自动更新\" class=\"headerlink\" title=\"证书自动更新\"></a>证书自动更新</h3><p>通过 certbot certificates 命令可以看到证书的有效期是三个月，超过期限则需要续签。证书续期可以手动完成，例如：</p>\n<p><code>systemctl stop nginx</code><br><code>certbot renew</code><br><code>systemctl restart nginx</code><br>也可以配置 crontab 任务自动续签，在<code>/etc/crontab</code>文件末添加一行：</p>\n<p><code>0 0 0 */2 0 root nginx -s stop; /usr/bin/certbot renew; nginx -s start</code><br>证书将每两个月自动续签一次。如果你的证书快到期了还没有续签，贴心的 EFF（电子前哨基金会）会发邮件提醒，记得到期前续签就行。</p>\n<h2 id=\"安装-v2ray\"><a href=\"#安装-v2ray\" class=\"headerlink\" title=\"安装 v2ray\"></a>安装 v2ray</h2><h3 id=\"服务端安装与配置\"><a href=\"#服务端安装与配置\" class=\"headerlink\" title=\"服务端安装与配置\"></a>服务端安装与配置</h3><p><code>bash &lt;(curl -L -s https://install.direct/go.sh)</code></p>\n<p>安装完成后，配置文件为/etc/v2ray/config.json，cat 命令可查看内容：cat /etc/v2ray/config.json。一个安装时自动生成的配置文件示例：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"inbounds\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"port\"</span>: <span class=\"number\">23581</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"protocol\"</span>: <span class=\"string\">\"vmess\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"settings\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"clients\"</span>: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"ceb793e6-49cf-25d8-e4de-ae542e62748e\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"level\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"alterId\"</span>: <span class=\"number\">64</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"outbounds\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"protocol\"</span>: <span class=\"string\">\"freedom\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"settings\"</span>: &#123;&#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"protocol\"</span>: <span class=\"string\">\"blackhole\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"settings\"</span>: &#123;&#125;,</span><br><span class=\"line\">      <span class=\"attr\">\"tag\"</span>: <span class=\"string\">\"blocked\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"routing\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"rules\"</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"field\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"ip\"</span>: [<span class=\"string\">\"geoip:private\"</span>],</span><br><span class=\"line\">        <span class=\"attr\">\"outboundTag\"</span>: <span class=\"string\">\"blocked\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>配置文件中”inbounds”下的这几项信息需要留意：port（端口）、clients 中的 id（用户 id）和 alterId（额外 id），它们将在配置客户端时用到。</p>\n<p>配置文件无需任何改动即可正常使用，但注意防火墙要放行监听的端口。接下来启动 V2Ray 并设置开机启动：</p>\n<p><code>systemctl enable v2ray</code><br><code>systemctl start v2ray</code></p>\n<h3 id=\"客户端的配置和使用放在最后-讲完结合-nginx-和-v2ray-以后\"><a href=\"#客户端的配置和使用放在最后-讲完结合-nginx-和-v2ray-以后\" class=\"headerlink\" title=\"客户端的配置和使用放在最后,讲完结合 nginx 和 v2ray 以后\"></a>客户端的配置和使用放在最后,讲完结合 nginx 和 v2ray 以后</h3><p>到这里,v2ray 的安装就完成了.</p>\n<h2 id=\"组合-v2ray-和-nginx-配置服务端-websocket\"><a href=\"#组合-v2ray-和-nginx-配置服务端-websocket\" class=\"headerlink\" title=\"组合 v2ray 和 nginx,配置服务端 websocket\"></a>组合 v2ray 和 nginx,配置服务端 websocket</h2><p>选择一个比较长的路径,这里我选择的是 <code>/ray/ray</code></p>\n<h3 id=\"nginx-添加配置\"><a href=\"#nginx-添加配置\" class=\"headerlink\" title=\"nginx 添加配置\"></a>nginx 添加配置</h3><p>配置 nginx 将这个路径的访问都转发到 v2ray。编辑<code>/etc/nginx/nginx.conf</code>的第二个<code>server</code>段，增加以下转发配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location &#x2F;ray&#x2F;ray &#123; # 与 V2Ray 配置中的 path 保持一致</span><br><span class=\"line\">      proxy_redirect off;</span><br><span class=\"line\">      proxy_pass http:&#x2F;&#x2F;127.0.0.1:12345; # 假设v2ray的监听地址是12345</span><br><span class=\"line\">      proxy_http_version 1.1;</span><br><span class=\"line\">      proxy_set_header Upgrade $http_upgrade;</span><br><span class=\"line\">      proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class=\"line\">      proxy_set_header Host $host;</span><br><span class=\"line\">      # Show real IP in v2ray access.log</span><br><span class=\"line\">      proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>配置好后重启 nginx：<code>nginx -s reload</code></p>\n<h3 id=\"v2ray-修改配置\"><a href=\"#v2ray-修改配置\" class=\"headerlink\" title=\"v2ray 修改配置\"></a>v2ray 修改配置</h3><p>配置 v2ray 接受 nginx 传来的数据。编辑 /etc/v2ray/config.json 文件，在“inbounds”中新增“streamSetting”配置，设置传输协议为“websocket”。配置好后 config.json 文件看起来是：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"log\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"loglevel\"</span>: <span class=\"string\">\"warning\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"access\"</span>: <span class=\"string\">\"/var/log/v2ray/access.log\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"error\"</span>: <span class=\"string\">\"/var/log/v2ray/error.log\"</span></span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"inbounds\"</span>: [&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"port\"</span>: <span class=\"number\">12345</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"protocol\"</span>: <span class=\"string\">\"vmess\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"settings\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"clients\"</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          \"id\": \"xxxxx\", # 可以使用v2ctl uuid生成</span><br><span class=\"line\">          \"level\": 1,</span><br><span class=\"line\">          \"alterId\": 64</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    \"streamSettings\": &#123;     # 载体配置段，设置为websocket</span><br><span class=\"line\">        \"network\": \"ws\",</span><br><span class=\"line\">        \"wsSettings\": &#123;</span><br><span class=\"line\">          \"path\": \"/ray/ray\"  # 与nginx中的路径保持一致</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    \"listen\": \"127.0.0.1\" # 出于安全考虑，建议只接受本地链接</span><br><span class=\"line\">  &#125;],</span><br><span class=\"line\">  \"outbounds\": [&#123;</span><br><span class=\"line\">    \"protocol\": \"freedom\",</span><br><span class=\"line\">    \"settings\": &#123;&#125;</span><br><span class=\"line\">  &#125;,&#123;</span><br><span class=\"line\">    \"protocol\": \"blackhole\",</span><br><span class=\"line\">    \"settings\": &#123;&#125;,</span><br><span class=\"line\">    \"tag\": \"blocked\"</span><br><span class=\"line\">  &#125;],</span><br><span class=\"line\">  \"routing\": &#123;</span><br><span class=\"line\">    \"rules\": [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"field\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"ip\"</span>: [<span class=\"string\">\"geoip:private\"</span>],</span><br><span class=\"line\">        <span class=\"attr\">\"outboundTag\"</span>: <span class=\"string\">\"blocked\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意：json 文件不支持注释，上述配置中”#”号及后续内容都要删掉。</p>\n<p>配置无误后，重启 v2ray 服务：systemctl restart v2ray。</p>\n<p>如何测试 nginx 与 v2ray 结合没有问题？打开浏览器，输入域名及其他路径，应该显示正常网页或者页面不存在，说明 nginx 正常工作；输入域名加 v2ray 路径，例如<a href=\"https://artray.cf/ray/ray，应该出现”Bad\" target=\"_blank\" rel=\"noopener\">https://artray.cf/ray/ray，应该出现”Bad</a> Request”，说明 nginx 将流量转发给了 v2ray，并且 v2ray 收到了请求。</p>\n<p>这样就完成了 nginx 和 v2ray 的组合.</p>\n<h1 id=\"客户端配置\"><a href=\"#客户端配置\" class=\"headerlink\" title=\"客户端配置\"></a>客户端配置</h1><h2 id=\"mac-客户端-V2RayU\"><a href=\"#mac-客户端-V2RayU\" class=\"headerlink\" title=\"mac 客户端(V2RayU)\"></a>mac 客户端(V2RayU)</h2><p>首先设置模式为 pac,接着打开服务器设置,新增服务器并配置:</p>\n<p><img src=\"https://i.loli.net/2020/03/12/LafeBj3YJu8qvU7.png\" alt=\"WX20200312-152016@2x.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>本文介绍的是将穿墙流量用常见的 https/tls 方式包装，大大降低 vps 被 block 的几率，在敏感时期保持稳如狗的外网访问通道。</p>\n</blockquote>\n<h1 id=\"v2ray-介绍\"><a href=\"#v2ray-介绍\" class=\"headerlink\" title=\"v2ray 介绍\"></a>v2ray 介绍</h1><p>V2Ray 是近几年十分流行的网络工具，其功能强大，用途不限于突破防火墙，但因其能有效翻墙而广为人知。V2Ray 有如下大放异彩的特点：</p>\n<p>开源。V2Ray 是 Project V 的核心工具，源代码开源；<br>多协议支持。传输层支持 TCP、mKCP、WebSocket 等，上层协议支持 Socks、Shadowsocks、以及自定义的 VMess 等；<br>多入口和多出口。V2Ray 可同时支持多个入站和出站协议，每个协议独立工作；<br>多平台支持。原生支持 Windows、Linux、MacOS 三大常用平台，安卓、iOS 两大移动平台有丰富的第三方工具；<br>隐蔽性。V2Ray 流量可伪装成网页流量，更难被检测和干扰。<br>与另一个知名的翻墙工具 Shadowsocks(R)相比，两者区别在于：</p>\n<p>V2Ray 是一个框架/平台，而 Shadowsocks(R)是一个代理工具；<br>V2Ray 功能强大配置复杂，Shadowsocks(R)简单易用；<br>V2Ray 性能更好，协议支持更完善。<br>一句话总结：V2Ray 更好更强大，但更难上手和用好。</p>\n<h1 id=\"工具准备\"><a href=\"#工具准备\" class=\"headerlink\" title=\"工具准备\"></a>工具准备</h1><ul>\n<li>一台外网 vps</li>\n<li>一个域名(备案不备案均可,备案可以提升访问速度)</li>\n<li>ssh 工具</li>\n<li>为域名申请一个证书</li>\n<li>基本的 linux 技巧</li>\n</ul>\n<h1 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h1><p>伪装技术的选择:<code>websocket+tls+web</code></p>\n<p>演示域名: <code>artray.cf</code></p>\n<p>最终实现效果: http/https 方式打开域名，显示正常的网页；V2Ray 客户端请求特定的路径，例如 https:/artray.cf//awesomepath，能科学上网；浏览器直接请求<a href=\"https://artray.cf/awesomepath，返回”400\" target=\"_blank\" rel=\"noopener\">https://artray.cf/awesomepath，返回”400</a> bad request”。即外部看起来完全是一个人畜无害的正规网站，特定手段请求特定网址才是科学上网的通道。</p>\n<h1 id=\"服务端配置步骤\"><a href=\"#服务端配置步骤\" class=\"headerlink\" title=\"服务端配置步骤\"></a>服务端配置步骤</h1><h2 id=\"dns-解析\"><a href=\"#dns-解析\" class=\"headerlink\" title=\"dns 解析\"></a>dns 解析</h2><p>首先将你申请的域名解析到你的 vps 的 ip 上.可以尝试在<code>freenom</code>上申请一个免费域名.免费的域名有效期一年,一年后可以免费续期(如果没有人付费和你抢的话)</p>\n<p>dns 解析可以选择 dnspod 或者 dnsla 等服务商,我选择的是 dnsla.</p>\n<p><img src=\"https://i.loli.net/2020/03/12/tIWQMOJURdSBX75.png\" alt=\"WX20200312-144255@2x.png\"></p>\n<p>如上图,添加两条 A 记录,记录值为你的主机的 ip.</p>\n<p><img src=\"https://i.loli.net/2020/03/12/lgX2HtjUN8fTnOz.png\" alt=\"WX20200312-144433@2x\"></p>\n<p>接着在你的域名控制台添加 dnsla 的 dns 服务器(这里以 freenom 为例.)</p>\n<p>接着等待域名解析生效即可.</p>\n<h2 id=\"使用-Let’s-Encrypt-获取免费证书\"><a href=\"#使用-Let’s-Encrypt-获取免费证书\" class=\"headerlink\" title=\"使用 Let’s Encrypt 获取免费证书\"></a>使用 Let’s Encrypt 获取免费证书</h2><h3 id=\"安装-certbot\"><a href=\"#安装-certbot\" class=\"headerlink\" title=\"安装 certbot\"></a>安装 certbot</h3><p>首先安装 certbot：<code>yum install -y python36 &amp;&amp; pip3 install certbot</code>（注意：该安装方式不是官方推荐的，但一直都很好使）</p>\n<p>安装完毕后，运行 certbot –help 可以查看该工具的命令详情。</p>\n<h3 id=\"获取证书\"><a href=\"#获取证书\" class=\"headerlink\" title=\"获取证书\"></a>获取证书</h3><p>运行命令 certbot certonly –standalone -d artray.cf -d www.artray.cf 为域名获取证书。如果你要获取多个站点，继续添加-d 参数即可。certbot 会检测 80 和 443 端口是否已经占用，如果已被占用需要先停止 web 服务器（例如停止 Nginx：systemctl stop nginx）再运行命令。如果域名的 A 记录未指向该服务器，会报错提示域名解析问题。</p>\n<p>运行 <code>certbot certificates</code>命令可查看获取到所有申请的证书及所在目录。</p>\n<p><img src=\"https://i.loli.net/2020/03/12/12bJdHgNIXTnSP7.png\" alt=\"WX20200312-144955@2x.png\"></p>\n<h3 id=\"配置-nginx\"><a href=\"#配置-nginx\" class=\"headerlink\" title=\"配置 nginx\"></a>配置 nginx</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name www.artray.cf artray.cf;</span><br><span class=\"line\">    rewrite ^(.*) https:&#x2F;&#x2F;$server_name$1 permanent;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 443 ssl;</span><br><span class=\"line\">    server_name www.artray.cf artray.cf;</span><br><span class=\"line\">    charset utf-8;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssl_certificate &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;artray.cf&#x2F;fullchain.pem;</span><br><span class=\"line\">    ssl_certificate_key &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F;artray.cf&#x2F;privkey.pem;</span><br><span class=\"line\">    ssl_protocols TLSv1.2 TLSv1.3; # TLSv1.3需要nginx 1.13.0以上版本</span><br><span class=\"line\">    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE</span><br><span class=\"line\">-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;</span><br><span class=\"line\">    ssl_ecdh_curve secp384r1;</span><br><span class=\"line\">    ssl_prefer_server_ciphers on;</span><br><span class=\"line\">    ssl_session_cache shared:SSL:10m;</span><br><span class=\"line\">    ssl_session_timeout 10m;</span><br><span class=\"line\">    ssl_session_tickets off;</span><br><span class=\"line\">    keepalive_timeout 70;</span><br><span class=\"line\"></span><br><span class=\"line\">    # 这里填写其他配置</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>配置分为两个 server 段，第一段是所有 http 请求都导向 https；第二段以 ssl 开头的配置都和证书相关：设置证书和私钥的位置、证书采用的协议、证书的加密算法等信息。</p>\n<p>为了增强安全性，ssl_protocols、ssl_ciphers 和 ssl_perfer_server_ciphers 的配置建议采用以上配置。</p>\n<p>配置好以后，运行 nginx -t 命令查看有无错误。如果没有可运行 systemctl restart nginx 重新开启 web 服务.</p>\n<h3 id=\"证书自动更新\"><a href=\"#证书自动更新\" class=\"headerlink\" title=\"证书自动更新\"></a>证书自动更新</h3><p>通过 certbot certificates 命令可以看到证书的有效期是三个月，超过期限则需要续签。证书续期可以手动完成，例如：</p>\n<p><code>systemctl stop nginx</code><br><code>certbot renew</code><br><code>systemctl restart nginx</code><br>也可以配置 crontab 任务自动续签，在<code>/etc/crontab</code>文件末添加一行：</p>\n<p><code>0 0 0 */2 0 root nginx -s stop; /usr/bin/certbot renew; nginx -s start</code><br>证书将每两个月自动续签一次。如果你的证书快到期了还没有续签，贴心的 EFF（电子前哨基金会）会发邮件提醒，记得到期前续签就行。</p>\n<h2 id=\"安装-v2ray\"><a href=\"#安装-v2ray\" class=\"headerlink\" title=\"安装 v2ray\"></a>安装 v2ray</h2><h3 id=\"服务端安装与配置\"><a href=\"#服务端安装与配置\" class=\"headerlink\" title=\"服务端安装与配置\"></a>服务端安装与配置</h3><p><code>bash &lt;(curl -L -s https://install.direct/go.sh)</code></p>\n<p>安装完成后，配置文件为/etc/v2ray/config.json，cat 命令可查看内容：cat /etc/v2ray/config.json。一个安装时自动生成的配置文件示例：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"inbounds\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"port\"</span>: <span class=\"number\">23581</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"protocol\"</span>: <span class=\"string\">\"vmess\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"settings\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"clients\"</span>: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"id\"</span>: <span class=\"string\">\"ceb793e6-49cf-25d8-e4de-ae542e62748e\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"level\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"alterId\"</span>: <span class=\"number\">64</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"outbounds\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"protocol\"</span>: <span class=\"string\">\"freedom\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"settings\"</span>: &#123;&#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"protocol\"</span>: <span class=\"string\">\"blackhole\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"settings\"</span>: &#123;&#125;,</span><br><span class=\"line\">      <span class=\"attr\">\"tag\"</span>: <span class=\"string\">\"blocked\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"routing\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"rules\"</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"field\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"ip\"</span>: [<span class=\"string\">\"geoip:private\"</span>],</span><br><span class=\"line\">        <span class=\"attr\">\"outboundTag\"</span>: <span class=\"string\">\"blocked\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>配置文件中”inbounds”下的这几项信息需要留意：port（端口）、clients 中的 id（用户 id）和 alterId（额外 id），它们将在配置客户端时用到。</p>\n<p>配置文件无需任何改动即可正常使用，但注意防火墙要放行监听的端口。接下来启动 V2Ray 并设置开机启动：</p>\n<p><code>systemctl enable v2ray</code><br><code>systemctl start v2ray</code></p>\n<h3 id=\"客户端的配置和使用放在最后-讲完结合-nginx-和-v2ray-以后\"><a href=\"#客户端的配置和使用放在最后-讲完结合-nginx-和-v2ray-以后\" class=\"headerlink\" title=\"客户端的配置和使用放在最后,讲完结合 nginx 和 v2ray 以后\"></a>客户端的配置和使用放在最后,讲完结合 nginx 和 v2ray 以后</h3><p>到这里,v2ray 的安装就完成了.</p>\n<h2 id=\"组合-v2ray-和-nginx-配置服务端-websocket\"><a href=\"#组合-v2ray-和-nginx-配置服务端-websocket\" class=\"headerlink\" title=\"组合 v2ray 和 nginx,配置服务端 websocket\"></a>组合 v2ray 和 nginx,配置服务端 websocket</h2><p>选择一个比较长的路径,这里我选择的是 <code>/ray/ray</code></p>\n<h3 id=\"nginx-添加配置\"><a href=\"#nginx-添加配置\" class=\"headerlink\" title=\"nginx 添加配置\"></a>nginx 添加配置</h3><p>配置 nginx 将这个路径的访问都转发到 v2ray。编辑<code>/etc/nginx/nginx.conf</code>的第二个<code>server</code>段，增加以下转发配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location &#x2F;ray&#x2F;ray &#123; # 与 V2Ray 配置中的 path 保持一致</span><br><span class=\"line\">      proxy_redirect off;</span><br><span class=\"line\">      proxy_pass http:&#x2F;&#x2F;127.0.0.1:12345; # 假设v2ray的监听地址是12345</span><br><span class=\"line\">      proxy_http_version 1.1;</span><br><span class=\"line\">      proxy_set_header Upgrade $http_upgrade;</span><br><span class=\"line\">      proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class=\"line\">      proxy_set_header Host $host;</span><br><span class=\"line\">      # Show real IP in v2ray access.log</span><br><span class=\"line\">      proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>配置好后重启 nginx：<code>nginx -s reload</code></p>\n<h3 id=\"v2ray-修改配置\"><a href=\"#v2ray-修改配置\" class=\"headerlink\" title=\"v2ray 修改配置\"></a>v2ray 修改配置</h3><p>配置 v2ray 接受 nginx 传来的数据。编辑 /etc/v2ray/config.json 文件，在“inbounds”中新增“streamSetting”配置，设置传输协议为“websocket”。配置好后 config.json 文件看起来是：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"log\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"loglevel\"</span>: <span class=\"string\">\"warning\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"access\"</span>: <span class=\"string\">\"/var/log/v2ray/access.log\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"error\"</span>: <span class=\"string\">\"/var/log/v2ray/error.log\"</span></span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"inbounds\"</span>: [&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"port\"</span>: <span class=\"number\">12345</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"protocol\"</span>: <span class=\"string\">\"vmess\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"settings\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"clients\"</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          \"id\": \"xxxxx\", # 可以使用v2ctl uuid生成</span><br><span class=\"line\">          \"level\": 1,</span><br><span class=\"line\">          \"alterId\": 64</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    \"streamSettings\": &#123;     # 载体配置段，设置为websocket</span><br><span class=\"line\">        \"network\": \"ws\",</span><br><span class=\"line\">        \"wsSettings\": &#123;</span><br><span class=\"line\">          \"path\": \"/ray/ray\"  # 与nginx中的路径保持一致</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    \"listen\": \"127.0.0.1\" # 出于安全考虑，建议只接受本地链接</span><br><span class=\"line\">  &#125;],</span><br><span class=\"line\">  \"outbounds\": [&#123;</span><br><span class=\"line\">    \"protocol\": \"freedom\",</span><br><span class=\"line\">    \"settings\": &#123;&#125;</span><br><span class=\"line\">  &#125;,&#123;</span><br><span class=\"line\">    \"protocol\": \"blackhole\",</span><br><span class=\"line\">    \"settings\": &#123;&#125;,</span><br><span class=\"line\">    \"tag\": \"blocked\"</span><br><span class=\"line\">  &#125;],</span><br><span class=\"line\">  \"routing\": &#123;</span><br><span class=\"line\">    \"rules\": [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"field\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"ip\"</span>: [<span class=\"string\">\"geoip:private\"</span>],</span><br><span class=\"line\">        <span class=\"attr\">\"outboundTag\"</span>: <span class=\"string\">\"blocked\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意：json 文件不支持注释，上述配置中”#”号及后续内容都要删掉。</p>\n<p>配置无误后，重启 v2ray 服务：systemctl restart v2ray。</p>\n<p>如何测试 nginx 与 v2ray 结合没有问题？打开浏览器，输入域名及其他路径，应该显示正常网页或者页面不存在，说明 nginx 正常工作；输入域名加 v2ray 路径，例如<a href=\"https://artray.cf/ray/ray，应该出现”Bad\" target=\"_blank\" rel=\"noopener\">https://artray.cf/ray/ray，应该出现”Bad</a> Request”，说明 nginx 将流量转发给了 v2ray，并且 v2ray 收到了请求。</p>\n<p>这样就完成了 nginx 和 v2ray 的组合.</p>\n<h1 id=\"客户端配置\"><a href=\"#客户端配置\" class=\"headerlink\" title=\"客户端配置\"></a>客户端配置</h1><h2 id=\"mac-客户端-V2RayU\"><a href=\"#mac-客户端-V2RayU\" class=\"headerlink\" title=\"mac 客户端(V2RayU)\"></a>mac 客户端(V2RayU)</h2><p>首先设置模式为 pac,接着打开服务器设置,新增服务器并配置:</p>\n<p><img src=\"https://i.loli.net/2020/03/12/LafeBj3YJu8qvU7.png\" alt=\"WX20200312-152016@2x.png\"></p>\n"},{"title":"为 frp 提供 https 支持","_content":"\n> 这里我们通过申请 let't encrypt 的证书并自动更新,实现使用 https 来通过外网访问群辉 nas.\n\n# 1 准备工具\n\n- 有固定 ip 的云主机(我选的是阿里云的 ecs)\n- 备案的域名(我选择的是万网上购买的域名,经过实名登记和备案两个步骤)\n- ssh 工具\n- 群辉(ds218+)\n\n# 2 域名注册/备案\n\n这一步网上有很多教程,我这里就不详细说了,但是如果你是从阿里云或者其他国内大型云服务商购买的域名的话,通过他们来提交备案信息可以加快备案的流程以及成功率,我从发起备案到备案完成一共也就花了不到一天时间.\n\n# 3.ssl 证书申请/自动续期\n\n用到的工具在这里[https://github.com/andyzhshg/syno-acme](https://github.com/andyzhshg/syno-acme),大佬的文档也写的很清楚[http://www.up4dev.com/2018/05/29/synology-ssl-wildcard-cert-update/](http://www.up4dev.com/2018/05/29/synology-ssl-wildcard-cert-update/)\n原理就是获取免费证书,然后自动续期,在这个过程中需要验证域名有效性,所以需要为你提供 dns 解析服务的服务商提供的 api key 和 screct 用来修改 dns 解析记录来实现证书验证,需要填写的 ttl 根据自己服务商提供的 ttl 填写即可.自动续期则使用的群辉的定时任务功能,每个月执行一次证书的续期工作.\n\n# 4.配置\n\n关于 frp 的简单配置可以看[https://h123.cf/2019/09/12/2019.09.12.frp/#more](https://h123.cf/2019/09/12/2019.09.12.frp/#more)\n这里我们主要介绍下 frp 上 https 的配置\n\n官方文档:\n[https://github.com/fatedier/frp/blob/master/README_zh.md](https://github.com/fatedier/frp/blob/master/README_zh.md)\n\n## 客户端配置\n\n### 配置 frpc.ini\n\n```ini\n; frpc.ini\n[common]\n; 你的frps 的 ip\nserver_addr = xxxx\n; frps 服务端口\nserver_port = 7000\n\n#[http_ip]\n#type = http\n#local_port = 5000\n#custom_domains = 你的域名\n\n[https_ip]\ntype = https\ncustom_domains = 你的域名\nplugin = https2http\nplugin_local_addr = 127.0.0.1:5000\n\n# HTTPS 证书相关的配置\nplugin_crt_path =  crt 文件位置\nplugin_key_path = key 文件位置\nplugin_host_header_rewrite = 127.0.0.1\nplugin_header_X-From-Where = frp\n```\n\n### 证书文件格式转换\n\n这里需要注意的是使用上面的方法申请的证书文件为 cer 格式,需要我们手动转变为 crt 格式:\n\n```bash\nopenssl x509 -inform PEM -in certificate.cer -out certificate.crt\n\n```\n\n## 服务端配置\n\n### 配置 frps.ini\n\n```ini\n; frps.ini\n [common]\n    bind_port = 7000\n    ; vhost_https_port为 https 端口\n    vhost_https_port = 443\n    dashboard_port = 7500\n```\n\n### 配置 nginx\n配置 nginx 转发 80 端口到 443 端口,实现全站 https\n\n```ini\n; nginx.conf\nserver {\n    listen 80;\n    server_name www.test.com;\n    rewrite ^(.*)$ https://${server_name}$1 permanent; \n}\n```\n\n\n##  tips\n使frpc/frps 在后台运行:\n```bash\nnohup ./frps -c ./frps.ini &\n\n\n\nnohup ./frpc -c ./frpc.ini &\n\n\n```\n这样日志文件都会保存在同目录下的 `nohup.out` 文件中,可以在日志文件中查看服务的状态.\n\n同时在修改了配置文件以后,需要把已经运行的进程 kill 掉,再执行上面的命令.\n\n```bash\n\nps -ef | grep frpc | grep -v grep | cut -c 9-15 | xargs kill -s 9\n\n# 查找所有 frpc 进程并终止...\n```\n","source":"_posts/2020.03.20.addHttpsOnDs.md","raw":"---\ntitle: 为 frp 提供 https 支持\ntags: [frp, https, 群辉]\ncategories: 技术\n---\n\n> 这里我们通过申请 let't encrypt 的证书并自动更新,实现使用 https 来通过外网访问群辉 nas.\n\n# 1 准备工具\n\n- 有固定 ip 的云主机(我选的是阿里云的 ecs)\n- 备案的域名(我选择的是万网上购买的域名,经过实名登记和备案两个步骤)\n- ssh 工具\n- 群辉(ds218+)\n\n# 2 域名注册/备案\n\n这一步网上有很多教程,我这里就不详细说了,但是如果你是从阿里云或者其他国内大型云服务商购买的域名的话,通过他们来提交备案信息可以加快备案的流程以及成功率,我从发起备案到备案完成一共也就花了不到一天时间.\n\n# 3.ssl 证书申请/自动续期\n\n用到的工具在这里[https://github.com/andyzhshg/syno-acme](https://github.com/andyzhshg/syno-acme),大佬的文档也写的很清楚[http://www.up4dev.com/2018/05/29/synology-ssl-wildcard-cert-update/](http://www.up4dev.com/2018/05/29/synology-ssl-wildcard-cert-update/)\n原理就是获取免费证书,然后自动续期,在这个过程中需要验证域名有效性,所以需要为你提供 dns 解析服务的服务商提供的 api key 和 screct 用来修改 dns 解析记录来实现证书验证,需要填写的 ttl 根据自己服务商提供的 ttl 填写即可.自动续期则使用的群辉的定时任务功能,每个月执行一次证书的续期工作.\n\n# 4.配置\n\n关于 frp 的简单配置可以看[https://h123.cf/2019/09/12/2019.09.12.frp/#more](https://h123.cf/2019/09/12/2019.09.12.frp/#more)\n这里我们主要介绍下 frp 上 https 的配置\n\n官方文档:\n[https://github.com/fatedier/frp/blob/master/README_zh.md](https://github.com/fatedier/frp/blob/master/README_zh.md)\n\n## 客户端配置\n\n### 配置 frpc.ini\n\n```ini\n; frpc.ini\n[common]\n; 你的frps 的 ip\nserver_addr = xxxx\n; frps 服务端口\nserver_port = 7000\n\n#[http_ip]\n#type = http\n#local_port = 5000\n#custom_domains = 你的域名\n\n[https_ip]\ntype = https\ncustom_domains = 你的域名\nplugin = https2http\nplugin_local_addr = 127.0.0.1:5000\n\n# HTTPS 证书相关的配置\nplugin_crt_path =  crt 文件位置\nplugin_key_path = key 文件位置\nplugin_host_header_rewrite = 127.0.0.1\nplugin_header_X-From-Where = frp\n```\n\n### 证书文件格式转换\n\n这里需要注意的是使用上面的方法申请的证书文件为 cer 格式,需要我们手动转变为 crt 格式:\n\n```bash\nopenssl x509 -inform PEM -in certificate.cer -out certificate.crt\n\n```\n\n## 服务端配置\n\n### 配置 frps.ini\n\n```ini\n; frps.ini\n [common]\n    bind_port = 7000\n    ; vhost_https_port为 https 端口\n    vhost_https_port = 443\n    dashboard_port = 7500\n```\n\n### 配置 nginx\n配置 nginx 转发 80 端口到 443 端口,实现全站 https\n\n```ini\n; nginx.conf\nserver {\n    listen 80;\n    server_name www.test.com;\n    rewrite ^(.*)$ https://${server_name}$1 permanent; \n}\n```\n\n\n##  tips\n使frpc/frps 在后台运行:\n```bash\nnohup ./frps -c ./frps.ini &\n\n\n\nnohup ./frpc -c ./frpc.ini &\n\n\n```\n这样日志文件都会保存在同目录下的 `nohup.out` 文件中,可以在日志文件中查看服务的状态.\n\n同时在修改了配置文件以后,需要把已经运行的进程 kill 掉,再执行上面的命令.\n\n```bash\n\nps -ef | grep frpc | grep -v grep | cut -c 9-15 | xargs kill -s 9\n\n# 查找所有 frpc 进程并终止...\n```\n","slug":"2020.03.20.addHttpsOnDs","published":1,"date":"2020-03-20T01:57:11.986Z","updated":"2020-03-20T02:44:04.793Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziiqm0024rh9z1fjj421k","content":"<blockquote>\n<p>这里我们通过申请 let’t encrypt 的证书并自动更新,实现使用 https 来通过外网访问群辉 nas.</p>\n</blockquote>\n<h1 id=\"1-准备工具\"><a href=\"#1-准备工具\" class=\"headerlink\" title=\"1 准备工具\"></a>1 准备工具</h1><ul>\n<li>有固定 ip 的云主机(我选的是阿里云的 ecs)</li>\n<li>备案的域名(我选择的是万网上购买的域名,经过实名登记和备案两个步骤)</li>\n<li>ssh 工具</li>\n<li>群辉(ds218+)</li>\n</ul>\n<h1 id=\"2-域名注册-备案\"><a href=\"#2-域名注册-备案\" class=\"headerlink\" title=\"2 域名注册/备案\"></a>2 域名注册/备案</h1><p>这一步网上有很多教程,我这里就不详细说了,但是如果你是从阿里云或者其他国内大型云服务商购买的域名的话,通过他们来提交备案信息可以加快备案的流程以及成功率,我从发起备案到备案完成一共也就花了不到一天时间.</p>\n<h1 id=\"3-ssl-证书申请-自动续期\"><a href=\"#3-ssl-证书申请-自动续期\" class=\"headerlink\" title=\"3.ssl 证书申请/自动续期\"></a>3.ssl 证书申请/自动续期</h1><p>用到的工具在这里<a href=\"https://github.com/andyzhshg/syno-acme\" target=\"_blank\" rel=\"noopener\">https://github.com/andyzhshg/syno-acme</a>,大佬的文档也写的很清楚<a href=\"http://www.up4dev.com/2018/05/29/synology-ssl-wildcard-cert-update/\" target=\"_blank\" rel=\"noopener\">http://www.up4dev.com/2018/05/29/synology-ssl-wildcard-cert-update/</a><br>原理就是获取免费证书,然后自动续期,在这个过程中需要验证域名有效性,所以需要为你提供 dns 解析服务的服务商提供的 api key 和 screct 用来修改 dns 解析记录来实现证书验证,需要填写的 ttl 根据自己服务商提供的 ttl 填写即可.自动续期则使用的群辉的定时任务功能,每个月执行一次证书的续期工作.</p>\n<h1 id=\"4-配置\"><a href=\"#4-配置\" class=\"headerlink\" title=\"4.配置\"></a>4.配置</h1><p>关于 frp 的简单配置可以看<a href=\"https://h123.cf/2019/09/12/2019.09.12.frp/#more\" target=\"_blank\" rel=\"noopener\">https://h123.cf/2019/09/12/2019.09.12.frp/#more</a><br>这里我们主要介绍下 frp 上 https 的配置</p>\n<p>官方文档:<br><a href=\"https://github.com/fatedier/frp/blob/master/README_zh.md\" target=\"_blank\" rel=\"noopener\">https://github.com/fatedier/frp/blob/master/README_zh.md</a></p>\n<h2 id=\"客户端配置\"><a href=\"#客户端配置\" class=\"headerlink\" title=\"客户端配置\"></a>客户端配置</h2><h3 id=\"配置-frpc-ini\"><a href=\"#配置-frpc-ini\" class=\"headerlink\" title=\"配置 frpc.ini\"></a>配置 frpc.ini</h3><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">; frpc.ini</span></span><br><span class=\"line\"><span class=\"section\">[common]</span></span><br><span class=\"line\"><span class=\"comment\">; 你的frps 的 ip</span></span><br><span class=\"line\"><span class=\"attr\">server_addr</span> = xxxx</span><br><span class=\"line\"><span class=\"comment\">; frps 服务端口</span></span><br><span class=\"line\"><span class=\"attr\">server_port</span> = <span class=\"number\">7000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#[http_ip]</span></span><br><span class=\"line\"><span class=\"comment\">#type = http</span></span><br><span class=\"line\"><span class=\"comment\">#local_port = 5000</span></span><br><span class=\"line\"><span class=\"comment\">#custom_domains = 你的域名</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[https_ip]</span></span><br><span class=\"line\"><span class=\"attr\">type</span> = https</span><br><span class=\"line\"><span class=\"attr\">custom_domains</span> = 你的域名</span><br><span class=\"line\"><span class=\"attr\">plugin</span> = https2http</span><br><span class=\"line\"><span class=\"attr\">plugin_local_addr</span> = <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">5000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># HTTPS 证书相关的配置</span></span><br><span class=\"line\"><span class=\"attr\">plugin_crt_path</span> =  crt 文件位置</span><br><span class=\"line\"><span class=\"attr\">plugin_key_path</span> = key 文件位置</span><br><span class=\"line\"><span class=\"attr\">plugin_host_header_rewrite</span> = <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span></span><br><span class=\"line\"><span class=\"attr\">plugin_header_X-From-Where</span> = frp</span><br></pre></td></tr></table></figure>\n<h3 id=\"证书文件格式转换\"><a href=\"#证书文件格式转换\" class=\"headerlink\" title=\"证书文件格式转换\"></a>证书文件格式转换</h3><p>这里需要注意的是使用上面的方法申请的证书文件为 cer 格式,需要我们手动转变为 crt 格式:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl x509 -inform PEM -<span class=\"keyword\">in</span> certificate.cer -out certificate.crt</span><br></pre></td></tr></table></figure>\n<h2 id=\"服务端配置\"><a href=\"#服务端配置\" class=\"headerlink\" title=\"服务端配置\"></a>服务端配置</h2><h3 id=\"配置-frps-ini\"><a href=\"#配置-frps-ini\" class=\"headerlink\" title=\"配置 frps.ini\"></a>配置 frps.ini</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">; frps.ini</span></span><br><span class=\"line\"> <span class=\"section\">[common]</span></span><br><span class=\"line\">    bind_port = 7000</span><br><span class=\"line\">    <span class=\"comment\">; vhost_https_port为 https 端口</span></span><br><span class=\"line\">    vhost_https_port = 443</span><br><span class=\"line\">    dashboard_port = 7500</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置-nginx\"><a href=\"#配置-nginx\" class=\"headerlink\" title=\"配置 nginx\"></a>配置 nginx</h3><p>配置 nginx 转发 80 端口到 443 端口,实现全站 https</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">; nginx.conf</span></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name www.test.com;</span><br><span class=\"line\">    rewrite ^(.*)$ https://$&#123;server_name&#125;$1 permanent; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"tips\"><a href=\"#tips\" class=\"headerlink\" title=\"tips\"></a>tips</h2><p>使frpc/frps 在后台运行:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup ./frps -c ./frps.ini &amp;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">nohup ./frpc -c ./frpc.ini &amp;</span><br></pre></td></tr></table></figure><br>这样日志文件都会保存在同目录下的 <code>nohup.out</code> 文件中,可以在日志文件中查看服务的状态.</p>\n<p>同时在修改了配置文件以后,需要把已经运行的进程 kill 掉,再执行上面的命令.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">ps -ef | grep frpc | grep -v grep | cut -c 9-15 | xargs <span class=\"built_in\">kill</span> -s 9</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查找所有 frpc 进程并终止...</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>这里我们通过申请 let’t encrypt 的证书并自动更新,实现使用 https 来通过外网访问群辉 nas.</p>\n</blockquote>\n<h1 id=\"1-准备工具\"><a href=\"#1-准备工具\" class=\"headerlink\" title=\"1 准备工具\"></a>1 准备工具</h1><ul>\n<li>有固定 ip 的云主机(我选的是阿里云的 ecs)</li>\n<li>备案的域名(我选择的是万网上购买的域名,经过实名登记和备案两个步骤)</li>\n<li>ssh 工具</li>\n<li>群辉(ds218+)</li>\n</ul>\n<h1 id=\"2-域名注册-备案\"><a href=\"#2-域名注册-备案\" class=\"headerlink\" title=\"2 域名注册/备案\"></a>2 域名注册/备案</h1><p>这一步网上有很多教程,我这里就不详细说了,但是如果你是从阿里云或者其他国内大型云服务商购买的域名的话,通过他们来提交备案信息可以加快备案的流程以及成功率,我从发起备案到备案完成一共也就花了不到一天时间.</p>\n<h1 id=\"3-ssl-证书申请-自动续期\"><a href=\"#3-ssl-证书申请-自动续期\" class=\"headerlink\" title=\"3.ssl 证书申请/自动续期\"></a>3.ssl 证书申请/自动续期</h1><p>用到的工具在这里<a href=\"https://github.com/andyzhshg/syno-acme\" target=\"_blank\" rel=\"noopener\">https://github.com/andyzhshg/syno-acme</a>,大佬的文档也写的很清楚<a href=\"http://www.up4dev.com/2018/05/29/synology-ssl-wildcard-cert-update/\" target=\"_blank\" rel=\"noopener\">http://www.up4dev.com/2018/05/29/synology-ssl-wildcard-cert-update/</a><br>原理就是获取免费证书,然后自动续期,在这个过程中需要验证域名有效性,所以需要为你提供 dns 解析服务的服务商提供的 api key 和 screct 用来修改 dns 解析记录来实现证书验证,需要填写的 ttl 根据自己服务商提供的 ttl 填写即可.自动续期则使用的群辉的定时任务功能,每个月执行一次证书的续期工作.</p>\n<h1 id=\"4-配置\"><a href=\"#4-配置\" class=\"headerlink\" title=\"4.配置\"></a>4.配置</h1><p>关于 frp 的简单配置可以看<a href=\"https://h123.cf/2019/09/12/2019.09.12.frp/#more\" target=\"_blank\" rel=\"noopener\">https://h123.cf/2019/09/12/2019.09.12.frp/#more</a><br>这里我们主要介绍下 frp 上 https 的配置</p>\n<p>官方文档:<br><a href=\"https://github.com/fatedier/frp/blob/master/README_zh.md\" target=\"_blank\" rel=\"noopener\">https://github.com/fatedier/frp/blob/master/README_zh.md</a></p>\n<h2 id=\"客户端配置\"><a href=\"#客户端配置\" class=\"headerlink\" title=\"客户端配置\"></a>客户端配置</h2><h3 id=\"配置-frpc-ini\"><a href=\"#配置-frpc-ini\" class=\"headerlink\" title=\"配置 frpc.ini\"></a>配置 frpc.ini</h3><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">; frpc.ini</span></span><br><span class=\"line\"><span class=\"section\">[common]</span></span><br><span class=\"line\"><span class=\"comment\">; 你的frps 的 ip</span></span><br><span class=\"line\"><span class=\"attr\">server_addr</span> = xxxx</span><br><span class=\"line\"><span class=\"comment\">; frps 服务端口</span></span><br><span class=\"line\"><span class=\"attr\">server_port</span> = <span class=\"number\">7000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#[http_ip]</span></span><br><span class=\"line\"><span class=\"comment\">#type = http</span></span><br><span class=\"line\"><span class=\"comment\">#local_port = 5000</span></span><br><span class=\"line\"><span class=\"comment\">#custom_domains = 你的域名</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">[https_ip]</span></span><br><span class=\"line\"><span class=\"attr\">type</span> = https</span><br><span class=\"line\"><span class=\"attr\">custom_domains</span> = 你的域名</span><br><span class=\"line\"><span class=\"attr\">plugin</span> = https2http</span><br><span class=\"line\"><span class=\"attr\">plugin_local_addr</span> = <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span>:<span class=\"number\">5000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># HTTPS 证书相关的配置</span></span><br><span class=\"line\"><span class=\"attr\">plugin_crt_path</span> =  crt 文件位置</span><br><span class=\"line\"><span class=\"attr\">plugin_key_path</span> = key 文件位置</span><br><span class=\"line\"><span class=\"attr\">plugin_host_header_rewrite</span> = <span class=\"number\">127.0</span>.<span class=\"number\">0.1</span></span><br><span class=\"line\"><span class=\"attr\">plugin_header_X-From-Where</span> = frp</span><br></pre></td></tr></table></figure>\n<h3 id=\"证书文件格式转换\"><a href=\"#证书文件格式转换\" class=\"headerlink\" title=\"证书文件格式转换\"></a>证书文件格式转换</h3><p>这里需要注意的是使用上面的方法申请的证书文件为 cer 格式,需要我们手动转变为 crt 格式:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl x509 -inform PEM -<span class=\"keyword\">in</span> certificate.cer -out certificate.crt</span><br></pre></td></tr></table></figure>\n<h2 id=\"服务端配置\"><a href=\"#服务端配置\" class=\"headerlink\" title=\"服务端配置\"></a>服务端配置</h2><h3 id=\"配置-frps-ini\"><a href=\"#配置-frps-ini\" class=\"headerlink\" title=\"配置 frps.ini\"></a>配置 frps.ini</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">; frps.ini</span></span><br><span class=\"line\"> <span class=\"section\">[common]</span></span><br><span class=\"line\">    bind_port = 7000</span><br><span class=\"line\">    <span class=\"comment\">; vhost_https_port为 https 端口</span></span><br><span class=\"line\">    vhost_https_port = 443</span><br><span class=\"line\">    dashboard_port = 7500</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置-nginx\"><a href=\"#配置-nginx\" class=\"headerlink\" title=\"配置 nginx\"></a>配置 nginx</h3><p>配置 nginx 转发 80 端口到 443 端口,实现全站 https</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">; nginx.conf</span></span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name www.test.com;</span><br><span class=\"line\">    rewrite ^(.*)$ https://$&#123;server_name&#125;$1 permanent; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"tips\"><a href=\"#tips\" class=\"headerlink\" title=\"tips\"></a>tips</h2><p>使frpc/frps 在后台运行:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup ./frps -c ./frps.ini &amp;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">nohup ./frpc -c ./frpc.ini &amp;</span><br></pre></td></tr></table></figure><br>这样日志文件都会保存在同目录下的 <code>nohup.out</code> 文件中,可以在日志文件中查看服务的状态.</p>\n<p>同时在修改了配置文件以后,需要把已经运行的进程 kill 掉,再执行上面的命令.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">ps -ef | grep frpc | grep -v grep | cut -c 9-15 | xargs <span class=\"built_in\">kill</span> -s 9</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查找所有 frpc 进程并终止...</span></span><br></pre></td></tr></table></figure>\n"},{"title":"使用 alfred 结合 sm.ms构建自动上传图片脚本","_content":"\n平时在写博客的时候上传图片是一个很头疼的事情,需要完成以下步骤:\n\n- 截图\n- 保存成文件\n- 上传到图床\n- 获取文件地址\n- 到文章中黏贴\n\n这样一套流程真的很复杂,同时浪费了很多时间,我们使用 alfred 结合 sm.ms 的 api 可以便捷地完成这项工作.\n\nps.本篇博客中的所有图片均由脚本完成上传.\n\n![img](https://i.loli.net/2020/04/01/SpobqUHEv5XPGt7.png)\n\n# 截图工具选择\n\n截图可以选择 mac 自带的截图工具,但是不能再截取以后编辑,这里我推荐 `xnip`,免费版本足够用,功能相当强大.\n\n![img](https://i.loli.net/2020/04/01/cxg3fdJahp2U4ji.png)\n\n# 获取 sm.ms Authorization\n\n![img](https://i.loli.net/2020/04/01/U6pJzFyN3a5gDvh.png)\n\n到 sm.ms 注册/登录以后拿到 token,然后看下接口文档:\n[https://doc.sm.ms/#api-Image-Upload](https://doc.sm.ms/#api-Image-Upload)\n使用 postman 测试下:\n\n![img](https://i.loli.net/2020/04/01/BSQghxXc4A9y5tf.png)\n\n# 编写 python 脚本\n\npython 我没学过,自己网上找了点教程,写的不好的请见谅...\n\n## 安装必须的环境\n\n```sh\npip3 install Pillow\npip3 install requests\n\n```\n\n## 编写 py 脚本\n\n```py\n\n'''\n@Author: 韩宏斌\n@Description: this is the description\n@version: 1.0.0\n@LastEditors: 韩宏斌\n@Date: 2020-03-31 17:13:25\n@LastEditTime: 2020-04-03 17:02:00\n@FilePath: /playback/Users/hanhongbin/py/uploadImg.py\n'''\n\n\ntry:\n    from PIL import ImageGrab\n    from PIL import Image\n    import requests\n    img = ImageGrab.grabclipboard()\n    if isinstance(img, Image.Image):\n        img.save('/tmp/img.png', 'png')\n        files = {'smfile': open('/tmp/img.png', \"rb\")}\n        if (files[\"smfile\"].seek(0, 2)/(1024*1024)) < 5:\n            req_url = \"https://sm.ms/api/v2/upload\"\n            req_header = {\n                \"Authorization\": \"OifHQalFhmpEwUKRBYTtFU4xD1znRTfx\"\n            }\n            files = {'smfile': open('/tmp/img.png', \"rb\")}\n            response = requests.post(\n                req_url,\n                headers=req_header,\n                files=files\n            )\n            if response.json()[\"success\"]:\n                url = response.json()[\"data\"][\"url\"]\n                print(\"![img](\"+url+\")\")\n            else:\n                print(\"上传失败了,请重试一下哦\")\n        else:\n            print(\"不支持上传大于 5M 的图片哦\")\n\n    else:\n        print(\"当前剪切板第一条不是图片哦\")\nexcept ModuleNotFoundError:\n    print('ModuleNotFoundError')\nexcept SyntaxError:\n    print('SyntaxError')\n\n```\n\n# 编写 alfred workflow\n\n![img](https://i.loli.net/2020/04/01/8YRQ6SNMHKJgBCU.png)\n\n上图是完整的 workflow.\n\n- 使用`⌃+⌥+⌘+U`来触发脚本\n- 触发系统通知(开始上传图片)\n- 执行脚本\n- 处理结果(播放声音/触发通知/复制 url 到剪切板)\n\n在 workflow 中可以是支持直接写 py 的,但是是默认的 python2,因此我在 shell 中执行了:\n\n```sh\npython3 /Users/hanhongbin/py/uploadImg.py #py文件路径\n```\n\n![img](https://i.loli.net/2020/04/01/srZIuza3RdTUQeq.png)\n","source":"_posts/2020.04.01.alfred_sm.ms.md","raw":"---\ntitle: 使用 alfred 结合 sm.ms构建自动上传图片脚本\ntags: [alfred, mac]\ncategories: 随笔\n---\n\n平时在写博客的时候上传图片是一个很头疼的事情,需要完成以下步骤:\n\n- 截图\n- 保存成文件\n- 上传到图床\n- 获取文件地址\n- 到文章中黏贴\n\n这样一套流程真的很复杂,同时浪费了很多时间,我们使用 alfred 结合 sm.ms 的 api 可以便捷地完成这项工作.\n\nps.本篇博客中的所有图片均由脚本完成上传.\n\n![img](https://i.loli.net/2020/04/01/SpobqUHEv5XPGt7.png)\n\n# 截图工具选择\n\n截图可以选择 mac 自带的截图工具,但是不能再截取以后编辑,这里我推荐 `xnip`,免费版本足够用,功能相当强大.\n\n![img](https://i.loli.net/2020/04/01/cxg3fdJahp2U4ji.png)\n\n# 获取 sm.ms Authorization\n\n![img](https://i.loli.net/2020/04/01/U6pJzFyN3a5gDvh.png)\n\n到 sm.ms 注册/登录以后拿到 token,然后看下接口文档:\n[https://doc.sm.ms/#api-Image-Upload](https://doc.sm.ms/#api-Image-Upload)\n使用 postman 测试下:\n\n![img](https://i.loli.net/2020/04/01/BSQghxXc4A9y5tf.png)\n\n# 编写 python 脚本\n\npython 我没学过,自己网上找了点教程,写的不好的请见谅...\n\n## 安装必须的环境\n\n```sh\npip3 install Pillow\npip3 install requests\n\n```\n\n## 编写 py 脚本\n\n```py\n\n'''\n@Author: 韩宏斌\n@Description: this is the description\n@version: 1.0.0\n@LastEditors: 韩宏斌\n@Date: 2020-03-31 17:13:25\n@LastEditTime: 2020-04-03 17:02:00\n@FilePath: /playback/Users/hanhongbin/py/uploadImg.py\n'''\n\n\ntry:\n    from PIL import ImageGrab\n    from PIL import Image\n    import requests\n    img = ImageGrab.grabclipboard()\n    if isinstance(img, Image.Image):\n        img.save('/tmp/img.png', 'png')\n        files = {'smfile': open('/tmp/img.png', \"rb\")}\n        if (files[\"smfile\"].seek(0, 2)/(1024*1024)) < 5:\n            req_url = \"https://sm.ms/api/v2/upload\"\n            req_header = {\n                \"Authorization\": \"OifHQalFhmpEwUKRBYTtFU4xD1znRTfx\"\n            }\n            files = {'smfile': open('/tmp/img.png', \"rb\")}\n            response = requests.post(\n                req_url,\n                headers=req_header,\n                files=files\n            )\n            if response.json()[\"success\"]:\n                url = response.json()[\"data\"][\"url\"]\n                print(\"![img](\"+url+\")\")\n            else:\n                print(\"上传失败了,请重试一下哦\")\n        else:\n            print(\"不支持上传大于 5M 的图片哦\")\n\n    else:\n        print(\"当前剪切板第一条不是图片哦\")\nexcept ModuleNotFoundError:\n    print('ModuleNotFoundError')\nexcept SyntaxError:\n    print('SyntaxError')\n\n```\n\n# 编写 alfred workflow\n\n![img](https://i.loli.net/2020/04/01/8YRQ6SNMHKJgBCU.png)\n\n上图是完整的 workflow.\n\n- 使用`⌃+⌥+⌘+U`来触发脚本\n- 触发系统通知(开始上传图片)\n- 执行脚本\n- 处理结果(播放声音/触发通知/复制 url 到剪切板)\n\n在 workflow 中可以是支持直接写 py 的,但是是默认的 python2,因此我在 shell 中执行了:\n\n```sh\npython3 /Users/hanhongbin/py/uploadImg.py #py文件路径\n```\n\n![img](https://i.loli.net/2020/04/01/srZIuza3RdTUQeq.png)\n","slug":"2020.04.01.alfred_sm.ms","published":1,"date":"2020-04-01T04:56:15.683Z","updated":"2020-04-03T09:24:41.229Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziiqm0025rh9z5g835urz","content":"<p>平时在写博客的时候上传图片是一个很头疼的事情,需要完成以下步骤:</p>\n<ul>\n<li>截图</li>\n<li>保存成文件</li>\n<li>上传到图床</li>\n<li>获取文件地址</li>\n<li>到文章中黏贴</li>\n</ul>\n<p>这样一套流程真的很复杂,同时浪费了很多时间,我们使用 alfred 结合 sm.ms 的 api 可以便捷地完成这项工作.</p>\n<p>ps.本篇博客中的所有图片均由脚本完成上传.</p>\n<p><img src=\"https://i.loli.net/2020/04/01/SpobqUHEv5XPGt7.png\" alt=\"img\"></p>\n<h1 id=\"截图工具选择\"><a href=\"#截图工具选择\" class=\"headerlink\" title=\"截图工具选择\"></a>截图工具选择</h1><p>截图可以选择 mac 自带的截图工具,但是不能再截取以后编辑,这里我推荐 <code>xnip</code>,免费版本足够用,功能相当强大.</p>\n<p><img src=\"https://i.loli.net/2020/04/01/cxg3fdJahp2U4ji.png\" alt=\"img\"></p>\n<h1 id=\"获取-sm-ms-Authorization\"><a href=\"#获取-sm-ms-Authorization\" class=\"headerlink\" title=\"获取 sm.ms Authorization\"></a>获取 sm.ms Authorization</h1><p><img src=\"https://i.loli.net/2020/04/01/U6pJzFyN3a5gDvh.png\" alt=\"img\"></p>\n<p>到 sm.ms 注册/登录以后拿到 token,然后看下接口文档:<br><a href=\"https://doc.sm.ms/#api-Image-Upload\" target=\"_blank\" rel=\"noopener\">https://doc.sm.ms/#api-Image-Upload</a><br>使用 postman 测试下:</p>\n<p><img src=\"https://i.loli.net/2020/04/01/BSQghxXc4A9y5tf.png\" alt=\"img\"></p>\n<h1 id=\"编写-python-脚本\"><a href=\"#编写-python-脚本\" class=\"headerlink\" title=\"编写 python 脚本\"></a>编写 python 脚本</h1><p>python 我没学过,自己网上找了点教程,写的不好的请见谅…</p>\n<h2 id=\"安装必须的环境\"><a href=\"#安装必须的环境\" class=\"headerlink\" title=\"安装必须的环境\"></a>安装必须的环境</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install Pillow</span><br><span class=\"line\">pip3 install requests</span><br></pre></td></tr></table></figure>\n<h2 id=\"编写-py-脚本\"><a href=\"#编写-py-脚本\" class=\"headerlink\" title=\"编写 py 脚本\"></a>编写 py 脚本</h2><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">@Author: 韩宏斌</span></span><br><span class=\"line\"><span class=\"string\">@Description: this is the description</span></span><br><span class=\"line\"><span class=\"string\">@version: 1.0.0</span></span><br><span class=\"line\"><span class=\"string\">@LastEditors: 韩宏斌</span></span><br><span class=\"line\"><span class=\"string\">@Date: 2020-03-31 17:13:25</span></span><br><span class=\"line\"><span class=\"string\">@LastEditTime: 2020-04-03 17:02:00</span></span><br><span class=\"line\"><span class=\"string\">@FilePath: /playback/Users/hanhongbin/py/uploadImg.py</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> ImageGrab</span><br><span class=\"line\">    <span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\">    <span class=\"keyword\">import</span> requests</span><br><span class=\"line\">    img = ImageGrab.grabclipboard()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> isinstance(img, Image.Image):</span><br><span class=\"line\">        img.save(<span class=\"string\">'/tmp/img.png'</span>, <span class=\"string\">'png'</span>)</span><br><span class=\"line\">        files = &#123;<span class=\"string\">'smfile'</span>: open(<span class=\"string\">'/tmp/img.png'</span>, <span class=\"string\">\"rb\"</span>)&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (files[<span class=\"string\">\"smfile\"</span>].seek(<span class=\"number\">0</span>, <span class=\"number\">2</span>)/(<span class=\"number\">1024</span>*<span class=\"number\">1024</span>)) &lt; <span class=\"number\">5</span>:</span><br><span class=\"line\">            req_url = <span class=\"string\">\"https://sm.ms/api/v2/upload\"</span></span><br><span class=\"line\">            req_header = &#123;</span><br><span class=\"line\">                <span class=\"string\">\"Authorization\"</span>: <span class=\"string\">\"OifHQalFhmpEwUKRBYTtFU4xD1znRTfx\"</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            files = &#123;<span class=\"string\">'smfile'</span>: open(<span class=\"string\">'/tmp/img.png'</span>, <span class=\"string\">\"rb\"</span>)&#125;</span><br><span class=\"line\">            response = requests.post(</span><br><span class=\"line\">                req_url,</span><br><span class=\"line\">                headers=req_header,</span><br><span class=\"line\">                files=files</span><br><span class=\"line\">            )</span><br><span class=\"line\">            <span class=\"keyword\">if</span> response.json()[<span class=\"string\">\"success\"</span>]:</span><br><span class=\"line\">                url = response.json()[<span class=\"string\">\"data\"</span>][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">                print(<span class=\"string\">\"![img](\"</span>+url+<span class=\"string\">\")\"</span>)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                print(<span class=\"string\">\"上传失败了,请重试一下哦\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"不支持上传大于 5M 的图片哦\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"当前剪切板第一条不是图片哦\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> ModuleNotFoundError:</span><br><span class=\"line\">    print(<span class=\"string\">'ModuleNotFoundError'</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> SyntaxError:</span><br><span class=\"line\">    print(<span class=\"string\">'SyntaxError'</span>)</span><br></pre></td></tr></table></figure>\n<h1 id=\"编写-alfred-workflow\"><a href=\"#编写-alfred-workflow\" class=\"headerlink\" title=\"编写 alfred workflow\"></a>编写 alfred workflow</h1><p><img src=\"https://i.loli.net/2020/04/01/8YRQ6SNMHKJgBCU.png\" alt=\"img\"></p>\n<p>上图是完整的 workflow.</p>\n<ul>\n<li>使用<code>⌃+⌥+⌘+U</code>来触发脚本</li>\n<li>触发系统通知(开始上传图片)</li>\n<li>执行脚本</li>\n<li>处理结果(播放声音/触发通知/复制 url 到剪切板)</li>\n</ul>\n<p>在 workflow 中可以是支持直接写 py 的,但是是默认的 python2,因此我在 shell 中执行了:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 /Users/hanhongbin/py/uploadImg.py <span class=\"comment\">#py文件路径</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.loli.net/2020/04/01/srZIuza3RdTUQeq.png\" alt=\"img\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>平时在写博客的时候上传图片是一个很头疼的事情,需要完成以下步骤:</p>\n<ul>\n<li>截图</li>\n<li>保存成文件</li>\n<li>上传到图床</li>\n<li>获取文件地址</li>\n<li>到文章中黏贴</li>\n</ul>\n<p>这样一套流程真的很复杂,同时浪费了很多时间,我们使用 alfred 结合 sm.ms 的 api 可以便捷地完成这项工作.</p>\n<p>ps.本篇博客中的所有图片均由脚本完成上传.</p>\n<p><img src=\"https://i.loli.net/2020/04/01/SpobqUHEv5XPGt7.png\" alt=\"img\"></p>\n<h1 id=\"截图工具选择\"><a href=\"#截图工具选择\" class=\"headerlink\" title=\"截图工具选择\"></a>截图工具选择</h1><p>截图可以选择 mac 自带的截图工具,但是不能再截取以后编辑,这里我推荐 <code>xnip</code>,免费版本足够用,功能相当强大.</p>\n<p><img src=\"https://i.loli.net/2020/04/01/cxg3fdJahp2U4ji.png\" alt=\"img\"></p>\n<h1 id=\"获取-sm-ms-Authorization\"><a href=\"#获取-sm-ms-Authorization\" class=\"headerlink\" title=\"获取 sm.ms Authorization\"></a>获取 sm.ms Authorization</h1><p><img src=\"https://i.loli.net/2020/04/01/U6pJzFyN3a5gDvh.png\" alt=\"img\"></p>\n<p>到 sm.ms 注册/登录以后拿到 token,然后看下接口文档:<br><a href=\"https://doc.sm.ms/#api-Image-Upload\" target=\"_blank\" rel=\"noopener\">https://doc.sm.ms/#api-Image-Upload</a><br>使用 postman 测试下:</p>\n<p><img src=\"https://i.loli.net/2020/04/01/BSQghxXc4A9y5tf.png\" alt=\"img\"></p>\n<h1 id=\"编写-python-脚本\"><a href=\"#编写-python-脚本\" class=\"headerlink\" title=\"编写 python 脚本\"></a>编写 python 脚本</h1><p>python 我没学过,自己网上找了点教程,写的不好的请见谅…</p>\n<h2 id=\"安装必须的环境\"><a href=\"#安装必须的环境\" class=\"headerlink\" title=\"安装必须的环境\"></a>安装必须的环境</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install Pillow</span><br><span class=\"line\">pip3 install requests</span><br></pre></td></tr></table></figure>\n<h2 id=\"编写-py-脚本\"><a href=\"#编写-py-脚本\" class=\"headerlink\" title=\"编写 py 脚本\"></a>编写 py 脚本</h2><figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">@Author: 韩宏斌</span></span><br><span class=\"line\"><span class=\"string\">@Description: this is the description</span></span><br><span class=\"line\"><span class=\"string\">@version: 1.0.0</span></span><br><span class=\"line\"><span class=\"string\">@LastEditors: 韩宏斌</span></span><br><span class=\"line\"><span class=\"string\">@Date: 2020-03-31 17:13:25</span></span><br><span class=\"line\"><span class=\"string\">@LastEditTime: 2020-04-03 17:02:00</span></span><br><span class=\"line\"><span class=\"string\">@FilePath: /playback/Users/hanhongbin/py/uploadImg.py</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> ImageGrab</span><br><span class=\"line\">    <span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image</span><br><span class=\"line\">    <span class=\"keyword\">import</span> requests</span><br><span class=\"line\">    img = ImageGrab.grabclipboard()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> isinstance(img, Image.Image):</span><br><span class=\"line\">        img.save(<span class=\"string\">'/tmp/img.png'</span>, <span class=\"string\">'png'</span>)</span><br><span class=\"line\">        files = &#123;<span class=\"string\">'smfile'</span>: open(<span class=\"string\">'/tmp/img.png'</span>, <span class=\"string\">\"rb\"</span>)&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (files[<span class=\"string\">\"smfile\"</span>].seek(<span class=\"number\">0</span>, <span class=\"number\">2</span>)/(<span class=\"number\">1024</span>*<span class=\"number\">1024</span>)) &lt; <span class=\"number\">5</span>:</span><br><span class=\"line\">            req_url = <span class=\"string\">\"https://sm.ms/api/v2/upload\"</span></span><br><span class=\"line\">            req_header = &#123;</span><br><span class=\"line\">                <span class=\"string\">\"Authorization\"</span>: <span class=\"string\">\"OifHQalFhmpEwUKRBYTtFU4xD1znRTfx\"</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            files = &#123;<span class=\"string\">'smfile'</span>: open(<span class=\"string\">'/tmp/img.png'</span>, <span class=\"string\">\"rb\"</span>)&#125;</span><br><span class=\"line\">            response = requests.post(</span><br><span class=\"line\">                req_url,</span><br><span class=\"line\">                headers=req_header,</span><br><span class=\"line\">                files=files</span><br><span class=\"line\">            )</span><br><span class=\"line\">            <span class=\"keyword\">if</span> response.json()[<span class=\"string\">\"success\"</span>]:</span><br><span class=\"line\">                url = response.json()[<span class=\"string\">\"data\"</span>][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">                print(<span class=\"string\">\"![img](\"</span>+url+<span class=\"string\">\")\"</span>)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                print(<span class=\"string\">\"上传失败了,请重试一下哦\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"不支持上传大于 5M 的图片哦\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"当前剪切板第一条不是图片哦\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> ModuleNotFoundError:</span><br><span class=\"line\">    print(<span class=\"string\">'ModuleNotFoundError'</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> SyntaxError:</span><br><span class=\"line\">    print(<span class=\"string\">'SyntaxError'</span>)</span><br></pre></td></tr></table></figure>\n<h1 id=\"编写-alfred-workflow\"><a href=\"#编写-alfred-workflow\" class=\"headerlink\" title=\"编写 alfred workflow\"></a>编写 alfred workflow</h1><p><img src=\"https://i.loli.net/2020/04/01/8YRQ6SNMHKJgBCU.png\" alt=\"img\"></p>\n<p>上图是完整的 workflow.</p>\n<ul>\n<li>使用<code>⌃+⌥+⌘+U</code>来触发脚本</li>\n<li>触发系统通知(开始上传图片)</li>\n<li>执行脚本</li>\n<li>处理结果(播放声音/触发通知/复制 url 到剪切板)</li>\n</ul>\n<p>在 workflow 中可以是支持直接写 py 的,但是是默认的 python2,因此我在 shell 中执行了:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 /Users/hanhongbin/py/uploadImg.py <span class=\"comment\">#py文件路径</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://i.loli.net/2020/04/01/srZIuza3RdTUQeq.png\" alt=\"img\"></p>\n"},{"title":"理清 js 中的 this","_content":"\n> JavaScript 中的 this 的指向,完全取决于调用的方式.\n\n\n![思维导图 1.png](https://i.loli.net/2020/03/31/XbWd7xsogjIPYB2.png)\n\n# 调用\n\n## 全局调用\n\n```js\nconsole.log(this); //全局对象,在浏览器中为 window 对象,在 nodejs 中为 global,方便起见,后面我们都是在浏览器中运行,即全局对象为 window\n```\n\n## 直接作为函数调用\n\n函数可以被直接调用,这时 this 指向全局对象.比如下面的例子:\n\n```js\nfunction f1(a1) {\n  this.a1 = a1;\n}\n\nf1(1);\n\nconsole.log(window.a1); //1\n//a1 已经成为一个全局对象\n```\n\n注意在全局模式中,函数的 this 为 undefined,因为严格模式禁止 this 关键字指向全局对象.因此:\n\n```js\n\"use strict\";\nfunction f1(a1) {\n  this.a1 = a1;\n}\n\nf1(1);\n\nconsole.log(window.a1); //undefined\n```\n\n## 作为对象的方法调用\n\n在 JavaScript 中,函数也是对象,因此函数也可以作为对象的一个属性,此时这个函数被称为这个对象的方法,在这个方法中使用的 this 指向当前的对象.\n\n```js\nvar point = {\n  x: 0,\n  y: 0,\n  moveTo: function(x, y) {\n    this.x = this.x + x;\n    this.y = this.y + y;\n  }\n};\n\npoint.moveTo(1, 1); //this 绑定到当前对象，即 point 对象\n```\n\n对于内部函数，即声明在另外一个函数体内的函数，这种绑定到全局对象的方式会产生另外一个问题。我们仍然以前面提到的 point 对象为例，这次我们希望在 moveTo 方法内定义两个函数，分别将 x，y 坐标进行平移。结果可能出乎大家意料，不仅 point 对象没有移动，反而多出两个全局变量 x，y。\n\n```js\nvar point = {\n  x: 0,\n  y: 0,\n  moveTo: function(x, y) {\n    // 内部函数\n    var moveX = function(x) {\n      this.x = x; //this 绑定到了哪里？\n    };\n    // 内部函数\n    var moveY = function(y) {\n      this.y = y; //this 绑定到了哪里？\n    };\n\n    moveX(x);\n    moveY(y);\n  }\n};\npoint.moveTo(1, 1);\npoint.x; //==>0\npoint.y; //==>0\nx; //==>1\ny; //==>1\n```\n\n这属于 JavaScript 的设计缺陷，正确的设计方式是内部函数的 this 应该绑定到其外层函数对应的对象上，为了规避这一设计缺陷，聪明的 JavaScript 程序员想出了变量替代的方法，约定俗成，该变量一般被命名为 that。\n\n```js\nvar point = {\n  x: 0,\n  y: 0,\n  moveTo: function(x, y) {\n    var that = this;\n    // 内部函数\n    var moveX = function(x) {\n      that.x = x;\n    };\n    // 内部函数\n    var moveY = function(y) {\n      that.y = y;\n    };\n    moveX(x);\n    moveY(y);\n  }\n};\npoint.moveTo(1, 1);\npoint.x; //==>1\npoint.y; //==>1\n```\n\n## 作为构造函数调用\n\n构造函数的目的是构造对象,因此 this 的指向即为新构造的对象.\n\n```js\n\"use strict\";\n\nfunction F1() {\n  this.x = 1;\n  this.y = 2;\n}\n\nlet a1 = new F1();\n\nconsole.log(a1); //{x:1,y:2}\n```\n\n但是需要注意的是,如果忘记加 `new`的话 ,构造函数中的 this 仍然是指向 window 的(在严格模式中为 undefined)\n\n```js\nfunction F1() {\n  return this;\n}\n\nlet a2 = F1();\nconsole.log(a2); //window\n```\n\n## 作为 class 中调用\n\nes5 中添加了 class 的概念,其实就是构造函数的语法糖,因此在 class 中 this 的指向与在构造函数中 this 的指向相同.\n\n# 改变 this 的指向\n\n## 箭头函数\n\n箭头函数的 this 始终指向函数定义时的 this，而非执行时。，箭头函数需要记着这句话：“箭头函数中没有 this 绑定，必须通过查找作用域链来决定其值，如果箭头函数被非箭头函数包含，则 this 绑定的是最近一层非箭头函数的 this，否则，this 为 undefined”。\n\n## 在函数内部使用 \\_this\n\n先将调用这个函数的对象保存在变量 \\_this 中，然后在函数中都使用这个 \\_this，这样 \\_this 就不会改变了。\n\n```js\nvar name = \"windowsName\";\n\nvar a = {\n  name: \"Cherry\",\n\n  func1: function() {\n    console.log(this.name);\n  },\n\n  func2: function() {\n    var _this = this;\n    setTimeout(function() {\n      _this.func1();\n    }, 100);\n  }\n};\n\na.func2(); // Cherry\n\n\n\n```\n\n\n","source":"_posts/2020.03.31.js-this.md","raw":"---\ntitle: 理清 js 中的 this\ntags: [JavaScript, this]\ncategories: 随笔\n---\n\n> JavaScript 中的 this 的指向,完全取决于调用的方式.\n\n\n![思维导图 1.png](https://i.loli.net/2020/03/31/XbWd7xsogjIPYB2.png)\n\n# 调用\n\n## 全局调用\n\n```js\nconsole.log(this); //全局对象,在浏览器中为 window 对象,在 nodejs 中为 global,方便起见,后面我们都是在浏览器中运行,即全局对象为 window\n```\n\n## 直接作为函数调用\n\n函数可以被直接调用,这时 this 指向全局对象.比如下面的例子:\n\n```js\nfunction f1(a1) {\n  this.a1 = a1;\n}\n\nf1(1);\n\nconsole.log(window.a1); //1\n//a1 已经成为一个全局对象\n```\n\n注意在全局模式中,函数的 this 为 undefined,因为严格模式禁止 this 关键字指向全局对象.因此:\n\n```js\n\"use strict\";\nfunction f1(a1) {\n  this.a1 = a1;\n}\n\nf1(1);\n\nconsole.log(window.a1); //undefined\n```\n\n## 作为对象的方法调用\n\n在 JavaScript 中,函数也是对象,因此函数也可以作为对象的一个属性,此时这个函数被称为这个对象的方法,在这个方法中使用的 this 指向当前的对象.\n\n```js\nvar point = {\n  x: 0,\n  y: 0,\n  moveTo: function(x, y) {\n    this.x = this.x + x;\n    this.y = this.y + y;\n  }\n};\n\npoint.moveTo(1, 1); //this 绑定到当前对象，即 point 对象\n```\n\n对于内部函数，即声明在另外一个函数体内的函数，这种绑定到全局对象的方式会产生另外一个问题。我们仍然以前面提到的 point 对象为例，这次我们希望在 moveTo 方法内定义两个函数，分别将 x，y 坐标进行平移。结果可能出乎大家意料，不仅 point 对象没有移动，反而多出两个全局变量 x，y。\n\n```js\nvar point = {\n  x: 0,\n  y: 0,\n  moveTo: function(x, y) {\n    // 内部函数\n    var moveX = function(x) {\n      this.x = x; //this 绑定到了哪里？\n    };\n    // 内部函数\n    var moveY = function(y) {\n      this.y = y; //this 绑定到了哪里？\n    };\n\n    moveX(x);\n    moveY(y);\n  }\n};\npoint.moveTo(1, 1);\npoint.x; //==>0\npoint.y; //==>0\nx; //==>1\ny; //==>1\n```\n\n这属于 JavaScript 的设计缺陷，正确的设计方式是内部函数的 this 应该绑定到其外层函数对应的对象上，为了规避这一设计缺陷，聪明的 JavaScript 程序员想出了变量替代的方法，约定俗成，该变量一般被命名为 that。\n\n```js\nvar point = {\n  x: 0,\n  y: 0,\n  moveTo: function(x, y) {\n    var that = this;\n    // 内部函数\n    var moveX = function(x) {\n      that.x = x;\n    };\n    // 内部函数\n    var moveY = function(y) {\n      that.y = y;\n    };\n    moveX(x);\n    moveY(y);\n  }\n};\npoint.moveTo(1, 1);\npoint.x; //==>1\npoint.y; //==>1\n```\n\n## 作为构造函数调用\n\n构造函数的目的是构造对象,因此 this 的指向即为新构造的对象.\n\n```js\n\"use strict\";\n\nfunction F1() {\n  this.x = 1;\n  this.y = 2;\n}\n\nlet a1 = new F1();\n\nconsole.log(a1); //{x:1,y:2}\n```\n\n但是需要注意的是,如果忘记加 `new`的话 ,构造函数中的 this 仍然是指向 window 的(在严格模式中为 undefined)\n\n```js\nfunction F1() {\n  return this;\n}\n\nlet a2 = F1();\nconsole.log(a2); //window\n```\n\n## 作为 class 中调用\n\nes5 中添加了 class 的概念,其实就是构造函数的语法糖,因此在 class 中 this 的指向与在构造函数中 this 的指向相同.\n\n# 改变 this 的指向\n\n## 箭头函数\n\n箭头函数的 this 始终指向函数定义时的 this，而非执行时。，箭头函数需要记着这句话：“箭头函数中没有 this 绑定，必须通过查找作用域链来决定其值，如果箭头函数被非箭头函数包含，则 this 绑定的是最近一层非箭头函数的 this，否则，this 为 undefined”。\n\n## 在函数内部使用 \\_this\n\n先将调用这个函数的对象保存在变量 \\_this 中，然后在函数中都使用这个 \\_this，这样 \\_this 就不会改变了。\n\n```js\nvar name = \"windowsName\";\n\nvar a = {\n  name: \"Cherry\",\n\n  func1: function() {\n    console.log(this.name);\n  },\n\n  func2: function() {\n    var _this = this;\n    setTimeout(function() {\n      _this.func1();\n    }, 100);\n  }\n};\n\na.func2(); // Cherry\n\n\n\n```\n\n\n","slug":"2020.03.31.js-this","published":1,"date":"2020-03-31T02:24:59.068Z","updated":"2020-03-31T07:23:40.540Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziiqm0026rh9z5n1w9bbd","content":"<blockquote>\n<p>JavaScript 中的 this 的指向,完全取决于调用的方式.</p>\n</blockquote>\n<p><img src=\"https://i.loli.net/2020/03/31/XbWd7xsogjIPYB2.png\" alt=\"思维导图 1.png\"></p>\n<h1 id=\"调用\"><a href=\"#调用\" class=\"headerlink\" title=\"调用\"></a>调用</h1><h2 id=\"全局调用\"><a href=\"#全局调用\" class=\"headerlink\" title=\"全局调用\"></a>全局调用</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>); <span class=\"comment\">//全局对象,在浏览器中为 window 对象,在 nodejs 中为 global,方便起见,后面我们都是在浏览器中运行,即全局对象为 window</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"直接作为函数调用\"><a href=\"#直接作为函数调用\" class=\"headerlink\" title=\"直接作为函数调用\"></a>直接作为函数调用</h2><p>函数可以被直接调用,这时 this 指向全局对象.比如下面的例子:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\">a1</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.a1 = a1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">f1(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.a1); <span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"comment\">//a1 已经成为一个全局对象</span></span><br></pre></td></tr></table></figure>\n<p>注意在全局模式中,函数的 this 为 undefined,因为严格模式禁止 this 关键字指向全局对象.因此:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\">a1</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.a1 = a1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">f1(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.a1); <span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"作为对象的方法调用\"><a href=\"#作为对象的方法调用\" class=\"headerlink\" title=\"作为对象的方法调用\"></a>作为对象的方法调用</h2><p>在 JavaScript 中,函数也是对象,因此函数也可以作为对象的一个属性,此时这个函数被称为这个对象的方法,在这个方法中使用的 this 指向当前的对象.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> point = &#123;</span><br><span class=\"line\">  x: <span class=\"number\">0</span>,</span><br><span class=\"line\">  y: <span class=\"number\">0</span>,</span><br><span class=\"line\">  moveTo: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = <span class=\"keyword\">this</span>.x + x;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.y = <span class=\"keyword\">this</span>.y + y;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">point.moveTo(<span class=\"number\">1</span>, <span class=\"number\">1</span>); <span class=\"comment\">//this 绑定到当前对象，即 point 对象</span></span><br></pre></td></tr></table></figure>\n<p>对于内部函数，即声明在另外一个函数体内的函数，这种绑定到全局对象的方式会产生另外一个问题。我们仍然以前面提到的 point 对象为例，这次我们希望在 moveTo 方法内定义两个函数，分别将 x，y 坐标进行平移。结果可能出乎大家意料，不仅 point 对象没有移动，反而多出两个全局变量 x，y。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> point = &#123;</span><br><span class=\"line\">  x: <span class=\"number\">0</span>,</span><br><span class=\"line\">  y: <span class=\"number\">0</span>,</span><br><span class=\"line\">  moveTo: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 内部函数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> moveX = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.x = x; <span class=\"comment\">//this 绑定到了哪里？</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 内部函数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> moveY = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">y</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.y = y; <span class=\"comment\">//this 绑定到了哪里？</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    moveX(x);</span><br><span class=\"line\">    moveY(y);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">point.moveTo(<span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">point.x; <span class=\"comment\">//==&gt;0</span></span><br><span class=\"line\">point.y; <span class=\"comment\">//==&gt;0</span></span><br><span class=\"line\">x; <span class=\"comment\">//==&gt;1</span></span><br><span class=\"line\">y; <span class=\"comment\">//==&gt;1</span></span><br></pre></td></tr></table></figure>\n<p>这属于 JavaScript 的设计缺陷，正确的设计方式是内部函数的 this 应该绑定到其外层函数对应的对象上，为了规避这一设计缺陷，聪明的 JavaScript 程序员想出了变量替代的方法，约定俗成，该变量一般被命名为 that。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> point = &#123;</span><br><span class=\"line\">  x: <span class=\"number\">0</span>,</span><br><span class=\"line\">  y: <span class=\"number\">0</span>,</span><br><span class=\"line\">  moveTo: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 内部函数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> moveX = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">      that.x = x;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 内部函数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> moveY = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">y</span>) </span>&#123;</span><br><span class=\"line\">      that.y = y;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    moveX(x);</span><br><span class=\"line\">    moveY(y);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">point.moveTo(<span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">point.x; <span class=\"comment\">//==&gt;1</span></span><br><span class=\"line\">point.y; <span class=\"comment\">//==&gt;1</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"作为构造函数调用\"><a href=\"#作为构造函数调用\" class=\"headerlink\" title=\"作为构造函数调用\"></a>作为构造函数调用</h2><p>构造函数的目的是构造对象,因此 this 的指向即为新构造的对象.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.x = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.y = <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a1 = <span class=\"keyword\">new</span> F1();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a1); <span class=\"comment\">//&#123;x:1,y:2&#125;</span></span><br></pre></td></tr></table></figure>\n<p>但是需要注意的是,如果忘记加 <code>new</code>的话 ,构造函数中的 this 仍然是指向 window 的(在严格模式中为 undefined)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a2 = F1();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a2); <span class=\"comment\">//window</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"作为-class-中调用\"><a href=\"#作为-class-中调用\" class=\"headerlink\" title=\"作为 class 中调用\"></a>作为 class 中调用</h2><p>es5 中添加了 class 的概念,其实就是构造函数的语法糖,因此在 class 中 this 的指向与在构造函数中 this 的指向相同.</p>\n<h1 id=\"改变-this-的指向\"><a href=\"#改变-this-的指向\" class=\"headerlink\" title=\"改变 this 的指向\"></a>改变 this 的指向</h1><h2 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h2><p>箭头函数的 this 始终指向函数定义时的 this，而非执行时。，箭头函数需要记着这句话：“箭头函数中没有 this 绑定，必须通过查找作用域链来决定其值，如果箭头函数被非箭头函数包含，则 this 绑定的是最近一层非箭头函数的 this，否则，this 为 undefined”。</p>\n<h2 id=\"在函数内部使用-this\"><a href=\"#在函数内部使用-this\" class=\"headerlink\" title=\"在函数内部使用 _this\"></a>在函数内部使用 _this</h2><p>先将调用这个函数的对象保存在变量 _this 中，然后在函数中都使用这个 _this，这样 _this 就不会改变了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"windowsName\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"Cherry\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  func1: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  func2: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      _this.func1();</span><br><span class=\"line\">    &#125;, <span class=\"number\">100</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">a.func2(); <span class=\"comment\">// Cherry</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>JavaScript 中的 this 的指向,完全取决于调用的方式.</p>\n</blockquote>\n<p><img src=\"https://i.loli.net/2020/03/31/XbWd7xsogjIPYB2.png\" alt=\"思维导图 1.png\"></p>\n<h1 id=\"调用\"><a href=\"#调用\" class=\"headerlink\" title=\"调用\"></a>调用</h1><h2 id=\"全局调用\"><a href=\"#全局调用\" class=\"headerlink\" title=\"全局调用\"></a>全局调用</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>); <span class=\"comment\">//全局对象,在浏览器中为 window 对象,在 nodejs 中为 global,方便起见,后面我们都是在浏览器中运行,即全局对象为 window</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"直接作为函数调用\"><a href=\"#直接作为函数调用\" class=\"headerlink\" title=\"直接作为函数调用\"></a>直接作为函数调用</h2><p>函数可以被直接调用,这时 this 指向全局对象.比如下面的例子:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\">a1</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.a1 = a1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">f1(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.a1); <span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"comment\">//a1 已经成为一个全局对象</span></span><br></pre></td></tr></table></figure>\n<p>注意在全局模式中,函数的 this 为 undefined,因为严格模式禁止 this 关键字指向全局对象.因此:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\">a1</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.a1 = a1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">f1(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.a1); <span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"作为对象的方法调用\"><a href=\"#作为对象的方法调用\" class=\"headerlink\" title=\"作为对象的方法调用\"></a>作为对象的方法调用</h2><p>在 JavaScript 中,函数也是对象,因此函数也可以作为对象的一个属性,此时这个函数被称为这个对象的方法,在这个方法中使用的 this 指向当前的对象.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> point = &#123;</span><br><span class=\"line\">  x: <span class=\"number\">0</span>,</span><br><span class=\"line\">  y: <span class=\"number\">0</span>,</span><br><span class=\"line\">  moveTo: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = <span class=\"keyword\">this</span>.x + x;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.y = <span class=\"keyword\">this</span>.y + y;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">point.moveTo(<span class=\"number\">1</span>, <span class=\"number\">1</span>); <span class=\"comment\">//this 绑定到当前对象，即 point 对象</span></span><br></pre></td></tr></table></figure>\n<p>对于内部函数，即声明在另外一个函数体内的函数，这种绑定到全局对象的方式会产生另外一个问题。我们仍然以前面提到的 point 对象为例，这次我们希望在 moveTo 方法内定义两个函数，分别将 x，y 坐标进行平移。结果可能出乎大家意料，不仅 point 对象没有移动，反而多出两个全局变量 x，y。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> point = &#123;</span><br><span class=\"line\">  x: <span class=\"number\">0</span>,</span><br><span class=\"line\">  y: <span class=\"number\">0</span>,</span><br><span class=\"line\">  moveTo: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 内部函数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> moveX = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.x = x; <span class=\"comment\">//this 绑定到了哪里？</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 内部函数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> moveY = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">y</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.y = y; <span class=\"comment\">//this 绑定到了哪里？</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    moveX(x);</span><br><span class=\"line\">    moveY(y);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">point.moveTo(<span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">point.x; <span class=\"comment\">//==&gt;0</span></span><br><span class=\"line\">point.y; <span class=\"comment\">//==&gt;0</span></span><br><span class=\"line\">x; <span class=\"comment\">//==&gt;1</span></span><br><span class=\"line\">y; <span class=\"comment\">//==&gt;1</span></span><br></pre></td></tr></table></figure>\n<p>这属于 JavaScript 的设计缺陷，正确的设计方式是内部函数的 this 应该绑定到其外层函数对应的对象上，为了规避这一设计缺陷，聪明的 JavaScript 程序员想出了变量替代的方法，约定俗成，该变量一般被命名为 that。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> point = &#123;</span><br><span class=\"line\">  x: <span class=\"number\">0</span>,</span><br><span class=\"line\">  y: <span class=\"number\">0</span>,</span><br><span class=\"line\">  moveTo: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 内部函数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> moveX = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">      that.x = x;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 内部函数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> moveY = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">y</span>) </span>&#123;</span><br><span class=\"line\">      that.y = y;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    moveX(x);</span><br><span class=\"line\">    moveY(y);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">point.moveTo(<span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">point.x; <span class=\"comment\">//==&gt;1</span></span><br><span class=\"line\">point.y; <span class=\"comment\">//==&gt;1</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"作为构造函数调用\"><a href=\"#作为构造函数调用\" class=\"headerlink\" title=\"作为构造函数调用\"></a>作为构造函数调用</h2><p>构造函数的目的是构造对象,因此 this 的指向即为新构造的对象.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">\"use strict\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.x = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.y = <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a1 = <span class=\"keyword\">new</span> F1();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a1); <span class=\"comment\">//&#123;x:1,y:2&#125;</span></span><br></pre></td></tr></table></figure>\n<p>但是需要注意的是,如果忘记加 <code>new</code>的话 ,构造函数中的 this 仍然是指向 window 的(在严格模式中为 undefined)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a2 = F1();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a2); <span class=\"comment\">//window</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"作为-class-中调用\"><a href=\"#作为-class-中调用\" class=\"headerlink\" title=\"作为 class 中调用\"></a>作为 class 中调用</h2><p>es5 中添加了 class 的概念,其实就是构造函数的语法糖,因此在 class 中 this 的指向与在构造函数中 this 的指向相同.</p>\n<h1 id=\"改变-this-的指向\"><a href=\"#改变-this-的指向\" class=\"headerlink\" title=\"改变 this 的指向\"></a>改变 this 的指向</h1><h2 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h2><p>箭头函数的 this 始终指向函数定义时的 this，而非执行时。，箭头函数需要记着这句话：“箭头函数中没有 this 绑定，必须通过查找作用域链来决定其值，如果箭头函数被非箭头函数包含，则 this 绑定的是最近一层非箭头函数的 this，否则，this 为 undefined”。</p>\n<h2 id=\"在函数内部使用-this\"><a href=\"#在函数内部使用-this\" class=\"headerlink\" title=\"在函数内部使用 _this\"></a>在函数内部使用 _this</h2><p>先将调用这个函数的对象保存在变量 _this 中，然后在函数中都使用这个 _this，这样 _this 就不会改变了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">\"windowsName\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">  name: <span class=\"string\">\"Cherry\"</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  func1: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  func2: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _this = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      _this.func1();</span><br><span class=\"line\">    &#125;, <span class=\"number\">100</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">a.func2(); <span class=\"comment\">// Cherry</span></span><br></pre></td></tr></table></figure>\n"},{"title":"webpack-bundle-analyzer的使用","_content":"\n`webpack-bundle-analyzer`是 webpack 的一个插件,用来生成代码分析报告,用来提高代码质量和网站性能.\n\n# 安装\n\n```sh\n# Nnpm\nnpm i -D webpack-bundle-analyzer\n# Yarn\nyarn add -D webpack-bundle-analyzer\n\n```\n\n# 在 vue 项目中使用\n\n配置`vue.config.js`\n\n\n```js\nmodule.exports = {\n  publicPath: \"./\",\n  chainWebpack: config => {\n    config.plugin(\"webpack-bundle-analyzer\").use(require(\"webpack-bundle-analyzer\").BundleAnalyzerPlugin);\n  }\n};\n```\n\n接着执行`yarn serve`或者`yarn build`来在 `localhost:8088`生成报告,如下:\n\n![img](https://i.loli.net/2020/04/03/GLJshFrl8SgTCzn.png)\n\n在这张图里我们可以清晰地看到项目的各种依赖.\n同时发现问题:在 moment.js库中存在着我们用不到的 locale(国际化内容),同时 moment 本身体积也比较大.\n![img](https://i.loli.net/2020/04/03/A58VUWiwg297oZh.png)\n\n# 优化方案\n\n选用其他库来替代体积庞大的 moment.\n\n后来找到这么一个库[dayjs](https://github.com/iamkun/dayjs/blob/dev/docs/zh-cn/README.zh-CN.md)\n\n用来替代 moment.\n\n![img](https://i.loli.net/2020/04/03/phaEtNcAU8dV1Gq.png)\n\n\n```sh\n# 卸载 moment\nyarn remove moment\n\n# 安装 dayjs\n\nyarn add dayjs\n```\n\n在 main.js 中修改配置:\n\n因为dayjs 的作者说 api 与 moment 的 api 相同,为了不修改以前的代码,我们这里稍微偷点懒:\n\n\n```js\n\n// 修改前 :\n\nimport  moment from \"moment\";\nVue.prototype.$moment = moment;\n\n// 修改后 :\n\nimport dayjs from \"dayjs\";\nVue.prototype.$moment = dayjs;\n\n\n```\n\n测试下,系统没有报错,nice.\n\n![img](https://i.loli.net/2020/04/03/qOpcg4MI8BoUxkX.png)\n\n看下 8088端口下的分析报告:\n\n![img](https://i.loli.net/2020/04/03/WNXedYxzwlQob2L.png)\n\n\nmoment 库已经没有了,因此我们项目模块大小也减少了大概 200 多 KB,\n\nawesome.\n\n\n","source":"_posts/2020.04.03.webpack-bundle-analyzer.md","raw":"---\ntitle: webpack-bundle-analyzer的使用\ntags: [webpack]\ncategories: 技术\n---\n\n`webpack-bundle-analyzer`是 webpack 的一个插件,用来生成代码分析报告,用来提高代码质量和网站性能.\n\n# 安装\n\n```sh\n# Nnpm\nnpm i -D webpack-bundle-analyzer\n# Yarn\nyarn add -D webpack-bundle-analyzer\n\n```\n\n# 在 vue 项目中使用\n\n配置`vue.config.js`\n\n\n```js\nmodule.exports = {\n  publicPath: \"./\",\n  chainWebpack: config => {\n    config.plugin(\"webpack-bundle-analyzer\").use(require(\"webpack-bundle-analyzer\").BundleAnalyzerPlugin);\n  }\n};\n```\n\n接着执行`yarn serve`或者`yarn build`来在 `localhost:8088`生成报告,如下:\n\n![img](https://i.loli.net/2020/04/03/GLJshFrl8SgTCzn.png)\n\n在这张图里我们可以清晰地看到项目的各种依赖.\n同时发现问题:在 moment.js库中存在着我们用不到的 locale(国际化内容),同时 moment 本身体积也比较大.\n![img](https://i.loli.net/2020/04/03/A58VUWiwg297oZh.png)\n\n# 优化方案\n\n选用其他库来替代体积庞大的 moment.\n\n后来找到这么一个库[dayjs](https://github.com/iamkun/dayjs/blob/dev/docs/zh-cn/README.zh-CN.md)\n\n用来替代 moment.\n\n![img](https://i.loli.net/2020/04/03/phaEtNcAU8dV1Gq.png)\n\n\n```sh\n# 卸载 moment\nyarn remove moment\n\n# 安装 dayjs\n\nyarn add dayjs\n```\n\n在 main.js 中修改配置:\n\n因为dayjs 的作者说 api 与 moment 的 api 相同,为了不修改以前的代码,我们这里稍微偷点懒:\n\n\n```js\n\n// 修改前 :\n\nimport  moment from \"moment\";\nVue.prototype.$moment = moment;\n\n// 修改后 :\n\nimport dayjs from \"dayjs\";\nVue.prototype.$moment = dayjs;\n\n\n```\n\n测试下,系统没有报错,nice.\n\n![img](https://i.loli.net/2020/04/03/qOpcg4MI8BoUxkX.png)\n\n看下 8088端口下的分析报告:\n\n![img](https://i.loli.net/2020/04/03/WNXedYxzwlQob2L.png)\n\n\nmoment 库已经没有了,因此我们项目模块大小也减少了大概 200 多 KB,\n\nawesome.\n\n\n","slug":"2020.04.03.webpack-bundle-analyzer","published":1,"date":"2020-04-03T07:27:40.201Z","updated":"2020-04-03T08:12:15.927Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziiqn0027rh9zf5cugicg","content":"<p><code>webpack-bundle-analyzer</code>是 webpack 的一个插件,用来生成代码分析报告,用来提高代码质量和网站性能.</p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Nnpm</span></span><br><span class=\"line\">npm i -D webpack-bundle-analyzer</span><br><span class=\"line\"><span class=\"comment\"># Yarn</span></span><br><span class=\"line\">yarn add -D webpack-bundle-analyzer</span><br></pre></td></tr></table></figure>\n<h1 id=\"在-vue-项目中使用\"><a href=\"#在-vue-项目中使用\" class=\"headerlink\" title=\"在 vue 项目中使用\"></a>在 vue 项目中使用</h1><p>配置<code>vue.config.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  publicPath: <span class=\"string\">\"./\"</span>,</span><br><span class=\"line\">  chainWebpack: <span class=\"function\"><span class=\"params\">config</span> =&gt;</span> &#123;</span><br><span class=\"line\">    config.plugin(<span class=\"string\">\"webpack-bundle-analyzer\"</span>).use(<span class=\"built_in\">require</span>(<span class=\"string\">\"webpack-bundle-analyzer\"</span>).BundleAnalyzerPlugin);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>接着执行<code>yarn serve</code>或者<code>yarn build</code>来在 <code>localhost:8088</code>生成报告,如下:</p>\n<p><img src=\"https://i.loli.net/2020/04/03/GLJshFrl8SgTCzn.png\" alt=\"img\"></p>\n<p>在这张图里我们可以清晰地看到项目的各种依赖.<br>同时发现问题:在 moment.js库中存在着我们用不到的 locale(国际化内容),同时 moment 本身体积也比较大.<br><img src=\"https://i.loli.net/2020/04/03/A58VUWiwg297oZh.png\" alt=\"img\"></p>\n<h1 id=\"优化方案\"><a href=\"#优化方案\" class=\"headerlink\" title=\"优化方案\"></a>优化方案</h1><p>选用其他库来替代体积庞大的 moment.</p>\n<p>后来找到这么一个库<a href=\"https://github.com/iamkun/dayjs/blob/dev/docs/zh-cn/README.zh-CN.md\" target=\"_blank\" rel=\"noopener\">dayjs</a></p>\n<p>用来替代 moment.</p>\n<p><img src=\"https://i.loli.net/2020/04/03/phaEtNcAU8dV1Gq.png\" alt=\"img\"></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 卸载 moment</span></span><br><span class=\"line\">yarn remove moment</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装 dayjs</span></span><br><span class=\"line\"></span><br><span class=\"line\">yarn add dayjs</span><br></pre></td></tr></table></figure>\n<p>在 main.js 中修改配置:</p>\n<p>因为dayjs 的作者说 api 与 moment 的 api 相同,为了不修改以前的代码,我们这里稍微偷点懒:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 修改前 :</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span>  moment <span class=\"keyword\">from</span> <span class=\"string\">\"moment\"</span>;</span><br><span class=\"line\">Vue.prototype.$moment = moment;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 修改后 :</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> dayjs <span class=\"keyword\">from</span> <span class=\"string\">\"dayjs\"</span>;</span><br><span class=\"line\">Vue.prototype.$moment = dayjs;</span><br></pre></td></tr></table></figure>\n<p>测试下,系统没有报错,nice.</p>\n<p><img src=\"https://i.loli.net/2020/04/03/qOpcg4MI8BoUxkX.png\" alt=\"img\"></p>\n<p>看下 8088端口下的分析报告:</p>\n<p><img src=\"https://i.loli.net/2020/04/03/WNXedYxzwlQob2L.png\" alt=\"img\"></p>\n<p>moment 库已经没有了,因此我们项目模块大小也减少了大概 200 多 KB,</p>\n<p>awesome.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><code>webpack-bundle-analyzer</code>是 webpack 的一个插件,用来生成代码分析报告,用来提高代码质量和网站性能.</p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Nnpm</span></span><br><span class=\"line\">npm i -D webpack-bundle-analyzer</span><br><span class=\"line\"><span class=\"comment\"># Yarn</span></span><br><span class=\"line\">yarn add -D webpack-bundle-analyzer</span><br></pre></td></tr></table></figure>\n<h1 id=\"在-vue-项目中使用\"><a href=\"#在-vue-项目中使用\" class=\"headerlink\" title=\"在 vue 项目中使用\"></a>在 vue 项目中使用</h1><p>配置<code>vue.config.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  publicPath: <span class=\"string\">\"./\"</span>,</span><br><span class=\"line\">  chainWebpack: <span class=\"function\"><span class=\"params\">config</span> =&gt;</span> &#123;</span><br><span class=\"line\">    config.plugin(<span class=\"string\">\"webpack-bundle-analyzer\"</span>).use(<span class=\"built_in\">require</span>(<span class=\"string\">\"webpack-bundle-analyzer\"</span>).BundleAnalyzerPlugin);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>接着执行<code>yarn serve</code>或者<code>yarn build</code>来在 <code>localhost:8088</code>生成报告,如下:</p>\n<p><img src=\"https://i.loli.net/2020/04/03/GLJshFrl8SgTCzn.png\" alt=\"img\"></p>\n<p>在这张图里我们可以清晰地看到项目的各种依赖.<br>同时发现问题:在 moment.js库中存在着我们用不到的 locale(国际化内容),同时 moment 本身体积也比较大.<br><img src=\"https://i.loli.net/2020/04/03/A58VUWiwg297oZh.png\" alt=\"img\"></p>\n<h1 id=\"优化方案\"><a href=\"#优化方案\" class=\"headerlink\" title=\"优化方案\"></a>优化方案</h1><p>选用其他库来替代体积庞大的 moment.</p>\n<p>后来找到这么一个库<a href=\"https://github.com/iamkun/dayjs/blob/dev/docs/zh-cn/README.zh-CN.md\" target=\"_blank\" rel=\"noopener\">dayjs</a></p>\n<p>用来替代 moment.</p>\n<p><img src=\"https://i.loli.net/2020/04/03/phaEtNcAU8dV1Gq.png\" alt=\"img\"></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 卸载 moment</span></span><br><span class=\"line\">yarn remove moment</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装 dayjs</span></span><br><span class=\"line\"></span><br><span class=\"line\">yarn add dayjs</span><br></pre></td></tr></table></figure>\n<p>在 main.js 中修改配置:</p>\n<p>因为dayjs 的作者说 api 与 moment 的 api 相同,为了不修改以前的代码,我们这里稍微偷点懒:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 修改前 :</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span>  moment <span class=\"keyword\">from</span> <span class=\"string\">\"moment\"</span>;</span><br><span class=\"line\">Vue.prototype.$moment = moment;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 修改后 :</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> dayjs <span class=\"keyword\">from</span> <span class=\"string\">\"dayjs\"</span>;</span><br><span class=\"line\">Vue.prototype.$moment = dayjs;</span><br></pre></td></tr></table></figure>\n<p>测试下,系统没有报错,nice.</p>\n<p><img src=\"https://i.loli.net/2020/04/03/qOpcg4MI8BoUxkX.png\" alt=\"img\"></p>\n<p>看下 8088端口下的分析报告:</p>\n<p><img src=\"https://i.loli.net/2020/04/03/WNXedYxzwlQob2L.png\" alt=\"img\"></p>\n<p>moment 库已经没有了,因此我们项目模块大小也减少了大概 200 多 KB,</p>\n<p>awesome.</p>\n"},{"title":"mac配置python 虚拟环境 virtualenv","_content":"\n>The basic problem being addressed is one of dependencies and versions, and indirectly permissions. Imagine you have an application that needs version 1 of LibFoo, but another application requires version 2. How can you use both these libraries? If you install everything into your host python (e.g. python3.8) it’s easy to end up in a situation where two packages have conflicting requirements.\n\n简答来说,`virtualenv`提供的功能就是提供不同的环境给不同的项目,便于各个不同的项目的包管理.例如,项目 1 使用的 a 包的1.0 版本,项目 2 使用的是 a 包的 2.0 版本,这时候就需要 virtualenv 这样的工具帮助我们进行项目管理了.\n\n# 安装&配置\n\n在安装之前需要明确的是对于 mac 用户,系统自带的是 python2.*版本\n\n但是 python2.*版本已经停止维护,因此需要我们自己安装 python3,推荐使用 brew 安装 python3.\n\n同时 py2 版本千万不要去动!系统上有很多对 py2 的依赖,删除 py2 可能会造成不可挽回的后果,同时不是大神的话也不要尝试去修改 python 软连接,这样同样也会造成严重的后果.这里我们采用设置别名的方式来修改 Python的默认版本(仅在 shell 中).\n\n\n## 设置默认 py 版本\n\n查看py 版本:\n\n```sh\nwhich python\n\n# /usr/local/bin/python\n\n\nwhich python3\n\n# /usr/bin/python3\n\n```\n\n\n首先查看当前使用的 shell :\n\n\n```sh\necho $SHELL\n\n# /bin/zsh\n\n\n```\n\n这里我用 zsh 替代了系统默认的 shell,所以输出为 zsh,所以我需要修改  .zshrc 文件.( 如果使用的是默认的 shell 的话,需要配置 `~/.bashrc`)\n\n```sh\n\ncd\n\nvi ./.zshrc\n\n```\n在最后添加一行\n\n```sh\n# .zshrc\n\nalias  python=/usr/bin/python3\n\n# 这里设置的别名就是之前 `which python3 `显示的结果.\n\n```\n\n`:wq`保存以后,执行:\n\n```sh\n. ./.zshrc\n\n```\n\n验证:\n\n\n```sh\n\n python\n# Python 3.7.3 (default, Oct 11 2019, 19:39:43) \n# [Clang 11.0.0 (clang-1100.0.33.12)] on darwin\n# Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n# >>> \n\n```\n接着才是正题:\n\n## 安装  virtualenv\n```sh\npip3 install virtualenv\n\n```\n# 在项目中使用\n\n\n```sh\ncd/project\n\nvirtualenv venv\n# 设置新的环境 `venv`\n\n```\n\n这时会在项目根目录下添加一个 `venv` 文件夹.\n如果使用的编辑器是 vscode 的话,编辑器会提醒我们切换到虚拟环境.\n\n![img](https://i.loli.net/2020/04/08/vsA59xK6O1ZUEq8.png)\n\n切换到虚拟环境之后,我们进入到虚拟环境:\n\n```sh\n. ./venv/bin/active\n\n```\n\n可以看到,flask 只被安装到当前项目环境中.\n\n![img](https://i.loli.net/2020/04/08/nwRYDsbx6keqzpS.png)\n\n\n\n\n\n","source":"_posts/2020.04.08.mac配置virtualenv.md","raw":"---\ntitle: mac配置python 虚拟环境 virtualenv\ntags: [python]\ncategories: 技术\n---\n\n>The basic problem being addressed is one of dependencies and versions, and indirectly permissions. Imagine you have an application that needs version 1 of LibFoo, but another application requires version 2. How can you use both these libraries? If you install everything into your host python (e.g. python3.8) it’s easy to end up in a situation where two packages have conflicting requirements.\n\n简答来说,`virtualenv`提供的功能就是提供不同的环境给不同的项目,便于各个不同的项目的包管理.例如,项目 1 使用的 a 包的1.0 版本,项目 2 使用的是 a 包的 2.0 版本,这时候就需要 virtualenv 这样的工具帮助我们进行项目管理了.\n\n# 安装&配置\n\n在安装之前需要明确的是对于 mac 用户,系统自带的是 python2.*版本\n\n但是 python2.*版本已经停止维护,因此需要我们自己安装 python3,推荐使用 brew 安装 python3.\n\n同时 py2 版本千万不要去动!系统上有很多对 py2 的依赖,删除 py2 可能会造成不可挽回的后果,同时不是大神的话也不要尝试去修改 python 软连接,这样同样也会造成严重的后果.这里我们采用设置别名的方式来修改 Python的默认版本(仅在 shell 中).\n\n\n## 设置默认 py 版本\n\n查看py 版本:\n\n```sh\nwhich python\n\n# /usr/local/bin/python\n\n\nwhich python3\n\n# /usr/bin/python3\n\n```\n\n\n首先查看当前使用的 shell :\n\n\n```sh\necho $SHELL\n\n# /bin/zsh\n\n\n```\n\n这里我用 zsh 替代了系统默认的 shell,所以输出为 zsh,所以我需要修改  .zshrc 文件.( 如果使用的是默认的 shell 的话,需要配置 `~/.bashrc`)\n\n```sh\n\ncd\n\nvi ./.zshrc\n\n```\n在最后添加一行\n\n```sh\n# .zshrc\n\nalias  python=/usr/bin/python3\n\n# 这里设置的别名就是之前 `which python3 `显示的结果.\n\n```\n\n`:wq`保存以后,执行:\n\n```sh\n. ./.zshrc\n\n```\n\n验证:\n\n\n```sh\n\n python\n# Python 3.7.3 (default, Oct 11 2019, 19:39:43) \n# [Clang 11.0.0 (clang-1100.0.33.12)] on darwin\n# Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n# >>> \n\n```\n接着才是正题:\n\n## 安装  virtualenv\n```sh\npip3 install virtualenv\n\n```\n# 在项目中使用\n\n\n```sh\ncd/project\n\nvirtualenv venv\n# 设置新的环境 `venv`\n\n```\n\n这时会在项目根目录下添加一个 `venv` 文件夹.\n如果使用的编辑器是 vscode 的话,编辑器会提醒我们切换到虚拟环境.\n\n![img](https://i.loli.net/2020/04/08/vsA59xK6O1ZUEq8.png)\n\n切换到虚拟环境之后,我们进入到虚拟环境:\n\n```sh\n. ./venv/bin/active\n\n```\n\n可以看到,flask 只被安装到当前项目环境中.\n\n![img](https://i.loli.net/2020/04/08/nwRYDsbx6keqzpS.png)\n\n\n\n\n\n","slug":"2020.04.08.mac配置virtualenv","published":1,"date":"2020-04-08T07:41:19.744Z","updated":"2020-04-08T08:16:28.037Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziiqn0028rh9z64wvayv4","content":"<blockquote>\n<p>The basic problem being addressed is one of dependencies and versions, and indirectly permissions. Imagine you have an application that needs version 1 of LibFoo, but another application requires version 2. How can you use both these libraries? If you install everything into your host python (e.g. python3.8) it’s easy to end up in a situation where two packages have conflicting requirements.</p>\n</blockquote>\n<p>简答来说,<code>virtualenv</code>提供的功能就是提供不同的环境给不同的项目,便于各个不同的项目的包管理.例如,项目 1 使用的 a 包的1.0 版本,项目 2 使用的是 a 包的 2.0 版本,这时候就需要 virtualenv 这样的工具帮助我们进行项目管理了.</p>\n<h1 id=\"安装-amp-配置\"><a href=\"#安装-amp-配置\" class=\"headerlink\" title=\"安装&amp;配置\"></a>安装&amp;配置</h1><p>在安装之前需要明确的是对于 mac 用户,系统自带的是 python2.*版本</p>\n<p>但是 python2.*版本已经停止维护,因此需要我们自己安装 python3,推荐使用 brew 安装 python3.</p>\n<p>同时 py2 版本千万不要去动!系统上有很多对 py2 的依赖,删除 py2 可能会造成不可挽回的后果,同时不是大神的话也不要尝试去修改 python 软连接,这样同样也会造成严重的后果.这里我们采用设置别名的方式来修改 Python的默认版本(仅在 shell 中).</p>\n<h2 id=\"设置默认-py-版本\"><a href=\"#设置默认-py-版本\" class=\"headerlink\" title=\"设置默认 py 版本\"></a>设置默认 py 版本</h2><p>查看py 版本:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">which</span> python</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># /usr/local/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">which</span> python3</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># /usr/bin/python3</span></span><br></pre></td></tr></table></figure>\n<p>首先查看当前使用的 shell :</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$SHELL</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># /bin/zsh</span></span><br></pre></td></tr></table></figure>\n<p>这里我用 zsh 替代了系统默认的 shell,所以输出为 zsh,所以我需要修改  .zshrc 文件.( 如果使用的是默认的 shell 的话,需要配置 <code>~/.bashrc</code>)</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span></span><br><span class=\"line\"></span><br><span class=\"line\">vi ./.zshrc</span><br></pre></td></tr></table></figure>\n<p>在最后添加一行</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># .zshrc</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">alias</span>  python=/usr/bin/python3</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 这里设置的别名就是之前 `which python3 `显示的结果.</span></span><br></pre></td></tr></table></figure>\n<p><code>:wq</code>保存以后,执行:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">. ./.zshrc</span><br></pre></td></tr></table></figure>\n<p>验证:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"> python</span><br><span class=\"line\"><span class=\"comment\"># Python 3.7.3 (default, Oct 11 2019, 19:39:43) </span></span><br><span class=\"line\"><span class=\"comment\"># [Clang 11.0.0 (clang-1100.0.33.12)] on darwin</span></span><br><span class=\"line\"><span class=\"comment\"># Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.</span></span><br><span class=\"line\"><span class=\"comment\"># &gt;&gt;&gt;</span></span><br></pre></td></tr></table></figure>\n<p>接着才是正题:</p>\n<h2 id=\"安装-virtualenv\"><a href=\"#安装-virtualenv\" class=\"headerlink\" title=\"安装  virtualenv\"></a>安装  virtualenv</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install virtualenv</span><br></pre></td></tr></table></figure>\n<h1 id=\"在项目中使用\"><a href=\"#在项目中使用\" class=\"headerlink\" title=\"在项目中使用\"></a>在项目中使用</h1><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span>/project</span><br><span class=\"line\"></span><br><span class=\"line\">virtualenv venv</span><br><span class=\"line\"><span class=\"comment\"># 设置新的环境 `venv`</span></span><br></pre></td></tr></table></figure>\n<p>这时会在项目根目录下添加一个 <code>venv</code> 文件夹.<br>如果使用的编辑器是 vscode 的话,编辑器会提醒我们切换到虚拟环境.</p>\n<p><img src=\"https://i.loli.net/2020/04/08/vsA59xK6O1ZUEq8.png\" alt=\"img\"></p>\n<p>切换到虚拟环境之后,我们进入到虚拟环境:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">. ./venv/bin/active</span><br></pre></td></tr></table></figure>\n<p>可以看到,flask 只被安装到当前项目环境中.</p>\n<p><img src=\"https://i.loli.net/2020/04/08/nwRYDsbx6keqzpS.png\" alt=\"img\"></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>The basic problem being addressed is one of dependencies and versions, and indirectly permissions. Imagine you have an application that needs version 1 of LibFoo, but another application requires version 2. How can you use both these libraries? If you install everything into your host python (e.g. python3.8) it’s easy to end up in a situation where two packages have conflicting requirements.</p>\n</blockquote>\n<p>简答来说,<code>virtualenv</code>提供的功能就是提供不同的环境给不同的项目,便于各个不同的项目的包管理.例如,项目 1 使用的 a 包的1.0 版本,项目 2 使用的是 a 包的 2.0 版本,这时候就需要 virtualenv 这样的工具帮助我们进行项目管理了.</p>\n<h1 id=\"安装-amp-配置\"><a href=\"#安装-amp-配置\" class=\"headerlink\" title=\"安装&amp;配置\"></a>安装&amp;配置</h1><p>在安装之前需要明确的是对于 mac 用户,系统自带的是 python2.*版本</p>\n<p>但是 python2.*版本已经停止维护,因此需要我们自己安装 python3,推荐使用 brew 安装 python3.</p>\n<p>同时 py2 版本千万不要去动!系统上有很多对 py2 的依赖,删除 py2 可能会造成不可挽回的后果,同时不是大神的话也不要尝试去修改 python 软连接,这样同样也会造成严重的后果.这里我们采用设置别名的方式来修改 Python的默认版本(仅在 shell 中).</p>\n<h2 id=\"设置默认-py-版本\"><a href=\"#设置默认-py-版本\" class=\"headerlink\" title=\"设置默认 py 版本\"></a>设置默认 py 版本</h2><p>查看py 版本:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">which</span> python</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># /usr/local/bin/python</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">which</span> python3</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># /usr/bin/python3</span></span><br></pre></td></tr></table></figure>\n<p>首先查看当前使用的 shell :</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$SHELL</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># /bin/zsh</span></span><br></pre></td></tr></table></figure>\n<p>这里我用 zsh 替代了系统默认的 shell,所以输出为 zsh,所以我需要修改  .zshrc 文件.( 如果使用的是默认的 shell 的话,需要配置 <code>~/.bashrc</code>)</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span></span><br><span class=\"line\"></span><br><span class=\"line\">vi ./.zshrc</span><br></pre></td></tr></table></figure>\n<p>在最后添加一行</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># .zshrc</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">alias</span>  python=/usr/bin/python3</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 这里设置的别名就是之前 `which python3 `显示的结果.</span></span><br></pre></td></tr></table></figure>\n<p><code>:wq</code>保存以后,执行:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">. ./.zshrc</span><br></pre></td></tr></table></figure>\n<p>验证:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"> python</span><br><span class=\"line\"><span class=\"comment\"># Python 3.7.3 (default, Oct 11 2019, 19:39:43) </span></span><br><span class=\"line\"><span class=\"comment\"># [Clang 11.0.0 (clang-1100.0.33.12)] on darwin</span></span><br><span class=\"line\"><span class=\"comment\"># Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.</span></span><br><span class=\"line\"><span class=\"comment\"># &gt;&gt;&gt;</span></span><br></pre></td></tr></table></figure>\n<p>接着才是正题:</p>\n<h2 id=\"安装-virtualenv\"><a href=\"#安装-virtualenv\" class=\"headerlink\" title=\"安装  virtualenv\"></a>安装  virtualenv</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install virtualenv</span><br></pre></td></tr></table></figure>\n<h1 id=\"在项目中使用\"><a href=\"#在项目中使用\" class=\"headerlink\" title=\"在项目中使用\"></a>在项目中使用</h1><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span>/project</span><br><span class=\"line\"></span><br><span class=\"line\">virtualenv venv</span><br><span class=\"line\"><span class=\"comment\"># 设置新的环境 `venv`</span></span><br></pre></td></tr></table></figure>\n<p>这时会在项目根目录下添加一个 <code>venv</code> 文件夹.<br>如果使用的编辑器是 vscode 的话,编辑器会提醒我们切换到虚拟环境.</p>\n<p><img src=\"https://i.loli.net/2020/04/08/vsA59xK6O1ZUEq8.png\" alt=\"img\"></p>\n<p>切换到虚拟环境之后,我们进入到虚拟环境:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">. ./venv/bin/active</span><br></pre></td></tr></table></figure>\n<p>可以看到,flask 只被安装到当前项目环境中.</p>\n<p><img src=\"https://i.loli.net/2020/04/08/nwRYDsbx6keqzpS.png\" alt=\"img\"></p>\n"},{"title":"熟悉 docker","_content":"\n# 什么是 docker?\n\n![](http://www.ruanyifeng.com/blogimg/asset/2018/bg2018020901.png)\ndocker 属于 linux 容器的一种封装.\n\n## 什么是 Linux 容器\n\nLinux 容器不是模拟一个完整的操作系统，而是对进程进行隔离。或者说，在正常进程的外面套了一个保护层。对于容器里面的进程来说，它接触到的各种资源都是虚拟的，从而实现与底层系统的隔离。\n\n由于容器是进程级别的，相比虚拟机有启动快,资源占用少,体积小的优势.\n\n# docker 的用途\n\n* 提供一次性的环境;\n* 提供弹性的云服务;\n* 组建微服务架构.\n\n# docker 的架构\n\n![](https://static.oschina.net/uploads/space/2017/0705/154125_8LwL_1251444.png)\n\n## docker 镜像(images)\n\nDocker 把应用程序及其依赖，打包在 image 文件里面。只有通过这个文件，才能生成 Docker 容器。image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。(类似面向对象语言中类与实例的关系).\n\n镜像构建时，会一层层叠加，前一层是后一层的基础.\n\n![](https://img-blog.csdn.net/20170221093655867?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvMjFjbmJhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n\n\n\n## docker 容器(containers)\n\n## docker 仓库\n\n## docker registy\n\n\n\n\n\n\n","source":"_posts/docker.md","raw":"---\ntitle: 熟悉 docker\ntags: [docker]\ncategories: 知识 \n---\n\n# 什么是 docker?\n\n![](http://www.ruanyifeng.com/blogimg/asset/2018/bg2018020901.png)\ndocker 属于 linux 容器的一种封装.\n\n## 什么是 Linux 容器\n\nLinux 容器不是模拟一个完整的操作系统，而是对进程进行隔离。或者说，在正常进程的外面套了一个保护层。对于容器里面的进程来说，它接触到的各种资源都是虚拟的，从而实现与底层系统的隔离。\n\n由于容器是进程级别的，相比虚拟机有启动快,资源占用少,体积小的优势.\n\n# docker 的用途\n\n* 提供一次性的环境;\n* 提供弹性的云服务;\n* 组建微服务架构.\n\n# docker 的架构\n\n![](https://static.oschina.net/uploads/space/2017/0705/154125_8LwL_1251444.png)\n\n## docker 镜像(images)\n\nDocker 把应用程序及其依赖，打包在 image 文件里面。只有通过这个文件，才能生成 Docker 容器。image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。(类似面向对象语言中类与实例的关系).\n\n镜像构建时，会一层层叠加，前一层是后一层的基础.\n\n![](https://img-blog.csdn.net/20170221093655867?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvMjFjbmJhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n\n\n\n## docker 容器(containers)\n\n## docker 仓库\n\n## docker registy\n\n\n\n\n\n\n","slug":"docker","published":1,"date":"2018-11-23T02:10:25.731Z","updated":"2018-11-23T02:41:09.327Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziiqn0029rh9z53fiapbo","content":"<h1 id=\"什么是-docker\"><a href=\"#什么是-docker\" class=\"headerlink\" title=\"什么是 docker?\"></a>什么是 docker?</h1><p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2018/bg2018020901.png\" alt=\"\"><br>docker 属于 linux 容器的一种封装.</p>\n<h2 id=\"什么是-Linux-容器\"><a href=\"#什么是-Linux-容器\" class=\"headerlink\" title=\"什么是 Linux 容器\"></a>什么是 Linux 容器</h2><p>Linux 容器不是模拟一个完整的操作系统，而是对进程进行隔离。或者说，在正常进程的外面套了一个保护层。对于容器里面的进程来说，它接触到的各种资源都是虚拟的，从而实现与底层系统的隔离。</p>\n<p>由于容器是进程级别的，相比虚拟机有启动快,资源占用少,体积小的优势.</p>\n<h1 id=\"docker-的用途\"><a href=\"#docker-的用途\" class=\"headerlink\" title=\"docker 的用途\"></a>docker 的用途</h1><ul>\n<li>提供一次性的环境;</li>\n<li>提供弹性的云服务;</li>\n<li>组建微服务架构.</li>\n</ul>\n<h1 id=\"docker-的架构\"><a href=\"#docker-的架构\" class=\"headerlink\" title=\"docker 的架构\"></a>docker 的架构</h1><p><img src=\"https://static.oschina.net/uploads/space/2017/0705/154125_8LwL_1251444.png\" alt=\"\"></p>\n<h2 id=\"docker-镜像-images\"><a href=\"#docker-镜像-images\" class=\"headerlink\" title=\"docker 镜像(images)\"></a>docker 镜像(images)</h2><p>Docker 把应用程序及其依赖，打包在 image 文件里面。只有通过这个文件，才能生成 Docker 容器。image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。(类似面向对象语言中类与实例的关系).</p>\n<p>镜像构建时，会一层层叠加，前一层是后一层的基础.</p>\n<p><img src=\"https://img-blog.csdn.net/20170221093655867?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvMjFjbmJhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></p>\n<h2 id=\"docker-容器-containers\"><a href=\"#docker-容器-containers\" class=\"headerlink\" title=\"docker 容器(containers)\"></a>docker 容器(containers)</h2><h2 id=\"docker-仓库\"><a href=\"#docker-仓库\" class=\"headerlink\" title=\"docker 仓库\"></a>docker 仓库</h2><h2 id=\"docker-registy\"><a href=\"#docker-registy\" class=\"headerlink\" title=\"docker registy\"></a>docker registy</h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"什么是-docker\"><a href=\"#什么是-docker\" class=\"headerlink\" title=\"什么是 docker?\"></a>什么是 docker?</h1><p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2018/bg2018020901.png\" alt=\"\"><br>docker 属于 linux 容器的一种封装.</p>\n<h2 id=\"什么是-Linux-容器\"><a href=\"#什么是-Linux-容器\" class=\"headerlink\" title=\"什么是 Linux 容器\"></a>什么是 Linux 容器</h2><p>Linux 容器不是模拟一个完整的操作系统，而是对进程进行隔离。或者说，在正常进程的外面套了一个保护层。对于容器里面的进程来说，它接触到的各种资源都是虚拟的，从而实现与底层系统的隔离。</p>\n<p>由于容器是进程级别的，相比虚拟机有启动快,资源占用少,体积小的优势.</p>\n<h1 id=\"docker-的用途\"><a href=\"#docker-的用途\" class=\"headerlink\" title=\"docker 的用途\"></a>docker 的用途</h1><ul>\n<li>提供一次性的环境;</li>\n<li>提供弹性的云服务;</li>\n<li>组建微服务架构.</li>\n</ul>\n<h1 id=\"docker-的架构\"><a href=\"#docker-的架构\" class=\"headerlink\" title=\"docker 的架构\"></a>docker 的架构</h1><p><img src=\"https://static.oschina.net/uploads/space/2017/0705/154125_8LwL_1251444.png\" alt=\"\"></p>\n<h2 id=\"docker-镜像-images\"><a href=\"#docker-镜像-images\" class=\"headerlink\" title=\"docker 镜像(images)\"></a>docker 镜像(images)</h2><p>Docker 把应用程序及其依赖，打包在 image 文件里面。只有通过这个文件，才能生成 Docker 容器。image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。(类似面向对象语言中类与实例的关系).</p>\n<p>镜像构建时，会一层层叠加，前一层是后一层的基础.</p>\n<p><img src=\"https://img-blog.csdn.net/20170221093655867?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvMjFjbmJhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></p>\n<h2 id=\"docker-容器-containers\"><a href=\"#docker-容器-containers\" class=\"headerlink\" title=\"docker 容器(containers)\"></a>docker 容器(containers)</h2><h2 id=\"docker-仓库\"><a href=\"#docker-仓库\" class=\"headerlink\" title=\"docker 仓库\"></a>docker 仓库</h2><h2 id=\"docker-registy\"><a href=\"#docker-registy\" class=\"headerlink\" title=\"docker registy\"></a>docker registy</h2>"},{"title":"ES6语法","_content":"\n## 模板字符串\n\n### 语法\n\n\t`string text`\n\t\n\t`string text line 1\n\t string text line 2`\n\t\n\t`string text ${expression} string text`\n\t\n\ttag `string text ${expression} string text`\n\n---\n\n### 描述\n\n模板字符串使用反引号 (\\` \\`) 来代替普通字符串中的用双引号和单引号。模板字符串可以包含特定语法（${expression}）的占位符。占位符中的表达式和周围的文本会一起传递给一个默认函数，该函数负责将所有的部分连接起来，如果一个模板字符串由表达式开头，则该字符串被称为带标签的模板字符串，该表达式通常是一个函数，它会在模板字符串处理后被调用，在输出最终结果前，你都可以通过该函数来对模板字符串进行操作处理。在模版字符串内使用反引号（`）时，需要在它前面加转义符（\\）。\n\n``\\`` === \"`\" // --> true`\n\n#### 多行字符串\n\n例如:\n\n##### 普通字符串\n\n\tconsole.log('string text line 1\\n' +\n\t'string text line 2');\n\t// \"string text line 1\n\t// string text line 2\"\n\n##### 模板字符串\n\n\tconsole.log(`string text line 1\n\tstring text line 2`);\n\t// \"string text line 1\n\t// string text line 2\"\n\n#### 插入表达式\n\n例如:\n\n##### 普通表达式\n\n\tvar a = 5;\n\tvar b = 10;\n\tconsole.log('Fifteen is ' + (a + b) + ' and\\nnot ' + (2 * a + b) + '.');\n\t// \"Fifteen is 15 and\n\t// not 20.\"\n\n##### 模板字符串表达式\n\n\tvar a = 5;\n\tvar b = 10;\n\tconsole.log(`Fifteen is ${a + b} and\n\tnot ${2 * a + b}.`);\n\t// \"Fifteen is 15 and\n\t// not 20.\"\n\n### 示例\n\n\n\t'use strict';\n\tvar a = 1;\n\tconsole.log(a); //1\n\tconsole.log(`a=${a}`); //a=1\n\tconsole.log('a=${a}'); // a=${a}\n\n\n## 三元表达式\n\n### 语法\n\n`test ? expression1 : expression2` \n\n### 参数\n\n* test: 任何 Boolean 表达式;\n* expression1 : 如果 test 的值为 true ,则返回表达式,可能是逗号表达式;\n* expression2: 如果 test 的值为 false ,则返回表达式,可以使用逗号表达式链接多个表达式.\n\n### 备注\n\n?: 运算符可以用作 if...else.. 语句的快捷方式,例如:\n\t\n\tvar now = new Date();\n\tvar greeting = \"Good\" + ((now.getHours() > 17) ? \" evening.\" : \" day.\");\n\n如果使用 if...else...的话: \n\n\tvar now = new Date();\n\tvar greeting = \"Good\";\n\tif (now.getHours() > 17)\n\t   greeting += \" evening.\";\n\telse\n\t   greeting += \" day.\";\n\n### 示例\n\n\n\n## var/let/const\n\n### 概括\n\n* 使用 const 声明的是常量,在后面出现的代码中不能再修改该常量的值;\n* 使用 let 声明的变量,其作用域为该语句所在的代码块中,不存在变量提升;\n* 使用 var 声明的变量,其作用域为该语句所在的函数内,且存在变量提升现象.\n\n### 示例\n\n\tfor(var i=0;i<=2;i++){\n\t    var a = i;\n\t}\n\tconsole.log(a); //2\n\n---\n\n\tfor(var i=0;i<=2;i++){\n\t    let a = i;\n\t}\n\tconsole.log(a); //undefined\n\n---\n\n\tfor(var i=0;i<=2;i++){\n\t    const a = i;\n\t}\n\tconsole.log(a); //undefined\n\n---\n\n\tconst a = 1;\n\ta = 2 ;\n\tconsole.log(a); //Assignment to constant variable. \n\n---\n\n\tconst a = {b:1};\n\ta.b = 2;\n\tconsole.log(a.b); // 2 \n\n## 箭头函数 =>\n\n### 定义\n\n`(parameters) => { statements }`\n\n如果没有参数:\n\n`() => { statements }`\n\n如果只有一个参数,可以省略括号:\n\n`parameters => { statements }`\n\n如果返回值只有一个表达式,还可以省略花括号:\n\n`parameters => expression`\n\n等价于:\n\n\tfunction (parameters){\n\treturn expression;\n\t}\n\n\n## findIndex()\nfindIndex()方法返回数组中满足提供的测试函数的第一个元素的索引。否则返回-1。\n例如有数组:\n\n\tlet arr = [\n\t\t\t\t{id:1,value:2},\n\t\t\t\t{id:2,value:3},\n\t\t\t\t.......\n\t\t\t]\n想要删除 id=8的元素,可以用:\n`arr.splice(arr.findIndex(item => item.id === 8), 1)`\n\n\n\n\t\n\n\n","source":"_posts/es6.md","raw":"---\ntitle: ES6语法\ntags: [ES6]\ncategories: 知识\n---\n\n## 模板字符串\n\n### 语法\n\n\t`string text`\n\t\n\t`string text line 1\n\t string text line 2`\n\t\n\t`string text ${expression} string text`\n\t\n\ttag `string text ${expression} string text`\n\n---\n\n### 描述\n\n模板字符串使用反引号 (\\` \\`) 来代替普通字符串中的用双引号和单引号。模板字符串可以包含特定语法（${expression}）的占位符。占位符中的表达式和周围的文本会一起传递给一个默认函数，该函数负责将所有的部分连接起来，如果一个模板字符串由表达式开头，则该字符串被称为带标签的模板字符串，该表达式通常是一个函数，它会在模板字符串处理后被调用，在输出最终结果前，你都可以通过该函数来对模板字符串进行操作处理。在模版字符串内使用反引号（`）时，需要在它前面加转义符（\\）。\n\n``\\`` === \"`\" // --> true`\n\n#### 多行字符串\n\n例如:\n\n##### 普通字符串\n\n\tconsole.log('string text line 1\\n' +\n\t'string text line 2');\n\t// \"string text line 1\n\t// string text line 2\"\n\n##### 模板字符串\n\n\tconsole.log(`string text line 1\n\tstring text line 2`);\n\t// \"string text line 1\n\t// string text line 2\"\n\n#### 插入表达式\n\n例如:\n\n##### 普通表达式\n\n\tvar a = 5;\n\tvar b = 10;\n\tconsole.log('Fifteen is ' + (a + b) + ' and\\nnot ' + (2 * a + b) + '.');\n\t// \"Fifteen is 15 and\n\t// not 20.\"\n\n##### 模板字符串表达式\n\n\tvar a = 5;\n\tvar b = 10;\n\tconsole.log(`Fifteen is ${a + b} and\n\tnot ${2 * a + b}.`);\n\t// \"Fifteen is 15 and\n\t// not 20.\"\n\n### 示例\n\n\n\t'use strict';\n\tvar a = 1;\n\tconsole.log(a); //1\n\tconsole.log(`a=${a}`); //a=1\n\tconsole.log('a=${a}'); // a=${a}\n\n\n## 三元表达式\n\n### 语法\n\n`test ? expression1 : expression2` \n\n### 参数\n\n* test: 任何 Boolean 表达式;\n* expression1 : 如果 test 的值为 true ,则返回表达式,可能是逗号表达式;\n* expression2: 如果 test 的值为 false ,则返回表达式,可以使用逗号表达式链接多个表达式.\n\n### 备注\n\n?: 运算符可以用作 if...else.. 语句的快捷方式,例如:\n\t\n\tvar now = new Date();\n\tvar greeting = \"Good\" + ((now.getHours() > 17) ? \" evening.\" : \" day.\");\n\n如果使用 if...else...的话: \n\n\tvar now = new Date();\n\tvar greeting = \"Good\";\n\tif (now.getHours() > 17)\n\t   greeting += \" evening.\";\n\telse\n\t   greeting += \" day.\";\n\n### 示例\n\n\n\n## var/let/const\n\n### 概括\n\n* 使用 const 声明的是常量,在后面出现的代码中不能再修改该常量的值;\n* 使用 let 声明的变量,其作用域为该语句所在的代码块中,不存在变量提升;\n* 使用 var 声明的变量,其作用域为该语句所在的函数内,且存在变量提升现象.\n\n### 示例\n\n\tfor(var i=0;i<=2;i++){\n\t    var a = i;\n\t}\n\tconsole.log(a); //2\n\n---\n\n\tfor(var i=0;i<=2;i++){\n\t    let a = i;\n\t}\n\tconsole.log(a); //undefined\n\n---\n\n\tfor(var i=0;i<=2;i++){\n\t    const a = i;\n\t}\n\tconsole.log(a); //undefined\n\n---\n\n\tconst a = 1;\n\ta = 2 ;\n\tconsole.log(a); //Assignment to constant variable. \n\n---\n\n\tconst a = {b:1};\n\ta.b = 2;\n\tconsole.log(a.b); // 2 \n\n## 箭头函数 =>\n\n### 定义\n\n`(parameters) => { statements }`\n\n如果没有参数:\n\n`() => { statements }`\n\n如果只有一个参数,可以省略括号:\n\n`parameters => { statements }`\n\n如果返回值只有一个表达式,还可以省略花括号:\n\n`parameters => expression`\n\n等价于:\n\n\tfunction (parameters){\n\treturn expression;\n\t}\n\n\n## findIndex()\nfindIndex()方法返回数组中满足提供的测试函数的第一个元素的索引。否则返回-1。\n例如有数组:\n\n\tlet arr = [\n\t\t\t\t{id:1,value:2},\n\t\t\t\t{id:2,value:3},\n\t\t\t\t.......\n\t\t\t]\n想要删除 id=8的元素,可以用:\n`arr.splice(arr.findIndex(item => item.id === 8), 1)`\n\n\n\n\t\n\n\n","slug":"es6","published":1,"date":"2018-11-21T12:02:23.901Z","updated":"2019-01-12T08:47:29.270Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziiqo002arh9z2lbc48oc","content":"<h2 id=\"模板字符串\"><a href=\"#模板字符串\" class=\"headerlink\" title=\"模板字符串\"></a>模板字符串</h2><h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><pre><code>`string text`\n\n`string text line 1\n string text line 2`\n\n`string text ${expression} string text`\n\ntag `string text ${expression} string text`\n</code></pre><hr>\n<h3 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h3><p>模板字符串使用反引号 (` `) 来代替普通字符串中的用双引号和单引号。模板字符串可以包含特定语法（${expression}）的占位符。占位符中的表达式和周围的文本会一起传递给一个默认函数，该函数负责将所有的部分连接起来，如果一个模板字符串由表达式开头，则该字符串被称为带标签的模板字符串，该表达式通常是一个函数，它会在模板字符串处理后被调用，在输出最终结果前，你都可以通过该函数来对模板字符串进行操作处理。在模版字符串内使用反引号（`）时，需要在它前面加转义符（\\）。</p>\n<p><code>\\</code> === “<code>&quot; // --&gt; true</code></p>\n<h4 id=\"多行字符串\"><a href=\"#多行字符串\" class=\"headerlink\" title=\"多行字符串\"></a>多行字符串</h4><p>例如:</p>\n<h5 id=\"普通字符串\"><a href=\"#普通字符串\" class=\"headerlink\" title=\"普通字符串\"></a>普通字符串</h5><pre><code>console.log(&apos;string text line 1\\n&apos; +\n&apos;string text line 2&apos;);\n// &quot;string text line 1\n// string text line 2&quot;\n</code></pre><h5 id=\"模板字符串-1\"><a href=\"#模板字符串-1\" class=\"headerlink\" title=\"模板字符串\"></a>模板字符串</h5><pre><code>console.log(`string text line 1\nstring text line 2`);\n// &quot;string text line 1\n// string text line 2&quot;\n</code></pre><h4 id=\"插入表达式\"><a href=\"#插入表达式\" class=\"headerlink\" title=\"插入表达式\"></a>插入表达式</h4><p>例如:</p>\n<h5 id=\"普通表达式\"><a href=\"#普通表达式\" class=\"headerlink\" title=\"普通表达式\"></a>普通表达式</h5><pre><code>var a = 5;\nvar b = 10;\nconsole.log(&apos;Fifteen is &apos; + (a + b) + &apos; and\\nnot &apos; + (2 * a + b) + &apos;.&apos;);\n// &quot;Fifteen is 15 and\n// not 20.&quot;\n</code></pre><h5 id=\"模板字符串表达式\"><a href=\"#模板字符串表达式\" class=\"headerlink\" title=\"模板字符串表达式\"></a>模板字符串表达式</h5><pre><code>var a = 5;\nvar b = 10;\nconsole.log(`Fifteen is ${a + b} and\nnot ${2 * a + b}.`);\n// &quot;Fifteen is 15 and\n// not 20.&quot;\n</code></pre><h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><pre><code>&apos;use strict&apos;;\nvar a = 1;\nconsole.log(a); //1\nconsole.log(`a=${a}`); //a=1\nconsole.log(&apos;a=${a}&apos;); // a=${a}\n</code></pre><h2 id=\"三元表达式\"><a href=\"#三元表达式\" class=\"headerlink\" title=\"三元表达式\"></a>三元表达式</h2><h3 id=\"语法-1\"><a href=\"#语法-1\" class=\"headerlink\" title=\"语法\"></a>语法</h3><p><code>test ? expression1 : expression2</code> </p>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><ul>\n<li>test: 任何 Boolean 表达式;</li>\n<li>expression1 : 如果 test 的值为 true ,则返回表达式,可能是逗号表达式;</li>\n<li>expression2: 如果 test 的值为 false ,则返回表达式,可以使用逗号表达式链接多个表达式.</li>\n</ul>\n<h3 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h3><p>?: 运算符可以用作 if…else.. 语句的快捷方式,例如:</p>\n<pre><code>var now = new Date();\nvar greeting = &quot;Good&quot; + ((now.getHours() &gt; 17) ? &quot; evening.&quot; : &quot; day.&quot;);\n</code></pre><p>如果使用 if…else…的话: </p>\n<pre><code>var now = new Date();\nvar greeting = &quot;Good&quot;;\nif (now.getHours() &gt; 17)\n   greeting += &quot; evening.&quot;;\nelse\n   greeting += &quot; day.&quot;;\n</code></pre><h3 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h3><h2 id=\"var-let-const\"><a href=\"#var-let-const\" class=\"headerlink\" title=\"var/let/const\"></a>var/let/const</h2><h3 id=\"概括\"><a href=\"#概括\" class=\"headerlink\" title=\"概括\"></a>概括</h3><ul>\n<li>使用 const 声明的是常量,在后面出现的代码中不能再修改该常量的值;</li>\n<li>使用 let 声明的变量,其作用域为该语句所在的代码块中,不存在变量提升;</li>\n<li>使用 var 声明的变量,其作用域为该语句所在的函数内,且存在变量提升现象.</li>\n</ul>\n<h3 id=\"示例-2\"><a href=\"#示例-2\" class=\"headerlink\" title=\"示例\"></a>示例</h3><pre><code>for(var i=0;i&lt;=2;i++){\n    var a = i;\n}\nconsole.log(a); //2\n</code></pre><hr>\n<pre><code>for(var i=0;i&lt;=2;i++){\n    let a = i;\n}\nconsole.log(a); //undefined\n</code></pre><hr>\n<pre><code>for(var i=0;i&lt;=2;i++){\n    const a = i;\n}\nconsole.log(a); //undefined\n</code></pre><hr>\n<pre><code>const a = 1;\na = 2 ;\nconsole.log(a); //Assignment to constant variable. \n</code></pre><hr>\n<pre><code>const a = {b:1};\na.b = 2;\nconsole.log(a.b); // 2 \n</code></pre><h2 id=\"箭头函数-gt\"><a href=\"#箭头函数-gt\" class=\"headerlink\" title=\"箭头函数 =&gt;\"></a>箭头函数 =&gt;</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p><code>(parameters) =&gt; { statements }</code></p>\n<p>如果没有参数:</p>\n<p><code>() =&gt; { statements }</code></p>\n<p>如果只有一个参数,可以省略括号:</p>\n<p><code>parameters =&gt; { statements }</code></p>\n<p>如果返回值只有一个表达式,还可以省略花括号:</p>\n<p><code>parameters =&gt; expression</code></p>\n<p>等价于:</p>\n<pre><code>function (parameters){\nreturn expression;\n}\n</code></pre><h2 id=\"findIndex\"><a href=\"#findIndex\" class=\"headerlink\" title=\"findIndex()\"></a>findIndex()</h2><p>findIndex()方法返回数组中满足提供的测试函数的第一个元素的索引。否则返回-1。<br>例如有数组:</p>\n<pre><code>let arr = [\n            {id:1,value:2},\n            {id:2,value:3},\n            .......\n        ]\n</code></pre><p>想要删除 id=8的元素,可以用:<br><code>arr.splice(arr.findIndex(item =&gt; item.id === 8), 1)</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"模板字符串\"><a href=\"#模板字符串\" class=\"headerlink\" title=\"模板字符串\"></a>模板字符串</h2><h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><pre><code>`string text`\n\n`string text line 1\n string text line 2`\n\n`string text ${expression} string text`\n\ntag `string text ${expression} string text`\n</code></pre><hr>\n<h3 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h3><p>模板字符串使用反引号 (` `) 来代替普通字符串中的用双引号和单引号。模板字符串可以包含特定语法（${expression}）的占位符。占位符中的表达式和周围的文本会一起传递给一个默认函数，该函数负责将所有的部分连接起来，如果一个模板字符串由表达式开头，则该字符串被称为带标签的模板字符串，该表达式通常是一个函数，它会在模板字符串处理后被调用，在输出最终结果前，你都可以通过该函数来对模板字符串进行操作处理。在模版字符串内使用反引号（`）时，需要在它前面加转义符（\\）。</p>\n<p><code>\\</code> === “<code>&quot; // --&gt; true</code></p>\n<h4 id=\"多行字符串\"><a href=\"#多行字符串\" class=\"headerlink\" title=\"多行字符串\"></a>多行字符串</h4><p>例如:</p>\n<h5 id=\"普通字符串\"><a href=\"#普通字符串\" class=\"headerlink\" title=\"普通字符串\"></a>普通字符串</h5><pre><code>console.log(&apos;string text line 1\\n&apos; +\n&apos;string text line 2&apos;);\n// &quot;string text line 1\n// string text line 2&quot;\n</code></pre><h5 id=\"模板字符串-1\"><a href=\"#模板字符串-1\" class=\"headerlink\" title=\"模板字符串\"></a>模板字符串</h5><pre><code>console.log(`string text line 1\nstring text line 2`);\n// &quot;string text line 1\n// string text line 2&quot;\n</code></pre><h4 id=\"插入表达式\"><a href=\"#插入表达式\" class=\"headerlink\" title=\"插入表达式\"></a>插入表达式</h4><p>例如:</p>\n<h5 id=\"普通表达式\"><a href=\"#普通表达式\" class=\"headerlink\" title=\"普通表达式\"></a>普通表达式</h5><pre><code>var a = 5;\nvar b = 10;\nconsole.log(&apos;Fifteen is &apos; + (a + b) + &apos; and\\nnot &apos; + (2 * a + b) + &apos;.&apos;);\n// &quot;Fifteen is 15 and\n// not 20.&quot;\n</code></pre><h5 id=\"模板字符串表达式\"><a href=\"#模板字符串表达式\" class=\"headerlink\" title=\"模板字符串表达式\"></a>模板字符串表达式</h5><pre><code>var a = 5;\nvar b = 10;\nconsole.log(`Fifteen is ${a + b} and\nnot ${2 * a + b}.`);\n// &quot;Fifteen is 15 and\n// not 20.&quot;\n</code></pre><h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><pre><code>&apos;use strict&apos;;\nvar a = 1;\nconsole.log(a); //1\nconsole.log(`a=${a}`); //a=1\nconsole.log(&apos;a=${a}&apos;); // a=${a}\n</code></pre><h2 id=\"三元表达式\"><a href=\"#三元表达式\" class=\"headerlink\" title=\"三元表达式\"></a>三元表达式</h2><h3 id=\"语法-1\"><a href=\"#语法-1\" class=\"headerlink\" title=\"语法\"></a>语法</h3><p><code>test ? expression1 : expression2</code> </p>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><ul>\n<li>test: 任何 Boolean 表达式;</li>\n<li>expression1 : 如果 test 的值为 true ,则返回表达式,可能是逗号表达式;</li>\n<li>expression2: 如果 test 的值为 false ,则返回表达式,可以使用逗号表达式链接多个表达式.</li>\n</ul>\n<h3 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h3><p>?: 运算符可以用作 if…else.. 语句的快捷方式,例如:</p>\n<pre><code>var now = new Date();\nvar greeting = &quot;Good&quot; + ((now.getHours() &gt; 17) ? &quot; evening.&quot; : &quot; day.&quot;);\n</code></pre><p>如果使用 if…else…的话: </p>\n<pre><code>var now = new Date();\nvar greeting = &quot;Good&quot;;\nif (now.getHours() &gt; 17)\n   greeting += &quot; evening.&quot;;\nelse\n   greeting += &quot; day.&quot;;\n</code></pre><h3 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h3><h2 id=\"var-let-const\"><a href=\"#var-let-const\" class=\"headerlink\" title=\"var/let/const\"></a>var/let/const</h2><h3 id=\"概括\"><a href=\"#概括\" class=\"headerlink\" title=\"概括\"></a>概括</h3><ul>\n<li>使用 const 声明的是常量,在后面出现的代码中不能再修改该常量的值;</li>\n<li>使用 let 声明的变量,其作用域为该语句所在的代码块中,不存在变量提升;</li>\n<li>使用 var 声明的变量,其作用域为该语句所在的函数内,且存在变量提升现象.</li>\n</ul>\n<h3 id=\"示例-2\"><a href=\"#示例-2\" class=\"headerlink\" title=\"示例\"></a>示例</h3><pre><code>for(var i=0;i&lt;=2;i++){\n    var a = i;\n}\nconsole.log(a); //2\n</code></pre><hr>\n<pre><code>for(var i=0;i&lt;=2;i++){\n    let a = i;\n}\nconsole.log(a); //undefined\n</code></pre><hr>\n<pre><code>for(var i=0;i&lt;=2;i++){\n    const a = i;\n}\nconsole.log(a); //undefined\n</code></pre><hr>\n<pre><code>const a = 1;\na = 2 ;\nconsole.log(a); //Assignment to constant variable. \n</code></pre><hr>\n<pre><code>const a = {b:1};\na.b = 2;\nconsole.log(a.b); // 2 \n</code></pre><h2 id=\"箭头函数-gt\"><a href=\"#箭头函数-gt\" class=\"headerlink\" title=\"箭头函数 =&gt;\"></a>箭头函数 =&gt;</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p><code>(parameters) =&gt; { statements }</code></p>\n<p>如果没有参数:</p>\n<p><code>() =&gt; { statements }</code></p>\n<p>如果只有一个参数,可以省略括号:</p>\n<p><code>parameters =&gt; { statements }</code></p>\n<p>如果返回值只有一个表达式,还可以省略花括号:</p>\n<p><code>parameters =&gt; expression</code></p>\n<p>等价于:</p>\n<pre><code>function (parameters){\nreturn expression;\n}\n</code></pre><h2 id=\"findIndex\"><a href=\"#findIndex\" class=\"headerlink\" title=\"findIndex()\"></a>findIndex()</h2><p>findIndex()方法返回数组中满足提供的测试函数的第一个元素的索引。否则返回-1。<br>例如有数组:</p>\n<pre><code>let arr = [\n            {id:1,value:2},\n            {id:2,value:3},\n            .......\n        ]\n</code></pre><p>想要删除 id=8的元素,可以用:<br><code>arr.splice(arr.findIndex(item =&gt; item.id === 8), 1)</code></p>\n"},{"title":"寂静之城","_content":"## 作者:马伯庸 \n\n\n\n\n----------\n   \nAnd in the naked light I saw ten thousand people, maybe more.\n\nPeople talking without speaking, people hearing without listening.\n\nPeople writing songs that voices never shared, no one dared disturb the\n\nsound of silence.\n\n--- The sound of silence\n\n美利坚合众国，2015年，纽约。\n\n当电话响起来的时候，阿瓦登正趴在电脑前面睡觉。电话铃声十分急促，尖锐，每一次振动都让他的耳膜难受好久。他揉了揉干涩的眼睛，十分不情愿地爬起来，觉得脑子沉滞无比。\n\n其实他的脑子一直就很沉滞，这种感受既然是生理上的也是心理上的。他身处的房间很狭窄，空气不很好，唯一的两扇窗户紧闭着——即使打开窗户也没用，外面的空气更加浑浊。这是一间大约只有三十平米的小屋子，屋子墙壁上泛黄的墙纸有好几处开始剥落，天花板上的水渍渗成奇怪的形状；一张老式的军绿色行军床摆在墙角，床腿用白漆写着编号；紧挨着行军床的是一张三合板制成的电脑桌，桌上摆着一台浅白色的电脑，机箱后面五颜六色的电线纠缠在一起，把它们自己打成一个古怪的死结，杂乱无章地蔓延到地板与墙角，仿佛常春藤一样。\n\n阿瓦登走到电话前，慢慢坐到地板上，目光呆滞地盯着电话，手却没有动。这部古怪的东西是老式的按键式电话，大概是十几年前的款式，这是阿瓦登有一次去费城出差时偶尔在一家杂货店里买到的；他拿回家以后稍微修理了一下，发现居然还能用，这让他当时小小地兴奋了一阵子。\n\n电话继续在响着，已经是第七声。阿瓦登意识到自己不得不去接听了。于是他弓下腰，用两个指头拈起电话，慢慢把电话放到耳边。\n\n“请说出你的网络编号？”话筒里传来的声音并不急噪，事实上它也不带其他任何的感情色彩，因为这是电脑合成的人工智能语音系统。\n\n“19842015”\n\n阿瓦登熟练地报出一连串数字，同时开始觉得胸有些更闷了。说实话他并不喜欢这些空洞的电子声音，他有时候想，假如打过电话来的是一位声音圆润的女性该多好。阿瓦登知道这是一种不切实际的幻想，不过这幻想会让他的身体得到几秒钟的舒缓。\n\n话筒里的声音仍旧在继续着。\n\n“关于你在十月四日提交的网络论坛用户注册申请已经被受理，经有关部门审查后确认资格无误，请在三日内持本人身份证件、网络使用许可证及相关文件前往办理登记手续，并领取用户名及密码。”\n\n“知道了，谢谢。”\n\n阿瓦登谨慎地选择词语，同时努力挤出一副满足的微笑，好象话筒的另一侧有人在看着自己一样。放下电话，阿瓦登先是茫然地盯着它看了大约两分钟，然后站起来活动一下手腕，坐回到电脑前面，缓慢地推动了一下鼠标。\n\n电脑屏幕“啪”地一声亮了起来，显示出一个登陆的界面，还有一行英文：“请输入你的网络编号和姓名。”阿瓦登将那八位数字敲进去，又输入了自己的名字，点击“登陆”。随即机箱的指示灯开始频繁地闪动起来，整个机器发出细微的噪音。\n\n每一个使用互联网的人都有一个网络编号，没有这个编号，就无法连接进互联网络。每一个编号都是独一无二的，每个人只有一个；这是使用者在网上的唯一代号，既不能修改，也不能取消。这些编号分别对应着使用者身份证上的名字，因此19842015就是阿瓦登，阿瓦登就是19842015。阿瓦登知道有些记忆力不好的人会把自己的编号印在衣服的后面，那看起来颇为滑稽，也容易引发一些不正当的联想。\n\n有关部门说使用网络实名制是为了规范网络秩序方便管理，杜绝因匿名使用网络而产生的一系列重大问题和混乱。阿瓦登不太清楚那一系列重大问题会是什么，他自己没试过用假名上网，他所认识的任何人里也不曾有人尝试过——事实上，从技术角度来说，他根本没办法匿名登陆互联网络，没有编号就没有权限上网，而编号则连接着他的详细档案，换句话说，没人能在网上隐藏自己。有关部门把这一切都考虑的很周详。\n\n“有关部门”，这是一个语意模糊、但却有着权威与震慑力的词组。它既是泛指，又是确指，其所涵盖的意义相当广泛。有时候，它指的是为阿瓦登颁发网络编号的美国联邦网络管理委员会；有时候它是将最新通告及法规发到阿瓦登EMAIL信箱的服务器；还有时候它是监察网络的FBI特属网络调查科；总之一句话，有关部门是无处不在，无职不司的，总会在适当的时候出现，给予指导、监控或者警告，无论你是在网上还是网下。\n\n简直就象是老大哥一样无微不至。\n\n电脑仍旧在持续运转着，阿瓦登知道这得花上一阵子。这台电脑是有关部门配发给他的，具体型号和配置阿瓦登并不清楚，机箱是被焊死的，无法打开。于是他拿出一小瓶清凉油，用右手小拇指的指甲挑出一点抹在自己的太阳穴，然后从脚下堆积如山的杂物里翻出一个塑料杯子，从桌子旁的饮水机里接了半杯蒸馏水，就着一片镇痛片一饮而尽。蒸馏水穿过喉咙和狭长的食道滑进胃里，空泛的味道让他有些恶心。\n\n音响里忽然传来一阵美国国歌的旋律，阿瓦登放下杯子，重新把目光投到电脑上去。这是已经连入互联网络的标志。屏幕上首先跳出来的是有关部门的通告，白底黑色四号字，里面陈述了使用互联网的意义以及最新的规章制度。\n\n“缔造健康的互联网络，美国万岁！”\n\n音响里传来激昂的男性呼声，阿瓦登不大情愿地跟着大声念了一遍。“缔造健康的互联网络，美国万岁！”\n\n这段呼号持续了三十秒钟，然后消失，取而代之的是写着“缔造健康的互联网络”标语的桌面背景。另外一个窗口慢慢浮上开，上面开列出几个选项：工作、娱乐、电子信箱和BBS论坛。其中BBS选项呈现灰色，说明这项功能还没有开通。\n\n整个操作系统简洁明了，这台电脑的浏览器没有地址输入栏，只是在收藏夹里有几个无法修改的的网站地址。理由很简单，这些网站都是健康向上的，假如其他站点和这些网站一样，那么只保留这些网站就够了；假如其他站点与这些网站不一样，那么就是不健康的，是低级趣味，不能保留。这是有关部门精心设计的，是为了公民的精神健康着想，生怕他们受到不良信息的侵染。\n\n阿瓦登首先点开了“工作”，一连串和他工作相关的站点列表与相关软件在电脑上显示出来。阿瓦登是一名程序员，他每天的工作就是根据上级的要求编写程序。这份工作很无聊，不过可以保证他有稳定的收入。他不知道自己的源代码会被用到哪里去，上级也从来没有跟他说过。\n\n他打算继续昨天的工作，但是很快发现自己很难继续下去。阿瓦登觉得今天的情绪比以前要烦躁，无法集中精神，大脑还是很呆滞，胸口仍旧发闷。他试图娱乐自己，但是他发现“娱乐”选项里只有纸牌与挖地雷，根据有关部门的说法，这是两个健康的游戏，没有暴力，没有色情，不会让人产生犯罪冲动，也不涉及任何政治色彩。据说美国境外也是有互联网络站点的，不过无法连上去，因为本国的互联网络自成格局，独立自主，普通人无法直接连接到国外——IE浏览器没有地址栏，就算知道地址也没有用处。\n\n“您有一封新邮件。”\n\n系统忽然跳出来提示，阿瓦登终于找到了可以暂停工作的理由，他很快移动鼠标到电子信箱的选项上，点开，很快一个新的界面出现了。\n\n“To: 19842015\n\nFrom：10045687\n\nSubject: 模块、已经、完成、当前、项目、是否、开始。”\n\n阿瓦登微微地叹了一口气，觉得有些失望。每一次他收到新的电子邮件，都希望能够有一次新鲜的刺激来撞击他日益迟钝的脑神经，每一次他都失望了。其实他早就知道这一点，只不过他觉得保持期待至少能够享受到几秒钟快感。就好象他期待着打电话过来的是一个圆润温柔的女性声音一样。不给自己一些渺茫的希望，阿瓦登觉得自己迟早会疯掉的。\n\n这封信很简短，但是内容很充实。19842015是阿瓦登的网络编号，而10045687则是他的一位同事的编号，这种工作性质的信件通常都以编号相称。信的内容是几个不连续的英文单词，这是有关部门所提倡的一种电子邮件书写方式，因为这样可以方便软件检查信件中是否含有敏感词汇。\n\n阿瓦登打开回信的页面，同时另开了一个窗口，打开一份名字叫做“网络健康语言词汇列表”的TXT文档。这是有关部门要求每一位网民所必须使用的词汇。当他们书写电子邮件或者使用论坛服务的时候，都得从这个词汇列表中寻找适合的名词、形容词、副词或者动词来表达自己想要说的话。一旦过滤软件发现网民使用了列表以外的词，那么这个词就会被自动屏蔽，取而代之的是“请使用健康语言”。\n\n“屏蔽”是个专有名词，被屏蔽的词将不允许再度被使用，无论是在书信里还是口头都不允许。讽刺的是，“屏蔽”一词本身也是被屏蔽的词汇之一。\n\n这个列表是经常更新的，每一次更新都会有几个词在列表上消失，于是阿瓦登不得不费劲脑汁寻找其他词语来代替那个被屏蔽掉的词语或者单字。比如在以前，“运动”这个词是可以使用的，但后来有关部门宣布这也是一个敏感词汇，阿瓦登只好使用“质点位移”来表达相同的意思。\n\n他对照着这份列表，很快就完成了一封文字风格与来信差不多的EMAIL——健康词汇表迫使人们不得不用最短的话来表达最多意思，而且要尽量减少不必要的修辞，所以这些信件就好象是那杯蒸馏水一样，淡而无味，阿瓦登有时候想，他早晚也会和这些水和信一样腐烂，因为这些信是他写的，水是他喝的。\n\n接下来阿瓦登启动检查软件先扫了一遍，确保自己没无意中加入什么敏感词汇。等这一切都完成后，他按下了发送键，邮件被送出去了。\n\n阿瓦登没有留下备份，因为他的机器里没有硬盘，也没有软驱、光驱或者USB接口。这个时代宽带技术已经得到了很大发展，应用软件可以集中在统一的一个服务器中，个人用户调用时的速度丝毫不会觉得迟滞。因此个人不需要硬盘，也不需要本地存储，他们在自己电脑里写的每一份文档、每一段程序、甚至每一个动作都会被自动传送到有关部门的公共服务器中，这样便于管理。换句话说，阿瓦登所使用的电脑，仅仅具备输入和输出两种功能。\n\n完成了这封信后，阿瓦登再度陷入了软绵绵的焦躁状态，这是一个连续工作了三天的程序员的正常反应。这种情绪很危险，因为它让人效率低下精神低迷，而且没有渠道发泄。“疲劳”、“烦躁”以及其他负面词汇都属于危险词汇，如果他写信给别人抱怨的话，那么对方收到的将会是一封写满“请使用健康语言”的EMAIL。\n\n这就是阿瓦登每天的生活，今天比昨天更糟糕，但应该比明天还稍微好一点。事实上这个叙述也很模糊，因为阿瓦登自己并不清楚什么是“好一点”，什么是“更糟糕”。“好”与“坏”是两个变量，而他的生活就是一个定量，只有一个常数叫“压抑”。\n\n阿瓦登推开鼠标，把脑袋向后仰去，长长地呼了一口气。（至少“呼”这个字还没有被屏蔽）这是空虚的表现，他想哼些歌，但却又不记得什么，转而吹了几下口哨，但那听起来与一只生了肺结核的狗差不多，只得做罢。有关部门象幽灵一样充斥在整个房间里，让他无法舒展自己的烦闷。就好象一个人在泥沼里挣扎，刚一张口就被灌入泥水，甚至无法大声呼救。\n\n他的头不安分地转了几转，眼神偶尔撇到了摆在地板上的老式电话机，他忽然想到还必须要去有关部门申请自己的BBS论坛浏览许可证。于是他关掉“工作”和“电子邮件”窗口，退出了网络登陆。阿瓦登在做这些事的时候毫不犹豫，他很高兴能够暂时摆脱互联网络，在那上面他只是一串枯燥的数字和一些“健康词汇”的综合体。\n\n阿瓦登找出一件破旧的黑色呢子大衣，那件大衣继承自他的父亲，袖口和领子已经磨损的很严重，个别地方有灰色的棉花露出来，但还是很耐寒。他把大衣套到身上，戴上一副墨绿色的护镜，用过滤口罩捂住嘴。他犹豫了一下，拿起“旁听者”别在耳朵上，然后走出家门去。\n\n纽约的街上人很少，在这个时代，互联网的普及率相当地高，大部分事务在网上就可以解决，有关部门并不提倡太多的户外活动。太多的户外活动会导致和其他人发生物理接触，而两个人发生物理接触后会发生什么事则很难控制。\n\n“旁听者”就是为了防止这种事而发生的，这是一种便携式的语言过滤器，当携带者说出敏感词汇的时候，它就会自动发出警报。每一位公民外出前都必须要携带这个装置，以便随时检讨自己的言语。当人们意识到旁听者存在的时候，他们往往会选择沉默，至少阿瓦登是如此。有关部门正逐步试图让网络和现实生活统一起来，一起“健康”。\n\n这时候正是11月份，寒风凛冽，天空漂浮着令人压抑的铅灰阴云，街道两旁的电线杆仿佛落光了叶子的枯树，行人们都把自己包裹在黑色或灰色的大衣里面，浓缩成空旷街道上的一个个黑点飞快移动着。一层若有若无的烟雾将整个纽约笼罩起来，不用过滤口罩在这样的空气里呼吸将会是一件很有挑战的事情。\n\n距离上一次离开家门已经有两个月了吧，阿瓦登站在公共汽车站的站牌下，不无感慨地想，周围的一切看起来很陌生，泛黄，而且干燥。那是上一次沙尘暴的痕迹。不过沙尘暴这个词也已经被屏蔽了，因此阿瓦登的脑海里只是闪过那么一下，思想很快就转移到别的事情上去了。\n\n站在阿瓦登旁边的是一个穿着蓝色制服的高个男人。他先是狐疑地看了阿瓦登一眼，看到后者沉默地沉在黑色大衣里，他的两只脚交替移动，缓慢地凑了过去，装做漫不经心对阿瓦登说：\n\n“烟，有吗？”\n\n男人说，每一个字都说的很清晰，而且词与词之间间隔也足够长。这“旁听者”还没有精密到能够完全捕捉到每一个人语速和语调的程度，因此有关部门要求每一位公民都要保持这种说话风格，以方面检测发言人是否使用了规定以外的词汇。\n\n阿瓦登转过头去，看了他一眼，舔舔自己干裂的嘴唇，回答说：\n\n“没有。”\n\n男人很失望，又一次不甘心地张开嘴。\n\n“酒，有吗？”\n\n“没有。”\n\n阿瓦登又重复了一次这个词，他也已经很久没有收到烟和酒了，也许是缺货的关系吧，这是常有的事。不过有一点很奇怪，“旁观者”这一次却没有发出警报。以阿瓦登的经验，以往一旦烟、酒或者其他生活必需品发生短缺现象，这个词就会暂时成为被屏蔽掉的敏感词汇，直到恢复供给为止。\n\n这个男人看起来很疲惫，红肿的眼睛是这个时代的人们普遍的特征，这是长时间挂在网上的关系。他的头发蓬乱，嘴边还留着青色的胡子碴，制服下的衬衣领口散发着刺鼻的霉味。能看的出，他也很久不曾到街上来了。\n\n阿瓦登这时候才注意到，他的耳朵上空荡荡的，没有挂着那个银灰色的小玩意“旁听者”，这实在是一件严重的事情。不携带“旁听者”外出，就意味着语言不会再被过滤，一些不健康的思想和言论就有可能孳生，因此有关部门相当严厉地规定公民上街必须携带旁听者。而这个男人的耳朵旁却什么也没有。阿瓦登暗暗吃惊，一时间不知道是该去提醒还是装做没看到。他暗自想，也许向有关部门举报会更好。\n\n这时候那个男人又朝他靠近了一点，眼神变的饥渴起来。阿瓦登心里一阵紧张，下意识地向后退去。这难道是一次抢劫？还是说他是个压抑太久的同性恋者？那个男人忽然扯住他的袖子，阿瓦登狼狈地挣扎却没有挣开。出乎他的意料，那个男人并没有进一步的动作，而是大吼一声，用一种阿瓦登已经不太习惯了的飞快语速向他倾泻起话语来。阿瓦登被这突如其来的爆发弄的莫名其妙，不知所措。\n\n“我只是想和你多几句话，就几句，我很久没有说过话了。我叫斯多葛，今年三十二岁，记得，是三十二岁。我一直梦想有一套在湖边的房子，有一副钓鱼竿和一条小艇；我讨厌网络，打倒网管；我妻子是个可恶的网络中毒者，她只会用枯燥乏味的话叫我的网络编号；这个城市就是一个大疯人院，里面大疯子管着小疯子，并且把所有没疯的人变的和他们同样疯狂；敏感词汇都去他X的，老*受够了……”\n\n男人的话仿佛一瓶摇晃了很久然后突然打开的罐装碳酸饮料，迅猛，爆裂，而且全无条理。阿瓦登惊愕地望着这个突然狂躁起来的家伙，却不知道如何应对；更可怕的是，他发现自己居然对他产生了一点同情，那种“同病相怜”式的同情。男人的话这时候已经从唠叨变成了纯粹谩骂，全部都是最直抒胸臆的那种。阿瓦登已经有五、六年不曾说过这些脏话，最后一次听到这些也是四年前。有关部门认为这都有碍精神文明，于是全部都屏蔽掉了。\n\n而现在这个男人就在公众场合对着他大吵大嚷，似乎要将被屏蔽掉的敏感词汇一口气全倒出来。他的目光和手势并不针对任何人，甚至也不针对阿瓦登，更象是在一个人在自说自话。阿瓦登的耳膜似乎不习惯这种分贝，开始有些隐隐做痛，他捂着耳朵，拿不定主意是干脆逃掉还是……这时候，远处街道出现两辆警车，一路闪着警灯直直冲着这座公共汽车站而来。\n\n警车开到站台旁时，男人仍旧在痛骂着。警车门开了，涌出了五、六名全副武装的联邦警察。他们扑过去将那个男子按在地上，用橡皮棍痛打。男人两条腿挣扎着，嘴里的语速更快了，骂出来的话也越来越难听。其中一名警察掏出一卷胶带，“嚓”地一声扯下一条向男人的嘴贴去。男人在嘴被胶带封住之前，突然提高嗓门，冲着警察痛快无比地喊了一句：“FUXKYOU, YOUSONOFBITCH！”阿瓦登看到他的表情由疯狂变成享受，面带着微笑，似乎完全陶醉在那一句话所带来的无上快感和解脱感中。\n\n联邦警察们七手八脚地将男人送进了警车，这时才有一名警察走到了阿瓦登的跟前。\n\n“他，是，你朋友？”\n\n“我，不，认识。”\n\n警察盯了他一阵，取下他耳朵上的“旁观者”查看记录，发现他并没有提及任何敏感词汇，于是重新给他戴回去，警告他说那名男子说的全部都是极度反动的词汇，要求他立刻忘掉，然后转身押着那男子离开了。\n\n阿瓦登松了一口气，其实刚才他有一瞬间涌现出一种冲动，也想在这空旷的街道上大喊一声“FUXKYOU, YOUSONOFBITCH”那一定很爽快，他心里想，因为那男子说出这句话的时候表情很享受。不过他也知道，这也是妄想的一种，“旁观者”紧帖在耳朵上的冰凉感觉时刻提醒着他。\n\n街上很快就恢复了冷清，十分钟后，一辆公共汽车慢吞吞地开进站里，锈迹斑斑的车门哗啦一声打开，一个电子女声响彻整个空荡荡的车厢：“请乘客注意文明用语，严格按照健康词汇发言。”\n\n阿瓦登把自己缩进大衣，压抑住自己异样的兴奋，决定继续保持沉默下去。\n\n大约过了一个小时，公共汽车到了目的地。从破碎的车窗玻璃里吹进来的寒风让阿瓦登脸上挂起一层暗灰色的霜气，面部被风中的沙砾和煤渣刮的生疼。他听到电子女声报出了站名，就站起身来，象一条狗一样抖抖身上的土，走下车去。\n\n车站对面就是阿瓦登要去的地方，那是有关部门负责受理BBS论坛申请的网络部。这是一间五层的大楼，正方形，全水泥混凝土结构，外表泛灰。如果没有那几个窗户的话，那么它的外貌将与水泥块没有任何区别：生硬、死气沉沉，让蚊子和蝙蝠都退避三舍。\n\nBBS论坛是一种奇特的东西，从理论上来讲它完全多余，BBS的功能完全可以由EMAIL新闻组来取代，后者更容易管理和审查。而且申请使用BBS论坛资格不是件容易的事，申请人必须要通过十几道手续和漫长的审查才能有浏览资格，浏览资格三个月才会被允许在指定论坛发布帖子，至于自己开设BBS则几乎是不可能。\n\n因此真正对BBS有兴趣的人少之有少。阿瓦登当初之所以决定申请BBS论坛资格，纯粹是因为他那种模糊但却顽强的怀旧心态，就好象他从杂货店里买的那部老式电话一样。他也不知道自己为什么会自找麻烦，也许是为了给生活带来些刺激，还是说为了强调自己和曾经旧时代的那么一点点联系，也许两者兼有之。\n\n阿瓦登恍惚记得在他小的时候，互联网与现在并不太一样。并不是指技术上的不同，而是一种人文的感觉。他希望能通过使用BBS论坛回想起一些当年的事情。\n\n阿瓦登走进网络部的大楼，大楼里和外面一样寒冷，而且阴森。走廊里没有路灯，蓝白色调的两侧墙壁贴满了千篇一律的网络规章条文与标语，冰冷的空气呼吸到肺里，让阿瓦登一阵痉挛。只有走廊尽头的小门缝隙里流泻出一丝光亮，小门的上面挂着一块牌子，上面写的是“网络部BBS论坛科。”\n\n一走进这间屋子，阿瓦登立刻感觉到一阵温洋洋的热气。屋子里的暖气（或者是空调）开的很大，让阿瓦登冻麻了的手脚和脸麻酥酥的，有些发痒，他不禁想伸出手去挠挠。\n\n“公民，请您站在原地不要动。”\n\n一个电子女声忽然从天花板上的喇叭里传来，阿瓦登触电似地把手放下，恭敬地站在原地不同。他借这个机会观察了一下这间屋子。这屋子准确来说应该是一个狭长形的大厅，一道拔地而起的大理石柜台象长城一样将房间割裂成两部分，柜台上还装着一排银白色的圆柱形栅栏，直接连到天花板。屋子里没有任何装饰，没有观赏植物，没有塑料鲜花，甚至没有长椅和饮水机。\n\n“缔造健康的互联网络，美国万岁。”\n\n阿瓦登跟着声音重复了一遍。\n\n“请前往八号窗口。”\n\n电子女声的语调很流畅，因为这是电脑制作出来的，因此没有敏感词汇的限制。\n\n阿瓦登转头看到在自己右手边的不远处，大理石柜台上的液晶屏幕显示着八号的字样。他走过去，拼命抬起头，因为柜台实在太高了，他只能勉强看到边缘，而无法看到柜台另一侧的情形。不过他能听到，一个人走到柜台对面，坐下去，并有翻动纸张与敲击键盘的声音。\n\n“请把文件放入盒子里。”\n\n柜台上的喇叭传来命令。出乎意料，这一次在喇叭里的声音却变了。虽然同样冷漠枯燥，但阿瓦登还是能分辨出它与电子女声的不同——这是一个真正的女性的声音。他惊讶地抬头望去，却什么都看不到，柜台太高了。\n\n“请把文件放入盒子里。”\n\n声音又重复了一次，语气里带着一丝烦躁，似乎对阿瓦登的迟钝很不满。\n\n“是的，这是真正的女声……”阿瓦登想，电子女声永远是彬彬有礼不带任何感情色彩的。他把相关的电子身份证、网络许可证、网络编号和敏感词汇犯罪记录等一系列个人资料卡片一起放进柜台外的一个小金属盒子里，然后把盒子插进柜台上一个同样大小的凹槽中，关好门。很快他听到“唰”的一声，他猜测这也许是对面的人——也许是个女人——将盒子抽出去的声音。\n\n“你申请BBS服务的目的是什么？”\n\n喇叭后的女声浸满了纯粹事务性的腔调。\n\n“为了、提高、互联网络、工作效率、为了、缔造、一个、健康、的网络、环境，更好地、为、祖国、做出、贡献。”\n\n阿瓦登一字一句地回答，心里知道这只是一道官方程序，只需要按标准回答就可以。\n\n对面很快就陷入沉默，大约过了十五分钟，喇叭再度响起。\n\n“最后手续确认，你已经获得BBS论坛浏览权。”\n\n“谢谢。”\n\n“砰”的一声，金属盒子从柜子里弹了出来，里面除了阿瓦登的证件以外还多了五张小尺寸光盘。\n\n“这是有关部门核发给你的BBS论坛统一用户名与密码，BBS论坛列表、互联网BBS论坛使用指南及相应法规、以及最新健康网络词汇列表。”\n\n阿瓦登向前踏了一步，从盒子里将这些东西一股脑全拿出来，揣进大衣的大兜里。那些东西其实是可以全部放在同一张光盘里的，不过有关部门认为每一张光盘装一份文件有助于用户理解这些文件的严肃性和重要性，并产生敬畏。\n\n他心里盼望着那个喇叭能再说两句。让他失望的是，对面传来的是一个人起身并且离开的声音，从脚步声的韵律判断，阿瓦登愈发相信这是一名女性。\n\n“手续办理完毕，请离开网络部回到自己的工作岗位上。”\n\n甜美空洞的电子女声从天花板上传来，阿瓦登厌恶地抽动鼻翼，拿手揉了揉，转身离开这间温暖的大厅，重新进入到寒冷的走廊。\n\n在回家的路上，阿瓦登蜷缩在公共汽车上一动不动，顺利申请到BBS的使用权让他有些虚无缥缈的兴奋。他闭着眼睛，找了一个合适的角度躲开破窗而入的寒风，右手在兜里不断摩挲那一系列光盘，还在怀念着那一个神秘的女声。\n\n如果能再一次听到该多好，他不能抑制自己这样的想法，同时用拇指的指肚在光盘上轻轻地摩擦，幻想这几张光盘也曾经被她的手触摸过。他兴奋的几乎也想破口大骂一句“FUXKYOU, YOUSONOFBITCH”，真奇怪，那名男子的骂声在他的记忆里根深蒂固，并时不时不自觉地滑到唇边。\n\n忽然，他的手指在光盘上发觉到一丝异常的感觉。阿瓦登下意识地朝四周望去，确认周围一个乘客也没有后，他小心翼翼地把光盘全拿出来，就着窗外的光亮仔细端详。\n\n阿瓦登很快注意到，在装有BBS论坛列表的光盘背面，被人用指甲轻轻地划了一道刮痕。这条刮痕很轻，如果不是阿瓦登仔细地抚摩光盘的话，是很难发觉到的。这条刮痕很奇特，是一条直线，而在这条直线末端的不远处，则是另外一条极短的刮痕，似乎刻意想弯成一个圆点。整体看上去就好象是一个叹号，或者倒过来说，象是字母i。\n\n很快他在其他四张光盘上也发现了类似的刮痕，它们造型都不同，但都似乎代表着某种符号。阿瓦登回想起喇叭里那个女声最后一句提到过的文件顺序，于是把这五张光盘按照BBS论坛统一用户名与密码、BBS论坛列表、互联网BBS论坛使用指南、相应法规、以及最新健康网络词汇列表的顺序排列好，接着依次把那五道刮痕用手指临摹到汽车窗户上。很快那些刮痕构成了一个英文单词：\n\ntitle\n\n题目？这是什么意思？\n\n阿瓦登看着这个单词莫名其妙，这究竟是纯属无意的痕迹，还是有人刻意为之？如果是有人刻意为之，他这么做的用意是什么？\n\n这时候汽车停住了，又有几名乘客走上车来。阿瓦登挪动一下身体，不让他们看到自己在车窗上写出来的字迹，然后装做打呵欠的样子抬起袖子，轻轻把那五个字母擦掉。\n\n阿瓦登暗自庆幸，如果他没有在现在发现这些光盘上的痕迹，那么以后就永远没有机会发觉了。按照规定，个人电脑是不允许使用任何存储存设备的，因此阿瓦登的电脑并没有光驱。他下一步所要做的是将这些光盘送交到管区网络安全部，由他们将光盘内资料登陆到服务器中，再转发给阿瓦登。这是为了防止个人私自在家里制造、阅读或者传播黄色或者反动信息，网络安全部发出的通告是这么解释的。联邦的网络警察经常会突入到个人家中进行临时检查，看用户是否非法拥有信息贮存设备，阿瓦登曾经亲眼见过一个邻居被警察带走，原因仅仅是因为他私自藏了一张光盘在家里——其实他只是打算拿那个当茶杯垫用。那个邻居再没回来过。\n\n无论这些符号代表的是什么意思，它都是一种全新的体验，这让阿瓦登感觉到兴奋。怀旧与渴望新奇是阿瓦登生活在这个时代的两根精神支柱，否则他会与这座城市一样变的僵硬，然后窒息而死。\n\n他先来到网络安全分部，将光盘交给那里的负责人，负责人反复地检查光盘和阿瓦登的表情，好象所有使用BBS论坛的人都不可信赖一样。末了负责人终于找不到什么破绽，只得将光盘收下，然后举起右手，阿瓦登和他一起高呼“缔造健康的互联网络”。这句话是唯一被允许可以连贯着被说出来的句子。\n\n回到家里，阿瓦登脱掉大衣，摘了过滤口罩，将旁观者扔到了行军床上，然后整个人也倒进枕头里。每次出去外面都会让他疲劳，这一半是因为他孱弱的肉体已经不大适合室外活动；另外一半原因是因为他必须花费大量的精力来应付旁观者。\n\n过了四十分钟，他才悠悠地醒过来，头还是和平常一样地疼，胸口还是一如既往地闷。胡乱吃了一点东西以后，阿瓦登爬到电脑桌前，打开电脑，按程序登陆上网络，习惯性地先检查了一遍信箱。\n\n信箱里有七、八封新的信件，其中两封是同事发来的事务信。另外五封则是网络安全部发给他的，内容就是他送交的那几张光盘。\n\n阿瓦登打开了包含有BBS论坛的用户名、密码和BBS论坛列表的两封信。他看到自己的论坛通用用户名叫做19842015，和自己的网络编号完全一样，不由得有些失望。他依稀记得在小的时候，BBS论坛的用户名是可以自己决定的，而且每一个论坛都可以不同，一个人在网上并不单只是一串枯燥数字。\n\n小时候的记忆往往是跟童话和幻想混杂在一起，未必与实际相符。现实中你只能使用有关部门指定的用户名和密码，理由很简单，用户名和密码内也可能含有敏感词汇。\n\n阿瓦登又打开了那份BBS列表，全部都是有关部门开设的官方论坛，没有私人的——事实上个人能够合法持有的电脑设备从技术上来说也无法架设新BBS——这些论坛的主题各有侧重点不同，但基本上是围绕着如何更好响应国家号召，缔造健康互联网络来说的。比如其中一个电脑技术论坛，主题就是如何更好地屏蔽掉敏感词汇。\n\n居然在这些论坛中还有一个是关于游戏的。里面正在讨论的是一个如何帮助别人使用健康词汇的网络游戏，玩家可以操纵一名小男孩在街上侦察，看是否有人使用了敏感词汇，小男孩可以选择上前指责或者通知警察，抓到的人越多，小男孩得到的褒奖就越高。\n\n阿瓦登随便打开了几个论坛，里面的人都彬彬有礼，说话很“健康”，就好象街上的那些行人一样。不，准确地说，比街上的气氛还要压抑。在街上的人也许还有机会保留一下自己的小动作，比如阿瓦登刚才在公共汽车上就偷偷地写了TITLE五个字母；而在网上论坛，人的最后的一点隐私也全被暴露出来，有关部门随时可以调看你的一切行动，无从遁形，这就是科学技术发展所带来的进步。\n\n一阵失落和失望袭上阿瓦登的心头，他合上眼睛，把鼠标甩开，重重地向后靠去。原来他天真地以为BBS论坛也许会少许宽松一些，现在看来甚至比现实中更叫人窒息，他感觉到自己好象陷入沉滞的电子淤泥之中，艰于呼吸。“FUXKYOU, YOUSONOFBITCH”再一次涌现到他的唇边，强烈无比，要化好大的力气才控制住。\n\n忽然，他又想到了那个神秘的title，那究竟是什么意思？那五张光盘里或许隐藏着什么？也许这跟title有关系？\n\n阿瓦登想到这里，把目光重新转向电脑屏幕，仔细去看网络安全部发来的五封信的title部分。五张光盘各隐藏着一个字母，凑到一起就是title，那么按照这个方式，那五封EMAIL的title凑到一起，就变成了一句话：去用户学习论坛。”\n\n阿瓦登记得刚才他确实看到其中一个论坛的名字叫做“用户学习”，于是他抱着姑且一试的心态连接到这个论坛去。他希望这并不是一个巧合。\n\n用户论坛是一个事务性论坛，里面是一些关于BBS用户资料的投诉帖和管理帖，斑竹的是一个叫19387465的人；发帖的人和回帖的人数量都很少，里面冷冷清清的。阿瓦登打开帖子列表，按照刚才的规律去搜寻每一个帖子的标题，并把它们综合到一起，很快他就得到了另外一句话：\n\n“每周日辛普森大楼5层B户。”\n\n又是一个谜团，阿瓦登想。但这却坚定了他的信心，这其中必定隐藏着玄机。光盘、EMAIL和BBS论坛，连续三次都可以通过首词组组合的方式得到暗示，绝非巧合。\n\n究竟是什么人会在有关部门的官方文件中隐藏着这样的信息呢？每周日在效率大楼5层B户又会发生什么事情呢？\n\n阿瓦登终于找到了久违的兴奋感，未知事物的新奇刺激着他麻木很久的神经。更重要的是，这种在有关部门正式文件中玩弄的文字技巧，叫他有一种喘息的快感，仿佛一个密不透风的铁面罩上几个透进空气的小孔。\n\n营造健康的互联网络。\n\nFUXKYOU, YOUSONOFBITCH。\n\n阿瓦登盯着屏幕上的桌面背景，用嘴唇比出了那句粗话的口型，并且比出了中指。\n\n在接下来的日子里，阿瓦登一直处于一种潜藏的兴奋状态，就象是一个摆出无辜表情嘴里却藏着糖果的小孩子，在大人转身过去之后露出狡黠的笑容，尽情享受心中藏有秘密的乐趣。\n\n日子一天一天地过去，健康词汇在列表里又少了几个，窗外的空气又浑浊了几分，这已经是生活的常态。阿瓦登自己已经开始拿网络健康词汇表当日历来用，划掉三个词就证明过了三天，划掉七个就证明过了一周，于是周日终于到来了。\n\n阿瓦登抵达辛普森大楼的时间是中午，暗示的句子里并没有指明时间，阿瓦登认为在中午前往应该是比较可以接受的。当穿着深绿军大衣，耳朵上别着旁观者的阿瓦登来到辛普森大楼的入口时，他的心开始忐忑不安地跳跃起来。他在上一星期设想了无数种可能发生的情景，而现在这个谜底就要揭晓了。无论在周日效率大楼会发生什么，也不会比现在的生活更加糟糕，阿瓦登心里想，所以他并不怎么害怕。\n\n他走进大楼内部，发现这里的人也很少，空旷的走廊里只听到他哒哒的脚步声与回音。一部老电梯里贴着“缔造美好网络家园”的广告，以及一个充满了正义感的男性头像海报，背景是星条旗，他在纸里用右手食指指向观看者，头上写着一行字是“公民，请使用健康词汇。”阿瓦登厌恶地转过身去，发现另外一侧也贴着同样的海报，避无可避。\n\n值得庆幸的是五楼很快就到了，电梯的门一开，对面的门上就赫然挂着B户的牌子。门是掉了漆的绿色，门框上还点了几滴墨水，一部简易的电子门铃挂在右上角。\n\n阿瓦登深深吸了一口气，伸手去按电纽。\n\n电铃响起，很快屋子里传来脚步声。阿瓦登觉得这脚步的韵律很熟悉，似乎是在哪里见到过。门“咔拉”一声被打开一半，一名年轻女子一手握着把手，把身体前倾望着阿瓦登，警惕地说：\n\n“你，找谁？”\n\n女子疑惑地问道。阿瓦登一下子就认出了她的声音，就是那个在网络部BBS论坛科柜台后面的女性。她很漂亮，穿着墨绿色绒线衫，头上梳着这时代流行的短发，皮肤特别的白，只有嘴唇能看到一些血色。\n\n看着女子的眼神，一瞬间阿瓦登不知道该说什么好，犹豫了一下，他举起右手，轻声回答说：“title。”\n\n阿瓦登不知道这句话能否奏效，也不知道自己是否真的找对了地方，但这是他唯一能想到的回答了。他紧张地望着那女子，假如那女子忽然报警，那么自己就会被抓起来仔细审问为什么无缘无故跑到陌生人家里。“肆意游走罪”只比“使用敏感词汇罪”轻那么一点。\n\n女子听到他这么说，脸上还是毫无表情，只是把头幅度很轻微地点了一下，右手谨慎地做了一个“进来”的手势。阿瓦登刚要张口，那女子严厉地瞪了他一眼，吓的他把话又吞回去了，乖乖地跟着她进了屋子。\n\n一进屋子，女子首先做的就是把门关好，然后拉起来一层铅灰色的门帘挡在门口。阿瓦登不安地眨着眼睛，趁她拉门帘的时候环顾四周。这屋子是标准的两室一厅，在厅里摆放的是一套双人沙发与一个茶几，茶几上居然还有几束红紫色的塑料花。靠墙是电脑桌和电脑，墙上挂着普通的白色日历，但被主人用粉红色的纸套了边，看起来颇为温馨。一盏粗笨的日光灯从天花板上垂下来，上面象是恶作剧一样挂了几缕绿色的电线，象是垂下藤蔓的葡萄架。阿瓦登注意到厅口的鞋架上有四双鞋，尺码不同，说明今天的客人并不只他一个。\n\n阿瓦登正踌躇不安，忽然女子从背后拍了拍他的肩膀，示意他朝里面走。于是两个人穿过客厅另一侧的短小回廊来到其中一间卧室。卧室上挂着同样质地的铅灰色帘子，女子伸手举起帘布，推开了门。阿瓦登迈了进去，首先映入眼帘的是三名面带微笑的人类，以及一间用真正的鲜花装点的房间。屋子里有很多旧日记忆里的古老物品，比如一幅印象派的油画、一尊乌干达木雕，甚至还有一个银烛台，唯独没有电脑。\n\n他正在迟疑，女子也进了屋子。她谨慎地拉好门帘关上门，将耳边的旁观者取下，回过身来对阿瓦登用曼妙的声音说道：\n\n“欢迎加入说话会！”\n\n“说话会？”\n\n出于习惯，阿瓦登并没有把这三个字说出口，因为他不确定是否“健康”，只是用眼神表示自己的疑惑。\n\n“在这里你可以随便说话，这个该死的东西不会起作用的。”女子把自己的旁观者晃了晃，那个小东西象死掉了一样，对女子句子里两个敏感词汇“随便”和“该死”充耳不闻。\n\n阿瓦登一下子想到上星期在公共汽车站前碰到的男子，如果他摘下旁观者，会不会也会落到同一境地呢？那女子见他犹豫不决，指了指门口的铅灰色门帘说：“放心好了，这里是可以屏蔽掉旁观者信号的，不会有人觉察到。”\n\n“你们，是什么，人，这，是，哪里？”\n\n阿瓦登一边摘下耳朵上的旁观者，一边小声说道，语调还是改不了那种有关部门规定的说话方式。\n\n“这里是说话会，是一个完全自由场所，在这里你可以畅所欲言，请不要拘束。”\n\n另外一个人起身对他说道，这是一名瘦高的中年男子，鼻梁上的眼镜非常地厚。\n\n阿瓦登嗫嚅着，却找不到发音的焦点，在四个人的注视下显得窘迫不堪，脸都要红起来。女子同情地看了他一眼：“可怜的家伙，不用太紧张，每一个刚到这里的人都是这样。慢慢就习惯了。”\n\n她把手搭到阿瓦登的肩上：“我们其实见过的，当然，我见过你，而你没见过我。”她一边说，一边将自己的头发解下来，原来她留的是一头齐肩的乌黑长发，头发披下来的一瞬间阿瓦登觉得她真的很美。\n\n“我……我记得你，记得你的声音。”阿瓦登终于说出了一句完整的话，虽然不够流畅。\n\n“是吗，那可太好了。”女子笑起来，拉着他的手，让他坐到沙发上，递给他一杯水。阿瓦登注意到这是一个款式古老的茶杯，上面还刻着花纹，杯子里的水带着浓郁的香气，阿瓦登尝了一点，那种甜丝丝的味道对喝惯纯净水的舌头来说刺激格外地大。让他觉得浑身一下子被注进了许多活力。\n\n“弄到这个可不容易，我们也不是每周都能喝到。”女子坐到他身边，两只乌黑的眼睛注视着他，“你是怎么知道这个集会的？”\n\n阿瓦登把发现光盘暗示的过程说了一遍，其他四个人都赞许地点了点头。“果然是个聪明人，脑筋还没被陈腐的空气腐蚀掉。”一个三十多岁的胖子称赞道，他的嗓门大的要命。那个戴眼镜的中年人把两只手交叉在一起，表示赞同。\n\n“这正是天生的说话会成员，聪明、敏锐，而且不甘屈从于沉默。”\n\n“那么。”胖子提议，“先让我们鼓掌欢迎说话会的新成员吧。”\n\n于是四个人鼓起掌来，小小的屋子里响起一片掌声。阿瓦登羞涩地举起杯子做回应，他还不太习惯这样的场面。等到掌声稍息，他抬起头怯生生地问道：\n\n“可以问个问题吗？说话会到底是什么？”\n\n带他进屋的女子伸出食指，在他鼻子前两公分的地方比了一比，解释道：\n\n“说话会，就是可以畅所欲言的集会。在这里你不必顾忌什么，说出任何你想说的东西。这里没有敏感词汇，也没有健康互联网络。这里是绝对自由的空间，你可以尽情释放你的灵魂，舒展你的身体，没有任何禁锢与束缚。”说着说着，她的声音变的高亢、奔放，里面饱含了许多早已经被屏蔽掉的词汇，阿瓦登不曾听到这样流畅连贯的话语很久了。\n\n“我们的宗旨就是，说话，就这么简单。”中年人扶扶眼镜，补充道。\n\n“可是，要说些什么呢？”阿瓦登又问道。\n\n“任何事情，你心里想的任何事情都可以说出来。”中年人露出宽和的笑容，“尤其是那些被美国政府限制的思想。”\n\n这可真是一个大胆的集会啊，这分明就是犯罪，阿瓦登心想，但他发觉自己却被这种犯罪慢慢地吸引住了。\n\n“当然，有件事我们会事先说明。说话会是危险的，每一个成员都冒着被有关部门拘捕的风险。联邦执法人员也随时可能破门而入，以非法集会以及非法使用不合法词语的名义把我们抓起来。你现在有权拒绝加入，并且离开。”\n\n阿瓦登听到女子的警告，心里一度犹豫起来。但一想到此刻离去的话，那么又要开始持续那种窒息的泥沼生活，他就难以压抑自己的烦闷。阿瓦登第一次发现，原来“说话”对他来说是一个致命的诱惑，他先前并不知道自己原来是如此地渴望着说话。\n\n“我不会离开的，我要加入你们，说话。”\n\n“那太好了。唔，那么不妨就从自我介绍开始吧。”女子高兴地说，同时站起身来，把右手搭到胸前，“从我开始。我的名字叫阿尔特弥斯，至于网络编号和身份证号码，让他们见鬼去吧！谁会去管那个！我有我自己的名字，我不是数字。”\n\n她的话让所有人包括阿瓦登都笑了起来。接着她继续说道：“不过，这其实只是一个假名，这是希腊神话里的女神。”\n\n“假名？”\n\n“是的，和我户籍本上的名字是不同的。”\n\n“可是，为什么？”\n\n“你不会对自己在档案里的名字厌倦吗？我想起一个自己喜欢的名字，哪怕只有一次机会也好，自己想叫什么就叫什么。在这个说话会里的每一个人都有一个自己喜欢的名字，我们彼此拿这个称呼。”\n\n阿瓦登若有所思地点点头，他很理解阿尔特弥斯的想法。事实上当他在使用网络论坛的时候，也希望能够自己取一个称心如意的名字，而不是被分配一个用户名。\n\n通过介绍，阿瓦登了解到阿尔特弥斯是网络部BBS论坛管理科的职员，今年23岁，未婚，最讨厌蟑螂和蜘蛛，喜欢缝纫与园艺，屋子里的花就是她偷偷从城市边缘摘回来的。\n\n接下来是那名中年人，他自我介绍说名字叫兰斯洛特，41岁，是城市电厂的一名工程师；兰斯洛特这名字出自英国的亚瑟王传说，是一名忠贞的骑士。他有自己的老婆和两个孩子，一男一女；男孩三岁，女孩四岁，他们最喜欢吃的就是柠檬味道的水果糖。说到这里，兰斯洛特说希望下次聚会能把他们也带了，孩子们正是学说话的时候，他想教给他们真正的说话。\n\n那个三十多岁的胖子是网络部的一名网管，叫瓦格纳。这个身份让阿瓦登吃惊不已，他的印象里网管都是些绷着脸全无表情的冷漠生物，但眼前的瓦格纳脸圆滚滚的，油光锃亮，嘴边两条翘起的小胡子神气十足。他喜欢的是雪茄和歌剧，利用网管的特权这两样东西都不难弄到。\n\n“这个能屏蔽掉信号的门帘就是他弄的。”阿尔特弥斯补充说，瓦格纳冲她做了个“乐意为您效劳”的手势，然后点燃了雪茄，把它放到嘴里，很快屋子里就笼罩起一片稀薄的烟雾。\n\n说话会的第四名成员是一位穿着黑色制服的女性，今年刚满三十。她的名字是杜拉丝，城市日报（那个时代的报纸已经全部都数字化了）的编辑，她比阿尔特弥斯还瘦，颧骨高高耸起，眼窝身陷，两片薄薄的嘴唇即使在最说话的时候也很少分开，看不到牙齿。爱好是饲养狗和猫，尽管她并没有养。\n\n“那么，到你了。”阿尔特弥斯对阿瓦登说。阿瓦登想了想，结结巴巴地把自己的情况说了一遍，当谈到自己的爱好时候，他一时间居然想不到自己喜好什么，似乎什么都没有，在那之前他甚至从来没想过。\n\n“那，你最想做的是什么事呢？”阿尔特弥斯把手再一次放在他肩上，诱导着问道。\n\n“真的什么都可以？”\n\n“什么都可以，在这里没有任何限制。”\n\n阿瓦登觉得自己终于找到机会了，他咳了一声，抓抓头，脱口而出一句响亮的叫喊：“FUXKYOU, YOUSONOFBITCH！”\n\n在一瞬间，在座的四个人都被他这句话震惊了。瓦格纳率先反应了过来，他先叼住雪茄，用力鼓掌，然后用右手把雪茄取下来，张嘴大声地赞叹道：“真棒，痛快，这简直是最完美的入会誓词。”\n\n“我宁可听十遍这样的脏话，也不想再去碰那个乏味的电子女声。”兰斯洛特也是一脸陶醉，毫不掩饰自己对电子女声的厌恶。而阿尔特弥斯和杜拉丝全都咯咯地笑起来，杜拉丝发现自己的笑容幅度大了一点，不好意思地把嘴掩住。阿瓦登觉得他们与其说是觉得新奇，不如说是在享受这句脏话所带来的对体制的蔑视与挑战。\n\n“那你叫希望自己叫什么名字呢？” 阿尔特弥斯歪着头问。\n\n“唔……王二。“ 阿瓦登沉吟了一下，回答说。这是一个中式的名字，他以前有一个中国人朋友，喜欢讲故事，故事里的主角名字总是叫王二。\n\n屋子里的气氛现在完全融洽了，大家都开始谈些比较自然的话题，每个人都摆出了最舒服的姿势，阿尔特弥斯不时拿起茶壶来为大家续水。阿瓦登紧张的心情逐渐放松下来，他感觉到自己的脑子前所未有地轻松。\n\n“你知道的。”阿尔特弥斯又给他倒了一杯甜水，“我们一直想把说话会保持在一定规模，平日是没有办法畅所欲言的，我们需要空间。麻烦的是，我们没办法公开征集会员，又不可能直接通过物理接触去寻找，那风险太大。于是兰斯洛特就设计了一套暗示系统，只有发现这些暗示的人才能知道本会的存在。”\n\n“这套系统考虑到的还不止是安全问题。”兰斯洛特把自己的眼镜摘下来仔细擦拭了一下，得意地说，“这其实也是一个会员资格验证。说话会所吸纳的成员，必须有智慧，有头脑，内心渴望激情，并且对自由有着渴望。”\n\n瓦格纳用两根指头夹着雪茄，在事先准备好的烟灰缸里弹了弹烟灰，大声说道：“据我的经验，申请BBS论坛服务的人，大多数都是为了怀旧，或者说渴望一些新鲜的东西，这样的人往往都怀有激情，认为BBS论坛也许能给他们一些与现实不一样的东西——当然，事实上并非如此，美国政府对BBS论坛的管理甚至严厉过电子邮件——这暗示着他们心里渴望解脱束缚。因此我们将暗示隐藏在申请BBS论坛的光盘之中，只有申请人才有机会接触到这些暗示。而只有那些有智慧、观察敏锐的人才会发觉到这些暗示的存在，并顺利解读出来，找到这里。”\n\n“归根到底，说话会也不过是一群渴望自由说话的秘密小团体罢了。”兰斯洛特笑道。\n\n“你是第二个找到说话会的人，第一个是杜拉丝小姐。”\n\n阿尔特弥斯告诉阿瓦登。阿瓦登敬佩地看了杜拉丝一眼，后者淡淡地回答道：“这没什么，这是我的工作，我的工作就是摆弄文字。”\n\n阿瓦登想到上一周在公共汽车站碰到的那个疯狂男子，于是把这件事讲给其他成员听。听完之后，兰斯洛特摇了摇头，从嘴唇里滑出一声叹息：\n\n“这样的事情我也是见过的，我的一个同事就是如此。所以说话会的存在是必要的，这是缓解压力的阀门。长时间的敏感词汇限制会让人都疯掉的，因为他们既无法思考又没办法表达。”\n\n“这正是美国政府有关部门所希望看到的，这样只有傻瓜能够存活下来，一个全是傻瓜的社会是稳定的。” 瓦格纳费力地把自己肥胖的身躯挪了一下位置，轻蔑地说。\n\n“你也是有关部门的一分子，瓦格纳先生。”阿尔特弥斯一边往茶杯里续了些热水，一边抬头轻声说道。\n\n“阿尔特弥斯小姐，我只是一个能比普通人多使用几个敏感词汇的普通人而已。”\n\n大家都笑了起来。阿瓦登从来没有见过这么多的人说这么多的话，这是前所未有的奇妙经验。他惊讶地发现自己居然很快就融进了这个小圈子里，隔阂与陌生感很快就消失了；同时消失的还有胸闷与头晕等习惯性的毛病。\n\n很快话题就从说话会本身扩展到了更加宽泛随意的话题，阿尔特弥斯唱支歌，兰斯洛特说了几个笑话，杜拉丝则给大家讲了美国南部诸州的风土人情；瓦格纳甚至还唱了一段歌剧，虽然阿瓦登一个字也听不懂，但他一点也不吝惜掌声。在这个城市的某一个被屏蔽掉的角落里，五个不甘沉默的人正在享受着在这个时代视为奢侈品的事情——说话。\n\n“王二，你可曾看过《1984》？”\n\n阿尔特弥斯忽然问道，她就靠着阿瓦登坐下，阿瓦登摇摇头，反问道：“这是网络编号的一段么？”\n\n“这是一本书的名字。”\n\n“书？”阿瓦登听到这个名词，头摇的更大了。这是个古老的名词，在这个电脑技术非常发达的时代，网络可以承载一切信息，任何人都可以在网上图书馆查到电子版；因此有关部门认为实体书籍变成了一种没有必要存在的浪费，实体书也就逐渐消亡了。瓦格纳对此的评论是：“有关部门喜欢电子书籍的心情是可以理解的，电子书籍的话，只需要FIND和REPLACE两个命令就可以消灭掉全部不健康词汇，替一本书消毒；而实体书籍的校对与修订却是件旷日持久的工作。”\n\n“这是一本伟大的书，是旧世界哲人们对我们这个时代的预言。”阿尔特弥斯认真地说。“它很早以前就洞察到了肉的束缚与解脱，灵的束缚与解脱，这是说话会的基石。”\n\n阿瓦登不无惊奇地发现他的网络编号开头恰好是这这本书名字：19842015。\n\n“那么，该怎么样才能看到呢？”阿瓦登盯着阿尔特弥斯乌黑色的眼睛问。\n\n“我们也无法找到纸质版，网络图书馆不可能存在这样的书。”兰斯洛特摇摇头，然后重新露出笑容，左手向着杜拉丝摆了个请的姿势，“但我们的杜拉丝小姐应该为她的记忆力而自豪，她在很早已经有幸阅读过这两本书，并且能够记得里面的大部分文字。”\n\n“太好了，然后她写下来了，对吗？”\n\n“那太危险，这时代持有实体书是个大罪过，也容易让说话会暴露。我们只是在每次聚会的时候请杜拉丝小姐为我们背诵。既然是说话会，那么把这两个故事讲出来不是更名符其实吗？”\n\n大家都安静下来，杜拉丝站起来走到屋子中央，其他四个人坐在旁边看着她。阿瓦登不经意地把手搂在阿尔特弥斯肩上，后者微微朝这边靠过来，女性头发的幽香“咝咝”地划过他的鼻子，让他的心里一阵荡漾。屋子里非常暖和，他分不清这是花香还是阿尔特弥斯的味道。\n\n杜拉丝的声音并不高，不过却很清晰有力；她的记忆力确实惊人，不仅记得情节，包括一些细节和句子都可以复述下来。杜拉丝讲到了朱丽亚假装摔倒，然后偷偷递给温斯顿一张写着“我爱你”的纸条，绘声绘色，这让听众们都听的入神了，阿尔特弥斯听的尤其认真，以至于都没有注意到阿瓦登一直注视着她。\n\n“1984的作者预见到了专制的进步，却没有预见到技术的进步。”瓦格纳在杜拉丝停下来喝水的时候发表自己的评论，阿瓦登觉得他与外貌不太相称，是个很有洞察力的技术官僚。\n\n“在大洋国人们还可以靠传递纸条来偷偷表达自己的想法，但是现在不一样了。美国政府有关部门把我们全赶到了网上，而在网络技术发达的今天，我们即使想发一条短信都会被系统或者网管看的一清二楚，无从遁形。现实里呢，还有旁观者在。”瓦格纳在腿上敲了敲雪茄根部，“一句话，技术是中性的，但技术的进步会让自在的世界更自在，集权的世界更加集权。”\n\n“这句话说的很有哲学家的味道哟。”阿尔特弥斯冲瓦格纳挤了挤眼睛，从抽屉里取来一把饼干和曲奇散发给大家。\n\n“就好象同样是0和1，有的人就能写出工具软件，有人却拿那个编出恶性病毒？”\n\n阿瓦登想到一个类似的比喻，瓦格纳听了以后满意地打了个响指。\n\n“很不错的比喻，王二，就是如此，真不愧是程序员。”\n\n谈话持续了不知道有多久，杜拉斯看了一眼墙壁上的挂钟，连忙提醒谈兴正浓的四个人时间快到了。说话会不能持续很长时间，旁听者被屏蔽的越久，暴露的危险就越大。\n\n“那么好吧，我们就抓紧最后半个小时来完成今天的活动。”\n\n阿尔特弥斯一边说着，一边将桌子上的空杯子收走。兰斯洛特和瓦格纳也都站起身来，活动一下已经有些酸疼的肩膀和腰，只有杜拉丝坐在位子上没有动。\n\n“活动？还有什么活动？”\n\n阿瓦登奇怪地问道，说话会除了说话还有其他活动？\n\n“唔，对啊，我们还有其他活动。”阿尔特弥斯撩起额前的长发，对他妩媚一笑：“我们还会和对方完全交流。”\n\n“完全交流？”\n\n“就是intercourse”\n\n“………………”阿瓦登一下子变的脸色苍白，呼吸急促起来，仿佛胃里被灌进去零下三十度的寒风，他几乎不相信自己的耳朵。\n\n“说话会有说话的自由，也有选择与谁上床的自由。”阿尔特弥斯毫不羞涩地说，“我们互相谈话，然后选择合适的人做爱，就象我们选择我们喜欢的词汇说话一样。”\n\n兰斯洛特看阿瓦登很窘迫，走过去拍拍他的肩膀，慢慢地说：“当然，我们不会强迫任何人，这完全是在自愿的基础上。今天我还要早点回去照顾小孩，你们人数正好合适。”\n\n阿瓦登的脸色涨红，热的仿佛夏季的电脑CPU，他甚至不敢多看阿尔特弥斯一眼。他憧憬过女性很长时间，但如此接近还是第一次。\n\n还要回家去照顾小孩子的兰斯洛特向大家道别后就先行离去了，阿尔特弥斯将房间留给瓦格纳与杜拉丝，然后带着惶恐不安的阿瓦登来到了另外一间房间。这间显然是阿尔特弥斯的卧室，屋子里很简单，但却收拾的十分干净，在床上枕头旁还摆着一个手制的布娃娃，床单和窗帘都是粉红色的。\n\n最初的是由阿尔特弥斯主动开始的，丝毫没心理准备的阿瓦登只是被动地任她摆布。经过了几轮挑逗，阿瓦登才逐渐放开，任由潜藏在自己心内的原始欲望奔流出来，那种期待听到圆润女声的青春憧憬本来只是苦闷生活的意淫，而在今天它加倍实现了。很快这种憧憬与他在现实中被压抑的郁闷合流，转化成了猛烈的冲动，让他一次又一次与阿尔特弥斯融为一体。阿瓦登不知道这种冲动和他想大声说出“FUXKYOU, YOUSONOFBITCH”冲动有什么不同，不过现在不是考虑这个的时候，他现在脑子里想的只有尽情地、全无束缚地让自己释放激情，完全没有任何束缚。\n\n强烈的刺激一波波地冲击着兴奋中枢，最终一阵快感浪潮在狂暴洋面扬起头来，达到了一个极高的顶端。阿瓦登在那一瞬间感觉到了前所未有的自由，那种轻盈无比的自由，以及因自由而生的快乐与疲惫。浑身是汗的他喘息着倒在了阿尔特弥斯身上，一阵舒畅的倦意如潮水般淹没了他的身体……\n\n……当他醒来的时候，发现阿尔特弥斯躺在自己身边，赤裸的身体好象一尊白玉雕像，睡姿恬美静谧。他侧过身子去，慵懒地打了个呵欠，然后阿尔特弥斯睁开了眼睛。\n\n“很舒服，对不对？”她问道。\n\n“是啊……”阿瓦登不知道该说什么好，他顿了顿，犹豫地说道：“你以前和兰斯洛特、瓦格纳他们也……呃，我是说，象刚才那样子过吗？”\n\n“是的。”阿尔特弥斯温柔地回答，她半支起胳膊，长发从肩膀披到了胸口。她的大方坦白反而让阿瓦登有些不知所措。屋子里出现了一段时间的沉默，然后阿尔特弥斯忽然开口问道：\n\n“还记得今天杜拉丝讲的那段故事吗？女主角偷偷递给男主角写着“我爱你”的纸条。”\n\n“唔，还记得。”阿瓦登回答，很高兴终于能从那个拙劣的话题摆脱出来了。\n\n“在有关部门的健康互联网络词汇列表里，没有爱这个字呢。在我们这个时代，我爱你也是一个敏感词汇，被屏蔽掉了。”阿尔特弥斯的眼神里似乎是感慨，又象是失落。\n\n“我爱你。”阿瓦登不禁脱口而出，他知道在这间屋子里可以说出任何自己想说的话，不必顾忌。\n\n“谢谢你。”\n\n阿尔特弥斯听到之后只是笑了笑，起身穿上衣服，催促阿瓦登时间差不多了。阿瓦登有些失望，因为她没有预期反应的热烈，仿佛他刚才说的只是有些无关紧要的东西。\n\n这时候杜拉丝和瓦格纳已经离开了，屋子里只剩他们两个人。阿尔特弥斯把他送到门口，将旁观者交给他，然后叮嘱他说：“记得在外面绝对不要提及说话会的任何事情或者任何人，我们在说话会以外的地方是完全不认识的。”\n\n“我记住了。”阿瓦登回答，然后转身要走。\n\n“王二。”\n\n阿尔特弥斯忽然叫道，阿瓦登连忙转身，还没等他反应过来，两片柔软温暖的嘴唇忽然贴到了他的双唇，然后是一个细切的声音在耳边响起：“谢谢你，我爱你。”\n\n阿瓦登觉得眼睛有些湿润，他戴上旁观者，推开门，重新步入到那一片令人窒息的世界中去，但他此时已与来时的心境大不相同。\n\n此后阿瓦登的精神面貌明显有了改善。他谨慎地享受着这种秘密集会的乐趣，并且乐在其中。每一周或者两周，他们五个人都会在周日秘密地举行说话会的活动，聊天，唱歌或者听杜拉丝讲1984的故事。阿瓦登同阿尔特弥斯又“完全交流”了几次，偶尔他也会跟杜拉丝“交流”。他有了两个身份，一个是现实中和网上的阿瓦登，编号19842015，还有一个是说话会里的王二。他很享受这个名字，觉得这就是自己另外的一个人生。\n\n有一次集会，他们谈到了敏感词汇的问题。阿瓦登记得很早的时候——他对这方面的记忆有点模糊——有关部门给出的是一份敏感词汇列表，由网站的内部管理人员秘密参考使用，他对如何演变成现在的局面大惑不解。那一天瓦格纳带了一瓶葡萄酒，兴致很高，于是索性给他们讲了讲“屏蔽”的进化史，身为网管的他经常可以接触到这些资料。\n\n在最开始美国政府只是单纯地屏蔽掉敏感词汇，但很快他们就发现这样的措施根本没有用处。很多人会采取在词组中夹杂符号或者数字的方式来绕开系统检查；于是有关部门不得不将这些近似敏感词汇也一一屏蔽掉。然而众所周知，数字与符号之间的组合方式是近乎无限的，只要你有想象力，就完全可以组合出一个新的词组而且不失掉他的原意。比如说“politic”这个词，就有“politi/c”、“政polit/ic”、“pol/itic”等近乎无限种表达方式。\n\n当有关部门意识到这个问题时，他们采取了新的策略。既然无法辨识词组，那么就用单词屏蔽。这一举措在一开始是奏效的，违规交谈的人显著减少，但很快人们就发现可以用同音字或者谐音的方式来继续表达自己的危险思想。即使有关部门封掉全部敏感词汇的同音字，也无济于事，思想活跃的美国人充分发挥了自己的想象力，使用隐喻，借代、类比、引申及其他修辞方法，或者将一个敏感词用数个不敏感的字来代替。人类的思维方式要比电脑开阔许多。电脑屏蔽掉一条路，他们还会有更多的路可以选择。\n\n这一场水面以下的角力看起来似乎是美国大众要取得胜利。这时候，一个具有逆向思维精神的人出现了。他的身份不明。有人说他是有关部门的主管；也有人说他是因过度使用敏感词汇而被捕的危险人士。无论他是谁，总之整个局面被扭转过来。他向有关部门建议，不再告诉大众禁止说什么，而是规定他们只能说什么，用什么方式去说。有关部门很快就心领神会，制订了新的规章制度：取消了敏感词汇列表，取而代之的是互联网络健康语言列表，并把这举措推广到了日常生活中的语言屏蔽系统中去。\n\n这一次，大众终于处于下风。以往他们与有关部门尽情地在网络与现实中捉着迷藏，而现在他们却被有关部门扼住了咽喉。这样一来，有关部门可以有效率地掌握住言论，因为整个语言的框架都被彻底控制了。在有限的空间内，大众几乎是无计可施。\n\n尽管如此，大众还是不屈不挠地将这场战争——或者说游戏——继续下去，他们挑选健康词汇列表中的合法字眼来表达不合法的意思：两个连续的“稳定”意思就是“反对”，“稳定”加“繁荣昌盛”则暗示“屏蔽”。美国政府不得不对这一动向保持着警惕，并日复一日地将更多的词汇从健康词汇列表里删掉，禁止大众使用。\n\n“当然，这场战争会持续下去的。只要世界上还存在着两个不同的字或者词组，那么就可以继续自由交流——你知道莫尔斯电码吧？”\n\n瓦格纳说到这里，拿起茶杯一饮而尽，满意地打了一个嗝。\n\n“可是，这场战争的代价就是语言的失落。表达能力会越来越贫乏，越来越淡而无味，人们会越来越倾向于沉默，这对有关部门反而是好事。”兰斯洛特摆出一副忧虑的表情，有节奏地用指关节敲击着桌面，“这样一来，岂不就等于是大众的自由意识将语言推向死亡的边缘？真讽刺啊。按照这个趋势，有关部门是不会败的，他们会笑到最后。”\n\n“不，不，笑这种情感他们是不会了解的。”瓦格纳淡淡地回答。\n\n“我倒是觉得，美国是一直处于恐惧的情感之中呢，生怕人们掌握了太多的词汇，表达出太多的思想，变的难以掌握。”阿尔特弥斯说完摆出一副她在上班期间冷若冰霜的呆板脸孔，学着僵硬的腔调喊了一句：“营造健康的网络环境，美国万岁！”\n\n杜拉丝、兰斯洛特与瓦格纳都哈哈大笑，唯一没笑的是王二（阿瓦登）。他对于兰斯洛特刚才的那句话始终耿耿于怀：大众与有关部门的对抗，其最终结局就是语言的消亡。那么他们现在这个小小的说话会，也只不过是在一列开向悬崖的列车里关上窗帘，享受坠毁前最后的宁静罢了。\n\n不过他没有说出口，因为这太煞风景了。阿瓦登不希望破坏说话会的气氛，这对他很重要。\n\n从说话会回到家里，阿瓦登躺在行军床上，双手枕着脑袋，陷入了沉思。自从加入说话会以后，他变的比以前更容易陷入思考。有时候他想的是这个社会、这个互联网络或者这座城市中存在的荒谬性；有时候他想的是自己的生活；还有时候他想的是阿尔特弥斯。他不知道是不是在一个压抑的世界里，人的情感会变的格外强烈，他现在陷入对阿尔特弥斯的迷恋无法自拔。阿瓦登一直很羡慕杜拉丝讲的《1984》里面的温斯顿，他和朱利亚有一间两个人独处的小屋，一个只属于他们两个人的小世界。\n\n他在与阿尔特弥斯“完全交流”的时候曾经吐露过自己的心声，阿尔特弥斯没有直接回答，而是表示两个人的关系无法再比说话会更近一步——维持现在的状态就已经是个人行为的极限，有关部门可不会一直打瞌睡。“我们只能把感情生活压缩在每周一次的说话会活动里，这已经很奢侈了。”她对他说，同时温柔地抚摩他的胸膛。“只有在说话会里，我们才是阿尔特弥斯和王二。而在其他时间里，你是19842015，而我是19387465。”\n\n对此，阿瓦登只能发出一声轻轻的叹息，确实他不该奢求更多。\n\n除了感情，发生变化的还有互联网络。自从加入说话会以后，阿瓦登逐渐发现互联网表面下潜藏的一些东西。正如瓦格纳在一次活动的时候指出，普罗大众与有关部门的战争从未结束，总会有思想和言论从严厉管制的缝隙中流泻出来。阿瓦登发现，在完全公式化的EMAIL与网络论坛中其实隐藏着不少耐人寻味的细节，就好象那个title一样，存在着各式各样的密码与隐藏寓意。这些东西出自不同人的手里，样式和破译方式都不同，阿瓦登不知道那些密码背后隐藏的是怎样的内容。不过有一点可以确知的是，说话会并不是唯一的一个地下集会，瓦格纳说的对，始终还是有人在试图用“健康”词汇表达“不健康”思想。\n\n讽刺的是，给阿瓦登感触最深的，是有关部门的管制。以往他只是模糊地感觉到自己被绑缚起来，现在他能清晰地看清这种束缚与压抑的脉络，以及加诸在自己身上的各种手段。在小小说话会中享受到的自在让他更加深刻地感受到在宽阔现实中的不自在。\n\n“FUXKYOU, YOUSONOFBITCH！”\n\n每一次的聚会，三位男士都会轻蔑地一起高喊这一句粗话。他们清楚这不会给有关部门带来什么不良影响，不过这确实很痛快。\n\n这一周，阿瓦登特别地忙碌，他的同事因为不明原因而被屏蔽掉了，这样一来整个项目就全压在了他一个人身上。这项目是为有关部分设计一种软件，用来控制大功率主动式“旁观者”的能源分配控制。软件很复杂，他不得不每天在电脑前工作十几个小时，只有在身体实在支撑不住的时候才停下来随便吃一点东西，喝一口纯净水，困了就躺在旁边的行军床上睡上一觉，爬起来继续工作。屋子里满是浑浊的烟味与袜子脏衣服的酸臭味，阿瓦登就在这种环境下蓬头垢面地敲着键盘，并不时揉揉满布血丝的眼睛。\n\n偏偏在这个时候屋子里的暖气坏掉了。洋灰色的暖气片从昨天开始就变的冰凉，不再有热水流动。阿瓦登检查了一下，发现并不是管道问题，而且邻居们也碰到同样的事，看来是供热系统出了问题。这一变故的正面影响是稍微淡化了屋子内的酸臭味，负面影响是整个屋子变的有如冰窖一样。紧闭的窗户和门能挡住寒风，却挡不住寒冷，低温让本来就寒酸的房间更笼罩上一层霜气。无论是那把木椅还是行军床都象是冷酷的冰雕，屋子里唯一还有些热气的就只剩下电脑。阿瓦登不得不披上所有的御寒衣物，蜷缩在床上，把电脑的散热口对准自己。\n\n有关部门宣布“供热”和“暖气”暂时也被列入敏感词汇，于是阿瓦登没办法写信向供热部门询问，只好静待，除了用来敲键盘的指头以外，尽量保持全身一动不动，以节约热量。在停止供暖后的第四天，暖气片里终于传来“哗啦哗啦”的声音，带着热气的水开始流动，屋子里恢复了温暖，“供热”和“暖气”又可以恢复使用了。于是EMAIL与网络论坛上全都是“庆祝有关部门恢复供应暖气，急人民之所急”的帖子，EMAIL新闻组里也全是类似主题。\n\n不过这对阿瓦登来说太晚了，他生了病，感冒，而且是重感冒。他面色苍白，全身软弱无力，头疼的象是被一枚达姆弹射入头部，只能躺在床上等医生。医生来到他家里，给他做了两三次点滴，喂了一些叫不上名字的药片，叫他静养。这一场病足足持续了数天，他不得不放弃参加这一星期的说话会，身体状况实在太差了，阿瓦登甚至怀疑自己搞不好会因此而死掉。\n\n阿瓦登躺在床上，心里懊悔不已，说话会是他唯一的乐趣，现在他却没办法参加。他把头蒙在被子里胡思乱想，瓦格纳这一次会带什么特别的东西来呢？兰斯洛特有没有把两个孩子也领过来？还有阿尔特弥斯，他没参加的话，她会和谁“完全交流”呢？瓦格纳还是兰斯洛特？他还想到了杜拉丝，上一次的聚会里，杜拉丝讲到了温斯顿在秘密幽会的屋子里对朱丽亚说“我们已经死了”，朱丽亚附和着说“我们已经死了”，这时候第三个声音说道“你们已经死了。”\n\n杜拉丝就讲到这里，就停住了。阿瓦登急切地想知道接下来发生了什么，第三个声音是谁，是党吗？温斯顿和朱丽亚是否会被捕，他们会有什么样的下场？不光是他，阿尔特弥斯也很希望知道后续情节的发展，不过她并没有去追问杜拉丝。\n\n“让这成为一个悬疑，这样接下来的一周我们的生活都会在期待的乐趣中度过。”她对阿瓦登说，然后两个人继续沉溺于intercourse的快乐。\n\n“也许他们都会死。”阿尔特弥斯在交流结束后，看着天花板说。\n\n“也许那只是奥布林的声音，他去探望他们。”阿瓦登安慰她道，但是他的心里也不确定。\n\n阿瓦登的病持续了十天，然后他终于痊愈了。他痊愈后的第一件事就是从床上爬起来，然后去看墙上的日历：这一天恰好是星期日，说话会活动的日子。阿瓦登已经缺席了一周，这已经令他如饥似渴，甚至做梦都在和他们一起喋喋不休地说着话——所幸他并没有说梦话的习惯，所以24小时工作的旁观者并没发出任何警报。\n\n阿瓦登简单地洗了一下脸，用一把有些生锈的剃刀沾着肥皂仔细地刮掉脸上粗硬的胡须，然后咕噜咕噜地刷了刷牙齿，用手和毛巾沾着热水将自己蓬起的乱发压下去。因为生病，有关部门发了一些补贴给他，其中包括两块羊角面包、两瓶姜汁啤酒和一份精制砂糖。他将这些东西都用塑料布仔细包好，揣到宽大的军大衣里，打算带到说话会上去与大家分享。\n\n今天的天气和往常一样地冷，阿瓦登把自己裹在大衣里，登上前往效率大楼的公共汽车。一路上车厢里的广播重复着“营造健康的互联网络”以及一些优秀网络用户的先进事迹；车厢前面的电子屏幕不断滚动显示着最新的健康词汇列表，一个旁观者自车顶垂下来睥睨着车内的每一个表情呆滞的人。阿瓦登坐在最后一排，望着窗外不断向后移动的建筑物与枯黄的树木发呆。\n\n车子很快就到达了辛普森大楼附近的车站，阿瓦登下了车，把手放到怀里摸了摸塑料布包着的食物，朝着大楼走去。他在半路无意中抬起头，忽然一阵冰冷的寒流刺入他的胸腔，迫使他停住了脚步。\n\n有什么地方不对劲！\n\n他看到了效率大楼的第五层阿尔特弥斯家的窗户发生了一些奇怪的变化。以前阿尔特弥斯家面向大街的窗户总是挂着粉红色的窗帘，而现在窗帘则被扯到了两边，窗户大开，用肉眼可以勉强看到窗玻璃和屋子里雪白的墙壁。假如今天有说话会的话，阿尔特弥斯绝对不会把有屏蔽效果的窗帘打开。而且打开窗户这件事也绝不寻常，在这个城市里的室外空气十分浑浊，几乎不会有人会去开窗换气。\n\n也就是说，今天并没有说话集会召开，而是发生了另外一些事情。阿瓦登望着那窗户，心情开始变的有些慌乱，他把手从兜里掏出来，叼起一支香烟，把身体靠在一根电线杆旁故做镇静，以免被行人怀疑。究竟说话会发生了什么，为什么这一周停办了呢？要知道，只要还有复数的成员能够出席，说话会就会一直办下去，难道说瓦格纳、兰斯洛特、杜拉丝和阿尔特弥斯同时无法出席？这种概率实在太小了。阿瓦登一边这样想着，一边向四周不安地张望。忽然他看到了一样东西，一个念头霎时占据了他的全部心灵，让他几乎眩晕过去。\n\n“说话会本周不会有了，以后也不会有了。”阿瓦登嘴唇默默地蠕动着，面如死灰。\n\n他看到在街道内侧一处不起眼的地方隐藏着一个类似雷达天线的东西，其造型很象是两个背部贴在一起的大碗。阿瓦登心里清楚这是什么东西：这正是他负责软件设计的大功率主动式“旁观者”，这造型他很熟悉。这装置可以主动发射电波去探测人们的声音，并检查其中是否存在敏感词汇。\n\n这样的装置居然就安放在阿尔特弥斯家附近，那么就等于说话会完全暴露在了有关部门的监控之下。主动式旁观者的强大刺探电波会轻易刺穿她家中的铅质窗帘，把所有成员的话原封不动地传到有关部门耳朵里。\n\n这是一个划时代的发明，这一技术的突破意味着有关部门可以不再被动地等待警报，可以主动出击去刺探人们在任何时间任何地点说的任何话语。阿瓦登可以想象接下来会发生什么，阿尔特弥斯他们的每一句话都被有关部门记录下来，会有机器统计出到底有多少违禁词汇被他们使用过；然后联邦警察会冲进她的屋子，将正在聚会的成员们都带走，只留下搜查过后空荡荡的房间和窗户。\n\n阿瓦登想到这里，心如刀绞，他一点也不为自己的侥幸逃脱而感到幸运。他的胃袋翻腾起来，一种恶心的感觉从胃里直接升到嘴边，让他想吐，却又不能吐——因为“呕”也是个敏感词汇；大病初愈的孱弱身躯无法承受这种打击，象害了风寒一样颤抖起来，几乎站立不住。\n\n他不敢继续朝前走去，仓皇地转过身去，登上另外一辆公共汽车，把嘴闭的更紧了。等阿瓦登回到自己家楼下，看到楼房附近另外一架新的主动式旁观者正在兴建中，漆黑的天线在半空舒展开来，仿佛一面巨大的蜘蛛网。看来有关部门已经着手在整个纽约市部署这种新兴高科技产品。\n\n他不敢驻足观看，低着头从那巨大装置旁边走过，一路不停地走回家，然后把自己的脸紧紧地压在枕头里，却不敢哭出声音来，连一句“FUXKYOU, YOUSONOFBITCH”都不能说。\n\n从那以后，阿瓦登的生活回到了普通状态——就是说和原来一样沉滞、压抑、欠缺激情，健康向上，缺乏低级趣味。兰斯洛特说过：“战争的结果就是，大众的自由意识会将语言推向死亡的边缘”，现在看来，他的预言是很准确的：说话会的覆灭，导致“说话”、“歌剧”、“完全”、“交流”几个词先后被剔除出了健康词汇列表，成为敏感词汇。\n\n另外，虽然阿拉伯数字还能用，但“1984”这一个数字组合也被屏蔽掉了，这让包括阿瓦登在内的程序员在编写程序时不得不谨慎地检查数字是否违规，这额外增加了很多工作量，让他更加疲惫。\n\n阿瓦登不是没有担心过，也许在某一天的深夜，他就会忽然接到一封EMAIL，让他留在家里不要动，不要试图在网络做任何动作；接着电话会响起，电子女声会把这一要求重复再重复，直到警察打开他家的大门，把他带去未知的地方，那里有未知的命运等待着他。《1984》后面的情节发展阿瓦登始终不知道，唯一知道的杜拉丝已经彻底失踪了，所以温斯顿和朱丽亚的结局始终是个谜；就好象兰斯洛特、瓦格纳、杜拉丝和阿尔特弥斯的结局一样，也不从得知。其实这两件事对于阿瓦登来说没什么本质性的区别，所以它们也可以看做是同一个谜。\n\n其实他最担心的，是阿尔特弥斯。每次想到这个名字，阿瓦登就难以抑制心中的郁闷。她究竟会怎么样，彻底被屏蔽掉吗？如果是那样，那么她在这世界上遗留下来的唯一痕迹，就是一个程序员记忆里的假名而已了。\n\n说话会消失后三个星期，仍旧风平浪静，没有任何人来找过阿瓦登，他也没收到过任何类似内容的EMAIL，阿瓦登一直在想，也许是他们没有吐露出自己的下落，也可能是因为他们根本不知道——他们认识的只是一个叫王二的程序员。这个城市里有数以千计的程序员，而王二是个假名。\n\n因此，生活一如既往地平静。不，确切地说，还是有一点不同的，那就是互联网络健康词汇列表：那上面的词组消失的速度比以前要快的快，每小时每分钟都有词与单字飞快地在名单上消失，阿瓦登不得不花上大量时间去更新列表，以跟紧当前形势。\n\n与词汇列表更新速度相对的，EMAIL和网络论坛上的东西越来越乏味。因为人们不得不用极有限的词去表达广泛的意思，大家都变得寡言少语。就连那些秘密的暗语和联系方式也少了许多；整个网络就象是前些天阿瓦登家里出了问题的暖气片一样：虽然名义上是给人带来温暖的东西，但却变的冰冷、僵硬，让人如坠冰窟。\n\n这一天，阿瓦登从电脑前抬起头来，他看了看窗外迷茫的灰色天空，胸口一阵抽搐，不由得痛苦地咳了一声。他拿起塑料杯，将杯子里的纯净水一饮而尽，杯子丢进同样是塑料质地的垃圾桶里，发出钝钝的撞击声，他觉得自己的脑子也是一团垃圾，举起手敲了敲，果然发出同样钝钝的撞击声。\n\n然后他拿起大衣，戴上墨绿色的护目镜，走出门去。阿瓦登没带便携式的旁观者，那东西已经不需要了，城市里到处都是主动式的旁观者，随时监听是否有违禁词汇的存在。整个纽约现在就象是互联网络一样，被有关部门营造成十分健康。\n\n阿瓦登这一次外出是有正当理由的，他决定去取消网络论坛服务，这服务已经用不着了，因为无论EMAIL，新闻组，BBS论坛还是其他什么现在全部都变成了一样的东西。\n\n从日历来说现在应该是春季，但外面还是很冷，高大的灰色建筑矗立在平地上，仿佛绝对零度下的石林。大团大团的风裹着黄沙与废气穿行其间，风沙无处不在，让人置身其中而难以摆脱。阿瓦登把手揣进兜里，脖子缩进领口，畏缩着向网络部的大楼走去。\n\n忽然，他停下了脚步，惊讶地站在原地无法动弹。他看到阿尔特弥斯正站在前面的路灯下，穿着黑色的制服。可是她的变化有多么大啊，面容象是老了十岁，满脸都是衰老的皱纹，年轻的活力荡然无存；她听到脚步声，转过头来，两个乌黑的大眼睛显得异常空洞，目光越过阿瓦登延伸到远方，没有一个明晰的焦点。\n\n阿瓦登万万没有想到会在这个时间这个地点碰到她，这让他已经沉寂已久的心灵泛起了几点火花，可惜他迟钝的神经已经无法表达出“激动”这一个简单的情感了。两个人互相对视了一阵，他终于木然走到她身边，张了张嘴唇，想对她说些什么。但是他掏出今天新发布的健康词汇列表，发现上面是一片空白——终于连最后一个词组也被有关部门屏蔽了。\n\n于是阿瓦登只好保持着沉默，默默地与面无表情的她擦肩而过，继续向前走去。他的身影逐渐融入同样安静的灰色人群之中，整个城市都显得寂静极了。","source":"_posts/2017.07.01.md","raw":"---\ntitle: 寂静之城\ncategories: 小说 \n---\n## 作者:马伯庸 \n\n\n\n\n----------\n   \nAnd in the naked light I saw ten thousand people, maybe more.\n\nPeople talking without speaking, people hearing without listening.\n\nPeople writing songs that voices never shared, no one dared disturb the\n\nsound of silence.\n\n--- The sound of silence\n\n美利坚合众国，2015年，纽约。\n\n当电话响起来的时候，阿瓦登正趴在电脑前面睡觉。电话铃声十分急促，尖锐，每一次振动都让他的耳膜难受好久。他揉了揉干涩的眼睛，十分不情愿地爬起来，觉得脑子沉滞无比。\n\n其实他的脑子一直就很沉滞，这种感受既然是生理上的也是心理上的。他身处的房间很狭窄，空气不很好，唯一的两扇窗户紧闭着——即使打开窗户也没用，外面的空气更加浑浊。这是一间大约只有三十平米的小屋子，屋子墙壁上泛黄的墙纸有好几处开始剥落，天花板上的水渍渗成奇怪的形状；一张老式的军绿色行军床摆在墙角，床腿用白漆写着编号；紧挨着行军床的是一张三合板制成的电脑桌，桌上摆着一台浅白色的电脑，机箱后面五颜六色的电线纠缠在一起，把它们自己打成一个古怪的死结，杂乱无章地蔓延到地板与墙角，仿佛常春藤一样。\n\n阿瓦登走到电话前，慢慢坐到地板上，目光呆滞地盯着电话，手却没有动。这部古怪的东西是老式的按键式电话，大概是十几年前的款式，这是阿瓦登有一次去费城出差时偶尔在一家杂货店里买到的；他拿回家以后稍微修理了一下，发现居然还能用，这让他当时小小地兴奋了一阵子。\n\n电话继续在响着，已经是第七声。阿瓦登意识到自己不得不去接听了。于是他弓下腰，用两个指头拈起电话，慢慢把电话放到耳边。\n\n“请说出你的网络编号？”话筒里传来的声音并不急噪，事实上它也不带其他任何的感情色彩，因为这是电脑合成的人工智能语音系统。\n\n“19842015”\n\n阿瓦登熟练地报出一连串数字，同时开始觉得胸有些更闷了。说实话他并不喜欢这些空洞的电子声音，他有时候想，假如打过电话来的是一位声音圆润的女性该多好。阿瓦登知道这是一种不切实际的幻想，不过这幻想会让他的身体得到几秒钟的舒缓。\n\n话筒里的声音仍旧在继续着。\n\n“关于你在十月四日提交的网络论坛用户注册申请已经被受理，经有关部门审查后确认资格无误，请在三日内持本人身份证件、网络使用许可证及相关文件前往办理登记手续，并领取用户名及密码。”\n\n“知道了，谢谢。”\n\n阿瓦登谨慎地选择词语，同时努力挤出一副满足的微笑，好象话筒的另一侧有人在看着自己一样。放下电话，阿瓦登先是茫然地盯着它看了大约两分钟，然后站起来活动一下手腕，坐回到电脑前面，缓慢地推动了一下鼠标。\n\n电脑屏幕“啪”地一声亮了起来，显示出一个登陆的界面，还有一行英文：“请输入你的网络编号和姓名。”阿瓦登将那八位数字敲进去，又输入了自己的名字，点击“登陆”。随即机箱的指示灯开始频繁地闪动起来，整个机器发出细微的噪音。\n\n每一个使用互联网的人都有一个网络编号，没有这个编号，就无法连接进互联网络。每一个编号都是独一无二的，每个人只有一个；这是使用者在网上的唯一代号，既不能修改，也不能取消。这些编号分别对应着使用者身份证上的名字，因此19842015就是阿瓦登，阿瓦登就是19842015。阿瓦登知道有些记忆力不好的人会把自己的编号印在衣服的后面，那看起来颇为滑稽，也容易引发一些不正当的联想。\n\n有关部门说使用网络实名制是为了规范网络秩序方便管理，杜绝因匿名使用网络而产生的一系列重大问题和混乱。阿瓦登不太清楚那一系列重大问题会是什么，他自己没试过用假名上网，他所认识的任何人里也不曾有人尝试过——事实上，从技术角度来说，他根本没办法匿名登陆互联网络，没有编号就没有权限上网，而编号则连接着他的详细档案，换句话说，没人能在网上隐藏自己。有关部门把这一切都考虑的很周详。\n\n“有关部门”，这是一个语意模糊、但却有着权威与震慑力的词组。它既是泛指，又是确指，其所涵盖的意义相当广泛。有时候，它指的是为阿瓦登颁发网络编号的美国联邦网络管理委员会；有时候它是将最新通告及法规发到阿瓦登EMAIL信箱的服务器；还有时候它是监察网络的FBI特属网络调查科；总之一句话，有关部门是无处不在，无职不司的，总会在适当的时候出现，给予指导、监控或者警告，无论你是在网上还是网下。\n\n简直就象是老大哥一样无微不至。\n\n电脑仍旧在持续运转着，阿瓦登知道这得花上一阵子。这台电脑是有关部门配发给他的，具体型号和配置阿瓦登并不清楚，机箱是被焊死的，无法打开。于是他拿出一小瓶清凉油，用右手小拇指的指甲挑出一点抹在自己的太阳穴，然后从脚下堆积如山的杂物里翻出一个塑料杯子，从桌子旁的饮水机里接了半杯蒸馏水，就着一片镇痛片一饮而尽。蒸馏水穿过喉咙和狭长的食道滑进胃里，空泛的味道让他有些恶心。\n\n音响里忽然传来一阵美国国歌的旋律，阿瓦登放下杯子，重新把目光投到电脑上去。这是已经连入互联网络的标志。屏幕上首先跳出来的是有关部门的通告，白底黑色四号字，里面陈述了使用互联网的意义以及最新的规章制度。\n\n“缔造健康的互联网络，美国万岁！”\n\n音响里传来激昂的男性呼声，阿瓦登不大情愿地跟着大声念了一遍。“缔造健康的互联网络，美国万岁！”\n\n这段呼号持续了三十秒钟，然后消失，取而代之的是写着“缔造健康的互联网络”标语的桌面背景。另外一个窗口慢慢浮上开，上面开列出几个选项：工作、娱乐、电子信箱和BBS论坛。其中BBS选项呈现灰色，说明这项功能还没有开通。\n\n整个操作系统简洁明了，这台电脑的浏览器没有地址输入栏，只是在收藏夹里有几个无法修改的的网站地址。理由很简单，这些网站都是健康向上的，假如其他站点和这些网站一样，那么只保留这些网站就够了；假如其他站点与这些网站不一样，那么就是不健康的，是低级趣味，不能保留。这是有关部门精心设计的，是为了公民的精神健康着想，生怕他们受到不良信息的侵染。\n\n阿瓦登首先点开了“工作”，一连串和他工作相关的站点列表与相关软件在电脑上显示出来。阿瓦登是一名程序员，他每天的工作就是根据上级的要求编写程序。这份工作很无聊，不过可以保证他有稳定的收入。他不知道自己的源代码会被用到哪里去，上级也从来没有跟他说过。\n\n他打算继续昨天的工作，但是很快发现自己很难继续下去。阿瓦登觉得今天的情绪比以前要烦躁，无法集中精神，大脑还是很呆滞，胸口仍旧发闷。他试图娱乐自己，但是他发现“娱乐”选项里只有纸牌与挖地雷，根据有关部门的说法，这是两个健康的游戏，没有暴力，没有色情，不会让人产生犯罪冲动，也不涉及任何政治色彩。据说美国境外也是有互联网络站点的，不过无法连上去，因为本国的互联网络自成格局，独立自主，普通人无法直接连接到国外——IE浏览器没有地址栏，就算知道地址也没有用处。\n\n“您有一封新邮件。”\n\n系统忽然跳出来提示，阿瓦登终于找到了可以暂停工作的理由，他很快移动鼠标到电子信箱的选项上，点开，很快一个新的界面出现了。\n\n“To: 19842015\n\nFrom：10045687\n\nSubject: 模块、已经、完成、当前、项目、是否、开始。”\n\n阿瓦登微微地叹了一口气，觉得有些失望。每一次他收到新的电子邮件，都希望能够有一次新鲜的刺激来撞击他日益迟钝的脑神经，每一次他都失望了。其实他早就知道这一点，只不过他觉得保持期待至少能够享受到几秒钟快感。就好象他期待着打电话过来的是一个圆润温柔的女性声音一样。不给自己一些渺茫的希望，阿瓦登觉得自己迟早会疯掉的。\n\n这封信很简短，但是内容很充实。19842015是阿瓦登的网络编号，而10045687则是他的一位同事的编号，这种工作性质的信件通常都以编号相称。信的内容是几个不连续的英文单词，这是有关部门所提倡的一种电子邮件书写方式，因为这样可以方便软件检查信件中是否含有敏感词汇。\n\n阿瓦登打开回信的页面，同时另开了一个窗口，打开一份名字叫做“网络健康语言词汇列表”的TXT文档。这是有关部门要求每一位网民所必须使用的词汇。当他们书写电子邮件或者使用论坛服务的时候，都得从这个词汇列表中寻找适合的名词、形容词、副词或者动词来表达自己想要说的话。一旦过滤软件发现网民使用了列表以外的词，那么这个词就会被自动屏蔽，取而代之的是“请使用健康语言”。\n\n“屏蔽”是个专有名词，被屏蔽的词将不允许再度被使用，无论是在书信里还是口头都不允许。讽刺的是，“屏蔽”一词本身也是被屏蔽的词汇之一。\n\n这个列表是经常更新的，每一次更新都会有几个词在列表上消失，于是阿瓦登不得不费劲脑汁寻找其他词语来代替那个被屏蔽掉的词语或者单字。比如在以前，“运动”这个词是可以使用的，但后来有关部门宣布这也是一个敏感词汇，阿瓦登只好使用“质点位移”来表达相同的意思。\n\n他对照着这份列表，很快就完成了一封文字风格与来信差不多的EMAIL——健康词汇表迫使人们不得不用最短的话来表达最多意思，而且要尽量减少不必要的修辞，所以这些信件就好象是那杯蒸馏水一样，淡而无味，阿瓦登有时候想，他早晚也会和这些水和信一样腐烂，因为这些信是他写的，水是他喝的。\n\n接下来阿瓦登启动检查软件先扫了一遍，确保自己没无意中加入什么敏感词汇。等这一切都完成后，他按下了发送键，邮件被送出去了。\n\n阿瓦登没有留下备份，因为他的机器里没有硬盘，也没有软驱、光驱或者USB接口。这个时代宽带技术已经得到了很大发展，应用软件可以集中在统一的一个服务器中，个人用户调用时的速度丝毫不会觉得迟滞。因此个人不需要硬盘，也不需要本地存储，他们在自己电脑里写的每一份文档、每一段程序、甚至每一个动作都会被自动传送到有关部门的公共服务器中，这样便于管理。换句话说，阿瓦登所使用的电脑，仅仅具备输入和输出两种功能。\n\n完成了这封信后，阿瓦登再度陷入了软绵绵的焦躁状态，这是一个连续工作了三天的程序员的正常反应。这种情绪很危险，因为它让人效率低下精神低迷，而且没有渠道发泄。“疲劳”、“烦躁”以及其他负面词汇都属于危险词汇，如果他写信给别人抱怨的话，那么对方收到的将会是一封写满“请使用健康语言”的EMAIL。\n\n这就是阿瓦登每天的生活，今天比昨天更糟糕，但应该比明天还稍微好一点。事实上这个叙述也很模糊，因为阿瓦登自己并不清楚什么是“好一点”，什么是“更糟糕”。“好”与“坏”是两个变量，而他的生活就是一个定量，只有一个常数叫“压抑”。\n\n阿瓦登推开鼠标，把脑袋向后仰去，长长地呼了一口气。（至少“呼”这个字还没有被屏蔽）这是空虚的表现，他想哼些歌，但却又不记得什么，转而吹了几下口哨，但那听起来与一只生了肺结核的狗差不多，只得做罢。有关部门象幽灵一样充斥在整个房间里，让他无法舒展自己的烦闷。就好象一个人在泥沼里挣扎，刚一张口就被灌入泥水，甚至无法大声呼救。\n\n他的头不安分地转了几转，眼神偶尔撇到了摆在地板上的老式电话机，他忽然想到还必须要去有关部门申请自己的BBS论坛浏览许可证。于是他关掉“工作”和“电子邮件”窗口，退出了网络登陆。阿瓦登在做这些事的时候毫不犹豫，他很高兴能够暂时摆脱互联网络，在那上面他只是一串枯燥的数字和一些“健康词汇”的综合体。\n\n阿瓦登找出一件破旧的黑色呢子大衣，那件大衣继承自他的父亲，袖口和领子已经磨损的很严重，个别地方有灰色的棉花露出来，但还是很耐寒。他把大衣套到身上，戴上一副墨绿色的护镜，用过滤口罩捂住嘴。他犹豫了一下，拿起“旁听者”别在耳朵上，然后走出家门去。\n\n纽约的街上人很少，在这个时代，互联网的普及率相当地高，大部分事务在网上就可以解决，有关部门并不提倡太多的户外活动。太多的户外活动会导致和其他人发生物理接触，而两个人发生物理接触后会发生什么事则很难控制。\n\n“旁听者”就是为了防止这种事而发生的，这是一种便携式的语言过滤器，当携带者说出敏感词汇的时候，它就会自动发出警报。每一位公民外出前都必须要携带这个装置，以便随时检讨自己的言语。当人们意识到旁听者存在的时候，他们往往会选择沉默，至少阿瓦登是如此。有关部门正逐步试图让网络和现实生活统一起来，一起“健康”。\n\n这时候正是11月份，寒风凛冽，天空漂浮着令人压抑的铅灰阴云，街道两旁的电线杆仿佛落光了叶子的枯树，行人们都把自己包裹在黑色或灰色的大衣里面，浓缩成空旷街道上的一个个黑点飞快移动着。一层若有若无的烟雾将整个纽约笼罩起来，不用过滤口罩在这样的空气里呼吸将会是一件很有挑战的事情。\n\n距离上一次离开家门已经有两个月了吧，阿瓦登站在公共汽车站的站牌下，不无感慨地想，周围的一切看起来很陌生，泛黄，而且干燥。那是上一次沙尘暴的痕迹。不过沙尘暴这个词也已经被屏蔽了，因此阿瓦登的脑海里只是闪过那么一下，思想很快就转移到别的事情上去了。\n\n站在阿瓦登旁边的是一个穿着蓝色制服的高个男人。他先是狐疑地看了阿瓦登一眼，看到后者沉默地沉在黑色大衣里，他的两只脚交替移动，缓慢地凑了过去，装做漫不经心对阿瓦登说：\n\n“烟，有吗？”\n\n男人说，每一个字都说的很清晰，而且词与词之间间隔也足够长。这“旁听者”还没有精密到能够完全捕捉到每一个人语速和语调的程度，因此有关部门要求每一位公民都要保持这种说话风格，以方面检测发言人是否使用了规定以外的词汇。\n\n阿瓦登转过头去，看了他一眼，舔舔自己干裂的嘴唇，回答说：\n\n“没有。”\n\n男人很失望，又一次不甘心地张开嘴。\n\n“酒，有吗？”\n\n“没有。”\n\n阿瓦登又重复了一次这个词，他也已经很久没有收到烟和酒了，也许是缺货的关系吧，这是常有的事。不过有一点很奇怪，“旁观者”这一次却没有发出警报。以阿瓦登的经验，以往一旦烟、酒或者其他生活必需品发生短缺现象，这个词就会暂时成为被屏蔽掉的敏感词汇，直到恢复供给为止。\n\n这个男人看起来很疲惫，红肿的眼睛是这个时代的人们普遍的特征，这是长时间挂在网上的关系。他的头发蓬乱，嘴边还留着青色的胡子碴，制服下的衬衣领口散发着刺鼻的霉味。能看的出，他也很久不曾到街上来了。\n\n阿瓦登这时候才注意到，他的耳朵上空荡荡的，没有挂着那个银灰色的小玩意“旁听者”，这实在是一件严重的事情。不携带“旁听者”外出，就意味着语言不会再被过滤，一些不健康的思想和言论就有可能孳生，因此有关部门相当严厉地规定公民上街必须携带旁听者。而这个男人的耳朵旁却什么也没有。阿瓦登暗暗吃惊，一时间不知道是该去提醒还是装做没看到。他暗自想，也许向有关部门举报会更好。\n\n这时候那个男人又朝他靠近了一点，眼神变的饥渴起来。阿瓦登心里一阵紧张，下意识地向后退去。这难道是一次抢劫？还是说他是个压抑太久的同性恋者？那个男人忽然扯住他的袖子，阿瓦登狼狈地挣扎却没有挣开。出乎他的意料，那个男人并没有进一步的动作，而是大吼一声，用一种阿瓦登已经不太习惯了的飞快语速向他倾泻起话语来。阿瓦登被这突如其来的爆发弄的莫名其妙，不知所措。\n\n“我只是想和你多几句话，就几句，我很久没有说过话了。我叫斯多葛，今年三十二岁，记得，是三十二岁。我一直梦想有一套在湖边的房子，有一副钓鱼竿和一条小艇；我讨厌网络，打倒网管；我妻子是个可恶的网络中毒者，她只会用枯燥乏味的话叫我的网络编号；这个城市就是一个大疯人院，里面大疯子管着小疯子，并且把所有没疯的人变的和他们同样疯狂；敏感词汇都去他X的，老*受够了……”\n\n男人的话仿佛一瓶摇晃了很久然后突然打开的罐装碳酸饮料，迅猛，爆裂，而且全无条理。阿瓦登惊愕地望着这个突然狂躁起来的家伙，却不知道如何应对；更可怕的是，他发现自己居然对他产生了一点同情，那种“同病相怜”式的同情。男人的话这时候已经从唠叨变成了纯粹谩骂，全部都是最直抒胸臆的那种。阿瓦登已经有五、六年不曾说过这些脏话，最后一次听到这些也是四年前。有关部门认为这都有碍精神文明，于是全部都屏蔽掉了。\n\n而现在这个男人就在公众场合对着他大吵大嚷，似乎要将被屏蔽掉的敏感词汇一口气全倒出来。他的目光和手势并不针对任何人，甚至也不针对阿瓦登，更象是在一个人在自说自话。阿瓦登的耳膜似乎不习惯这种分贝，开始有些隐隐做痛，他捂着耳朵，拿不定主意是干脆逃掉还是……这时候，远处街道出现两辆警车，一路闪着警灯直直冲着这座公共汽车站而来。\n\n警车开到站台旁时，男人仍旧在痛骂着。警车门开了，涌出了五、六名全副武装的联邦警察。他们扑过去将那个男子按在地上，用橡皮棍痛打。男人两条腿挣扎着，嘴里的语速更快了，骂出来的话也越来越难听。其中一名警察掏出一卷胶带，“嚓”地一声扯下一条向男人的嘴贴去。男人在嘴被胶带封住之前，突然提高嗓门，冲着警察痛快无比地喊了一句：“FUXKYOU, YOUSONOFBITCH！”阿瓦登看到他的表情由疯狂变成享受，面带着微笑，似乎完全陶醉在那一句话所带来的无上快感和解脱感中。\n\n联邦警察们七手八脚地将男人送进了警车，这时才有一名警察走到了阿瓦登的跟前。\n\n“他，是，你朋友？”\n\n“我，不，认识。”\n\n警察盯了他一阵，取下他耳朵上的“旁观者”查看记录，发现他并没有提及任何敏感词汇，于是重新给他戴回去，警告他说那名男子说的全部都是极度反动的词汇，要求他立刻忘掉，然后转身押着那男子离开了。\n\n阿瓦登松了一口气，其实刚才他有一瞬间涌现出一种冲动，也想在这空旷的街道上大喊一声“FUXKYOU, YOUSONOFBITCH”那一定很爽快，他心里想，因为那男子说出这句话的时候表情很享受。不过他也知道，这也是妄想的一种，“旁观者”紧帖在耳朵上的冰凉感觉时刻提醒着他。\n\n街上很快就恢复了冷清，十分钟后，一辆公共汽车慢吞吞地开进站里，锈迹斑斑的车门哗啦一声打开，一个电子女声响彻整个空荡荡的车厢：“请乘客注意文明用语，严格按照健康词汇发言。”\n\n阿瓦登把自己缩进大衣，压抑住自己异样的兴奋，决定继续保持沉默下去。\n\n大约过了一个小时，公共汽车到了目的地。从破碎的车窗玻璃里吹进来的寒风让阿瓦登脸上挂起一层暗灰色的霜气，面部被风中的沙砾和煤渣刮的生疼。他听到电子女声报出了站名，就站起身来，象一条狗一样抖抖身上的土，走下车去。\n\n车站对面就是阿瓦登要去的地方，那是有关部门负责受理BBS论坛申请的网络部。这是一间五层的大楼，正方形，全水泥混凝土结构，外表泛灰。如果没有那几个窗户的话，那么它的外貌将与水泥块没有任何区别：生硬、死气沉沉，让蚊子和蝙蝠都退避三舍。\n\nBBS论坛是一种奇特的东西，从理论上来讲它完全多余，BBS的功能完全可以由EMAIL新闻组来取代，后者更容易管理和审查。而且申请使用BBS论坛资格不是件容易的事，申请人必须要通过十几道手续和漫长的审查才能有浏览资格，浏览资格三个月才会被允许在指定论坛发布帖子，至于自己开设BBS则几乎是不可能。\n\n因此真正对BBS有兴趣的人少之有少。阿瓦登当初之所以决定申请BBS论坛资格，纯粹是因为他那种模糊但却顽强的怀旧心态，就好象他从杂货店里买的那部老式电话一样。他也不知道自己为什么会自找麻烦，也许是为了给生活带来些刺激，还是说为了强调自己和曾经旧时代的那么一点点联系，也许两者兼有之。\n\n阿瓦登恍惚记得在他小的时候，互联网与现在并不太一样。并不是指技术上的不同，而是一种人文的感觉。他希望能通过使用BBS论坛回想起一些当年的事情。\n\n阿瓦登走进网络部的大楼，大楼里和外面一样寒冷，而且阴森。走廊里没有路灯，蓝白色调的两侧墙壁贴满了千篇一律的网络规章条文与标语，冰冷的空气呼吸到肺里，让阿瓦登一阵痉挛。只有走廊尽头的小门缝隙里流泻出一丝光亮，小门的上面挂着一块牌子，上面写的是“网络部BBS论坛科。”\n\n一走进这间屋子，阿瓦登立刻感觉到一阵温洋洋的热气。屋子里的暖气（或者是空调）开的很大，让阿瓦登冻麻了的手脚和脸麻酥酥的，有些发痒，他不禁想伸出手去挠挠。\n\n“公民，请您站在原地不要动。”\n\n一个电子女声忽然从天花板上的喇叭里传来，阿瓦登触电似地把手放下，恭敬地站在原地不同。他借这个机会观察了一下这间屋子。这屋子准确来说应该是一个狭长形的大厅，一道拔地而起的大理石柜台象长城一样将房间割裂成两部分，柜台上还装着一排银白色的圆柱形栅栏，直接连到天花板。屋子里没有任何装饰，没有观赏植物，没有塑料鲜花，甚至没有长椅和饮水机。\n\n“缔造健康的互联网络，美国万岁。”\n\n阿瓦登跟着声音重复了一遍。\n\n“请前往八号窗口。”\n\n电子女声的语调很流畅，因为这是电脑制作出来的，因此没有敏感词汇的限制。\n\n阿瓦登转头看到在自己右手边的不远处，大理石柜台上的液晶屏幕显示着八号的字样。他走过去，拼命抬起头，因为柜台实在太高了，他只能勉强看到边缘，而无法看到柜台另一侧的情形。不过他能听到，一个人走到柜台对面，坐下去，并有翻动纸张与敲击键盘的声音。\n\n“请把文件放入盒子里。”\n\n柜台上的喇叭传来命令。出乎意料，这一次在喇叭里的声音却变了。虽然同样冷漠枯燥，但阿瓦登还是能分辨出它与电子女声的不同——这是一个真正的女性的声音。他惊讶地抬头望去，却什么都看不到，柜台太高了。\n\n“请把文件放入盒子里。”\n\n声音又重复了一次，语气里带着一丝烦躁，似乎对阿瓦登的迟钝很不满。\n\n“是的，这是真正的女声……”阿瓦登想，电子女声永远是彬彬有礼不带任何感情色彩的。他把相关的电子身份证、网络许可证、网络编号和敏感词汇犯罪记录等一系列个人资料卡片一起放进柜台外的一个小金属盒子里，然后把盒子插进柜台上一个同样大小的凹槽中，关好门。很快他听到“唰”的一声，他猜测这也许是对面的人——也许是个女人——将盒子抽出去的声音。\n\n“你申请BBS服务的目的是什么？”\n\n喇叭后的女声浸满了纯粹事务性的腔调。\n\n“为了、提高、互联网络、工作效率、为了、缔造、一个、健康、的网络、环境，更好地、为、祖国、做出、贡献。”\n\n阿瓦登一字一句地回答，心里知道这只是一道官方程序，只需要按标准回答就可以。\n\n对面很快就陷入沉默，大约过了十五分钟，喇叭再度响起。\n\n“最后手续确认，你已经获得BBS论坛浏览权。”\n\n“谢谢。”\n\n“砰”的一声，金属盒子从柜子里弹了出来，里面除了阿瓦登的证件以外还多了五张小尺寸光盘。\n\n“这是有关部门核发给你的BBS论坛统一用户名与密码，BBS论坛列表、互联网BBS论坛使用指南及相应法规、以及最新健康网络词汇列表。”\n\n阿瓦登向前踏了一步，从盒子里将这些东西一股脑全拿出来，揣进大衣的大兜里。那些东西其实是可以全部放在同一张光盘里的，不过有关部门认为每一张光盘装一份文件有助于用户理解这些文件的严肃性和重要性，并产生敬畏。\n\n他心里盼望着那个喇叭能再说两句。让他失望的是，对面传来的是一个人起身并且离开的声音，从脚步声的韵律判断，阿瓦登愈发相信这是一名女性。\n\n“手续办理完毕，请离开网络部回到自己的工作岗位上。”\n\n甜美空洞的电子女声从天花板上传来，阿瓦登厌恶地抽动鼻翼，拿手揉了揉，转身离开这间温暖的大厅，重新进入到寒冷的走廊。\n\n在回家的路上，阿瓦登蜷缩在公共汽车上一动不动，顺利申请到BBS的使用权让他有些虚无缥缈的兴奋。他闭着眼睛，找了一个合适的角度躲开破窗而入的寒风，右手在兜里不断摩挲那一系列光盘，还在怀念着那一个神秘的女声。\n\n如果能再一次听到该多好，他不能抑制自己这样的想法，同时用拇指的指肚在光盘上轻轻地摩擦，幻想这几张光盘也曾经被她的手触摸过。他兴奋的几乎也想破口大骂一句“FUXKYOU, YOUSONOFBITCH”，真奇怪，那名男子的骂声在他的记忆里根深蒂固，并时不时不自觉地滑到唇边。\n\n忽然，他的手指在光盘上发觉到一丝异常的感觉。阿瓦登下意识地朝四周望去，确认周围一个乘客也没有后，他小心翼翼地把光盘全拿出来，就着窗外的光亮仔细端详。\n\n阿瓦登很快注意到，在装有BBS论坛列表的光盘背面，被人用指甲轻轻地划了一道刮痕。这条刮痕很轻，如果不是阿瓦登仔细地抚摩光盘的话，是很难发觉到的。这条刮痕很奇特，是一条直线，而在这条直线末端的不远处，则是另外一条极短的刮痕，似乎刻意想弯成一个圆点。整体看上去就好象是一个叹号，或者倒过来说，象是字母i。\n\n很快他在其他四张光盘上也发现了类似的刮痕，它们造型都不同，但都似乎代表着某种符号。阿瓦登回想起喇叭里那个女声最后一句提到过的文件顺序，于是把这五张光盘按照BBS论坛统一用户名与密码、BBS论坛列表、互联网BBS论坛使用指南、相应法规、以及最新健康网络词汇列表的顺序排列好，接着依次把那五道刮痕用手指临摹到汽车窗户上。很快那些刮痕构成了一个英文单词：\n\ntitle\n\n题目？这是什么意思？\n\n阿瓦登看着这个单词莫名其妙，这究竟是纯属无意的痕迹，还是有人刻意为之？如果是有人刻意为之，他这么做的用意是什么？\n\n这时候汽车停住了，又有几名乘客走上车来。阿瓦登挪动一下身体，不让他们看到自己在车窗上写出来的字迹，然后装做打呵欠的样子抬起袖子，轻轻把那五个字母擦掉。\n\n阿瓦登暗自庆幸，如果他没有在现在发现这些光盘上的痕迹，那么以后就永远没有机会发觉了。按照规定，个人电脑是不允许使用任何存储存设备的，因此阿瓦登的电脑并没有光驱。他下一步所要做的是将这些光盘送交到管区网络安全部，由他们将光盘内资料登陆到服务器中，再转发给阿瓦登。这是为了防止个人私自在家里制造、阅读或者传播黄色或者反动信息，网络安全部发出的通告是这么解释的。联邦的网络警察经常会突入到个人家中进行临时检查，看用户是否非法拥有信息贮存设备，阿瓦登曾经亲眼见过一个邻居被警察带走，原因仅仅是因为他私自藏了一张光盘在家里——其实他只是打算拿那个当茶杯垫用。那个邻居再没回来过。\n\n无论这些符号代表的是什么意思，它都是一种全新的体验，这让阿瓦登感觉到兴奋。怀旧与渴望新奇是阿瓦登生活在这个时代的两根精神支柱，否则他会与这座城市一样变的僵硬，然后窒息而死。\n\n他先来到网络安全分部，将光盘交给那里的负责人，负责人反复地检查光盘和阿瓦登的表情，好象所有使用BBS论坛的人都不可信赖一样。末了负责人终于找不到什么破绽，只得将光盘收下，然后举起右手，阿瓦登和他一起高呼“缔造健康的互联网络”。这句话是唯一被允许可以连贯着被说出来的句子。\n\n回到家里，阿瓦登脱掉大衣，摘了过滤口罩，将旁观者扔到了行军床上，然后整个人也倒进枕头里。每次出去外面都会让他疲劳，这一半是因为他孱弱的肉体已经不大适合室外活动；另外一半原因是因为他必须花费大量的精力来应付旁观者。\n\n过了四十分钟，他才悠悠地醒过来，头还是和平常一样地疼，胸口还是一如既往地闷。胡乱吃了一点东西以后，阿瓦登爬到电脑桌前，打开电脑，按程序登陆上网络，习惯性地先检查了一遍信箱。\n\n信箱里有七、八封新的信件，其中两封是同事发来的事务信。另外五封则是网络安全部发给他的，内容就是他送交的那几张光盘。\n\n阿瓦登打开了包含有BBS论坛的用户名、密码和BBS论坛列表的两封信。他看到自己的论坛通用用户名叫做19842015，和自己的网络编号完全一样，不由得有些失望。他依稀记得在小的时候，BBS论坛的用户名是可以自己决定的，而且每一个论坛都可以不同，一个人在网上并不单只是一串枯燥数字。\n\n小时候的记忆往往是跟童话和幻想混杂在一起，未必与实际相符。现实中你只能使用有关部门指定的用户名和密码，理由很简单，用户名和密码内也可能含有敏感词汇。\n\n阿瓦登又打开了那份BBS列表，全部都是有关部门开设的官方论坛，没有私人的——事实上个人能够合法持有的电脑设备从技术上来说也无法架设新BBS——这些论坛的主题各有侧重点不同，但基本上是围绕着如何更好响应国家号召，缔造健康互联网络来说的。比如其中一个电脑技术论坛，主题就是如何更好地屏蔽掉敏感词汇。\n\n居然在这些论坛中还有一个是关于游戏的。里面正在讨论的是一个如何帮助别人使用健康词汇的网络游戏，玩家可以操纵一名小男孩在街上侦察，看是否有人使用了敏感词汇，小男孩可以选择上前指责或者通知警察，抓到的人越多，小男孩得到的褒奖就越高。\n\n阿瓦登随便打开了几个论坛，里面的人都彬彬有礼，说话很“健康”，就好象街上的那些行人一样。不，准确地说，比街上的气氛还要压抑。在街上的人也许还有机会保留一下自己的小动作，比如阿瓦登刚才在公共汽车上就偷偷地写了TITLE五个字母；而在网上论坛，人的最后的一点隐私也全被暴露出来，有关部门随时可以调看你的一切行动，无从遁形，这就是科学技术发展所带来的进步。\n\n一阵失落和失望袭上阿瓦登的心头，他合上眼睛，把鼠标甩开，重重地向后靠去。原来他天真地以为BBS论坛也许会少许宽松一些，现在看来甚至比现实中更叫人窒息，他感觉到自己好象陷入沉滞的电子淤泥之中，艰于呼吸。“FUXKYOU, YOUSONOFBITCH”再一次涌现到他的唇边，强烈无比，要化好大的力气才控制住。\n\n忽然，他又想到了那个神秘的title，那究竟是什么意思？那五张光盘里或许隐藏着什么？也许这跟title有关系？\n\n阿瓦登想到这里，把目光重新转向电脑屏幕，仔细去看网络安全部发来的五封信的title部分。五张光盘各隐藏着一个字母，凑到一起就是title，那么按照这个方式，那五封EMAIL的title凑到一起，就变成了一句话：去用户学习论坛。”\n\n阿瓦登记得刚才他确实看到其中一个论坛的名字叫做“用户学习”，于是他抱着姑且一试的心态连接到这个论坛去。他希望这并不是一个巧合。\n\n用户论坛是一个事务性论坛，里面是一些关于BBS用户资料的投诉帖和管理帖，斑竹的是一个叫19387465的人；发帖的人和回帖的人数量都很少，里面冷冷清清的。阿瓦登打开帖子列表，按照刚才的规律去搜寻每一个帖子的标题，并把它们综合到一起，很快他就得到了另外一句话：\n\n“每周日辛普森大楼5层B户。”\n\n又是一个谜团，阿瓦登想。但这却坚定了他的信心，这其中必定隐藏着玄机。光盘、EMAIL和BBS论坛，连续三次都可以通过首词组组合的方式得到暗示，绝非巧合。\n\n究竟是什么人会在有关部门的官方文件中隐藏着这样的信息呢？每周日在效率大楼5层B户又会发生什么事情呢？\n\n阿瓦登终于找到了久违的兴奋感，未知事物的新奇刺激着他麻木很久的神经。更重要的是，这种在有关部门正式文件中玩弄的文字技巧，叫他有一种喘息的快感，仿佛一个密不透风的铁面罩上几个透进空气的小孔。\n\n营造健康的互联网络。\n\nFUXKYOU, YOUSONOFBITCH。\n\n阿瓦登盯着屏幕上的桌面背景，用嘴唇比出了那句粗话的口型，并且比出了中指。\n\n在接下来的日子里，阿瓦登一直处于一种潜藏的兴奋状态，就象是一个摆出无辜表情嘴里却藏着糖果的小孩子，在大人转身过去之后露出狡黠的笑容，尽情享受心中藏有秘密的乐趣。\n\n日子一天一天地过去，健康词汇在列表里又少了几个，窗外的空气又浑浊了几分，这已经是生活的常态。阿瓦登自己已经开始拿网络健康词汇表当日历来用，划掉三个词就证明过了三天，划掉七个就证明过了一周，于是周日终于到来了。\n\n阿瓦登抵达辛普森大楼的时间是中午，暗示的句子里并没有指明时间，阿瓦登认为在中午前往应该是比较可以接受的。当穿着深绿军大衣，耳朵上别着旁观者的阿瓦登来到辛普森大楼的入口时，他的心开始忐忑不安地跳跃起来。他在上一星期设想了无数种可能发生的情景，而现在这个谜底就要揭晓了。无论在周日效率大楼会发生什么，也不会比现在的生活更加糟糕，阿瓦登心里想，所以他并不怎么害怕。\n\n他走进大楼内部，发现这里的人也很少，空旷的走廊里只听到他哒哒的脚步声与回音。一部老电梯里贴着“缔造美好网络家园”的广告，以及一个充满了正义感的男性头像海报，背景是星条旗，他在纸里用右手食指指向观看者，头上写着一行字是“公民，请使用健康词汇。”阿瓦登厌恶地转过身去，发现另外一侧也贴着同样的海报，避无可避。\n\n值得庆幸的是五楼很快就到了，电梯的门一开，对面的门上就赫然挂着B户的牌子。门是掉了漆的绿色，门框上还点了几滴墨水，一部简易的电子门铃挂在右上角。\n\n阿瓦登深深吸了一口气，伸手去按电纽。\n\n电铃响起，很快屋子里传来脚步声。阿瓦登觉得这脚步的韵律很熟悉，似乎是在哪里见到过。门“咔拉”一声被打开一半，一名年轻女子一手握着把手，把身体前倾望着阿瓦登，警惕地说：\n\n“你，找谁？”\n\n女子疑惑地问道。阿瓦登一下子就认出了她的声音，就是那个在网络部BBS论坛科柜台后面的女性。她很漂亮，穿着墨绿色绒线衫，头上梳着这时代流行的短发，皮肤特别的白，只有嘴唇能看到一些血色。\n\n看着女子的眼神，一瞬间阿瓦登不知道该说什么好，犹豫了一下，他举起右手，轻声回答说：“title。”\n\n阿瓦登不知道这句话能否奏效，也不知道自己是否真的找对了地方，但这是他唯一能想到的回答了。他紧张地望着那女子，假如那女子忽然报警，那么自己就会被抓起来仔细审问为什么无缘无故跑到陌生人家里。“肆意游走罪”只比“使用敏感词汇罪”轻那么一点。\n\n女子听到他这么说，脸上还是毫无表情，只是把头幅度很轻微地点了一下，右手谨慎地做了一个“进来”的手势。阿瓦登刚要张口，那女子严厉地瞪了他一眼，吓的他把话又吞回去了，乖乖地跟着她进了屋子。\n\n一进屋子，女子首先做的就是把门关好，然后拉起来一层铅灰色的门帘挡在门口。阿瓦登不安地眨着眼睛，趁她拉门帘的时候环顾四周。这屋子是标准的两室一厅，在厅里摆放的是一套双人沙发与一个茶几，茶几上居然还有几束红紫色的塑料花。靠墙是电脑桌和电脑，墙上挂着普通的白色日历，但被主人用粉红色的纸套了边，看起来颇为温馨。一盏粗笨的日光灯从天花板上垂下来，上面象是恶作剧一样挂了几缕绿色的电线，象是垂下藤蔓的葡萄架。阿瓦登注意到厅口的鞋架上有四双鞋，尺码不同，说明今天的客人并不只他一个。\n\n阿瓦登正踌躇不安，忽然女子从背后拍了拍他的肩膀，示意他朝里面走。于是两个人穿过客厅另一侧的短小回廊来到其中一间卧室。卧室上挂着同样质地的铅灰色帘子，女子伸手举起帘布，推开了门。阿瓦登迈了进去，首先映入眼帘的是三名面带微笑的人类，以及一间用真正的鲜花装点的房间。屋子里有很多旧日记忆里的古老物品，比如一幅印象派的油画、一尊乌干达木雕，甚至还有一个银烛台，唯独没有电脑。\n\n他正在迟疑，女子也进了屋子。她谨慎地拉好门帘关上门，将耳边的旁观者取下，回过身来对阿瓦登用曼妙的声音说道：\n\n“欢迎加入说话会！”\n\n“说话会？”\n\n出于习惯，阿瓦登并没有把这三个字说出口，因为他不确定是否“健康”，只是用眼神表示自己的疑惑。\n\n“在这里你可以随便说话，这个该死的东西不会起作用的。”女子把自己的旁观者晃了晃，那个小东西象死掉了一样，对女子句子里两个敏感词汇“随便”和“该死”充耳不闻。\n\n阿瓦登一下子想到上星期在公共汽车站前碰到的男子，如果他摘下旁观者，会不会也会落到同一境地呢？那女子见他犹豫不决，指了指门口的铅灰色门帘说：“放心好了，这里是可以屏蔽掉旁观者信号的，不会有人觉察到。”\n\n“你们，是什么，人，这，是，哪里？”\n\n阿瓦登一边摘下耳朵上的旁观者，一边小声说道，语调还是改不了那种有关部门规定的说话方式。\n\n“这里是说话会，是一个完全自由场所，在这里你可以畅所欲言，请不要拘束。”\n\n另外一个人起身对他说道，这是一名瘦高的中年男子，鼻梁上的眼镜非常地厚。\n\n阿瓦登嗫嚅着，却找不到发音的焦点，在四个人的注视下显得窘迫不堪，脸都要红起来。女子同情地看了他一眼：“可怜的家伙，不用太紧张，每一个刚到这里的人都是这样。慢慢就习惯了。”\n\n她把手搭到阿瓦登的肩上：“我们其实见过的，当然，我见过你，而你没见过我。”她一边说，一边将自己的头发解下来，原来她留的是一头齐肩的乌黑长发，头发披下来的一瞬间阿瓦登觉得她真的很美。\n\n“我……我记得你，记得你的声音。”阿瓦登终于说出了一句完整的话，虽然不够流畅。\n\n“是吗，那可太好了。”女子笑起来，拉着他的手，让他坐到沙发上，递给他一杯水。阿瓦登注意到这是一个款式古老的茶杯，上面还刻着花纹，杯子里的水带着浓郁的香气，阿瓦登尝了一点，那种甜丝丝的味道对喝惯纯净水的舌头来说刺激格外地大。让他觉得浑身一下子被注进了许多活力。\n\n“弄到这个可不容易，我们也不是每周都能喝到。”女子坐到他身边，两只乌黑的眼睛注视着他，“你是怎么知道这个集会的？”\n\n阿瓦登把发现光盘暗示的过程说了一遍，其他四个人都赞许地点了点头。“果然是个聪明人，脑筋还没被陈腐的空气腐蚀掉。”一个三十多岁的胖子称赞道，他的嗓门大的要命。那个戴眼镜的中年人把两只手交叉在一起，表示赞同。\n\n“这正是天生的说话会成员，聪明、敏锐，而且不甘屈从于沉默。”\n\n“那么。”胖子提议，“先让我们鼓掌欢迎说话会的新成员吧。”\n\n于是四个人鼓起掌来，小小的屋子里响起一片掌声。阿瓦登羞涩地举起杯子做回应，他还不太习惯这样的场面。等到掌声稍息，他抬起头怯生生地问道：\n\n“可以问个问题吗？说话会到底是什么？”\n\n带他进屋的女子伸出食指，在他鼻子前两公分的地方比了一比，解释道：\n\n“说话会，就是可以畅所欲言的集会。在这里你不必顾忌什么，说出任何你想说的东西。这里没有敏感词汇，也没有健康互联网络。这里是绝对自由的空间，你可以尽情释放你的灵魂，舒展你的身体，没有任何禁锢与束缚。”说着说着，她的声音变的高亢、奔放，里面饱含了许多早已经被屏蔽掉的词汇，阿瓦登不曾听到这样流畅连贯的话语很久了。\n\n“我们的宗旨就是，说话，就这么简单。”中年人扶扶眼镜，补充道。\n\n“可是，要说些什么呢？”阿瓦登又问道。\n\n“任何事情，你心里想的任何事情都可以说出来。”中年人露出宽和的笑容，“尤其是那些被美国政府限制的思想。”\n\n这可真是一个大胆的集会啊，这分明就是犯罪，阿瓦登心想，但他发觉自己却被这种犯罪慢慢地吸引住了。\n\n“当然，有件事我们会事先说明。说话会是危险的，每一个成员都冒着被有关部门拘捕的风险。联邦执法人员也随时可能破门而入，以非法集会以及非法使用不合法词语的名义把我们抓起来。你现在有权拒绝加入，并且离开。”\n\n阿瓦登听到女子的警告，心里一度犹豫起来。但一想到此刻离去的话，那么又要开始持续那种窒息的泥沼生活，他就难以压抑自己的烦闷。阿瓦登第一次发现，原来“说话”对他来说是一个致命的诱惑，他先前并不知道自己原来是如此地渴望着说话。\n\n“我不会离开的，我要加入你们，说话。”\n\n“那太好了。唔，那么不妨就从自我介绍开始吧。”女子高兴地说，同时站起身来，把右手搭到胸前，“从我开始。我的名字叫阿尔特弥斯，至于网络编号和身份证号码，让他们见鬼去吧！谁会去管那个！我有我自己的名字，我不是数字。”\n\n她的话让所有人包括阿瓦登都笑了起来。接着她继续说道：“不过，这其实只是一个假名，这是希腊神话里的女神。”\n\n“假名？”\n\n“是的，和我户籍本上的名字是不同的。”\n\n“可是，为什么？”\n\n“你不会对自己在档案里的名字厌倦吗？我想起一个自己喜欢的名字，哪怕只有一次机会也好，自己想叫什么就叫什么。在这个说话会里的每一个人都有一个自己喜欢的名字，我们彼此拿这个称呼。”\n\n阿瓦登若有所思地点点头，他很理解阿尔特弥斯的想法。事实上当他在使用网络论坛的时候，也希望能够自己取一个称心如意的名字，而不是被分配一个用户名。\n\n通过介绍，阿瓦登了解到阿尔特弥斯是网络部BBS论坛管理科的职员，今年23岁，未婚，最讨厌蟑螂和蜘蛛，喜欢缝纫与园艺，屋子里的花就是她偷偷从城市边缘摘回来的。\n\n接下来是那名中年人，他自我介绍说名字叫兰斯洛特，41岁，是城市电厂的一名工程师；兰斯洛特这名字出自英国的亚瑟王传说，是一名忠贞的骑士。他有自己的老婆和两个孩子，一男一女；男孩三岁，女孩四岁，他们最喜欢吃的就是柠檬味道的水果糖。说到这里，兰斯洛特说希望下次聚会能把他们也带了，孩子们正是学说话的时候，他想教给他们真正的说话。\n\n那个三十多岁的胖子是网络部的一名网管，叫瓦格纳。这个身份让阿瓦登吃惊不已，他的印象里网管都是些绷着脸全无表情的冷漠生物，但眼前的瓦格纳脸圆滚滚的，油光锃亮，嘴边两条翘起的小胡子神气十足。他喜欢的是雪茄和歌剧，利用网管的特权这两样东西都不难弄到。\n\n“这个能屏蔽掉信号的门帘就是他弄的。”阿尔特弥斯补充说，瓦格纳冲她做了个“乐意为您效劳”的手势，然后点燃了雪茄，把它放到嘴里，很快屋子里就笼罩起一片稀薄的烟雾。\n\n说话会的第四名成员是一位穿着黑色制服的女性，今年刚满三十。她的名字是杜拉丝，城市日报（那个时代的报纸已经全部都数字化了）的编辑，她比阿尔特弥斯还瘦，颧骨高高耸起，眼窝身陷，两片薄薄的嘴唇即使在最说话的时候也很少分开，看不到牙齿。爱好是饲养狗和猫，尽管她并没有养。\n\n“那么，到你了。”阿尔特弥斯对阿瓦登说。阿瓦登想了想，结结巴巴地把自己的情况说了一遍，当谈到自己的爱好时候，他一时间居然想不到自己喜好什么，似乎什么都没有，在那之前他甚至从来没想过。\n\n“那，你最想做的是什么事呢？”阿尔特弥斯把手再一次放在他肩上，诱导着问道。\n\n“真的什么都可以？”\n\n“什么都可以，在这里没有任何限制。”\n\n阿瓦登觉得自己终于找到机会了，他咳了一声，抓抓头，脱口而出一句响亮的叫喊：“FUXKYOU, YOUSONOFBITCH！”\n\n在一瞬间，在座的四个人都被他这句话震惊了。瓦格纳率先反应了过来，他先叼住雪茄，用力鼓掌，然后用右手把雪茄取下来，张嘴大声地赞叹道：“真棒，痛快，这简直是最完美的入会誓词。”\n\n“我宁可听十遍这样的脏话，也不想再去碰那个乏味的电子女声。”兰斯洛特也是一脸陶醉，毫不掩饰自己对电子女声的厌恶。而阿尔特弥斯和杜拉丝全都咯咯地笑起来，杜拉丝发现自己的笑容幅度大了一点，不好意思地把嘴掩住。阿瓦登觉得他们与其说是觉得新奇，不如说是在享受这句脏话所带来的对体制的蔑视与挑战。\n\n“那你叫希望自己叫什么名字呢？” 阿尔特弥斯歪着头问。\n\n“唔……王二。“ 阿瓦登沉吟了一下，回答说。这是一个中式的名字，他以前有一个中国人朋友，喜欢讲故事，故事里的主角名字总是叫王二。\n\n屋子里的气氛现在完全融洽了，大家都开始谈些比较自然的话题，每个人都摆出了最舒服的姿势，阿尔特弥斯不时拿起茶壶来为大家续水。阿瓦登紧张的心情逐渐放松下来，他感觉到自己的脑子前所未有地轻松。\n\n“你知道的。”阿尔特弥斯又给他倒了一杯甜水，“我们一直想把说话会保持在一定规模，平日是没有办法畅所欲言的，我们需要空间。麻烦的是，我们没办法公开征集会员，又不可能直接通过物理接触去寻找，那风险太大。于是兰斯洛特就设计了一套暗示系统，只有发现这些暗示的人才能知道本会的存在。”\n\n“这套系统考虑到的还不止是安全问题。”兰斯洛特把自己的眼镜摘下来仔细擦拭了一下，得意地说，“这其实也是一个会员资格验证。说话会所吸纳的成员，必须有智慧，有头脑，内心渴望激情，并且对自由有着渴望。”\n\n瓦格纳用两根指头夹着雪茄，在事先准备好的烟灰缸里弹了弹烟灰，大声说道：“据我的经验，申请BBS论坛服务的人，大多数都是为了怀旧，或者说渴望一些新鲜的东西，这样的人往往都怀有激情，认为BBS论坛也许能给他们一些与现实不一样的东西——当然，事实上并非如此，美国政府对BBS论坛的管理甚至严厉过电子邮件——这暗示着他们心里渴望解脱束缚。因此我们将暗示隐藏在申请BBS论坛的光盘之中，只有申请人才有机会接触到这些暗示。而只有那些有智慧、观察敏锐的人才会发觉到这些暗示的存在，并顺利解读出来，找到这里。”\n\n“归根到底，说话会也不过是一群渴望自由说话的秘密小团体罢了。”兰斯洛特笑道。\n\n“你是第二个找到说话会的人，第一个是杜拉丝小姐。”\n\n阿尔特弥斯告诉阿瓦登。阿瓦登敬佩地看了杜拉丝一眼，后者淡淡地回答道：“这没什么，这是我的工作，我的工作就是摆弄文字。”\n\n阿瓦登想到上一周在公共汽车站碰到的那个疯狂男子，于是把这件事讲给其他成员听。听完之后，兰斯洛特摇了摇头，从嘴唇里滑出一声叹息：\n\n“这样的事情我也是见过的，我的一个同事就是如此。所以说话会的存在是必要的，这是缓解压力的阀门。长时间的敏感词汇限制会让人都疯掉的，因为他们既无法思考又没办法表达。”\n\n“这正是美国政府有关部门所希望看到的，这样只有傻瓜能够存活下来，一个全是傻瓜的社会是稳定的。” 瓦格纳费力地把自己肥胖的身躯挪了一下位置，轻蔑地说。\n\n“你也是有关部门的一分子，瓦格纳先生。”阿尔特弥斯一边往茶杯里续了些热水，一边抬头轻声说道。\n\n“阿尔特弥斯小姐，我只是一个能比普通人多使用几个敏感词汇的普通人而已。”\n\n大家都笑了起来。阿瓦登从来没有见过这么多的人说这么多的话，这是前所未有的奇妙经验。他惊讶地发现自己居然很快就融进了这个小圈子里，隔阂与陌生感很快就消失了；同时消失的还有胸闷与头晕等习惯性的毛病。\n\n很快话题就从说话会本身扩展到了更加宽泛随意的话题，阿尔特弥斯唱支歌，兰斯洛特说了几个笑话，杜拉丝则给大家讲了美国南部诸州的风土人情；瓦格纳甚至还唱了一段歌剧，虽然阿瓦登一个字也听不懂，但他一点也不吝惜掌声。在这个城市的某一个被屏蔽掉的角落里，五个不甘沉默的人正在享受着在这个时代视为奢侈品的事情——说话。\n\n“王二，你可曾看过《1984》？”\n\n阿尔特弥斯忽然问道，她就靠着阿瓦登坐下，阿瓦登摇摇头，反问道：“这是网络编号的一段么？”\n\n“这是一本书的名字。”\n\n“书？”阿瓦登听到这个名词，头摇的更大了。这是个古老的名词，在这个电脑技术非常发达的时代，网络可以承载一切信息，任何人都可以在网上图书馆查到电子版；因此有关部门认为实体书籍变成了一种没有必要存在的浪费，实体书也就逐渐消亡了。瓦格纳对此的评论是：“有关部门喜欢电子书籍的心情是可以理解的，电子书籍的话，只需要FIND和REPLACE两个命令就可以消灭掉全部不健康词汇，替一本书消毒；而实体书籍的校对与修订却是件旷日持久的工作。”\n\n“这是一本伟大的书，是旧世界哲人们对我们这个时代的预言。”阿尔特弥斯认真地说。“它很早以前就洞察到了肉的束缚与解脱，灵的束缚与解脱，这是说话会的基石。”\n\n阿瓦登不无惊奇地发现他的网络编号开头恰好是这这本书名字：19842015。\n\n“那么，该怎么样才能看到呢？”阿瓦登盯着阿尔特弥斯乌黑色的眼睛问。\n\n“我们也无法找到纸质版，网络图书馆不可能存在这样的书。”兰斯洛特摇摇头，然后重新露出笑容，左手向着杜拉丝摆了个请的姿势，“但我们的杜拉丝小姐应该为她的记忆力而自豪，她在很早已经有幸阅读过这两本书，并且能够记得里面的大部分文字。”\n\n“太好了，然后她写下来了，对吗？”\n\n“那太危险，这时代持有实体书是个大罪过，也容易让说话会暴露。我们只是在每次聚会的时候请杜拉丝小姐为我们背诵。既然是说话会，那么把这两个故事讲出来不是更名符其实吗？”\n\n大家都安静下来，杜拉丝站起来走到屋子中央，其他四个人坐在旁边看着她。阿瓦登不经意地把手搂在阿尔特弥斯肩上，后者微微朝这边靠过来，女性头发的幽香“咝咝”地划过他的鼻子，让他的心里一阵荡漾。屋子里非常暖和，他分不清这是花香还是阿尔特弥斯的味道。\n\n杜拉丝的声音并不高，不过却很清晰有力；她的记忆力确实惊人，不仅记得情节，包括一些细节和句子都可以复述下来。杜拉丝讲到了朱丽亚假装摔倒，然后偷偷递给温斯顿一张写着“我爱你”的纸条，绘声绘色，这让听众们都听的入神了，阿尔特弥斯听的尤其认真，以至于都没有注意到阿瓦登一直注视着她。\n\n“1984的作者预见到了专制的进步，却没有预见到技术的进步。”瓦格纳在杜拉丝停下来喝水的时候发表自己的评论，阿瓦登觉得他与外貌不太相称，是个很有洞察力的技术官僚。\n\n“在大洋国人们还可以靠传递纸条来偷偷表达自己的想法，但是现在不一样了。美国政府有关部门把我们全赶到了网上，而在网络技术发达的今天，我们即使想发一条短信都会被系统或者网管看的一清二楚，无从遁形。现实里呢，还有旁观者在。”瓦格纳在腿上敲了敲雪茄根部，“一句话，技术是中性的，但技术的进步会让自在的世界更自在，集权的世界更加集权。”\n\n“这句话说的很有哲学家的味道哟。”阿尔特弥斯冲瓦格纳挤了挤眼睛，从抽屉里取来一把饼干和曲奇散发给大家。\n\n“就好象同样是0和1，有的人就能写出工具软件，有人却拿那个编出恶性病毒？”\n\n阿瓦登想到一个类似的比喻，瓦格纳听了以后满意地打了个响指。\n\n“很不错的比喻，王二，就是如此，真不愧是程序员。”\n\n谈话持续了不知道有多久，杜拉斯看了一眼墙壁上的挂钟，连忙提醒谈兴正浓的四个人时间快到了。说话会不能持续很长时间，旁听者被屏蔽的越久，暴露的危险就越大。\n\n“那么好吧，我们就抓紧最后半个小时来完成今天的活动。”\n\n阿尔特弥斯一边说着，一边将桌子上的空杯子收走。兰斯洛特和瓦格纳也都站起身来，活动一下已经有些酸疼的肩膀和腰，只有杜拉丝坐在位子上没有动。\n\n“活动？还有什么活动？”\n\n阿瓦登奇怪地问道，说话会除了说话还有其他活动？\n\n“唔，对啊，我们还有其他活动。”阿尔特弥斯撩起额前的长发，对他妩媚一笑：“我们还会和对方完全交流。”\n\n“完全交流？”\n\n“就是intercourse”\n\n“………………”阿瓦登一下子变的脸色苍白，呼吸急促起来，仿佛胃里被灌进去零下三十度的寒风，他几乎不相信自己的耳朵。\n\n“说话会有说话的自由，也有选择与谁上床的自由。”阿尔特弥斯毫不羞涩地说，“我们互相谈话，然后选择合适的人做爱，就象我们选择我们喜欢的词汇说话一样。”\n\n兰斯洛特看阿瓦登很窘迫，走过去拍拍他的肩膀，慢慢地说：“当然，我们不会强迫任何人，这完全是在自愿的基础上。今天我还要早点回去照顾小孩，你们人数正好合适。”\n\n阿瓦登的脸色涨红，热的仿佛夏季的电脑CPU，他甚至不敢多看阿尔特弥斯一眼。他憧憬过女性很长时间，但如此接近还是第一次。\n\n还要回家去照顾小孩子的兰斯洛特向大家道别后就先行离去了，阿尔特弥斯将房间留给瓦格纳与杜拉丝，然后带着惶恐不安的阿瓦登来到了另外一间房间。这间显然是阿尔特弥斯的卧室，屋子里很简单，但却收拾的十分干净，在床上枕头旁还摆着一个手制的布娃娃，床单和窗帘都是粉红色的。\n\n最初的是由阿尔特弥斯主动开始的，丝毫没心理准备的阿瓦登只是被动地任她摆布。经过了几轮挑逗，阿瓦登才逐渐放开，任由潜藏在自己心内的原始欲望奔流出来，那种期待听到圆润女声的青春憧憬本来只是苦闷生活的意淫，而在今天它加倍实现了。很快这种憧憬与他在现实中被压抑的郁闷合流，转化成了猛烈的冲动，让他一次又一次与阿尔特弥斯融为一体。阿瓦登不知道这种冲动和他想大声说出“FUXKYOU, YOUSONOFBITCH”冲动有什么不同，不过现在不是考虑这个的时候，他现在脑子里想的只有尽情地、全无束缚地让自己释放激情，完全没有任何束缚。\n\n强烈的刺激一波波地冲击着兴奋中枢，最终一阵快感浪潮在狂暴洋面扬起头来，达到了一个极高的顶端。阿瓦登在那一瞬间感觉到了前所未有的自由，那种轻盈无比的自由，以及因自由而生的快乐与疲惫。浑身是汗的他喘息着倒在了阿尔特弥斯身上，一阵舒畅的倦意如潮水般淹没了他的身体……\n\n……当他醒来的时候，发现阿尔特弥斯躺在自己身边，赤裸的身体好象一尊白玉雕像，睡姿恬美静谧。他侧过身子去，慵懒地打了个呵欠，然后阿尔特弥斯睁开了眼睛。\n\n“很舒服，对不对？”她问道。\n\n“是啊……”阿瓦登不知道该说什么好，他顿了顿，犹豫地说道：“你以前和兰斯洛特、瓦格纳他们也……呃，我是说，象刚才那样子过吗？”\n\n“是的。”阿尔特弥斯温柔地回答，她半支起胳膊，长发从肩膀披到了胸口。她的大方坦白反而让阿瓦登有些不知所措。屋子里出现了一段时间的沉默，然后阿尔特弥斯忽然开口问道：\n\n“还记得今天杜拉丝讲的那段故事吗？女主角偷偷递给男主角写着“我爱你”的纸条。”\n\n“唔，还记得。”阿瓦登回答，很高兴终于能从那个拙劣的话题摆脱出来了。\n\n“在有关部门的健康互联网络词汇列表里，没有爱这个字呢。在我们这个时代，我爱你也是一个敏感词汇，被屏蔽掉了。”阿尔特弥斯的眼神里似乎是感慨，又象是失落。\n\n“我爱你。”阿瓦登不禁脱口而出，他知道在这间屋子里可以说出任何自己想说的话，不必顾忌。\n\n“谢谢你。”\n\n阿尔特弥斯听到之后只是笑了笑，起身穿上衣服，催促阿瓦登时间差不多了。阿瓦登有些失望，因为她没有预期反应的热烈，仿佛他刚才说的只是有些无关紧要的东西。\n\n这时候杜拉丝和瓦格纳已经离开了，屋子里只剩他们两个人。阿尔特弥斯把他送到门口，将旁观者交给他，然后叮嘱他说：“记得在外面绝对不要提及说话会的任何事情或者任何人，我们在说话会以外的地方是完全不认识的。”\n\n“我记住了。”阿瓦登回答，然后转身要走。\n\n“王二。”\n\n阿尔特弥斯忽然叫道，阿瓦登连忙转身，还没等他反应过来，两片柔软温暖的嘴唇忽然贴到了他的双唇，然后是一个细切的声音在耳边响起：“谢谢你，我爱你。”\n\n阿瓦登觉得眼睛有些湿润，他戴上旁观者，推开门，重新步入到那一片令人窒息的世界中去，但他此时已与来时的心境大不相同。\n\n此后阿瓦登的精神面貌明显有了改善。他谨慎地享受着这种秘密集会的乐趣，并且乐在其中。每一周或者两周，他们五个人都会在周日秘密地举行说话会的活动，聊天，唱歌或者听杜拉丝讲1984的故事。阿瓦登同阿尔特弥斯又“完全交流”了几次，偶尔他也会跟杜拉丝“交流”。他有了两个身份，一个是现实中和网上的阿瓦登，编号19842015，还有一个是说话会里的王二。他很享受这个名字，觉得这就是自己另外的一个人生。\n\n有一次集会，他们谈到了敏感词汇的问题。阿瓦登记得很早的时候——他对这方面的记忆有点模糊——有关部门给出的是一份敏感词汇列表，由网站的内部管理人员秘密参考使用，他对如何演变成现在的局面大惑不解。那一天瓦格纳带了一瓶葡萄酒，兴致很高，于是索性给他们讲了讲“屏蔽”的进化史，身为网管的他经常可以接触到这些资料。\n\n在最开始美国政府只是单纯地屏蔽掉敏感词汇，但很快他们就发现这样的措施根本没有用处。很多人会采取在词组中夹杂符号或者数字的方式来绕开系统检查；于是有关部门不得不将这些近似敏感词汇也一一屏蔽掉。然而众所周知，数字与符号之间的组合方式是近乎无限的，只要你有想象力，就完全可以组合出一个新的词组而且不失掉他的原意。比如说“politic”这个词，就有“politi/c”、“政polit/ic”、“pol/itic”等近乎无限种表达方式。\n\n当有关部门意识到这个问题时，他们采取了新的策略。既然无法辨识词组，那么就用单词屏蔽。这一举措在一开始是奏效的，违规交谈的人显著减少，但很快人们就发现可以用同音字或者谐音的方式来继续表达自己的危险思想。即使有关部门封掉全部敏感词汇的同音字，也无济于事，思想活跃的美国人充分发挥了自己的想象力，使用隐喻，借代、类比、引申及其他修辞方法，或者将一个敏感词用数个不敏感的字来代替。人类的思维方式要比电脑开阔许多。电脑屏蔽掉一条路，他们还会有更多的路可以选择。\n\n这一场水面以下的角力看起来似乎是美国大众要取得胜利。这时候，一个具有逆向思维精神的人出现了。他的身份不明。有人说他是有关部门的主管；也有人说他是因过度使用敏感词汇而被捕的危险人士。无论他是谁，总之整个局面被扭转过来。他向有关部门建议，不再告诉大众禁止说什么，而是规定他们只能说什么，用什么方式去说。有关部门很快就心领神会，制订了新的规章制度：取消了敏感词汇列表，取而代之的是互联网络健康语言列表，并把这举措推广到了日常生活中的语言屏蔽系统中去。\n\n这一次，大众终于处于下风。以往他们与有关部门尽情地在网络与现实中捉着迷藏，而现在他们却被有关部门扼住了咽喉。这样一来，有关部门可以有效率地掌握住言论，因为整个语言的框架都被彻底控制了。在有限的空间内，大众几乎是无计可施。\n\n尽管如此，大众还是不屈不挠地将这场战争——或者说游戏——继续下去，他们挑选健康词汇列表中的合法字眼来表达不合法的意思：两个连续的“稳定”意思就是“反对”，“稳定”加“繁荣昌盛”则暗示“屏蔽”。美国政府不得不对这一动向保持着警惕，并日复一日地将更多的词汇从健康词汇列表里删掉，禁止大众使用。\n\n“当然，这场战争会持续下去的。只要世界上还存在着两个不同的字或者词组，那么就可以继续自由交流——你知道莫尔斯电码吧？”\n\n瓦格纳说到这里，拿起茶杯一饮而尽，满意地打了一个嗝。\n\n“可是，这场战争的代价就是语言的失落。表达能力会越来越贫乏，越来越淡而无味，人们会越来越倾向于沉默，这对有关部门反而是好事。”兰斯洛特摆出一副忧虑的表情，有节奏地用指关节敲击着桌面，“这样一来，岂不就等于是大众的自由意识将语言推向死亡的边缘？真讽刺啊。按照这个趋势，有关部门是不会败的，他们会笑到最后。”\n\n“不，不，笑这种情感他们是不会了解的。”瓦格纳淡淡地回答。\n\n“我倒是觉得，美国是一直处于恐惧的情感之中呢，生怕人们掌握了太多的词汇，表达出太多的思想，变的难以掌握。”阿尔特弥斯说完摆出一副她在上班期间冷若冰霜的呆板脸孔，学着僵硬的腔调喊了一句：“营造健康的网络环境，美国万岁！”\n\n杜拉丝、兰斯洛特与瓦格纳都哈哈大笑，唯一没笑的是王二（阿瓦登）。他对于兰斯洛特刚才的那句话始终耿耿于怀：大众与有关部门的对抗，其最终结局就是语言的消亡。那么他们现在这个小小的说话会，也只不过是在一列开向悬崖的列车里关上窗帘，享受坠毁前最后的宁静罢了。\n\n不过他没有说出口，因为这太煞风景了。阿瓦登不希望破坏说话会的气氛，这对他很重要。\n\n从说话会回到家里，阿瓦登躺在行军床上，双手枕着脑袋，陷入了沉思。自从加入说话会以后，他变的比以前更容易陷入思考。有时候他想的是这个社会、这个互联网络或者这座城市中存在的荒谬性；有时候他想的是自己的生活；还有时候他想的是阿尔特弥斯。他不知道是不是在一个压抑的世界里，人的情感会变的格外强烈，他现在陷入对阿尔特弥斯的迷恋无法自拔。阿瓦登一直很羡慕杜拉丝讲的《1984》里面的温斯顿，他和朱利亚有一间两个人独处的小屋，一个只属于他们两个人的小世界。\n\n他在与阿尔特弥斯“完全交流”的时候曾经吐露过自己的心声，阿尔特弥斯没有直接回答，而是表示两个人的关系无法再比说话会更近一步——维持现在的状态就已经是个人行为的极限，有关部门可不会一直打瞌睡。“我们只能把感情生活压缩在每周一次的说话会活动里，这已经很奢侈了。”她对他说，同时温柔地抚摩他的胸膛。“只有在说话会里，我们才是阿尔特弥斯和王二。而在其他时间里，你是19842015，而我是19387465。”\n\n对此，阿瓦登只能发出一声轻轻的叹息，确实他不该奢求更多。\n\n除了感情，发生变化的还有互联网络。自从加入说话会以后，阿瓦登逐渐发现互联网表面下潜藏的一些东西。正如瓦格纳在一次活动的时候指出，普罗大众与有关部门的战争从未结束，总会有思想和言论从严厉管制的缝隙中流泻出来。阿瓦登发现，在完全公式化的EMAIL与网络论坛中其实隐藏着不少耐人寻味的细节，就好象那个title一样，存在着各式各样的密码与隐藏寓意。这些东西出自不同人的手里，样式和破译方式都不同，阿瓦登不知道那些密码背后隐藏的是怎样的内容。不过有一点可以确知的是，说话会并不是唯一的一个地下集会，瓦格纳说的对，始终还是有人在试图用“健康”词汇表达“不健康”思想。\n\n讽刺的是，给阿瓦登感触最深的，是有关部门的管制。以往他只是模糊地感觉到自己被绑缚起来，现在他能清晰地看清这种束缚与压抑的脉络，以及加诸在自己身上的各种手段。在小小说话会中享受到的自在让他更加深刻地感受到在宽阔现实中的不自在。\n\n“FUXKYOU, YOUSONOFBITCH！”\n\n每一次的聚会，三位男士都会轻蔑地一起高喊这一句粗话。他们清楚这不会给有关部门带来什么不良影响，不过这确实很痛快。\n\n这一周，阿瓦登特别地忙碌，他的同事因为不明原因而被屏蔽掉了，这样一来整个项目就全压在了他一个人身上。这项目是为有关部分设计一种软件，用来控制大功率主动式“旁观者”的能源分配控制。软件很复杂，他不得不每天在电脑前工作十几个小时，只有在身体实在支撑不住的时候才停下来随便吃一点东西，喝一口纯净水，困了就躺在旁边的行军床上睡上一觉，爬起来继续工作。屋子里满是浑浊的烟味与袜子脏衣服的酸臭味，阿瓦登就在这种环境下蓬头垢面地敲着键盘，并不时揉揉满布血丝的眼睛。\n\n偏偏在这个时候屋子里的暖气坏掉了。洋灰色的暖气片从昨天开始就变的冰凉，不再有热水流动。阿瓦登检查了一下，发现并不是管道问题，而且邻居们也碰到同样的事，看来是供热系统出了问题。这一变故的正面影响是稍微淡化了屋子内的酸臭味，负面影响是整个屋子变的有如冰窖一样。紧闭的窗户和门能挡住寒风，却挡不住寒冷，低温让本来就寒酸的房间更笼罩上一层霜气。无论是那把木椅还是行军床都象是冷酷的冰雕，屋子里唯一还有些热气的就只剩下电脑。阿瓦登不得不披上所有的御寒衣物，蜷缩在床上，把电脑的散热口对准自己。\n\n有关部门宣布“供热”和“暖气”暂时也被列入敏感词汇，于是阿瓦登没办法写信向供热部门询问，只好静待，除了用来敲键盘的指头以外，尽量保持全身一动不动，以节约热量。在停止供暖后的第四天，暖气片里终于传来“哗啦哗啦”的声音，带着热气的水开始流动，屋子里恢复了温暖，“供热”和“暖气”又可以恢复使用了。于是EMAIL与网络论坛上全都是“庆祝有关部门恢复供应暖气，急人民之所急”的帖子，EMAIL新闻组里也全是类似主题。\n\n不过这对阿瓦登来说太晚了，他生了病，感冒，而且是重感冒。他面色苍白，全身软弱无力，头疼的象是被一枚达姆弹射入头部，只能躺在床上等医生。医生来到他家里，给他做了两三次点滴，喂了一些叫不上名字的药片，叫他静养。这一场病足足持续了数天，他不得不放弃参加这一星期的说话会，身体状况实在太差了，阿瓦登甚至怀疑自己搞不好会因此而死掉。\n\n阿瓦登躺在床上，心里懊悔不已，说话会是他唯一的乐趣，现在他却没办法参加。他把头蒙在被子里胡思乱想，瓦格纳这一次会带什么特别的东西来呢？兰斯洛特有没有把两个孩子也领过来？还有阿尔特弥斯，他没参加的话，她会和谁“完全交流”呢？瓦格纳还是兰斯洛特？他还想到了杜拉丝，上一次的聚会里，杜拉丝讲到了温斯顿在秘密幽会的屋子里对朱丽亚说“我们已经死了”，朱丽亚附和着说“我们已经死了”，这时候第三个声音说道“你们已经死了。”\n\n杜拉丝就讲到这里，就停住了。阿瓦登急切地想知道接下来发生了什么，第三个声音是谁，是党吗？温斯顿和朱丽亚是否会被捕，他们会有什么样的下场？不光是他，阿尔特弥斯也很希望知道后续情节的发展，不过她并没有去追问杜拉丝。\n\n“让这成为一个悬疑，这样接下来的一周我们的生活都会在期待的乐趣中度过。”她对阿瓦登说，然后两个人继续沉溺于intercourse的快乐。\n\n“也许他们都会死。”阿尔特弥斯在交流结束后，看着天花板说。\n\n“也许那只是奥布林的声音，他去探望他们。”阿瓦登安慰她道，但是他的心里也不确定。\n\n阿瓦登的病持续了十天，然后他终于痊愈了。他痊愈后的第一件事就是从床上爬起来，然后去看墙上的日历：这一天恰好是星期日，说话会活动的日子。阿瓦登已经缺席了一周，这已经令他如饥似渴，甚至做梦都在和他们一起喋喋不休地说着话——所幸他并没有说梦话的习惯，所以24小时工作的旁观者并没发出任何警报。\n\n阿瓦登简单地洗了一下脸，用一把有些生锈的剃刀沾着肥皂仔细地刮掉脸上粗硬的胡须，然后咕噜咕噜地刷了刷牙齿，用手和毛巾沾着热水将自己蓬起的乱发压下去。因为生病，有关部门发了一些补贴给他，其中包括两块羊角面包、两瓶姜汁啤酒和一份精制砂糖。他将这些东西都用塑料布仔细包好，揣到宽大的军大衣里，打算带到说话会上去与大家分享。\n\n今天的天气和往常一样地冷，阿瓦登把自己裹在大衣里，登上前往效率大楼的公共汽车。一路上车厢里的广播重复着“营造健康的互联网络”以及一些优秀网络用户的先进事迹；车厢前面的电子屏幕不断滚动显示着最新的健康词汇列表，一个旁观者自车顶垂下来睥睨着车内的每一个表情呆滞的人。阿瓦登坐在最后一排，望着窗外不断向后移动的建筑物与枯黄的树木发呆。\n\n车子很快就到达了辛普森大楼附近的车站，阿瓦登下了车，把手放到怀里摸了摸塑料布包着的食物，朝着大楼走去。他在半路无意中抬起头，忽然一阵冰冷的寒流刺入他的胸腔，迫使他停住了脚步。\n\n有什么地方不对劲！\n\n他看到了效率大楼的第五层阿尔特弥斯家的窗户发生了一些奇怪的变化。以前阿尔特弥斯家面向大街的窗户总是挂着粉红色的窗帘，而现在窗帘则被扯到了两边，窗户大开，用肉眼可以勉强看到窗玻璃和屋子里雪白的墙壁。假如今天有说话会的话，阿尔特弥斯绝对不会把有屏蔽效果的窗帘打开。而且打开窗户这件事也绝不寻常，在这个城市里的室外空气十分浑浊，几乎不会有人会去开窗换气。\n\n也就是说，今天并没有说话集会召开，而是发生了另外一些事情。阿瓦登望着那窗户，心情开始变的有些慌乱，他把手从兜里掏出来，叼起一支香烟，把身体靠在一根电线杆旁故做镇静，以免被行人怀疑。究竟说话会发生了什么，为什么这一周停办了呢？要知道，只要还有复数的成员能够出席，说话会就会一直办下去，难道说瓦格纳、兰斯洛特、杜拉丝和阿尔特弥斯同时无法出席？这种概率实在太小了。阿瓦登一边这样想着，一边向四周不安地张望。忽然他看到了一样东西，一个念头霎时占据了他的全部心灵，让他几乎眩晕过去。\n\n“说话会本周不会有了，以后也不会有了。”阿瓦登嘴唇默默地蠕动着，面如死灰。\n\n他看到在街道内侧一处不起眼的地方隐藏着一个类似雷达天线的东西，其造型很象是两个背部贴在一起的大碗。阿瓦登心里清楚这是什么东西：这正是他负责软件设计的大功率主动式“旁观者”，这造型他很熟悉。这装置可以主动发射电波去探测人们的声音，并检查其中是否存在敏感词汇。\n\n这样的装置居然就安放在阿尔特弥斯家附近，那么就等于说话会完全暴露在了有关部门的监控之下。主动式旁观者的强大刺探电波会轻易刺穿她家中的铅质窗帘，把所有成员的话原封不动地传到有关部门耳朵里。\n\n这是一个划时代的发明，这一技术的突破意味着有关部门可以不再被动地等待警报，可以主动出击去刺探人们在任何时间任何地点说的任何话语。阿瓦登可以想象接下来会发生什么，阿尔特弥斯他们的每一句话都被有关部门记录下来，会有机器统计出到底有多少违禁词汇被他们使用过；然后联邦警察会冲进她的屋子，将正在聚会的成员们都带走，只留下搜查过后空荡荡的房间和窗户。\n\n阿瓦登想到这里，心如刀绞，他一点也不为自己的侥幸逃脱而感到幸运。他的胃袋翻腾起来，一种恶心的感觉从胃里直接升到嘴边，让他想吐，却又不能吐——因为“呕”也是个敏感词汇；大病初愈的孱弱身躯无法承受这种打击，象害了风寒一样颤抖起来，几乎站立不住。\n\n他不敢继续朝前走去，仓皇地转过身去，登上另外一辆公共汽车，把嘴闭的更紧了。等阿瓦登回到自己家楼下，看到楼房附近另外一架新的主动式旁观者正在兴建中，漆黑的天线在半空舒展开来，仿佛一面巨大的蜘蛛网。看来有关部门已经着手在整个纽约市部署这种新兴高科技产品。\n\n他不敢驻足观看，低着头从那巨大装置旁边走过，一路不停地走回家，然后把自己的脸紧紧地压在枕头里，却不敢哭出声音来，连一句“FUXKYOU, YOUSONOFBITCH”都不能说。\n\n从那以后，阿瓦登的生活回到了普通状态——就是说和原来一样沉滞、压抑、欠缺激情，健康向上，缺乏低级趣味。兰斯洛特说过：“战争的结果就是，大众的自由意识会将语言推向死亡的边缘”，现在看来，他的预言是很准确的：说话会的覆灭，导致“说话”、“歌剧”、“完全”、“交流”几个词先后被剔除出了健康词汇列表，成为敏感词汇。\n\n另外，虽然阿拉伯数字还能用，但“1984”这一个数字组合也被屏蔽掉了，这让包括阿瓦登在内的程序员在编写程序时不得不谨慎地检查数字是否违规，这额外增加了很多工作量，让他更加疲惫。\n\n阿瓦登不是没有担心过，也许在某一天的深夜，他就会忽然接到一封EMAIL，让他留在家里不要动，不要试图在网络做任何动作；接着电话会响起，电子女声会把这一要求重复再重复，直到警察打开他家的大门，把他带去未知的地方，那里有未知的命运等待着他。《1984》后面的情节发展阿瓦登始终不知道，唯一知道的杜拉丝已经彻底失踪了，所以温斯顿和朱丽亚的结局始终是个谜；就好象兰斯洛特、瓦格纳、杜拉丝和阿尔特弥斯的结局一样，也不从得知。其实这两件事对于阿瓦登来说没什么本质性的区别，所以它们也可以看做是同一个谜。\n\n其实他最担心的，是阿尔特弥斯。每次想到这个名字，阿瓦登就难以抑制心中的郁闷。她究竟会怎么样，彻底被屏蔽掉吗？如果是那样，那么她在这世界上遗留下来的唯一痕迹，就是一个程序员记忆里的假名而已了。\n\n说话会消失后三个星期，仍旧风平浪静，没有任何人来找过阿瓦登，他也没收到过任何类似内容的EMAIL，阿瓦登一直在想，也许是他们没有吐露出自己的下落，也可能是因为他们根本不知道——他们认识的只是一个叫王二的程序员。这个城市里有数以千计的程序员，而王二是个假名。\n\n因此，生活一如既往地平静。不，确切地说，还是有一点不同的，那就是互联网络健康词汇列表：那上面的词组消失的速度比以前要快的快，每小时每分钟都有词与单字飞快地在名单上消失，阿瓦登不得不花上大量时间去更新列表，以跟紧当前形势。\n\n与词汇列表更新速度相对的，EMAIL和网络论坛上的东西越来越乏味。因为人们不得不用极有限的词去表达广泛的意思，大家都变得寡言少语。就连那些秘密的暗语和联系方式也少了许多；整个网络就象是前些天阿瓦登家里出了问题的暖气片一样：虽然名义上是给人带来温暖的东西，但却变的冰冷、僵硬，让人如坠冰窟。\n\n这一天，阿瓦登从电脑前抬起头来，他看了看窗外迷茫的灰色天空，胸口一阵抽搐，不由得痛苦地咳了一声。他拿起塑料杯，将杯子里的纯净水一饮而尽，杯子丢进同样是塑料质地的垃圾桶里，发出钝钝的撞击声，他觉得自己的脑子也是一团垃圾，举起手敲了敲，果然发出同样钝钝的撞击声。\n\n然后他拿起大衣，戴上墨绿色的护目镜，走出门去。阿瓦登没带便携式的旁观者，那东西已经不需要了，城市里到处都是主动式的旁观者，随时监听是否有违禁词汇的存在。整个纽约现在就象是互联网络一样，被有关部门营造成十分健康。\n\n阿瓦登这一次外出是有正当理由的，他决定去取消网络论坛服务，这服务已经用不着了，因为无论EMAIL，新闻组，BBS论坛还是其他什么现在全部都变成了一样的东西。\n\n从日历来说现在应该是春季，但外面还是很冷，高大的灰色建筑矗立在平地上，仿佛绝对零度下的石林。大团大团的风裹着黄沙与废气穿行其间，风沙无处不在，让人置身其中而难以摆脱。阿瓦登把手揣进兜里，脖子缩进领口，畏缩着向网络部的大楼走去。\n\n忽然，他停下了脚步，惊讶地站在原地无法动弹。他看到阿尔特弥斯正站在前面的路灯下，穿着黑色的制服。可是她的变化有多么大啊，面容象是老了十岁，满脸都是衰老的皱纹，年轻的活力荡然无存；她听到脚步声，转过头来，两个乌黑的大眼睛显得异常空洞，目光越过阿瓦登延伸到远方，没有一个明晰的焦点。\n\n阿瓦登万万没有想到会在这个时间这个地点碰到她，这让他已经沉寂已久的心灵泛起了几点火花，可惜他迟钝的神经已经无法表达出“激动”这一个简单的情感了。两个人互相对视了一阵，他终于木然走到她身边，张了张嘴唇，想对她说些什么。但是他掏出今天新发布的健康词汇列表，发现上面是一片空白——终于连最后一个词组也被有关部门屏蔽了。\n\n于是阿瓦登只好保持着沉默，默默地与面无表情的她擦肩而过，继续向前走去。他的身影逐渐融入同样安静的灰色人群之中，整个城市都显得寂静极了。","slug":"2017.07.01","published":1,"date":"2017-07-01T04:14:30.000Z","updated":"2017-07-01T04:14:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck90ziium002erh9z9ox93c8i","content":"<h2 id=\"作者-马伯庸\"><a href=\"#作者-马伯庸\" class=\"headerlink\" title=\"作者:马伯庸\"></a>作者:马伯庸</h2><hr>\n<p>And in the naked light I saw ten thousand people, maybe more.</p>\n<p>People talking without speaking, people hearing without listening.</p>\n<p>People writing songs that voices never shared, no one dared disturb the</p>\n<p>sound of silence.</p>\n<p>— The sound of silence</p>\n<p>美利坚合众国，2015年，纽约。</p>\n<p>当电话响起来的时候，阿瓦登正趴在电脑前面睡觉。电话铃声十分急促，尖锐，每一次振动都让他的耳膜难受好久。他揉了揉干涩的眼睛，十分不情愿地爬起来，觉得脑子沉滞无比。</p>\n<p>其实他的脑子一直就很沉滞，这种感受既然是生理上的也是心理上的。他身处的房间很狭窄，空气不很好，唯一的两扇窗户紧闭着——即使打开窗户也没用，外面的空气更加浑浊。这是一间大约只有三十平米的小屋子，屋子墙壁上泛黄的墙纸有好几处开始剥落，天花板上的水渍渗成奇怪的形状；一张老式的军绿色行军床摆在墙角，床腿用白漆写着编号；紧挨着行军床的是一张三合板制成的电脑桌，桌上摆着一台浅白色的电脑，机箱后面五颜六色的电线纠缠在一起，把它们自己打成一个古怪的死结，杂乱无章地蔓延到地板与墙角，仿佛常春藤一样。</p>\n<p>阿瓦登走到电话前，慢慢坐到地板上，目光呆滞地盯着电话，手却没有动。这部古怪的东西是老式的按键式电话，大概是十几年前的款式，这是阿瓦登有一次去费城出差时偶尔在一家杂货店里买到的；他拿回家以后稍微修理了一下，发现居然还能用，这让他当时小小地兴奋了一阵子。</p>\n<p>电话继续在响着，已经是第七声。阿瓦登意识到自己不得不去接听了。于是他弓下腰，用两个指头拈起电话，慢慢把电话放到耳边。</p>\n<p>“请说出你的网络编号？”话筒里传来的声音并不急噪，事实上它也不带其他任何的感情色彩，因为这是电脑合成的人工智能语音系统。</p>\n<p>“19842015”</p>\n<p>阿瓦登熟练地报出一连串数字，同时开始觉得胸有些更闷了。说实话他并不喜欢这些空洞的电子声音，他有时候想，假如打过电话来的是一位声音圆润的女性该多好。阿瓦登知道这是一种不切实际的幻想，不过这幻想会让他的身体得到几秒钟的舒缓。</p>\n<p>话筒里的声音仍旧在继续着。</p>\n<p>“关于你在十月四日提交的网络论坛用户注册申请已经被受理，经有关部门审查后确认资格无误，请在三日内持本人身份证件、网络使用许可证及相关文件前往办理登记手续，并领取用户名及密码。”</p>\n<p>“知道了，谢谢。”</p>\n<p>阿瓦登谨慎地选择词语，同时努力挤出一副满足的微笑，好象话筒的另一侧有人在看着自己一样。放下电话，阿瓦登先是茫然地盯着它看了大约两分钟，然后站起来活动一下手腕，坐回到电脑前面，缓慢地推动了一下鼠标。</p>\n<p>电脑屏幕“啪”地一声亮了起来，显示出一个登陆的界面，还有一行英文：“请输入你的网络编号和姓名。”阿瓦登将那八位数字敲进去，又输入了自己的名字，点击“登陆”。随即机箱的指示灯开始频繁地闪动起来，整个机器发出细微的噪音。</p>\n<p>每一个使用互联网的人都有一个网络编号，没有这个编号，就无法连接进互联网络。每一个编号都是独一无二的，每个人只有一个；这是使用者在网上的唯一代号，既不能修改，也不能取消。这些编号分别对应着使用者身份证上的名字，因此19842015就是阿瓦登，阿瓦登就是19842015。阿瓦登知道有些记忆力不好的人会把自己的编号印在衣服的后面，那看起来颇为滑稽，也容易引发一些不正当的联想。</p>\n<p>有关部门说使用网络实名制是为了规范网络秩序方便管理，杜绝因匿名使用网络而产生的一系列重大问题和混乱。阿瓦登不太清楚那一系列重大问题会是什么，他自己没试过用假名上网，他所认识的任何人里也不曾有人尝试过——事实上，从技术角度来说，他根本没办法匿名登陆互联网络，没有编号就没有权限上网，而编号则连接着他的详细档案，换句话说，没人能在网上隐藏自己。有关部门把这一切都考虑的很周详。</p>\n<p>“有关部门”，这是一个语意模糊、但却有着权威与震慑力的词组。它既是泛指，又是确指，其所涵盖的意义相当广泛。有时候，它指的是为阿瓦登颁发网络编号的美国联邦网络管理委员会；有时候它是将最新通告及法规发到阿瓦登EMAIL信箱的服务器；还有时候它是监察网络的FBI特属网络调查科；总之一句话，有关部门是无处不在，无职不司的，总会在适当的时候出现，给予指导、监控或者警告，无论你是在网上还是网下。</p>\n<p>简直就象是老大哥一样无微不至。</p>\n<p>电脑仍旧在持续运转着，阿瓦登知道这得花上一阵子。这台电脑是有关部门配发给他的，具体型号和配置阿瓦登并不清楚，机箱是被焊死的，无法打开。于是他拿出一小瓶清凉油，用右手小拇指的指甲挑出一点抹在自己的太阳穴，然后从脚下堆积如山的杂物里翻出一个塑料杯子，从桌子旁的饮水机里接了半杯蒸馏水，就着一片镇痛片一饮而尽。蒸馏水穿过喉咙和狭长的食道滑进胃里，空泛的味道让他有些恶心。</p>\n<p>音响里忽然传来一阵美国国歌的旋律，阿瓦登放下杯子，重新把目光投到电脑上去。这是已经连入互联网络的标志。屏幕上首先跳出来的是有关部门的通告，白底黑色四号字，里面陈述了使用互联网的意义以及最新的规章制度。</p>\n<p>“缔造健康的互联网络，美国万岁！”</p>\n<p>音响里传来激昂的男性呼声，阿瓦登不大情愿地跟着大声念了一遍。“缔造健康的互联网络，美国万岁！”</p>\n<p>这段呼号持续了三十秒钟，然后消失，取而代之的是写着“缔造健康的互联网络”标语的桌面背景。另外一个窗口慢慢浮上开，上面开列出几个选项：工作、娱乐、电子信箱和BBS论坛。其中BBS选项呈现灰色，说明这项功能还没有开通。</p>\n<p>整个操作系统简洁明了，这台电脑的浏览器没有地址输入栏，只是在收藏夹里有几个无法修改的的网站地址。理由很简单，这些网站都是健康向上的，假如其他站点和这些网站一样，那么只保留这些网站就够了；假如其他站点与这些网站不一样，那么就是不健康的，是低级趣味，不能保留。这是有关部门精心设计的，是为了公民的精神健康着想，生怕他们受到不良信息的侵染。</p>\n<p>阿瓦登首先点开了“工作”，一连串和他工作相关的站点列表与相关软件在电脑上显示出来。阿瓦登是一名程序员，他每天的工作就是根据上级的要求编写程序。这份工作很无聊，不过可以保证他有稳定的收入。他不知道自己的源代码会被用到哪里去，上级也从来没有跟他说过。</p>\n<p>他打算继续昨天的工作，但是很快发现自己很难继续下去。阿瓦登觉得今天的情绪比以前要烦躁，无法集中精神，大脑还是很呆滞，胸口仍旧发闷。他试图娱乐自己，但是他发现“娱乐”选项里只有纸牌与挖地雷，根据有关部门的说法，这是两个健康的游戏，没有暴力，没有色情，不会让人产生犯罪冲动，也不涉及任何政治色彩。据说美国境外也是有互联网络站点的，不过无法连上去，因为本国的互联网络自成格局，独立自主，普通人无法直接连接到国外——IE浏览器没有地址栏，就算知道地址也没有用处。</p>\n<p>“您有一封新邮件。”</p>\n<p>系统忽然跳出来提示，阿瓦登终于找到了可以暂停工作的理由，他很快移动鼠标到电子信箱的选项上，点开，很快一个新的界面出现了。</p>\n<p>“To: 19842015</p>\n<p>From：10045687</p>\n<p>Subject: 模块、已经、完成、当前、项目、是否、开始。”</p>\n<p>阿瓦登微微地叹了一口气，觉得有些失望。每一次他收到新的电子邮件，都希望能够有一次新鲜的刺激来撞击他日益迟钝的脑神经，每一次他都失望了。其实他早就知道这一点，只不过他觉得保持期待至少能够享受到几秒钟快感。就好象他期待着打电话过来的是一个圆润温柔的女性声音一样。不给自己一些渺茫的希望，阿瓦登觉得自己迟早会疯掉的。</p>\n<p>这封信很简短，但是内容很充实。19842015是阿瓦登的网络编号，而10045687则是他的一位同事的编号，这种工作性质的信件通常都以编号相称。信的内容是几个不连续的英文单词，这是有关部门所提倡的一种电子邮件书写方式，因为这样可以方便软件检查信件中是否含有敏感词汇。</p>\n<p>阿瓦登打开回信的页面，同时另开了一个窗口，打开一份名字叫做“网络健康语言词汇列表”的TXT文档。这是有关部门要求每一位网民所必须使用的词汇。当他们书写电子邮件或者使用论坛服务的时候，都得从这个词汇列表中寻找适合的名词、形容词、副词或者动词来表达自己想要说的话。一旦过滤软件发现网民使用了列表以外的词，那么这个词就会被自动屏蔽，取而代之的是“请使用健康语言”。</p>\n<p>“屏蔽”是个专有名词，被屏蔽的词将不允许再度被使用，无论是在书信里还是口头都不允许。讽刺的是，“屏蔽”一词本身也是被屏蔽的词汇之一。</p>\n<p>这个列表是经常更新的，每一次更新都会有几个词在列表上消失，于是阿瓦登不得不费劲脑汁寻找其他词语来代替那个被屏蔽掉的词语或者单字。比如在以前，“运动”这个词是可以使用的，但后来有关部门宣布这也是一个敏感词汇，阿瓦登只好使用“质点位移”来表达相同的意思。</p>\n<p>他对照着这份列表，很快就完成了一封文字风格与来信差不多的EMAIL——健康词汇表迫使人们不得不用最短的话来表达最多意思，而且要尽量减少不必要的修辞，所以这些信件就好象是那杯蒸馏水一样，淡而无味，阿瓦登有时候想，他早晚也会和这些水和信一样腐烂，因为这些信是他写的，水是他喝的。</p>\n<p>接下来阿瓦登启动检查软件先扫了一遍，确保自己没无意中加入什么敏感词汇。等这一切都完成后，他按下了发送键，邮件被送出去了。</p>\n<p>阿瓦登没有留下备份，因为他的机器里没有硬盘，也没有软驱、光驱或者USB接口。这个时代宽带技术已经得到了很大发展，应用软件可以集中在统一的一个服务器中，个人用户调用时的速度丝毫不会觉得迟滞。因此个人不需要硬盘，也不需要本地存储，他们在自己电脑里写的每一份文档、每一段程序、甚至每一个动作都会被自动传送到有关部门的公共服务器中，这样便于管理。换句话说，阿瓦登所使用的电脑，仅仅具备输入和输出两种功能。</p>\n<p>完成了这封信后，阿瓦登再度陷入了软绵绵的焦躁状态，这是一个连续工作了三天的程序员的正常反应。这种情绪很危险，因为它让人效率低下精神低迷，而且没有渠道发泄。“疲劳”、“烦躁”以及其他负面词汇都属于危险词汇，如果他写信给别人抱怨的话，那么对方收到的将会是一封写满“请使用健康语言”的EMAIL。</p>\n<p>这就是阿瓦登每天的生活，今天比昨天更糟糕，但应该比明天还稍微好一点。事实上这个叙述也很模糊，因为阿瓦登自己并不清楚什么是“好一点”，什么是“更糟糕”。“好”与“坏”是两个变量，而他的生活就是一个定量，只有一个常数叫“压抑”。</p>\n<p>阿瓦登推开鼠标，把脑袋向后仰去，长长地呼了一口气。（至少“呼”这个字还没有被屏蔽）这是空虚的表现，他想哼些歌，但却又不记得什么，转而吹了几下口哨，但那听起来与一只生了肺结核的狗差不多，只得做罢。有关部门象幽灵一样充斥在整个房间里，让他无法舒展自己的烦闷。就好象一个人在泥沼里挣扎，刚一张口就被灌入泥水，甚至无法大声呼救。</p>\n<p>他的头不安分地转了几转，眼神偶尔撇到了摆在地板上的老式电话机，他忽然想到还必须要去有关部门申请自己的BBS论坛浏览许可证。于是他关掉“工作”和“电子邮件”窗口，退出了网络登陆。阿瓦登在做这些事的时候毫不犹豫，他很高兴能够暂时摆脱互联网络，在那上面他只是一串枯燥的数字和一些“健康词汇”的综合体。</p>\n<p>阿瓦登找出一件破旧的黑色呢子大衣，那件大衣继承自他的父亲，袖口和领子已经磨损的很严重，个别地方有灰色的棉花露出来，但还是很耐寒。他把大衣套到身上，戴上一副墨绿色的护镜，用过滤口罩捂住嘴。他犹豫了一下，拿起“旁听者”别在耳朵上，然后走出家门去。</p>\n<p>纽约的街上人很少，在这个时代，互联网的普及率相当地高，大部分事务在网上就可以解决，有关部门并不提倡太多的户外活动。太多的户外活动会导致和其他人发生物理接触，而两个人发生物理接触后会发生什么事则很难控制。</p>\n<p>“旁听者”就是为了防止这种事而发生的，这是一种便携式的语言过滤器，当携带者说出敏感词汇的时候，它就会自动发出警报。每一位公民外出前都必须要携带这个装置，以便随时检讨自己的言语。当人们意识到旁听者存在的时候，他们往往会选择沉默，至少阿瓦登是如此。有关部门正逐步试图让网络和现实生活统一起来，一起“健康”。</p>\n<p>这时候正是11月份，寒风凛冽，天空漂浮着令人压抑的铅灰阴云，街道两旁的电线杆仿佛落光了叶子的枯树，行人们都把自己包裹在黑色或灰色的大衣里面，浓缩成空旷街道上的一个个黑点飞快移动着。一层若有若无的烟雾将整个纽约笼罩起来，不用过滤口罩在这样的空气里呼吸将会是一件很有挑战的事情。</p>\n<p>距离上一次离开家门已经有两个月了吧，阿瓦登站在公共汽车站的站牌下，不无感慨地想，周围的一切看起来很陌生，泛黄，而且干燥。那是上一次沙尘暴的痕迹。不过沙尘暴这个词也已经被屏蔽了，因此阿瓦登的脑海里只是闪过那么一下，思想很快就转移到别的事情上去了。</p>\n<p>站在阿瓦登旁边的是一个穿着蓝色制服的高个男人。他先是狐疑地看了阿瓦登一眼，看到后者沉默地沉在黑色大衣里，他的两只脚交替移动，缓慢地凑了过去，装做漫不经心对阿瓦登说：</p>\n<p>“烟，有吗？”</p>\n<p>男人说，每一个字都说的很清晰，而且词与词之间间隔也足够长。这“旁听者”还没有精密到能够完全捕捉到每一个人语速和语调的程度，因此有关部门要求每一位公民都要保持这种说话风格，以方面检测发言人是否使用了规定以外的词汇。</p>\n<p>阿瓦登转过头去，看了他一眼，舔舔自己干裂的嘴唇，回答说：</p>\n<p>“没有。”</p>\n<p>男人很失望，又一次不甘心地张开嘴。</p>\n<p>“酒，有吗？”</p>\n<p>“没有。”</p>\n<p>阿瓦登又重复了一次这个词，他也已经很久没有收到烟和酒了，也许是缺货的关系吧，这是常有的事。不过有一点很奇怪，“旁观者”这一次却没有发出警报。以阿瓦登的经验，以往一旦烟、酒或者其他生活必需品发生短缺现象，这个词就会暂时成为被屏蔽掉的敏感词汇，直到恢复供给为止。</p>\n<p>这个男人看起来很疲惫，红肿的眼睛是这个时代的人们普遍的特征，这是长时间挂在网上的关系。他的头发蓬乱，嘴边还留着青色的胡子碴，制服下的衬衣领口散发着刺鼻的霉味。能看的出，他也很久不曾到街上来了。</p>\n<p>阿瓦登这时候才注意到，他的耳朵上空荡荡的，没有挂着那个银灰色的小玩意“旁听者”，这实在是一件严重的事情。不携带“旁听者”外出，就意味着语言不会再被过滤，一些不健康的思想和言论就有可能孳生，因此有关部门相当严厉地规定公民上街必须携带旁听者。而这个男人的耳朵旁却什么也没有。阿瓦登暗暗吃惊，一时间不知道是该去提醒还是装做没看到。他暗自想，也许向有关部门举报会更好。</p>\n<p>这时候那个男人又朝他靠近了一点，眼神变的饥渴起来。阿瓦登心里一阵紧张，下意识地向后退去。这难道是一次抢劫？还是说他是个压抑太久的同性恋者？那个男人忽然扯住他的袖子，阿瓦登狼狈地挣扎却没有挣开。出乎他的意料，那个男人并没有进一步的动作，而是大吼一声，用一种阿瓦登已经不太习惯了的飞快语速向他倾泻起话语来。阿瓦登被这突如其来的爆发弄的莫名其妙，不知所措。</p>\n<p>“我只是想和你多几句话，就几句，我很久没有说过话了。我叫斯多葛，今年三十二岁，记得，是三十二岁。我一直梦想有一套在湖边的房子，有一副钓鱼竿和一条小艇；我讨厌网络，打倒网管；我妻子是个可恶的网络中毒者，她只会用枯燥乏味的话叫我的网络编号；这个城市就是一个大疯人院，里面大疯子管着小疯子，并且把所有没疯的人变的和他们同样疯狂；敏感词汇都去他X的，老*受够了……”</p>\n<p>男人的话仿佛一瓶摇晃了很久然后突然打开的罐装碳酸饮料，迅猛，爆裂，而且全无条理。阿瓦登惊愕地望着这个突然狂躁起来的家伙，却不知道如何应对；更可怕的是，他发现自己居然对他产生了一点同情，那种“同病相怜”式的同情。男人的话这时候已经从唠叨变成了纯粹谩骂，全部都是最直抒胸臆的那种。阿瓦登已经有五、六年不曾说过这些脏话，最后一次听到这些也是四年前。有关部门认为这都有碍精神文明，于是全部都屏蔽掉了。</p>\n<p>而现在这个男人就在公众场合对着他大吵大嚷，似乎要将被屏蔽掉的敏感词汇一口气全倒出来。他的目光和手势并不针对任何人，甚至也不针对阿瓦登，更象是在一个人在自说自话。阿瓦登的耳膜似乎不习惯这种分贝，开始有些隐隐做痛，他捂着耳朵，拿不定主意是干脆逃掉还是……这时候，远处街道出现两辆警车，一路闪着警灯直直冲着这座公共汽车站而来。</p>\n<p>警车开到站台旁时，男人仍旧在痛骂着。警车门开了，涌出了五、六名全副武装的联邦警察。他们扑过去将那个男子按在地上，用橡皮棍痛打。男人两条腿挣扎着，嘴里的语速更快了，骂出来的话也越来越难听。其中一名警察掏出一卷胶带，“嚓”地一声扯下一条向男人的嘴贴去。男人在嘴被胶带封住之前，突然提高嗓门，冲着警察痛快无比地喊了一句：“FUXKYOU, YOUSONOFBITCH！”阿瓦登看到他的表情由疯狂变成享受，面带着微笑，似乎完全陶醉在那一句话所带来的无上快感和解脱感中。</p>\n<p>联邦警察们七手八脚地将男人送进了警车，这时才有一名警察走到了阿瓦登的跟前。</p>\n<p>“他，是，你朋友？”</p>\n<p>“我，不，认识。”</p>\n<p>警察盯了他一阵，取下他耳朵上的“旁观者”查看记录，发现他并没有提及任何敏感词汇，于是重新给他戴回去，警告他说那名男子说的全部都是极度反动的词汇，要求他立刻忘掉，然后转身押着那男子离开了。</p>\n<p>阿瓦登松了一口气，其实刚才他有一瞬间涌现出一种冲动，也想在这空旷的街道上大喊一声“FUXKYOU, YOUSONOFBITCH”那一定很爽快，他心里想，因为那男子说出这句话的时候表情很享受。不过他也知道，这也是妄想的一种，“旁观者”紧帖在耳朵上的冰凉感觉时刻提醒着他。</p>\n<p>街上很快就恢复了冷清，十分钟后，一辆公共汽车慢吞吞地开进站里，锈迹斑斑的车门哗啦一声打开，一个电子女声响彻整个空荡荡的车厢：“请乘客注意文明用语，严格按照健康词汇发言。”</p>\n<p>阿瓦登把自己缩进大衣，压抑住自己异样的兴奋，决定继续保持沉默下去。</p>\n<p>大约过了一个小时，公共汽车到了目的地。从破碎的车窗玻璃里吹进来的寒风让阿瓦登脸上挂起一层暗灰色的霜气，面部被风中的沙砾和煤渣刮的生疼。他听到电子女声报出了站名，就站起身来，象一条狗一样抖抖身上的土，走下车去。</p>\n<p>车站对面就是阿瓦登要去的地方，那是有关部门负责受理BBS论坛申请的网络部。这是一间五层的大楼，正方形，全水泥混凝土结构，外表泛灰。如果没有那几个窗户的话，那么它的外貌将与水泥块没有任何区别：生硬、死气沉沉，让蚊子和蝙蝠都退避三舍。</p>\n<p>BBS论坛是一种奇特的东西，从理论上来讲它完全多余，BBS的功能完全可以由EMAIL新闻组来取代，后者更容易管理和审查。而且申请使用BBS论坛资格不是件容易的事，申请人必须要通过十几道手续和漫长的审查才能有浏览资格，浏览资格三个月才会被允许在指定论坛发布帖子，至于自己开设BBS则几乎是不可能。</p>\n<p>因此真正对BBS有兴趣的人少之有少。阿瓦登当初之所以决定申请BBS论坛资格，纯粹是因为他那种模糊但却顽强的怀旧心态，就好象他从杂货店里买的那部老式电话一样。他也不知道自己为什么会自找麻烦，也许是为了给生活带来些刺激，还是说为了强调自己和曾经旧时代的那么一点点联系，也许两者兼有之。</p>\n<p>阿瓦登恍惚记得在他小的时候，互联网与现在并不太一样。并不是指技术上的不同，而是一种人文的感觉。他希望能通过使用BBS论坛回想起一些当年的事情。</p>\n<p>阿瓦登走进网络部的大楼，大楼里和外面一样寒冷，而且阴森。走廊里没有路灯，蓝白色调的两侧墙壁贴满了千篇一律的网络规章条文与标语，冰冷的空气呼吸到肺里，让阿瓦登一阵痉挛。只有走廊尽头的小门缝隙里流泻出一丝光亮，小门的上面挂着一块牌子，上面写的是“网络部BBS论坛科。”</p>\n<p>一走进这间屋子，阿瓦登立刻感觉到一阵温洋洋的热气。屋子里的暖气（或者是空调）开的很大，让阿瓦登冻麻了的手脚和脸麻酥酥的，有些发痒，他不禁想伸出手去挠挠。</p>\n<p>“公民，请您站在原地不要动。”</p>\n<p>一个电子女声忽然从天花板上的喇叭里传来，阿瓦登触电似地把手放下，恭敬地站在原地不同。他借这个机会观察了一下这间屋子。这屋子准确来说应该是一个狭长形的大厅，一道拔地而起的大理石柜台象长城一样将房间割裂成两部分，柜台上还装着一排银白色的圆柱形栅栏，直接连到天花板。屋子里没有任何装饰，没有观赏植物，没有塑料鲜花，甚至没有长椅和饮水机。</p>\n<p>“缔造健康的互联网络，美国万岁。”</p>\n<p>阿瓦登跟着声音重复了一遍。</p>\n<p>“请前往八号窗口。”</p>\n<p>电子女声的语调很流畅，因为这是电脑制作出来的，因此没有敏感词汇的限制。</p>\n<p>阿瓦登转头看到在自己右手边的不远处，大理石柜台上的液晶屏幕显示着八号的字样。他走过去，拼命抬起头，因为柜台实在太高了，他只能勉强看到边缘，而无法看到柜台另一侧的情形。不过他能听到，一个人走到柜台对面，坐下去，并有翻动纸张与敲击键盘的声音。</p>\n<p>“请把文件放入盒子里。”</p>\n<p>柜台上的喇叭传来命令。出乎意料，这一次在喇叭里的声音却变了。虽然同样冷漠枯燥，但阿瓦登还是能分辨出它与电子女声的不同——这是一个真正的女性的声音。他惊讶地抬头望去，却什么都看不到，柜台太高了。</p>\n<p>“请把文件放入盒子里。”</p>\n<p>声音又重复了一次，语气里带着一丝烦躁，似乎对阿瓦登的迟钝很不满。</p>\n<p>“是的，这是真正的女声……”阿瓦登想，电子女声永远是彬彬有礼不带任何感情色彩的。他把相关的电子身份证、网络许可证、网络编号和敏感词汇犯罪记录等一系列个人资料卡片一起放进柜台外的一个小金属盒子里，然后把盒子插进柜台上一个同样大小的凹槽中，关好门。很快他听到“唰”的一声，他猜测这也许是对面的人——也许是个女人——将盒子抽出去的声音。</p>\n<p>“你申请BBS服务的目的是什么？”</p>\n<p>喇叭后的女声浸满了纯粹事务性的腔调。</p>\n<p>“为了、提高、互联网络、工作效率、为了、缔造、一个、健康、的网络、环境，更好地、为、祖国、做出、贡献。”</p>\n<p>阿瓦登一字一句地回答，心里知道这只是一道官方程序，只需要按标准回答就可以。</p>\n<p>对面很快就陷入沉默，大约过了十五分钟，喇叭再度响起。</p>\n<p>“最后手续确认，你已经获得BBS论坛浏览权。”</p>\n<p>“谢谢。”</p>\n<p>“砰”的一声，金属盒子从柜子里弹了出来，里面除了阿瓦登的证件以外还多了五张小尺寸光盘。</p>\n<p>“这是有关部门核发给你的BBS论坛统一用户名与密码，BBS论坛列表、互联网BBS论坛使用指南及相应法规、以及最新健康网络词汇列表。”</p>\n<p>阿瓦登向前踏了一步，从盒子里将这些东西一股脑全拿出来，揣进大衣的大兜里。那些东西其实是可以全部放在同一张光盘里的，不过有关部门认为每一张光盘装一份文件有助于用户理解这些文件的严肃性和重要性，并产生敬畏。</p>\n<p>他心里盼望着那个喇叭能再说两句。让他失望的是，对面传来的是一个人起身并且离开的声音，从脚步声的韵律判断，阿瓦登愈发相信这是一名女性。</p>\n<p>“手续办理完毕，请离开网络部回到自己的工作岗位上。”</p>\n<p>甜美空洞的电子女声从天花板上传来，阿瓦登厌恶地抽动鼻翼，拿手揉了揉，转身离开这间温暖的大厅，重新进入到寒冷的走廊。</p>\n<p>在回家的路上，阿瓦登蜷缩在公共汽车上一动不动，顺利申请到BBS的使用权让他有些虚无缥缈的兴奋。他闭着眼睛，找了一个合适的角度躲开破窗而入的寒风，右手在兜里不断摩挲那一系列光盘，还在怀念着那一个神秘的女声。</p>\n<p>如果能再一次听到该多好，他不能抑制自己这样的想法，同时用拇指的指肚在光盘上轻轻地摩擦，幻想这几张光盘也曾经被她的手触摸过。他兴奋的几乎也想破口大骂一句“FUXKYOU, YOUSONOFBITCH”，真奇怪，那名男子的骂声在他的记忆里根深蒂固，并时不时不自觉地滑到唇边。</p>\n<p>忽然，他的手指在光盘上发觉到一丝异常的感觉。阿瓦登下意识地朝四周望去，确认周围一个乘客也没有后，他小心翼翼地把光盘全拿出来，就着窗外的光亮仔细端详。</p>\n<p>阿瓦登很快注意到，在装有BBS论坛列表的光盘背面，被人用指甲轻轻地划了一道刮痕。这条刮痕很轻，如果不是阿瓦登仔细地抚摩光盘的话，是很难发觉到的。这条刮痕很奇特，是一条直线，而在这条直线末端的不远处，则是另外一条极短的刮痕，似乎刻意想弯成一个圆点。整体看上去就好象是一个叹号，或者倒过来说，象是字母i。</p>\n<p>很快他在其他四张光盘上也发现了类似的刮痕，它们造型都不同，但都似乎代表着某种符号。阿瓦登回想起喇叭里那个女声最后一句提到过的文件顺序，于是把这五张光盘按照BBS论坛统一用户名与密码、BBS论坛列表、互联网BBS论坛使用指南、相应法规、以及最新健康网络词汇列表的顺序排列好，接着依次把那五道刮痕用手指临摹到汽车窗户上。很快那些刮痕构成了一个英文单词：</p>\n<p>title</p>\n<p>题目？这是什么意思？</p>\n<p>阿瓦登看着这个单词莫名其妙，这究竟是纯属无意的痕迹，还是有人刻意为之？如果是有人刻意为之，他这么做的用意是什么？</p>\n<p>这时候汽车停住了，又有几名乘客走上车来。阿瓦登挪动一下身体，不让他们看到自己在车窗上写出来的字迹，然后装做打呵欠的样子抬起袖子，轻轻把那五个字母擦掉。</p>\n<p>阿瓦登暗自庆幸，如果他没有在现在发现这些光盘上的痕迹，那么以后就永远没有机会发觉了。按照规定，个人电脑是不允许使用任何存储存设备的，因此阿瓦登的电脑并没有光驱。他下一步所要做的是将这些光盘送交到管区网络安全部，由他们将光盘内资料登陆到服务器中，再转发给阿瓦登。这是为了防止个人私自在家里制造、阅读或者传播黄色或者反动信息，网络安全部发出的通告是这么解释的。联邦的网络警察经常会突入到个人家中进行临时检查，看用户是否非法拥有信息贮存设备，阿瓦登曾经亲眼见过一个邻居被警察带走，原因仅仅是因为他私自藏了一张光盘在家里——其实他只是打算拿那个当茶杯垫用。那个邻居再没回来过。</p>\n<p>无论这些符号代表的是什么意思，它都是一种全新的体验，这让阿瓦登感觉到兴奋。怀旧与渴望新奇是阿瓦登生活在这个时代的两根精神支柱，否则他会与这座城市一样变的僵硬，然后窒息而死。</p>\n<p>他先来到网络安全分部，将光盘交给那里的负责人，负责人反复地检查光盘和阿瓦登的表情，好象所有使用BBS论坛的人都不可信赖一样。末了负责人终于找不到什么破绽，只得将光盘收下，然后举起右手，阿瓦登和他一起高呼“缔造健康的互联网络”。这句话是唯一被允许可以连贯着被说出来的句子。</p>\n<p>回到家里，阿瓦登脱掉大衣，摘了过滤口罩，将旁观者扔到了行军床上，然后整个人也倒进枕头里。每次出去外面都会让他疲劳，这一半是因为他孱弱的肉体已经不大适合室外活动；另外一半原因是因为他必须花费大量的精力来应付旁观者。</p>\n<p>过了四十分钟，他才悠悠地醒过来，头还是和平常一样地疼，胸口还是一如既往地闷。胡乱吃了一点东西以后，阿瓦登爬到电脑桌前，打开电脑，按程序登陆上网络，习惯性地先检查了一遍信箱。</p>\n<p>信箱里有七、八封新的信件，其中两封是同事发来的事务信。另外五封则是网络安全部发给他的，内容就是他送交的那几张光盘。</p>\n<p>阿瓦登打开了包含有BBS论坛的用户名、密码和BBS论坛列表的两封信。他看到自己的论坛通用用户名叫做19842015，和自己的网络编号完全一样，不由得有些失望。他依稀记得在小的时候，BBS论坛的用户名是可以自己决定的，而且每一个论坛都可以不同，一个人在网上并不单只是一串枯燥数字。</p>\n<p>小时候的记忆往往是跟童话和幻想混杂在一起，未必与实际相符。现实中你只能使用有关部门指定的用户名和密码，理由很简单，用户名和密码内也可能含有敏感词汇。</p>\n<p>阿瓦登又打开了那份BBS列表，全部都是有关部门开设的官方论坛，没有私人的——事实上个人能够合法持有的电脑设备从技术上来说也无法架设新BBS——这些论坛的主题各有侧重点不同，但基本上是围绕着如何更好响应国家号召，缔造健康互联网络来说的。比如其中一个电脑技术论坛，主题就是如何更好地屏蔽掉敏感词汇。</p>\n<p>居然在这些论坛中还有一个是关于游戏的。里面正在讨论的是一个如何帮助别人使用健康词汇的网络游戏，玩家可以操纵一名小男孩在街上侦察，看是否有人使用了敏感词汇，小男孩可以选择上前指责或者通知警察，抓到的人越多，小男孩得到的褒奖就越高。</p>\n<p>阿瓦登随便打开了几个论坛，里面的人都彬彬有礼，说话很“健康”，就好象街上的那些行人一样。不，准确地说，比街上的气氛还要压抑。在街上的人也许还有机会保留一下自己的小动作，比如阿瓦登刚才在公共汽车上就偷偷地写了TITLE五个字母；而在网上论坛，人的最后的一点隐私也全被暴露出来，有关部门随时可以调看你的一切行动，无从遁形，这就是科学技术发展所带来的进步。</p>\n<p>一阵失落和失望袭上阿瓦登的心头，他合上眼睛，把鼠标甩开，重重地向后靠去。原来他天真地以为BBS论坛也许会少许宽松一些，现在看来甚至比现实中更叫人窒息，他感觉到自己好象陷入沉滞的电子淤泥之中，艰于呼吸。“FUXKYOU, YOUSONOFBITCH”再一次涌现到他的唇边，强烈无比，要化好大的力气才控制住。</p>\n<p>忽然，他又想到了那个神秘的title，那究竟是什么意思？那五张光盘里或许隐藏着什么？也许这跟title有关系？</p>\n<p>阿瓦登想到这里，把目光重新转向电脑屏幕，仔细去看网络安全部发来的五封信的title部分。五张光盘各隐藏着一个字母，凑到一起就是title，那么按照这个方式，那五封EMAIL的title凑到一起，就变成了一句话：去用户学习论坛。”</p>\n<p>阿瓦登记得刚才他确实看到其中一个论坛的名字叫做“用户学习”，于是他抱着姑且一试的心态连接到这个论坛去。他希望这并不是一个巧合。</p>\n<p>用户论坛是一个事务性论坛，里面是一些关于BBS用户资料的投诉帖和管理帖，斑竹的是一个叫19387465的人；发帖的人和回帖的人数量都很少，里面冷冷清清的。阿瓦登打开帖子列表，按照刚才的规律去搜寻每一个帖子的标题，并把它们综合到一起，很快他就得到了另外一句话：</p>\n<p>“每周日辛普森大楼5层B户。”</p>\n<p>又是一个谜团，阿瓦登想。但这却坚定了他的信心，这其中必定隐藏着玄机。光盘、EMAIL和BBS论坛，连续三次都可以通过首词组组合的方式得到暗示，绝非巧合。</p>\n<p>究竟是什么人会在有关部门的官方文件中隐藏着这样的信息呢？每周日在效率大楼5层B户又会发生什么事情呢？</p>\n<p>阿瓦登终于找到了久违的兴奋感，未知事物的新奇刺激着他麻木很久的神经。更重要的是，这种在有关部门正式文件中玩弄的文字技巧，叫他有一种喘息的快感，仿佛一个密不透风的铁面罩上几个透进空气的小孔。</p>\n<p>营造健康的互联网络。</p>\n<p>FUXKYOU, YOUSONOFBITCH。</p>\n<p>阿瓦登盯着屏幕上的桌面背景，用嘴唇比出了那句粗话的口型，并且比出了中指。</p>\n<p>在接下来的日子里，阿瓦登一直处于一种潜藏的兴奋状态，就象是一个摆出无辜表情嘴里却藏着糖果的小孩子，在大人转身过去之后露出狡黠的笑容，尽情享受心中藏有秘密的乐趣。</p>\n<p>日子一天一天地过去，健康词汇在列表里又少了几个，窗外的空气又浑浊了几分，这已经是生活的常态。阿瓦登自己已经开始拿网络健康词汇表当日历来用，划掉三个词就证明过了三天，划掉七个就证明过了一周，于是周日终于到来了。</p>\n<p>阿瓦登抵达辛普森大楼的时间是中午，暗示的句子里并没有指明时间，阿瓦登认为在中午前往应该是比较可以接受的。当穿着深绿军大衣，耳朵上别着旁观者的阿瓦登来到辛普森大楼的入口时，他的心开始忐忑不安地跳跃起来。他在上一星期设想了无数种可能发生的情景，而现在这个谜底就要揭晓了。无论在周日效率大楼会发生什么，也不会比现在的生活更加糟糕，阿瓦登心里想，所以他并不怎么害怕。</p>\n<p>他走进大楼内部，发现这里的人也很少，空旷的走廊里只听到他哒哒的脚步声与回音。一部老电梯里贴着“缔造美好网络家园”的广告，以及一个充满了正义感的男性头像海报，背景是星条旗，他在纸里用右手食指指向观看者，头上写着一行字是“公民，请使用健康词汇。”阿瓦登厌恶地转过身去，发现另外一侧也贴着同样的海报，避无可避。</p>\n<p>值得庆幸的是五楼很快就到了，电梯的门一开，对面的门上就赫然挂着B户的牌子。门是掉了漆的绿色，门框上还点了几滴墨水，一部简易的电子门铃挂在右上角。</p>\n<p>阿瓦登深深吸了一口气，伸手去按电纽。</p>\n<p>电铃响起，很快屋子里传来脚步声。阿瓦登觉得这脚步的韵律很熟悉，似乎是在哪里见到过。门“咔拉”一声被打开一半，一名年轻女子一手握着把手，把身体前倾望着阿瓦登，警惕地说：</p>\n<p>“你，找谁？”</p>\n<p>女子疑惑地问道。阿瓦登一下子就认出了她的声音，就是那个在网络部BBS论坛科柜台后面的女性。她很漂亮，穿着墨绿色绒线衫，头上梳着这时代流行的短发，皮肤特别的白，只有嘴唇能看到一些血色。</p>\n<p>看着女子的眼神，一瞬间阿瓦登不知道该说什么好，犹豫了一下，他举起右手，轻声回答说：“title。”</p>\n<p>阿瓦登不知道这句话能否奏效，也不知道自己是否真的找对了地方，但这是他唯一能想到的回答了。他紧张地望着那女子，假如那女子忽然报警，那么自己就会被抓起来仔细审问为什么无缘无故跑到陌生人家里。“肆意游走罪”只比“使用敏感词汇罪”轻那么一点。</p>\n<p>女子听到他这么说，脸上还是毫无表情，只是把头幅度很轻微地点了一下，右手谨慎地做了一个“进来”的手势。阿瓦登刚要张口，那女子严厉地瞪了他一眼，吓的他把话又吞回去了，乖乖地跟着她进了屋子。</p>\n<p>一进屋子，女子首先做的就是把门关好，然后拉起来一层铅灰色的门帘挡在门口。阿瓦登不安地眨着眼睛，趁她拉门帘的时候环顾四周。这屋子是标准的两室一厅，在厅里摆放的是一套双人沙发与一个茶几，茶几上居然还有几束红紫色的塑料花。靠墙是电脑桌和电脑，墙上挂着普通的白色日历，但被主人用粉红色的纸套了边，看起来颇为温馨。一盏粗笨的日光灯从天花板上垂下来，上面象是恶作剧一样挂了几缕绿色的电线，象是垂下藤蔓的葡萄架。阿瓦登注意到厅口的鞋架上有四双鞋，尺码不同，说明今天的客人并不只他一个。</p>\n<p>阿瓦登正踌躇不安，忽然女子从背后拍了拍他的肩膀，示意他朝里面走。于是两个人穿过客厅另一侧的短小回廊来到其中一间卧室。卧室上挂着同样质地的铅灰色帘子，女子伸手举起帘布，推开了门。阿瓦登迈了进去，首先映入眼帘的是三名面带微笑的人类，以及一间用真正的鲜花装点的房间。屋子里有很多旧日记忆里的古老物品，比如一幅印象派的油画、一尊乌干达木雕，甚至还有一个银烛台，唯独没有电脑。</p>\n<p>他正在迟疑，女子也进了屋子。她谨慎地拉好门帘关上门，将耳边的旁观者取下，回过身来对阿瓦登用曼妙的声音说道：</p>\n<p>“欢迎加入说话会！”</p>\n<p>“说话会？”</p>\n<p>出于习惯，阿瓦登并没有把这三个字说出口，因为他不确定是否“健康”，只是用眼神表示自己的疑惑。</p>\n<p>“在这里你可以随便说话，这个该死的东西不会起作用的。”女子把自己的旁观者晃了晃，那个小东西象死掉了一样，对女子句子里两个敏感词汇“随便”和“该死”充耳不闻。</p>\n<p>阿瓦登一下子想到上星期在公共汽车站前碰到的男子，如果他摘下旁观者，会不会也会落到同一境地呢？那女子见他犹豫不决，指了指门口的铅灰色门帘说：“放心好了，这里是可以屏蔽掉旁观者信号的，不会有人觉察到。”</p>\n<p>“你们，是什么，人，这，是，哪里？”</p>\n<p>阿瓦登一边摘下耳朵上的旁观者，一边小声说道，语调还是改不了那种有关部门规定的说话方式。</p>\n<p>“这里是说话会，是一个完全自由场所，在这里你可以畅所欲言，请不要拘束。”</p>\n<p>另外一个人起身对他说道，这是一名瘦高的中年男子，鼻梁上的眼镜非常地厚。</p>\n<p>阿瓦登嗫嚅着，却找不到发音的焦点，在四个人的注视下显得窘迫不堪，脸都要红起来。女子同情地看了他一眼：“可怜的家伙，不用太紧张，每一个刚到这里的人都是这样。慢慢就习惯了。”</p>\n<p>她把手搭到阿瓦登的肩上：“我们其实见过的，当然，我见过你，而你没见过我。”她一边说，一边将自己的头发解下来，原来她留的是一头齐肩的乌黑长发，头发披下来的一瞬间阿瓦登觉得她真的很美。</p>\n<p>“我……我记得你，记得你的声音。”阿瓦登终于说出了一句完整的话，虽然不够流畅。</p>\n<p>“是吗，那可太好了。”女子笑起来，拉着他的手，让他坐到沙发上，递给他一杯水。阿瓦登注意到这是一个款式古老的茶杯，上面还刻着花纹，杯子里的水带着浓郁的香气，阿瓦登尝了一点，那种甜丝丝的味道对喝惯纯净水的舌头来说刺激格外地大。让他觉得浑身一下子被注进了许多活力。</p>\n<p>“弄到这个可不容易，我们也不是每周都能喝到。”女子坐到他身边，两只乌黑的眼睛注视着他，“你是怎么知道这个集会的？”</p>\n<p>阿瓦登把发现光盘暗示的过程说了一遍，其他四个人都赞许地点了点头。“果然是个聪明人，脑筋还没被陈腐的空气腐蚀掉。”一个三十多岁的胖子称赞道，他的嗓门大的要命。那个戴眼镜的中年人把两只手交叉在一起，表示赞同。</p>\n<p>“这正是天生的说话会成员，聪明、敏锐，而且不甘屈从于沉默。”</p>\n<p>“那么。”胖子提议，“先让我们鼓掌欢迎说话会的新成员吧。”</p>\n<p>于是四个人鼓起掌来，小小的屋子里响起一片掌声。阿瓦登羞涩地举起杯子做回应，他还不太习惯这样的场面。等到掌声稍息，他抬起头怯生生地问道：</p>\n<p>“可以问个问题吗？说话会到底是什么？”</p>\n<p>带他进屋的女子伸出食指，在他鼻子前两公分的地方比了一比，解释道：</p>\n<p>“说话会，就是可以畅所欲言的集会。在这里你不必顾忌什么，说出任何你想说的东西。这里没有敏感词汇，也没有健康互联网络。这里是绝对自由的空间，你可以尽情释放你的灵魂，舒展你的身体，没有任何禁锢与束缚。”说着说着，她的声音变的高亢、奔放，里面饱含了许多早已经被屏蔽掉的词汇，阿瓦登不曾听到这样流畅连贯的话语很久了。</p>\n<p>“我们的宗旨就是，说话，就这么简单。”中年人扶扶眼镜，补充道。</p>\n<p>“可是，要说些什么呢？”阿瓦登又问道。</p>\n<p>“任何事情，你心里想的任何事情都可以说出来。”中年人露出宽和的笑容，“尤其是那些被美国政府限制的思想。”</p>\n<p>这可真是一个大胆的集会啊，这分明就是犯罪，阿瓦登心想，但他发觉自己却被这种犯罪慢慢地吸引住了。</p>\n<p>“当然，有件事我们会事先说明。说话会是危险的，每一个成员都冒着被有关部门拘捕的风险。联邦执法人员也随时可能破门而入，以非法集会以及非法使用不合法词语的名义把我们抓起来。你现在有权拒绝加入，并且离开。”</p>\n<p>阿瓦登听到女子的警告，心里一度犹豫起来。但一想到此刻离去的话，那么又要开始持续那种窒息的泥沼生活，他就难以压抑自己的烦闷。阿瓦登第一次发现，原来“说话”对他来说是一个致命的诱惑，他先前并不知道自己原来是如此地渴望着说话。</p>\n<p>“我不会离开的，我要加入你们，说话。”</p>\n<p>“那太好了。唔，那么不妨就从自我介绍开始吧。”女子高兴地说，同时站起身来，把右手搭到胸前，“从我开始。我的名字叫阿尔特弥斯，至于网络编号和身份证号码，让他们见鬼去吧！谁会去管那个！我有我自己的名字，我不是数字。”</p>\n<p>她的话让所有人包括阿瓦登都笑了起来。接着她继续说道：“不过，这其实只是一个假名，这是希腊神话里的女神。”</p>\n<p>“假名？”</p>\n<p>“是的，和我户籍本上的名字是不同的。”</p>\n<p>“可是，为什么？”</p>\n<p>“你不会对自己在档案里的名字厌倦吗？我想起一个自己喜欢的名字，哪怕只有一次机会也好，自己想叫什么就叫什么。在这个说话会里的每一个人都有一个自己喜欢的名字，我们彼此拿这个称呼。”</p>\n<p>阿瓦登若有所思地点点头，他很理解阿尔特弥斯的想法。事实上当他在使用网络论坛的时候，也希望能够自己取一个称心如意的名字，而不是被分配一个用户名。</p>\n<p>通过介绍，阿瓦登了解到阿尔特弥斯是网络部BBS论坛管理科的职员，今年23岁，未婚，最讨厌蟑螂和蜘蛛，喜欢缝纫与园艺，屋子里的花就是她偷偷从城市边缘摘回来的。</p>\n<p>接下来是那名中年人，他自我介绍说名字叫兰斯洛特，41岁，是城市电厂的一名工程师；兰斯洛特这名字出自英国的亚瑟王传说，是一名忠贞的骑士。他有自己的老婆和两个孩子，一男一女；男孩三岁，女孩四岁，他们最喜欢吃的就是柠檬味道的水果糖。说到这里，兰斯洛特说希望下次聚会能把他们也带了，孩子们正是学说话的时候，他想教给他们真正的说话。</p>\n<p>那个三十多岁的胖子是网络部的一名网管，叫瓦格纳。这个身份让阿瓦登吃惊不已，他的印象里网管都是些绷着脸全无表情的冷漠生物，但眼前的瓦格纳脸圆滚滚的，油光锃亮，嘴边两条翘起的小胡子神气十足。他喜欢的是雪茄和歌剧，利用网管的特权这两样东西都不难弄到。</p>\n<p>“这个能屏蔽掉信号的门帘就是他弄的。”阿尔特弥斯补充说，瓦格纳冲她做了个“乐意为您效劳”的手势，然后点燃了雪茄，把它放到嘴里，很快屋子里就笼罩起一片稀薄的烟雾。</p>\n<p>说话会的第四名成员是一位穿着黑色制服的女性，今年刚满三十。她的名字是杜拉丝，城市日报（那个时代的报纸已经全部都数字化了）的编辑，她比阿尔特弥斯还瘦，颧骨高高耸起，眼窝身陷，两片薄薄的嘴唇即使在最说话的时候也很少分开，看不到牙齿。爱好是饲养狗和猫，尽管她并没有养。</p>\n<p>“那么，到你了。”阿尔特弥斯对阿瓦登说。阿瓦登想了想，结结巴巴地把自己的情况说了一遍，当谈到自己的爱好时候，他一时间居然想不到自己喜好什么，似乎什么都没有，在那之前他甚至从来没想过。</p>\n<p>“那，你最想做的是什么事呢？”阿尔特弥斯把手再一次放在他肩上，诱导着问道。</p>\n<p>“真的什么都可以？”</p>\n<p>“什么都可以，在这里没有任何限制。”</p>\n<p>阿瓦登觉得自己终于找到机会了，他咳了一声，抓抓头，脱口而出一句响亮的叫喊：“FUXKYOU, YOUSONOFBITCH！”</p>\n<p>在一瞬间，在座的四个人都被他这句话震惊了。瓦格纳率先反应了过来，他先叼住雪茄，用力鼓掌，然后用右手把雪茄取下来，张嘴大声地赞叹道：“真棒，痛快，这简直是最完美的入会誓词。”</p>\n<p>“我宁可听十遍这样的脏话，也不想再去碰那个乏味的电子女声。”兰斯洛特也是一脸陶醉，毫不掩饰自己对电子女声的厌恶。而阿尔特弥斯和杜拉丝全都咯咯地笑起来，杜拉丝发现自己的笑容幅度大了一点，不好意思地把嘴掩住。阿瓦登觉得他们与其说是觉得新奇，不如说是在享受这句脏话所带来的对体制的蔑视与挑战。</p>\n<p>“那你叫希望自己叫什么名字呢？” 阿尔特弥斯歪着头问。</p>\n<p>“唔……王二。“ 阿瓦登沉吟了一下，回答说。这是一个中式的名字，他以前有一个中国人朋友，喜欢讲故事，故事里的主角名字总是叫王二。</p>\n<p>屋子里的气氛现在完全融洽了，大家都开始谈些比较自然的话题，每个人都摆出了最舒服的姿势，阿尔特弥斯不时拿起茶壶来为大家续水。阿瓦登紧张的心情逐渐放松下来，他感觉到自己的脑子前所未有地轻松。</p>\n<p>“你知道的。”阿尔特弥斯又给他倒了一杯甜水，“我们一直想把说话会保持在一定规模，平日是没有办法畅所欲言的，我们需要空间。麻烦的是，我们没办法公开征集会员，又不可能直接通过物理接触去寻找，那风险太大。于是兰斯洛特就设计了一套暗示系统，只有发现这些暗示的人才能知道本会的存在。”</p>\n<p>“这套系统考虑到的还不止是安全问题。”兰斯洛特把自己的眼镜摘下来仔细擦拭了一下，得意地说，“这其实也是一个会员资格验证。说话会所吸纳的成员，必须有智慧，有头脑，内心渴望激情，并且对自由有着渴望。”</p>\n<p>瓦格纳用两根指头夹着雪茄，在事先准备好的烟灰缸里弹了弹烟灰，大声说道：“据我的经验，申请BBS论坛服务的人，大多数都是为了怀旧，或者说渴望一些新鲜的东西，这样的人往往都怀有激情，认为BBS论坛也许能给他们一些与现实不一样的东西——当然，事实上并非如此，美国政府对BBS论坛的管理甚至严厉过电子邮件——这暗示着他们心里渴望解脱束缚。因此我们将暗示隐藏在申请BBS论坛的光盘之中，只有申请人才有机会接触到这些暗示。而只有那些有智慧、观察敏锐的人才会发觉到这些暗示的存在，并顺利解读出来，找到这里。”</p>\n<p>“归根到底，说话会也不过是一群渴望自由说话的秘密小团体罢了。”兰斯洛特笑道。</p>\n<p>“你是第二个找到说话会的人，第一个是杜拉丝小姐。”</p>\n<p>阿尔特弥斯告诉阿瓦登。阿瓦登敬佩地看了杜拉丝一眼，后者淡淡地回答道：“这没什么，这是我的工作，我的工作就是摆弄文字。”</p>\n<p>阿瓦登想到上一周在公共汽车站碰到的那个疯狂男子，于是把这件事讲给其他成员听。听完之后，兰斯洛特摇了摇头，从嘴唇里滑出一声叹息：</p>\n<p>“这样的事情我也是见过的，我的一个同事就是如此。所以说话会的存在是必要的，这是缓解压力的阀门。长时间的敏感词汇限制会让人都疯掉的，因为他们既无法思考又没办法表达。”</p>\n<p>“这正是美国政府有关部门所希望看到的，这样只有傻瓜能够存活下来，一个全是傻瓜的社会是稳定的。” 瓦格纳费力地把自己肥胖的身躯挪了一下位置，轻蔑地说。</p>\n<p>“你也是有关部门的一分子，瓦格纳先生。”阿尔特弥斯一边往茶杯里续了些热水，一边抬头轻声说道。</p>\n<p>“阿尔特弥斯小姐，我只是一个能比普通人多使用几个敏感词汇的普通人而已。”</p>\n<p>大家都笑了起来。阿瓦登从来没有见过这么多的人说这么多的话，这是前所未有的奇妙经验。他惊讶地发现自己居然很快就融进了这个小圈子里，隔阂与陌生感很快就消失了；同时消失的还有胸闷与头晕等习惯性的毛病。</p>\n<p>很快话题就从说话会本身扩展到了更加宽泛随意的话题，阿尔特弥斯唱支歌，兰斯洛特说了几个笑话，杜拉丝则给大家讲了美国南部诸州的风土人情；瓦格纳甚至还唱了一段歌剧，虽然阿瓦登一个字也听不懂，但他一点也不吝惜掌声。在这个城市的某一个被屏蔽掉的角落里，五个不甘沉默的人正在享受着在这个时代视为奢侈品的事情——说话。</p>\n<p>“王二，你可曾看过《1984》？”</p>\n<p>阿尔特弥斯忽然问道，她就靠着阿瓦登坐下，阿瓦登摇摇头，反问道：“这是网络编号的一段么？”</p>\n<p>“这是一本书的名字。”</p>\n<p>“书？”阿瓦登听到这个名词，头摇的更大了。这是个古老的名词，在这个电脑技术非常发达的时代，网络可以承载一切信息，任何人都可以在网上图书馆查到电子版；因此有关部门认为实体书籍变成了一种没有必要存在的浪费，实体书也就逐渐消亡了。瓦格纳对此的评论是：“有关部门喜欢电子书籍的心情是可以理解的，电子书籍的话，只需要FIND和REPLACE两个命令就可以消灭掉全部不健康词汇，替一本书消毒；而实体书籍的校对与修订却是件旷日持久的工作。”</p>\n<p>“这是一本伟大的书，是旧世界哲人们对我们这个时代的预言。”阿尔特弥斯认真地说。“它很早以前就洞察到了肉的束缚与解脱，灵的束缚与解脱，这是说话会的基石。”</p>\n<p>阿瓦登不无惊奇地发现他的网络编号开头恰好是这这本书名字：19842015。</p>\n<p>“那么，该怎么样才能看到呢？”阿瓦登盯着阿尔特弥斯乌黑色的眼睛问。</p>\n<p>“我们也无法找到纸质版，网络图书馆不可能存在这样的书。”兰斯洛特摇摇头，然后重新露出笑容，左手向着杜拉丝摆了个请的姿势，“但我们的杜拉丝小姐应该为她的记忆力而自豪，她在很早已经有幸阅读过这两本书，并且能够记得里面的大部分文字。”</p>\n<p>“太好了，然后她写下来了，对吗？”</p>\n<p>“那太危险，这时代持有实体书是个大罪过，也容易让说话会暴露。我们只是在每次聚会的时候请杜拉丝小姐为我们背诵。既然是说话会，那么把这两个故事讲出来不是更名符其实吗？”</p>\n<p>大家都安静下来，杜拉丝站起来走到屋子中央，其他四个人坐在旁边看着她。阿瓦登不经意地把手搂在阿尔特弥斯肩上，后者微微朝这边靠过来，女性头发的幽香“咝咝”地划过他的鼻子，让他的心里一阵荡漾。屋子里非常暖和，他分不清这是花香还是阿尔特弥斯的味道。</p>\n<p>杜拉丝的声音并不高，不过却很清晰有力；她的记忆力确实惊人，不仅记得情节，包括一些细节和句子都可以复述下来。杜拉丝讲到了朱丽亚假装摔倒，然后偷偷递给温斯顿一张写着“我爱你”的纸条，绘声绘色，这让听众们都听的入神了，阿尔特弥斯听的尤其认真，以至于都没有注意到阿瓦登一直注视着她。</p>\n<p>“1984的作者预见到了专制的进步，却没有预见到技术的进步。”瓦格纳在杜拉丝停下来喝水的时候发表自己的评论，阿瓦登觉得他与外貌不太相称，是个很有洞察力的技术官僚。</p>\n<p>“在大洋国人们还可以靠传递纸条来偷偷表达自己的想法，但是现在不一样了。美国政府有关部门把我们全赶到了网上，而在网络技术发达的今天，我们即使想发一条短信都会被系统或者网管看的一清二楚，无从遁形。现实里呢，还有旁观者在。”瓦格纳在腿上敲了敲雪茄根部，“一句话，技术是中性的，但技术的进步会让自在的世界更自在，集权的世界更加集权。”</p>\n<p>“这句话说的很有哲学家的味道哟。”阿尔特弥斯冲瓦格纳挤了挤眼睛，从抽屉里取来一把饼干和曲奇散发给大家。</p>\n<p>“就好象同样是0和1，有的人就能写出工具软件，有人却拿那个编出恶性病毒？”</p>\n<p>阿瓦登想到一个类似的比喻，瓦格纳听了以后满意地打了个响指。</p>\n<p>“很不错的比喻，王二，就是如此，真不愧是程序员。”</p>\n<p>谈话持续了不知道有多久，杜拉斯看了一眼墙壁上的挂钟，连忙提醒谈兴正浓的四个人时间快到了。说话会不能持续很长时间，旁听者被屏蔽的越久，暴露的危险就越大。</p>\n<p>“那么好吧，我们就抓紧最后半个小时来完成今天的活动。”</p>\n<p>阿尔特弥斯一边说着，一边将桌子上的空杯子收走。兰斯洛特和瓦格纳也都站起身来，活动一下已经有些酸疼的肩膀和腰，只有杜拉丝坐在位子上没有动。</p>\n<p>“活动？还有什么活动？”</p>\n<p>阿瓦登奇怪地问道，说话会除了说话还有其他活动？</p>\n<p>“唔，对啊，我们还有其他活动。”阿尔特弥斯撩起额前的长发，对他妩媚一笑：“我们还会和对方完全交流。”</p>\n<p>“完全交流？”</p>\n<p>“就是intercourse”</p>\n<p>“………………”阿瓦登一下子变的脸色苍白，呼吸急促起来，仿佛胃里被灌进去零下三十度的寒风，他几乎不相信自己的耳朵。</p>\n<p>“说话会有说话的自由，也有选择与谁上床的自由。”阿尔特弥斯毫不羞涩地说，“我们互相谈话，然后选择合适的人做爱，就象我们选择我们喜欢的词汇说话一样。”</p>\n<p>兰斯洛特看阿瓦登很窘迫，走过去拍拍他的肩膀，慢慢地说：“当然，我们不会强迫任何人，这完全是在自愿的基础上。今天我还要早点回去照顾小孩，你们人数正好合适。”</p>\n<p>阿瓦登的脸色涨红，热的仿佛夏季的电脑CPU，他甚至不敢多看阿尔特弥斯一眼。他憧憬过女性很长时间，但如此接近还是第一次。</p>\n<p>还要回家去照顾小孩子的兰斯洛特向大家道别后就先行离去了，阿尔特弥斯将房间留给瓦格纳与杜拉丝，然后带着惶恐不安的阿瓦登来到了另外一间房间。这间显然是阿尔特弥斯的卧室，屋子里很简单，但却收拾的十分干净，在床上枕头旁还摆着一个手制的布娃娃，床单和窗帘都是粉红色的。</p>\n<p>最初的是由阿尔特弥斯主动开始的，丝毫没心理准备的阿瓦登只是被动地任她摆布。经过了几轮挑逗，阿瓦登才逐渐放开，任由潜藏在自己心内的原始欲望奔流出来，那种期待听到圆润女声的青春憧憬本来只是苦闷生活的意淫，而在今天它加倍实现了。很快这种憧憬与他在现实中被压抑的郁闷合流，转化成了猛烈的冲动，让他一次又一次与阿尔特弥斯融为一体。阿瓦登不知道这种冲动和他想大声说出“FUXKYOU, YOUSONOFBITCH”冲动有什么不同，不过现在不是考虑这个的时候，他现在脑子里想的只有尽情地、全无束缚地让自己释放激情，完全没有任何束缚。</p>\n<p>强烈的刺激一波波地冲击着兴奋中枢，最终一阵快感浪潮在狂暴洋面扬起头来，达到了一个极高的顶端。阿瓦登在那一瞬间感觉到了前所未有的自由，那种轻盈无比的自由，以及因自由而生的快乐与疲惫。浑身是汗的他喘息着倒在了阿尔特弥斯身上，一阵舒畅的倦意如潮水般淹没了他的身体……</p>\n<p>……当他醒来的时候，发现阿尔特弥斯躺在自己身边，赤裸的身体好象一尊白玉雕像，睡姿恬美静谧。他侧过身子去，慵懒地打了个呵欠，然后阿尔特弥斯睁开了眼睛。</p>\n<p>“很舒服，对不对？”她问道。</p>\n<p>“是啊……”阿瓦登不知道该说什么好，他顿了顿，犹豫地说道：“你以前和兰斯洛特、瓦格纳他们也……呃，我是说，象刚才那样子过吗？”</p>\n<p>“是的。”阿尔特弥斯温柔地回答，她半支起胳膊，长发从肩膀披到了胸口。她的大方坦白反而让阿瓦登有些不知所措。屋子里出现了一段时间的沉默，然后阿尔特弥斯忽然开口问道：</p>\n<p>“还记得今天杜拉丝讲的那段故事吗？女主角偷偷递给男主角写着“我爱你”的纸条。”</p>\n<p>“唔，还记得。”阿瓦登回答，很高兴终于能从那个拙劣的话题摆脱出来了。</p>\n<p>“在有关部门的健康互联网络词汇列表里，没有爱这个字呢。在我们这个时代，我爱你也是一个敏感词汇，被屏蔽掉了。”阿尔特弥斯的眼神里似乎是感慨，又象是失落。</p>\n<p>“我爱你。”阿瓦登不禁脱口而出，他知道在这间屋子里可以说出任何自己想说的话，不必顾忌。</p>\n<p>“谢谢你。”</p>\n<p>阿尔特弥斯听到之后只是笑了笑，起身穿上衣服，催促阿瓦登时间差不多了。阿瓦登有些失望，因为她没有预期反应的热烈，仿佛他刚才说的只是有些无关紧要的东西。</p>\n<p>这时候杜拉丝和瓦格纳已经离开了，屋子里只剩他们两个人。阿尔特弥斯把他送到门口，将旁观者交给他，然后叮嘱他说：“记得在外面绝对不要提及说话会的任何事情或者任何人，我们在说话会以外的地方是完全不认识的。”</p>\n<p>“我记住了。”阿瓦登回答，然后转身要走。</p>\n<p>“王二。”</p>\n<p>阿尔特弥斯忽然叫道，阿瓦登连忙转身，还没等他反应过来，两片柔软温暖的嘴唇忽然贴到了他的双唇，然后是一个细切的声音在耳边响起：“谢谢你，我爱你。”</p>\n<p>阿瓦登觉得眼睛有些湿润，他戴上旁观者，推开门，重新步入到那一片令人窒息的世界中去，但他此时已与来时的心境大不相同。</p>\n<p>此后阿瓦登的精神面貌明显有了改善。他谨慎地享受着这种秘密集会的乐趣，并且乐在其中。每一周或者两周，他们五个人都会在周日秘密地举行说话会的活动，聊天，唱歌或者听杜拉丝讲1984的故事。阿瓦登同阿尔特弥斯又“完全交流”了几次，偶尔他也会跟杜拉丝“交流”。他有了两个身份，一个是现实中和网上的阿瓦登，编号19842015，还有一个是说话会里的王二。他很享受这个名字，觉得这就是自己另外的一个人生。</p>\n<p>有一次集会，他们谈到了敏感词汇的问题。阿瓦登记得很早的时候——他对这方面的记忆有点模糊——有关部门给出的是一份敏感词汇列表，由网站的内部管理人员秘密参考使用，他对如何演变成现在的局面大惑不解。那一天瓦格纳带了一瓶葡萄酒，兴致很高，于是索性给他们讲了讲“屏蔽”的进化史，身为网管的他经常可以接触到这些资料。</p>\n<p>在最开始美国政府只是单纯地屏蔽掉敏感词汇，但很快他们就发现这样的措施根本没有用处。很多人会采取在词组中夹杂符号或者数字的方式来绕开系统检查；于是有关部门不得不将这些近似敏感词汇也一一屏蔽掉。然而众所周知，数字与符号之间的组合方式是近乎无限的，只要你有想象力，就完全可以组合出一个新的词组而且不失掉他的原意。比如说“politic”这个词，就有“politi/c”、“政polit/ic”、“pol/itic”等近乎无限种表达方式。</p>\n<p>当有关部门意识到这个问题时，他们采取了新的策略。既然无法辨识词组，那么就用单词屏蔽。这一举措在一开始是奏效的，违规交谈的人显著减少，但很快人们就发现可以用同音字或者谐音的方式来继续表达自己的危险思想。即使有关部门封掉全部敏感词汇的同音字，也无济于事，思想活跃的美国人充分发挥了自己的想象力，使用隐喻，借代、类比、引申及其他修辞方法，或者将一个敏感词用数个不敏感的字来代替。人类的思维方式要比电脑开阔许多。电脑屏蔽掉一条路，他们还会有更多的路可以选择。</p>\n<p>这一场水面以下的角力看起来似乎是美国大众要取得胜利。这时候，一个具有逆向思维精神的人出现了。他的身份不明。有人说他是有关部门的主管；也有人说他是因过度使用敏感词汇而被捕的危险人士。无论他是谁，总之整个局面被扭转过来。他向有关部门建议，不再告诉大众禁止说什么，而是规定他们只能说什么，用什么方式去说。有关部门很快就心领神会，制订了新的规章制度：取消了敏感词汇列表，取而代之的是互联网络健康语言列表，并把这举措推广到了日常生活中的语言屏蔽系统中去。</p>\n<p>这一次，大众终于处于下风。以往他们与有关部门尽情地在网络与现实中捉着迷藏，而现在他们却被有关部门扼住了咽喉。这样一来，有关部门可以有效率地掌握住言论，因为整个语言的框架都被彻底控制了。在有限的空间内，大众几乎是无计可施。</p>\n<p>尽管如此，大众还是不屈不挠地将这场战争——或者说游戏——继续下去，他们挑选健康词汇列表中的合法字眼来表达不合法的意思：两个连续的“稳定”意思就是“反对”，“稳定”加“繁荣昌盛”则暗示“屏蔽”。美国政府不得不对这一动向保持着警惕，并日复一日地将更多的词汇从健康词汇列表里删掉，禁止大众使用。</p>\n<p>“当然，这场战争会持续下去的。只要世界上还存在着两个不同的字或者词组，那么就可以继续自由交流——你知道莫尔斯电码吧？”</p>\n<p>瓦格纳说到这里，拿起茶杯一饮而尽，满意地打了一个嗝。</p>\n<p>“可是，这场战争的代价就是语言的失落。表达能力会越来越贫乏，越来越淡而无味，人们会越来越倾向于沉默，这对有关部门反而是好事。”兰斯洛特摆出一副忧虑的表情，有节奏地用指关节敲击着桌面，“这样一来，岂不就等于是大众的自由意识将语言推向死亡的边缘？真讽刺啊。按照这个趋势，有关部门是不会败的，他们会笑到最后。”</p>\n<p>“不，不，笑这种情感他们是不会了解的。”瓦格纳淡淡地回答。</p>\n<p>“我倒是觉得，美国是一直处于恐惧的情感之中呢，生怕人们掌握了太多的词汇，表达出太多的思想，变的难以掌握。”阿尔特弥斯说完摆出一副她在上班期间冷若冰霜的呆板脸孔，学着僵硬的腔调喊了一句：“营造健康的网络环境，美国万岁！”</p>\n<p>杜拉丝、兰斯洛特与瓦格纳都哈哈大笑，唯一没笑的是王二（阿瓦登）。他对于兰斯洛特刚才的那句话始终耿耿于怀：大众与有关部门的对抗，其最终结局就是语言的消亡。那么他们现在这个小小的说话会，也只不过是在一列开向悬崖的列车里关上窗帘，享受坠毁前最后的宁静罢了。</p>\n<p>不过他没有说出口，因为这太煞风景了。阿瓦登不希望破坏说话会的气氛，这对他很重要。</p>\n<p>从说话会回到家里，阿瓦登躺在行军床上，双手枕着脑袋，陷入了沉思。自从加入说话会以后，他变的比以前更容易陷入思考。有时候他想的是这个社会、这个互联网络或者这座城市中存在的荒谬性；有时候他想的是自己的生活；还有时候他想的是阿尔特弥斯。他不知道是不是在一个压抑的世界里，人的情感会变的格外强烈，他现在陷入对阿尔特弥斯的迷恋无法自拔。阿瓦登一直很羡慕杜拉丝讲的《1984》里面的温斯顿，他和朱利亚有一间两个人独处的小屋，一个只属于他们两个人的小世界。</p>\n<p>他在与阿尔特弥斯“完全交流”的时候曾经吐露过自己的心声，阿尔特弥斯没有直接回答，而是表示两个人的关系无法再比说话会更近一步——维持现在的状态就已经是个人行为的极限，有关部门可不会一直打瞌睡。“我们只能把感情生活压缩在每周一次的说话会活动里，这已经很奢侈了。”她对他说，同时温柔地抚摩他的胸膛。“只有在说话会里，我们才是阿尔特弥斯和王二。而在其他时间里，你是19842015，而我是19387465。”</p>\n<p>对此，阿瓦登只能发出一声轻轻的叹息，确实他不该奢求更多。</p>\n<p>除了感情，发生变化的还有互联网络。自从加入说话会以后，阿瓦登逐渐发现互联网表面下潜藏的一些东西。正如瓦格纳在一次活动的时候指出，普罗大众与有关部门的战争从未结束，总会有思想和言论从严厉管制的缝隙中流泻出来。阿瓦登发现，在完全公式化的EMAIL与网络论坛中其实隐藏着不少耐人寻味的细节，就好象那个title一样，存在着各式各样的密码与隐藏寓意。这些东西出自不同人的手里，样式和破译方式都不同，阿瓦登不知道那些密码背后隐藏的是怎样的内容。不过有一点可以确知的是，说话会并不是唯一的一个地下集会，瓦格纳说的对，始终还是有人在试图用“健康”词汇表达“不健康”思想。</p>\n<p>讽刺的是，给阿瓦登感触最深的，是有关部门的管制。以往他只是模糊地感觉到自己被绑缚起来，现在他能清晰地看清这种束缚与压抑的脉络，以及加诸在自己身上的各种手段。在小小说话会中享受到的自在让他更加深刻地感受到在宽阔现实中的不自在。</p>\n<p>“FUXKYOU, YOUSONOFBITCH！”</p>\n<p>每一次的聚会，三位男士都会轻蔑地一起高喊这一句粗话。他们清楚这不会给有关部门带来什么不良影响，不过这确实很痛快。</p>\n<p>这一周，阿瓦登特别地忙碌，他的同事因为不明原因而被屏蔽掉了，这样一来整个项目就全压在了他一个人身上。这项目是为有关部分设计一种软件，用来控制大功率主动式“旁观者”的能源分配控制。软件很复杂，他不得不每天在电脑前工作十几个小时，只有在身体实在支撑不住的时候才停下来随便吃一点东西，喝一口纯净水，困了就躺在旁边的行军床上睡上一觉，爬起来继续工作。屋子里满是浑浊的烟味与袜子脏衣服的酸臭味，阿瓦登就在这种环境下蓬头垢面地敲着键盘，并不时揉揉满布血丝的眼睛。</p>\n<p>偏偏在这个时候屋子里的暖气坏掉了。洋灰色的暖气片从昨天开始就变的冰凉，不再有热水流动。阿瓦登检查了一下，发现并不是管道问题，而且邻居们也碰到同样的事，看来是供热系统出了问题。这一变故的正面影响是稍微淡化了屋子内的酸臭味，负面影响是整个屋子变的有如冰窖一样。紧闭的窗户和门能挡住寒风，却挡不住寒冷，低温让本来就寒酸的房间更笼罩上一层霜气。无论是那把木椅还是行军床都象是冷酷的冰雕，屋子里唯一还有些热气的就只剩下电脑。阿瓦登不得不披上所有的御寒衣物，蜷缩在床上，把电脑的散热口对准自己。</p>\n<p>有关部门宣布“供热”和“暖气”暂时也被列入敏感词汇，于是阿瓦登没办法写信向供热部门询问，只好静待，除了用来敲键盘的指头以外，尽量保持全身一动不动，以节约热量。在停止供暖后的第四天，暖气片里终于传来“哗啦哗啦”的声音，带着热气的水开始流动，屋子里恢复了温暖，“供热”和“暖气”又可以恢复使用了。于是EMAIL与网络论坛上全都是“庆祝有关部门恢复供应暖气，急人民之所急”的帖子，EMAIL新闻组里也全是类似主题。</p>\n<p>不过这对阿瓦登来说太晚了，他生了病，感冒，而且是重感冒。他面色苍白，全身软弱无力，头疼的象是被一枚达姆弹射入头部，只能躺在床上等医生。医生来到他家里，给他做了两三次点滴，喂了一些叫不上名字的药片，叫他静养。这一场病足足持续了数天，他不得不放弃参加这一星期的说话会，身体状况实在太差了，阿瓦登甚至怀疑自己搞不好会因此而死掉。</p>\n<p>阿瓦登躺在床上，心里懊悔不已，说话会是他唯一的乐趣，现在他却没办法参加。他把头蒙在被子里胡思乱想，瓦格纳这一次会带什么特别的东西来呢？兰斯洛特有没有把两个孩子也领过来？还有阿尔特弥斯，他没参加的话，她会和谁“完全交流”呢？瓦格纳还是兰斯洛特？他还想到了杜拉丝，上一次的聚会里，杜拉丝讲到了温斯顿在秘密幽会的屋子里对朱丽亚说“我们已经死了”，朱丽亚附和着说“我们已经死了”，这时候第三个声音说道“你们已经死了。”</p>\n<p>杜拉丝就讲到这里，就停住了。阿瓦登急切地想知道接下来发生了什么，第三个声音是谁，是党吗？温斯顿和朱丽亚是否会被捕，他们会有什么样的下场？不光是他，阿尔特弥斯也很希望知道后续情节的发展，不过她并没有去追问杜拉丝。</p>\n<p>“让这成为一个悬疑，这样接下来的一周我们的生活都会在期待的乐趣中度过。”她对阿瓦登说，然后两个人继续沉溺于intercourse的快乐。</p>\n<p>“也许他们都会死。”阿尔特弥斯在交流结束后，看着天花板说。</p>\n<p>“也许那只是奥布林的声音，他去探望他们。”阿瓦登安慰她道，但是他的心里也不确定。</p>\n<p>阿瓦登的病持续了十天，然后他终于痊愈了。他痊愈后的第一件事就是从床上爬起来，然后去看墙上的日历：这一天恰好是星期日，说话会活动的日子。阿瓦登已经缺席了一周，这已经令他如饥似渴，甚至做梦都在和他们一起喋喋不休地说着话——所幸他并没有说梦话的习惯，所以24小时工作的旁观者并没发出任何警报。</p>\n<p>阿瓦登简单地洗了一下脸，用一把有些生锈的剃刀沾着肥皂仔细地刮掉脸上粗硬的胡须，然后咕噜咕噜地刷了刷牙齿，用手和毛巾沾着热水将自己蓬起的乱发压下去。因为生病，有关部门发了一些补贴给他，其中包括两块羊角面包、两瓶姜汁啤酒和一份精制砂糖。他将这些东西都用塑料布仔细包好，揣到宽大的军大衣里，打算带到说话会上去与大家分享。</p>\n<p>今天的天气和往常一样地冷，阿瓦登把自己裹在大衣里，登上前往效率大楼的公共汽车。一路上车厢里的广播重复着“营造健康的互联网络”以及一些优秀网络用户的先进事迹；车厢前面的电子屏幕不断滚动显示着最新的健康词汇列表，一个旁观者自车顶垂下来睥睨着车内的每一个表情呆滞的人。阿瓦登坐在最后一排，望着窗外不断向后移动的建筑物与枯黄的树木发呆。</p>\n<p>车子很快就到达了辛普森大楼附近的车站，阿瓦登下了车，把手放到怀里摸了摸塑料布包着的食物，朝着大楼走去。他在半路无意中抬起头，忽然一阵冰冷的寒流刺入他的胸腔，迫使他停住了脚步。</p>\n<p>有什么地方不对劲！</p>\n<p>他看到了效率大楼的第五层阿尔特弥斯家的窗户发生了一些奇怪的变化。以前阿尔特弥斯家面向大街的窗户总是挂着粉红色的窗帘，而现在窗帘则被扯到了两边，窗户大开，用肉眼可以勉强看到窗玻璃和屋子里雪白的墙壁。假如今天有说话会的话，阿尔特弥斯绝对不会把有屏蔽效果的窗帘打开。而且打开窗户这件事也绝不寻常，在这个城市里的室外空气十分浑浊，几乎不会有人会去开窗换气。</p>\n<p>也就是说，今天并没有说话集会召开，而是发生了另外一些事情。阿瓦登望着那窗户，心情开始变的有些慌乱，他把手从兜里掏出来，叼起一支香烟，把身体靠在一根电线杆旁故做镇静，以免被行人怀疑。究竟说话会发生了什么，为什么这一周停办了呢？要知道，只要还有复数的成员能够出席，说话会就会一直办下去，难道说瓦格纳、兰斯洛特、杜拉丝和阿尔特弥斯同时无法出席？这种概率实在太小了。阿瓦登一边这样想着，一边向四周不安地张望。忽然他看到了一样东西，一个念头霎时占据了他的全部心灵，让他几乎眩晕过去。</p>\n<p>“说话会本周不会有了，以后也不会有了。”阿瓦登嘴唇默默地蠕动着，面如死灰。</p>\n<p>他看到在街道内侧一处不起眼的地方隐藏着一个类似雷达天线的东西，其造型很象是两个背部贴在一起的大碗。阿瓦登心里清楚这是什么东西：这正是他负责软件设计的大功率主动式“旁观者”，这造型他很熟悉。这装置可以主动发射电波去探测人们的声音，并检查其中是否存在敏感词汇。</p>\n<p>这样的装置居然就安放在阿尔特弥斯家附近，那么就等于说话会完全暴露在了有关部门的监控之下。主动式旁观者的强大刺探电波会轻易刺穿她家中的铅质窗帘，把所有成员的话原封不动地传到有关部门耳朵里。</p>\n<p>这是一个划时代的发明，这一技术的突破意味着有关部门可以不再被动地等待警报，可以主动出击去刺探人们在任何时间任何地点说的任何话语。阿瓦登可以想象接下来会发生什么，阿尔特弥斯他们的每一句话都被有关部门记录下来，会有机器统计出到底有多少违禁词汇被他们使用过；然后联邦警察会冲进她的屋子，将正在聚会的成员们都带走，只留下搜查过后空荡荡的房间和窗户。</p>\n<p>阿瓦登想到这里，心如刀绞，他一点也不为自己的侥幸逃脱而感到幸运。他的胃袋翻腾起来，一种恶心的感觉从胃里直接升到嘴边，让他想吐，却又不能吐——因为“呕”也是个敏感词汇；大病初愈的孱弱身躯无法承受这种打击，象害了风寒一样颤抖起来，几乎站立不住。</p>\n<p>他不敢继续朝前走去，仓皇地转过身去，登上另外一辆公共汽车，把嘴闭的更紧了。等阿瓦登回到自己家楼下，看到楼房附近另外一架新的主动式旁观者正在兴建中，漆黑的天线在半空舒展开来，仿佛一面巨大的蜘蛛网。看来有关部门已经着手在整个纽约市部署这种新兴高科技产品。</p>\n<p>他不敢驻足观看，低着头从那巨大装置旁边走过，一路不停地走回家，然后把自己的脸紧紧地压在枕头里，却不敢哭出声音来，连一句“FUXKYOU, YOUSONOFBITCH”都不能说。</p>\n<p>从那以后，阿瓦登的生活回到了普通状态——就是说和原来一样沉滞、压抑、欠缺激情，健康向上，缺乏低级趣味。兰斯洛特说过：“战争的结果就是，大众的自由意识会将语言推向死亡的边缘”，现在看来，他的预言是很准确的：说话会的覆灭，导致“说话”、“歌剧”、“完全”、“交流”几个词先后被剔除出了健康词汇列表，成为敏感词汇。</p>\n<p>另外，虽然阿拉伯数字还能用，但“1984”这一个数字组合也被屏蔽掉了，这让包括阿瓦登在内的程序员在编写程序时不得不谨慎地检查数字是否违规，这额外增加了很多工作量，让他更加疲惫。</p>\n<p>阿瓦登不是没有担心过，也许在某一天的深夜，他就会忽然接到一封EMAIL，让他留在家里不要动，不要试图在网络做任何动作；接着电话会响起，电子女声会把这一要求重复再重复，直到警察打开他家的大门，把他带去未知的地方，那里有未知的命运等待着他。《1984》后面的情节发展阿瓦登始终不知道，唯一知道的杜拉丝已经彻底失踪了，所以温斯顿和朱丽亚的结局始终是个谜；就好象兰斯洛特、瓦格纳、杜拉丝和阿尔特弥斯的结局一样，也不从得知。其实这两件事对于阿瓦登来说没什么本质性的区别，所以它们也可以看做是同一个谜。</p>\n<p>其实他最担心的，是阿尔特弥斯。每次想到这个名字，阿瓦登就难以抑制心中的郁闷。她究竟会怎么样，彻底被屏蔽掉吗？如果是那样，那么她在这世界上遗留下来的唯一痕迹，就是一个程序员记忆里的假名而已了。</p>\n<p>说话会消失后三个星期，仍旧风平浪静，没有任何人来找过阿瓦登，他也没收到过任何类似内容的EMAIL，阿瓦登一直在想，也许是他们没有吐露出自己的下落，也可能是因为他们根本不知道——他们认识的只是一个叫王二的程序员。这个城市里有数以千计的程序员，而王二是个假名。</p>\n<p>因此，生活一如既往地平静。不，确切地说，还是有一点不同的，那就是互联网络健康词汇列表：那上面的词组消失的速度比以前要快的快，每小时每分钟都有词与单字飞快地在名单上消失，阿瓦登不得不花上大量时间去更新列表，以跟紧当前形势。</p>\n<p>与词汇列表更新速度相对的，EMAIL和网络论坛上的东西越来越乏味。因为人们不得不用极有限的词去表达广泛的意思，大家都变得寡言少语。就连那些秘密的暗语和联系方式也少了许多；整个网络就象是前些天阿瓦登家里出了问题的暖气片一样：虽然名义上是给人带来温暖的东西，但却变的冰冷、僵硬，让人如坠冰窟。</p>\n<p>这一天，阿瓦登从电脑前抬起头来，他看了看窗外迷茫的灰色天空，胸口一阵抽搐，不由得痛苦地咳了一声。他拿起塑料杯，将杯子里的纯净水一饮而尽，杯子丢进同样是塑料质地的垃圾桶里，发出钝钝的撞击声，他觉得自己的脑子也是一团垃圾，举起手敲了敲，果然发出同样钝钝的撞击声。</p>\n<p>然后他拿起大衣，戴上墨绿色的护目镜，走出门去。阿瓦登没带便携式的旁观者，那东西已经不需要了，城市里到处都是主动式的旁观者，随时监听是否有违禁词汇的存在。整个纽约现在就象是互联网络一样，被有关部门营造成十分健康。</p>\n<p>阿瓦登这一次外出是有正当理由的，他决定去取消网络论坛服务，这服务已经用不着了，因为无论EMAIL，新闻组，BBS论坛还是其他什么现在全部都变成了一样的东西。</p>\n<p>从日历来说现在应该是春季，但外面还是很冷，高大的灰色建筑矗立在平地上，仿佛绝对零度下的石林。大团大团的风裹着黄沙与废气穿行其间，风沙无处不在，让人置身其中而难以摆脱。阿瓦登把手揣进兜里，脖子缩进领口，畏缩着向网络部的大楼走去。</p>\n<p>忽然，他停下了脚步，惊讶地站在原地无法动弹。他看到阿尔特弥斯正站在前面的路灯下，穿着黑色的制服。可是她的变化有多么大啊，面容象是老了十岁，满脸都是衰老的皱纹，年轻的活力荡然无存；她听到脚步声，转过头来，两个乌黑的大眼睛显得异常空洞，目光越过阿瓦登延伸到远方，没有一个明晰的焦点。</p>\n<p>阿瓦登万万没有想到会在这个时间这个地点碰到她，这让他已经沉寂已久的心灵泛起了几点火花，可惜他迟钝的神经已经无法表达出“激动”这一个简单的情感了。两个人互相对视了一阵，他终于木然走到她身边，张了张嘴唇，想对她说些什么。但是他掏出今天新发布的健康词汇列表，发现上面是一片空白——终于连最后一个词组也被有关部门屏蔽了。</p>\n<p>于是阿瓦登只好保持着沉默，默默地与面无表情的她擦肩而过，继续向前走去。他的身影逐渐融入同样安静的灰色人群之中，整个城市都显得寂静极了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"作者-马伯庸\"><a href=\"#作者-马伯庸\" class=\"headerlink\" title=\"作者:马伯庸\"></a>作者:马伯庸</h2><hr>\n<p>And in the naked light I saw ten thousand people, maybe more.</p>\n<p>People talking without speaking, people hearing without listening.</p>\n<p>People writing songs that voices never shared, no one dared disturb the</p>\n<p>sound of silence.</p>\n<p>— The sound of silence</p>\n<p>美利坚合众国，2015年，纽约。</p>\n<p>当电话响起来的时候，阿瓦登正趴在电脑前面睡觉。电话铃声十分急促，尖锐，每一次振动都让他的耳膜难受好久。他揉了揉干涩的眼睛，十分不情愿地爬起来，觉得脑子沉滞无比。</p>\n<p>其实他的脑子一直就很沉滞，这种感受既然是生理上的也是心理上的。他身处的房间很狭窄，空气不很好，唯一的两扇窗户紧闭着——即使打开窗户也没用，外面的空气更加浑浊。这是一间大约只有三十平米的小屋子，屋子墙壁上泛黄的墙纸有好几处开始剥落，天花板上的水渍渗成奇怪的形状；一张老式的军绿色行军床摆在墙角，床腿用白漆写着编号；紧挨着行军床的是一张三合板制成的电脑桌，桌上摆着一台浅白色的电脑，机箱后面五颜六色的电线纠缠在一起，把它们自己打成一个古怪的死结，杂乱无章地蔓延到地板与墙角，仿佛常春藤一样。</p>\n<p>阿瓦登走到电话前，慢慢坐到地板上，目光呆滞地盯着电话，手却没有动。这部古怪的东西是老式的按键式电话，大概是十几年前的款式，这是阿瓦登有一次去费城出差时偶尔在一家杂货店里买到的；他拿回家以后稍微修理了一下，发现居然还能用，这让他当时小小地兴奋了一阵子。</p>\n<p>电话继续在响着，已经是第七声。阿瓦登意识到自己不得不去接听了。于是他弓下腰，用两个指头拈起电话，慢慢把电话放到耳边。</p>\n<p>“请说出你的网络编号？”话筒里传来的声音并不急噪，事实上它也不带其他任何的感情色彩，因为这是电脑合成的人工智能语音系统。</p>\n<p>“19842015”</p>\n<p>阿瓦登熟练地报出一连串数字，同时开始觉得胸有些更闷了。说实话他并不喜欢这些空洞的电子声音，他有时候想，假如打过电话来的是一位声音圆润的女性该多好。阿瓦登知道这是一种不切实际的幻想，不过这幻想会让他的身体得到几秒钟的舒缓。</p>\n<p>话筒里的声音仍旧在继续着。</p>\n<p>“关于你在十月四日提交的网络论坛用户注册申请已经被受理，经有关部门审查后确认资格无误，请在三日内持本人身份证件、网络使用许可证及相关文件前往办理登记手续，并领取用户名及密码。”</p>\n<p>“知道了，谢谢。”</p>\n<p>阿瓦登谨慎地选择词语，同时努力挤出一副满足的微笑，好象话筒的另一侧有人在看着自己一样。放下电话，阿瓦登先是茫然地盯着它看了大约两分钟，然后站起来活动一下手腕，坐回到电脑前面，缓慢地推动了一下鼠标。</p>\n<p>电脑屏幕“啪”地一声亮了起来，显示出一个登陆的界面，还有一行英文：“请输入你的网络编号和姓名。”阿瓦登将那八位数字敲进去，又输入了自己的名字，点击“登陆”。随即机箱的指示灯开始频繁地闪动起来，整个机器发出细微的噪音。</p>\n<p>每一个使用互联网的人都有一个网络编号，没有这个编号，就无法连接进互联网络。每一个编号都是独一无二的，每个人只有一个；这是使用者在网上的唯一代号，既不能修改，也不能取消。这些编号分别对应着使用者身份证上的名字，因此19842015就是阿瓦登，阿瓦登就是19842015。阿瓦登知道有些记忆力不好的人会把自己的编号印在衣服的后面，那看起来颇为滑稽，也容易引发一些不正当的联想。</p>\n<p>有关部门说使用网络实名制是为了规范网络秩序方便管理，杜绝因匿名使用网络而产生的一系列重大问题和混乱。阿瓦登不太清楚那一系列重大问题会是什么，他自己没试过用假名上网，他所认识的任何人里也不曾有人尝试过——事实上，从技术角度来说，他根本没办法匿名登陆互联网络，没有编号就没有权限上网，而编号则连接着他的详细档案，换句话说，没人能在网上隐藏自己。有关部门把这一切都考虑的很周详。</p>\n<p>“有关部门”，这是一个语意模糊、但却有着权威与震慑力的词组。它既是泛指，又是确指，其所涵盖的意义相当广泛。有时候，它指的是为阿瓦登颁发网络编号的美国联邦网络管理委员会；有时候它是将最新通告及法规发到阿瓦登EMAIL信箱的服务器；还有时候它是监察网络的FBI特属网络调查科；总之一句话，有关部门是无处不在，无职不司的，总会在适当的时候出现，给予指导、监控或者警告，无论你是在网上还是网下。</p>\n<p>简直就象是老大哥一样无微不至。</p>\n<p>电脑仍旧在持续运转着，阿瓦登知道这得花上一阵子。这台电脑是有关部门配发给他的，具体型号和配置阿瓦登并不清楚，机箱是被焊死的，无法打开。于是他拿出一小瓶清凉油，用右手小拇指的指甲挑出一点抹在自己的太阳穴，然后从脚下堆积如山的杂物里翻出一个塑料杯子，从桌子旁的饮水机里接了半杯蒸馏水，就着一片镇痛片一饮而尽。蒸馏水穿过喉咙和狭长的食道滑进胃里，空泛的味道让他有些恶心。</p>\n<p>音响里忽然传来一阵美国国歌的旋律，阿瓦登放下杯子，重新把目光投到电脑上去。这是已经连入互联网络的标志。屏幕上首先跳出来的是有关部门的通告，白底黑色四号字，里面陈述了使用互联网的意义以及最新的规章制度。</p>\n<p>“缔造健康的互联网络，美国万岁！”</p>\n<p>音响里传来激昂的男性呼声，阿瓦登不大情愿地跟着大声念了一遍。“缔造健康的互联网络，美国万岁！”</p>\n<p>这段呼号持续了三十秒钟，然后消失，取而代之的是写着“缔造健康的互联网络”标语的桌面背景。另外一个窗口慢慢浮上开，上面开列出几个选项：工作、娱乐、电子信箱和BBS论坛。其中BBS选项呈现灰色，说明这项功能还没有开通。</p>\n<p>整个操作系统简洁明了，这台电脑的浏览器没有地址输入栏，只是在收藏夹里有几个无法修改的的网站地址。理由很简单，这些网站都是健康向上的，假如其他站点和这些网站一样，那么只保留这些网站就够了；假如其他站点与这些网站不一样，那么就是不健康的，是低级趣味，不能保留。这是有关部门精心设计的，是为了公民的精神健康着想，生怕他们受到不良信息的侵染。</p>\n<p>阿瓦登首先点开了“工作”，一连串和他工作相关的站点列表与相关软件在电脑上显示出来。阿瓦登是一名程序员，他每天的工作就是根据上级的要求编写程序。这份工作很无聊，不过可以保证他有稳定的收入。他不知道自己的源代码会被用到哪里去，上级也从来没有跟他说过。</p>\n<p>他打算继续昨天的工作，但是很快发现自己很难继续下去。阿瓦登觉得今天的情绪比以前要烦躁，无法集中精神，大脑还是很呆滞，胸口仍旧发闷。他试图娱乐自己，但是他发现“娱乐”选项里只有纸牌与挖地雷，根据有关部门的说法，这是两个健康的游戏，没有暴力，没有色情，不会让人产生犯罪冲动，也不涉及任何政治色彩。据说美国境外也是有互联网络站点的，不过无法连上去，因为本国的互联网络自成格局，独立自主，普通人无法直接连接到国外——IE浏览器没有地址栏，就算知道地址也没有用处。</p>\n<p>“您有一封新邮件。”</p>\n<p>系统忽然跳出来提示，阿瓦登终于找到了可以暂停工作的理由，他很快移动鼠标到电子信箱的选项上，点开，很快一个新的界面出现了。</p>\n<p>“To: 19842015</p>\n<p>From：10045687</p>\n<p>Subject: 模块、已经、完成、当前、项目、是否、开始。”</p>\n<p>阿瓦登微微地叹了一口气，觉得有些失望。每一次他收到新的电子邮件，都希望能够有一次新鲜的刺激来撞击他日益迟钝的脑神经，每一次他都失望了。其实他早就知道这一点，只不过他觉得保持期待至少能够享受到几秒钟快感。就好象他期待着打电话过来的是一个圆润温柔的女性声音一样。不给自己一些渺茫的希望，阿瓦登觉得自己迟早会疯掉的。</p>\n<p>这封信很简短，但是内容很充实。19842015是阿瓦登的网络编号，而10045687则是他的一位同事的编号，这种工作性质的信件通常都以编号相称。信的内容是几个不连续的英文单词，这是有关部门所提倡的一种电子邮件书写方式，因为这样可以方便软件检查信件中是否含有敏感词汇。</p>\n<p>阿瓦登打开回信的页面，同时另开了一个窗口，打开一份名字叫做“网络健康语言词汇列表”的TXT文档。这是有关部门要求每一位网民所必须使用的词汇。当他们书写电子邮件或者使用论坛服务的时候，都得从这个词汇列表中寻找适合的名词、形容词、副词或者动词来表达自己想要说的话。一旦过滤软件发现网民使用了列表以外的词，那么这个词就会被自动屏蔽，取而代之的是“请使用健康语言”。</p>\n<p>“屏蔽”是个专有名词，被屏蔽的词将不允许再度被使用，无论是在书信里还是口头都不允许。讽刺的是，“屏蔽”一词本身也是被屏蔽的词汇之一。</p>\n<p>这个列表是经常更新的，每一次更新都会有几个词在列表上消失，于是阿瓦登不得不费劲脑汁寻找其他词语来代替那个被屏蔽掉的词语或者单字。比如在以前，“运动”这个词是可以使用的，但后来有关部门宣布这也是一个敏感词汇，阿瓦登只好使用“质点位移”来表达相同的意思。</p>\n<p>他对照着这份列表，很快就完成了一封文字风格与来信差不多的EMAIL——健康词汇表迫使人们不得不用最短的话来表达最多意思，而且要尽量减少不必要的修辞，所以这些信件就好象是那杯蒸馏水一样，淡而无味，阿瓦登有时候想，他早晚也会和这些水和信一样腐烂，因为这些信是他写的，水是他喝的。</p>\n<p>接下来阿瓦登启动检查软件先扫了一遍，确保自己没无意中加入什么敏感词汇。等这一切都完成后，他按下了发送键，邮件被送出去了。</p>\n<p>阿瓦登没有留下备份，因为他的机器里没有硬盘，也没有软驱、光驱或者USB接口。这个时代宽带技术已经得到了很大发展，应用软件可以集中在统一的一个服务器中，个人用户调用时的速度丝毫不会觉得迟滞。因此个人不需要硬盘，也不需要本地存储，他们在自己电脑里写的每一份文档、每一段程序、甚至每一个动作都会被自动传送到有关部门的公共服务器中，这样便于管理。换句话说，阿瓦登所使用的电脑，仅仅具备输入和输出两种功能。</p>\n<p>完成了这封信后，阿瓦登再度陷入了软绵绵的焦躁状态，这是一个连续工作了三天的程序员的正常反应。这种情绪很危险，因为它让人效率低下精神低迷，而且没有渠道发泄。“疲劳”、“烦躁”以及其他负面词汇都属于危险词汇，如果他写信给别人抱怨的话，那么对方收到的将会是一封写满“请使用健康语言”的EMAIL。</p>\n<p>这就是阿瓦登每天的生活，今天比昨天更糟糕，但应该比明天还稍微好一点。事实上这个叙述也很模糊，因为阿瓦登自己并不清楚什么是“好一点”，什么是“更糟糕”。“好”与“坏”是两个变量，而他的生活就是一个定量，只有一个常数叫“压抑”。</p>\n<p>阿瓦登推开鼠标，把脑袋向后仰去，长长地呼了一口气。（至少“呼”这个字还没有被屏蔽）这是空虚的表现，他想哼些歌，但却又不记得什么，转而吹了几下口哨，但那听起来与一只生了肺结核的狗差不多，只得做罢。有关部门象幽灵一样充斥在整个房间里，让他无法舒展自己的烦闷。就好象一个人在泥沼里挣扎，刚一张口就被灌入泥水，甚至无法大声呼救。</p>\n<p>他的头不安分地转了几转，眼神偶尔撇到了摆在地板上的老式电话机，他忽然想到还必须要去有关部门申请自己的BBS论坛浏览许可证。于是他关掉“工作”和“电子邮件”窗口，退出了网络登陆。阿瓦登在做这些事的时候毫不犹豫，他很高兴能够暂时摆脱互联网络，在那上面他只是一串枯燥的数字和一些“健康词汇”的综合体。</p>\n<p>阿瓦登找出一件破旧的黑色呢子大衣，那件大衣继承自他的父亲，袖口和领子已经磨损的很严重，个别地方有灰色的棉花露出来，但还是很耐寒。他把大衣套到身上，戴上一副墨绿色的护镜，用过滤口罩捂住嘴。他犹豫了一下，拿起“旁听者”别在耳朵上，然后走出家门去。</p>\n<p>纽约的街上人很少，在这个时代，互联网的普及率相当地高，大部分事务在网上就可以解决，有关部门并不提倡太多的户外活动。太多的户外活动会导致和其他人发生物理接触，而两个人发生物理接触后会发生什么事则很难控制。</p>\n<p>“旁听者”就是为了防止这种事而发生的，这是一种便携式的语言过滤器，当携带者说出敏感词汇的时候，它就会自动发出警报。每一位公民外出前都必须要携带这个装置，以便随时检讨自己的言语。当人们意识到旁听者存在的时候，他们往往会选择沉默，至少阿瓦登是如此。有关部门正逐步试图让网络和现实生活统一起来，一起“健康”。</p>\n<p>这时候正是11月份，寒风凛冽，天空漂浮着令人压抑的铅灰阴云，街道两旁的电线杆仿佛落光了叶子的枯树，行人们都把自己包裹在黑色或灰色的大衣里面，浓缩成空旷街道上的一个个黑点飞快移动着。一层若有若无的烟雾将整个纽约笼罩起来，不用过滤口罩在这样的空气里呼吸将会是一件很有挑战的事情。</p>\n<p>距离上一次离开家门已经有两个月了吧，阿瓦登站在公共汽车站的站牌下，不无感慨地想，周围的一切看起来很陌生，泛黄，而且干燥。那是上一次沙尘暴的痕迹。不过沙尘暴这个词也已经被屏蔽了，因此阿瓦登的脑海里只是闪过那么一下，思想很快就转移到别的事情上去了。</p>\n<p>站在阿瓦登旁边的是一个穿着蓝色制服的高个男人。他先是狐疑地看了阿瓦登一眼，看到后者沉默地沉在黑色大衣里，他的两只脚交替移动，缓慢地凑了过去，装做漫不经心对阿瓦登说：</p>\n<p>“烟，有吗？”</p>\n<p>男人说，每一个字都说的很清晰，而且词与词之间间隔也足够长。这“旁听者”还没有精密到能够完全捕捉到每一个人语速和语调的程度，因此有关部门要求每一位公民都要保持这种说话风格，以方面检测发言人是否使用了规定以外的词汇。</p>\n<p>阿瓦登转过头去，看了他一眼，舔舔自己干裂的嘴唇，回答说：</p>\n<p>“没有。”</p>\n<p>男人很失望，又一次不甘心地张开嘴。</p>\n<p>“酒，有吗？”</p>\n<p>“没有。”</p>\n<p>阿瓦登又重复了一次这个词，他也已经很久没有收到烟和酒了，也许是缺货的关系吧，这是常有的事。不过有一点很奇怪，“旁观者”这一次却没有发出警报。以阿瓦登的经验，以往一旦烟、酒或者其他生活必需品发生短缺现象，这个词就会暂时成为被屏蔽掉的敏感词汇，直到恢复供给为止。</p>\n<p>这个男人看起来很疲惫，红肿的眼睛是这个时代的人们普遍的特征，这是长时间挂在网上的关系。他的头发蓬乱，嘴边还留着青色的胡子碴，制服下的衬衣领口散发着刺鼻的霉味。能看的出，他也很久不曾到街上来了。</p>\n<p>阿瓦登这时候才注意到，他的耳朵上空荡荡的，没有挂着那个银灰色的小玩意“旁听者”，这实在是一件严重的事情。不携带“旁听者”外出，就意味着语言不会再被过滤，一些不健康的思想和言论就有可能孳生，因此有关部门相当严厉地规定公民上街必须携带旁听者。而这个男人的耳朵旁却什么也没有。阿瓦登暗暗吃惊，一时间不知道是该去提醒还是装做没看到。他暗自想，也许向有关部门举报会更好。</p>\n<p>这时候那个男人又朝他靠近了一点，眼神变的饥渴起来。阿瓦登心里一阵紧张，下意识地向后退去。这难道是一次抢劫？还是说他是个压抑太久的同性恋者？那个男人忽然扯住他的袖子，阿瓦登狼狈地挣扎却没有挣开。出乎他的意料，那个男人并没有进一步的动作，而是大吼一声，用一种阿瓦登已经不太习惯了的飞快语速向他倾泻起话语来。阿瓦登被这突如其来的爆发弄的莫名其妙，不知所措。</p>\n<p>“我只是想和你多几句话，就几句，我很久没有说过话了。我叫斯多葛，今年三十二岁，记得，是三十二岁。我一直梦想有一套在湖边的房子，有一副钓鱼竿和一条小艇；我讨厌网络，打倒网管；我妻子是个可恶的网络中毒者，她只会用枯燥乏味的话叫我的网络编号；这个城市就是一个大疯人院，里面大疯子管着小疯子，并且把所有没疯的人变的和他们同样疯狂；敏感词汇都去他X的，老*受够了……”</p>\n<p>男人的话仿佛一瓶摇晃了很久然后突然打开的罐装碳酸饮料，迅猛，爆裂，而且全无条理。阿瓦登惊愕地望着这个突然狂躁起来的家伙，却不知道如何应对；更可怕的是，他发现自己居然对他产生了一点同情，那种“同病相怜”式的同情。男人的话这时候已经从唠叨变成了纯粹谩骂，全部都是最直抒胸臆的那种。阿瓦登已经有五、六年不曾说过这些脏话，最后一次听到这些也是四年前。有关部门认为这都有碍精神文明，于是全部都屏蔽掉了。</p>\n<p>而现在这个男人就在公众场合对着他大吵大嚷，似乎要将被屏蔽掉的敏感词汇一口气全倒出来。他的目光和手势并不针对任何人，甚至也不针对阿瓦登，更象是在一个人在自说自话。阿瓦登的耳膜似乎不习惯这种分贝，开始有些隐隐做痛，他捂着耳朵，拿不定主意是干脆逃掉还是……这时候，远处街道出现两辆警车，一路闪着警灯直直冲着这座公共汽车站而来。</p>\n<p>警车开到站台旁时，男人仍旧在痛骂着。警车门开了，涌出了五、六名全副武装的联邦警察。他们扑过去将那个男子按在地上，用橡皮棍痛打。男人两条腿挣扎着，嘴里的语速更快了，骂出来的话也越来越难听。其中一名警察掏出一卷胶带，“嚓”地一声扯下一条向男人的嘴贴去。男人在嘴被胶带封住之前，突然提高嗓门，冲着警察痛快无比地喊了一句：“FUXKYOU, YOUSONOFBITCH！”阿瓦登看到他的表情由疯狂变成享受，面带着微笑，似乎完全陶醉在那一句话所带来的无上快感和解脱感中。</p>\n<p>联邦警察们七手八脚地将男人送进了警车，这时才有一名警察走到了阿瓦登的跟前。</p>\n<p>“他，是，你朋友？”</p>\n<p>“我，不，认识。”</p>\n<p>警察盯了他一阵，取下他耳朵上的“旁观者”查看记录，发现他并没有提及任何敏感词汇，于是重新给他戴回去，警告他说那名男子说的全部都是极度反动的词汇，要求他立刻忘掉，然后转身押着那男子离开了。</p>\n<p>阿瓦登松了一口气，其实刚才他有一瞬间涌现出一种冲动，也想在这空旷的街道上大喊一声“FUXKYOU, YOUSONOFBITCH”那一定很爽快，他心里想，因为那男子说出这句话的时候表情很享受。不过他也知道，这也是妄想的一种，“旁观者”紧帖在耳朵上的冰凉感觉时刻提醒着他。</p>\n<p>街上很快就恢复了冷清，十分钟后，一辆公共汽车慢吞吞地开进站里，锈迹斑斑的车门哗啦一声打开，一个电子女声响彻整个空荡荡的车厢：“请乘客注意文明用语，严格按照健康词汇发言。”</p>\n<p>阿瓦登把自己缩进大衣，压抑住自己异样的兴奋，决定继续保持沉默下去。</p>\n<p>大约过了一个小时，公共汽车到了目的地。从破碎的车窗玻璃里吹进来的寒风让阿瓦登脸上挂起一层暗灰色的霜气，面部被风中的沙砾和煤渣刮的生疼。他听到电子女声报出了站名，就站起身来，象一条狗一样抖抖身上的土，走下车去。</p>\n<p>车站对面就是阿瓦登要去的地方，那是有关部门负责受理BBS论坛申请的网络部。这是一间五层的大楼，正方形，全水泥混凝土结构，外表泛灰。如果没有那几个窗户的话，那么它的外貌将与水泥块没有任何区别：生硬、死气沉沉，让蚊子和蝙蝠都退避三舍。</p>\n<p>BBS论坛是一种奇特的东西，从理论上来讲它完全多余，BBS的功能完全可以由EMAIL新闻组来取代，后者更容易管理和审查。而且申请使用BBS论坛资格不是件容易的事，申请人必须要通过十几道手续和漫长的审查才能有浏览资格，浏览资格三个月才会被允许在指定论坛发布帖子，至于自己开设BBS则几乎是不可能。</p>\n<p>因此真正对BBS有兴趣的人少之有少。阿瓦登当初之所以决定申请BBS论坛资格，纯粹是因为他那种模糊但却顽强的怀旧心态，就好象他从杂货店里买的那部老式电话一样。他也不知道自己为什么会自找麻烦，也许是为了给生活带来些刺激，还是说为了强调自己和曾经旧时代的那么一点点联系，也许两者兼有之。</p>\n<p>阿瓦登恍惚记得在他小的时候，互联网与现在并不太一样。并不是指技术上的不同，而是一种人文的感觉。他希望能通过使用BBS论坛回想起一些当年的事情。</p>\n<p>阿瓦登走进网络部的大楼，大楼里和外面一样寒冷，而且阴森。走廊里没有路灯，蓝白色调的两侧墙壁贴满了千篇一律的网络规章条文与标语，冰冷的空气呼吸到肺里，让阿瓦登一阵痉挛。只有走廊尽头的小门缝隙里流泻出一丝光亮，小门的上面挂着一块牌子，上面写的是“网络部BBS论坛科。”</p>\n<p>一走进这间屋子，阿瓦登立刻感觉到一阵温洋洋的热气。屋子里的暖气（或者是空调）开的很大，让阿瓦登冻麻了的手脚和脸麻酥酥的，有些发痒，他不禁想伸出手去挠挠。</p>\n<p>“公民，请您站在原地不要动。”</p>\n<p>一个电子女声忽然从天花板上的喇叭里传来，阿瓦登触电似地把手放下，恭敬地站在原地不同。他借这个机会观察了一下这间屋子。这屋子准确来说应该是一个狭长形的大厅，一道拔地而起的大理石柜台象长城一样将房间割裂成两部分，柜台上还装着一排银白色的圆柱形栅栏，直接连到天花板。屋子里没有任何装饰，没有观赏植物，没有塑料鲜花，甚至没有长椅和饮水机。</p>\n<p>“缔造健康的互联网络，美国万岁。”</p>\n<p>阿瓦登跟着声音重复了一遍。</p>\n<p>“请前往八号窗口。”</p>\n<p>电子女声的语调很流畅，因为这是电脑制作出来的，因此没有敏感词汇的限制。</p>\n<p>阿瓦登转头看到在自己右手边的不远处，大理石柜台上的液晶屏幕显示着八号的字样。他走过去，拼命抬起头，因为柜台实在太高了，他只能勉强看到边缘，而无法看到柜台另一侧的情形。不过他能听到，一个人走到柜台对面，坐下去，并有翻动纸张与敲击键盘的声音。</p>\n<p>“请把文件放入盒子里。”</p>\n<p>柜台上的喇叭传来命令。出乎意料，这一次在喇叭里的声音却变了。虽然同样冷漠枯燥，但阿瓦登还是能分辨出它与电子女声的不同——这是一个真正的女性的声音。他惊讶地抬头望去，却什么都看不到，柜台太高了。</p>\n<p>“请把文件放入盒子里。”</p>\n<p>声音又重复了一次，语气里带着一丝烦躁，似乎对阿瓦登的迟钝很不满。</p>\n<p>“是的，这是真正的女声……”阿瓦登想，电子女声永远是彬彬有礼不带任何感情色彩的。他把相关的电子身份证、网络许可证、网络编号和敏感词汇犯罪记录等一系列个人资料卡片一起放进柜台外的一个小金属盒子里，然后把盒子插进柜台上一个同样大小的凹槽中，关好门。很快他听到“唰”的一声，他猜测这也许是对面的人——也许是个女人——将盒子抽出去的声音。</p>\n<p>“你申请BBS服务的目的是什么？”</p>\n<p>喇叭后的女声浸满了纯粹事务性的腔调。</p>\n<p>“为了、提高、互联网络、工作效率、为了、缔造、一个、健康、的网络、环境，更好地、为、祖国、做出、贡献。”</p>\n<p>阿瓦登一字一句地回答，心里知道这只是一道官方程序，只需要按标准回答就可以。</p>\n<p>对面很快就陷入沉默，大约过了十五分钟，喇叭再度响起。</p>\n<p>“最后手续确认，你已经获得BBS论坛浏览权。”</p>\n<p>“谢谢。”</p>\n<p>“砰”的一声，金属盒子从柜子里弹了出来，里面除了阿瓦登的证件以外还多了五张小尺寸光盘。</p>\n<p>“这是有关部门核发给你的BBS论坛统一用户名与密码，BBS论坛列表、互联网BBS论坛使用指南及相应法规、以及最新健康网络词汇列表。”</p>\n<p>阿瓦登向前踏了一步，从盒子里将这些东西一股脑全拿出来，揣进大衣的大兜里。那些东西其实是可以全部放在同一张光盘里的，不过有关部门认为每一张光盘装一份文件有助于用户理解这些文件的严肃性和重要性，并产生敬畏。</p>\n<p>他心里盼望着那个喇叭能再说两句。让他失望的是，对面传来的是一个人起身并且离开的声音，从脚步声的韵律判断，阿瓦登愈发相信这是一名女性。</p>\n<p>“手续办理完毕，请离开网络部回到自己的工作岗位上。”</p>\n<p>甜美空洞的电子女声从天花板上传来，阿瓦登厌恶地抽动鼻翼，拿手揉了揉，转身离开这间温暖的大厅，重新进入到寒冷的走廊。</p>\n<p>在回家的路上，阿瓦登蜷缩在公共汽车上一动不动，顺利申请到BBS的使用权让他有些虚无缥缈的兴奋。他闭着眼睛，找了一个合适的角度躲开破窗而入的寒风，右手在兜里不断摩挲那一系列光盘，还在怀念着那一个神秘的女声。</p>\n<p>如果能再一次听到该多好，他不能抑制自己这样的想法，同时用拇指的指肚在光盘上轻轻地摩擦，幻想这几张光盘也曾经被她的手触摸过。他兴奋的几乎也想破口大骂一句“FUXKYOU, YOUSONOFBITCH”，真奇怪，那名男子的骂声在他的记忆里根深蒂固，并时不时不自觉地滑到唇边。</p>\n<p>忽然，他的手指在光盘上发觉到一丝异常的感觉。阿瓦登下意识地朝四周望去，确认周围一个乘客也没有后，他小心翼翼地把光盘全拿出来，就着窗外的光亮仔细端详。</p>\n<p>阿瓦登很快注意到，在装有BBS论坛列表的光盘背面，被人用指甲轻轻地划了一道刮痕。这条刮痕很轻，如果不是阿瓦登仔细地抚摩光盘的话，是很难发觉到的。这条刮痕很奇特，是一条直线，而在这条直线末端的不远处，则是另外一条极短的刮痕，似乎刻意想弯成一个圆点。整体看上去就好象是一个叹号，或者倒过来说，象是字母i。</p>\n<p>很快他在其他四张光盘上也发现了类似的刮痕，它们造型都不同，但都似乎代表着某种符号。阿瓦登回想起喇叭里那个女声最后一句提到过的文件顺序，于是把这五张光盘按照BBS论坛统一用户名与密码、BBS论坛列表、互联网BBS论坛使用指南、相应法规、以及最新健康网络词汇列表的顺序排列好，接着依次把那五道刮痕用手指临摹到汽车窗户上。很快那些刮痕构成了一个英文单词：</p>\n<p>title</p>\n<p>题目？这是什么意思？</p>\n<p>阿瓦登看着这个单词莫名其妙，这究竟是纯属无意的痕迹，还是有人刻意为之？如果是有人刻意为之，他这么做的用意是什么？</p>\n<p>这时候汽车停住了，又有几名乘客走上车来。阿瓦登挪动一下身体，不让他们看到自己在车窗上写出来的字迹，然后装做打呵欠的样子抬起袖子，轻轻把那五个字母擦掉。</p>\n<p>阿瓦登暗自庆幸，如果他没有在现在发现这些光盘上的痕迹，那么以后就永远没有机会发觉了。按照规定，个人电脑是不允许使用任何存储存设备的，因此阿瓦登的电脑并没有光驱。他下一步所要做的是将这些光盘送交到管区网络安全部，由他们将光盘内资料登陆到服务器中，再转发给阿瓦登。这是为了防止个人私自在家里制造、阅读或者传播黄色或者反动信息，网络安全部发出的通告是这么解释的。联邦的网络警察经常会突入到个人家中进行临时检查，看用户是否非法拥有信息贮存设备，阿瓦登曾经亲眼见过一个邻居被警察带走，原因仅仅是因为他私自藏了一张光盘在家里——其实他只是打算拿那个当茶杯垫用。那个邻居再没回来过。</p>\n<p>无论这些符号代表的是什么意思，它都是一种全新的体验，这让阿瓦登感觉到兴奋。怀旧与渴望新奇是阿瓦登生活在这个时代的两根精神支柱，否则他会与这座城市一样变的僵硬，然后窒息而死。</p>\n<p>他先来到网络安全分部，将光盘交给那里的负责人，负责人反复地检查光盘和阿瓦登的表情，好象所有使用BBS论坛的人都不可信赖一样。末了负责人终于找不到什么破绽，只得将光盘收下，然后举起右手，阿瓦登和他一起高呼“缔造健康的互联网络”。这句话是唯一被允许可以连贯着被说出来的句子。</p>\n<p>回到家里，阿瓦登脱掉大衣，摘了过滤口罩，将旁观者扔到了行军床上，然后整个人也倒进枕头里。每次出去外面都会让他疲劳，这一半是因为他孱弱的肉体已经不大适合室外活动；另外一半原因是因为他必须花费大量的精力来应付旁观者。</p>\n<p>过了四十分钟，他才悠悠地醒过来，头还是和平常一样地疼，胸口还是一如既往地闷。胡乱吃了一点东西以后，阿瓦登爬到电脑桌前，打开电脑，按程序登陆上网络，习惯性地先检查了一遍信箱。</p>\n<p>信箱里有七、八封新的信件，其中两封是同事发来的事务信。另外五封则是网络安全部发给他的，内容就是他送交的那几张光盘。</p>\n<p>阿瓦登打开了包含有BBS论坛的用户名、密码和BBS论坛列表的两封信。他看到自己的论坛通用用户名叫做19842015，和自己的网络编号完全一样，不由得有些失望。他依稀记得在小的时候，BBS论坛的用户名是可以自己决定的，而且每一个论坛都可以不同，一个人在网上并不单只是一串枯燥数字。</p>\n<p>小时候的记忆往往是跟童话和幻想混杂在一起，未必与实际相符。现实中你只能使用有关部门指定的用户名和密码，理由很简单，用户名和密码内也可能含有敏感词汇。</p>\n<p>阿瓦登又打开了那份BBS列表，全部都是有关部门开设的官方论坛，没有私人的——事实上个人能够合法持有的电脑设备从技术上来说也无法架设新BBS——这些论坛的主题各有侧重点不同，但基本上是围绕着如何更好响应国家号召，缔造健康互联网络来说的。比如其中一个电脑技术论坛，主题就是如何更好地屏蔽掉敏感词汇。</p>\n<p>居然在这些论坛中还有一个是关于游戏的。里面正在讨论的是一个如何帮助别人使用健康词汇的网络游戏，玩家可以操纵一名小男孩在街上侦察，看是否有人使用了敏感词汇，小男孩可以选择上前指责或者通知警察，抓到的人越多，小男孩得到的褒奖就越高。</p>\n<p>阿瓦登随便打开了几个论坛，里面的人都彬彬有礼，说话很“健康”，就好象街上的那些行人一样。不，准确地说，比街上的气氛还要压抑。在街上的人也许还有机会保留一下自己的小动作，比如阿瓦登刚才在公共汽车上就偷偷地写了TITLE五个字母；而在网上论坛，人的最后的一点隐私也全被暴露出来，有关部门随时可以调看你的一切行动，无从遁形，这就是科学技术发展所带来的进步。</p>\n<p>一阵失落和失望袭上阿瓦登的心头，他合上眼睛，把鼠标甩开，重重地向后靠去。原来他天真地以为BBS论坛也许会少许宽松一些，现在看来甚至比现实中更叫人窒息，他感觉到自己好象陷入沉滞的电子淤泥之中，艰于呼吸。“FUXKYOU, YOUSONOFBITCH”再一次涌现到他的唇边，强烈无比，要化好大的力气才控制住。</p>\n<p>忽然，他又想到了那个神秘的title，那究竟是什么意思？那五张光盘里或许隐藏着什么？也许这跟title有关系？</p>\n<p>阿瓦登想到这里，把目光重新转向电脑屏幕，仔细去看网络安全部发来的五封信的title部分。五张光盘各隐藏着一个字母，凑到一起就是title，那么按照这个方式，那五封EMAIL的title凑到一起，就变成了一句话：去用户学习论坛。”</p>\n<p>阿瓦登记得刚才他确实看到其中一个论坛的名字叫做“用户学习”，于是他抱着姑且一试的心态连接到这个论坛去。他希望这并不是一个巧合。</p>\n<p>用户论坛是一个事务性论坛，里面是一些关于BBS用户资料的投诉帖和管理帖，斑竹的是一个叫19387465的人；发帖的人和回帖的人数量都很少，里面冷冷清清的。阿瓦登打开帖子列表，按照刚才的规律去搜寻每一个帖子的标题，并把它们综合到一起，很快他就得到了另外一句话：</p>\n<p>“每周日辛普森大楼5层B户。”</p>\n<p>又是一个谜团，阿瓦登想。但这却坚定了他的信心，这其中必定隐藏着玄机。光盘、EMAIL和BBS论坛，连续三次都可以通过首词组组合的方式得到暗示，绝非巧合。</p>\n<p>究竟是什么人会在有关部门的官方文件中隐藏着这样的信息呢？每周日在效率大楼5层B户又会发生什么事情呢？</p>\n<p>阿瓦登终于找到了久违的兴奋感，未知事物的新奇刺激着他麻木很久的神经。更重要的是，这种在有关部门正式文件中玩弄的文字技巧，叫他有一种喘息的快感，仿佛一个密不透风的铁面罩上几个透进空气的小孔。</p>\n<p>营造健康的互联网络。</p>\n<p>FUXKYOU, YOUSONOFBITCH。</p>\n<p>阿瓦登盯着屏幕上的桌面背景，用嘴唇比出了那句粗话的口型，并且比出了中指。</p>\n<p>在接下来的日子里，阿瓦登一直处于一种潜藏的兴奋状态，就象是一个摆出无辜表情嘴里却藏着糖果的小孩子，在大人转身过去之后露出狡黠的笑容，尽情享受心中藏有秘密的乐趣。</p>\n<p>日子一天一天地过去，健康词汇在列表里又少了几个，窗外的空气又浑浊了几分，这已经是生活的常态。阿瓦登自己已经开始拿网络健康词汇表当日历来用，划掉三个词就证明过了三天，划掉七个就证明过了一周，于是周日终于到来了。</p>\n<p>阿瓦登抵达辛普森大楼的时间是中午，暗示的句子里并没有指明时间，阿瓦登认为在中午前往应该是比较可以接受的。当穿着深绿军大衣，耳朵上别着旁观者的阿瓦登来到辛普森大楼的入口时，他的心开始忐忑不安地跳跃起来。他在上一星期设想了无数种可能发生的情景，而现在这个谜底就要揭晓了。无论在周日效率大楼会发生什么，也不会比现在的生活更加糟糕，阿瓦登心里想，所以他并不怎么害怕。</p>\n<p>他走进大楼内部，发现这里的人也很少，空旷的走廊里只听到他哒哒的脚步声与回音。一部老电梯里贴着“缔造美好网络家园”的广告，以及一个充满了正义感的男性头像海报，背景是星条旗，他在纸里用右手食指指向观看者，头上写着一行字是“公民，请使用健康词汇。”阿瓦登厌恶地转过身去，发现另外一侧也贴着同样的海报，避无可避。</p>\n<p>值得庆幸的是五楼很快就到了，电梯的门一开，对面的门上就赫然挂着B户的牌子。门是掉了漆的绿色，门框上还点了几滴墨水，一部简易的电子门铃挂在右上角。</p>\n<p>阿瓦登深深吸了一口气，伸手去按电纽。</p>\n<p>电铃响起，很快屋子里传来脚步声。阿瓦登觉得这脚步的韵律很熟悉，似乎是在哪里见到过。门“咔拉”一声被打开一半，一名年轻女子一手握着把手，把身体前倾望着阿瓦登，警惕地说：</p>\n<p>“你，找谁？”</p>\n<p>女子疑惑地问道。阿瓦登一下子就认出了她的声音，就是那个在网络部BBS论坛科柜台后面的女性。她很漂亮，穿着墨绿色绒线衫，头上梳着这时代流行的短发，皮肤特别的白，只有嘴唇能看到一些血色。</p>\n<p>看着女子的眼神，一瞬间阿瓦登不知道该说什么好，犹豫了一下，他举起右手，轻声回答说：“title。”</p>\n<p>阿瓦登不知道这句话能否奏效，也不知道自己是否真的找对了地方，但这是他唯一能想到的回答了。他紧张地望着那女子，假如那女子忽然报警，那么自己就会被抓起来仔细审问为什么无缘无故跑到陌生人家里。“肆意游走罪”只比“使用敏感词汇罪”轻那么一点。</p>\n<p>女子听到他这么说，脸上还是毫无表情，只是把头幅度很轻微地点了一下，右手谨慎地做了一个“进来”的手势。阿瓦登刚要张口，那女子严厉地瞪了他一眼，吓的他把话又吞回去了，乖乖地跟着她进了屋子。</p>\n<p>一进屋子，女子首先做的就是把门关好，然后拉起来一层铅灰色的门帘挡在门口。阿瓦登不安地眨着眼睛，趁她拉门帘的时候环顾四周。这屋子是标准的两室一厅，在厅里摆放的是一套双人沙发与一个茶几，茶几上居然还有几束红紫色的塑料花。靠墙是电脑桌和电脑，墙上挂着普通的白色日历，但被主人用粉红色的纸套了边，看起来颇为温馨。一盏粗笨的日光灯从天花板上垂下来，上面象是恶作剧一样挂了几缕绿色的电线，象是垂下藤蔓的葡萄架。阿瓦登注意到厅口的鞋架上有四双鞋，尺码不同，说明今天的客人并不只他一个。</p>\n<p>阿瓦登正踌躇不安，忽然女子从背后拍了拍他的肩膀，示意他朝里面走。于是两个人穿过客厅另一侧的短小回廊来到其中一间卧室。卧室上挂着同样质地的铅灰色帘子，女子伸手举起帘布，推开了门。阿瓦登迈了进去，首先映入眼帘的是三名面带微笑的人类，以及一间用真正的鲜花装点的房间。屋子里有很多旧日记忆里的古老物品，比如一幅印象派的油画、一尊乌干达木雕，甚至还有一个银烛台，唯独没有电脑。</p>\n<p>他正在迟疑，女子也进了屋子。她谨慎地拉好门帘关上门，将耳边的旁观者取下，回过身来对阿瓦登用曼妙的声音说道：</p>\n<p>“欢迎加入说话会！”</p>\n<p>“说话会？”</p>\n<p>出于习惯，阿瓦登并没有把这三个字说出口，因为他不确定是否“健康”，只是用眼神表示自己的疑惑。</p>\n<p>“在这里你可以随便说话，这个该死的东西不会起作用的。”女子把自己的旁观者晃了晃，那个小东西象死掉了一样，对女子句子里两个敏感词汇“随便”和“该死”充耳不闻。</p>\n<p>阿瓦登一下子想到上星期在公共汽车站前碰到的男子，如果他摘下旁观者，会不会也会落到同一境地呢？那女子见他犹豫不决，指了指门口的铅灰色门帘说：“放心好了，这里是可以屏蔽掉旁观者信号的，不会有人觉察到。”</p>\n<p>“你们，是什么，人，这，是，哪里？”</p>\n<p>阿瓦登一边摘下耳朵上的旁观者，一边小声说道，语调还是改不了那种有关部门规定的说话方式。</p>\n<p>“这里是说话会，是一个完全自由场所，在这里你可以畅所欲言，请不要拘束。”</p>\n<p>另外一个人起身对他说道，这是一名瘦高的中年男子，鼻梁上的眼镜非常地厚。</p>\n<p>阿瓦登嗫嚅着，却找不到发音的焦点，在四个人的注视下显得窘迫不堪，脸都要红起来。女子同情地看了他一眼：“可怜的家伙，不用太紧张，每一个刚到这里的人都是这样。慢慢就习惯了。”</p>\n<p>她把手搭到阿瓦登的肩上：“我们其实见过的，当然，我见过你，而你没见过我。”她一边说，一边将自己的头发解下来，原来她留的是一头齐肩的乌黑长发，头发披下来的一瞬间阿瓦登觉得她真的很美。</p>\n<p>“我……我记得你，记得你的声音。”阿瓦登终于说出了一句完整的话，虽然不够流畅。</p>\n<p>“是吗，那可太好了。”女子笑起来，拉着他的手，让他坐到沙发上，递给他一杯水。阿瓦登注意到这是一个款式古老的茶杯，上面还刻着花纹，杯子里的水带着浓郁的香气，阿瓦登尝了一点，那种甜丝丝的味道对喝惯纯净水的舌头来说刺激格外地大。让他觉得浑身一下子被注进了许多活力。</p>\n<p>“弄到这个可不容易，我们也不是每周都能喝到。”女子坐到他身边，两只乌黑的眼睛注视着他，“你是怎么知道这个集会的？”</p>\n<p>阿瓦登把发现光盘暗示的过程说了一遍，其他四个人都赞许地点了点头。“果然是个聪明人，脑筋还没被陈腐的空气腐蚀掉。”一个三十多岁的胖子称赞道，他的嗓门大的要命。那个戴眼镜的中年人把两只手交叉在一起，表示赞同。</p>\n<p>“这正是天生的说话会成员，聪明、敏锐，而且不甘屈从于沉默。”</p>\n<p>“那么。”胖子提议，“先让我们鼓掌欢迎说话会的新成员吧。”</p>\n<p>于是四个人鼓起掌来，小小的屋子里响起一片掌声。阿瓦登羞涩地举起杯子做回应，他还不太习惯这样的场面。等到掌声稍息，他抬起头怯生生地问道：</p>\n<p>“可以问个问题吗？说话会到底是什么？”</p>\n<p>带他进屋的女子伸出食指，在他鼻子前两公分的地方比了一比，解释道：</p>\n<p>“说话会，就是可以畅所欲言的集会。在这里你不必顾忌什么，说出任何你想说的东西。这里没有敏感词汇，也没有健康互联网络。这里是绝对自由的空间，你可以尽情释放你的灵魂，舒展你的身体，没有任何禁锢与束缚。”说着说着，她的声音变的高亢、奔放，里面饱含了许多早已经被屏蔽掉的词汇，阿瓦登不曾听到这样流畅连贯的话语很久了。</p>\n<p>“我们的宗旨就是，说话，就这么简单。”中年人扶扶眼镜，补充道。</p>\n<p>“可是，要说些什么呢？”阿瓦登又问道。</p>\n<p>“任何事情，你心里想的任何事情都可以说出来。”中年人露出宽和的笑容，“尤其是那些被美国政府限制的思想。”</p>\n<p>这可真是一个大胆的集会啊，这分明就是犯罪，阿瓦登心想，但他发觉自己却被这种犯罪慢慢地吸引住了。</p>\n<p>“当然，有件事我们会事先说明。说话会是危险的，每一个成员都冒着被有关部门拘捕的风险。联邦执法人员也随时可能破门而入，以非法集会以及非法使用不合法词语的名义把我们抓起来。你现在有权拒绝加入，并且离开。”</p>\n<p>阿瓦登听到女子的警告，心里一度犹豫起来。但一想到此刻离去的话，那么又要开始持续那种窒息的泥沼生活，他就难以压抑自己的烦闷。阿瓦登第一次发现，原来“说话”对他来说是一个致命的诱惑，他先前并不知道自己原来是如此地渴望着说话。</p>\n<p>“我不会离开的，我要加入你们，说话。”</p>\n<p>“那太好了。唔，那么不妨就从自我介绍开始吧。”女子高兴地说，同时站起身来，把右手搭到胸前，“从我开始。我的名字叫阿尔特弥斯，至于网络编号和身份证号码，让他们见鬼去吧！谁会去管那个！我有我自己的名字，我不是数字。”</p>\n<p>她的话让所有人包括阿瓦登都笑了起来。接着她继续说道：“不过，这其实只是一个假名，这是希腊神话里的女神。”</p>\n<p>“假名？”</p>\n<p>“是的，和我户籍本上的名字是不同的。”</p>\n<p>“可是，为什么？”</p>\n<p>“你不会对自己在档案里的名字厌倦吗？我想起一个自己喜欢的名字，哪怕只有一次机会也好，自己想叫什么就叫什么。在这个说话会里的每一个人都有一个自己喜欢的名字，我们彼此拿这个称呼。”</p>\n<p>阿瓦登若有所思地点点头，他很理解阿尔特弥斯的想法。事实上当他在使用网络论坛的时候，也希望能够自己取一个称心如意的名字，而不是被分配一个用户名。</p>\n<p>通过介绍，阿瓦登了解到阿尔特弥斯是网络部BBS论坛管理科的职员，今年23岁，未婚，最讨厌蟑螂和蜘蛛，喜欢缝纫与园艺，屋子里的花就是她偷偷从城市边缘摘回来的。</p>\n<p>接下来是那名中年人，他自我介绍说名字叫兰斯洛特，41岁，是城市电厂的一名工程师；兰斯洛特这名字出自英国的亚瑟王传说，是一名忠贞的骑士。他有自己的老婆和两个孩子，一男一女；男孩三岁，女孩四岁，他们最喜欢吃的就是柠檬味道的水果糖。说到这里，兰斯洛特说希望下次聚会能把他们也带了，孩子们正是学说话的时候，他想教给他们真正的说话。</p>\n<p>那个三十多岁的胖子是网络部的一名网管，叫瓦格纳。这个身份让阿瓦登吃惊不已，他的印象里网管都是些绷着脸全无表情的冷漠生物，但眼前的瓦格纳脸圆滚滚的，油光锃亮，嘴边两条翘起的小胡子神气十足。他喜欢的是雪茄和歌剧，利用网管的特权这两样东西都不难弄到。</p>\n<p>“这个能屏蔽掉信号的门帘就是他弄的。”阿尔特弥斯补充说，瓦格纳冲她做了个“乐意为您效劳”的手势，然后点燃了雪茄，把它放到嘴里，很快屋子里就笼罩起一片稀薄的烟雾。</p>\n<p>说话会的第四名成员是一位穿着黑色制服的女性，今年刚满三十。她的名字是杜拉丝，城市日报（那个时代的报纸已经全部都数字化了）的编辑，她比阿尔特弥斯还瘦，颧骨高高耸起，眼窝身陷，两片薄薄的嘴唇即使在最说话的时候也很少分开，看不到牙齿。爱好是饲养狗和猫，尽管她并没有养。</p>\n<p>“那么，到你了。”阿尔特弥斯对阿瓦登说。阿瓦登想了想，结结巴巴地把自己的情况说了一遍，当谈到自己的爱好时候，他一时间居然想不到自己喜好什么，似乎什么都没有，在那之前他甚至从来没想过。</p>\n<p>“那，你最想做的是什么事呢？”阿尔特弥斯把手再一次放在他肩上，诱导着问道。</p>\n<p>“真的什么都可以？”</p>\n<p>“什么都可以，在这里没有任何限制。”</p>\n<p>阿瓦登觉得自己终于找到机会了，他咳了一声，抓抓头，脱口而出一句响亮的叫喊：“FUXKYOU, YOUSONOFBITCH！”</p>\n<p>在一瞬间，在座的四个人都被他这句话震惊了。瓦格纳率先反应了过来，他先叼住雪茄，用力鼓掌，然后用右手把雪茄取下来，张嘴大声地赞叹道：“真棒，痛快，这简直是最完美的入会誓词。”</p>\n<p>“我宁可听十遍这样的脏话，也不想再去碰那个乏味的电子女声。”兰斯洛特也是一脸陶醉，毫不掩饰自己对电子女声的厌恶。而阿尔特弥斯和杜拉丝全都咯咯地笑起来，杜拉丝发现自己的笑容幅度大了一点，不好意思地把嘴掩住。阿瓦登觉得他们与其说是觉得新奇，不如说是在享受这句脏话所带来的对体制的蔑视与挑战。</p>\n<p>“那你叫希望自己叫什么名字呢？” 阿尔特弥斯歪着头问。</p>\n<p>“唔……王二。“ 阿瓦登沉吟了一下，回答说。这是一个中式的名字，他以前有一个中国人朋友，喜欢讲故事，故事里的主角名字总是叫王二。</p>\n<p>屋子里的气氛现在完全融洽了，大家都开始谈些比较自然的话题，每个人都摆出了最舒服的姿势，阿尔特弥斯不时拿起茶壶来为大家续水。阿瓦登紧张的心情逐渐放松下来，他感觉到自己的脑子前所未有地轻松。</p>\n<p>“你知道的。”阿尔特弥斯又给他倒了一杯甜水，“我们一直想把说话会保持在一定规模，平日是没有办法畅所欲言的，我们需要空间。麻烦的是，我们没办法公开征集会员，又不可能直接通过物理接触去寻找，那风险太大。于是兰斯洛特就设计了一套暗示系统，只有发现这些暗示的人才能知道本会的存在。”</p>\n<p>“这套系统考虑到的还不止是安全问题。”兰斯洛特把自己的眼镜摘下来仔细擦拭了一下，得意地说，“这其实也是一个会员资格验证。说话会所吸纳的成员，必须有智慧，有头脑，内心渴望激情，并且对自由有着渴望。”</p>\n<p>瓦格纳用两根指头夹着雪茄，在事先准备好的烟灰缸里弹了弹烟灰，大声说道：“据我的经验，申请BBS论坛服务的人，大多数都是为了怀旧，或者说渴望一些新鲜的东西，这样的人往往都怀有激情，认为BBS论坛也许能给他们一些与现实不一样的东西——当然，事实上并非如此，美国政府对BBS论坛的管理甚至严厉过电子邮件——这暗示着他们心里渴望解脱束缚。因此我们将暗示隐藏在申请BBS论坛的光盘之中，只有申请人才有机会接触到这些暗示。而只有那些有智慧、观察敏锐的人才会发觉到这些暗示的存在，并顺利解读出来，找到这里。”</p>\n<p>“归根到底，说话会也不过是一群渴望自由说话的秘密小团体罢了。”兰斯洛特笑道。</p>\n<p>“你是第二个找到说话会的人，第一个是杜拉丝小姐。”</p>\n<p>阿尔特弥斯告诉阿瓦登。阿瓦登敬佩地看了杜拉丝一眼，后者淡淡地回答道：“这没什么，这是我的工作，我的工作就是摆弄文字。”</p>\n<p>阿瓦登想到上一周在公共汽车站碰到的那个疯狂男子，于是把这件事讲给其他成员听。听完之后，兰斯洛特摇了摇头，从嘴唇里滑出一声叹息：</p>\n<p>“这样的事情我也是见过的，我的一个同事就是如此。所以说话会的存在是必要的，这是缓解压力的阀门。长时间的敏感词汇限制会让人都疯掉的，因为他们既无法思考又没办法表达。”</p>\n<p>“这正是美国政府有关部门所希望看到的，这样只有傻瓜能够存活下来，一个全是傻瓜的社会是稳定的。” 瓦格纳费力地把自己肥胖的身躯挪了一下位置，轻蔑地说。</p>\n<p>“你也是有关部门的一分子，瓦格纳先生。”阿尔特弥斯一边往茶杯里续了些热水，一边抬头轻声说道。</p>\n<p>“阿尔特弥斯小姐，我只是一个能比普通人多使用几个敏感词汇的普通人而已。”</p>\n<p>大家都笑了起来。阿瓦登从来没有见过这么多的人说这么多的话，这是前所未有的奇妙经验。他惊讶地发现自己居然很快就融进了这个小圈子里，隔阂与陌生感很快就消失了；同时消失的还有胸闷与头晕等习惯性的毛病。</p>\n<p>很快话题就从说话会本身扩展到了更加宽泛随意的话题，阿尔特弥斯唱支歌，兰斯洛特说了几个笑话，杜拉丝则给大家讲了美国南部诸州的风土人情；瓦格纳甚至还唱了一段歌剧，虽然阿瓦登一个字也听不懂，但他一点也不吝惜掌声。在这个城市的某一个被屏蔽掉的角落里，五个不甘沉默的人正在享受着在这个时代视为奢侈品的事情——说话。</p>\n<p>“王二，你可曾看过《1984》？”</p>\n<p>阿尔特弥斯忽然问道，她就靠着阿瓦登坐下，阿瓦登摇摇头，反问道：“这是网络编号的一段么？”</p>\n<p>“这是一本书的名字。”</p>\n<p>“书？”阿瓦登听到这个名词，头摇的更大了。这是个古老的名词，在这个电脑技术非常发达的时代，网络可以承载一切信息，任何人都可以在网上图书馆查到电子版；因此有关部门认为实体书籍变成了一种没有必要存在的浪费，实体书也就逐渐消亡了。瓦格纳对此的评论是：“有关部门喜欢电子书籍的心情是可以理解的，电子书籍的话，只需要FIND和REPLACE两个命令就可以消灭掉全部不健康词汇，替一本书消毒；而实体书籍的校对与修订却是件旷日持久的工作。”</p>\n<p>“这是一本伟大的书，是旧世界哲人们对我们这个时代的预言。”阿尔特弥斯认真地说。“它很早以前就洞察到了肉的束缚与解脱，灵的束缚与解脱，这是说话会的基石。”</p>\n<p>阿瓦登不无惊奇地发现他的网络编号开头恰好是这这本书名字：19842015。</p>\n<p>“那么，该怎么样才能看到呢？”阿瓦登盯着阿尔特弥斯乌黑色的眼睛问。</p>\n<p>“我们也无法找到纸质版，网络图书馆不可能存在这样的书。”兰斯洛特摇摇头，然后重新露出笑容，左手向着杜拉丝摆了个请的姿势，“但我们的杜拉丝小姐应该为她的记忆力而自豪，她在很早已经有幸阅读过这两本书，并且能够记得里面的大部分文字。”</p>\n<p>“太好了，然后她写下来了，对吗？”</p>\n<p>“那太危险，这时代持有实体书是个大罪过，也容易让说话会暴露。我们只是在每次聚会的时候请杜拉丝小姐为我们背诵。既然是说话会，那么把这两个故事讲出来不是更名符其实吗？”</p>\n<p>大家都安静下来，杜拉丝站起来走到屋子中央，其他四个人坐在旁边看着她。阿瓦登不经意地把手搂在阿尔特弥斯肩上，后者微微朝这边靠过来，女性头发的幽香“咝咝”地划过他的鼻子，让他的心里一阵荡漾。屋子里非常暖和，他分不清这是花香还是阿尔特弥斯的味道。</p>\n<p>杜拉丝的声音并不高，不过却很清晰有力；她的记忆力确实惊人，不仅记得情节，包括一些细节和句子都可以复述下来。杜拉丝讲到了朱丽亚假装摔倒，然后偷偷递给温斯顿一张写着“我爱你”的纸条，绘声绘色，这让听众们都听的入神了，阿尔特弥斯听的尤其认真，以至于都没有注意到阿瓦登一直注视着她。</p>\n<p>“1984的作者预见到了专制的进步，却没有预见到技术的进步。”瓦格纳在杜拉丝停下来喝水的时候发表自己的评论，阿瓦登觉得他与外貌不太相称，是个很有洞察力的技术官僚。</p>\n<p>“在大洋国人们还可以靠传递纸条来偷偷表达自己的想法，但是现在不一样了。美国政府有关部门把我们全赶到了网上，而在网络技术发达的今天，我们即使想发一条短信都会被系统或者网管看的一清二楚，无从遁形。现实里呢，还有旁观者在。”瓦格纳在腿上敲了敲雪茄根部，“一句话，技术是中性的，但技术的进步会让自在的世界更自在，集权的世界更加集权。”</p>\n<p>“这句话说的很有哲学家的味道哟。”阿尔特弥斯冲瓦格纳挤了挤眼睛，从抽屉里取来一把饼干和曲奇散发给大家。</p>\n<p>“就好象同样是0和1，有的人就能写出工具软件，有人却拿那个编出恶性病毒？”</p>\n<p>阿瓦登想到一个类似的比喻，瓦格纳听了以后满意地打了个响指。</p>\n<p>“很不错的比喻，王二，就是如此，真不愧是程序员。”</p>\n<p>谈话持续了不知道有多久，杜拉斯看了一眼墙壁上的挂钟，连忙提醒谈兴正浓的四个人时间快到了。说话会不能持续很长时间，旁听者被屏蔽的越久，暴露的危险就越大。</p>\n<p>“那么好吧，我们就抓紧最后半个小时来完成今天的活动。”</p>\n<p>阿尔特弥斯一边说着，一边将桌子上的空杯子收走。兰斯洛特和瓦格纳也都站起身来，活动一下已经有些酸疼的肩膀和腰，只有杜拉丝坐在位子上没有动。</p>\n<p>“活动？还有什么活动？”</p>\n<p>阿瓦登奇怪地问道，说话会除了说话还有其他活动？</p>\n<p>“唔，对啊，我们还有其他活动。”阿尔特弥斯撩起额前的长发，对他妩媚一笑：“我们还会和对方完全交流。”</p>\n<p>“完全交流？”</p>\n<p>“就是intercourse”</p>\n<p>“………………”阿瓦登一下子变的脸色苍白，呼吸急促起来，仿佛胃里被灌进去零下三十度的寒风，他几乎不相信自己的耳朵。</p>\n<p>“说话会有说话的自由，也有选择与谁上床的自由。”阿尔特弥斯毫不羞涩地说，“我们互相谈话，然后选择合适的人做爱，就象我们选择我们喜欢的词汇说话一样。”</p>\n<p>兰斯洛特看阿瓦登很窘迫，走过去拍拍他的肩膀，慢慢地说：“当然，我们不会强迫任何人，这完全是在自愿的基础上。今天我还要早点回去照顾小孩，你们人数正好合适。”</p>\n<p>阿瓦登的脸色涨红，热的仿佛夏季的电脑CPU，他甚至不敢多看阿尔特弥斯一眼。他憧憬过女性很长时间，但如此接近还是第一次。</p>\n<p>还要回家去照顾小孩子的兰斯洛特向大家道别后就先行离去了，阿尔特弥斯将房间留给瓦格纳与杜拉丝，然后带着惶恐不安的阿瓦登来到了另外一间房间。这间显然是阿尔特弥斯的卧室，屋子里很简单，但却收拾的十分干净，在床上枕头旁还摆着一个手制的布娃娃，床单和窗帘都是粉红色的。</p>\n<p>最初的是由阿尔特弥斯主动开始的，丝毫没心理准备的阿瓦登只是被动地任她摆布。经过了几轮挑逗，阿瓦登才逐渐放开，任由潜藏在自己心内的原始欲望奔流出来，那种期待听到圆润女声的青春憧憬本来只是苦闷生活的意淫，而在今天它加倍实现了。很快这种憧憬与他在现实中被压抑的郁闷合流，转化成了猛烈的冲动，让他一次又一次与阿尔特弥斯融为一体。阿瓦登不知道这种冲动和他想大声说出“FUXKYOU, YOUSONOFBITCH”冲动有什么不同，不过现在不是考虑这个的时候，他现在脑子里想的只有尽情地、全无束缚地让自己释放激情，完全没有任何束缚。</p>\n<p>强烈的刺激一波波地冲击着兴奋中枢，最终一阵快感浪潮在狂暴洋面扬起头来，达到了一个极高的顶端。阿瓦登在那一瞬间感觉到了前所未有的自由，那种轻盈无比的自由，以及因自由而生的快乐与疲惫。浑身是汗的他喘息着倒在了阿尔特弥斯身上，一阵舒畅的倦意如潮水般淹没了他的身体……</p>\n<p>……当他醒来的时候，发现阿尔特弥斯躺在自己身边，赤裸的身体好象一尊白玉雕像，睡姿恬美静谧。他侧过身子去，慵懒地打了个呵欠，然后阿尔特弥斯睁开了眼睛。</p>\n<p>“很舒服，对不对？”她问道。</p>\n<p>“是啊……”阿瓦登不知道该说什么好，他顿了顿，犹豫地说道：“你以前和兰斯洛特、瓦格纳他们也……呃，我是说，象刚才那样子过吗？”</p>\n<p>“是的。”阿尔特弥斯温柔地回答，她半支起胳膊，长发从肩膀披到了胸口。她的大方坦白反而让阿瓦登有些不知所措。屋子里出现了一段时间的沉默，然后阿尔特弥斯忽然开口问道：</p>\n<p>“还记得今天杜拉丝讲的那段故事吗？女主角偷偷递给男主角写着“我爱你”的纸条。”</p>\n<p>“唔，还记得。”阿瓦登回答，很高兴终于能从那个拙劣的话题摆脱出来了。</p>\n<p>“在有关部门的健康互联网络词汇列表里，没有爱这个字呢。在我们这个时代，我爱你也是一个敏感词汇，被屏蔽掉了。”阿尔特弥斯的眼神里似乎是感慨，又象是失落。</p>\n<p>“我爱你。”阿瓦登不禁脱口而出，他知道在这间屋子里可以说出任何自己想说的话，不必顾忌。</p>\n<p>“谢谢你。”</p>\n<p>阿尔特弥斯听到之后只是笑了笑，起身穿上衣服，催促阿瓦登时间差不多了。阿瓦登有些失望，因为她没有预期反应的热烈，仿佛他刚才说的只是有些无关紧要的东西。</p>\n<p>这时候杜拉丝和瓦格纳已经离开了，屋子里只剩他们两个人。阿尔特弥斯把他送到门口，将旁观者交给他，然后叮嘱他说：“记得在外面绝对不要提及说话会的任何事情或者任何人，我们在说话会以外的地方是完全不认识的。”</p>\n<p>“我记住了。”阿瓦登回答，然后转身要走。</p>\n<p>“王二。”</p>\n<p>阿尔特弥斯忽然叫道，阿瓦登连忙转身，还没等他反应过来，两片柔软温暖的嘴唇忽然贴到了他的双唇，然后是一个细切的声音在耳边响起：“谢谢你，我爱你。”</p>\n<p>阿瓦登觉得眼睛有些湿润，他戴上旁观者，推开门，重新步入到那一片令人窒息的世界中去，但他此时已与来时的心境大不相同。</p>\n<p>此后阿瓦登的精神面貌明显有了改善。他谨慎地享受着这种秘密集会的乐趣，并且乐在其中。每一周或者两周，他们五个人都会在周日秘密地举行说话会的活动，聊天，唱歌或者听杜拉丝讲1984的故事。阿瓦登同阿尔特弥斯又“完全交流”了几次，偶尔他也会跟杜拉丝“交流”。他有了两个身份，一个是现实中和网上的阿瓦登，编号19842015，还有一个是说话会里的王二。他很享受这个名字，觉得这就是自己另外的一个人生。</p>\n<p>有一次集会，他们谈到了敏感词汇的问题。阿瓦登记得很早的时候——他对这方面的记忆有点模糊——有关部门给出的是一份敏感词汇列表，由网站的内部管理人员秘密参考使用，他对如何演变成现在的局面大惑不解。那一天瓦格纳带了一瓶葡萄酒，兴致很高，于是索性给他们讲了讲“屏蔽”的进化史，身为网管的他经常可以接触到这些资料。</p>\n<p>在最开始美国政府只是单纯地屏蔽掉敏感词汇，但很快他们就发现这样的措施根本没有用处。很多人会采取在词组中夹杂符号或者数字的方式来绕开系统检查；于是有关部门不得不将这些近似敏感词汇也一一屏蔽掉。然而众所周知，数字与符号之间的组合方式是近乎无限的，只要你有想象力，就完全可以组合出一个新的词组而且不失掉他的原意。比如说“politic”这个词，就有“politi/c”、“政polit/ic”、“pol/itic”等近乎无限种表达方式。</p>\n<p>当有关部门意识到这个问题时，他们采取了新的策略。既然无法辨识词组，那么就用单词屏蔽。这一举措在一开始是奏效的，违规交谈的人显著减少，但很快人们就发现可以用同音字或者谐音的方式来继续表达自己的危险思想。即使有关部门封掉全部敏感词汇的同音字，也无济于事，思想活跃的美国人充分发挥了自己的想象力，使用隐喻，借代、类比、引申及其他修辞方法，或者将一个敏感词用数个不敏感的字来代替。人类的思维方式要比电脑开阔许多。电脑屏蔽掉一条路，他们还会有更多的路可以选择。</p>\n<p>这一场水面以下的角力看起来似乎是美国大众要取得胜利。这时候，一个具有逆向思维精神的人出现了。他的身份不明。有人说他是有关部门的主管；也有人说他是因过度使用敏感词汇而被捕的危险人士。无论他是谁，总之整个局面被扭转过来。他向有关部门建议，不再告诉大众禁止说什么，而是规定他们只能说什么，用什么方式去说。有关部门很快就心领神会，制订了新的规章制度：取消了敏感词汇列表，取而代之的是互联网络健康语言列表，并把这举措推广到了日常生活中的语言屏蔽系统中去。</p>\n<p>这一次，大众终于处于下风。以往他们与有关部门尽情地在网络与现实中捉着迷藏，而现在他们却被有关部门扼住了咽喉。这样一来，有关部门可以有效率地掌握住言论，因为整个语言的框架都被彻底控制了。在有限的空间内，大众几乎是无计可施。</p>\n<p>尽管如此，大众还是不屈不挠地将这场战争——或者说游戏——继续下去，他们挑选健康词汇列表中的合法字眼来表达不合法的意思：两个连续的“稳定”意思就是“反对”，“稳定”加“繁荣昌盛”则暗示“屏蔽”。美国政府不得不对这一动向保持着警惕，并日复一日地将更多的词汇从健康词汇列表里删掉，禁止大众使用。</p>\n<p>“当然，这场战争会持续下去的。只要世界上还存在着两个不同的字或者词组，那么就可以继续自由交流——你知道莫尔斯电码吧？”</p>\n<p>瓦格纳说到这里，拿起茶杯一饮而尽，满意地打了一个嗝。</p>\n<p>“可是，这场战争的代价就是语言的失落。表达能力会越来越贫乏，越来越淡而无味，人们会越来越倾向于沉默，这对有关部门反而是好事。”兰斯洛特摆出一副忧虑的表情，有节奏地用指关节敲击着桌面，“这样一来，岂不就等于是大众的自由意识将语言推向死亡的边缘？真讽刺啊。按照这个趋势，有关部门是不会败的，他们会笑到最后。”</p>\n<p>“不，不，笑这种情感他们是不会了解的。”瓦格纳淡淡地回答。</p>\n<p>“我倒是觉得，美国是一直处于恐惧的情感之中呢，生怕人们掌握了太多的词汇，表达出太多的思想，变的难以掌握。”阿尔特弥斯说完摆出一副她在上班期间冷若冰霜的呆板脸孔，学着僵硬的腔调喊了一句：“营造健康的网络环境，美国万岁！”</p>\n<p>杜拉丝、兰斯洛特与瓦格纳都哈哈大笑，唯一没笑的是王二（阿瓦登）。他对于兰斯洛特刚才的那句话始终耿耿于怀：大众与有关部门的对抗，其最终结局就是语言的消亡。那么他们现在这个小小的说话会，也只不过是在一列开向悬崖的列车里关上窗帘，享受坠毁前最后的宁静罢了。</p>\n<p>不过他没有说出口，因为这太煞风景了。阿瓦登不希望破坏说话会的气氛，这对他很重要。</p>\n<p>从说话会回到家里，阿瓦登躺在行军床上，双手枕着脑袋，陷入了沉思。自从加入说话会以后，他变的比以前更容易陷入思考。有时候他想的是这个社会、这个互联网络或者这座城市中存在的荒谬性；有时候他想的是自己的生活；还有时候他想的是阿尔特弥斯。他不知道是不是在一个压抑的世界里，人的情感会变的格外强烈，他现在陷入对阿尔特弥斯的迷恋无法自拔。阿瓦登一直很羡慕杜拉丝讲的《1984》里面的温斯顿，他和朱利亚有一间两个人独处的小屋，一个只属于他们两个人的小世界。</p>\n<p>他在与阿尔特弥斯“完全交流”的时候曾经吐露过自己的心声，阿尔特弥斯没有直接回答，而是表示两个人的关系无法再比说话会更近一步——维持现在的状态就已经是个人行为的极限，有关部门可不会一直打瞌睡。“我们只能把感情生活压缩在每周一次的说话会活动里，这已经很奢侈了。”她对他说，同时温柔地抚摩他的胸膛。“只有在说话会里，我们才是阿尔特弥斯和王二。而在其他时间里，你是19842015，而我是19387465。”</p>\n<p>对此，阿瓦登只能发出一声轻轻的叹息，确实他不该奢求更多。</p>\n<p>除了感情，发生变化的还有互联网络。自从加入说话会以后，阿瓦登逐渐发现互联网表面下潜藏的一些东西。正如瓦格纳在一次活动的时候指出，普罗大众与有关部门的战争从未结束，总会有思想和言论从严厉管制的缝隙中流泻出来。阿瓦登发现，在完全公式化的EMAIL与网络论坛中其实隐藏着不少耐人寻味的细节，就好象那个title一样，存在着各式各样的密码与隐藏寓意。这些东西出自不同人的手里，样式和破译方式都不同，阿瓦登不知道那些密码背后隐藏的是怎样的内容。不过有一点可以确知的是，说话会并不是唯一的一个地下集会，瓦格纳说的对，始终还是有人在试图用“健康”词汇表达“不健康”思想。</p>\n<p>讽刺的是，给阿瓦登感触最深的，是有关部门的管制。以往他只是模糊地感觉到自己被绑缚起来，现在他能清晰地看清这种束缚与压抑的脉络，以及加诸在自己身上的各种手段。在小小说话会中享受到的自在让他更加深刻地感受到在宽阔现实中的不自在。</p>\n<p>“FUXKYOU, YOUSONOFBITCH！”</p>\n<p>每一次的聚会，三位男士都会轻蔑地一起高喊这一句粗话。他们清楚这不会给有关部门带来什么不良影响，不过这确实很痛快。</p>\n<p>这一周，阿瓦登特别地忙碌，他的同事因为不明原因而被屏蔽掉了，这样一来整个项目就全压在了他一个人身上。这项目是为有关部分设计一种软件，用来控制大功率主动式“旁观者”的能源分配控制。软件很复杂，他不得不每天在电脑前工作十几个小时，只有在身体实在支撑不住的时候才停下来随便吃一点东西，喝一口纯净水，困了就躺在旁边的行军床上睡上一觉，爬起来继续工作。屋子里满是浑浊的烟味与袜子脏衣服的酸臭味，阿瓦登就在这种环境下蓬头垢面地敲着键盘，并不时揉揉满布血丝的眼睛。</p>\n<p>偏偏在这个时候屋子里的暖气坏掉了。洋灰色的暖气片从昨天开始就变的冰凉，不再有热水流动。阿瓦登检查了一下，发现并不是管道问题，而且邻居们也碰到同样的事，看来是供热系统出了问题。这一变故的正面影响是稍微淡化了屋子内的酸臭味，负面影响是整个屋子变的有如冰窖一样。紧闭的窗户和门能挡住寒风，却挡不住寒冷，低温让本来就寒酸的房间更笼罩上一层霜气。无论是那把木椅还是行军床都象是冷酷的冰雕，屋子里唯一还有些热气的就只剩下电脑。阿瓦登不得不披上所有的御寒衣物，蜷缩在床上，把电脑的散热口对准自己。</p>\n<p>有关部门宣布“供热”和“暖气”暂时也被列入敏感词汇，于是阿瓦登没办法写信向供热部门询问，只好静待，除了用来敲键盘的指头以外，尽量保持全身一动不动，以节约热量。在停止供暖后的第四天，暖气片里终于传来“哗啦哗啦”的声音，带着热气的水开始流动，屋子里恢复了温暖，“供热”和“暖气”又可以恢复使用了。于是EMAIL与网络论坛上全都是“庆祝有关部门恢复供应暖气，急人民之所急”的帖子，EMAIL新闻组里也全是类似主题。</p>\n<p>不过这对阿瓦登来说太晚了，他生了病，感冒，而且是重感冒。他面色苍白，全身软弱无力，头疼的象是被一枚达姆弹射入头部，只能躺在床上等医生。医生来到他家里，给他做了两三次点滴，喂了一些叫不上名字的药片，叫他静养。这一场病足足持续了数天，他不得不放弃参加这一星期的说话会，身体状况实在太差了，阿瓦登甚至怀疑自己搞不好会因此而死掉。</p>\n<p>阿瓦登躺在床上，心里懊悔不已，说话会是他唯一的乐趣，现在他却没办法参加。他把头蒙在被子里胡思乱想，瓦格纳这一次会带什么特别的东西来呢？兰斯洛特有没有把两个孩子也领过来？还有阿尔特弥斯，他没参加的话，她会和谁“完全交流”呢？瓦格纳还是兰斯洛特？他还想到了杜拉丝，上一次的聚会里，杜拉丝讲到了温斯顿在秘密幽会的屋子里对朱丽亚说“我们已经死了”，朱丽亚附和着说“我们已经死了”，这时候第三个声音说道“你们已经死了。”</p>\n<p>杜拉丝就讲到这里，就停住了。阿瓦登急切地想知道接下来发生了什么，第三个声音是谁，是党吗？温斯顿和朱丽亚是否会被捕，他们会有什么样的下场？不光是他，阿尔特弥斯也很希望知道后续情节的发展，不过她并没有去追问杜拉丝。</p>\n<p>“让这成为一个悬疑，这样接下来的一周我们的生活都会在期待的乐趣中度过。”她对阿瓦登说，然后两个人继续沉溺于intercourse的快乐。</p>\n<p>“也许他们都会死。”阿尔特弥斯在交流结束后，看着天花板说。</p>\n<p>“也许那只是奥布林的声音，他去探望他们。”阿瓦登安慰她道，但是他的心里也不确定。</p>\n<p>阿瓦登的病持续了十天，然后他终于痊愈了。他痊愈后的第一件事就是从床上爬起来，然后去看墙上的日历：这一天恰好是星期日，说话会活动的日子。阿瓦登已经缺席了一周，这已经令他如饥似渴，甚至做梦都在和他们一起喋喋不休地说着话——所幸他并没有说梦话的习惯，所以24小时工作的旁观者并没发出任何警报。</p>\n<p>阿瓦登简单地洗了一下脸，用一把有些生锈的剃刀沾着肥皂仔细地刮掉脸上粗硬的胡须，然后咕噜咕噜地刷了刷牙齿，用手和毛巾沾着热水将自己蓬起的乱发压下去。因为生病，有关部门发了一些补贴给他，其中包括两块羊角面包、两瓶姜汁啤酒和一份精制砂糖。他将这些东西都用塑料布仔细包好，揣到宽大的军大衣里，打算带到说话会上去与大家分享。</p>\n<p>今天的天气和往常一样地冷，阿瓦登把自己裹在大衣里，登上前往效率大楼的公共汽车。一路上车厢里的广播重复着“营造健康的互联网络”以及一些优秀网络用户的先进事迹；车厢前面的电子屏幕不断滚动显示着最新的健康词汇列表，一个旁观者自车顶垂下来睥睨着车内的每一个表情呆滞的人。阿瓦登坐在最后一排，望着窗外不断向后移动的建筑物与枯黄的树木发呆。</p>\n<p>车子很快就到达了辛普森大楼附近的车站，阿瓦登下了车，把手放到怀里摸了摸塑料布包着的食物，朝着大楼走去。他在半路无意中抬起头，忽然一阵冰冷的寒流刺入他的胸腔，迫使他停住了脚步。</p>\n<p>有什么地方不对劲！</p>\n<p>他看到了效率大楼的第五层阿尔特弥斯家的窗户发生了一些奇怪的变化。以前阿尔特弥斯家面向大街的窗户总是挂着粉红色的窗帘，而现在窗帘则被扯到了两边，窗户大开，用肉眼可以勉强看到窗玻璃和屋子里雪白的墙壁。假如今天有说话会的话，阿尔特弥斯绝对不会把有屏蔽效果的窗帘打开。而且打开窗户这件事也绝不寻常，在这个城市里的室外空气十分浑浊，几乎不会有人会去开窗换气。</p>\n<p>也就是说，今天并没有说话集会召开，而是发生了另外一些事情。阿瓦登望着那窗户，心情开始变的有些慌乱，他把手从兜里掏出来，叼起一支香烟，把身体靠在一根电线杆旁故做镇静，以免被行人怀疑。究竟说话会发生了什么，为什么这一周停办了呢？要知道，只要还有复数的成员能够出席，说话会就会一直办下去，难道说瓦格纳、兰斯洛特、杜拉丝和阿尔特弥斯同时无法出席？这种概率实在太小了。阿瓦登一边这样想着，一边向四周不安地张望。忽然他看到了一样东西，一个念头霎时占据了他的全部心灵，让他几乎眩晕过去。</p>\n<p>“说话会本周不会有了，以后也不会有了。”阿瓦登嘴唇默默地蠕动着，面如死灰。</p>\n<p>他看到在街道内侧一处不起眼的地方隐藏着一个类似雷达天线的东西，其造型很象是两个背部贴在一起的大碗。阿瓦登心里清楚这是什么东西：这正是他负责软件设计的大功率主动式“旁观者”，这造型他很熟悉。这装置可以主动发射电波去探测人们的声音，并检查其中是否存在敏感词汇。</p>\n<p>这样的装置居然就安放在阿尔特弥斯家附近，那么就等于说话会完全暴露在了有关部门的监控之下。主动式旁观者的强大刺探电波会轻易刺穿她家中的铅质窗帘，把所有成员的话原封不动地传到有关部门耳朵里。</p>\n<p>这是一个划时代的发明，这一技术的突破意味着有关部门可以不再被动地等待警报，可以主动出击去刺探人们在任何时间任何地点说的任何话语。阿瓦登可以想象接下来会发生什么，阿尔特弥斯他们的每一句话都被有关部门记录下来，会有机器统计出到底有多少违禁词汇被他们使用过；然后联邦警察会冲进她的屋子，将正在聚会的成员们都带走，只留下搜查过后空荡荡的房间和窗户。</p>\n<p>阿瓦登想到这里，心如刀绞，他一点也不为自己的侥幸逃脱而感到幸运。他的胃袋翻腾起来，一种恶心的感觉从胃里直接升到嘴边，让他想吐，却又不能吐——因为“呕”也是个敏感词汇；大病初愈的孱弱身躯无法承受这种打击，象害了风寒一样颤抖起来，几乎站立不住。</p>\n<p>他不敢继续朝前走去，仓皇地转过身去，登上另外一辆公共汽车，把嘴闭的更紧了。等阿瓦登回到自己家楼下，看到楼房附近另外一架新的主动式旁观者正在兴建中，漆黑的天线在半空舒展开来，仿佛一面巨大的蜘蛛网。看来有关部门已经着手在整个纽约市部署这种新兴高科技产品。</p>\n<p>他不敢驻足观看，低着头从那巨大装置旁边走过，一路不停地走回家，然后把自己的脸紧紧地压在枕头里，却不敢哭出声音来，连一句“FUXKYOU, YOUSONOFBITCH”都不能说。</p>\n<p>从那以后，阿瓦登的生活回到了普通状态——就是说和原来一样沉滞、压抑、欠缺激情，健康向上，缺乏低级趣味。兰斯洛特说过：“战争的结果就是，大众的自由意识会将语言推向死亡的边缘”，现在看来，他的预言是很准确的：说话会的覆灭，导致“说话”、“歌剧”、“完全”、“交流”几个词先后被剔除出了健康词汇列表，成为敏感词汇。</p>\n<p>另外，虽然阿拉伯数字还能用，但“1984”这一个数字组合也被屏蔽掉了，这让包括阿瓦登在内的程序员在编写程序时不得不谨慎地检查数字是否违规，这额外增加了很多工作量，让他更加疲惫。</p>\n<p>阿瓦登不是没有担心过，也许在某一天的深夜，他就会忽然接到一封EMAIL，让他留在家里不要动，不要试图在网络做任何动作；接着电话会响起，电子女声会把这一要求重复再重复，直到警察打开他家的大门，把他带去未知的地方，那里有未知的命运等待着他。《1984》后面的情节发展阿瓦登始终不知道，唯一知道的杜拉丝已经彻底失踪了，所以温斯顿和朱丽亚的结局始终是个谜；就好象兰斯洛特、瓦格纳、杜拉丝和阿尔特弥斯的结局一样，也不从得知。其实这两件事对于阿瓦登来说没什么本质性的区别，所以它们也可以看做是同一个谜。</p>\n<p>其实他最担心的，是阿尔特弥斯。每次想到这个名字，阿瓦登就难以抑制心中的郁闷。她究竟会怎么样，彻底被屏蔽掉吗？如果是那样，那么她在这世界上遗留下来的唯一痕迹，就是一个程序员记忆里的假名而已了。</p>\n<p>说话会消失后三个星期，仍旧风平浪静，没有任何人来找过阿瓦登，他也没收到过任何类似内容的EMAIL，阿瓦登一直在想，也许是他们没有吐露出自己的下落，也可能是因为他们根本不知道——他们认识的只是一个叫王二的程序员。这个城市里有数以千计的程序员，而王二是个假名。</p>\n<p>因此，生活一如既往地平静。不，确切地说，还是有一点不同的，那就是互联网络健康词汇列表：那上面的词组消失的速度比以前要快的快，每小时每分钟都有词与单字飞快地在名单上消失，阿瓦登不得不花上大量时间去更新列表，以跟紧当前形势。</p>\n<p>与词汇列表更新速度相对的，EMAIL和网络论坛上的东西越来越乏味。因为人们不得不用极有限的词去表达广泛的意思，大家都变得寡言少语。就连那些秘密的暗语和联系方式也少了许多；整个网络就象是前些天阿瓦登家里出了问题的暖气片一样：虽然名义上是给人带来温暖的东西，但却变的冰冷、僵硬，让人如坠冰窟。</p>\n<p>这一天，阿瓦登从电脑前抬起头来，他看了看窗外迷茫的灰色天空，胸口一阵抽搐，不由得痛苦地咳了一声。他拿起塑料杯，将杯子里的纯净水一饮而尽，杯子丢进同样是塑料质地的垃圾桶里，发出钝钝的撞击声，他觉得自己的脑子也是一团垃圾，举起手敲了敲，果然发出同样钝钝的撞击声。</p>\n<p>然后他拿起大衣，戴上墨绿色的护目镜，走出门去。阿瓦登没带便携式的旁观者，那东西已经不需要了，城市里到处都是主动式的旁观者，随时监听是否有违禁词汇的存在。整个纽约现在就象是互联网络一样，被有关部门营造成十分健康。</p>\n<p>阿瓦登这一次外出是有正当理由的，他决定去取消网络论坛服务，这服务已经用不着了，因为无论EMAIL，新闻组，BBS论坛还是其他什么现在全部都变成了一样的东西。</p>\n<p>从日历来说现在应该是春季，但外面还是很冷，高大的灰色建筑矗立在平地上，仿佛绝对零度下的石林。大团大团的风裹着黄沙与废气穿行其间，风沙无处不在，让人置身其中而难以摆脱。阿瓦登把手揣进兜里，脖子缩进领口，畏缩着向网络部的大楼走去。</p>\n<p>忽然，他停下了脚步，惊讶地站在原地无法动弹。他看到阿尔特弥斯正站在前面的路灯下，穿着黑色的制服。可是她的变化有多么大啊，面容象是老了十岁，满脸都是衰老的皱纹，年轻的活力荡然无存；她听到脚步声，转过头来，两个乌黑的大眼睛显得异常空洞，目光越过阿瓦登延伸到远方，没有一个明晰的焦点。</p>\n<p>阿瓦登万万没有想到会在这个时间这个地点碰到她，这让他已经沉寂已久的心灵泛起了几点火花，可惜他迟钝的神经已经无法表达出“激动”这一个简单的情感了。两个人互相对视了一阵，他终于木然走到她身边，张了张嘴唇，想对她说些什么。但是他掏出今天新发布的健康词汇列表，发现上面是一片空白——终于连最后一个词组也被有关部门屏蔽了。</p>\n<p>于是阿瓦登只好保持着沉默，默默地与面无表情的她擦肩而过，继续向前走去。他的身影逐渐融入同样安静的灰色人群之中，整个城市都显得寂静极了。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck90ziipp0001rh9zcanpf09s","category_id":"ck90ziiud002brh9zgjjieveu","_id":"ck90ziix4007nrh9z1ig1b2tr"},{"post_id":"ck90ziipr0003rh9z9opd3l79","category_id":"ck90ziiud002brh9zgjjieveu","_id":"ck90ziix4007prh9z4i9u252g"},{"post_id":"ck90ziips0005rh9z9zn81pnt","category_id":"ck90ziiuo002hrh9z83y93sz8","_id":"ck90ziix4007rrh9zdhg6600w"},{"post_id":"ck90ziipt0006rh9zgvb40quz","category_id":"ck90ziiuo002jrh9z77lq6th6","_id":"ck90ziix7007trh9z1hfkhlcm"},{"post_id":"ck90ziipt0007rh9zhpa3fmzu","category_id":"ck90ziiuo002hrh9z83y93sz8","_id":"ck90ziix7007vrh9zbruagsrj"},{"post_id":"ck90ziipt0008rh9z71isa60c","category_id":"ck90ziiud002brh9zgjjieveu","_id":"ck90ziix7007xrh9za5l51ac1"},{"post_id":"ck90ziipu0009rh9z8tug00oo","category_id":"ck90ziiuq002prh9zd52b0u8r","_id":"ck90ziix7007zrh9z33pyad8k"},{"post_id":"ck90ziipu000arh9z7pfx9xjo","category_id":"ck90ziiud002brh9zgjjieveu","_id":"ck90ziix70081rh9z9gal9slp"},{"post_id":"ck90ziipv000brh9z11f6f8wl","category_id":"ck90ziiud002brh9zgjjieveu","_id":"ck90ziix70083rh9z6eufdval"},{"post_id":"ck90ziipv000crh9zagxpgxs7","category_id":"ck90ziiud002brh9zgjjieveu","_id":"ck90ziix70085rh9zf0v92yua"},{"post_id":"ck90ziipw000drh9zf67d9ub9","category_id":"ck90ziiuq002prh9zd52b0u8r","_id":"ck90ziix80087rh9z6fvb7q2p"},{"post_id":"ck90ziipw000erh9z87ya5h5k","category_id":"ck90ziiud002brh9zgjjieveu","_id":"ck90ziix80089rh9zb8q102kk"},{"post_id":"ck90ziipx000frh9z4zpqbqjm","category_id":"ck90ziiud002brh9zgjjieveu","_id":"ck90ziix8008brh9zdf5bctia"},{"post_id":"ck90ziipx000grh9za4tf3le6","category_id":"ck90ziiud002brh9zgjjieveu","_id":"ck90ziix8008drh9z28wdbfob"},{"post_id":"ck90ziipx000hrh9zfh1o0urr","category_id":"ck90ziiud002brh9zgjjieveu","_id":"ck90ziix9008frh9ze4rx8p9h"},{"post_id":"ck90ziipy000irh9z6dcf3186","category_id":"ck90ziiud002brh9zgjjieveu","_id":"ck90ziix9008hrh9zdz02ccmk"},{"post_id":"ck90ziipy000jrh9z9fsna0za","category_id":"ck90ziiud002brh9zgjjieveu","_id":"ck90ziix9008jrh9zddc44py8"},{"post_id":"ck90ziipz000krh9zcggr3jj4","category_id":"ck90ziiux003arh9zf7na8z19","_id":"ck90ziix9008lrh9z08tsaryj"},{"post_id":"ck90ziipz000lrh9zhg70c1yg","category_id":"ck90ziiud002brh9zgjjieveu","_id":"ck90ziix9008nrh9zb7zg439j"},{"post_id":"ck90ziiq0000mrh9z6ng0aut1","category_id":"ck90ziiud002brh9zgjjieveu","_id":"ck90ziix9008prh9z3k6ffrwj"},{"post_id":"ck90ziiq0000nrh9z50woetl0","category_id":"ck90ziiud002brh9zgjjieveu","_id":"ck90ziix9008rrh9z9inrh21t"},{"post_id":"ck90ziiq2000orh9zd8c4eyhp","category_id":"ck90ziiud002brh9zgjjieveu","_id":"ck90ziixa008trh9z211caxza"},{"post_id":"ck90ziiq3000prh9zbtsmg5c4","category_id":"ck90ziiud002brh9zgjjieveu","_id":"ck90ziixa008vrh9z5e7yf81j"},{"post_id":"ck90ziiq3000qrh9z2zgkhlui","category_id":"ck90ziiud002brh9zgjjieveu","_id":"ck90ziixa008xrh9z3ael8iwu"},{"post_id":"ck90ziiq4000rrh9z8hdoepux","category_id":"ck90ziiud002brh9zgjjieveu","_id":"ck90ziixa008zrh9z923k6rnu"},{"post_id":"ck90ziiq4000srh9z0r8df5kh","category_id":"ck90ziiud002brh9zgjjieveu","_id":"ck90ziixb0091rh9zbrjl3o7k"},{"post_id":"ck90ziiq4000trh9zdrafhhro","category_id":"ck90ziiud002brh9zgjjieveu","_id":"ck90ziixb0093rh9z9say1knc"},{"post_id":"ck90ziiq5000urh9zc29kd8o6","category_id":"ck90ziiud002brh9zgjjieveu","_id":"ck90ziixb0095rh9z4r7r1yr9"},{"post_id":"ck90ziiq5000vrh9z7o3h65eh","category_id":"ck90ziiuq002prh9zd52b0u8r","_id":"ck90ziixb0097rh9z22eaa7rp"},{"post_id":"ck90ziiq6000wrh9zdvnj8gh3","category_id":"ck90ziiud002brh9zgjjieveu","_id":"ck90ziixb0099rh9z7ljkevl5"},{"post_id":"ck90ziiq6000xrh9z8g6l0odd","category_id":"ck90ziiuq002prh9zd52b0u8r","_id":"ck90ziixb009brh9z5n4t6k0g"},{"post_id":"ck90ziiq6000yrh9z465v62tu","category_id":"ck90ziiuq002prh9zd52b0u8r","_id":"ck90ziixb009drh9z7b5aarxw"},{"post_id":"ck90ziiq7000zrh9zfqgw9oio","category_id":"ck90ziiuq002prh9zd52b0u8r","_id":"ck90ziixb009frh9z0h5f11gv"},{"post_id":"ck90ziiq70010rh9zap1rh63l","category_id":"ck90ziiuq002prh9zd52b0u8r","_id":"ck90ziixb009hrh9z32e4c72m"},{"post_id":"ck90ziiq70011rh9z92tjc28v","category_id":"ck90ziiuq002prh9zd52b0u8r","_id":"ck90ziixb009jrh9zgwpd6x29"},{"post_id":"ck90ziiq80012rh9z1923g8me","category_id":"ck90ziiuq002prh9zd52b0u8r","_id":"ck90ziixc009lrh9z8tvg4xih"},{"post_id":"ck90ziiq80013rh9z851n8gnw","category_id":"ck90ziiuq002prh9zd52b0u8r","_id":"ck90ziixc009nrh9z2wlnhymi"},{"post_id":"ck90ziiq80014rh9z3vjzfkb4","category_id":"ck90ziiuq002prh9zd52b0u8r","_id":"ck90ziixc009prh9za7lh4khy"},{"post_id":"ck90ziiq90015rh9zc55c4cby","category_id":"ck90ziivd004frh9z7dln94f3","_id":"ck90ziixd009rrh9zak7b9qde"},{"post_id":"ck90ziiq90016rh9zh1460xcl","category_id":"ck90ziiuq002prh9zd52b0u8r","_id":"ck90ziixd009trh9z7zs899qd"},{"post_id":"ck90ziiq90017rh9z8a42e45b","category_id":"ck90ziiuq002prh9zd52b0u8r","_id":"ck90ziixd009vrh9z57md65a5"},{"post_id":"ck90ziiqa0018rh9zfkvwfzp0","category_id":"ck90ziiuq002prh9zd52b0u8r","_id":"ck90ziixd009xrh9zdlym3yls"},{"post_id":"ck90ziiqa0019rh9zgghi8v6a","category_id":"ck90ziiuq002prh9zd52b0u8r","_id":"ck90ziixd009zrh9zb87s50ni"},{"post_id":"ck90ziiqa001arh9zbw3yfn9t","category_id":"ck90ziiuq002prh9zd52b0u8r","_id":"ck90ziixd00a1rh9zhfdq9iml"},{"post_id":"ck90ziiqb001brh9z629j0s4b","category_id":"ck90ziiuq002prh9zd52b0u8r","_id":"ck90ziixd00a3rh9z363wfico"},{"post_id":"ck90ziiqb001crh9zb8y50v5a","category_id":"ck90ziiuq002prh9zd52b0u8r","_id":"ck90ziixd00a5rh9z7z3je2jc"},{"post_id":"ck90ziiqc001drh9zhj610x5v","category_id":"ck90ziiuq002prh9zd52b0u8r","_id":"ck90ziixd00a7rh9zho7l6lc4"},{"post_id":"ck90ziiqc001erh9z22ksglm0","category_id":"ck90ziiuq002prh9zd52b0u8r","_id":"ck90ziixe00a9rh9z2whzci3u"},{"post_id":"ck90ziiqc001frh9z476gc599","category_id":"ck90ziivd004frh9z7dln94f3","_id":"ck90ziixe00abrh9z1orcalge"},{"post_id":"ck90ziiqd001grh9z5jau2tz0","category_id":"ck90ziiuq002prh9zd52b0u8r","_id":"ck90ziixe00adrh9z7nro8tya"},{"post_id":"ck90ziiqd001hrh9zdjpw49lp","category_id":"ck90ziivd004frh9z7dln94f3","_id":"ck90ziixe00afrh9z8jmk86s6"},{"post_id":"ck90ziiqd001irh9z63ne7h7q","category_id":"ck90ziiuq002prh9zd52b0u8r","_id":"ck90ziixe00ahrh9za4w0350e"},{"post_id":"ck90ziiqe001jrh9z7bqhcabj","category_id":"ck90ziivd004frh9z7dln94f3","_id":"ck90ziixe00ajrh9za4qwdvul"},{"post_id":"ck90ziiqe001krh9zc1f8be8j","category_id":"ck90ziiuq002prh9zd52b0u8r","_id":"ck90ziixe00alrh9z15czazlb"},{"post_id":"ck90ziiqe001lrh9z1gpe2mw2","category_id":"ck90ziivd004frh9z7dln94f3","_id":"ck90ziixe00anrh9z33wu7qr3"},{"post_id":"ck90ziiqf001mrh9z8c2r3m2b","category_id":"ck90ziiuq002prh9zd52b0u8r","_id":"ck90ziixe00aprh9z0xdnb3jc"},{"post_id":"ck90ziiqf001nrh9z4lxy5rbz","category_id":"ck90ziivd004frh9z7dln94f3","_id":"ck90ziixe00arrh9z7lvu4gox"},{"post_id":"ck90ziiqf001orh9z2cfvhm2l","category_id":"ck90ziivd004frh9z7dln94f3","_id":"ck90ziixe00atrh9zg0gsa5q8"},{"post_id":"ck90ziiqg001prh9z0ega9tqm","category_id":"ck90ziiuq002prh9zd52b0u8r","_id":"ck90ziixe00avrh9z8tefd411"},{"post_id":"ck90ziiqg001qrh9zaj4m9o4e","category_id":"ck90ziiuq002prh9zd52b0u8r","_id":"ck90ziixe00axrh9zbdjn9h2a"},{"post_id":"ck90ziiqg001rrh9z8xlkdqwu","category_id":"ck90ziiuq002prh9zd52b0u8r","_id":"ck90ziixf00azrh9zenz521gy"},{"post_id":"ck90ziiqh001srh9zcg6447o1","category_id":"ck90ziiuq002prh9zd52b0u8r","_id":"ck90ziixf00b1rh9z6bja0i4b"},{"post_id":"ck90ziiqh001trh9z8mfreci5","category_id":"ck90ziiuq002prh9zd52b0u8r","_id":"ck90ziixg00b3rh9z47xdc5kp"},{"post_id":"ck90ziiqi001urh9zg5pkeabo","category_id":"ck90ziiuq002prh9zd52b0u8r","_id":"ck90ziixg00b5rh9z64gnetee"},{"post_id":"ck90ziiqi001vrh9z53d0152s","category_id":"ck90ziiuq002prh9zd52b0u8r","_id":"ck90ziixg00b7rh9zf3q73pds"},{"post_id":"ck90ziiqi001wrh9zbuhq05j5","category_id":"ck90ziiuq002prh9zd52b0u8r","_id":"ck90ziixg00b9rh9z8m6hflcr"},{"post_id":"ck90ziiqi001xrh9zahrh8tg0","category_id":"ck90ziiuq002prh9zd52b0u8r","_id":"ck90ziixg00bbrh9zhq6fd5dz"},{"post_id":"ck90ziiqj001yrh9zebpm07ee","category_id":"ck90ziiuq002prh9zd52b0u8r","_id":"ck90ziixg00bdrh9zd88y7l4q"},{"post_id":"ck90ziiqk001zrh9zgfxg3jkb","category_id":"ck90ziiuq002prh9zd52b0u8r","_id":"ck90ziixg00bfrh9zfzxd0z4a"},{"post_id":"ck90ziiqk0020rh9z2dnxdz28","category_id":"ck90ziivd004frh9z7dln94f3","_id":"ck90ziixg00bhrh9z8soh479t"},{"post_id":"ck90ziiqk0021rh9zd532580o","category_id":"ck90ziivd004frh9z7dln94f3","_id":"ck90ziixg00bjrh9zghcg91bx"},{"post_id":"ck90ziiql0022rh9z6u1kdivj","category_id":"ck90ziivd004frh9z7dln94f3","_id":"ck90ziixg00blrh9zba379bx5"},{"post_id":"ck90ziiql0023rh9z9bvm3pmq","category_id":"ck90ziiuq002prh9zd52b0u8r","_id":"ck90ziixg00bnrh9zdztxfu85"},{"post_id":"ck90ziiqm0024rh9z1fjj421k","category_id":"ck90ziivd004frh9z7dln94f3","_id":"ck90ziixg00bprh9z7el2621m"},{"post_id":"ck90ziiqm0025rh9z5g835urz","category_id":"ck90ziiuq002prh9zd52b0u8r","_id":"ck90ziixg00brrh9z37kc7hfc"},{"post_id":"ck90ziiqm0026rh9z5n1w9bbd","category_id":"ck90ziiuq002prh9zd52b0u8r","_id":"ck90ziixg00btrh9z8ggv6fey"},{"post_id":"ck90ziiqn0027rh9zf5cugicg","category_id":"ck90ziivd004frh9z7dln94f3","_id":"ck90ziixg00bvrh9z73w70rnn"},{"post_id":"ck90ziiqn0028rh9z64wvayv4","category_id":"ck90ziivd004frh9z7dln94f3","_id":"ck90ziixg00bxrh9z0tfbe2vl"},{"post_id":"ck90ziiqn0029rh9z53fiapbo","category_id":"ck90ziiud002brh9zgjjieveu","_id":"ck90ziixh00bzrh9z7b9rclef"},{"post_id":"ck90ziiqo002arh9z2lbc48oc","category_id":"ck90ziiud002brh9zgjjieveu","_id":"ck90ziixh00c1rh9zesu1hysp"},{"post_id":"ck90ziium002erh9z9ox93c8i","category_id":"ck90ziix4007mrh9z5lh8bzi9","_id":"ck90ziiyp00curh9z50n7c8m3"}],"PostTag":[{"post_id":"ck90ziipp0001rh9zcanpf09s","tag_id":"ck90ziiul002crh9zcarbdspi","_id":"ck90ziix4007lrh9z95vb836n"},{"post_id":"ck90ziipr0003rh9z9opd3l79","tag_id":"ck90ziiun002grh9z5v9452ag","_id":"ck90ziix4007orh9z0f6rd6no"},{"post_id":"ck90ziips0005rh9z9zn81pnt","tag_id":"ck90ziiuo002irh9zfug8fph2","_id":"ck90ziix4007qrh9z8v66dhtg"},{"post_id":"ck90ziips0005rh9z9zn81pnt","tag_id":"ck90ziiup002krh9z6emv381k","_id":"ck90ziix7007srh9z4djmbll3"},{"post_id":"ck90ziipt0006rh9zgvb40quz","tag_id":"ck90ziiup002mrh9zgovy5hyj","_id":"ck90ziix7007urh9z16zudsyw"},{"post_id":"ck90ziipt0007rh9zhpa3fmzu","tag_id":"ck90ziiuq002orh9zfmak6dq2","_id":"ck90ziix7007wrh9zcnp951dn"},{"post_id":"ck90ziipt0008rh9z71isa60c","tag_id":"ck90ziiul002crh9zcarbdspi","_id":"ck90ziix7007yrh9zc3ojdkt3"},{"post_id":"ck90ziipu0009rh9z8tug00oo","tag_id":"ck90ziiur002srh9zfe172cnk","_id":"ck90ziix70080rh9zbde90tml"},{"post_id":"ck90ziipu0009rh9z8tug00oo","tag_id":"ck90ziius002urh9zahq776fu","_id":"ck90ziix70082rh9zhezvbwhj"},{"post_id":"ck90ziipu0009rh9z8tug00oo","tag_id":"ck90ziiut002wrh9zb3xacgrd","_id":"ck90ziix70084rh9z93ck17zx"},{"post_id":"ck90ziipu000arh9z7pfx9xjo","tag_id":"ck90ziiup002krh9z6emv381k","_id":"ck90ziix80086rh9z7n50a3hn"},{"post_id":"ck90ziipv000brh9z11f6f8wl","tag_id":"ck90ziiuu0030rh9z7z0x9isb","_id":"ck90ziix80088rh9z9xcm138e"},{"post_id":"ck90ziipv000brh9z11f6f8wl","tag_id":"ck90ziiuu0032rh9zaznc3b6p","_id":"ck90ziix8008arh9z70491w8d"},{"post_id":"ck90ziipv000brh9z11f6f8wl","tag_id":"ck90ziiuv0034rh9z2kmidpmi","_id":"ck90ziix8008crh9zhctefklt"},{"post_id":"ck90ziipv000crh9zagxpgxs7","tag_id":"ck90ziiuw0037rh9z1cmkdes2","_id":"ck90ziix9008erh9z2xef9w9m"},{"post_id":"ck90ziipv000crh9zagxpgxs7","tag_id":"ck90ziiul002crh9zcarbdspi","_id":"ck90ziix9008grh9z7kr372g8"},{"post_id":"ck90ziipv000crh9zagxpgxs7","tag_id":"ck90ziiux003brh9zee3n77re","_id":"ck90ziix9008irh9z94pt43n4"},{"post_id":"ck90ziipw000drh9zf67d9ub9","tag_id":"ck90ziiuy003drh9z6ihfdswy","_id":"ck90ziix9008krh9zaee54q98"},{"post_id":"ck90ziipw000drh9zf67d9ub9","tag_id":"ck90ziiuz003frh9z3i97f0kb","_id":"ck90ziix9008mrh9z4phxd2ej"},{"post_id":"ck90ziipw000erh9z87ya5h5k","tag_id":"ck90ziiul002crh9zcarbdspi","_id":"ck90ziix9008orh9z3oks7voq"},{"post_id":"ck90ziipx000frh9z4zpqbqjm","tag_id":"ck90ziiul002crh9zcarbdspi","_id":"ck90ziix9008qrh9zf8kg4qi5"},{"post_id":"ck90ziipx000grh9za4tf3le6","tag_id":"ck90ziiv2003lrh9zabqb1cfv","_id":"ck90ziix9008srh9z28ey4pdx"},{"post_id":"ck90ziipx000hrh9zfh1o0urr","tag_id":"ck90ziiv3003nrh9z9upha9he","_id":"ck90ziixa008urh9ze51nbyee"},{"post_id":"ck90ziipy000irh9z6dcf3186","tag_id":"ck90ziiuo002irh9zfug8fph2","_id":"ck90ziixa008wrh9zd3mndotg"},{"post_id":"ck90ziipy000irh9z6dcf3186","tag_id":"ck90ziiup002krh9z6emv381k","_id":"ck90ziixa008yrh9z4vavgpl4"},{"post_id":"ck90ziipy000jrh9z9fsna0za","tag_id":"ck90ziiv5003trh9z1r7uegb8","_id":"ck90ziixb0090rh9z4hvl14ot"},{"post_id":"ck90ziipz000krh9zcggr3jj4","tag_id":"ck90ziiv6003vrh9ze4lxfa45","_id":"ck90ziixb0092rh9zdnel1vae"},{"post_id":"ck90ziipz000lrh9zhg70c1yg","tag_id":"ck90ziiv7003xrh9z3pt501ar","_id":"ck90ziixb0094rh9z21mm685q"},{"post_id":"ck90ziiq0000mrh9z6ng0aut1","tag_id":"ck90ziiv80040rh9za4qt55my","_id":"ck90ziixb0096rh9zdiwx5grp"},{"post_id":"ck90ziiq0000nrh9z50woetl0","tag_id":"ck90ziiv80042rh9z8hgrf7t6","_id":"ck90ziixb0098rh9zgoajdj0s"},{"post_id":"ck90ziiq2000orh9zd8c4eyhp","tag_id":"ck90ziiv5003trh9z1r7uegb8","_id":"ck90ziixb009arh9z32nvhvw1"},{"post_id":"ck90ziiq3000prh9zbtsmg5c4","tag_id":"ck90ziiuy003drh9z6ihfdswy","_id":"ck90ziixb009crh9z542335y6"},{"post_id":"ck90ziiq3000qrh9z2zgkhlui","tag_id":"ck90ziiva0048rh9zen40d786","_id":"ck90ziixb009erh9z1q5n6nrj"},{"post_id":"ck90ziiq4000rrh9z8hdoepux","tag_id":"ck90ziivc004arh9z3xty9o8y","_id":"ck90ziixb009grh9z1ud59nwb"},{"post_id":"ck90ziiq4000srh9z0r8df5kh","tag_id":"ck90ziivc004crh9z9bhibic3","_id":"ck90ziixb009irh9zd0sbabra"},{"post_id":"ck90ziiq4000trh9zdrafhhro","tag_id":"ck90ziivc004crh9z9bhibic3","_id":"ck90ziixb009krh9z7cv6fe9j"},{"post_id":"ck90ziiq5000urh9zc29kd8o6","tag_id":"ck90ziive004grh9zb686f9sz","_id":"ck90ziixc009mrh9z7h3n93x8"},{"post_id":"ck90ziiq5000vrh9z7o3h65eh","tag_id":"ck90ziive004irh9zby6zgy1g","_id":"ck90ziixc009orh9zd9of4442"},{"post_id":"ck90ziiq6000wrh9zdvnj8gh3","tag_id":"ck90ziivf004krh9z3r397tg8","_id":"ck90ziixc009qrh9zdk465y9l"},{"post_id":"ck90ziiq6000xrh9z8g6l0odd","tag_id":"ck90ziivf004mrh9z2rzm1lx2","_id":"ck90ziixd009srh9zh2k55rgo"},{"post_id":"ck90ziiq6000yrh9z465v62tu","tag_id":"ck90ziivg004prh9zajj5h5db","_id":"ck90ziixd009urh9zacpl8hxf"},{"post_id":"ck90ziiq7000zrh9zfqgw9oio","tag_id":"ck90ziivh004rrh9zgcabf122","_id":"ck90ziixd009wrh9z3u71ec4s"},{"post_id":"ck90ziiq70010rh9zap1rh63l","tag_id":"ck90ziivh004trh9zaj3y84nm","_id":"ck90ziixd009yrh9z93f71jpz"},{"post_id":"ck90ziiq70011rh9z92tjc28v","tag_id":"ck90ziivi004vrh9zeg735tdc","_id":"ck90ziixd00a0rh9z9kah3355"},{"post_id":"ck90ziiq80012rh9z1923g8me","tag_id":"ck90ziivi004xrh9zdzongn0w","_id":"ck90ziixd00a2rh9z7de31jah"},{"post_id":"ck90ziiq80013rh9z851n8gnw","tag_id":"ck90ziivi004vrh9zeg735tdc","_id":"ck90ziixd00a4rh9z68m65j1p"},{"post_id":"ck90ziiq80014rh9z3vjzfkb4","tag_id":"ck90ziiv2003lrh9zabqb1cfv","_id":"ck90ziixd00a6rh9z9erregan"},{"post_id":"ck90ziiq90015rh9zc55c4cby","tag_id":"ck90ziivk0053rh9zgeyq8vrx","_id":"ck90ziixe00a8rh9z4rqp3mnw"},{"post_id":"ck90ziiq90016rh9zh1460xcl","tag_id":"ck90ziivl0055rh9zcf6h9dq4","_id":"ck90ziixe00aarh9z1youa06s"},{"post_id":"ck90ziiq90017rh9z8a42e45b","tag_id":"ck90ziivl0055rh9zcf6h9dq4","_id":"ck90ziixe00acrh9z7um253no"},{"post_id":"ck90ziiqa0018rh9zfkvwfzp0","tag_id":"ck90ziiun002grh9z5v9452ag","_id":"ck90ziixe00aerh9z34zzbxas"},{"post_id":"ck90ziiqa001arh9zbw3yfn9t","tag_id":"ck90ziivm005brh9z9ow60787","_id":"ck90ziixe00agrh9z75nd09x6"},{"post_id":"ck90ziiqa001arh9zbw3yfn9t","tag_id":"ck90ziivn005erh9z70bv66rt","_id":"ck90ziixe00airh9zdier3t9s"},{"post_id":"ck90ziiqb001brh9z629j0s4b","tag_id":"ck90ziivn005grh9z41du5dau","_id":"ck90ziixe00akrh9z623tgxyj"},{"post_id":"ck90ziiqb001crh9zb8y50v5a","tag_id":"ck90ziivn005grh9z41du5dau","_id":"ck90ziixe00amrh9z566ke91c"},{"post_id":"ck90ziiqc001erh9z22ksglm0","tag_id":"ck90ziiuo002irh9zfug8fph2","_id":"ck90ziixe00aorh9z5ne6cm2j"},{"post_id":"ck90ziiqc001frh9z476gc599","tag_id":"ck90ziivn005grh9z41du5dau","_id":"ck90ziixe00aqrh9zbdhh60vn"},{"post_id":"ck90ziiqc001frh9z476gc599","tag_id":"ck90ziivq005orh9z2x2phgvm","_id":"ck90ziixe00asrh9z4xqm50u5"},{"post_id":"ck90ziiqd001grh9z5jau2tz0","tag_id":"ck90ziivn005grh9z41du5dau","_id":"ck90ziixe00aurh9z0se4covb"},{"post_id":"ck90ziiqd001grh9z5jau2tz0","tag_id":"ck90ziivs005srh9zehrw6u5h","_id":"ck90ziixe00awrh9z2qk0av24"},{"post_id":"ck90ziiqd001hrh9zdjpw49lp","tag_id":"ck90ziivh004rrh9zgcabf122","_id":"ck90ziixf00ayrh9zc4fr6e8i"},{"post_id":"ck90ziiqd001irh9z63ne7h7q","tag_id":"ck90ziivt005wrh9z5i5ghyrb","_id":"ck90ziixf00b0rh9z9evacudk"},{"post_id":"ck90ziiqe001jrh9z7bqhcabj","tag_id":"ck90ziivt005yrh9zchlw23w7","_id":"ck90ziixg00b2rh9z8o27cv2w"},{"post_id":"ck90ziiqe001jrh9z7bqhcabj","tag_id":"ck90ziivu0060rh9z914794kp","_id":"ck90ziixg00b4rh9z6zr185pr"},{"post_id":"ck90ziiqe001krh9zc1f8be8j","tag_id":"ck90ziivq005orh9z2x2phgvm","_id":"ck90ziixg00b6rh9zaeuth35r"},{"post_id":"ck90ziiqe001krh9zc1f8be8j","tag_id":"ck90ziivn005grh9z41du5dau","_id":"ck90ziixg00b8rh9zdaay6zs4"},{"post_id":"ck90ziiqe001krh9zc1f8be8j","tag_id":"ck90ziiut002wrh9zb3xacgrd","_id":"ck90ziixg00barh9z9crsfqct"},{"post_id":"ck90ziiqe001lrh9z1gpe2mw2","tag_id":"ck90ziivn005grh9z41du5dau","_id":"ck90ziixg00bcrh9zbsgz3c6w"},{"post_id":"ck90ziiqe001lrh9z1gpe2mw2","tag_id":"ck90ziivw006arh9z8lfm05nl","_id":"ck90ziixg00berh9z21qf015t"},{"post_id":"ck90ziiqf001mrh9z8c2r3m2b","tag_id":"ck90ziivn005grh9z41du5dau","_id":"ck90ziixg00bgrh9zh9qk506u"},{"post_id":"ck90ziiqf001mrh9z8c2r3m2b","tag_id":"ck90ziivy006frh9zd8bn3jz8","_id":"ck90ziixg00birh9z2h8t92re"},{"post_id":"ck90ziiqf001nrh9z4lxy5rbz","tag_id":"ck90ziivh004rrh9zgcabf122","_id":"ck90ziixg00bkrh9z2uxh70xr"},{"post_id":"ck90ziiqf001nrh9z4lxy5rbz","tag_id":"ck90ziivm005brh9z9ow60787","_id":"ck90ziixg00bmrh9z084w3kqi"},{"post_id":"ck90ziiqf001orh9z2cfvhm2l","tag_id":"ck90ziivn005grh9z41du5dau","_id":"ck90ziixg00borh9z0v7h3hcd"},{"post_id":"ck90ziiqf001orh9z2cfvhm2l","tag_id":"ck90ziivq005orh9z2x2phgvm","_id":"ck90ziixg00bqrh9zdd4fc7p5"},{"post_id":"ck90ziiqf001orh9z2cfvhm2l","tag_id":"ck90ziiw0006orh9z7lnv9djy","_id":"ck90ziixg00bsrh9z0gomgg2r"},{"post_id":"ck90ziiqg001prh9z0ega9tqm","tag_id":"ck90ziiw0006orh9z7lnv9djy","_id":"ck90ziixg00burh9z69d70xbm"},{"post_id":"ck90ziiqg001qrh9zaj4m9o4e","tag_id":"ck90ziiw2006qrh9z3ftc0ijz","_id":"ck90ziixg00bwrh9z3q44gsm7"},{"post_id":"ck90ziiqg001qrh9zaj4m9o4e","tag_id":"ck90ziiut002wrh9zb3xacgrd","_id":"ck90ziixh00byrh9z0c4bhqgw"},{"post_id":"ck90ziiqg001rrh9z8xlkdqwu","tag_id":"ck90ziivh004rrh9zgcabf122","_id":"ck90ziixh00c0rh9zglsf2ogp"},{"post_id":"ck90ziiqh001srh9zcg6447o1","tag_id":"ck90ziiw3006trh9zhk7obh9m","_id":"ck90ziixh00c2rh9zcunwfwjn"},{"post_id":"ck90ziiqh001srh9zcg6447o1","tag_id":"ck90ziiw3006urh9zcz7t3a6s","_id":"ck90ziixi00c3rh9z73vo0hz7"},{"post_id":"ck90ziiqi001vrh9z53d0152s","tag_id":"ck90ziiuy003drh9z6ihfdswy","_id":"ck90ziixi00c4rh9z0adofc84"},{"post_id":"ck90ziiqi001vrh9z53d0152s","tag_id":"ck90ziiw4006wrh9z1qdx4tn9","_id":"ck90ziixi00c5rh9zfov8c1q8"},{"post_id":"ck90ziiqj001yrh9zebpm07ee","tag_id":"ck90ziiw4006xrh9z2xqf0irs","_id":"ck90ziixi00c6rh9z71t8aoxc"},{"post_id":"ck90ziiqk001zrh9zgfxg3jkb","tag_id":"ck90ziiw5006yrh9zf84bb0ey","_id":"ck90ziixi00c7rh9z8hlmcygo"},{"post_id":"ck90ziiqk001zrh9zgfxg3jkb","tag_id":"ck90ziivn005grh9z41du5dau","_id":"ck90ziixi00c8rh9z7bnqew8i"},{"post_id":"ck90ziiqk0020rh9z2dnxdz28","tag_id":"ck90ziiw60070rh9zdtnuel4m","_id":"ck90ziixi00c9rh9z5wszf20c"},{"post_id":"ck90ziiqk0021rh9zd532580o","tag_id":"ck90ziivm005brh9z9ow60787","_id":"ck90ziixi00carh9z54tz6prp"},{"post_id":"ck90ziiqk0021rh9zd532580o","tag_id":"ck90ziivh004rrh9zgcabf122","_id":"ck90ziixi00cbrh9z746tgh0t"},{"post_id":"ck90ziiql0022rh9z6u1kdivj","tag_id":"ck90ziivi004vrh9zeg735tdc","_id":"ck90ziixi00ccrh9z29869e6z"},{"post_id":"ck90ziiql0022rh9z6u1kdivj","tag_id":"ck90ziiw70074rh9zaxzlb8d2","_id":"ck90ziixi00cdrh9zdimy8kqn"},{"post_id":"ck90ziiql0022rh9z6u1kdivj","tag_id":"ck90ziiuy003drh9z6ihfdswy","_id":"ck90ziixi00cerh9z9m8mgk65"},{"post_id":"ck90ziiql0022rh9z6u1kdivj","tag_id":"ck90ziiw70076rh9zcw9f4jw2","_id":"ck90ziixi00cfrh9zdor2f8ms"},{"post_id":"ck90ziiql0022rh9z6u1kdivj","tag_id":"ck90ziiw70077rh9zcjn4hnus","_id":"ck90ziixi00cgrh9zbxlq26jj"},{"post_id":"ck90ziiql0023rh9z9bvm3pmq","tag_id":"ck90ziiw80078rh9zfgh99889","_id":"ck90ziixi00chrh9z09lo3thc"},{"post_id":"ck90ziiql0023rh9z9bvm3pmq","tag_id":"ck90ziiw80079rh9zbgz84wig","_id":"ck90ziixi00cirh9zbbwphkwh"},{"post_id":"ck90ziiqm0024rh9z1fjj421k","tag_id":"ck90ziivu0060rh9z914794kp","_id":"ck90ziixi00cjrh9zh39e7f9v"},{"post_id":"ck90ziiqm0024rh9z1fjj421k","tag_id":"ck90ziiw8007brh9z9o2s0h99","_id":"ck90ziixi00ckrh9z450jgc08"},{"post_id":"ck90ziiqm0024rh9z1fjj421k","tag_id":"ck90ziiw9007crh9zctyi07j1","_id":"ck90ziixi00clrh9zgrrieuqe"},{"post_id":"ck90ziiqm0025rh9z5g835urz","tag_id":"ck90ziiw9007drh9zasxq29db","_id":"ck90ziixi00cmrh9zcahe6ez2"},{"post_id":"ck90ziiqm0025rh9z5g835urz","tag_id":"ck90ziivh004trh9zaj3y84nm","_id":"ck90ziixi00cnrh9z541588w8"},{"post_id":"ck90ziiqm0026rh9z5n1w9bbd","tag_id":"ck90ziivh004rrh9zgcabf122","_id":"ck90ziixi00corh9zdz371fkj"},{"post_id":"ck90ziiqm0026rh9z5n1w9bbd","tag_id":"ck90ziiwa007grh9z1gbm2daq","_id":"ck90ziixi00cprh9z3nt5ajh4"},{"post_id":"ck90ziiqn0027rh9zf5cugicg","tag_id":"ck90ziivf004krh9z3r397tg8","_id":"ck90ziixi00cqrh9z2cw82ukt"},{"post_id":"ck90ziiqn0028rh9z64wvayv4","tag_id":"ck90ziiwa007irh9z2prch70m","_id":"ck90ziixi00crrh9z1egcdpkd"},{"post_id":"ck90ziiqn0029rh9z53fiapbo","tag_id":"ck90ziiw2006qrh9z3ftc0ijz","_id":"ck90ziixi00csrh9z656t2ynx"},{"post_id":"ck90ziiqo002arh9z2lbc48oc","tag_id":"ck90ziiwb007krh9zg0qcgv2r","_id":"ck90ziixi00ctrh9zc2j85pn6"}],"Tag":[{"name":"http","_id":"ck90ziiul002crh9zcarbdspi"},{"name":"javascript","_id":"ck90ziiun002grh9z5v9452ag"},{"name":"hexo","_id":"ck90ziiuo002irh9zfug8fph2"},{"name":"git","_id":"ck90ziiup002krh9z6emv381k"},{"name":"workflow","_id":"ck90ziiup002mrh9zgovy5hyj"},{"name":"bootstrap","_id":"ck90ziiuq002orh9zfmak6dq2"},{"name":"node.js","_id":"ck90ziiur002srh9zfe172cnk"},{"name":"express","_id":"ck90ziius002urh9zahq776fu"},{"name":"mysql","_id":"ck90ziiut002wrh9zb3xacgrd"},{"name":"HTML","_id":"ck90ziiuu0030rh9z7z0x9isb"},{"name":"XML","_id":"ck90ziiuu0032rh9zaznc3b6p"},{"name":"XHTML","_id":"ck90ziiuv0034rh9z2kmidpmi"},{"name":"dns","_id":"ck90ziiuw0037rh9z1cmkdes2"},{"name":"tcp/ip","_id":"ck90ziiux003brh9zee3n77re"},{"name":"css","_id":"ck90ziiuy003drh9z6ihfdswy"},{"name":"box","_id":"ck90ziiuz003frh9z3i97f0kb"},{"name":"SSR","_id":"ck90ziiv2003lrh9zabqb1cfv"},{"name":"Semver","_id":"ck90ziiv3003nrh9z9upha9he"},{"name":"CSS","_id":"ck90ziiv5003trh9z1r7uegb8"},{"name":"Plugin","_id":"ck90ziiv6003vrh9ze4lxfa45"},{"name":"HTTP","_id":"ck90ziiv7003xrh9z3pt501ar"},{"name":"portal","_id":"ck90ziiv80040rh9za4qt55my"},{"name":"ScrollWatch","_id":"ck90ziiv80042rh9z8hgrf7t6"},{"name":"浏览器","_id":"ck90ziiva0048rh9zen40d786"},{"name":"JS","_id":"ck90ziivc004arh9z3xty9o8y"},{"name":"es6","_id":"ck90ziivc004crh9z9bhibic3"},{"name":"Linux","_id":"ck90ziive004grh9zb686f9sz"},{"name":"NAS","_id":"ck90ziive004irh9zby6zgy1g"},{"name":"webpack","_id":"ck90ziivf004krh9z3r397tg8"},{"name":"加密","_id":"ck90ziivf004mrh9z2rzm1lx2"},{"name":"翻墙","_id":"ck90ziivg004prh9zajj5h5db"},{"name":"JavaScript","_id":"ck90ziivh004rrh9zgcabf122"},{"name":"mac","_id":"ck90ziivh004trh9zaj3y84nm"},{"name":"vscode","_id":"ck90ziivi004vrh9zeg735tdc"},{"name":"steam","_id":"ck90ziivi004xrh9zdzongn0w"},{"name":"服务器","_id":"ck90ziivk0053rh9zgeyq8vrx"},{"name":"linux","_id":"ck90ziivl0055rh9zcf6h9dq4"},{"name":"vue","_id":"ck90ziivm005brh9z9ow60787"},{"name":"element","_id":"ck90ziivn005erh9z70bv66rt"},{"name":"nodejs","_id":"ck90ziivn005grh9z41du5dau"},{"name":"koa","_id":"ck90ziivq005orh9z2x2phgvm"},{"name":"npm","_id":"ck90ziivs005srh9zehrw6u5h"},{"name":"网络","_id":"ck90ziivt005wrh9z5i5ghyrb"},{"name":"nas","_id":"ck90ziivt005yrh9zchlw23w7"},{"name":"frp","_id":"ck90ziivu0060rh9z914794kp"},{"name":"jwt","_id":"ck90ziivw006arh9z8lfm05nl"},{"name":"ldap","_id":"ck90ziivy006frh9zd8bn3jz8"},{"name":"axios","_id":"ck90ziiw0006orh9z7lnv9djy"},{"name":"docker","_id":"ck90ziiw2006qrh9z3ftc0ijz"},{"name":"taro","_id":"ck90ziiw3006trh9zhk7obh9m"},{"name":"微信","_id":"ck90ziiw3006urh9zcz7t3a6s"},{"name":"font","_id":"ck90ziiw4006wrh9z1qdx4tn9"},{"name":"chrome","_id":"ck90ziiw4006xrh9z2xqf0irs"},{"name":"wechat","_id":"ck90ziiw5006yrh9zf84bb0ey"},{"name":"echarts","_id":"ck90ziiw60070rh9zdtnuel4m"},{"name":"小程序","_id":"ck90ziiw70074rh9zaxzlb8d2"},{"name":"scss","_id":"ck90ziiw70076rh9zcw9f4jw2"},{"name":"less","_id":"ck90ziiw70077rh9zcjn4hnus"},{"name":"v2ray","_id":"ck90ziiw80078rh9zfgh99889"},{"name":"nginx","_id":"ck90ziiw80079rh9zbgz84wig"},{"name":"https","_id":"ck90ziiw8007brh9z9o2s0h99"},{"name":"群辉","_id":"ck90ziiw9007crh9zctyi07j1"},{"name":"alfred","_id":"ck90ziiw9007drh9zasxq29db"},{"name":"this","_id":"ck90ziiwa007grh9z1gbm2daq"},{"name":"python","_id":"ck90ziiwa007irh9z2prch70m"},{"name":"ES6","_id":"ck90ziiwb007krh9zg0qcgv2r"}]}}