{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/Staticfile","path":"Staticfile","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/affix.js","path":"js/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/exturl.js","path":"js/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/js.cookie.js","path":"js/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/post-details.js","path":"js/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/scroll-cookie.js","path":"js/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/scrollspy.js","path":"js/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/LICENSE","path":"lib/canvas-nest/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/README.md","path":"lib/canvas-nest/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest-nomobile.min.js","path":"lib/canvas-nest/canvas-nest-nomobile.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/LICENSE","path":"lib/canvas-ribbon/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/README.md","path":"lib/canvas-ribbon/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1542358446333},{"_id":"source/Staticfile","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1492524306000},{"_id":"source/.DS_Store","hash":"5cbf978f2788069de2246ae3f85cf047feab6138","modified":1560478402688},{"_id":"themes/next/.all-contributorsrc","hash":"d139a3b623b2e40bbff5c96ad44adf7dbdbc5be1","modified":1560475999586},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1560475999586},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1560475999586},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1560475999586},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1560475999586},{"_id":"themes/next/.gitignore","hash":"b80cec1d5e6a73d1cec382aad8046d1352a1e963","modified":1560475999588},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1560475999588},{"_id":"themes/next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1560475999589},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1560475999589},{"_id":"themes/next/README.md","hash":"7958c3f70b2133b479ddaf525cc4b6d87a37e04a","modified":1560475999589},{"_id":"themes/next/_config.yml","hash":"fc364f8fb58e1a80e31eb78bb1906f006fa5d7c8","modified":1560479244845},{"_id":"themes/next/bower.json","hash":"dbabc4b5b186070d425777562587de19848b1d56","modified":1560475999590},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1560475999590},{"_id":"themes/next/gulpfile.coffee","hash":"23bd9587807edc4dbecb5c5a29ab96ade24458b5","modified":1560475999593},{"_id":"themes/next/package.json","hash":"d1fc59c32d27178d53f9d2c479443ed682e5bd91","modified":1560475999613},{"_id":"source/_posts/.DS_Store","hash":"9114c12707682ca5aaad9271cd4c8536560c0358","modified":1560413054246},{"_id":"source/_posts/2017-04-03httpcode.md","hash":"7ffc061097c8aed5261e056db1a19e77c7aaa7f8","modified":1491220206000},{"_id":"source/_posts/2017.03.26-bibao.md","hash":"5c3501eb4009ce973752de82ddbc489cf96aa1ff","modified":1490611324000},{"_id":"source/_posts/2017.03.26.md","hash":"06d400a282676b08d68823163b8aff0d0d16d358","modified":1490611274000},{"_id":"source/_posts/2017.03.27workflow.md","hash":"b6748a4eb00e1107c3ccc629e1a6fedfd106f530","modified":1490616842000},{"_id":"source/_posts/2017.04.02bootstrap.md","hash":"69a9178c0c8a6e55d21a7516dfaa18817c54ae35","modified":1491137460000},{"_id":"source/_posts/2017.04.05cookie&session.md","hash":"4dfc29a52620644023aeeff360287910e4047dbc","modified":1491394518000},{"_id":"source/_posts/2017.04.06mysql.md","hash":"1ad4c98f659e5ca90386d0e839fbf2578cdfb100","modified":1491555288000},{"_id":"source/_posts/2017.04.09.vue.md","hash":"6d1845f46abd0d8938990a8b7787107663732e2c","modified":1491742290000},{"_id":"source/_posts/2017.04.09vue+bootstrap.md","hash":"6496357d4f460b0f4b9888b9ee27a04edbbee214","modified":1491742346000},{"_id":"source/_posts/2017.04.18radio&dropdownlist.md","hash":"98a93b847e7602b40f623f5d2a0f80e01bd58d09","modified":1492778584000},{"_id":"source/_posts/2017.04.21.git.md","hash":"4a0de9f91a3651fd4e101677860b46a930e06158","modified":1492842656000},{"_id":"source/_posts/2017.04.23vue.js.md","hash":"4632f687048be625e65769fe4d9b07d93eff1371","modified":1492934346000},{"_id":"source/_posts/2017.04.24.html&xml&xhtml.md","hash":"7105d3c2434610891c9f68336b2764325a90835b","modified":1493040040000},{"_id":"source/_posts/2017.05.23.md","hash":"d783194ea48e8ba80f6caf6099afb20a262a1277","modified":1495552606000},{"_id":"source/_posts/2017.04.25.vueresource.md","hash":"6a54322eeb3143e8a072143140c6e676d6a6c5cc","modified":1493124524000},{"_id":"source/_posts/2017.05.24dom.dom.md","hash":"6a041b3c34737ff58f75b52bbb5574fc83829762","modified":1495634370000},{"_id":"source/_posts/2017.05.24speedup.md","hash":"bbfab3bf1817d3591a4658e4c726d7056ef48448","modified":1495596644000},{"_id":"source/_posts/2017.05.25.box.md","hash":"f4aa9e5c8cac3613c43478e0a90d8fa8758a25a6","modified":1495687138000},{"_id":"source/_posts/2017.05.2huayu.md","hash":"5eeccde3bf7d15877904b39d67afb06897d84f37","modified":1495622654000},{"_id":"source/_posts/2018.11.16SSR.md","hash":"d538f5008ddb05204eaa834aab6193d8798bf25e","modified":1547283376300},{"_id":"source/_posts/2018.11.19CSS-selector.md","hash":"ab95fa09c3ea4b8105dacf54cc61d2e9fab45491","modified":1543394672732},{"_id":"source/_posts/2018.11.20semver.md","hash":"063932a99270fd40270368c92b6d82c7b26af68f","modified":1542702755345},{"_id":"source/_posts/2018.11.21.deployHexo.md","hash":"e8a6843eda5658cf51f09e19e40b0eab3396e116","modified":1542792468694},{"_id":"source/_posts/2018.11.21plg.md","hash":"b3d556f04d6e0865a1f7e5e8ebaa456cfa5598d1","modified":1542790500169},{"_id":"source/_posts/2018.11.23.HTTP.md","hash":"d8f56e978bbe23ca32ffd0a23e5571bea52ba20f","modified":1543195396604},{"_id":"source/_posts/2018.11.29portal.md","hash":"b2c674c9ee73d312b98171e7e08326949bd043ae","modified":1543475469150},{"_id":"source/_posts/2018.11.30.ScrollWatch.md","hash":"0066903ad64ebdcdf9b45f063175bb989e71b829","modified":1543544844518},{"_id":"source/_posts/2018.12.07.pseudo.md","hash":"6a3dfcf4fecb4fddb94be7c13bfaf2be10d53d3d","modified":1544164620105},{"_id":"source/_posts/2018.12.09.vertical.md","hash":"89ee5062f3905cd8b5d7be169786e782ae2fe489","modified":1544349915314},{"_id":"source/_posts/2018.12.12.broswercheck.md","hash":"626846c727f5b096c3471984dede4a549def9573","modified":1544607515477},{"_id":"source/_posts/2018.12.19.impress.js.md","hash":"321e6dd191ba27b1e974645fe82dbabf4eb61e00","modified":1545195391579},{"_id":"source/_posts/2018.12.24.es6-promise.md","hash":"f75523a5d530cf26ca8caa516b161669537ab6c0","modified":1545643739737},{"_id":"source/_posts/2018.12.27.es6-import.md","hash":"0ca9787b5cd6fa0ce52a7340d699398299fc3b95","modified":1545903378245},{"_id":"source/_posts/2019.01.09.linuxCommand.md","hash":"d3be357dd1a47242622b70b526b8f6fdf2abb062","modified":1559030715985},{"_id":"source/_posts/2019.01.09.webpack-4.md","hash":"7312b76f2597ffc8e0694bb0f93e6e7a0a413011","modified":1547436619496},{"_id":"source/_posts/2019.02.01.NAS.md","hash":"d01ffd88ec0c47563a799344f31c9599aecdb693","modified":1549013008807},{"_id":"source/_posts/2019.05.13.encrypt.md","hash":"85adf4eae04638469c8b32be6e21d115fd4f6b72","modified":1557730103834},{"_id":"source/_posts/2019.05.14.cn2.md","hash":"ccfd52570f20fad7fec2215bf4b5e7e2eb4ab131","modified":1557884393243},{"_id":"source/_posts/2019.05.24.sort.md","hash":"e3c27b78762c20ff7324c02de8fc8a9a432c7490","modified":1558714635274},{"_id":"source/_posts/2019.05.25.colorfulMacTerminal.md","hash":"185a03059d37ca8caff511cc0dc9b012c37006e6","modified":1559027138899},{"_id":"source/_posts/2019.05.28.asf.md","hash":"0a6eb70c17e6fcdcaf67c14c327a7a54be42d29f","modified":1559029571926},{"_id":"source/_posts/2019.05.29.vscodesync.md","hash":"0718a6942ae9a70dd03ad45541194869253adbe9","modified":1559107915612},{"_id":"source/_posts/2019.05.29.ycy.md","hash":"dbccf8297213144f441dc8a6e73bf6fd5942c211","modified":1559108603614},{"_id":"source/_posts/2019.06.04.Algorithm.md","hash":"b629843af1687fb22045385d2136f8a7f79d52ae","modified":1559628926212},{"_id":"source/_posts/2019.06.13.nginx.md","hash":"8be07dbe273318b2496d1d34db37b6afd64b7b48","modified":1560477743723},{"_id":"source/_posts/docker.md","hash":"5481dd1b29787de3027eca945dbc0165d9e0ff17","modified":1542940869327},{"_id":"source/_posts/es6.md","hash":"c1a80a515f4b10e02b57fa8b6017e1ede6922b96","modified":1547282849270},{"_id":"source/categories/index-1.md","hash":"82cb7da5596d9a6800085e77f9f17f9e9b5cb26f","modified":1560478419955},{"_id":"source/categories/index.md","hash":"d7067bbd0d4b98920146cbdc126aec2c346f5ef8","modified":1560478410344},{"_id":"source/tags/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1560477922854},{"_id":"source/tags/index.md","hash":"f20fa8142054f5664d31576cc82ba0f32d038c25","modified":1560477942457},{"_id":"source/about/index.md","hash":"6faa1e0edd19858e5dfea59a565f3a7931a655c5","modified":1542358206456},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1560475999581},{"_id":"themes/next/.git/config","hash":"e2ca9fa6f115d4406d24bf0df53fc26ce13e0c9b","modified":1560475999582},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1560475995406},{"_id":"themes/next/.git/index","hash":"eb6114181a3a7fd510641182aa1332947bfad2db","modified":1560479018090},{"_id":"themes/next/.git/packed-refs","hash":"231088f283e483ece3b99fc8dbd93c29717af789","modified":1560475999580},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"c149f003d03501565e7688915cd8f2e99fbf8f42","modified":1560475999586},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"7ce6cdc8adcbfda68fcbcc54c8b9fd3434a37993","modified":1560475999587},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1560475999587},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"3239625bb2573e61f7bcce27a74882a9ff7021e9","modified":1560475999587},{"_id":"themes/next/.github/auto_assign.yml","hash":"cb68a1dca1c4623448c2ca899614a9f21df1b036","modified":1560475999587},{"_id":"themes/next/.github/config.yml","hash":"8a5cbf5aa9529390fe0a782758aca9c3a02f9dcf","modified":1560475999587},{"_id":"themes/next/.github/eslint-disable-bot.yml","hash":"16541fb7b80f5ab90135db96285badb63c4d7d3e","modified":1560475999588},{"_id":"themes/next/.github/lock.yml","hash":"585d2c471047be320aa62f2b74dad797bf09c530","modified":1560475999588},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1560475999588},{"_id":"themes/next/.github/release-drafter.yml","hash":"c9fdbbdf712327a8ae1ed5972973a75802e245bc","modified":1560475999588},{"_id":"themes/next/.github/stale.yml","hash":"41bf97ee86b8940a0b2e754499ec77fd2b44b717","modified":1560475999588},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1560475999588},{"_id":"themes/next/.github/topissuebot.yml","hash":"10665bf2b5aba351725715c71e94ad183a0e8f18","modified":1560475999588},{"_id":"themes/next/.github/weekly-digest.yml","hash":"404e4ccb7fcd6587bc9b0247a7a7ff256d21f2cb","modified":1560475999588},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1560475999590},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"0d2f22ea09dd1ef63c66164e048d8239d2ccb2b8","modified":1560475999590},{"_id":"themes/next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1560475999590},{"_id":"themes/next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1560475999590},{"_id":"themes/next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1560475999591},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"212a36d57495990b5f56e46ca8dce1d76c199660","modified":1560475999591},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1560475999591},{"_id":"themes/next/docs/MATH.md","hash":"026d2cff73c22a30ea39c50783557ff4913aceac","modified":1560475999591},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1560475999591},{"_id":"themes/next/languages/de.yml","hash":"9e524b2bdfb848504b93a51c5650e76bba5fa9e0","modified":1560475999593},{"_id":"themes/next/languages/default.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1560475999594},{"_id":"themes/next/languages/en.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1560475999594},{"_id":"themes/next/languages/es.yml","hash":"1752429687861b5cedd063c6ebe5dacefbe7e5a7","modified":1560475999594},{"_id":"themes/next/languages/fa.yml","hash":"cd41db832af5e399590b70a5227cfe0b0e98e101","modified":1560475999594},{"_id":"themes/next/languages/fr.yml","hash":"7005c2b42c2c6e82bd7a1be5cc2f443b5fc79105","modified":1560475999594},{"_id":"themes/next/languages/id.yml","hash":"1c4868837f5109f1df863b04fe627352c31d404b","modified":1560475999594},{"_id":"themes/next/languages/it.yml","hash":"b30ff77ad8044e3b021a3b09187cd377dc789fd2","modified":1560475999594},{"_id":"themes/next/languages/ja.yml","hash":"1dc35e436da6214cdb3c2ff44bc4a06d0be5b9a0","modified":1560475999594},{"_id":"themes/next/languages/ko.yml","hash":"20bfaa7600d35235996c18e5c13dcef89c119626","modified":1560475999594},{"_id":"themes/next/languages/nl.yml","hash":"1c44b3cb2f817808607f3bf6ef47f58ce7599995","modified":1560475999594},{"_id":"themes/next/languages/pt-BR.yml","hash":"08b913a5cf4cc160083069cb4dfb2d66eecd1218","modified":1560475999595},{"_id":"themes/next/languages/pt.yml","hash":"8ddac820e2c17b484b56c0da8881e142b10e221b","modified":1560475999595},{"_id":"themes/next/languages/ru.yml","hash":"db0644e738d2306ac38567aa183ca3e859a3980f","modified":1560475999595},{"_id":"themes/next/languages/tr.yml","hash":"c5f0c20743b1dd52ccb256050b1397d023e6bcd9","modified":1560475999595},{"_id":"themes/next/languages/uk.yml","hash":"1eb59e581568da9a81d6e20541b4ada5fc1c55c0","modified":1560475999596},{"_id":"themes/next/languages/vi.yml","hash":"ba7aff8f88e03f69a0acf7f1b90ee03e077ee88e","modified":1560475999596},{"_id":"themes/next/languages/zh-CN.yml","hash":"fbbf3a0b664ae8e927c700b0a813692b94345156","modified":1560475999596},{"_id":"themes/next/languages/zh-HK.yml","hash":"7903b96912c605e630fb695534012501b2fad805","modified":1560475999596},{"_id":"themes/next/languages/zh-TW.yml","hash":"6e6d2cd8f4244cb1b349b94904cb4770935acefd","modified":1560475999596},{"_id":"themes/next/layout/_layout.swig","hash":"74701fcf2303d59400587436ab4c244e04df7ad9","modified":1560475999597},{"_id":"themes/next/layout/archive.swig","hash":"7e8f3a41a68e912f2b2aaba905d314306ccaf794","modified":1560475999612},{"_id":"themes/next/layout/category.swig","hash":"dda0e6b2139decaf5e865d22ec9d45fdb615a703","modified":1560475999612},{"_id":"themes/next/layout/index.swig","hash":"c2a3896c64e96790edc10426ef586b6186a87f46","modified":1560475999612},{"_id":"themes/next/layout/page.swig","hash":"d8a6cbf6f611c5d68d5da430cb6dc7010ff2c7e0","modified":1560475999613},{"_id":"themes/next/layout/post.swig","hash":"f74929fd792541916eb25c2addfb35431be071ba","modified":1560475999613},{"_id":"themes/next/layout/schedule.swig","hash":"3268dd3d90d8b0e142cfa1a2ebb23355baeda148","modified":1560475999613},{"_id":"themes/next/layout/tag.swig","hash":"a6be69a90924c9d2f4d90fb4867234859bd2c2e9","modified":1560475999613},{"_id":"themes/next/scripts/merge-configs.js","hash":"33afe97284d34542015d358a720823feeebef120","modified":1560475999614},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1560475999615},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1560475999660},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1560475999660},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1560475999660},{"_id":"source/_posts/2017.07.01.md","hash":"32b3c87d1ebc6b6b4ccc4ef4964f7b0d5d0cb114","modified":1498882470000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1560475999641},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1560475995406},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1560475995406},{"_id":"themes/next/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1560475995407},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1560475995407},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1560475995407},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1560475995406},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1560475995407},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1560475995406},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1560475995407},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1560475995407},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1560475995407},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1560475995406},{"_id":"themes/next/.git/logs/HEAD","hash":"dffe6073b9fc3cba8a2e0affcffe7dcdaec37c0e","modified":1560475999582},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c37a60580c901c79ccb22564b228a46e06207445","modified":1560475999587},{"_id":"themes/next/.github/ISSUE_TEMPLATE/custom-issue-template.md","hash":"57e1e06e845193e80c7df4a4454af28352526f7a","modified":1560475999587},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"07c423cce4157b8e2dbf60907ccbf3f18c4cf98a","modified":1560475999587},{"_id":"themes/next/.github/ISSUE_TEMPLATE/non-english.md","hash":"0b0727ff4d5180ae67f930fb4f8e9488e33eda9f","modified":1560475999587},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1560475999591},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1560475999591},{"_id":"themes/next/docs/ru/README.md","hash":"4d7ef717d0b57288e606996ee56c20ffd59d5a99","modified":1560475999592},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1560475999592},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"caa624092175d44e3d3a8c6ca23922718da2354c","modified":1560475999592},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"b218e30df4126b6adc87684775ac4c86ea7f7958","modified":1560475999592},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"650fcb9135b6f09d48e866c19e0dbccd831367f1","modified":1560475999592},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1560475999592},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1560475999593},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"115ffbde2b3ce01ef1f8c2b3833e6f6794650132","modified":1560475999593},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"83feca62190abcca0332915ffe0eefe582573085","modified":1560475999593},{"_id":"themes/next/docs/zh-CN/README.md","hash":"cdd7a8bdcf4a83ff4c74ee6c95c6bcc0b8c1831c","modified":1560475999593},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"5da70d7fa0c988a66a469b9795d33d471a4a4433","modified":1560475999593},{"_id":"themes/next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1560475999597},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1560475999597},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1560475999597},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"89b0a0e64637bf5b0cfea0a23642df3d95eedfa4","modified":1560475999598},{"_id":"themes/next/layout/_macro/post.swig","hash":"c6ca1a3d89660e8d09dd75cf98d032f3cb3b79b4","modified":1560475999599},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"480d93619479dcfcbec6906803bb38b2dfbeae53","modified":1560475999599},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5352f96f4544c1520babf1cec7b44ddf2f8057b3","modified":1560475999599},{"_id":"themes/next/layout/_partials/footer.swig","hash":"589f545333e21a8c7823bce89ab45cf1eb7db6e2","modified":1560475999600},{"_id":"themes/next/layout/_partials/github-banner.swig","hash":"6357537ac0bb114aed4d61bafb39e6690a413697","modified":1560475999600},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1560475999602},{"_id":"themes/next/layout/_partials/post-edit.swig","hash":"06dac109504812b63766a80ede9ddacbd42d227d","modified":1560475999602},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"50be1762f60222379a8bef5e42ab1a0f3872b7ff","modified":1560475999603},{"_id":"themes/next/layout/_scripts/exturl.swig","hash":"61ae10d41f67ece004a025077fdb28724af05090","modified":1560475999604},{"_id":"themes/next/layout/_scripts/next-boot.swig","hash":"012e3ece672cc3b13d5e032139f328d3426d7d65","modified":1560475999604},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"edaff4766e0c05fd5c889d9dd32884d376bef9d9","modified":1560475999604},{"_id":"themes/next/layout/_scripts/scroll-cookie.swig","hash":"ccd13d73429ef91ef5e8b7d9fa43c8188facdf41","modified":1560475999605},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9cd491b8ff2dc9d6976cd9e89c4e56678e3bcefa","modified":1560475999605},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"4ccf2abbfd070874265b0436a3eff21f7c998dfb","modified":1560475999607},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"10b61a8bac671e375916a4d234c120117098a78f","modified":1560475999607},{"_id":"themes/next/layout/_third-party/chatra.swig","hash":"eefb68b69b4b0ed558ee0324ccd711990059b20d","modified":1560475999607},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"a7126355227236f9433615edfd89e86fd51ed676","modified":1560475999609},{"_id":"themes/next/layout/_third-party/mermaid.swig","hash":"d6e6ddda836bd9e2e8d9767a910c7d3280080e81","modified":1560475999610},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"2c4a66be4677d3e4dec3f169ac8a769098dad1fe","modified":1560475999611},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"c28f9dc96ab735daeb7f599f86470aa5a83c03cf","modified":1560475999611},{"_id":"themes/next/layout/_third-party/pdf.swig","hash":"810a9b2a6059f46c4a2ddb178f1eaa4c5e23750b","modified":1560475999611},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"7757bd285732e857996b99af9d917953589fac5e","modified":1560475999611},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"cbe40cb67dad15ade967b0f396c1a95b6871f76a","modified":1560475999611},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"2398e5cd0cb466953b6e7a42c2b2caddebf3c348","modified":1560475999611},{"_id":"themes/next/layout/_third-party/tidio.swig","hash":"912368c41de675f458b267a49a99ae3e7e420ebb","modified":1560475999612},{"_id":"themes/next/source/css/main.styl","hash":"e010ec8ac73268a0f137204c89e0080ab8d59b3d","modified":1560475999640},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1560475999641},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1560475999641},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1560475999641},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1560475999642},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1560475999642},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1560475999642},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1560475999643},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1560475999643},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1560475999643},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1560475999643},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1560475999643},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1560475999644},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1560475999644},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1560475999644},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1560475999644},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1560475999645},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1560475999645},{"_id":"themes/next/source/images/searchicon.png","hash":"025d64ba0160a3a2257dd2b3032b5f7c9dd9b82b","modified":1560475999645},{"_id":"themes/next/source/js/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1560475999645},{"_id":"themes/next/source/js/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1560475999646},{"_id":"themes/next/source/js/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1560475999646},{"_id":"themes/next/source/js/js.cookie.js","hash":"e0afce539f1fb81d59e3c6f0a68d736e2fb45d93","modified":1560475999646},{"_id":"themes/next/source/js/motion.js","hash":"a16bc0b701646bf6653484675f4d5dc0f892d184","modified":1560475999647},{"_id":"themes/next/source/js/next-boot.js","hash":"e0615efab5f81ba0fd39c0527eac31144deac7ce","modified":1560475999647},{"_id":"themes/next/source/js/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1560475999647},{"_id":"themes/next/source/js/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1560475999647},{"_id":"themes/next/source/js/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1560475999648},{"_id":"themes/next/source/js/utils.js","hash":"81913c5f75d0949443833cf4269ad63bd7f9be6f","modified":1560475999648},{"_id":"themes/next/scripts/filters/exturl.js","hash":"79ad823ca803cb00e0bfc648aa6c9d59711e0519","modified":1560475999614},{"_id":"themes/next/scripts/helpers/engine.js","hash":"60eb1554456d9d0e5afc4a2d16f1580a0aa02da8","modified":1560475999614},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"799a042bbf497a4c7a2981aa2014ff28fa1bb382","modified":1560475999614},{"_id":"themes/next/scripts/tags/button.js","hash":"f3b4f7ae7e58072bbf410d950a99a0b53cbc866d","modified":1560475999615},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1560475999615},{"_id":"themes/next/scripts/tags/exturl.js","hash":"d605918cf819887e9555212dbe12da97fd887a0b","modified":1560475999615},{"_id":"themes/next/scripts/tags/full-image.js","hash":"fcb41c1c81560ed49dc4024654388a28ee7d32b0","modified":1560475999615},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"598220fa92ff3540dcab74f633ba41523daa8364","modified":1560475999616},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"5db59d56f4f4082382bf1c16722e6c383892b0c5","modified":1560475999616},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1560475999616},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1560475999616},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1560475999616},{"_id":"themes/next/scripts/tags/pdf.js","hash":"f780cc72bff91d2720626e7af69eed25e9c12a29","modified":1560475999616},{"_id":"themes/next/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1560475999616},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1560475999617},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1560475999635},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1560475999635},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1560475999635},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1560475999639},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1560475999640},{"_id":"themes/next/.git/refs/heads/master","hash":"748d1c3c34c50e44ed9091ee3ffd4bab4bc8895a","modified":1560475999581},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1560475999598},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"fb33f499022cd02722f834fcef1a0e193362cfde","modified":1560475999598},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"fc6bafc8c633afadc538c5afa5620ea2a1cdcb84","modified":1560475999600},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"02bb5748e8540b024e7f4008a9e640890b45280f","modified":1560475999600},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"53221c4c9cc8a50e9224f4b0c5f186cb5587d2a5","modified":1560475999600},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"648bf7eda66629592cb915c4004534b3913cbc22","modified":1560475999601},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"2082f5077551123e695e8afec471c9c44b436acb","modified":1560475999601},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"71af31fea5913fd30c233e555ef13cf2c9768f72","modified":1560475999601},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"5adc60100e129c1d0307bdcaa0c7b8e8375a6ea4","modified":1560475999601},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"0fa4fadb39467b01cede49f21b22e86b1a2da805","modified":1560475999602},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"2940df694fff28e8bf71b6546b4162f1e38227db","modified":1560475999602},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"3615db591dd910fb9fa96542734c7ec0ef05019c","modified":1560475999602},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"eea95b785c9c36d28e1839619793f66e89773bee","modified":1560475999602},{"_id":"themes/next/layout/_partials/post/reward.swig","hash":"d44f025eb93c99ddf90202d8293ccf80689a00c7","modified":1560475999602},{"_id":"themes/next/layout/_partials/post/wechat-subscriber.swig","hash":"ef11b5be5bfb2f0affe82cf521c002b37fef9819","modified":1560475999602},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1560475999603},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"7d1693416a5dc098f4723a53da2e2d1fc2d6e075","modified":1560475999603},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1560475999603},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a5587bd1f60d35e58618576cec45e662aa44ea1f","modified":1560475999603},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"15b542f5b06b7532234af367340b9ed9fcebb0ac","modified":1560475999603},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"6f181cc188ecbe5e607fd989756e470d4cb9765d","modified":1560475999603},{"_id":"themes/next/layout/_partials/share/likely.swig","hash":"b45e934d24d76ec6b6a790e92bdb3d56186b0e2a","modified":1560475999603},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"5b05f165547391bf231e52f56f3d925efc09bc44","modified":1560475999604},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"ffc8e8836714ea79abeb77b75859634615652877","modified":1560475999604},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"108b157fbd1ac3baaf19ae87234fa8728ab79556","modified":1560475999604},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0097e45e7b671f8006b8b2d3c4f95cacc76a983c","modified":1560475999604},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"e42604fbb17648484e5f12afe230d826de089388","modified":1560475999605},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"a5723950c343d220270bfd27bd30050eda6c3fb3","modified":1560475999605},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"798d67e4a736613ab899eabe6529091bbcda7850","modified":1560475999605},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"591b2ccd9713ccb922b9fcf5e278b6de9c5ec30b","modified":1560475999605},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"8eadb929c9e50e58502ccad2dc2657746f8c592a","modified":1560475999605},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"08cd47ef8572121b7811342d3c9a84a338a18191","modified":1560475999605},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"3d01fa6edc0ad73f81813613f2e8a610777f1852","modified":1560475999606},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"fae69a0e1a1d42f7bb44e594a29857d94594698b","modified":1560475999606},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"9fa1ca7059243197d8fbbd35108c36629a254570","modified":1560475999606},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"4a966b7ffe2d80ff1b3dd0fd14b355766dc5c70f","modified":1560475999606},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"438c6f5e6665d72f4ea7ee206011d669246f6102","modified":1560475999606},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"c754f699c90f6278b9159eff1855c17bc713ee96","modified":1560475999606},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"f240a50cd9b627620d9a374a29cf95f0c5e99d7c","modified":1560475999606},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"92e04a2b9e0c3df594bc22235d1894e5ad458dfc","modified":1560475999606},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"0dd5b315d1da55dbfc10f51a1f8952f72eba2720","modified":1560475999607},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"3533167c4295637b91d90f3bae7c651cd128bb6e","modified":1560475999607},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"1a00b1b78c429721d6477c2d8f6f68f005285cc8","modified":1560475999607},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"074a995cd630f56fc4a3135173515c86f2cb34b6","modified":1560475999607},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"e8f91c571ceb4b80aafebc4d36b89fb41b1ae040","modified":1560475999607},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"388efc86af7f19c05ad0e26720cd24ee012d20b9","modified":1560475999608},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"2cbaae65a020bbb0e9265364488aff8bf84fa48d","modified":1560475999608},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"5856d5f701e51dfae1fd6fb486cefde67effd555","modified":1560475999608},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4a908b613518878b9b69576c5dba4a5185f552ab","modified":1560475999608},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"a7e304b05a44279d3e4f611908d7faef9dc14d7c","modified":1560475999609},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"c2cb2f384bc30d31cdccf9794a729c03e687b45c","modified":1560475999609},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"601774d8672577aefbcefac82c94b01f0338da31","modified":1560475999610},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"0a13dfd2de52a96901039098c6fc7b515edfc50b","modified":1560475999612},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"ea94aa85034c6d1b6bb865aecea55c73f8a14501","modified":1560475999612},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"b3eaab6a269aa3fcbafe24fd06f0c9206dc12716","modified":1560475999612},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1560475999634},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1560475999635},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"2e8fb29aa92325df39054b5450757858c6cebc41","modified":1560475999635},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"2036bbb73afd43251982ce824f06c6e88d35a2ef","modified":1560475999635},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"a8aa41625b94cf17a7f473ed10dcbe683b1db705","modified":1560475999639},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1560475999639},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"fc15e277d1504532a09b7b1bd31f900ad95ec4b8","modified":1560475999640},{"_id":"themes/next/source/css/_variables/base.styl","hash":"640f25a63770af5566ccc9cec79c40a4f1c0b29e","modified":1560475999640},{"_id":"themes/next/source/js/schemes/muse.js","hash":"e9bfa6b343b67625f58757efce46ccdaac8f308c","modified":1560475999647},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"9eb63cba0327d3d11b6cbfcbe40b88e97a8378a3","modified":1560475999647},{"_id":"themes/next/source/lib/canvas-nest/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1560479045217},{"_id":"themes/next/source/lib/canvas-nest/README.md","hash":"70a34de41d0736f3727c98b6f17c0a24c9cc3537","modified":1560479045217},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest-nomobile.min.js","hash":"956eada198babd00f028e8908767cb158926c3f3","modified":1560479045217},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1560479045218},{"_id":"themes/next/source/lib/canvas-ribbon/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1560479235854},{"_id":"themes/next/source/lib/canvas-ribbon/README.md","hash":"07e86d67c508a3f974c45ff61cd0760d79bcebc5","modified":1560479235854},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1560479235854},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1560475999649},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1560475999650},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1560475999650},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1560475999650},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1560475999651},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1560475999659},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1560475999659},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1560475999659},{"_id":"themes/next/source/lib/jquery/index.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1560475999657},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"dffe6073b9fc3cba8a2e0affcffe7dcdaec37c0e","modified":1560475999582},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1560475999581},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"fe5ff961b86004a306778c7d33a85b32e5e00e48","modified":1560475999617},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"c8b3225396cb444d8baeb94bac78e5216b992a81","modified":1560475999618},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"b98c65006e2546fbf3870c16fbbcbc009dbaab15","modified":1560475999618},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1560475999618},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"9d71f34fa13a41b8c8cd2fbdf3fdea608385277c","modified":1560475999618},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"ce826aedf42b9eca424a044452f5d193866726a6","modified":1560475999622},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"ce2aae8f3ed8ceac3a2417e0481044cf69c788aa","modified":1560475999625},{"_id":"themes/next/source/css/_common/components/scrollbar.styl","hash":"d7b8bcf2a6031296c84bb4f4ecfb037af01d2d82","modified":1560475999625},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7e51ea64611ab5d678c112b4688d4db4fd2737e2","modified":1560475999633},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"6d900b4159eeb869196a619602578bf4d83a117b","modified":1560475999633},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"8e0740a9ad349ce5555122325da872923135a698","modified":1560475999633},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"9a190ef2f49bdbf69604b48ad1dc7197895ee9b6","modified":1560475999634},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"7ffde343bdf10add1f052f3c4308a15180eb4404","modified":1560475999634},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1560475999634},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"33456264a74d1bba38264d14713544d67d003733","modified":1560475999634},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"9a2d298dbdcbfd758518fd74b63897bc80ce15a5","modified":1560475999636},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1560475999636},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"24230e46fc9fb7b8551f97bb36e9bc1f7423098e","modified":1560475999636},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1560475999636},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"75d2d92af070eb10273558b2436972d3f12b361c","modified":1560475999636},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fa33213aceed7bf4bf25437ca9c1a00f7734ae65","modified":1560475999637},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"7359880e8d85312861fe0871f58b662e627dae0c","modified":1560475999637},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a96e46a6ae86c423f932bc2bc78b9f7453e4e4e5","modified":1560475999637},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6565b4a309325596768d0d32e022c80ef23066cb","modified":1560475999637},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"fc160583f742c94316a0fee05c18468033173534","modified":1560475999638},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"1edf4e69d0ec0dc9cefed6c35d3e803e0da4093d","modified":1560475999638},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"7359880e8d85312861fe0871f58b662e627dae0c","modified":1560475999638},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1560475999638},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"57044a6d19eb418c1c3d28787e82c69efa9e0ca6","modified":1560475999638},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"75737591682a2bafa71db4c03fb79e970ac0e7aa","modified":1560475999638},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"b6dac5bbf20f090cf4b67d156f030d7170dfb39c","modified":1560475999639},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"6400c98a9fd2b9a8502269f33355bd7ab3ff793b","modified":1560475999639},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b5b936dddb7b4de4720cd1e8428b30a2f06d63fb","modified":1560475999639},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"232aedbd44243b3b80c4503c947060d3269c1afc","modified":1560475999639},{"_id":"themes/next/source/lib/canvas-nest/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1560479045211},{"_id":"themes/next/source/lib/canvas-nest/.git/config","hash":"6aef6bbfcb8ccf9d042bf26defe7d08167b6d81e","modified":1560479045213},{"_id":"themes/next/source/lib/canvas-nest/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1560479042362},{"_id":"themes/next/source/lib/canvas-nest/.git/index","hash":"c6ab529effaa8528aefbbd899e5f091cfdbf233b","modified":1560479045218},{"_id":"themes/next/source/lib/canvas-nest/.git/packed-refs","hash":"949c61b7ce3b6e582b7d47f985a3d13ddfbb82ca","modified":1560479045209},{"_id":"themes/next/source/lib/canvas-nest/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1560479045217},{"_id":"themes/next/source/lib/canvas-ribbon/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1560479235847},{"_id":"themes/next/source/lib/canvas-ribbon/.git/config","hash":"f79e33176f8d3e893553102df6eb347a74fd078f","modified":1560479235849},{"_id":"themes/next/source/lib/canvas-ribbon/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1560479233715},{"_id":"themes/next/source/lib/canvas-ribbon/.git/index","hash":"6ec56c58fd112f9cec4ac59247eb23b1db805433","modified":1560479235854},{"_id":"themes/next/source/lib/canvas-ribbon/.git/packed-refs","hash":"e9b32db6334e83336cbca343dedc5b9cc64e8e66","modified":1560479235846},{"_id":"themes/next/source/lib/canvas-ribbon/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1560479235853},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1560475999651},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1560475999651},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1560475999652},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1560475999656},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1560475999656},{"_id":"themes/next/.git/objects/pack/pack-9b63850b0cf8900cc4098ec7fbfbcc2fbb84eae1.idx","hash":"39bc6632f3e718c2d3b27e67763a0cbf6b5f3233","modified":1560475999574},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"dffe6073b9fc3cba8a2e0affcffe7dcdaec37c0e","modified":1560475999581},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4cfeec9434a72d5efc6ca225d3445d084d4590f7","modified":1560475999619},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"ca97f0b6990eef947039faede80c56d9c4381ee1","modified":1560475999619},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1560475999619},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"6c4990d375b640ee4551e62c48c1cbe4c3d62212","modified":1560475999619},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"a410ed529afd46ddf4a96ecf0de6599488716887","modified":1560475999620},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"c0d9e18a9210fdcaf33e488518b3b288eb58c0a1","modified":1560475999620},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"cc6ee18f47f2e1e06df6fa0eadb37079e580fd11","modified":1560475999620},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"71d8d1cc22a2a7627a6db7240f0c4902a14f9bea","modified":1560475999620},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"e9dd8de7d98f1478ac7d351624fffd3d8738c905","modified":1560475999621},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1560475999621},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"6904fd7ea6455e008d9884558b68254608af9a3c","modified":1560475999621},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"2d142c6f39853916256ad8fc79eb6b85f4001ae8","modified":1560475999621},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1560475999621},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f1d52954b9a5d1ca8e224382349f525e598dd923","modified":1560475999622},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1560475999622},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"80addb9b725e329915c05c27b9fadaf56457a9b3","modified":1560475999622},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"61ca40856e5cacd48e0fa9728fde4605c7dd4c94","modified":1560475999622},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1560475999622},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"6a75bb1f2435f4e895cbbb5abbddf6e8f7257804","modified":1560475999623},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"2356226157e8068b0e9bbe2f7d0f74e1ab49199b","modified":1560475999623},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"c961d37190d9bec58a36306c7e716c4e72c4582f","modified":1560475999623},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"1385862a5c0bd845015d165aadbd1a6add7b72d7","modified":1560475999623},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0bf899fab331add63f0c8ead31ca3a3db2ad74d9","modified":1560475999623},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"b082d07b13a3d55b4c032fd351dfa9a4fd74edec","modified":1560475999623},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"496f931e3a7e313ba8088fb91bb20789cace72c9","modified":1560475999623},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"3f33bb862c2aa993f54987fbb345da067b79b112","modified":1560475999624},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"5440013a081201ca791582db98159dce93ea9e75","modified":1560475999624},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1560475999624},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1560475999624},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"8e058c99dd7d41f0bd34c7c28b6ac9fbb17dcb5e","modified":1560475999624},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"d5c8ffed7f2c701052b7a53abaf5ef437374ea72","modified":1560475999624},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"a6c24393dffbdd94dd5c01cdbec5e180b0bfbbbd","modified":1560475999625},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a3170630d8e085889a4bdc20eb7f09c5a0479c47","modified":1560475999625},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"58ec00eebe68d0eebd2eea435c710063877447df","modified":1560475999627},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"6ec8ea7b11a146777b6b8da0f71f0cc1dbd129df","modified":1560475999627},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1560475999628},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"d7501ae01fc45fa15b00d1bc5233b9fffa20a3c9","modified":1560475999628},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"21b32840d8b3a14b10770153114778304ba6d1b0","modified":1560475999629},{"_id":"themes/next/source/css/_common/components/tags/pdf.styl","hash":"da8d34729fb6eb0fcb8ee81e67d2be3c02bc1bc4","modified":1560475999629},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"6e4400d6704dee076434726b7a03ac464eb7bcb4","modified":1560475999629},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"cbc0be5a3285b469858ec9ead48e2ea90bd47ae1","modified":1560475999630},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"9224b566cd2632f64c1a964e2c786cee93b93286","modified":1560475999625},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"707527c9950a7459355c8abcf4751c0964de0bc1","modified":1560475999625},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"cc83816614f21c7e1d8d3f867d547ff7c658cec4","modified":1560475999626},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-button.styl","hash":"517d541a80d59ad99a3f648be74891e0c7bc72a8","modified":1560475999626},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"c2d9c3b6fbfa65544e6b5a55d3cb2149df04a8a9","modified":1560475999626},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"9a3bfc878ca797946815bed23cd6f92b24a16358","modified":1560475999626},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"c01609176929590f8f347075a9a12b661acd661e","modified":1560475999626},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"8a24b56524a388fbabd408ffc8ba9b56eb9e01ce","modified":1560475999626},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"8e5c884fb950937afa350c608545455c87aa6129","modified":1560475999627},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"967fb3a3c6c851b34ec5df2d945dc266ed63d146","modified":1560475999627},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fc58498d4f5081fcf6218e9e18c5bf2328275bef","modified":1560475999631},{"_id":"themes/next/source/css/_common/components/third-party/copy-code.styl","hash":"688ca3eccc26727d050ad098b32b40934719588a","modified":1560475999631},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"ac7753d536341aa824d7bce0332735e838916995","modified":1560475999631},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"f1d9ee1f86a179741f2478f8c70ca11ab578810e","modified":1560475999631},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"7059e24235b7c57a07f3f8abaa06b0bd6a7eda2f","modified":1560475999631},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"9fac89c8146eb2675721a26f528d7d0f8be7debe","modified":1560475999632},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"ef66c0a08e4243a25e41408d70ca66682b8dcea1","modified":1560475999632},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"61466e3e5459960b5802a267751a0c8018918b0b","modified":1560475999632},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"3ae3f3c276d444862033fd3434c632ad0d2f84e6","modified":1560475999632},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"03c4fa9573fddd930552784cf484fd2ee7825323","modified":1560475999633},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1560475999637},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1560475999637},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1560475999638},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1560479042362},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1560479042362},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1560479042363},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1560479042363},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1560479042363},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1560479042362},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1560479042363},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1560479042362},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1560479042363},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1560479042363},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1560479042363},{"_id":"themes/next/source/lib/canvas-nest/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1560479042361},{"_id":"themes/next/source/lib/canvas-nest/.git/logs/HEAD","hash":"30bca8c08fdcf78daf79eff3b19d8c6f0f5c9cf9","modified":1560479045212},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1560479233716},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1560479233715},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1560479233716},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1560479233716},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1560479233716},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1560479233716},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1560479233716},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1560479233715},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1560479233716},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1560479233716},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1560479233717},{"_id":"themes/next/source/lib/canvas-ribbon/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1560479233715},{"_id":"themes/next/source/lib/canvas-ribbon/.git/logs/HEAD","hash":"e0ef9c2a38cb425a5797d6598cf858d3366b8c83","modified":1560479235848},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1560475999655},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1560475999658},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1560479045196},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1560479045197},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/2a/f622a4d7df40a2708946e91d6d7a0df1dc468c","hash":"3da7207fb18d361b83c56f4e35f67e9e945abd82","modified":1560479045202},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/44/6ddf9b6c0e5ade17ca5cb99f9b3a5300919c57","hash":"fb72799ff98445f72fda041337da4cf105d9dcba","modified":1560479045199},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/46/cad4f872aa93e813aed99547c4705322ca483f","hash":"b0465d3186e2d58a8a99c56c6e68aa2965a396d4","modified":1560479045191},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/50/dd2a6539498a70226c81a587db486b47e839ff","hash":"3844b0c815d0b4b32c6312c751a826bf9dc2c945","modified":1560479045192},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/45/9262fe92f0115707bf8d8764f1886bc5e7c9e0","hash":"36040483f8af76775b7e4b6d87cec53729625399","modified":1560479045203},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/51/7c5eb7dcc2cb9769efea2e7375ff6e04123150","hash":"ec53157077d47430f4729bf164999d18d370aeab","modified":1560479045200},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/5a/69ce9c2e4a1a34f6063ae9a121af1555669c69","hash":"dad25cc0f450e2827b5676975f4a70636e3fd2c8","modified":1560479045198},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/5e/8ae972c99b04af7dd56dabfc485e8fdae5094d","hash":"791b3349c5696ccacae00bffbdbb8d88a03e61a9","modified":1560479045193},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/69/39233ece53c9bdb9a1faf3271ed5768b034aad","hash":"5a770d418c1bb7b0f031f4d5416530002032fcf3","modified":1560479045199},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1560479045197},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/75/de2b8fa62d52690de32c351c63ab6446104ed5","hash":"52d10122d633ce4895a0690c5955e1b356f5a391","modified":1560479045203},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/7b/c7e3186212b6f2e06d3370502565e2c6326890","hash":"379f3c6486f589fc9c1ab07d0382adacf4f655a2","modified":1560479045193},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/86/1c9f4241fe0eb6af02ad770d5ce04c1f68972b","hash":"7005c3e36015a4af30d4b91bd5a849a7861a073e","modified":1560479045202},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/90/f6477118d05f5f96ce0a63c6f18b7b2baea200","hash":"385f58e92981f27fa54eb52bf60424e87c70a9d8","modified":1560479045195},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/91/f99a0c53b26dd54f56b9e452c68f56b06f8f7e","hash":"3dca8a5629e66599b6e0f146aa32f1b7ce023d89","modified":1560479045201},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/98/67d1132e0e50bbb7df754a63358d70741df6d5","hash":"3cb710a1faee73c08036f5e2df7df3a7ce29e9dd","modified":1560479045194},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/aa/da83ad9aa55faa2b34ede31b1d41e16966f80b","hash":"b304541ab95b7969a63ba2ec4f60f5391bd8bb44","modified":1560479045194},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/99/be66a33ab4ebc34f62f2880a0e0cc6d334d0f2","hash":"f2346fe8ddd7d7abf38f2946f3083d8150f502d2","modified":1560479045196},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/b1/bb278ca2e50dff1b343f9d5ca025272859432f","hash":"74f0afa72a30268d84613fb0d1d893bba866f01d","modified":1560479045201},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/bb/5755c22b6c1b7461319624f0f000bc947882ee","hash":"2b87a2a354a0fa77cbddf461b03b0b8e43c16a4f","modified":1560479045198},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/ca/3466a8cbf05c2982c58199d6ee71ec6d0271ca","hash":"a9b80b5d827b5e84229b1afd7920d9218dce610f","modified":1560479045195},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/d4/95d28a8fab74d23908f6ccef9e4db2625fbacb","hash":"59e6067b0a806deee7bda6460b36c0f63e2e1db5","modified":1560479045200},{"_id":"themes/next/source/lib/canvas-nest/.git/refs/heads/master","hash":"42b96d49f5eae1a58b8413a60a0c2699e94df28d","modified":1560479045212},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/02/5cf882fc75a324b1d71b0921eb52ea427387fd","hash":"4a0f15d00f50c629f01c2274e26ef05b3779b6c6","modified":1560479235833},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1560479235835},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/15/9cfb8a3050111dfb3e6635e3f37fe68de2ab30","hash":"f4e1752896135edd6c9a36164b45893a59839548","modified":1560479235836},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/20/47d8728f7950fcc2276c339ee199302805838d","hash":"813e7f6c3b8954c40b250e6ba592d6bac7874397","modified":1560479235839},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/25/3593d429ba9f66eb536d2577e4aa8b74ed7dfa","hash":"b68bb1519d36e82753367a811009e5850db4ddce","modified":1560479235832},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1560479235837},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/57/6d268825c6e7b3892828b61b9b408600faa1f2","hash":"2ca9617d2459b9e010e71b3b221fec42d76cae32","modified":1560479235837},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/56/4913335d11e112ac80e8d550c8347016007f6d","hash":"50e9db730ceac6b2d0c8e8d5a3fec450290fdd8e","modified":1560479235839},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1560479235838},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/6c/34e310dd41c6bfa8db842190388ab83e6d4fa2","hash":"b327c0ce763240a6a8bd2f3fb55ace6b9e3df671","modified":1560479235834},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/7e/871dba93cad35ffcec76a936259ae9a3641bc7","hash":"957e9e7db09ee72fc49ca852d3cc67242567fa45","modified":1560479235840},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/ab/2197a6f5baffdd1d2895c169f4777921cc4027","hash":"81a75ca40bcfd278d6a9d67dedc8d61d959e2baa","modified":1560479235837},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/b9/07949515b208cc605b513ff9d5b8153cbe2fe1","hash":"8fb6e8f2e6b4df8787239335ef9777a6c888d3c0","modified":1560479235840},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/c5/8416b72bd371aaf3bc8952f819c1afd3e4c0b4","hash":"aa8e6e340697fc6d9697c1ab8213ee40aca4ea82","modified":1560479235835},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/c6/d0381e6cd08086561110f76b5f921bf81a6f87","hash":"be98eb9329c91132e90d942a44d05a41c78b4470","modified":1560479235834},{"_id":"themes/next/source/lib/canvas-ribbon/.git/refs/heads/master","hash":"03b53be10249625c87e7cf7311b225cb145e3039","modified":1560479235848},{"_id":"themes/next/source/lib/canvas-nest/.git/logs/refs/heads/master","hash":"30bca8c08fdcf78daf79eff3b19d8c6f0f5c9cf9","modified":1560479045212},{"_id":"themes/next/source/lib/canvas-nest/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1560479045211},{"_id":"themes/next/source/lib/canvas-ribbon/.git/logs/refs/heads/master","hash":"e0ef9c2a38cb425a5797d6598cf858d3366b8c83","modified":1560479235848},{"_id":"themes/next/source/lib/canvas-ribbon/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1560479235847},{"_id":"themes/next/source/lib/canvas-nest/.git/logs/refs/remotes/origin/HEAD","hash":"30bca8c08fdcf78daf79eff3b19d8c6f0f5c9cf9","modified":1560479045211},{"_id":"themes/next/source/lib/canvas-ribbon/.git/logs/refs/remotes/origin/HEAD","hash":"e0ef9c2a38cb425a5797d6598cf858d3366b8c83","modified":1560479235847},{"_id":"themes/next/.git/objects/pack/pack-9b63850b0cf8900cc4098ec7fbfbcc2fbb84eae1.pack","hash":"1984552ed5cf0940592e9a92a25d26d241baeddd","modified":1560475999572}],"Category":[{"name":"知识","_id":"cjwvh258u0004w39zeabzx8j2"},{"name":"教程","_id":"cjwvh2590000hw39zzomprla7"},{"name":"随笔","_id":"cjwvh2594000uw39zqs3wsgpm"},{"name":"插件","_id":"cjwvh2599001jw39zxq0l54gl"},{"name":"软件","_id":"cjwvh25e20054w39zy9eyaqjm"},{"name":"技术","_id":"cjwvh25ea005ow39zuob9l606"},{"name":"小说","_id":"cjwvh25i40066w39z58q9q14b"}],"Data":[],"Page":[{"title":"categories","date":"2019-06-14T02:13:39.000Z","_content":"","source":"categories/index-1.md","raw":"---\ntitle: categories\ndate: 2019-06-14 10:13:39\n---\n","updated":"2019-06-14T02:13:39.955Z","path":"categories/index-1.html","comments":1,"layout":"page","_id":"cjwvh258s0001w39zkgzmpn6s","content":"","excerpt":"","more":""},{"title":"categories","date":"2019-06-14T02:12:49.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-06-14 10:12:49\ntype: \"categories\"\n---\n","updated":"2019-06-14T02:13:30.344Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjwvh258u0003w39zqxivt2k7","content":"","excerpt":"","more":""},{"title":"tags","date":"2019-06-14T02:05:42.457Z","layout":"tags","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate:\nlayout: tags\ntype: tags\n---\n","updated":"2019-06-14T02:05:42.457Z","path":"tags/index.html","comments":1,"_id":"cjwvh258w0007w39zqinm4dna","content":"","excerpt":"","more":""},{"title":"关于我","date":"2017-03-27T09:29:55.000Z","_content":"## 韩宏斌    \n#### 立志成为前端engineer的前端learner\n### WeChat\t\t\t    \nhanhb1994924  \n### E-mail\nhanhb1994924@qq.com\n\n","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2017-03-27 17:29:55\n---\n## 韩宏斌    \n#### 立志成为前端engineer的前端learner\n### WeChat\t\t\t    \nhanhb1994924  \n### E-mail\nhanhb1994924@qq.com\n\n","updated":"2018-11-16T08:50:06.456Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjwvh25dz0052w39zbnt5eak7","content":"<h2 id=\"韩宏斌\"><a href=\"#韩宏斌\" class=\"headerlink\" title=\"韩宏斌\"></a>韩宏斌</h2><h4 id=\"立志成为前端engineer的前端learner\"><a href=\"#立志成为前端engineer的前端learner\" class=\"headerlink\" title=\"立志成为前端engineer的前端learner\"></a>立志成为前端engineer的前端learner</h4><h3 id=\"WeChat\"><a href=\"#WeChat\" class=\"headerlink\" title=\"WeChat\"></a>WeChat</h3><p>hanhb1994924  </p>\n<h3 id=\"E-mail\"><a href=\"#E-mail\" class=\"headerlink\" title=\"E-mail\"></a>E-mail</h3><p>hanhb1994924@qq.com</p>\n","excerpt":"","more":"<h2 id=\"韩宏斌\"><a href=\"#韩宏斌\" class=\"headerlink\" title=\"韩宏斌\"></a>韩宏斌</h2><h4 id=\"立志成为前端engineer的前端learner\"><a href=\"#立志成为前端engineer的前端learner\" class=\"headerlink\" title=\"立志成为前端engineer的前端learner\"></a>立志成为前端engineer的前端learner</h4><h3 id=\"WeChat\"><a href=\"#WeChat\" class=\"headerlink\" title=\"WeChat\"></a>WeChat</h3><p>hanhb1994924  </p>\n<h3 id=\"E-mail\"><a href=\"#E-mail\" class=\"headerlink\" title=\"E-mail\"></a>E-mail</h3><p>hanhb1994924@qq.com</p>\n"}],"Post":[{"title":"HTTP状态码总结","_content":"## http状态码\n\nhttp状态码是表示服务器对请求的响应状态，主要分为以下几个部分\n\n* 1**：这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束\n\n* 2**：表示请求成功，\n\n* 3**：表示重定向\n\n* 4**：表示客户端错误\n\n* 5**：表示服务器端错误\n  \n## 具体内容  \n\n100（continue），客户端应当继续发送请求。这个临时响应是用来通知客户端它的部分请求已经被服务器接收\n\n200（OK），表示请求成功，请求所希望的响应头或数据体将随此响应返回。\n\n202（Accepted），服务器已接受请求，但尚未处理。\n\n204（No-Content），服务器成功处理了请求，但不需要返回任何实体内容\n\n205（Reset-Content），服务器成功处理了请求，且没有返回任何内容。但是与204响应不同，返回此状态码的响应要求请求者重置文档视图。该响应主要是被用于接受用户输入后，立即重置表单，以便用户能够轻松地开始另一次输入。\n\n206（Partial-Content），服务器已经成功处理了部分 GET 请求。\n\n301（Moved-Permanently），永久性重定向\n\n302（Moved-Temporarily），暂时性重定向\n\n304（Not-Modified），浏览器端缓存的资源依然有效\n\n400（Bad-Reques），请求有误，当前请求无法被服务器理解。\n\n401（Unauthorized），当前请求需要用户验证。\n\n403（Forbidden），服务器已经理解请求，但是拒绝执行它。\n\n404（Not-Found），请求的资源没有被找到\n\n500（Interval Server Error），服务器内部错误\n\n502（Bad GateWay），网关出错\n\n503（Service Unavailable），由于临时的服务器维护或者过载，服务器当前无法处理请求。\n\n504（Gateway Timeout），作为网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器（URI标识出的服务器，例如HTTP、FTP、LDAP）或者辅助服务器（例如DNS）收到响应。","source":"_posts/2017-04-03httpcode.md","raw":"---\ntitle: HTTP状态码总结 \ncategories: 知识\ntags: [http]\n---\n## http状态码\n\nhttp状态码是表示服务器对请求的响应状态，主要分为以下几个部分\n\n* 1**：这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束\n\n* 2**：表示请求成功，\n\n* 3**：表示重定向\n\n* 4**：表示客户端错误\n\n* 5**：表示服务器端错误\n  \n## 具体内容  \n\n100（continue），客户端应当继续发送请求。这个临时响应是用来通知客户端它的部分请求已经被服务器接收\n\n200（OK），表示请求成功，请求所希望的响应头或数据体将随此响应返回。\n\n202（Accepted），服务器已接受请求，但尚未处理。\n\n204（No-Content），服务器成功处理了请求，但不需要返回任何实体内容\n\n205（Reset-Content），服务器成功处理了请求，且没有返回任何内容。但是与204响应不同，返回此状态码的响应要求请求者重置文档视图。该响应主要是被用于接受用户输入后，立即重置表单，以便用户能够轻松地开始另一次输入。\n\n206（Partial-Content），服务器已经成功处理了部分 GET 请求。\n\n301（Moved-Permanently），永久性重定向\n\n302（Moved-Temporarily），暂时性重定向\n\n304（Not-Modified），浏览器端缓存的资源依然有效\n\n400（Bad-Reques），请求有误，当前请求无法被服务器理解。\n\n401（Unauthorized），当前请求需要用户验证。\n\n403（Forbidden），服务器已经理解请求，但是拒绝执行它。\n\n404（Not-Found），请求的资源没有被找到\n\n500（Interval Server Error），服务器内部错误\n\n502（Bad GateWay），网关出错\n\n503（Service Unavailable），由于临时的服务器维护或者过载，服务器当前无法处理请求。\n\n504（Gateway Timeout），作为网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器（URI标识出的服务器，例如HTTP、FTP、LDAP）或者辅助服务器（例如DNS）收到响应。","slug":"2017-04-03httpcode","published":1,"date":"2017-04-03T11:50:06.000Z","updated":"2017-04-03T11:50:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwvh258p0000w39z9ddtnf5w","content":"<h2 id=\"http状态码\"><a href=\"#http状态码\" class=\"headerlink\" title=\"http状态码\"></a>http状态码</h2><p>http状态码是表示服务器对请求的响应状态，主要分为以下几个部分</p>\n<ul>\n<li><p>1**：这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束</p>\n</li>\n<li><p>2**：表示请求成功，</p>\n</li>\n<li><p>3**：表示重定向</p>\n</li>\n<li><p>4**：表示客户端错误</p>\n</li>\n<li><p>5**：表示服务器端错误</p>\n</li>\n</ul>\n<h2 id=\"具体内容\"><a href=\"#具体内容\" class=\"headerlink\" title=\"具体内容\"></a>具体内容</h2><p>100（continue），客户端应当继续发送请求。这个临时响应是用来通知客户端它的部分请求已经被服务器接收</p>\n<p>200（OK），表示请求成功，请求所希望的响应头或数据体将随此响应返回。</p>\n<p>202（Accepted），服务器已接受请求，但尚未处理。</p>\n<p>204（No-Content），服务器成功处理了请求，但不需要返回任何实体内容</p>\n<p>205（Reset-Content），服务器成功处理了请求，且没有返回任何内容。但是与204响应不同，返回此状态码的响应要求请求者重置文档视图。该响应主要是被用于接受用户输入后，立即重置表单，以便用户能够轻松地开始另一次输入。</p>\n<p>206（Partial-Content），服务器已经成功处理了部分 GET 请求。</p>\n<p>301（Moved-Permanently），永久性重定向</p>\n<p>302（Moved-Temporarily），暂时性重定向</p>\n<p>304（Not-Modified），浏览器端缓存的资源依然有效</p>\n<p>400（Bad-Reques），请求有误，当前请求无法被服务器理解。</p>\n<p>401（Unauthorized），当前请求需要用户验证。</p>\n<p>403（Forbidden），服务器已经理解请求，但是拒绝执行它。</p>\n<p>404（Not-Found），请求的资源没有被找到</p>\n<p>500（Interval Server Error），服务器内部错误</p>\n<p>502（Bad GateWay），网关出错</p>\n<p>503（Service Unavailable），由于临时的服务器维护或者过载，服务器当前无法处理请求。</p>\n<p>504（Gateway Timeout），作为网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器（URI标识出的服务器，例如HTTP、FTP、LDAP）或者辅助服务器（例如DNS）收到响应。</p>\n","excerpt":"","more":"<h2 id=\"http状态码\"><a href=\"#http状态码\" class=\"headerlink\" title=\"http状态码\"></a>http状态码</h2><p>http状态码是表示服务器对请求的响应状态，主要分为以下几个部分</p>\n<ul>\n<li><p>1**：这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束</p>\n</li>\n<li><p>2**：表示请求成功，</p>\n</li>\n<li><p>3**：表示重定向</p>\n</li>\n<li><p>4**：表示客户端错误</p>\n</li>\n<li><p>5**：表示服务器端错误</p>\n</li>\n</ul>\n<h2 id=\"具体内容\"><a href=\"#具体内容\" class=\"headerlink\" title=\"具体内容\"></a>具体内容</h2><p>100（continue），客户端应当继续发送请求。这个临时响应是用来通知客户端它的部分请求已经被服务器接收</p>\n<p>200（OK），表示请求成功，请求所希望的响应头或数据体将随此响应返回。</p>\n<p>202（Accepted），服务器已接受请求，但尚未处理。</p>\n<p>204（No-Content），服务器成功处理了请求，但不需要返回任何实体内容</p>\n<p>205（Reset-Content），服务器成功处理了请求，且没有返回任何内容。但是与204响应不同，返回此状态码的响应要求请求者重置文档视图。该响应主要是被用于接受用户输入后，立即重置表单，以便用户能够轻松地开始另一次输入。</p>\n<p>206（Partial-Content），服务器已经成功处理了部分 GET 请求。</p>\n<p>301（Moved-Permanently），永久性重定向</p>\n<p>302（Moved-Temporarily），暂时性重定向</p>\n<p>304（Not-Modified），浏览器端缓存的资源依然有效</p>\n<p>400（Bad-Reques），请求有误，当前请求无法被服务器理解。</p>\n<p>401（Unauthorized），当前请求需要用户验证。</p>\n<p>403（Forbidden），服务器已经理解请求，但是拒绝执行它。</p>\n<p>404（Not-Found），请求的资源没有被找到</p>\n<p>500（Interval Server Error），服务器内部错误</p>\n<p>502（Bad GateWay），网关出错</p>\n<p>503（Service Unavailable），由于临时的服务器维护或者过载，服务器当前无法处理请求。</p>\n<p>504（Gateway Timeout），作为网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器（URI标识出的服务器，例如HTTP、FTP、LDAP）或者辅助服务器（例如DNS）收到响应。</p>\n"},{"title":"详细解释javascript中闭包的概念","_content":"## 闭包是什么\n在 JavaScript 中，闭包是一个让人很难弄懂的概念。ECMAScript 中给闭包的定义是：闭包，指的是词法表示包括不被计算的变量的函数，也就是说，函数可以使用函数之外定义的变量。\n\n\n\n* 闭包是一个函数\n* 闭包可以使用在它外面定义的变量\n* 闭包存在定义该变量的作用域中\n\n\n## 变量作用域\n变量可分为全局变量和局部变量。  \n\n* 全局变量的作用域就是全局性的，在 js 的任何地方都可以使用全局变量。 \n* 在函数中使用 var 关键字声明变量，这时的变量即是局部变量，它的作用域只在声明该变量的函数内，在函数外面是访问不到该变量的。    \n\n\n## 变量生存周期  \n\n* 全局变量，生命周期是永久的。  \n* 局部变量，当定义该变量的函数调用结束时，该变量就会被垃圾回收机制回收而销毁。再次调用该函数时又会重新定义了一个新变量.。 \n\n        var func = function()\n        {\n        var a = 'linxin';\n        console.log(a);\n        }\n        func();  \n\n\na 为局部变量，在 func 调用完之后，a 就会被销毁了。\n\n    var func = function(){\n     var a = 'linxin';\n    var func1 = function(){\n    a += ' a';\n    console.log(a);\n    }\n    return func1;\n    }\n    var func2 = func();\n    func2();                    // linxin a\n    func2();                    // linxin a a\n    func2();                    // linxin a a a  \n\n\n\n可以看出，在第一次调用完 func2 之后，func 中的变量 a 变成 'linxin a'，而没有被销毁。因为此时 func1 形成了一个闭包，导致了 a 的生命周期延续了。\n\n\n闭包是一个函数，比如上面的 func1 函数\n闭包使用其他函数定义的变量，使其不被销毁。比如上面 func1 调用了变量 a  \n\n闭包存在定义该变量的作用域中，变量 a 存在 func 的作用域中，那么 func1 也必然存在这个作用域中。\n现在可以说，满足这三个条件的就是闭包了。  \n## 进阶\n\n下面我们通过一个简单而又经典的例子来进一步熟悉闭包。\n\n    for (var i = 0; i < 4; i++) {\n        setTimeout(function () {\n            console.log(i)\n        }, 0)\n    }\n我们可能会简单的以为控制台会打印出 0 1 2 3，可事实却打印出了 4 4 4 4，这又是为什么呢？我们发现，setTimeout 函数时异步的，等到函数执行时，for循环已经结束了，此时的 i 的值为 4，所以 function() { console.log(i) } 去找变量 i，只能拿到 4。\n\n我想起上一个例子中，闭包使 a 变量的值被保存起来了，那么这里我们也可以用闭包把 0 1 2 3 保存起来。\n\n    for (var i = 0; i < 4; i++) {\n        (function (i) {\n            setTimeout(function () {\n                console.log(i)\n            }, 0)\n        })(i)\n    }\n当 i=0 时，把 0 作为参数传进匿名函数中，此时 function(i){} 此匿名函数中的 i 的值为 0，等到 setTimeout 执行时顺着外层去找 i，这时就能拿到 0。如此循环，就能拿到想要的 0 1 2 3。\n\n## 内存管理\n在闭包中调用局部变量，会导致这个局部变量无法及时被销毁，相当于全局变量一样会一直占用着内存。如果需要回收这些变量占用的内存，可以手动将变量设置为null。\n\n然而在使用闭包的过程中，比较容易形成 JavaScript 对象和 DOM 对象的循环引用，就有可能造成内存泄露。这是因为浏览器的垃圾回收机制中，如果两个对象之间形成了循环引用，那么它们都无法被回收。\n\n    function func() {\n        var test = document.getElementById('test');\n        test.onclick = function () {\n            console.log('hello world');\n        }\n    }\n在上面例子中，func 函数中用匿名函数创建了一个闭包。变量 test 是 JavaScript 对象，引用了 id 为 test 的 DOM 对象，DOM 对象的 onclick 属性又引用了闭包，而闭包又可以调用 test ，因而形成了循环引用，导致两个对象都无法被回收。要解决这个问题，只需要把循环引用中的变量设为 null 即可。\n\n    function func() {\n        var test = document.getElementById('test');\n        test.onclick = function () {\n            console.log('hello world');\n        }\n        test = null;\n    }\n如果在 func 函数中不使用匿名函数创建闭包，而是通过引用一个外部函数，也不会出现循环引用的问题。\n\n    function func() {\n        var test = document.getElementById('test');\n        test.onclick = funcTest;\n    }\n    function funcTest(){\n        console.log('hello world');\n    }\n","source":"_posts/2017.03.26-bibao.md","raw":"---\ntitle: 详细解释javascript中闭包的概念\ncategories: 知识\ntags: [javascript]\n---\n## 闭包是什么\n在 JavaScript 中，闭包是一个让人很难弄懂的概念。ECMAScript 中给闭包的定义是：闭包，指的是词法表示包括不被计算的变量的函数，也就是说，函数可以使用函数之外定义的变量。\n\n\n\n* 闭包是一个函数\n* 闭包可以使用在它外面定义的变量\n* 闭包存在定义该变量的作用域中\n\n\n## 变量作用域\n变量可分为全局变量和局部变量。  \n\n* 全局变量的作用域就是全局性的，在 js 的任何地方都可以使用全局变量。 \n* 在函数中使用 var 关键字声明变量，这时的变量即是局部变量，它的作用域只在声明该变量的函数内，在函数外面是访问不到该变量的。    \n\n\n## 变量生存周期  \n\n* 全局变量，生命周期是永久的。  \n* 局部变量，当定义该变量的函数调用结束时，该变量就会被垃圾回收机制回收而销毁。再次调用该函数时又会重新定义了一个新变量.。 \n\n        var func = function()\n        {\n        var a = 'linxin';\n        console.log(a);\n        }\n        func();  \n\n\na 为局部变量，在 func 调用完之后，a 就会被销毁了。\n\n    var func = function(){\n     var a = 'linxin';\n    var func1 = function(){\n    a += ' a';\n    console.log(a);\n    }\n    return func1;\n    }\n    var func2 = func();\n    func2();                    // linxin a\n    func2();                    // linxin a a\n    func2();                    // linxin a a a  \n\n\n\n可以看出，在第一次调用完 func2 之后，func 中的变量 a 变成 'linxin a'，而没有被销毁。因为此时 func1 形成了一个闭包，导致了 a 的生命周期延续了。\n\n\n闭包是一个函数，比如上面的 func1 函数\n闭包使用其他函数定义的变量，使其不被销毁。比如上面 func1 调用了变量 a  \n\n闭包存在定义该变量的作用域中，变量 a 存在 func 的作用域中，那么 func1 也必然存在这个作用域中。\n现在可以说，满足这三个条件的就是闭包了。  \n## 进阶\n\n下面我们通过一个简单而又经典的例子来进一步熟悉闭包。\n\n    for (var i = 0; i < 4; i++) {\n        setTimeout(function () {\n            console.log(i)\n        }, 0)\n    }\n我们可能会简单的以为控制台会打印出 0 1 2 3，可事实却打印出了 4 4 4 4，这又是为什么呢？我们发现，setTimeout 函数时异步的，等到函数执行时，for循环已经结束了，此时的 i 的值为 4，所以 function() { console.log(i) } 去找变量 i，只能拿到 4。\n\n我想起上一个例子中，闭包使 a 变量的值被保存起来了，那么这里我们也可以用闭包把 0 1 2 3 保存起来。\n\n    for (var i = 0; i < 4; i++) {\n        (function (i) {\n            setTimeout(function () {\n                console.log(i)\n            }, 0)\n        })(i)\n    }\n当 i=0 时，把 0 作为参数传进匿名函数中，此时 function(i){} 此匿名函数中的 i 的值为 0，等到 setTimeout 执行时顺着外层去找 i，这时就能拿到 0。如此循环，就能拿到想要的 0 1 2 3。\n\n## 内存管理\n在闭包中调用局部变量，会导致这个局部变量无法及时被销毁，相当于全局变量一样会一直占用着内存。如果需要回收这些变量占用的内存，可以手动将变量设置为null。\n\n然而在使用闭包的过程中，比较容易形成 JavaScript 对象和 DOM 对象的循环引用，就有可能造成内存泄露。这是因为浏览器的垃圾回收机制中，如果两个对象之间形成了循环引用，那么它们都无法被回收。\n\n    function func() {\n        var test = document.getElementById('test');\n        test.onclick = function () {\n            console.log('hello world');\n        }\n    }\n在上面例子中，func 函数中用匿名函数创建了一个闭包。变量 test 是 JavaScript 对象，引用了 id 为 test 的 DOM 对象，DOM 对象的 onclick 属性又引用了闭包，而闭包又可以调用 test ，因而形成了循环引用，导致两个对象都无法被回收。要解决这个问题，只需要把循环引用中的变量设为 null 即可。\n\n    function func() {\n        var test = document.getElementById('test');\n        test.onclick = function () {\n            console.log('hello world');\n        }\n        test = null;\n    }\n如果在 func 函数中不使用匿名函数创建闭包，而是通过引用一个外部函数，也不会出现循环引用的问题。\n\n    function func() {\n        var test = document.getElementById('test');\n        test.onclick = funcTest;\n    }\n    function funcTest(){\n        console.log('hello world');\n    }\n","slug":"2017.03.26-bibao","published":1,"date":"2017-03-27T10:42:04.000Z","updated":"2017-03-27T10:42:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwvh258t0002w39zdnmq9epy","content":"<h2 id=\"闭包是什么\"><a href=\"#闭包是什么\" class=\"headerlink\" title=\"闭包是什么\"></a>闭包是什么</h2><p>在 JavaScript 中，闭包是一个让人很难弄懂的概念。ECMAScript 中给闭包的定义是：闭包，指的是词法表示包括不被计算的变量的函数，也就是说，函数可以使用函数之外定义的变量。</p>\n<ul>\n<li>闭包是一个函数</li>\n<li>闭包可以使用在它外面定义的变量</li>\n<li>闭包存在定义该变量的作用域中</li>\n</ul>\n<h2 id=\"变量作用域\"><a href=\"#变量作用域\" class=\"headerlink\" title=\"变量作用域\"></a>变量作用域</h2><p>变量可分为全局变量和局部变量。  </p>\n<ul>\n<li>全局变量的作用域就是全局性的，在 js 的任何地方都可以使用全局变量。 </li>\n<li>在函数中使用 var 关键字声明变量，这时的变量即是局部变量，它的作用域只在声明该变量的函数内，在函数外面是访问不到该变量的。    </li>\n</ul>\n<h2 id=\"变量生存周期\"><a href=\"#变量生存周期\" class=\"headerlink\" title=\"变量生存周期\"></a>变量生存周期</h2><ul>\n<li>全局变量，生命周期是永久的。  </li>\n<li><p>局部变量，当定义该变量的函数调用结束时，该变量就会被垃圾回收机制回收而销毁。再次调用该函数时又会重新定义了一个新变量.。 </p>\n<pre><code>var func = function()\n{\nvar a = &apos;linxin&apos;;\nconsole.log(a);\n}\nfunc();  \n</code></pre></li>\n</ul>\n<p>a 为局部变量，在 func 调用完之后，a 就会被销毁了。</p>\n<pre><code>var func = function(){\n var a = &apos;linxin&apos;;\nvar func1 = function(){\na += &apos; a&apos;;\nconsole.log(a);\n}\nreturn func1;\n}\nvar func2 = func();\nfunc2();                    // linxin a\nfunc2();                    // linxin a a\nfunc2();                    // linxin a a a  \n</code></pre><p>可以看出，在第一次调用完 func2 之后，func 中的变量 a 变成 ‘linxin a’，而没有被销毁。因为此时 func1 形成了一个闭包，导致了 a 的生命周期延续了。</p>\n<p>闭包是一个函数，比如上面的 func1 函数<br>闭包使用其他函数定义的变量，使其不被销毁。比如上面 func1 调用了变量 a  </p>\n<p>闭包存在定义该变量的作用域中，变量 a 存在 func 的作用域中，那么 func1 也必然存在这个作用域中。<br>现在可以说，满足这三个条件的就是闭包了。  </p>\n<h2 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h2><p>下面我们通过一个简单而又经典的例子来进一步熟悉闭包。</p>\n<pre><code>for (var i = 0; i &lt; 4; i++) {\n    setTimeout(function () {\n        console.log(i)\n    }, 0)\n}\n</code></pre><p>我们可能会简单的以为控制台会打印出 0 1 2 3，可事实却打印出了 4 4 4 4，这又是为什么呢？我们发现，setTimeout 函数时异步的，等到函数执行时，for循环已经结束了，此时的 i 的值为 4，所以 function() { console.log(i) } 去找变量 i，只能拿到 4。</p>\n<p>我想起上一个例子中，闭包使 a 变量的值被保存起来了，那么这里我们也可以用闭包把 0 1 2 3 保存起来。</p>\n<pre><code>for (var i = 0; i &lt; 4; i++) {\n    (function (i) {\n        setTimeout(function () {\n            console.log(i)\n        }, 0)\n    })(i)\n}\n</code></pre><p>当 i=0 时，把 0 作为参数传进匿名函数中，此时 function(i){} 此匿名函数中的 i 的值为 0，等到 setTimeout 执行时顺着外层去找 i，这时就能拿到 0。如此循环，就能拿到想要的 0 1 2 3。</p>\n<h2 id=\"内存管理\"><a href=\"#内存管理\" class=\"headerlink\" title=\"内存管理\"></a>内存管理</h2><p>在闭包中调用局部变量，会导致这个局部变量无法及时被销毁，相当于全局变量一样会一直占用着内存。如果需要回收这些变量占用的内存，可以手动将变量设置为null。</p>\n<p>然而在使用闭包的过程中，比较容易形成 JavaScript 对象和 DOM 对象的循环引用，就有可能造成内存泄露。这是因为浏览器的垃圾回收机制中，如果两个对象之间形成了循环引用，那么它们都无法被回收。</p>\n<pre><code>function func() {\n    var test = document.getElementById(&apos;test&apos;);\n    test.onclick = function () {\n        console.log(&apos;hello world&apos;);\n    }\n}\n</code></pre><p>在上面例子中，func 函数中用匿名函数创建了一个闭包。变量 test 是 JavaScript 对象，引用了 id 为 test 的 DOM 对象，DOM 对象的 onclick 属性又引用了闭包，而闭包又可以调用 test ，因而形成了循环引用，导致两个对象都无法被回收。要解决这个问题，只需要把循环引用中的变量设为 null 即可。</p>\n<pre><code>function func() {\n    var test = document.getElementById(&apos;test&apos;);\n    test.onclick = function () {\n        console.log(&apos;hello world&apos;);\n    }\n    test = null;\n}\n</code></pre><p>如果在 func 函数中不使用匿名函数创建闭包，而是通过引用一个外部函数，也不会出现循环引用的问题。</p>\n<pre><code>function func() {\n    var test = document.getElementById(&apos;test&apos;);\n    test.onclick = funcTest;\n}\nfunction funcTest(){\n    console.log(&apos;hello world&apos;);\n}\n</code></pre>","excerpt":"","more":"<h2 id=\"闭包是什么\"><a href=\"#闭包是什么\" class=\"headerlink\" title=\"闭包是什么\"></a>闭包是什么</h2><p>在 JavaScript 中，闭包是一个让人很难弄懂的概念。ECMAScript 中给闭包的定义是：闭包，指的是词法表示包括不被计算的变量的函数，也就是说，函数可以使用函数之外定义的变量。</p>\n<ul>\n<li>闭包是一个函数</li>\n<li>闭包可以使用在它外面定义的变量</li>\n<li>闭包存在定义该变量的作用域中</li>\n</ul>\n<h2 id=\"变量作用域\"><a href=\"#变量作用域\" class=\"headerlink\" title=\"变量作用域\"></a>变量作用域</h2><p>变量可分为全局变量和局部变量。  </p>\n<ul>\n<li>全局变量的作用域就是全局性的，在 js 的任何地方都可以使用全局变量。 </li>\n<li>在函数中使用 var 关键字声明变量，这时的变量即是局部变量，它的作用域只在声明该变量的函数内，在函数外面是访问不到该变量的。    </li>\n</ul>\n<h2 id=\"变量生存周期\"><a href=\"#变量生存周期\" class=\"headerlink\" title=\"变量生存周期\"></a>变量生存周期</h2><ul>\n<li>全局变量，生命周期是永久的。  </li>\n<li><p>局部变量，当定义该变量的函数调用结束时，该变量就会被垃圾回收机制回收而销毁。再次调用该函数时又会重新定义了一个新变量.。 </p>\n<pre><code>var func = function()\n{\nvar a = &apos;linxin&apos;;\nconsole.log(a);\n}\nfunc();  \n</code></pre></li>\n</ul>\n<p>a 为局部变量，在 func 调用完之后，a 就会被销毁了。</p>\n<pre><code>var func = function(){\n var a = &apos;linxin&apos;;\nvar func1 = function(){\na += &apos; a&apos;;\nconsole.log(a);\n}\nreturn func1;\n}\nvar func2 = func();\nfunc2();                    // linxin a\nfunc2();                    // linxin a a\nfunc2();                    // linxin a a a  \n</code></pre><p>可以看出，在第一次调用完 func2 之后，func 中的变量 a 变成 ‘linxin a’，而没有被销毁。因为此时 func1 形成了一个闭包，导致了 a 的生命周期延续了。</p>\n<p>闭包是一个函数，比如上面的 func1 函数<br>闭包使用其他函数定义的变量，使其不被销毁。比如上面 func1 调用了变量 a  </p>\n<p>闭包存在定义该变量的作用域中，变量 a 存在 func 的作用域中，那么 func1 也必然存在这个作用域中。<br>现在可以说，满足这三个条件的就是闭包了。  </p>\n<h2 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h2><p>下面我们通过一个简单而又经典的例子来进一步熟悉闭包。</p>\n<pre><code>for (var i = 0; i &lt; 4; i++) {\n    setTimeout(function () {\n        console.log(i)\n    }, 0)\n}\n</code></pre><p>我们可能会简单的以为控制台会打印出 0 1 2 3，可事实却打印出了 4 4 4 4，这又是为什么呢？我们发现，setTimeout 函数时异步的，等到函数执行时，for循环已经结束了，此时的 i 的值为 4，所以 function() { console.log(i) } 去找变量 i，只能拿到 4。</p>\n<p>我想起上一个例子中，闭包使 a 变量的值被保存起来了，那么这里我们也可以用闭包把 0 1 2 3 保存起来。</p>\n<pre><code>for (var i = 0; i &lt; 4; i++) {\n    (function (i) {\n        setTimeout(function () {\n            console.log(i)\n        }, 0)\n    })(i)\n}\n</code></pre><p>当 i=0 时，把 0 作为参数传进匿名函数中，此时 function(i){} 此匿名函数中的 i 的值为 0，等到 setTimeout 执行时顺着外层去找 i，这时就能拿到 0。如此循环，就能拿到想要的 0 1 2 3。</p>\n<h2 id=\"内存管理\"><a href=\"#内存管理\" class=\"headerlink\" title=\"内存管理\"></a>内存管理</h2><p>在闭包中调用局部变量，会导致这个局部变量无法及时被销毁，相当于全局变量一样会一直占用着内存。如果需要回收这些变量占用的内存，可以手动将变量设置为null。</p>\n<p>然而在使用闭包的过程中，比较容易形成 JavaScript 对象和 DOM 对象的循环引用，就有可能造成内存泄露。这是因为浏览器的垃圾回收机制中，如果两个对象之间形成了循环引用，那么它们都无法被回收。</p>\n<pre><code>function func() {\n    var test = document.getElementById(&apos;test&apos;);\n    test.onclick = function () {\n        console.log(&apos;hello world&apos;);\n    }\n}\n</code></pre><p>在上面例子中，func 函数中用匿名函数创建了一个闭包。变量 test 是 JavaScript 对象，引用了 id 为 test 的 DOM 对象，DOM 对象的 onclick 属性又引用了闭包，而闭包又可以调用 test ，因而形成了循环引用，导致两个对象都无法被回收。要解决这个问题，只需要把循环引用中的变量设为 null 即可。</p>\n<pre><code>function func() {\n    var test = document.getElementById(&apos;test&apos;);\n    test.onclick = function () {\n        console.log(&apos;hello world&apos;);\n    }\n    test = null;\n}\n</code></pre><p>如果在 func 函数中不使用匿名函数创建闭包，而是通过引用一个外部函数，也不会出现循环引用的问题。</p>\n<pre><code>function func() {\n    var test = document.getElementById(&apos;test&apos;);\n    test.onclick = funcTest;\n}\nfunction funcTest(){\n    console.log(&apos;hello world&apos;);\n}\n</code></pre>"},{"title":"使用hexo搭建静态个人博客","_content":"## 简单介绍hexo\n[hexo](https://hexo.io/)是一个开源的静态博客生成器,用node.js开发,作者是台湾大学生tommy351。这篇文章主要介绍在windows平台上用node.js框架搭建blog的方法。\n## 为什么使用静态博客\n不少人选择在虚拟主机或vps上面搭建动态博客。但是这些主机商通常“免费的不稳定,稳定的不免费”。之前我图方便在淘宝上购买了香港的免备案服务器，除了网络带宽，流量受到限制，还随时会面临服务器商跑路的风险。如果我们能够找到这样的空间,在自己保留最大控制权前提下,由别人托管,会省去不少事情。 \n\n\n静态博客编译之后是纯html页面,优点就是支持它的环境十分好找,例如github、gitcafe、七牛云存储等站点都支持静态页面托管,自然是我们的首选了。我自己的[博客](hhb123.top)就是托管在github仓库上的。  \n  \n   \n但是静态博客并非没有缺点。动态博客更新文章时,脚本是不变的,只需要更新数据库。静态博客要频繁改动文件,不支持增量式上传的东西,比如ftp,就难于管理。此外,还要十分熟悉git各种命令,才能部署页面，接下来我们就开始blog的部署。\n## 配置环境\n* node.js框架\n* gitbub账户&仓库\n* git  \n* 域名\n\n## 开始搭建  \n\n### 1.node.js框架的安装  \n\nnode.js框架的安装可以到[node.js官网](http://nodejs.cn/download/),对于windows平台，下载安装包之后直接点击安装即可.  \n![](http://onep1caa3.bkt.clouddn.com/node.js%E4%B8%8B%E8%BD%BD.png)\n安装完成以后按window+r，输入cmd打开命令行窗口，输入 `npm`，这时若弹出node.js 的使用指南说明安装完成。 \n![](http://onep1caa3.bkt.clouddn.com/%E6%A3%80%E9%AA%8Cnode.js%E5%AE%89%E8%A3%85.png)\n### 2.hexo的安装\n* 1.在命令提示窗口中使用命令  `npm install -g hexo `  \n 来安装 hexo。\n*  2.在你喜欢的位置创建文件夹用来存放网页内容，如：D/hexo，接着转到这个文件夹，使用命令提示行输入 hexo init。 这个文件夹就是你的 blog 的源文件夹;  \n\n\n*  3.生成静态页面，执行命令   `npm generate` （或者`npm g`);\n*  4.执行命令   `hexo server`   \n在本地建立网站，默认端口为4000，打开任意浏览器，键入 http://localhost:4000 (或者127.0.0.1：4000)，这是就可以在本地访问搭建好的网页了；  \n![http://onep1caa3.bkt.clouddn.com/hexo%20server.png](http://onep1caa3.bkt.clouddn.com/hexo%20server.png)\n\n\n### 3.github仓库的建立\ngithub仓库的建立比较简单，大家可以参照[这篇文章](http://www.cnblogs.com/keZhenxu94/p/5288488.html)；注意建立的仓库的名字必须与你自己的用户名对应，即仓库名必须为【your_user_name.github.io】。 \n![](http://onep1caa3.bkt.clouddn.com/github%E4%BB%93%E5%BA%93.png)\n\n\n### 4.准备将本地网站clone到你的github仓库中   \n\n  在本地预览自己的网页感觉没什么问题以后，就可以开始把自己的个人博客clone到github仓库上。  \n \n建立关联，需要修改之前建立网站的源文件夹的一个名为_config.yml的文件，这个文件可以用大多数文本编辑器打开，我用的是brackets，这个软件很适合初学者学习前端的基本知识，因为它有即时预览模式，在编辑网页的同时可以看到网页的变化。闲话不多说，打开这个文件之后，看到前面有些设置选项，这些暂时都不管，拉到最下面，添加如下代码   \n\n    deploy:\n            \n    type: git\n            \n    repo: https://github.com/hhb1994/hhb1994.github.io.git\n        \n    branch: master  \n 其中repo后面跟的应该是你的github仓库的地址。请注意，type，repo，branch冒号后面一定要加一个半角空格，不加的话不能上传。之前没有注意到这个问题，弄了很久都没有成功。  \n \n \n### 5.使用SSH登陆\n使用ssh可以免去每次更新网站都输入账户密码的麻烦，详细的本地生成ssh并绑定你的github账户的教程请看[这里](http://blog.csdn.net/keyboardota/article/details/7603630)，需要注意的是，如果你有一个以上的仓库，必须把ssh绑定到你要上传网站的那个仓库里面，如果你直接从设置里面绑定，执行 `hexo deploy`时会报错。正确的做法时选择你上传网站的仓库，在这个仓库的setting里面绑定ssh。如果之前是全局绑定了ssh，需要先解绑，再在你选择的仓库进行绑定。\n![](http://onep1caa3.bkt.clouddn.com/ssh%E3%80%82github.png)\n\n\n### 6.开始上传\n执行命令  \n`hexo deploy`(或者`hexo d`)，就开始了上传流程，上传完毕之后，就可以打开网页hhb1994.github.io（换成你的仓库地址）访问你的博客了。  \n\n## 域名的重定向\n如果你想把这个博客和你购买的域名绑定在一起（可以到万网购买域名，价格也比较实惠，在这里我是绑定万网购买的域名），请打开万网，登陆你的账户以后找到域名设置-域名解析，添加三条解析。\n\n* 1.记录类型：CNAME，主机记录：www，记录值：hhb1994924.github.io；\n*  2.记录类型：A，主机记录：@，记录值：192.30.252.154；\n*  3.记录类型：A，主机记录：@，记录值：192.30.252.153； \n![](http://onep1caa3.bkt.clouddn.com/%E6%B7%BB%E5%8A%A0%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90.png)\n\n\n添加之后，还需要在hexo/source中添加CNAME文件，文件名为CNAME，注意没有缩略名，用文本编辑器打开这个文件，输入hhb123.top(换成你自己购买的域名)，接着用命令提示行输入   \n\n\n    hexo clean  \n        \n    hexo deploy  \n\n稍等一会，就可以在浏览器输入hhb123.top来访问个人博客了。 \n\n## 添加文章\n可以直接在D:\\hexo\\source\\_posts中添加.md文件，再执行   \n\n    hexo clean  \n    hexo deploy\n就可以上传文章了，.md文件使用markdown格式，这种格式注重内容而不是形式，语法结构也比较简单，很快就可以学会，[这里](http://www.jianshu.com/p/q81RER)有教程。编辑markdown格式的编辑器有很多，windows平台上的markpad，markdownpad都是不错的选择，另外还有一些网页上面的markdown编辑器，效果也不错。  \n![](http://onep1caa3.bkt.clouddn.com/markpad.png)\n\n## 更换主题&个性化\n  hexo提供了很方便的更换主题的方式，[选择你喜欢的主题](https://www.zhihu.com/question/24422335)，打开存储你的网页的文件夹，然后使用命令提示行键入  \n  \n  `git clone https://github.com/iissnan/hexo-theme-next themes/next`  \n  \n  这样就可以把“next”主题的文件拷贝到hexo/themes文件夹了。\n  接着在hexo文件夹的_config.ylm文件夹中找到主题设置，  \n ` theme：landscape ` \n  landscape是默认的主题，这里我们把默认的主题改为  \n  `theme：next `   \n  接着执行    \n  \n    hexo clean  \n    hexo deploy  \n  就可以看到新主题的效果了，主题的设置在 D:\\hexo\\themes\\next\\_config.yml中。\n  \n  \n  \n        ","source":"_posts/2017.03.26.md","raw":"----\ntitle: 使用hexo搭建静态个人博客\ncategories: 教程\ntags: [hexo,git]\n----\n## 简单介绍hexo\n[hexo](https://hexo.io/)是一个开源的静态博客生成器,用node.js开发,作者是台湾大学生tommy351。这篇文章主要介绍在windows平台上用node.js框架搭建blog的方法。\n## 为什么使用静态博客\n不少人选择在虚拟主机或vps上面搭建动态博客。但是这些主机商通常“免费的不稳定,稳定的不免费”。之前我图方便在淘宝上购买了香港的免备案服务器，除了网络带宽，流量受到限制，还随时会面临服务器商跑路的风险。如果我们能够找到这样的空间,在自己保留最大控制权前提下,由别人托管,会省去不少事情。 \n\n\n静态博客编译之后是纯html页面,优点就是支持它的环境十分好找,例如github、gitcafe、七牛云存储等站点都支持静态页面托管,自然是我们的首选了。我自己的[博客](hhb123.top)就是托管在github仓库上的。  \n  \n   \n但是静态博客并非没有缺点。动态博客更新文章时,脚本是不变的,只需要更新数据库。静态博客要频繁改动文件,不支持增量式上传的东西,比如ftp,就难于管理。此外,还要十分熟悉git各种命令,才能部署页面，接下来我们就开始blog的部署。\n## 配置环境\n* node.js框架\n* gitbub账户&仓库\n* git  \n* 域名\n\n## 开始搭建  \n\n### 1.node.js框架的安装  \n\nnode.js框架的安装可以到[node.js官网](http://nodejs.cn/download/),对于windows平台，下载安装包之后直接点击安装即可.  \n![](http://onep1caa3.bkt.clouddn.com/node.js%E4%B8%8B%E8%BD%BD.png)\n安装完成以后按window+r，输入cmd打开命令行窗口，输入 `npm`，这时若弹出node.js 的使用指南说明安装完成。 \n![](http://onep1caa3.bkt.clouddn.com/%E6%A3%80%E9%AA%8Cnode.js%E5%AE%89%E8%A3%85.png)\n### 2.hexo的安装\n* 1.在命令提示窗口中使用命令  `npm install -g hexo `  \n 来安装 hexo。\n*  2.在你喜欢的位置创建文件夹用来存放网页内容，如：D/hexo，接着转到这个文件夹，使用命令提示行输入 hexo init。 这个文件夹就是你的 blog 的源文件夹;  \n\n\n*  3.生成静态页面，执行命令   `npm generate` （或者`npm g`);\n*  4.执行命令   `hexo server`   \n在本地建立网站，默认端口为4000，打开任意浏览器，键入 http://localhost:4000 (或者127.0.0.1：4000)，这是就可以在本地访问搭建好的网页了；  \n![http://onep1caa3.bkt.clouddn.com/hexo%20server.png](http://onep1caa3.bkt.clouddn.com/hexo%20server.png)\n\n\n### 3.github仓库的建立\ngithub仓库的建立比较简单，大家可以参照[这篇文章](http://www.cnblogs.com/keZhenxu94/p/5288488.html)；注意建立的仓库的名字必须与你自己的用户名对应，即仓库名必须为【your_user_name.github.io】。 \n![](http://onep1caa3.bkt.clouddn.com/github%E4%BB%93%E5%BA%93.png)\n\n\n### 4.准备将本地网站clone到你的github仓库中   \n\n  在本地预览自己的网页感觉没什么问题以后，就可以开始把自己的个人博客clone到github仓库上。  \n \n建立关联，需要修改之前建立网站的源文件夹的一个名为_config.yml的文件，这个文件可以用大多数文本编辑器打开，我用的是brackets，这个软件很适合初学者学习前端的基本知识，因为它有即时预览模式，在编辑网页的同时可以看到网页的变化。闲话不多说，打开这个文件之后，看到前面有些设置选项，这些暂时都不管，拉到最下面，添加如下代码   \n\n    deploy:\n            \n    type: git\n            \n    repo: https://github.com/hhb1994/hhb1994.github.io.git\n        \n    branch: master  \n 其中repo后面跟的应该是你的github仓库的地址。请注意，type，repo，branch冒号后面一定要加一个半角空格，不加的话不能上传。之前没有注意到这个问题，弄了很久都没有成功。  \n \n \n### 5.使用SSH登陆\n使用ssh可以免去每次更新网站都输入账户密码的麻烦，详细的本地生成ssh并绑定你的github账户的教程请看[这里](http://blog.csdn.net/keyboardota/article/details/7603630)，需要注意的是，如果你有一个以上的仓库，必须把ssh绑定到你要上传网站的那个仓库里面，如果你直接从设置里面绑定，执行 `hexo deploy`时会报错。正确的做法时选择你上传网站的仓库，在这个仓库的setting里面绑定ssh。如果之前是全局绑定了ssh，需要先解绑，再在你选择的仓库进行绑定。\n![](http://onep1caa3.bkt.clouddn.com/ssh%E3%80%82github.png)\n\n\n### 6.开始上传\n执行命令  \n`hexo deploy`(或者`hexo d`)，就开始了上传流程，上传完毕之后，就可以打开网页hhb1994.github.io（换成你的仓库地址）访问你的博客了。  \n\n## 域名的重定向\n如果你想把这个博客和你购买的域名绑定在一起（可以到万网购买域名，价格也比较实惠，在这里我是绑定万网购买的域名），请打开万网，登陆你的账户以后找到域名设置-域名解析，添加三条解析。\n\n* 1.记录类型：CNAME，主机记录：www，记录值：hhb1994924.github.io；\n*  2.记录类型：A，主机记录：@，记录值：192.30.252.154；\n*  3.记录类型：A，主机记录：@，记录值：192.30.252.153； \n![](http://onep1caa3.bkt.clouddn.com/%E6%B7%BB%E5%8A%A0%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90.png)\n\n\n添加之后，还需要在hexo/source中添加CNAME文件，文件名为CNAME，注意没有缩略名，用文本编辑器打开这个文件，输入hhb123.top(换成你自己购买的域名)，接着用命令提示行输入   \n\n\n    hexo clean  \n        \n    hexo deploy  \n\n稍等一会，就可以在浏览器输入hhb123.top来访问个人博客了。 \n\n## 添加文章\n可以直接在D:\\hexo\\source\\_posts中添加.md文件，再执行   \n\n    hexo clean  \n    hexo deploy\n就可以上传文章了，.md文件使用markdown格式，这种格式注重内容而不是形式，语法结构也比较简单，很快就可以学会，[这里](http://www.jianshu.com/p/q81RER)有教程。编辑markdown格式的编辑器有很多，windows平台上的markpad，markdownpad都是不错的选择，另外还有一些网页上面的markdown编辑器，效果也不错。  \n![](http://onep1caa3.bkt.clouddn.com/markpad.png)\n\n## 更换主题&个性化\n  hexo提供了很方便的更换主题的方式，[选择你喜欢的主题](https://www.zhihu.com/question/24422335)，打开存储你的网页的文件夹，然后使用命令提示行键入  \n  \n  `git clone https://github.com/iissnan/hexo-theme-next themes/next`  \n  \n  这样就可以把“next”主题的文件拷贝到hexo/themes文件夹了。\n  接着在hexo文件夹的_config.ylm文件夹中找到主题设置，  \n ` theme：landscape ` \n  landscape是默认的主题，这里我们把默认的主题改为  \n  `theme：next `   \n  接着执行    \n  \n    hexo clean  \n    hexo deploy  \n  就可以看到新主题的效果了，主题的设置在 D:\\hexo\\themes\\next\\_config.yml中。\n  \n  \n  \n        ","slug":"2017.03.26","published":1,"date":"2017-03-27T10:41:14.000Z","updated":"2017-03-27T10:41:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwvh258v0006w39za4djuuzs","content":"<h2 id=\"简单介绍hexo\"><a href=\"#简单介绍hexo\" class=\"headerlink\" title=\"简单介绍hexo\"></a>简单介绍hexo</h2><p><a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">hexo</a>是一个开源的静态博客生成器,用node.js开发,作者是台湾大学生tommy351。这篇文章主要介绍在windows平台上用node.js框架搭建blog的方法。</p>\n<h2 id=\"为什么使用静态博客\"><a href=\"#为什么使用静态博客\" class=\"headerlink\" title=\"为什么使用静态博客\"></a>为什么使用静态博客</h2><p>不少人选择在虚拟主机或vps上面搭建动态博客。但是这些主机商通常“免费的不稳定,稳定的不免费”。之前我图方便在淘宝上购买了香港的免备案服务器，除了网络带宽，流量受到限制，还随时会面临服务器商跑路的风险。如果我们能够找到这样的空间,在自己保留最大控制权前提下,由别人托管,会省去不少事情。 </p>\n<p>静态博客编译之后是纯html页面,优点就是支持它的环境十分好找,例如github、gitcafe、七牛云存储等站点都支持静态页面托管,自然是我们的首选了。我自己的<a href=\"hhb123.top\">博客</a>就是托管在github仓库上的。  </p>\n<p>但是静态博客并非没有缺点。动态博客更新文章时,脚本是不变的,只需要更新数据库。静态博客要频繁改动文件,不支持增量式上传的东西,比如ftp,就难于管理。此外,还要十分熟悉git各种命令,才能部署页面，接下来我们就开始blog的部署。</p>\n<h2 id=\"配置环境\"><a href=\"#配置环境\" class=\"headerlink\" title=\"配置环境\"></a>配置环境</h2><ul>\n<li>node.js框架</li>\n<li>gitbub账户&amp;仓库</li>\n<li>git  </li>\n<li>域名</li>\n</ul>\n<h2 id=\"开始搭建\"><a href=\"#开始搭建\" class=\"headerlink\" title=\"开始搭建\"></a>开始搭建</h2><h3 id=\"1-node-js框架的安装\"><a href=\"#1-node-js框架的安装\" class=\"headerlink\" title=\"1.node.js框架的安装\"></a>1.node.js框架的安装</h3><p>node.js框架的安装可以到<a href=\"http://nodejs.cn/download/\" target=\"_blank\" rel=\"external\">node.js官网</a>,对于windows平台，下载安装包之后直接点击安装即可.<br><img src=\"http://onep1caa3.bkt.clouddn.com/node.js%E4%B8%8B%E8%BD%BD.png\" alt=\"\"><br>安装完成以后按window+r，输入cmd打开命令行窗口，输入 <code>npm</code>，这时若弹出node.js 的使用指南说明安装完成。<br><img src=\"http://onep1caa3.bkt.clouddn.com/%E6%A3%80%E9%AA%8Cnode.js%E5%AE%89%E8%A3%85.png\" alt=\"\"></p>\n<h3 id=\"2-hexo的安装\"><a href=\"#2-hexo的安装\" class=\"headerlink\" title=\"2.hexo的安装\"></a>2.hexo的安装</h3><ul>\n<li>1.在命令提示窗口中使用命令  <code>npm install -g hexo</code><br>来安装 hexo。</li>\n<li>2.在你喜欢的位置创建文件夹用来存放网页内容，如：D/hexo，接着转到这个文件夹，使用命令提示行输入 hexo init。 这个文件夹就是你的 blog 的源文件夹;  </li>\n</ul>\n<ul>\n<li>3.生成静态页面，执行命令   <code>npm generate</code> （或者<code>npm g</code>);</li>\n<li>4.执行命令   <code>hexo server</code><br>在本地建立网站，默认端口为4000，打开任意浏览器，键入 <a href=\"http://localhost:4000\" target=\"_blank\" rel=\"external\">http://localhost:4000</a> (或者127.0.0.1：4000)，这是就可以在本地访问搭建好的网页了；<br><img src=\"http://onep1caa3.bkt.clouddn.com/hexo%20server.png\" alt=\"http://onep1caa3.bkt.clouddn.com/hexo%20server.png\"></li>\n</ul>\n<h3 id=\"3-github仓库的建立\"><a href=\"#3-github仓库的建立\" class=\"headerlink\" title=\"3.github仓库的建立\"></a>3.github仓库的建立</h3><p>github仓库的建立比较简单，大家可以参照<a href=\"http://www.cnblogs.com/keZhenxu94/p/5288488.html\" target=\"_blank\" rel=\"external\">这篇文章</a>；注意建立的仓库的名字必须与你自己的用户名对应，即仓库名必须为【your_user_name.github.io】。<br><img src=\"http://onep1caa3.bkt.clouddn.com/github%E4%BB%93%E5%BA%93.png\" alt=\"\"></p>\n<h3 id=\"4-准备将本地网站clone到你的github仓库中\"><a href=\"#4-准备将本地网站clone到你的github仓库中\" class=\"headerlink\" title=\"4.准备将本地网站clone到你的github仓库中\"></a>4.准备将本地网站clone到你的github仓库中</h3><p>  在本地预览自己的网页感觉没什么问题以后，就可以开始把自己的个人博客clone到github仓库上。  </p>\n<p>建立关联，需要修改之前建立网站的源文件夹的一个名为_config.yml的文件，这个文件可以用大多数文本编辑器打开，我用的是brackets，这个软件很适合初学者学习前端的基本知识，因为它有即时预览模式，在编辑网页的同时可以看到网页的变化。闲话不多说，打开这个文件之后，看到前面有些设置选项，这些暂时都不管，拉到最下面，添加如下代码   </p>\n<pre><code>deploy:\n\ntype: git\n\nrepo: https://github.com/hhb1994/hhb1994.github.io.git\n\nbranch: master  \n</code></pre><p> 其中repo后面跟的应该是你的github仓库的地址。请注意，type，repo，branch冒号后面一定要加一个半角空格，不加的话不能上传。之前没有注意到这个问题，弄了很久都没有成功。  </p>\n<h3 id=\"5-使用SSH登陆\"><a href=\"#5-使用SSH登陆\" class=\"headerlink\" title=\"5.使用SSH登陆\"></a>5.使用SSH登陆</h3><p>使用ssh可以免去每次更新网站都输入账户密码的麻烦，详细的本地生成ssh并绑定你的github账户的教程请看<a href=\"http://blog.csdn.net/keyboardota/article/details/7603630\" target=\"_blank\" rel=\"external\">这里</a>，需要注意的是，如果你有一个以上的仓库，必须把ssh绑定到你要上传网站的那个仓库里面，如果你直接从设置里面绑定，执行 <code>hexo deploy</code>时会报错。正确的做法时选择你上传网站的仓库，在这个仓库的setting里面绑定ssh。如果之前是全局绑定了ssh，需要先解绑，再在你选择的仓库进行绑定。<br><img src=\"http://onep1caa3.bkt.clouddn.com/ssh%E3%80%82github.png\" alt=\"\"></p>\n<h3 id=\"6-开始上传\"><a href=\"#6-开始上传\" class=\"headerlink\" title=\"6.开始上传\"></a>6.开始上传</h3><p>执行命令<br><code>hexo deploy</code>(或者<code>hexo d</code>)，就开始了上传流程，上传完毕之后，就可以打开网页hhb1994.github.io（换成你的仓库地址）访问你的博客了。  </p>\n<h2 id=\"域名的重定向\"><a href=\"#域名的重定向\" class=\"headerlink\" title=\"域名的重定向\"></a>域名的重定向</h2><p>如果你想把这个博客和你购买的域名绑定在一起（可以到万网购买域名，价格也比较实惠，在这里我是绑定万网购买的域名），请打开万网，登陆你的账户以后找到域名设置-域名解析，添加三条解析。</p>\n<ul>\n<li>1.记录类型：CNAME，主机记录：www，记录值：hhb1994924.github.io；</li>\n<li>2.记录类型：A，主机记录：@，记录值：192.30.252.154；</li>\n<li>3.记录类型：A，主机记录：@，记录值：192.30.252.153；<br><img src=\"http://onep1caa3.bkt.clouddn.com/%E6%B7%BB%E5%8A%A0%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90.png\" alt=\"\"></li>\n</ul>\n<p>添加之后，还需要在hexo/source中添加CNAME文件，文件名为CNAME，注意没有缩略名，用文本编辑器打开这个文件，输入hhb123.top(换成你自己购买的域名)，接着用命令提示行输入   </p>\n<pre><code>hexo clean  \n\nhexo deploy  \n</code></pre><p>稍等一会，就可以在浏览器输入hhb123.top来访问个人博客了。 </p>\n<h2 id=\"添加文章\"><a href=\"#添加文章\" class=\"headerlink\" title=\"添加文章\"></a>添加文章</h2><p>可以直接在D:\\hexo\\source_posts中添加.md文件，再执行   </p>\n<pre><code>hexo clean  \nhexo deploy\n</code></pre><p>就可以上传文章了，.md文件使用markdown格式，这种格式注重内容而不是形式，语法结构也比较简单，很快就可以学会，<a href=\"http://www.jianshu.com/p/q81RER\" target=\"_blank\" rel=\"external\">这里</a>有教程。编辑markdown格式的编辑器有很多，windows平台上的markpad，markdownpad都是不错的选择，另外还有一些网页上面的markdown编辑器，效果也不错。<br><img src=\"http://onep1caa3.bkt.clouddn.com/markpad.png\" alt=\"\"></p>\n<h2 id=\"更换主题-amp-个性化\"><a href=\"#更换主题-amp-个性化\" class=\"headerlink\" title=\"更换主题&amp;个性化\"></a>更换主题&amp;个性化</h2><p>  hexo提供了很方便的更换主题的方式，<a href=\"https://www.zhihu.com/question/24422335\" target=\"_blank\" rel=\"external\">选择你喜欢的主题</a>，打开存储你的网页的文件夹，然后使用命令提示行键入  </p>\n<p>  <code>git clone https://github.com/iissnan/hexo-theme-next themes/next</code>  </p>\n<p>  这样就可以把“next”主题的文件拷贝到hexo/themes文件夹了。<br>  接着在hexo文件夹的_config.ylm文件夹中找到主题设置，<br> <code>theme：landscape</code><br>  landscape是默认的主题，这里我们把默认的主题改为<br>  <code>theme：next</code><br>  接着执行    </p>\n<pre><code>hexo clean  \nhexo deploy  \n</code></pre><p>  就可以看到新主题的效果了，主题的设置在 D:\\hexo\\themes\\next_config.yml中。</p>\n","excerpt":"","more":"<h2 id=\"简单介绍hexo\"><a href=\"#简单介绍hexo\" class=\"headerlink\" title=\"简单介绍hexo\"></a>简单介绍hexo</h2><p><a href=\"https://hexo.io/\">hexo</a>是一个开源的静态博客生成器,用node.js开发,作者是台湾大学生tommy351。这篇文章主要介绍在windows平台上用node.js框架搭建blog的方法。</p>\n<h2 id=\"为什么使用静态博客\"><a href=\"#为什么使用静态博客\" class=\"headerlink\" title=\"为什么使用静态博客\"></a>为什么使用静态博客</h2><p>不少人选择在虚拟主机或vps上面搭建动态博客。但是这些主机商通常“免费的不稳定,稳定的不免费”。之前我图方便在淘宝上购买了香港的免备案服务器，除了网络带宽，流量受到限制，还随时会面临服务器商跑路的风险。如果我们能够找到这样的空间,在自己保留最大控制权前提下,由别人托管,会省去不少事情。 </p>\n<p>静态博客编译之后是纯html页面,优点就是支持它的环境十分好找,例如github、gitcafe、七牛云存储等站点都支持静态页面托管,自然是我们的首选了。我自己的<a href=\"hhb123.top\">博客</a>就是托管在github仓库上的。  </p>\n<p>但是静态博客并非没有缺点。动态博客更新文章时,脚本是不变的,只需要更新数据库。静态博客要频繁改动文件,不支持增量式上传的东西,比如ftp,就难于管理。此外,还要十分熟悉git各种命令,才能部署页面，接下来我们就开始blog的部署。</p>\n<h2 id=\"配置环境\"><a href=\"#配置环境\" class=\"headerlink\" title=\"配置环境\"></a>配置环境</h2><ul>\n<li>node.js框架</li>\n<li>gitbub账户&amp;仓库</li>\n<li>git  </li>\n<li>域名</li>\n</ul>\n<h2 id=\"开始搭建\"><a href=\"#开始搭建\" class=\"headerlink\" title=\"开始搭建\"></a>开始搭建</h2><h3 id=\"1-node-js框架的安装\"><a href=\"#1-node-js框架的安装\" class=\"headerlink\" title=\"1.node.js框架的安装\"></a>1.node.js框架的安装</h3><p>node.js框架的安装可以到<a href=\"http://nodejs.cn/download/\">node.js官网</a>,对于windows平台，下载安装包之后直接点击安装即可.<br><img src=\"http://onep1caa3.bkt.clouddn.com/node.js%E4%B8%8B%E8%BD%BD.png\" alt=\"\"><br>安装完成以后按window+r，输入cmd打开命令行窗口，输入 <code>npm</code>，这时若弹出node.js 的使用指南说明安装完成。<br><img src=\"http://onep1caa3.bkt.clouddn.com/%E6%A3%80%E9%AA%8Cnode.js%E5%AE%89%E8%A3%85.png\" alt=\"\"></p>\n<h3 id=\"2-hexo的安装\"><a href=\"#2-hexo的安装\" class=\"headerlink\" title=\"2.hexo的安装\"></a>2.hexo的安装</h3><ul>\n<li>1.在命令提示窗口中使用命令  <code>npm install -g hexo</code><br>来安装 hexo。</li>\n<li>2.在你喜欢的位置创建文件夹用来存放网页内容，如：D/hexo，接着转到这个文件夹，使用命令提示行输入 hexo init。 这个文件夹就是你的 blog 的源文件夹;  </li>\n</ul>\n<ul>\n<li>3.生成静态页面，执行命令   <code>npm generate</code> （或者<code>npm g</code>);</li>\n<li>4.执行命令   <code>hexo server</code><br>在本地建立网站，默认端口为4000，打开任意浏览器，键入 <a href=\"http://localhost:4000\">http://localhost:4000</a> (或者127.0.0.1：4000)，这是就可以在本地访问搭建好的网页了；<br><img src=\"http://onep1caa3.bkt.clouddn.com/hexo%20server.png\" alt=\"http://onep1caa3.bkt.clouddn.com/hexo%20server.png\"></li>\n</ul>\n<h3 id=\"3-github仓库的建立\"><a href=\"#3-github仓库的建立\" class=\"headerlink\" title=\"3.github仓库的建立\"></a>3.github仓库的建立</h3><p>github仓库的建立比较简单，大家可以参照<a href=\"http://www.cnblogs.com/keZhenxu94/p/5288488.html\">这篇文章</a>；注意建立的仓库的名字必须与你自己的用户名对应，即仓库名必须为【your_user_name.github.io】。<br><img src=\"http://onep1caa3.bkt.clouddn.com/github%E4%BB%93%E5%BA%93.png\" alt=\"\"></p>\n<h3 id=\"4-准备将本地网站clone到你的github仓库中\"><a href=\"#4-准备将本地网站clone到你的github仓库中\" class=\"headerlink\" title=\"4.准备将本地网站clone到你的github仓库中\"></a>4.准备将本地网站clone到你的github仓库中</h3><p>  在本地预览自己的网页感觉没什么问题以后，就可以开始把自己的个人博客clone到github仓库上。  </p>\n<p>建立关联，需要修改之前建立网站的源文件夹的一个名为_config.yml的文件，这个文件可以用大多数文本编辑器打开，我用的是brackets，这个软件很适合初学者学习前端的基本知识，因为它有即时预览模式，在编辑网页的同时可以看到网页的变化。闲话不多说，打开这个文件之后，看到前面有些设置选项，这些暂时都不管，拉到最下面，添加如下代码   </p>\n<pre><code>deploy:\n\ntype: git\n\nrepo: https://github.com/hhb1994/hhb1994.github.io.git\n\nbranch: master  \n</code></pre><p> 其中repo后面跟的应该是你的github仓库的地址。请注意，type，repo，branch冒号后面一定要加一个半角空格，不加的话不能上传。之前没有注意到这个问题，弄了很久都没有成功。  </p>\n<h3 id=\"5-使用SSH登陆\"><a href=\"#5-使用SSH登陆\" class=\"headerlink\" title=\"5.使用SSH登陆\"></a>5.使用SSH登陆</h3><p>使用ssh可以免去每次更新网站都输入账户密码的麻烦，详细的本地生成ssh并绑定你的github账户的教程请看<a href=\"http://blog.csdn.net/keyboardota/article/details/7603630\">这里</a>，需要注意的是，如果你有一个以上的仓库，必须把ssh绑定到你要上传网站的那个仓库里面，如果你直接从设置里面绑定，执行 <code>hexo deploy</code>时会报错。正确的做法时选择你上传网站的仓库，在这个仓库的setting里面绑定ssh。如果之前是全局绑定了ssh，需要先解绑，再在你选择的仓库进行绑定。<br><img src=\"http://onep1caa3.bkt.clouddn.com/ssh%E3%80%82github.png\" alt=\"\"></p>\n<h3 id=\"6-开始上传\"><a href=\"#6-开始上传\" class=\"headerlink\" title=\"6.开始上传\"></a>6.开始上传</h3><p>执行命令<br><code>hexo deploy</code>(或者<code>hexo d</code>)，就开始了上传流程，上传完毕之后，就可以打开网页hhb1994.github.io（换成你的仓库地址）访问你的博客了。  </p>\n<h2 id=\"域名的重定向\"><a href=\"#域名的重定向\" class=\"headerlink\" title=\"域名的重定向\"></a>域名的重定向</h2><p>如果你想把这个博客和你购买的域名绑定在一起（可以到万网购买域名，价格也比较实惠，在这里我是绑定万网购买的域名），请打开万网，登陆你的账户以后找到域名设置-域名解析，添加三条解析。</p>\n<ul>\n<li>1.记录类型：CNAME，主机记录：www，记录值：hhb1994924.github.io；</li>\n<li>2.记录类型：A，主机记录：@，记录值：192.30.252.154；</li>\n<li>3.记录类型：A，主机记录：@，记录值：192.30.252.153；<br><img src=\"http://onep1caa3.bkt.clouddn.com/%E6%B7%BB%E5%8A%A0%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90.png\" alt=\"\"></li>\n</ul>\n<p>添加之后，还需要在hexo/source中添加CNAME文件，文件名为CNAME，注意没有缩略名，用文本编辑器打开这个文件，输入hhb123.top(换成你自己购买的域名)，接着用命令提示行输入   </p>\n<pre><code>hexo clean  \n\nhexo deploy  \n</code></pre><p>稍等一会，就可以在浏览器输入hhb123.top来访问个人博客了。 </p>\n<h2 id=\"添加文章\"><a href=\"#添加文章\" class=\"headerlink\" title=\"添加文章\"></a>添加文章</h2><p>可以直接在D:\\hexo\\source_posts中添加.md文件，再执行   </p>\n<pre><code>hexo clean  \nhexo deploy\n</code></pre><p>就可以上传文章了，.md文件使用markdown格式，这种格式注重内容而不是形式，语法结构也比较简单，很快就可以学会，<a href=\"http://www.jianshu.com/p/q81RER\">这里</a>有教程。编辑markdown格式的编辑器有很多，windows平台上的markpad，markdownpad都是不错的选择，另外还有一些网页上面的markdown编辑器，效果也不错。<br><img src=\"http://onep1caa3.bkt.clouddn.com/markpad.png\" alt=\"\"></p>\n<h2 id=\"更换主题-amp-个性化\"><a href=\"#更换主题-amp-个性化\" class=\"headerlink\" title=\"更换主题&amp;个性化\"></a>更换主题&amp;个性化</h2><p>  hexo提供了很方便的更换主题的方式，<a href=\"https://www.zhihu.com/question/24422335\">选择你喜欢的主题</a>，打开存储你的网页的文件夹，然后使用命令提示行键入  </p>\n<p>  <code>git clone https://github.com/iissnan/hexo-theme-next themes/next</code>  </p>\n<p>  这样就可以把“next”主题的文件拷贝到hexo/themes文件夹了。<br>  接着在hexo文件夹的_config.ylm文件夹中找到主题设置，<br> <code>theme：landscape</code><br>  landscape是默认的主题，这里我们把默认的主题改为<br>  <code>theme：next</code><br>  接着执行    </p>\n<pre><code>hexo clean  \nhexo deploy  \n</code></pre><p>  就可以看到新主题的效果了，主题的设置在 D:\\hexo\\themes\\next_config.yml中。</p>\n"},{"title":"使用bootstrap实现图片轮播效果","_content":"\n## 什么是bootstrap？\nBootstrap，来自 Twitter，是目前很受欢迎的前端框架。Bootstrap 是基于 HTML、CSS、JAVASCRIPT 的，它简洁灵活，使得 Web 开发更加快捷。它由Twitter的设计师Mark Otto和Jacob Thornton合作开发，是一个CSS/HTML框架。Bootstrap提供了优雅的HTML和CSS规范，它即是由动态CSS语言Less写成。Bootstrap一经推出后颇受欢迎，一直是GitHub上的热门开源项目，包括NASA的MSNBC（微软全国广播公司）的Breaking News都使用了该项目。使用bootstrap的缺点是设计出来的网页给人一种钦定的感觉。。。  \n## 使用bootstrap实现轮播效果\n* 由于bootstrap中有HTML5特性，所以要添加 `<!DOCTYPE html> `属性；\n### 基本轮播  \n代码如下：  \n>     <!DOCTYPE html>\n>     <script src=\"http://how2j.cn/study/js/jquery/2.0.0/jquery.min.js\"></script>\n>     <link href=\"http://how2j.cn/study/css/bootstrap/3.3.6/bootstrap.min.css\" rel=\"stylesheet\">\n>     <script src=\"http://how2j.cn/study/js/bootstrap/3.3.6/bootstrap.min.js\"></script>\n>     <style>\n>       div.item img{\n>     width:100%;\n>        }\n>       div#carousel-example-generic{\n>     width:80%;\n>     margin:0 auto;\n>       }\n>     </style>\n>     <div id=\"carousel-example-generic\" class=\"carousel slide\" data-ride=\"carousel\">\n>     <ol class=\"carousel-indicators\">\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"0\" class=\"active\"></li>\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"1\"></li>\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"2\"></li>\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"3\"></li>\n>     </ol>\n>     <div class=\"carousel-inner\" role=\"listbox\">\n>     <div class=\"item active\">\n>      <img src=\"http://onep1caa3.bkt.clouddn.com/1.jpg\" >\n>     </div>\n>     <div class=\"item\">\n>     <img src=\"http://onep1caa3.bkt.clouddn.com/2.jpg\" >\n>     </div>\n>     <div class=\"item\">\n>     <img src=\"http://onep1caa3.bkt.clouddn.com/3.jpg\" >\n>     </div>      \n>     <div class=\"item\">\n>     <img src=\"http://onep1caa3.bkt.clouddn.com/4.jpg\" >\n>     </div>\n>     </div>\n>     </div>  \n \n\n### 带标题轮播  \n代码如下：  \n>     <!DOCTYPE html>\n>     <script src=\"http://how2j.cn/study/js/jquery/2.0.0/jquery.min.js\"></script>\n>     <link href=\"http://how2j.cn/study/css/bootstrap/3.3.6/bootstrap.min.css\" rel=\"stylesheet\">\n>     <script src=\"http://how2j.cn/study/js/bootstrap/3.3.6/bootstrap.min.js\"></script>\n>     <style>\n>       div.item img{\n>     width:100%;\n>        }\n>       div#carousel-example-generic{\n>     width:80%;\n>     margin:0 auto;\n>       }\n>     </style>\n>     <div id=\"carousel-example-generic\" class=\"carousel slide\" data-ride=\"carousel\">\n>       <!-- Indicators -->\n>       <ol class=\"carousel-indicators\">\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"0\" class=\"active\"></li>\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"1\"></li>\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"2\"></li>\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"3\"></li>\n>       </ol>\n>      \n>       <!-- Wrapper for slides -->\n>       <div class=\"carousel-inner\" role=\"listbox\">\n>     <div class=\"item active\">\n>     <img src=\"http://onep1caa3.bkt.clouddn.com/1.jpg\" >\n>     <div class=\"carousel-caption\">\n>     scene 1\n>     </div>\n>     </div>\n>     <div class=\"item\">\n>     <img src=\"http://onep1caa3.bkt.clouddn.com/2.jpg\" >\n>     <div class=\"carousel-caption\">\n>     scene 2\n>     </div>\n>     </div>\n>     <div class=\"item\">\n>     <img src=\"http://onep1caa3.bkt.clouddn.com/3.jpg\" >\n>     <div class=\"carousel-caption\">\n>     scene 3\n>     </div>\n>     </div>\n>      \n>     <div class=\"item\">\n>     <img src=\"http://onep1caa3.bkt.clouddn.com/4.jpg\" >\n>     <div class=\"carousel-caption\">\n>     scene 4\n>     </div>\n>     </div>      \n>     </div>\n>     </div>  \n         \n### 设置轮播速度  \n代码如下：  \n>     <!DOCTYPE html>\n>     <script src=\"http://how2j.cn/study/js/jquery/2.0.0/jquery.min.js\"></script>\n>     <link href=\"http://how2j.cn/study/css/bootstrap/3.3.6/bootstrap.min.css\" rel=\"stylesheet\">\n>     <script src=\"http://how2j.cn/study/js/bootstrap/3.3.6/bootstrap.min.js\"></script>\n>     <style>\n>       div.item img{\n>     width:100%;\n>        }\n>       div#carousel-example-generic{\n>     width:80%;\n>     margin:0 auto;\n>       }\n>     </style>\n>     <div id=\"carousel-example-generic\" class=\"carousel slide\" data-ride=\"carousel\" data-interval=\"1000\">\n>       <!-- Indicators -->\n>       <ol class=\"carousel-indicators\">\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"0\" class=\"active\"></li>\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"1\"></li>\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"2\"></li>\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"3\"></li>\n>       </ol>\n>      \n>       <!-- Wrapper for slides -->\n>       <div class=\"carousel-inner\" role=\"listbox\">\n>     <div class=\"item active\">\n>       <img src=\"http://onep1caa3.bkt.clouddn.com/1.jpg\" >\n>     </div>\n>     <div class=\"item\">\n>     <img src=\"http://onep1caa3.bkt.clouddn.com/2.jpg\" >\n>     </div>\n>     <div class=\"item\">\n>     <img src=\"http://onep1caa3.bkt.clouddn.com/3.jpg\" >\n>     </div>\n>      \n>     <div class=\"item\">\n>     <img src=\"http://onep1caa3.bkt.clouddn.com/4.jpg\" >\n>     </div>\n>      \n>       </div>\n>     </div>   \n \n### 控制前后的轮播  \n代码如下：   \n>     <!DOCTYPE html>\n>     <script src=\"http://how2j.cn/study/js/jquery/2.0.0/jquery.min.js\"></script>\n>     <link href=\"http://how2j.cn/study/css/bootstrap/3.3.6/bootstrap.min.css\" \n>     rel=\"stylesheet\">\n>     <script src=\"http://how2j.cn/study/js/bootstrap/3.3.6/bootstrap.min.js\"></\n>     script>\n>     <style>\n>       div.item img{\n>     width:100%;\n>        }\n>       div#carousel-example-generic{\n>     width:80%;\n>     margin:0 auto;\n>       }\n>     </style>\n>     <div id=\"carousel-example-generic\" class=\"carousel slide\" data-\n>     ride=\"carousel\" data-interval=\"1000\">\n>       <!-- Indicators -->\n>       <ol class=\"carousel-indicators\">\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"0\" \n>     class=\"active\"></li>\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"1\"></li>\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"2\"></li>\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"3\"></li>\n>       </ol>\n>      \n>      <!-- Wrapper for slides -->\n>      <div class=\"carousel-inner\" role=\"listbox\">\n>     <div class=\"item active\">\n>     <img src=\"http://onep1caa3.bkt.clouddn.com/1.jpg\" >\n>     </div>\n>     <div class=\"item\">\n>     <img src=\"http://onep1caa3.bkt.clouddn.com/2.jpg\" >\n>     </div>\n>     <div class=\"item\">\n>     <img src=\"http://onep1caa3.bkt.clouddn.com/3.jpg\" >\n>     </div>\n>      \n>     <div class=\"item\">\n>     <img src=\"http://onep1caa3.bkt.clouddn.com/4.jpg\" >\n>     </div>\n>      \n>       </div>\n>     </div> \n>     <!-- Controls -->\n>     <a class=\"left carousel-control\" href=\"#carousel-example-generic\" \n>     role=\"button\" data-slide=\"prev\">\n>     <span class=\"glyphicon glyphicon-chevron-left\" aria-hidden=\"true\"></span>\n>  \n>     </a>\n>     <a class=\"right carousel-control\" href=\"#carousel-example-generic\" \n>     role=\"button\" data-slide=\"next\">\n>      <span class=\"glyphicon glyphicon-chevron-right\" aria-hidden=\"true\"></span>  \n>     </a>\n>     </div>  \n--------------\n\n\n","source":"_posts/2017.04.02bootstrap.md","raw":"---\ntitle: 使用bootstrap实现图片轮播效果 \ncategories: 教程\ntags: [bootstrap]\n---\n\n## 什么是bootstrap？\nBootstrap，来自 Twitter，是目前很受欢迎的前端框架。Bootstrap 是基于 HTML、CSS、JAVASCRIPT 的，它简洁灵活，使得 Web 开发更加快捷。它由Twitter的设计师Mark Otto和Jacob Thornton合作开发，是一个CSS/HTML框架。Bootstrap提供了优雅的HTML和CSS规范，它即是由动态CSS语言Less写成。Bootstrap一经推出后颇受欢迎，一直是GitHub上的热门开源项目，包括NASA的MSNBC（微软全国广播公司）的Breaking News都使用了该项目。使用bootstrap的缺点是设计出来的网页给人一种钦定的感觉。。。  \n## 使用bootstrap实现轮播效果\n* 由于bootstrap中有HTML5特性，所以要添加 `<!DOCTYPE html> `属性；\n### 基本轮播  \n代码如下：  \n>     <!DOCTYPE html>\n>     <script src=\"http://how2j.cn/study/js/jquery/2.0.0/jquery.min.js\"></script>\n>     <link href=\"http://how2j.cn/study/css/bootstrap/3.3.6/bootstrap.min.css\" rel=\"stylesheet\">\n>     <script src=\"http://how2j.cn/study/js/bootstrap/3.3.6/bootstrap.min.js\"></script>\n>     <style>\n>       div.item img{\n>     width:100%;\n>        }\n>       div#carousel-example-generic{\n>     width:80%;\n>     margin:0 auto;\n>       }\n>     </style>\n>     <div id=\"carousel-example-generic\" class=\"carousel slide\" data-ride=\"carousel\">\n>     <ol class=\"carousel-indicators\">\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"0\" class=\"active\"></li>\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"1\"></li>\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"2\"></li>\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"3\"></li>\n>     </ol>\n>     <div class=\"carousel-inner\" role=\"listbox\">\n>     <div class=\"item active\">\n>      <img src=\"http://onep1caa3.bkt.clouddn.com/1.jpg\" >\n>     </div>\n>     <div class=\"item\">\n>     <img src=\"http://onep1caa3.bkt.clouddn.com/2.jpg\" >\n>     </div>\n>     <div class=\"item\">\n>     <img src=\"http://onep1caa3.bkt.clouddn.com/3.jpg\" >\n>     </div>      \n>     <div class=\"item\">\n>     <img src=\"http://onep1caa3.bkt.clouddn.com/4.jpg\" >\n>     </div>\n>     </div>\n>     </div>  \n \n\n### 带标题轮播  \n代码如下：  \n>     <!DOCTYPE html>\n>     <script src=\"http://how2j.cn/study/js/jquery/2.0.0/jquery.min.js\"></script>\n>     <link href=\"http://how2j.cn/study/css/bootstrap/3.3.6/bootstrap.min.css\" rel=\"stylesheet\">\n>     <script src=\"http://how2j.cn/study/js/bootstrap/3.3.6/bootstrap.min.js\"></script>\n>     <style>\n>       div.item img{\n>     width:100%;\n>        }\n>       div#carousel-example-generic{\n>     width:80%;\n>     margin:0 auto;\n>       }\n>     </style>\n>     <div id=\"carousel-example-generic\" class=\"carousel slide\" data-ride=\"carousel\">\n>       <!-- Indicators -->\n>       <ol class=\"carousel-indicators\">\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"0\" class=\"active\"></li>\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"1\"></li>\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"2\"></li>\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"3\"></li>\n>       </ol>\n>      \n>       <!-- Wrapper for slides -->\n>       <div class=\"carousel-inner\" role=\"listbox\">\n>     <div class=\"item active\">\n>     <img src=\"http://onep1caa3.bkt.clouddn.com/1.jpg\" >\n>     <div class=\"carousel-caption\">\n>     scene 1\n>     </div>\n>     </div>\n>     <div class=\"item\">\n>     <img src=\"http://onep1caa3.bkt.clouddn.com/2.jpg\" >\n>     <div class=\"carousel-caption\">\n>     scene 2\n>     </div>\n>     </div>\n>     <div class=\"item\">\n>     <img src=\"http://onep1caa3.bkt.clouddn.com/3.jpg\" >\n>     <div class=\"carousel-caption\">\n>     scene 3\n>     </div>\n>     </div>\n>      \n>     <div class=\"item\">\n>     <img src=\"http://onep1caa3.bkt.clouddn.com/4.jpg\" >\n>     <div class=\"carousel-caption\">\n>     scene 4\n>     </div>\n>     </div>      \n>     </div>\n>     </div>  \n         \n### 设置轮播速度  \n代码如下：  \n>     <!DOCTYPE html>\n>     <script src=\"http://how2j.cn/study/js/jquery/2.0.0/jquery.min.js\"></script>\n>     <link href=\"http://how2j.cn/study/css/bootstrap/3.3.6/bootstrap.min.css\" rel=\"stylesheet\">\n>     <script src=\"http://how2j.cn/study/js/bootstrap/3.3.6/bootstrap.min.js\"></script>\n>     <style>\n>       div.item img{\n>     width:100%;\n>        }\n>       div#carousel-example-generic{\n>     width:80%;\n>     margin:0 auto;\n>       }\n>     </style>\n>     <div id=\"carousel-example-generic\" class=\"carousel slide\" data-ride=\"carousel\" data-interval=\"1000\">\n>       <!-- Indicators -->\n>       <ol class=\"carousel-indicators\">\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"0\" class=\"active\"></li>\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"1\"></li>\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"2\"></li>\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"3\"></li>\n>       </ol>\n>      \n>       <!-- Wrapper for slides -->\n>       <div class=\"carousel-inner\" role=\"listbox\">\n>     <div class=\"item active\">\n>       <img src=\"http://onep1caa3.bkt.clouddn.com/1.jpg\" >\n>     </div>\n>     <div class=\"item\">\n>     <img src=\"http://onep1caa3.bkt.clouddn.com/2.jpg\" >\n>     </div>\n>     <div class=\"item\">\n>     <img src=\"http://onep1caa3.bkt.clouddn.com/3.jpg\" >\n>     </div>\n>      \n>     <div class=\"item\">\n>     <img src=\"http://onep1caa3.bkt.clouddn.com/4.jpg\" >\n>     </div>\n>      \n>       </div>\n>     </div>   \n \n### 控制前后的轮播  \n代码如下：   \n>     <!DOCTYPE html>\n>     <script src=\"http://how2j.cn/study/js/jquery/2.0.0/jquery.min.js\"></script>\n>     <link href=\"http://how2j.cn/study/css/bootstrap/3.3.6/bootstrap.min.css\" \n>     rel=\"stylesheet\">\n>     <script src=\"http://how2j.cn/study/js/bootstrap/3.3.6/bootstrap.min.js\"></\n>     script>\n>     <style>\n>       div.item img{\n>     width:100%;\n>        }\n>       div#carousel-example-generic{\n>     width:80%;\n>     margin:0 auto;\n>       }\n>     </style>\n>     <div id=\"carousel-example-generic\" class=\"carousel slide\" data-\n>     ride=\"carousel\" data-interval=\"1000\">\n>       <!-- Indicators -->\n>       <ol class=\"carousel-indicators\">\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"0\" \n>     class=\"active\"></li>\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"1\"></li>\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"2\"></li>\n>     <li data-target=\"#carousel-example-generic\" data-slide-to=\"3\"></li>\n>       </ol>\n>      \n>      <!-- Wrapper for slides -->\n>      <div class=\"carousel-inner\" role=\"listbox\">\n>     <div class=\"item active\">\n>     <img src=\"http://onep1caa3.bkt.clouddn.com/1.jpg\" >\n>     </div>\n>     <div class=\"item\">\n>     <img src=\"http://onep1caa3.bkt.clouddn.com/2.jpg\" >\n>     </div>\n>     <div class=\"item\">\n>     <img src=\"http://onep1caa3.bkt.clouddn.com/3.jpg\" >\n>     </div>\n>      \n>     <div class=\"item\">\n>     <img src=\"http://onep1caa3.bkt.clouddn.com/4.jpg\" >\n>     </div>\n>      \n>       </div>\n>     </div> \n>     <!-- Controls -->\n>     <a class=\"left carousel-control\" href=\"#carousel-example-generic\" \n>     role=\"button\" data-slide=\"prev\">\n>     <span class=\"glyphicon glyphicon-chevron-left\" aria-hidden=\"true\"></span>\n>  \n>     </a>\n>     <a class=\"right carousel-control\" href=\"#carousel-example-generic\" \n>     role=\"button\" data-slide=\"next\">\n>      <span class=\"glyphicon glyphicon-chevron-right\" aria-hidden=\"true\"></span>  \n>     </a>\n>     </div>  \n--------------\n\n\n","slug":"2017.04.02bootstrap","published":1,"date":"2017-04-02T12:51:00.000Z","updated":"2017-04-02T12:51:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwvh258w0008w39zdsp18zql","content":"<h2 id=\"什么是bootstrap？\"><a href=\"#什么是bootstrap？\" class=\"headerlink\" title=\"什么是bootstrap？\"></a>什么是bootstrap？</h2><p>Bootstrap，来自 Twitter，是目前很受欢迎的前端框架。Bootstrap 是基于 HTML、CSS、JAVASCRIPT 的，它简洁灵活，使得 Web 开发更加快捷。它由Twitter的设计师Mark Otto和Jacob Thornton合作开发，是一个CSS/HTML框架。Bootstrap提供了优雅的HTML和CSS规范，它即是由动态CSS语言Less写成。Bootstrap一经推出后颇受欢迎，一直是GitHub上的热门开源项目，包括NASA的MSNBC（微软全国广播公司）的Breaking News都使用了该项目。使用bootstrap的缺点是设计出来的网页给人一种钦定的感觉。。。  </p>\n<h2 id=\"使用bootstrap实现轮播效果\"><a href=\"#使用bootstrap实现轮播效果\" class=\"headerlink\" title=\"使用bootstrap实现轮播效果\"></a>使用bootstrap实现轮播效果</h2><ul>\n<li>由于bootstrap中有HTML5特性，所以要添加 <code>&lt;!DOCTYPE html&gt;</code>属性；<h3 id=\"基本轮播\"><a href=\"#基本轮播\" class=\"headerlink\" title=\"基本轮播\"></a>基本轮播</h3>代码如下：  <blockquote>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;script src=&quot;http://how2j.cn/study/js/jquery/2.0.0/jquery.min.js&quot;&gt;&lt;/script&gt;\n&lt;link href=&quot;http://how2j.cn/study/css/bootstrap/3.3.6/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;\n&lt;script src=&quot;http://how2j.cn/study/js/bootstrap/3.3.6/bootstrap.min.js&quot;&gt;&lt;/script&gt;\n&lt;style&gt;\n  div.item img{\nwidth:100%;\n   }\n  div#carousel-example-generic{\nwidth:80%;\nmargin:0 auto;\n  }\n&lt;/style&gt;\n&lt;div id=&quot;carousel-example-generic&quot; class=&quot;carousel slide&quot; data-ride=&quot;carousel&quot;&gt;\n&lt;ol class=&quot;carousel-indicators&quot;&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;0&quot; class=&quot;active&quot;&gt;&lt;/li&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;1&quot;&gt;&lt;/li&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;2&quot;&gt;&lt;/li&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;3&quot;&gt;&lt;/li&gt;\n&lt;/ol&gt;\n&lt;div class=&quot;carousel-inner&quot; role=&quot;listbox&quot;&gt;\n&lt;div class=&quot;item active&quot;&gt;\n &lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/1.jpg&quot; &gt;\n&lt;/div&gt;\n&lt;div class=&quot;item&quot;&gt;\n&lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/2.jpg&quot; &gt;\n&lt;/div&gt;\n&lt;div class=&quot;item&quot;&gt;\n&lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/3.jpg&quot; &gt;\n&lt;/div&gt;      \n&lt;div class=&quot;item&quot;&gt;\n&lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/4.jpg&quot; &gt;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;/div&gt;  \n</code></pre></blockquote>\n</li>\n</ul>\n<h3 id=\"带标题轮播\"><a href=\"#带标题轮播\" class=\"headerlink\" title=\"带标题轮播\"></a>带标题轮播</h3><p>代码如下：  </p>\n<blockquote>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;script src=&quot;http://how2j.cn/study/js/jquery/2.0.0/jquery.min.js&quot;&gt;&lt;/script&gt;\n&lt;link href=&quot;http://how2j.cn/study/css/bootstrap/3.3.6/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;\n&lt;script src=&quot;http://how2j.cn/study/js/bootstrap/3.3.6/bootstrap.min.js&quot;&gt;&lt;/script&gt;\n&lt;style&gt;\n  div.item img{\nwidth:100%;\n   }\n  div#carousel-example-generic{\nwidth:80%;\nmargin:0 auto;\n  }\n&lt;/style&gt;\n&lt;div id=&quot;carousel-example-generic&quot; class=&quot;carousel slide&quot; data-ride=&quot;carousel&quot;&gt;\n  &lt;!-- Indicators --&gt;\n  &lt;ol class=&quot;carousel-indicators&quot;&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;0&quot; class=&quot;active&quot;&gt;&lt;/li&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;1&quot;&gt;&lt;/li&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;2&quot;&gt;&lt;/li&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;3&quot;&gt;&lt;/li&gt;\n  &lt;/ol&gt;\n\n  &lt;!-- Wrapper for slides --&gt;\n  &lt;div class=&quot;carousel-inner&quot; role=&quot;listbox&quot;&gt;\n&lt;div class=&quot;item active&quot;&gt;\n&lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/1.jpg&quot; &gt;\n&lt;div class=&quot;carousel-caption&quot;&gt;\nscene 1\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;div class=&quot;item&quot;&gt;\n&lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/2.jpg&quot; &gt;\n&lt;div class=&quot;carousel-caption&quot;&gt;\nscene 2\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;div class=&quot;item&quot;&gt;\n&lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/3.jpg&quot; &gt;\n&lt;div class=&quot;carousel-caption&quot;&gt;\nscene 3\n&lt;/div&gt;\n&lt;/div&gt;\n\n&lt;div class=&quot;item&quot;&gt;\n&lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/4.jpg&quot; &gt;\n&lt;div class=&quot;carousel-caption&quot;&gt;\nscene 4\n&lt;/div&gt;\n&lt;/div&gt;      \n&lt;/div&gt;\n&lt;/div&gt;  \n</code></pre></blockquote>\n<h3 id=\"设置轮播速度\"><a href=\"#设置轮播速度\" class=\"headerlink\" title=\"设置轮播速度\"></a>设置轮播速度</h3><p>代码如下：  </p>\n<blockquote>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;script src=&quot;http://how2j.cn/study/js/jquery/2.0.0/jquery.min.js&quot;&gt;&lt;/script&gt;\n&lt;link href=&quot;http://how2j.cn/study/css/bootstrap/3.3.6/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;\n&lt;script src=&quot;http://how2j.cn/study/js/bootstrap/3.3.6/bootstrap.min.js&quot;&gt;&lt;/script&gt;\n&lt;style&gt;\n  div.item img{\nwidth:100%;\n   }\n  div#carousel-example-generic{\nwidth:80%;\nmargin:0 auto;\n  }\n&lt;/style&gt;\n&lt;div id=&quot;carousel-example-generic&quot; class=&quot;carousel slide&quot; data-ride=&quot;carousel&quot; data-interval=&quot;1000&quot;&gt;\n  &lt;!-- Indicators --&gt;\n  &lt;ol class=&quot;carousel-indicators&quot;&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;0&quot; class=&quot;active&quot;&gt;&lt;/li&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;1&quot;&gt;&lt;/li&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;2&quot;&gt;&lt;/li&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;3&quot;&gt;&lt;/li&gt;\n  &lt;/ol&gt;\n\n  &lt;!-- Wrapper for slides --&gt;\n  &lt;div class=&quot;carousel-inner&quot; role=&quot;listbox&quot;&gt;\n&lt;div class=&quot;item active&quot;&gt;\n  &lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/1.jpg&quot; &gt;\n&lt;/div&gt;\n&lt;div class=&quot;item&quot;&gt;\n&lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/2.jpg&quot; &gt;\n&lt;/div&gt;\n&lt;div class=&quot;item&quot;&gt;\n&lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/3.jpg&quot; &gt;\n&lt;/div&gt;\n\n&lt;div class=&quot;item&quot;&gt;\n&lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/4.jpg&quot; &gt;\n&lt;/div&gt;\n\n  &lt;/div&gt;\n&lt;/div&gt;   \n</code></pre></blockquote>\n<h3 id=\"控制前后的轮播\"><a href=\"#控制前后的轮播\" class=\"headerlink\" title=\"控制前后的轮播\"></a>控制前后的轮播</h3><p>代码如下：   </p>\n<blockquote>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;script src=&quot;http://how2j.cn/study/js/jquery/2.0.0/jquery.min.js&quot;&gt;&lt;/script&gt;\n&lt;link href=&quot;http://how2j.cn/study/css/bootstrap/3.3.6/bootstrap.min.css&quot; \nrel=&quot;stylesheet&quot;&gt;\n&lt;script src=&quot;http://how2j.cn/study/js/bootstrap/3.3.6/bootstrap.min.js&quot;&gt;&lt;/\nscript&gt;\n&lt;style&gt;\n  div.item img{\nwidth:100%;\n   }\n  div#carousel-example-generic{\nwidth:80%;\nmargin:0 auto;\n  }\n&lt;/style&gt;\n&lt;div id=&quot;carousel-example-generic&quot; class=&quot;carousel slide&quot; data-\nride=&quot;carousel&quot; data-interval=&quot;1000&quot;&gt;\n  &lt;!-- Indicators --&gt;\n  &lt;ol class=&quot;carousel-indicators&quot;&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;0&quot; \nclass=&quot;active&quot;&gt;&lt;/li&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;1&quot;&gt;&lt;/li&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;2&quot;&gt;&lt;/li&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;3&quot;&gt;&lt;/li&gt;\n  &lt;/ol&gt;\n\n &lt;!-- Wrapper for slides --&gt;\n &lt;div class=&quot;carousel-inner&quot; role=&quot;listbox&quot;&gt;\n&lt;div class=&quot;item active&quot;&gt;\n&lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/1.jpg&quot; &gt;\n&lt;/div&gt;\n&lt;div class=&quot;item&quot;&gt;\n&lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/2.jpg&quot; &gt;\n&lt;/div&gt;\n&lt;div class=&quot;item&quot;&gt;\n&lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/3.jpg&quot; &gt;\n&lt;/div&gt;\n\n&lt;div class=&quot;item&quot;&gt;\n&lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/4.jpg&quot; &gt;\n&lt;/div&gt;\n\n  &lt;/div&gt;\n&lt;/div&gt; \n&lt;!-- Controls --&gt;\n&lt;a class=&quot;left carousel-control&quot; href=&quot;#carousel-example-generic&quot; \nrole=&quot;button&quot; data-slide=&quot;prev&quot;&gt;\n&lt;span class=&quot;glyphicon glyphicon-chevron-left&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt;\n\n&lt;/a&gt;\n&lt;a class=&quot;right carousel-control&quot; href=&quot;#carousel-example-generic&quot; \nrole=&quot;button&quot; data-slide=&quot;next&quot;&gt;\n &lt;span class=&quot;glyphicon glyphicon-chevron-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt;  \n&lt;/a&gt;\n&lt;/div&gt;  \n</code></pre><hr>\n</blockquote>\n","excerpt":"","more":"<h2 id=\"什么是bootstrap？\"><a href=\"#什么是bootstrap？\" class=\"headerlink\" title=\"什么是bootstrap？\"></a>什么是bootstrap？</h2><p>Bootstrap，来自 Twitter，是目前很受欢迎的前端框架。Bootstrap 是基于 HTML、CSS、JAVASCRIPT 的，它简洁灵活，使得 Web 开发更加快捷。它由Twitter的设计师Mark Otto和Jacob Thornton合作开发，是一个CSS/HTML框架。Bootstrap提供了优雅的HTML和CSS规范，它即是由动态CSS语言Less写成。Bootstrap一经推出后颇受欢迎，一直是GitHub上的热门开源项目，包括NASA的MSNBC（微软全国广播公司）的Breaking News都使用了该项目。使用bootstrap的缺点是设计出来的网页给人一种钦定的感觉。。。  </p>\n<h2 id=\"使用bootstrap实现轮播效果\"><a href=\"#使用bootstrap实现轮播效果\" class=\"headerlink\" title=\"使用bootstrap实现轮播效果\"></a>使用bootstrap实现轮播效果</h2><ul>\n<li>由于bootstrap中有HTML5特性，所以要添加 <code>&lt;!DOCTYPE html&gt;</code>属性；<h3 id=\"基本轮播\"><a href=\"#基本轮播\" class=\"headerlink\" title=\"基本轮播\"></a>基本轮播</h3>代码如下：  <blockquote>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;script src=&quot;http://how2j.cn/study/js/jquery/2.0.0/jquery.min.js&quot;&gt;&lt;/script&gt;\n&lt;link href=&quot;http://how2j.cn/study/css/bootstrap/3.3.6/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;\n&lt;script src=&quot;http://how2j.cn/study/js/bootstrap/3.3.6/bootstrap.min.js&quot;&gt;&lt;/script&gt;\n&lt;style&gt;\n  div.item img{\nwidth:100%;\n   }\n  div#carousel-example-generic{\nwidth:80%;\nmargin:0 auto;\n  }\n&lt;/style&gt;\n&lt;div id=&quot;carousel-example-generic&quot; class=&quot;carousel slide&quot; data-ride=&quot;carousel&quot;&gt;\n&lt;ol class=&quot;carousel-indicators&quot;&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;0&quot; class=&quot;active&quot;&gt;&lt;/li&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;1&quot;&gt;&lt;/li&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;2&quot;&gt;&lt;/li&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;3&quot;&gt;&lt;/li&gt;\n&lt;/ol&gt;\n&lt;div class=&quot;carousel-inner&quot; role=&quot;listbox&quot;&gt;\n&lt;div class=&quot;item active&quot;&gt;\n &lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/1.jpg&quot; &gt;\n&lt;/div&gt;\n&lt;div class=&quot;item&quot;&gt;\n&lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/2.jpg&quot; &gt;\n&lt;/div&gt;\n&lt;div class=&quot;item&quot;&gt;\n&lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/3.jpg&quot; &gt;\n&lt;/div&gt;      \n&lt;div class=&quot;item&quot;&gt;\n&lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/4.jpg&quot; &gt;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;/div&gt;  \n</code></pre></blockquote>\n</li>\n</ul>\n<h3 id=\"带标题轮播\"><a href=\"#带标题轮播\" class=\"headerlink\" title=\"带标题轮播\"></a>带标题轮播</h3><p>代码如下：  </p>\n<blockquote>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;script src=&quot;http://how2j.cn/study/js/jquery/2.0.0/jquery.min.js&quot;&gt;&lt;/script&gt;\n&lt;link href=&quot;http://how2j.cn/study/css/bootstrap/3.3.6/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;\n&lt;script src=&quot;http://how2j.cn/study/js/bootstrap/3.3.6/bootstrap.min.js&quot;&gt;&lt;/script&gt;\n&lt;style&gt;\n  div.item img{\nwidth:100%;\n   }\n  div#carousel-example-generic{\nwidth:80%;\nmargin:0 auto;\n  }\n&lt;/style&gt;\n&lt;div id=&quot;carousel-example-generic&quot; class=&quot;carousel slide&quot; data-ride=&quot;carousel&quot;&gt;\n  &lt;!-- Indicators --&gt;\n  &lt;ol class=&quot;carousel-indicators&quot;&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;0&quot; class=&quot;active&quot;&gt;&lt;/li&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;1&quot;&gt;&lt;/li&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;2&quot;&gt;&lt;/li&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;3&quot;&gt;&lt;/li&gt;\n  &lt;/ol&gt;\n\n  &lt;!-- Wrapper for slides --&gt;\n  &lt;div class=&quot;carousel-inner&quot; role=&quot;listbox&quot;&gt;\n&lt;div class=&quot;item active&quot;&gt;\n&lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/1.jpg&quot; &gt;\n&lt;div class=&quot;carousel-caption&quot;&gt;\nscene 1\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;div class=&quot;item&quot;&gt;\n&lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/2.jpg&quot; &gt;\n&lt;div class=&quot;carousel-caption&quot;&gt;\nscene 2\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;div class=&quot;item&quot;&gt;\n&lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/3.jpg&quot; &gt;\n&lt;div class=&quot;carousel-caption&quot;&gt;\nscene 3\n&lt;/div&gt;\n&lt;/div&gt;\n\n&lt;div class=&quot;item&quot;&gt;\n&lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/4.jpg&quot; &gt;\n&lt;div class=&quot;carousel-caption&quot;&gt;\nscene 4\n&lt;/div&gt;\n&lt;/div&gt;      \n&lt;/div&gt;\n&lt;/div&gt;  \n</code></pre></blockquote>\n<h3 id=\"设置轮播速度\"><a href=\"#设置轮播速度\" class=\"headerlink\" title=\"设置轮播速度\"></a>设置轮播速度</h3><p>代码如下：  </p>\n<blockquote>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;script src=&quot;http://how2j.cn/study/js/jquery/2.0.0/jquery.min.js&quot;&gt;&lt;/script&gt;\n&lt;link href=&quot;http://how2j.cn/study/css/bootstrap/3.3.6/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;\n&lt;script src=&quot;http://how2j.cn/study/js/bootstrap/3.3.6/bootstrap.min.js&quot;&gt;&lt;/script&gt;\n&lt;style&gt;\n  div.item img{\nwidth:100%;\n   }\n  div#carousel-example-generic{\nwidth:80%;\nmargin:0 auto;\n  }\n&lt;/style&gt;\n&lt;div id=&quot;carousel-example-generic&quot; class=&quot;carousel slide&quot; data-ride=&quot;carousel&quot; data-interval=&quot;1000&quot;&gt;\n  &lt;!-- Indicators --&gt;\n  &lt;ol class=&quot;carousel-indicators&quot;&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;0&quot; class=&quot;active&quot;&gt;&lt;/li&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;1&quot;&gt;&lt;/li&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;2&quot;&gt;&lt;/li&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;3&quot;&gt;&lt;/li&gt;\n  &lt;/ol&gt;\n\n  &lt;!-- Wrapper for slides --&gt;\n  &lt;div class=&quot;carousel-inner&quot; role=&quot;listbox&quot;&gt;\n&lt;div class=&quot;item active&quot;&gt;\n  &lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/1.jpg&quot; &gt;\n&lt;/div&gt;\n&lt;div class=&quot;item&quot;&gt;\n&lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/2.jpg&quot; &gt;\n&lt;/div&gt;\n&lt;div class=&quot;item&quot;&gt;\n&lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/3.jpg&quot; &gt;\n&lt;/div&gt;\n\n&lt;div class=&quot;item&quot;&gt;\n&lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/4.jpg&quot; &gt;\n&lt;/div&gt;\n\n  &lt;/div&gt;\n&lt;/div&gt;   \n</code></pre></blockquote>\n<h3 id=\"控制前后的轮播\"><a href=\"#控制前后的轮播\" class=\"headerlink\" title=\"控制前后的轮播\"></a>控制前后的轮播</h3><p>代码如下：   </p>\n<blockquote>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;script src=&quot;http://how2j.cn/study/js/jquery/2.0.0/jquery.min.js&quot;&gt;&lt;/script&gt;\n&lt;link href=&quot;http://how2j.cn/study/css/bootstrap/3.3.6/bootstrap.min.css&quot; \nrel=&quot;stylesheet&quot;&gt;\n&lt;script src=&quot;http://how2j.cn/study/js/bootstrap/3.3.6/bootstrap.min.js&quot;&gt;&lt;/\nscript&gt;\n&lt;style&gt;\n  div.item img{\nwidth:100%;\n   }\n  div#carousel-example-generic{\nwidth:80%;\nmargin:0 auto;\n  }\n&lt;/style&gt;\n&lt;div id=&quot;carousel-example-generic&quot; class=&quot;carousel slide&quot; data-\nride=&quot;carousel&quot; data-interval=&quot;1000&quot;&gt;\n  &lt;!-- Indicators --&gt;\n  &lt;ol class=&quot;carousel-indicators&quot;&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;0&quot; \nclass=&quot;active&quot;&gt;&lt;/li&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;1&quot;&gt;&lt;/li&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;2&quot;&gt;&lt;/li&gt;\n&lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;3&quot;&gt;&lt;/li&gt;\n  &lt;/ol&gt;\n\n &lt;!-- Wrapper for slides --&gt;\n &lt;div class=&quot;carousel-inner&quot; role=&quot;listbox&quot;&gt;\n&lt;div class=&quot;item active&quot;&gt;\n&lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/1.jpg&quot; &gt;\n&lt;/div&gt;\n&lt;div class=&quot;item&quot;&gt;\n&lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/2.jpg&quot; &gt;\n&lt;/div&gt;\n&lt;div class=&quot;item&quot;&gt;\n&lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/3.jpg&quot; &gt;\n&lt;/div&gt;\n\n&lt;div class=&quot;item&quot;&gt;\n&lt;img src=&quot;http://onep1caa3.bkt.clouddn.com/4.jpg&quot; &gt;\n&lt;/div&gt;\n\n  &lt;/div&gt;\n&lt;/div&gt; \n&lt;!-- Controls --&gt;\n&lt;a class=&quot;left carousel-control&quot; href=&quot;#carousel-example-generic&quot; \nrole=&quot;button&quot; data-slide=&quot;prev&quot;&gt;\n&lt;span class=&quot;glyphicon glyphicon-chevron-left&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt;\n\n&lt;/a&gt;\n&lt;a class=&quot;right carousel-control&quot; href=&quot;#carousel-example-generic&quot; \nrole=&quot;button&quot; data-slide=&quot;next&quot;&gt;\n &lt;span class=&quot;glyphicon glyphicon-chevron-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt;  \n&lt;/a&gt;\n&lt;/div&gt;  \n</code></pre><hr>\n</blockquote>\n"},{"title":"cookie与session的区别","_content":"## cookie与session的定义  \n当浏览网站的时候，WEB 服务器会先送一小小资料放在你的计算机上，Cookie 会帮你在网站上所打的文字或是一些选择，都纪录下来。当下次你再光临同一个网站，WEB 服务器会先看看有没有它上次留下的 Cookie 资料，有的话，就会依据 Cookie里的内容来判断使用者，送出特定的网页内容给你。 Cookie 的使用很普遍，许多有提供个人化服务的网站，都是利用 Cookie来辨认使用者，以方便送出使用者量身定做的内容，像是 Web 接口的免费 email 网站，都要用到 Cookie。具体来说cookie机制采用的是在客户端保持状态的方案，而session机制采用的是在服务器端保持状态的方案。  \n## cookie与session的机制  \n### cookie的机制  \n正统的cookie分发是通过扩展HTTP协议来实现的，服务器通过在HTTP的响应头中加上一行特殊的指示以提示浏览器按照指示生成相应的cookie。然而纯粹的客户端脚本如JavaScript或者VBScript也可以生成cookie。而cookie的使用是由浏览器按照一定的原则在后台自动发送给服务器的。浏览器检查所有存储的cookie，如果某个cookie所声明的作用范围大于等于将要请求的资源所在的位置，则把该cookie附在请求资源的HTTP请求头上发送给服务器。cookie的内容主要包括：名字，值，过期时间，路径和域。路径与域一起构成cookie的作用范围。若不设置过期时间，则表示这个cookie的生命期为浏览器会话期间，关闭浏览器窗口，cookie就消失。这种生命期为浏览器会话期的cookie被称为会话cookie。会话cookie一般不存储在硬盘上而是保存在内存里，当然这种行为并不是规范规定的。若设置了过期时间，浏览器就会把cookie保存到硬盘上，关闭后再次打开浏览器，这些cookie仍然有效直到超过设定的过期时间。存储在硬盘上的cookie可以在不同的浏览器进程间共享，比如两个IE窗口。而对于保存在内存里的cookie，不同的浏览器有不同的处理方式。  \n### session的机制  \nsession机制是一种服务器端的机制，服务器使用一种类似于散列表的结构（也可能就是使用散列表）来保存信息。当程序需要为某个客户端的请求创建一个session时，服务器首先检查这个客户端的请求里是否已包含了一个session标识（称为session id），如果已包含则说明以前已经为此客户端创建过session，服务器就按照session id把这个session检索出来使用（检索不到，会新建一个），如果客户端请求不包含session id，则为此客户端创建一个session并且生成一个与此session相关联的session id，session id的值应该是一个既不会重复，又不容易被找到规律以仿造的字符串，这个session id将被在本次响应中返回给客户端保存。保存这个session id的方式可以采用cookie，这样在交互过程中浏览器可以自动的按照规则把这个标识发送给服务器。一般这个cookie的名字都是类似于SEEESIONID。但cookie可以被人为的禁止，则必须有其他机制以便在cookie被禁止时仍然能够把session id传递回服务器。经常被使用的一种技术叫做URL重写，就是把session id直接附加在URL路径的后面。还有一种技术叫做表单隐藏字段。就是服务器会自动修改表单，添加一个隐藏字段，以便在表单提交时能够把session id传递回服务器。  \n## cookie与session的区别  \n* 1、cookie数据存放在客户的浏览器上，session数据放在服务器上。\n\n* 2、cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗\n   考虑到安全应当使用session。\n\n* 3、session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能\n   考虑到减轻服务器性能方面，应当使用COOKIE。\n\n* 4、单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。\n\n## 建议\n* 将登陆信息等重要信息存放为SESSION\n* 其他信息如果需要保留，可以放在COOKIE中","source":"_posts/2017.04.05cookie&session.md","raw":"---\ntitle: cookie与session的区别 \ncategories: 知识\ntags: [http]\n---\n## cookie与session的定义  \n当浏览网站的时候，WEB 服务器会先送一小小资料放在你的计算机上，Cookie 会帮你在网站上所打的文字或是一些选择，都纪录下来。当下次你再光临同一个网站，WEB 服务器会先看看有没有它上次留下的 Cookie 资料，有的话，就会依据 Cookie里的内容来判断使用者，送出特定的网页内容给你。 Cookie 的使用很普遍，许多有提供个人化服务的网站，都是利用 Cookie来辨认使用者，以方便送出使用者量身定做的内容，像是 Web 接口的免费 email 网站，都要用到 Cookie。具体来说cookie机制采用的是在客户端保持状态的方案，而session机制采用的是在服务器端保持状态的方案。  \n## cookie与session的机制  \n### cookie的机制  \n正统的cookie分发是通过扩展HTTP协议来实现的，服务器通过在HTTP的响应头中加上一行特殊的指示以提示浏览器按照指示生成相应的cookie。然而纯粹的客户端脚本如JavaScript或者VBScript也可以生成cookie。而cookie的使用是由浏览器按照一定的原则在后台自动发送给服务器的。浏览器检查所有存储的cookie，如果某个cookie所声明的作用范围大于等于将要请求的资源所在的位置，则把该cookie附在请求资源的HTTP请求头上发送给服务器。cookie的内容主要包括：名字，值，过期时间，路径和域。路径与域一起构成cookie的作用范围。若不设置过期时间，则表示这个cookie的生命期为浏览器会话期间，关闭浏览器窗口，cookie就消失。这种生命期为浏览器会话期的cookie被称为会话cookie。会话cookie一般不存储在硬盘上而是保存在内存里，当然这种行为并不是规范规定的。若设置了过期时间，浏览器就会把cookie保存到硬盘上，关闭后再次打开浏览器，这些cookie仍然有效直到超过设定的过期时间。存储在硬盘上的cookie可以在不同的浏览器进程间共享，比如两个IE窗口。而对于保存在内存里的cookie，不同的浏览器有不同的处理方式。  \n### session的机制  \nsession机制是一种服务器端的机制，服务器使用一种类似于散列表的结构（也可能就是使用散列表）来保存信息。当程序需要为某个客户端的请求创建一个session时，服务器首先检查这个客户端的请求里是否已包含了一个session标识（称为session id），如果已包含则说明以前已经为此客户端创建过session，服务器就按照session id把这个session检索出来使用（检索不到，会新建一个），如果客户端请求不包含session id，则为此客户端创建一个session并且生成一个与此session相关联的session id，session id的值应该是一个既不会重复，又不容易被找到规律以仿造的字符串，这个session id将被在本次响应中返回给客户端保存。保存这个session id的方式可以采用cookie，这样在交互过程中浏览器可以自动的按照规则把这个标识发送给服务器。一般这个cookie的名字都是类似于SEEESIONID。但cookie可以被人为的禁止，则必须有其他机制以便在cookie被禁止时仍然能够把session id传递回服务器。经常被使用的一种技术叫做URL重写，就是把session id直接附加在URL路径的后面。还有一种技术叫做表单隐藏字段。就是服务器会自动修改表单，添加一个隐藏字段，以便在表单提交时能够把session id传递回服务器。  \n## cookie与session的区别  \n* 1、cookie数据存放在客户的浏览器上，session数据放在服务器上。\n\n* 2、cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗\n   考虑到安全应当使用session。\n\n* 3、session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能\n   考虑到减轻服务器性能方面，应当使用COOKIE。\n\n* 4、单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。\n\n## 建议\n* 将登陆信息等重要信息存放为SESSION\n* 其他信息如果需要保留，可以放在COOKIE中","slug":"2017.04.05cookie&session","published":1,"date":"2017-04-05T12:15:18.000Z","updated":"2017-04-05T12:15:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwvh258x0009w39zovi32l1u","content":"<h2 id=\"cookie与session的定义\"><a href=\"#cookie与session的定义\" class=\"headerlink\" title=\"cookie与session的定义\"></a>cookie与session的定义</h2><p>当浏览网站的时候，WEB 服务器会先送一小小资料放在你的计算机上，Cookie 会帮你在网站上所打的文字或是一些选择，都纪录下来。当下次你再光临同一个网站，WEB 服务器会先看看有没有它上次留下的 Cookie 资料，有的话，就会依据 Cookie里的内容来判断使用者，送出特定的网页内容给你。 Cookie 的使用很普遍，许多有提供个人化服务的网站，都是利用 Cookie来辨认使用者，以方便送出使用者量身定做的内容，像是 Web 接口的免费 email 网站，都要用到 Cookie。具体来说cookie机制采用的是在客户端保持状态的方案，而session机制采用的是在服务器端保持状态的方案。  </p>\n<h2 id=\"cookie与session的机制\"><a href=\"#cookie与session的机制\" class=\"headerlink\" title=\"cookie与session的机制\"></a>cookie与session的机制</h2><h3 id=\"cookie的机制\"><a href=\"#cookie的机制\" class=\"headerlink\" title=\"cookie的机制\"></a>cookie的机制</h3><p>正统的cookie分发是通过扩展HTTP协议来实现的，服务器通过在HTTP的响应头中加上一行特殊的指示以提示浏览器按照指示生成相应的cookie。然而纯粹的客户端脚本如JavaScript或者VBScript也可以生成cookie。而cookie的使用是由浏览器按照一定的原则在后台自动发送给服务器的。浏览器检查所有存储的cookie，如果某个cookie所声明的作用范围大于等于将要请求的资源所在的位置，则把该cookie附在请求资源的HTTP请求头上发送给服务器。cookie的内容主要包括：名字，值，过期时间，路径和域。路径与域一起构成cookie的作用范围。若不设置过期时间，则表示这个cookie的生命期为浏览器会话期间，关闭浏览器窗口，cookie就消失。这种生命期为浏览器会话期的cookie被称为会话cookie。会话cookie一般不存储在硬盘上而是保存在内存里，当然这种行为并不是规范规定的。若设置了过期时间，浏览器就会把cookie保存到硬盘上，关闭后再次打开浏览器，这些cookie仍然有效直到超过设定的过期时间。存储在硬盘上的cookie可以在不同的浏览器进程间共享，比如两个IE窗口。而对于保存在内存里的cookie，不同的浏览器有不同的处理方式。  </p>\n<h3 id=\"session的机制\"><a href=\"#session的机制\" class=\"headerlink\" title=\"session的机制\"></a>session的机制</h3><p>session机制是一种服务器端的机制，服务器使用一种类似于散列表的结构（也可能就是使用散列表）来保存信息。当程序需要为某个客户端的请求创建一个session时，服务器首先检查这个客户端的请求里是否已包含了一个session标识（称为session id），如果已包含则说明以前已经为此客户端创建过session，服务器就按照session id把这个session检索出来使用（检索不到，会新建一个），如果客户端请求不包含session id，则为此客户端创建一个session并且生成一个与此session相关联的session id，session id的值应该是一个既不会重复，又不容易被找到规律以仿造的字符串，这个session id将被在本次响应中返回给客户端保存。保存这个session id的方式可以采用cookie，这样在交互过程中浏览器可以自动的按照规则把这个标识发送给服务器。一般这个cookie的名字都是类似于SEEESIONID。但cookie可以被人为的禁止，则必须有其他机制以便在cookie被禁止时仍然能够把session id传递回服务器。经常被使用的一种技术叫做URL重写，就是把session id直接附加在URL路径的后面。还有一种技术叫做表单隐藏字段。就是服务器会自动修改表单，添加一个隐藏字段，以便在表单提交时能够把session id传递回服务器。  </p>\n<h2 id=\"cookie与session的区别\"><a href=\"#cookie与session的区别\" class=\"headerlink\" title=\"cookie与session的区别\"></a>cookie与session的区别</h2><ul>\n<li><p>1、cookie数据存放在客户的浏览器上，session数据放在服务器上。</p>\n</li>\n<li><p>2、cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗<br> 考虑到安全应当使用session。</p>\n</li>\n<li><p>3、session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能<br> 考虑到减轻服务器性能方面，应当使用COOKIE。</p>\n</li>\n<li><p>4、单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。</p>\n</li>\n</ul>\n<h2 id=\"建议\"><a href=\"#建议\" class=\"headerlink\" title=\"建议\"></a>建议</h2><ul>\n<li>将登陆信息等重要信息存放为SESSION</li>\n<li>其他信息如果需要保留，可以放在COOKIE中</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"cookie与session的定义\"><a href=\"#cookie与session的定义\" class=\"headerlink\" title=\"cookie与session的定义\"></a>cookie与session的定义</h2><p>当浏览网站的时候，WEB 服务器会先送一小小资料放在你的计算机上，Cookie 会帮你在网站上所打的文字或是一些选择，都纪录下来。当下次你再光临同一个网站，WEB 服务器会先看看有没有它上次留下的 Cookie 资料，有的话，就会依据 Cookie里的内容来判断使用者，送出特定的网页内容给你。 Cookie 的使用很普遍，许多有提供个人化服务的网站，都是利用 Cookie来辨认使用者，以方便送出使用者量身定做的内容，像是 Web 接口的免费 email 网站，都要用到 Cookie。具体来说cookie机制采用的是在客户端保持状态的方案，而session机制采用的是在服务器端保持状态的方案。  </p>\n<h2 id=\"cookie与session的机制\"><a href=\"#cookie与session的机制\" class=\"headerlink\" title=\"cookie与session的机制\"></a>cookie与session的机制</h2><h3 id=\"cookie的机制\"><a href=\"#cookie的机制\" class=\"headerlink\" title=\"cookie的机制\"></a>cookie的机制</h3><p>正统的cookie分发是通过扩展HTTP协议来实现的，服务器通过在HTTP的响应头中加上一行特殊的指示以提示浏览器按照指示生成相应的cookie。然而纯粹的客户端脚本如JavaScript或者VBScript也可以生成cookie。而cookie的使用是由浏览器按照一定的原则在后台自动发送给服务器的。浏览器检查所有存储的cookie，如果某个cookie所声明的作用范围大于等于将要请求的资源所在的位置，则把该cookie附在请求资源的HTTP请求头上发送给服务器。cookie的内容主要包括：名字，值，过期时间，路径和域。路径与域一起构成cookie的作用范围。若不设置过期时间，则表示这个cookie的生命期为浏览器会话期间，关闭浏览器窗口，cookie就消失。这种生命期为浏览器会话期的cookie被称为会话cookie。会话cookie一般不存储在硬盘上而是保存在内存里，当然这种行为并不是规范规定的。若设置了过期时间，浏览器就会把cookie保存到硬盘上，关闭后再次打开浏览器，这些cookie仍然有效直到超过设定的过期时间。存储在硬盘上的cookie可以在不同的浏览器进程间共享，比如两个IE窗口。而对于保存在内存里的cookie，不同的浏览器有不同的处理方式。  </p>\n<h3 id=\"session的机制\"><a href=\"#session的机制\" class=\"headerlink\" title=\"session的机制\"></a>session的机制</h3><p>session机制是一种服务器端的机制，服务器使用一种类似于散列表的结构（也可能就是使用散列表）来保存信息。当程序需要为某个客户端的请求创建一个session时，服务器首先检查这个客户端的请求里是否已包含了一个session标识（称为session id），如果已包含则说明以前已经为此客户端创建过session，服务器就按照session id把这个session检索出来使用（检索不到，会新建一个），如果客户端请求不包含session id，则为此客户端创建一个session并且生成一个与此session相关联的session id，session id的值应该是一个既不会重复，又不容易被找到规律以仿造的字符串，这个session id将被在本次响应中返回给客户端保存。保存这个session id的方式可以采用cookie，这样在交互过程中浏览器可以自动的按照规则把这个标识发送给服务器。一般这个cookie的名字都是类似于SEEESIONID。但cookie可以被人为的禁止，则必须有其他机制以便在cookie被禁止时仍然能够把session id传递回服务器。经常被使用的一种技术叫做URL重写，就是把session id直接附加在URL路径的后面。还有一种技术叫做表单隐藏字段。就是服务器会自动修改表单，添加一个隐藏字段，以便在表单提交时能够把session id传递回服务器。  </p>\n<h2 id=\"cookie与session的区别\"><a href=\"#cookie与session的区别\" class=\"headerlink\" title=\"cookie与session的区别\"></a>cookie与session的区别</h2><ul>\n<li><p>1、cookie数据存放在客户的浏览器上，session数据放在服务器上。</p>\n</li>\n<li><p>2、cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗<br> 考虑到安全应当使用session。</p>\n</li>\n<li><p>3、session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能<br> 考虑到减轻服务器性能方面，应当使用COOKIE。</p>\n</li>\n<li><p>4、单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。</p>\n</li>\n</ul>\n<h2 id=\"建议\"><a href=\"#建议\" class=\"headerlink\" title=\"建议\"></a>建议</h2><ul>\n<li>将登陆信息等重要信息存放为SESSION</li>\n<li>其他信息如果需要保留，可以放在COOKIE中</li>\n</ul>\n"},{"title":"vue知识点简单总结","_content":"## vue是什么？\nVue.js是当下很火的一个JavaScript MVVM库，它是以数据驱动和组件化的思想构建的。相比于Angular.js，Vue.js提供了更加简洁、更易于理解的API，使得我们能够快速地上手并使用Vue.js。\n之前我们已经习惯了用jQuery操作DOM，在学习Vue.js时需要抛开手动操作DOM的思维，因为Vue.js是数据驱动的，无需手动操作DOM。它通过一些特殊的HTML语法，将DOM和数据绑定起来。一旦创建了绑定，DOM将和数据保持同步，每当变更了数据，DOM也会相应地更新。在使用Vue.js时，也可以结合其他库一起使用，比如jQuery。  \n## vue的mvvm模式  \n![](http://onep1caa3.bkt.clouddn.com/04091.png)  \n（图片源自百度）  \n上面这张图在概括了MVVM（Model-View-ViewModel）模式的同时，还描述了在vue.js中ViewModel是如何和view以及model进行交互的。  \n**viewmodel是vue.js的核心，它是一个vue实例**  \nVue实例是作用于某一个HTML元素上的，这个元素可以是HTML的body元素，也可以是指定了id的某个元素。当创建了ViewModel后，双向绑定是如何达成的呢？首先，我们将上图中的DOM Listeners和Data Bindings看作两个工具，它们是实现双向绑定的关键。  \n从View侧看，ViewModel中的DOM Listeners工具会帮我们监测页面上DOM元素的变化，如果有变化，则更改Model中的数据.  \n从Model侧看，当我们更新Model中的数据时，Data Bindings工具会帮我们更新页面中的DOM元素。  \n## 使用vue的过程  \n* 1.定义view；\n* 2.定义model；\n* 3.创建一个vue实例或者“view model”，它用于连接view和model  \n在创建vue实例时，需要传入一个选项对象，选项对象可以包含元素，挂载元素，方法，模生命周期钩子等等。\n  \n## 双向绑定实例  \n使用`v-model`指令在表单元素上创建双向数据绑定。  \n>     <div id=\"app\">\n>     <p>{{ message }}</p>\n>     <input type=\"text\" v-model=\"message\"/>\n>     </div>   \n\n这样可以把message绑定到文本框，当更改文本框的值时， `<p>{{ message }}</p>` 中的内容也会被更新。如果改变message的值，文本框的值也会被更新。  \n## vue.js的常用指令  \n> Vue.js的指令是以v-开头的，它们作用于HTML元素，指令提供了一些特殊的特性，将指令绑定在元素上时，指令会为绑定的目标元素添加一些特殊的行为，我们可以将指令看作特殊的HTML特性（attribute）。  \n\n### `v-if`指令\n条件渲染指令，根据表达式的真假来删除和插入元素。  \n如以下代码：  \n>     <!DOCTYPE html>\n>     <html>\n>     <head>\n>     <meta charset=\"UTF-8\">\n>     <title></title>\n>     </head>\n>     <body>\n>     <div id=\"app\">\n>     <h1>Hello, Vue.js!</h1>\n>     <h1 v-if=\"yes\">Yes!</h1>\n>     <h1 v-if=\"no\">No!</h1>\n>     <h1 v-if=\"age >= 25\">Age: {{ age }}</h1>\n>     <h1 v-if=\"name.indexOf('jack') >= 0\">Name: {{ name }}</h1>\n>     </div>\n>     </body>\n>     <script src=\"js/vue.js\"></script>\n>     <script>\n>     \n>     var vm = new Vue({\n>     el: '#app',\n>     data: {\n>     yes: true,\n>     no: false,\n>     age: 28,\n>     name: 'keepfool'\n>     }\n>     })\n>     </script>\n>     </html>  \n\n\n数据的yes属性为true，所以\"Yes!\"会被输出；\n数据的no属性为false，所以\"No!\"不会被输出；\n运算式age >= 25返回true，所以\"Age: 28\"会被输出；\n运算式name.indexOf('jack') >= 0返回false，所以\"Name: keepfool\"不会被输出。\n注意：v-if指令是根据条件表达式的值来执行元素的插入或者删除行为。这一点可以从渲染的HTML源代码看出来，面上只渲染了3个<h 1>元素，v-if值为false的<h 1>元素没有渲染到HTML。  \n### v-show指令  \nv-show也是条件渲染指令，和v-if指令不同的是，使用v-show指令的元素始终会被渲染到HTML，它只是简单地为元素设置CSS的style属性（不显示是css属性display:none）。  \n### v-else指令  \n可以用v-else指令为v-if或v-show添加一个“else块”。v-else元素必须立即跟在v-if或v-show元素的后面——否则它不能被识别。  \n### v-for指令  \nv-for指令基于一个数组渲染一个列表，它和JavaScript的遍历语法相似：`v-for=\"item in items\"`。  \n### v-bind指令  \nv-bind指令可以在其名称后面带一个参数，中间放一个冒号隔开，这个参数通常是HTML元素的特性（attribute），例如：v-bind:class。  \n### v-on指令  \nv-on指令用于给监听DOM事件，它的用语法和v-bind是类似的，例如监听< a>元素的点击事件：`<a v-on:click=\"doSomething\">`  \n有两种形式调用方法：绑定一个方法（让事件指向方法的引用），或者使用内联语句。  \n### v-bind与v-on的缩写  \nVue.js为最常用的两个指令v-bind和v-on提供了缩写方式。v-bind指令可以缩写为一个冒号，v-on指令可以缩写为@符号。\n\n","source":"_posts/2017.04.09.vue.md","raw":"---\ntitle: vue知识点简单总结\ntags: [vue,bootstrap]\ncategories: 知识\n---\n## vue是什么？\nVue.js是当下很火的一个JavaScript MVVM库，它是以数据驱动和组件化的思想构建的。相比于Angular.js，Vue.js提供了更加简洁、更易于理解的API，使得我们能够快速地上手并使用Vue.js。\n之前我们已经习惯了用jQuery操作DOM，在学习Vue.js时需要抛开手动操作DOM的思维，因为Vue.js是数据驱动的，无需手动操作DOM。它通过一些特殊的HTML语法，将DOM和数据绑定起来。一旦创建了绑定，DOM将和数据保持同步，每当变更了数据，DOM也会相应地更新。在使用Vue.js时，也可以结合其他库一起使用，比如jQuery。  \n## vue的mvvm模式  \n![](http://onep1caa3.bkt.clouddn.com/04091.png)  \n（图片源自百度）  \n上面这张图在概括了MVVM（Model-View-ViewModel）模式的同时，还描述了在vue.js中ViewModel是如何和view以及model进行交互的。  \n**viewmodel是vue.js的核心，它是一个vue实例**  \nVue实例是作用于某一个HTML元素上的，这个元素可以是HTML的body元素，也可以是指定了id的某个元素。当创建了ViewModel后，双向绑定是如何达成的呢？首先，我们将上图中的DOM Listeners和Data Bindings看作两个工具，它们是实现双向绑定的关键。  \n从View侧看，ViewModel中的DOM Listeners工具会帮我们监测页面上DOM元素的变化，如果有变化，则更改Model中的数据.  \n从Model侧看，当我们更新Model中的数据时，Data Bindings工具会帮我们更新页面中的DOM元素。  \n## 使用vue的过程  \n* 1.定义view；\n* 2.定义model；\n* 3.创建一个vue实例或者“view model”，它用于连接view和model  \n在创建vue实例时，需要传入一个选项对象，选项对象可以包含元素，挂载元素，方法，模生命周期钩子等等。\n  \n## 双向绑定实例  \n使用`v-model`指令在表单元素上创建双向数据绑定。  \n>     <div id=\"app\">\n>     <p>{{ message }}</p>\n>     <input type=\"text\" v-model=\"message\"/>\n>     </div>   \n\n这样可以把message绑定到文本框，当更改文本框的值时， `<p>{{ message }}</p>` 中的内容也会被更新。如果改变message的值，文本框的值也会被更新。  \n## vue.js的常用指令  \n> Vue.js的指令是以v-开头的，它们作用于HTML元素，指令提供了一些特殊的特性，将指令绑定在元素上时，指令会为绑定的目标元素添加一些特殊的行为，我们可以将指令看作特殊的HTML特性（attribute）。  \n\n### `v-if`指令\n条件渲染指令，根据表达式的真假来删除和插入元素。  \n如以下代码：  \n>     <!DOCTYPE html>\n>     <html>\n>     <head>\n>     <meta charset=\"UTF-8\">\n>     <title></title>\n>     </head>\n>     <body>\n>     <div id=\"app\">\n>     <h1>Hello, Vue.js!</h1>\n>     <h1 v-if=\"yes\">Yes!</h1>\n>     <h1 v-if=\"no\">No!</h1>\n>     <h1 v-if=\"age >= 25\">Age: {{ age }}</h1>\n>     <h1 v-if=\"name.indexOf('jack') >= 0\">Name: {{ name }}</h1>\n>     </div>\n>     </body>\n>     <script src=\"js/vue.js\"></script>\n>     <script>\n>     \n>     var vm = new Vue({\n>     el: '#app',\n>     data: {\n>     yes: true,\n>     no: false,\n>     age: 28,\n>     name: 'keepfool'\n>     }\n>     })\n>     </script>\n>     </html>  \n\n\n数据的yes属性为true，所以\"Yes!\"会被输出；\n数据的no属性为false，所以\"No!\"不会被输出；\n运算式age >= 25返回true，所以\"Age: 28\"会被输出；\n运算式name.indexOf('jack') >= 0返回false，所以\"Name: keepfool\"不会被输出。\n注意：v-if指令是根据条件表达式的值来执行元素的插入或者删除行为。这一点可以从渲染的HTML源代码看出来，面上只渲染了3个<h 1>元素，v-if值为false的<h 1>元素没有渲染到HTML。  \n### v-show指令  \nv-show也是条件渲染指令，和v-if指令不同的是，使用v-show指令的元素始终会被渲染到HTML，它只是简单地为元素设置CSS的style属性（不显示是css属性display:none）。  \n### v-else指令  \n可以用v-else指令为v-if或v-show添加一个“else块”。v-else元素必须立即跟在v-if或v-show元素的后面——否则它不能被识别。  \n### v-for指令  \nv-for指令基于一个数组渲染一个列表，它和JavaScript的遍历语法相似：`v-for=\"item in items\"`。  \n### v-bind指令  \nv-bind指令可以在其名称后面带一个参数，中间放一个冒号隔开，这个参数通常是HTML元素的特性（attribute），例如：v-bind:class。  \n### v-on指令  \nv-on指令用于给监听DOM事件，它的用语法和v-bind是类似的，例如监听< a>元素的点击事件：`<a v-on:click=\"doSomething\">`  \n有两种形式调用方法：绑定一个方法（让事件指向方法的引用），或者使用内联语句。  \n### v-bind与v-on的缩写  \nVue.js为最常用的两个指令v-bind和v-on提供了缩写方式。v-bind指令可以缩写为一个冒号，v-on指令可以缩写为@符号。\n\n","slug":"2017.04.09.vue","published":1,"date":"2017-04-09T12:51:30.000Z","updated":"2017-04-09T12:51:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwvh258z000dw39zmzk92fkm","content":"<h2 id=\"vue是什么？\"><a href=\"#vue是什么？\" class=\"headerlink\" title=\"vue是什么？\"></a>vue是什么？</h2><p>Vue.js是当下很火的一个JavaScript MVVM库，它是以数据驱动和组件化的思想构建的。相比于Angular.js，Vue.js提供了更加简洁、更易于理解的API，使得我们能够快速地上手并使用Vue.js。<br>之前我们已经习惯了用jQuery操作DOM，在学习Vue.js时需要抛开手动操作DOM的思维，因为Vue.js是数据驱动的，无需手动操作DOM。它通过一些特殊的HTML语法，将DOM和数据绑定起来。一旦创建了绑定，DOM将和数据保持同步，每当变更了数据，DOM也会相应地更新。在使用Vue.js时，也可以结合其他库一起使用，比如jQuery。  </p>\n<h2 id=\"vue的mvvm模式\"><a href=\"#vue的mvvm模式\" class=\"headerlink\" title=\"vue的mvvm模式\"></a>vue的mvvm模式</h2><p><img src=\"http://onep1caa3.bkt.clouddn.com/04091.png\" alt=\"\"><br>（图片源自百度）<br>上面这张图在概括了MVVM（Model-View-ViewModel）模式的同时，还描述了在vue.js中ViewModel是如何和view以及model进行交互的。<br><strong>viewmodel是vue.js的核心，它是一个vue实例</strong><br>Vue实例是作用于某一个HTML元素上的，这个元素可以是HTML的body元素，也可以是指定了id的某个元素。当创建了ViewModel后，双向绑定是如何达成的呢？首先，我们将上图中的DOM Listeners和Data Bindings看作两个工具，它们是实现双向绑定的关键。<br>从View侧看，ViewModel中的DOM Listeners工具会帮我们监测页面上DOM元素的变化，如果有变化，则更改Model中的数据.<br>从Model侧看，当我们更新Model中的数据时，Data Bindings工具会帮我们更新页面中的DOM元素。  </p>\n<h2 id=\"使用vue的过程\"><a href=\"#使用vue的过程\" class=\"headerlink\" title=\"使用vue的过程\"></a>使用vue的过程</h2><ul>\n<li>1.定义view；</li>\n<li>2.定义model；</li>\n<li>3.创建一个vue实例或者“view model”，它用于连接view和model<br>在创建vue实例时，需要传入一个选项对象，选项对象可以包含元素，挂载元素，方法，模生命周期钩子等等。</li>\n</ul>\n<h2 id=\"双向绑定实例\"><a href=\"#双向绑定实例\" class=\"headerlink\" title=\"双向绑定实例\"></a>双向绑定实例</h2><p>使用<code>v-model</code>指令在表单元素上创建双向数据绑定。  </p>\n<blockquote>\n<pre><code>&lt;div id=&quot;app&quot;&gt;\n&lt;p&gt;{{ message }}&lt;/p&gt;\n&lt;input type=&quot;text&quot; v-model=&quot;message&quot;/&gt;\n&lt;/div&gt;   \n</code></pre></blockquote>\n<p>这样可以把message绑定到文本框，当更改文本框的值时， <code>&lt;p&gt;&lt;/p&gt;</code> 中的内容也会被更新。如果改变message的值，文本框的值也会被更新。  </p>\n<h2 id=\"vue-js的常用指令\"><a href=\"#vue-js的常用指令\" class=\"headerlink\" title=\"vue.js的常用指令\"></a>vue.js的常用指令</h2><blockquote>\n<p>Vue.js的指令是以v-开头的，它们作用于HTML元素，指令提供了一些特殊的特性，将指令绑定在元素上时，指令会为绑定的目标元素添加一些特殊的行为，我们可以将指令看作特殊的HTML特性（attribute）。  </p>\n</blockquote>\n<h3 id=\"v-if指令\"><a href=\"#v-if指令\" class=\"headerlink\" title=\"v-if指令\"></a><code>v-if</code>指令</h3><p>条件渲染指令，根据表达式的真假来删除和插入元素。<br>如以下代码：  </p>\n<blockquote>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta charset=&quot;UTF-8&quot;&gt;\n&lt;title&gt;&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=&quot;app&quot;&gt;\n&lt;h1&gt;Hello, Vue.js!&lt;/h1&gt;\n&lt;h1 v-if=&quot;yes&quot;&gt;Yes!&lt;/h1&gt;\n&lt;h1 v-if=&quot;no&quot;&gt;No!&lt;/h1&gt;\n&lt;h1 v-if=&quot;age &gt;= 25&quot;&gt;Age: {{ age }}&lt;/h1&gt;\n&lt;h1 v-if=&quot;name.indexOf(&apos;jack&apos;) &gt;= 0&quot;&gt;Name: {{ name }}&lt;/h1&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;script src=&quot;js/vue.js&quot;&gt;&lt;/script&gt;\n&lt;script&gt;\n\nvar vm = new Vue({\nel: &apos;#app&apos;,\ndata: {\nyes: true,\nno: false,\nage: 28,\nname: &apos;keepfool&apos;\n}\n})\n&lt;/script&gt;\n&lt;/html&gt;  \n</code></pre></blockquote>\n<p>数据的yes属性为true，所以”Yes!”会被输出；<br>数据的no属性为false，所以”No!”不会被输出；<br>运算式age &gt;= 25返回true，所以”Age: 28”会被输出；<br>运算式name.indexOf(‘jack’) &gt;= 0返回false，所以”Name: keepfool”不会被输出。<br>注意：v-if指令是根据条件表达式的值来执行元素的插入或者删除行为。这一点可以从渲染的HTML源代码看出来，面上只渲染了3个<h 1=\"\">元素，v-if值为false的<h 1=\"\">元素没有渲染到HTML。  </h></h></p>\n<h3 id=\"v-show指令\"><a href=\"#v-show指令\" class=\"headerlink\" title=\"v-show指令\"></a>v-show指令</h3><p>v-show也是条件渲染指令，和v-if指令不同的是，使用v-show指令的元素始终会被渲染到HTML，它只是简单地为元素设置CSS的style属性（不显示是css属性display:none）。  </p>\n<h3 id=\"v-else指令\"><a href=\"#v-else指令\" class=\"headerlink\" title=\"v-else指令\"></a>v-else指令</h3><p>可以用v-else指令为v-if或v-show添加一个“else块”。v-else元素必须立即跟在v-if或v-show元素的后面——否则它不能被识别。  </p>\n<h3 id=\"v-for指令\"><a href=\"#v-for指令\" class=\"headerlink\" title=\"v-for指令\"></a>v-for指令</h3><p>v-for指令基于一个数组渲染一个列表，它和JavaScript的遍历语法相似：<code>v-for=&quot;item in items&quot;</code>。  </p>\n<h3 id=\"v-bind指令\"><a href=\"#v-bind指令\" class=\"headerlink\" title=\"v-bind指令\"></a>v-bind指令</h3><p>v-bind指令可以在其名称后面带一个参数，中间放一个冒号隔开，这个参数通常是HTML元素的特性（attribute），例如：v-bind:class。  </p>\n<h3 id=\"v-on指令\"><a href=\"#v-on指令\" class=\"headerlink\" title=\"v-on指令\"></a>v-on指令</h3><p>v-on指令用于给监听DOM事件，它的用语法和v-bind是类似的，例如监听&lt; a&gt;元素的点击事件：<code>&lt;a v-on:click=&quot;doSomething&quot;&gt;</code><br>有两种形式调用方法：绑定一个方法（让事件指向方法的引用），或者使用内联语句。  </p>\n<h3 id=\"v-bind与v-on的缩写\"><a href=\"#v-bind与v-on的缩写\" class=\"headerlink\" title=\"v-bind与v-on的缩写\"></a>v-bind与v-on的缩写</h3><p>Vue.js为最常用的两个指令v-bind和v-on提供了缩写方式。v-bind指令可以缩写为一个冒号，v-on指令可以缩写为@符号。</p>\n","excerpt":"","more":"<h2 id=\"vue是什么？\"><a href=\"#vue是什么？\" class=\"headerlink\" title=\"vue是什么？\"></a>vue是什么？</h2><p>Vue.js是当下很火的一个JavaScript MVVM库，它是以数据驱动和组件化的思想构建的。相比于Angular.js，Vue.js提供了更加简洁、更易于理解的API，使得我们能够快速地上手并使用Vue.js。<br>之前我们已经习惯了用jQuery操作DOM，在学习Vue.js时需要抛开手动操作DOM的思维，因为Vue.js是数据驱动的，无需手动操作DOM。它通过一些特殊的HTML语法，将DOM和数据绑定起来。一旦创建了绑定，DOM将和数据保持同步，每当变更了数据，DOM也会相应地更新。在使用Vue.js时，也可以结合其他库一起使用，比如jQuery。  </p>\n<h2 id=\"vue的mvvm模式\"><a href=\"#vue的mvvm模式\" class=\"headerlink\" title=\"vue的mvvm模式\"></a>vue的mvvm模式</h2><p><img src=\"http://onep1caa3.bkt.clouddn.com/04091.png\" alt=\"\"><br>（图片源自百度）<br>上面这张图在概括了MVVM（Model-View-ViewModel）模式的同时，还描述了在vue.js中ViewModel是如何和view以及model进行交互的。<br><strong>viewmodel是vue.js的核心，它是一个vue实例</strong><br>Vue实例是作用于某一个HTML元素上的，这个元素可以是HTML的body元素，也可以是指定了id的某个元素。当创建了ViewModel后，双向绑定是如何达成的呢？首先，我们将上图中的DOM Listeners和Data Bindings看作两个工具，它们是实现双向绑定的关键。<br>从View侧看，ViewModel中的DOM Listeners工具会帮我们监测页面上DOM元素的变化，如果有变化，则更改Model中的数据.<br>从Model侧看，当我们更新Model中的数据时，Data Bindings工具会帮我们更新页面中的DOM元素。  </p>\n<h2 id=\"使用vue的过程\"><a href=\"#使用vue的过程\" class=\"headerlink\" title=\"使用vue的过程\"></a>使用vue的过程</h2><ul>\n<li>1.定义view；</li>\n<li>2.定义model；</li>\n<li>3.创建一个vue实例或者“view model”，它用于连接view和model<br>在创建vue实例时，需要传入一个选项对象，选项对象可以包含元素，挂载元素，方法，模生命周期钩子等等。</li>\n</ul>\n<h2 id=\"双向绑定实例\"><a href=\"#双向绑定实例\" class=\"headerlink\" title=\"双向绑定实例\"></a>双向绑定实例</h2><p>使用<code>v-model</code>指令在表单元素上创建双向数据绑定。  </p>\n<blockquote>\n<pre><code>&lt;div id=&quot;app&quot;&gt;\n&lt;p&gt;{{ message }}&lt;/p&gt;\n&lt;input type=&quot;text&quot; v-model=&quot;message&quot;/&gt;\n&lt;/div&gt;   \n</code></pre></blockquote>\n<p>这样可以把message绑定到文本框，当更改文本框的值时， <code>&lt;p&gt;&lt;/p&gt;</code> 中的内容也会被更新。如果改变message的值，文本框的值也会被更新。  </p>\n<h2 id=\"vue-js的常用指令\"><a href=\"#vue-js的常用指令\" class=\"headerlink\" title=\"vue.js的常用指令\"></a>vue.js的常用指令</h2><blockquote>\n<p>Vue.js的指令是以v-开头的，它们作用于HTML元素，指令提供了一些特殊的特性，将指令绑定在元素上时，指令会为绑定的目标元素添加一些特殊的行为，我们可以将指令看作特殊的HTML特性（attribute）。  </p>\n</blockquote>\n<h3 id=\"v-if指令\"><a href=\"#v-if指令\" class=\"headerlink\" title=\"v-if指令\"></a><code>v-if</code>指令</h3><p>条件渲染指令，根据表达式的真假来删除和插入元素。<br>如以下代码：  </p>\n<blockquote>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta charset=&quot;UTF-8&quot;&gt;\n&lt;title&gt;&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=&quot;app&quot;&gt;\n&lt;h1&gt;Hello, Vue.js!&lt;/h1&gt;\n&lt;h1 v-if=&quot;yes&quot;&gt;Yes!&lt;/h1&gt;\n&lt;h1 v-if=&quot;no&quot;&gt;No!&lt;/h1&gt;\n&lt;h1 v-if=&quot;age &gt;= 25&quot;&gt;Age: {{ age }}&lt;/h1&gt;\n&lt;h1 v-if=&quot;name.indexOf(&apos;jack&apos;) &gt;= 0&quot;&gt;Name: {{ name }}&lt;/h1&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;script src=&quot;js/vue.js&quot;&gt;&lt;/script&gt;\n&lt;script&gt;\n\nvar vm = new Vue({\nel: &apos;#app&apos;,\ndata: {\nyes: true,\nno: false,\nage: 28,\nname: &apos;keepfool&apos;\n}\n})\n&lt;/script&gt;\n&lt;/html&gt;  \n</code></pre></blockquote>\n<p>数据的yes属性为true，所以”Yes!”会被输出；<br>数据的no属性为false，所以”No!”不会被输出；<br>运算式age &gt;= 25返回true，所以”Age: 28”会被输出；<br>运算式name.indexOf(‘jack’) &gt;= 0返回false，所以”Name: keepfool”不会被输出。<br>注意：v-if指令是根据条件表达式的值来执行元素的插入或者删除行为。这一点可以从渲染的HTML源代码看出来，面上只渲染了3个<h 1>元素，v-if值为false的<h 1>元素没有渲染到HTML。  </p>\n<h3 id=\"v-show指令\"><a href=\"#v-show指令\" class=\"headerlink\" title=\"v-show指令\"></a>v-show指令</h3><p>v-show也是条件渲染指令，和v-if指令不同的是，使用v-show指令的元素始终会被渲染到HTML，它只是简单地为元素设置CSS的style属性（不显示是css属性display:none）。  </p>\n<h3 id=\"v-else指令\"><a href=\"#v-else指令\" class=\"headerlink\" title=\"v-else指令\"></a>v-else指令</h3><p>可以用v-else指令为v-if或v-show添加一个“else块”。v-else元素必须立即跟在v-if或v-show元素的后面——否则它不能被识别。  </p>\n<h3 id=\"v-for指令\"><a href=\"#v-for指令\" class=\"headerlink\" title=\"v-for指令\"></a>v-for指令</h3><p>v-for指令基于一个数组渲染一个列表，它和JavaScript的遍历语法相似：<code>v-for=&quot;item in items&quot;</code>。  </p>\n<h3 id=\"v-bind指令\"><a href=\"#v-bind指令\" class=\"headerlink\" title=\"v-bind指令\"></a>v-bind指令</h3><p>v-bind指令可以在其名称后面带一个参数，中间放一个冒号隔开，这个参数通常是HTML元素的特性（attribute），例如：v-bind:class。  </p>\n<h3 id=\"v-on指令\"><a href=\"#v-on指令\" class=\"headerlink\" title=\"v-on指令\"></a>v-on指令</h3><p>v-on指令用于给监听DOM事件，它的用语法和v-bind是类似的，例如监听&lt; a&gt;元素的点击事件：<code>&lt;a v-on:click=&quot;doSomething&quot;&gt;</code><br>有两种形式调用方法：绑定一个方法（让事件指向方法的引用），或者使用内联语句。  </p>\n<h3 id=\"v-bind与v-on的缩写\"><a href=\"#v-bind与v-on的缩写\" class=\"headerlink\" title=\"v-bind与v-on的缩写\"></a>v-bind与v-on的缩写</h3><p>Vue.js为最常用的两个指令v-bind和v-on提供了缩写方式。v-bind指令可以缩写为一个冒号，v-on指令可以缩写为@符号。</p>\n"},{"title":"vue+bootstray_demo","_content":"大体掌握了vue的简单基本指令之后，我尝试着做了一个简单的使用vue+bootstrap的demo。效果图如下：  \n![](http://onep1caa3.bkt.clouddn.com/04092.png)   \n可以实现信息的添加和删除功能。   \n直接上代码（注意使用的vue版本是1.0.25）：  \n\n    <!DOCTYPE html>\n    <html>\n    <head>\n    <meta charset=\"utf-8\">\n    <title>demo1</title>\n    <link href=\"http://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.css\" rel=\"stylesheet\">\n    </head>\n    <body>\n    <div id=\"app\" style=\"width:50%;margin:40px auto auto;background-color:#ffffff\">\n    <h1>create/delete</h1>\n    \n    <fieldset>\n    <legendcreate new people</legend>\n    \n    <div class=\"form-group\">\n    <label>Name:</label>\n    <input class=\"form-control\" type=\"text\" v-model=\"newperson.name\"/>\n    </div>\n    <br/>\n    <div class=\"form-group\">\n    <label>Age:</label>\n    <input class=\"form-control\" type=\"text\" v-model=\"newperson.age\"/>\n    </div>\n    <br/>\n    <div class=\"form-group\">\n    <label>Sex:</label>\n    <select class=\"form-control\" v-model=\"newperson.sex\">\n    <option value=\"male\">male</option>\n    <option value=\"female\">female</option>\n    </select>\n    </div>\n       <div class=\"form-group\"\n       <label></label>\n       <button class=\"btn btn-info\" @click=\"createperson\">Create</button>\n    </div>\n    \n    </fieldset>\n    <table class=\"table table-striped table-bordered\" >\n    <thead>\n    <tr>\n       <th :class=\"'text-center'\">Name</th>\n    <th :class=\"'text-center'\">Age</th>\n    <th  :class=\"'text-center'\">Sex</th>\n    <th :class=\"'text-center'\">Delete</th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr v-for=\"person in people\">\n    <td>{{person.name}}</td>\n    <td>{{person.age}}</td>\n    <td>{{person.sex}}</td>\n    <td :class=\"'text-center'\"><button class=\"btn btn-danger\"  @click=\"deleteperson($index)\" >delete</button></td>\n    </tr>\n    \n    </tbody>\n    </table>\n    \n    </div>\n    \n    </body>\n    <script src=\"http://cdn.bootcss.com/vue/1.0.25-csp/vue.js\"></script>\n    <script>\n    var vm=new Vue\n    ({\n    el:'#app',\n    data:{\n    newperson: {\n    name: '',\n    age: 0,\n    sex: 'Male'\n    },\n    people: [{\n    name: 'Jack',\n    age: 30,\n    sex: 'Male'\n    }, {\n    name: 'Bill',\n    age: 26,\n    sex: 'Male'\n    }, {\n    name: 'Tracy',\n    age: 22,\n    sex: 'Female'\n    }, {\n    name: 'Chris',\n    age: 36,\n    sex: 'Male'\n    }]\n    \n    \n    },\n    methods:{\n    createperson: function(){\n    this.people.push(this.newperson);\n      \t\t// 添加完newPerson对象后，重置newPerson对象\n    this.newperson = {name:'',age: 0,sex:'male'}\n    },\n    deleteperson: function(index){\n    // 删一个数组元素\n    this.people.splice(index,1);\n    }\n    }\n    })\n    </script>\n    </html>","source":"_posts/2017.04.09vue+bootstrap.md","raw":"---\ntitle: vue+bootstray_demo\ntags: [vue,bootstrap]\ncategories: 随笔\n---\n大体掌握了vue的简单基本指令之后，我尝试着做了一个简单的使用vue+bootstrap的demo。效果图如下：  \n![](http://onep1caa3.bkt.clouddn.com/04092.png)   \n可以实现信息的添加和删除功能。   \n直接上代码（注意使用的vue版本是1.0.25）：  \n\n    <!DOCTYPE html>\n    <html>\n    <head>\n    <meta charset=\"utf-8\">\n    <title>demo1</title>\n    <link href=\"http://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.css\" rel=\"stylesheet\">\n    </head>\n    <body>\n    <div id=\"app\" style=\"width:50%;margin:40px auto auto;background-color:#ffffff\">\n    <h1>create/delete</h1>\n    \n    <fieldset>\n    <legendcreate new people</legend>\n    \n    <div class=\"form-group\">\n    <label>Name:</label>\n    <input class=\"form-control\" type=\"text\" v-model=\"newperson.name\"/>\n    </div>\n    <br/>\n    <div class=\"form-group\">\n    <label>Age:</label>\n    <input class=\"form-control\" type=\"text\" v-model=\"newperson.age\"/>\n    </div>\n    <br/>\n    <div class=\"form-group\">\n    <label>Sex:</label>\n    <select class=\"form-control\" v-model=\"newperson.sex\">\n    <option value=\"male\">male</option>\n    <option value=\"female\">female</option>\n    </select>\n    </div>\n       <div class=\"form-group\"\n       <label></label>\n       <button class=\"btn btn-info\" @click=\"createperson\">Create</button>\n    </div>\n    \n    </fieldset>\n    <table class=\"table table-striped table-bordered\" >\n    <thead>\n    <tr>\n       <th :class=\"'text-center'\">Name</th>\n    <th :class=\"'text-center'\">Age</th>\n    <th  :class=\"'text-center'\">Sex</th>\n    <th :class=\"'text-center'\">Delete</th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr v-for=\"person in people\">\n    <td>{{person.name}}</td>\n    <td>{{person.age}}</td>\n    <td>{{person.sex}}</td>\n    <td :class=\"'text-center'\"><button class=\"btn btn-danger\"  @click=\"deleteperson($index)\" >delete</button></td>\n    </tr>\n    \n    </tbody>\n    </table>\n    \n    </div>\n    \n    </body>\n    <script src=\"http://cdn.bootcss.com/vue/1.0.25-csp/vue.js\"></script>\n    <script>\n    var vm=new Vue\n    ({\n    el:'#app',\n    data:{\n    newperson: {\n    name: '',\n    age: 0,\n    sex: 'Male'\n    },\n    people: [{\n    name: 'Jack',\n    age: 30,\n    sex: 'Male'\n    }, {\n    name: 'Bill',\n    age: 26,\n    sex: 'Male'\n    }, {\n    name: 'Tracy',\n    age: 22,\n    sex: 'Female'\n    }, {\n    name: 'Chris',\n    age: 36,\n    sex: 'Male'\n    }]\n    \n    \n    },\n    methods:{\n    createperson: function(){\n    this.people.push(this.newperson);\n      \t\t// 添加完newPerson对象后，重置newPerson对象\n    this.newperson = {name:'',age: 0,sex:'male'}\n    },\n    deleteperson: function(index){\n    // 删一个数组元素\n    this.people.splice(index,1);\n    }\n    }\n    })\n    </script>\n    </html>","slug":"2017.04.09vue+bootstrap","published":1,"date":"2017-04-09T12:52:26.000Z","updated":"2017-04-09T12:52:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwvh2590000gw39z5iclqyy2","content":"<p>大体掌握了vue的简单基本指令之后，我尝试着做了一个简单的使用vue+bootstrap的demo。效果图如下：<br><img src=\"http://onep1caa3.bkt.clouddn.com/04092.png\" alt=\"\"><br>可以实现信息的添加和删除功能。<br>直接上代码（注意使用的vue版本是1.0.25）：  </p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta charset=&quot;utf-8&quot;&gt;\n&lt;title&gt;demo1&lt;/title&gt;\n&lt;link href=&quot;http://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.css&quot; rel=&quot;stylesheet&quot;&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=&quot;app&quot; style=&quot;width:50%;margin:40px auto auto;background-color:#ffffff&quot;&gt;\n&lt;h1&gt;create/delete&lt;/h1&gt;\n\n&lt;fieldset&gt;\n&lt;legendcreate new people&lt;/legend&gt;\n\n&lt;div class=&quot;form-group&quot;&gt;\n&lt;label&gt;Name:&lt;/label&gt;\n&lt;input class=&quot;form-control&quot; type=&quot;text&quot; v-model=&quot;newperson.name&quot;/&gt;\n&lt;/div&gt;\n&lt;br/&gt;\n&lt;div class=&quot;form-group&quot;&gt;\n&lt;label&gt;Age:&lt;/label&gt;\n&lt;input class=&quot;form-control&quot; type=&quot;text&quot; v-model=&quot;newperson.age&quot;/&gt;\n&lt;/div&gt;\n&lt;br/&gt;\n&lt;div class=&quot;form-group&quot;&gt;\n&lt;label&gt;Sex:&lt;/label&gt;\n&lt;select class=&quot;form-control&quot; v-model=&quot;newperson.sex&quot;&gt;\n&lt;option value=&quot;male&quot;&gt;male&lt;/option&gt;\n&lt;option value=&quot;female&quot;&gt;female&lt;/option&gt;\n&lt;/select&gt;\n&lt;/div&gt;\n   &lt;div class=&quot;form-group&quot;\n   &lt;label&gt;&lt;/label&gt;\n   &lt;button class=&quot;btn btn-info&quot; @click=&quot;createperson&quot;&gt;Create&lt;/button&gt;\n&lt;/div&gt;\n\n&lt;/fieldset&gt;\n&lt;table class=&quot;table table-striped table-bordered&quot; &gt;\n&lt;thead&gt;\n&lt;tr&gt;\n   &lt;th :class=&quot;&apos;text-center&apos;&quot;&gt;Name&lt;/th&gt;\n&lt;th :class=&quot;&apos;text-center&apos;&quot;&gt;Age&lt;/th&gt;\n&lt;th  :class=&quot;&apos;text-center&apos;&quot;&gt;Sex&lt;/th&gt;\n&lt;th :class=&quot;&apos;text-center&apos;&quot;&gt;Delete&lt;/th&gt;\n&lt;/tr&gt;\n&lt;/thead&gt;\n&lt;tbody&gt;\n&lt;tr v-for=&quot;person in people&quot;&gt;\n&lt;td&gt;{{person.name}}&lt;/td&gt;\n&lt;td&gt;{{person.age}}&lt;/td&gt;\n&lt;td&gt;{{person.sex}}&lt;/td&gt;\n&lt;td :class=&quot;&apos;text-center&apos;&quot;&gt;&lt;button class=&quot;btn btn-danger&quot;  @click=&quot;deleteperson($index)&quot; &gt;delete&lt;/button&gt;&lt;/td&gt;\n&lt;/tr&gt;\n\n&lt;/tbody&gt;\n&lt;/table&gt;\n\n&lt;/div&gt;\n\n&lt;/body&gt;\n&lt;script src=&quot;http://cdn.bootcss.com/vue/1.0.25-csp/vue.js&quot;&gt;&lt;/script&gt;\n&lt;script&gt;\nvar vm=new Vue\n({\nel:&apos;#app&apos;,\ndata:{\nnewperson: {\nname: &apos;&apos;,\nage: 0,\nsex: &apos;Male&apos;\n},\npeople: [{\nname: &apos;Jack&apos;,\nage: 30,\nsex: &apos;Male&apos;\n}, {\nname: &apos;Bill&apos;,\nage: 26,\nsex: &apos;Male&apos;\n}, {\nname: &apos;Tracy&apos;,\nage: 22,\nsex: &apos;Female&apos;\n}, {\nname: &apos;Chris&apos;,\nage: 36,\nsex: &apos;Male&apos;\n}]\n\n\n},\nmethods:{\ncreateperson: function(){\nthis.people.push(this.newperson);\n          // 添加完newPerson对象后，重置newPerson对象\nthis.newperson = {name:&apos;&apos;,age: 0,sex:&apos;male&apos;}\n},\ndeleteperson: function(index){\n// 删一个数组元素\nthis.people.splice(index,1);\n}\n}\n})\n&lt;/script&gt;\n&lt;/html&gt;\n</code></pre>","excerpt":"","more":"<p>大体掌握了vue的简单基本指令之后，我尝试着做了一个简单的使用vue+bootstrap的demo。效果图如下：<br><img src=\"http://onep1caa3.bkt.clouddn.com/04092.png\" alt=\"\"><br>可以实现信息的添加和删除功能。<br>直接上代码（注意使用的vue版本是1.0.25）：  </p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta charset=&quot;utf-8&quot;&gt;\n&lt;title&gt;demo1&lt;/title&gt;\n&lt;link href=&quot;http://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.css&quot; rel=&quot;stylesheet&quot;&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=&quot;app&quot; style=&quot;width:50%;margin:40px auto auto;background-color:#ffffff&quot;&gt;\n&lt;h1&gt;create/delete&lt;/h1&gt;\n\n&lt;fieldset&gt;\n&lt;legendcreate new people&lt;/legend&gt;\n\n&lt;div class=&quot;form-group&quot;&gt;\n&lt;label&gt;Name:&lt;/label&gt;\n&lt;input class=&quot;form-control&quot; type=&quot;text&quot; v-model=&quot;newperson.name&quot;/&gt;\n&lt;/div&gt;\n&lt;br/&gt;\n&lt;div class=&quot;form-group&quot;&gt;\n&lt;label&gt;Age:&lt;/label&gt;\n&lt;input class=&quot;form-control&quot; type=&quot;text&quot; v-model=&quot;newperson.age&quot;/&gt;\n&lt;/div&gt;\n&lt;br/&gt;\n&lt;div class=&quot;form-group&quot;&gt;\n&lt;label&gt;Sex:&lt;/label&gt;\n&lt;select class=&quot;form-control&quot; v-model=&quot;newperson.sex&quot;&gt;\n&lt;option value=&quot;male&quot;&gt;male&lt;/option&gt;\n&lt;option value=&quot;female&quot;&gt;female&lt;/option&gt;\n&lt;/select&gt;\n&lt;/div&gt;\n   &lt;div class=&quot;form-group&quot;\n   &lt;label&gt;&lt;/label&gt;\n   &lt;button class=&quot;btn btn-info&quot; @click=&quot;createperson&quot;&gt;Create&lt;/button&gt;\n&lt;/div&gt;\n\n&lt;/fieldset&gt;\n&lt;table class=&quot;table table-striped table-bordered&quot; &gt;\n&lt;thead&gt;\n&lt;tr&gt;\n   &lt;th :class=&quot;&apos;text-center&apos;&quot;&gt;Name&lt;/th&gt;\n&lt;th :class=&quot;&apos;text-center&apos;&quot;&gt;Age&lt;/th&gt;\n&lt;th  :class=&quot;&apos;text-center&apos;&quot;&gt;Sex&lt;/th&gt;\n&lt;th :class=&quot;&apos;text-center&apos;&quot;&gt;Delete&lt;/th&gt;\n&lt;/tr&gt;\n&lt;/thead&gt;\n&lt;tbody&gt;\n&lt;tr v-for=&quot;person in people&quot;&gt;\n&lt;td&gt;{{person.name}}&lt;/td&gt;\n&lt;td&gt;{{person.age}}&lt;/td&gt;\n&lt;td&gt;{{person.sex}}&lt;/td&gt;\n&lt;td :class=&quot;&apos;text-center&apos;&quot;&gt;&lt;button class=&quot;btn btn-danger&quot;  @click=&quot;deleteperson($index)&quot; &gt;delete&lt;/button&gt;&lt;/td&gt;\n&lt;/tr&gt;\n\n&lt;/tbody&gt;\n&lt;/table&gt;\n\n&lt;/div&gt;\n\n&lt;/body&gt;\n&lt;script src=&quot;http://cdn.bootcss.com/vue/1.0.25-csp/vue.js&quot;&gt;&lt;/script&gt;\n&lt;script&gt;\nvar vm=new Vue\n({\nel:&apos;#app&apos;,\ndata:{\nnewperson: {\nname: &apos;&apos;,\nage: 0,\nsex: &apos;Male&apos;\n},\npeople: [{\nname: &apos;Jack&apos;,\nage: 30,\nsex: &apos;Male&apos;\n}, {\nname: &apos;Bill&apos;,\nage: 26,\nsex: &apos;Male&apos;\n}, {\nname: &apos;Tracy&apos;,\nage: 22,\nsex: &apos;Female&apos;\n}, {\nname: &apos;Chris&apos;,\nage: 36,\nsex: &apos;Male&apos;\n}]\n\n\n},\nmethods:{\ncreateperson: function(){\nthis.people.push(this.newperson);\n          // 添加完newPerson对象后，重置newPerson对象\nthis.newperson = {name:&apos;&apos;,age: 0,sex:&apos;male&apos;}\n},\ndeleteperson: function(index){\n// 删一个数组元素\nthis.people.splice(index,1);\n}\n}\n})\n&lt;/script&gt;\n&lt;/html&gt;\n</code></pre>"},{"title":"Vue.js--基于$.ajax实现数据的跨域增删查改","_content":"## 概述\n我们知道在实例中有90%的数据都是来自服务端的，前端和服务端之间的数据交互一般是通过ajax请求来完成的。jQuery提供了较丰富的ajax方法，它不仅支持基于XMLHttpRequest的ajax请求，也能处理跨域的JSONP请求。同时，vue.js和jQuery是可以混合使用的。 \n## 基础概念  \n### 同源策略和跨域概念\n如果两个页面拥有相同的协议（protocol），端口（port）和主机（host），那么这两个页面就属于同一个源（orgin），可以简单地理解为同一站点下的资源相互访问都是同源的，跨站点的资源访问都是跨域的。\n### 跨域资源共享\n跨域资源共享（CORS）是一份浏览器技术的规范，提供了Web服务器从不同网域传来沙盒脚本的方法，以避开浏览器的同源策略，是JSONP模式的现代版。与JSONP不同，CORS除了支持GET方法以外，还支持其他HTTP方法。用CORS可以让网页设计师用一般的XMLHTTPRequest，这种方式的错误处理比JSONP要来的好。另一方面，JSONP可以在不支持CORS的老旧浏览器上运作，现代的浏览器都支持CORS。\n### JSONP概念\n由于同源策略，一般来说不允许JavaScript跨域访问其他服务器的页面对象，但是HTML的`<script>`元素是一个例外。利用 `<script>` 元素的这个开放策略，网页可以得到从其他来源动态产生的 JSON资料，而这种使用模式就是所谓的 JSONP。用 JSONP 抓到的资料并不是 JSON，而是任意的JavaScript，用 JavaScript 直译器执行而不是用 JSON 解析器解析。\n### REST Web Services简介\nHTTP协议是Web的标准之一，HTTP协议包含一些标准的操作方法，例如：GET, POST, PUT, Delete等，用这些方法能够实现对Web资源的CURD操作，下表列出了这些方法的操作定义。","source":"_posts/2017.04.23vue.js.md","raw":"---\ntitle: Vue.js--基于$.ajax实现数据的跨域增删查改\ntags: [vue,ajax,jquery\t]\ncategories: 知识 \n---\n## 概述\n我们知道在实例中有90%的数据都是来自服务端的，前端和服务端之间的数据交互一般是通过ajax请求来完成的。jQuery提供了较丰富的ajax方法，它不仅支持基于XMLHttpRequest的ajax请求，也能处理跨域的JSONP请求。同时，vue.js和jQuery是可以混合使用的。 \n## 基础概念  \n### 同源策略和跨域概念\n如果两个页面拥有相同的协议（protocol），端口（port）和主机（host），那么这两个页面就属于同一个源（orgin），可以简单地理解为同一站点下的资源相互访问都是同源的，跨站点的资源访问都是跨域的。\n### 跨域资源共享\n跨域资源共享（CORS）是一份浏览器技术的规范，提供了Web服务器从不同网域传来沙盒脚本的方法，以避开浏览器的同源策略，是JSONP模式的现代版。与JSONP不同，CORS除了支持GET方法以外，还支持其他HTTP方法。用CORS可以让网页设计师用一般的XMLHTTPRequest，这种方式的错误处理比JSONP要来的好。另一方面，JSONP可以在不支持CORS的老旧浏览器上运作，现代的浏览器都支持CORS。\n### JSONP概念\n由于同源策略，一般来说不允许JavaScript跨域访问其他服务器的页面对象，但是HTML的`<script>`元素是一个例外。利用 `<script>` 元素的这个开放策略，网页可以得到从其他来源动态产生的 JSON资料，而这种使用模式就是所谓的 JSONP。用 JSONP 抓到的资料并不是 JSON，而是任意的JavaScript，用 JavaScript 直译器执行而不是用 JSON 解析器解析。\n### REST Web Services简介\nHTTP协议是Web的标准之一，HTTP协议包含一些标准的操作方法，例如：GET, POST, PUT, Delete等，用这些方法能够实现对Web资源的CURD操作，下表列出了这些方法的操作定义。","slug":"2017.04.23vue.js","published":1,"date":"2017-04-23T07:59:06.000Z","updated":"2017-04-23T07:59:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwvh2591000kw39z992g9klf","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>我们知道在实例中有90%的数据都是来自服务端的，前端和服务端之间的数据交互一般是通过ajax请求来完成的。jQuery提供了较丰富的ajax方法，它不仅支持基于XMLHttpRequest的ajax请求，也能处理跨域的JSONP请求。同时，vue.js和jQuery是可以混合使用的。 </p>\n<h2 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a>基础概念</h2><h3 id=\"同源策略和跨域概念\"><a href=\"#同源策略和跨域概念\" class=\"headerlink\" title=\"同源策略和跨域概念\"></a>同源策略和跨域概念</h3><p>如果两个页面拥有相同的协议（protocol），端口（port）和主机（host），那么这两个页面就属于同一个源（orgin），可以简单地理解为同一站点下的资源相互访问都是同源的，跨站点的资源访问都是跨域的。</p>\n<h3 id=\"跨域资源共享\"><a href=\"#跨域资源共享\" class=\"headerlink\" title=\"跨域资源共享\"></a>跨域资源共享</h3><p>跨域资源共享（CORS）是一份浏览器技术的规范，提供了Web服务器从不同网域传来沙盒脚本的方法，以避开浏览器的同源策略，是JSONP模式的现代版。与JSONP不同，CORS除了支持GET方法以外，还支持其他HTTP方法。用CORS可以让网页设计师用一般的XMLHTTPRequest，这种方式的错误处理比JSONP要来的好。另一方面，JSONP可以在不支持CORS的老旧浏览器上运作，现代的浏览器都支持CORS。</p>\n<h3 id=\"JSONP概念\"><a href=\"#JSONP概念\" class=\"headerlink\" title=\"JSONP概念\"></a>JSONP概念</h3><p>由于同源策略，一般来说不允许JavaScript跨域访问其他服务器的页面对象，但是HTML的<code>&lt;script&gt;</code>元素是一个例外。利用 <code>&lt;script&gt;</code> 元素的这个开放策略，网页可以得到从其他来源动态产生的 JSON资料，而这种使用模式就是所谓的 JSONP。用 JSONP 抓到的资料并不是 JSON，而是任意的JavaScript，用 JavaScript 直译器执行而不是用 JSON 解析器解析。</p>\n<h3 id=\"REST-Web-Services简介\"><a href=\"#REST-Web-Services简介\" class=\"headerlink\" title=\"REST Web Services简介\"></a>REST Web Services简介</h3><p>HTTP协议是Web的标准之一，HTTP协议包含一些标准的操作方法，例如：GET, POST, PUT, Delete等，用这些方法能够实现对Web资源的CURD操作，下表列出了这些方法的操作定义。</p>\n","excerpt":"","more":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>我们知道在实例中有90%的数据都是来自服务端的，前端和服务端之间的数据交互一般是通过ajax请求来完成的。jQuery提供了较丰富的ajax方法，它不仅支持基于XMLHttpRequest的ajax请求，也能处理跨域的JSONP请求。同时，vue.js和jQuery是可以混合使用的。 </p>\n<h2 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a>基础概念</h2><h3 id=\"同源策略和跨域概念\"><a href=\"#同源策略和跨域概念\" class=\"headerlink\" title=\"同源策略和跨域概念\"></a>同源策略和跨域概念</h3><p>如果两个页面拥有相同的协议（protocol），端口（port）和主机（host），那么这两个页面就属于同一个源（orgin），可以简单地理解为同一站点下的资源相互访问都是同源的，跨站点的资源访问都是跨域的。</p>\n<h3 id=\"跨域资源共享\"><a href=\"#跨域资源共享\" class=\"headerlink\" title=\"跨域资源共享\"></a>跨域资源共享</h3><p>跨域资源共享（CORS）是一份浏览器技术的规范，提供了Web服务器从不同网域传来沙盒脚本的方法，以避开浏览器的同源策略，是JSONP模式的现代版。与JSONP不同，CORS除了支持GET方法以外，还支持其他HTTP方法。用CORS可以让网页设计师用一般的XMLHTTPRequest，这种方式的错误处理比JSONP要来的好。另一方面，JSONP可以在不支持CORS的老旧浏览器上运作，现代的浏览器都支持CORS。</p>\n<h3 id=\"JSONP概念\"><a href=\"#JSONP概念\" class=\"headerlink\" title=\"JSONP概念\"></a>JSONP概念</h3><p>由于同源策略，一般来说不允许JavaScript跨域访问其他服务器的页面对象，但是HTML的<code>&lt;script&gt;</code>元素是一个例外。利用 <code>&lt;script&gt;</code> 元素的这个开放策略，网页可以得到从其他来源动态产生的 JSON资料，而这种使用模式就是所谓的 JSONP。用 JSONP 抓到的资料并不是 JSON，而是任意的JavaScript，用 JavaScript 直译器执行而不是用 JSON 解析器解析。</p>\n<h3 id=\"REST-Web-Services简介\"><a href=\"#REST-Web-Services简介\" class=\"headerlink\" title=\"REST Web Services简介\"></a>REST Web Services简介</h3><p>HTTP协议是Web的标准之一，HTTP协议包含一些标准的操作方法，例如：GET, POST, PUT, Delete等，用这些方法能够实现对Web资源的CURD操作，下表列出了这些方法的操作定义。</p>\n"},{"title":"jQuery获取单选框的值","_content":"使用jQuery可以很方便地获取单选框的值，以下是详细的步骤  \n### Radio\n![](http://onep1caa3.bkt.clouddn.com/20170418205910.png)  \n\n* 1.获取选中值，有三种方法  \n>     $('input:radio:checked').val()；\n>     $(\"input[type='radio']:checked\").val();\n>     $(\"input[name='rd']:checked\").val();  \n  \n* 2.设置第一个Radio为选中值  \n`$('input:radio:first').attr('checked', 'checked');`或者`$('input:radio:first').attr('checked', 'true');`\n  \n\n* 3.设置最后一个Radio为选中值  \n`$('input:radio:last').attr('checked', 'checked');`或者`$('input:radio:last').attr('checked', 'true');`\n* 4.根据索引值设置任意一个radio为选中值  \n`$('input:radio').eq(索引值).attr('checked', 'true');索引值=0,1,2....`或者`$('input:radio').slice(1,2).attr('checked', 'true');`\n* 5.根据Value值设置Radio为选中值  \n`$(\"input:radio[value=http://www.2cto.com/kf/201110/'rd2']\").attr('checked','true');`或者`$(\"input[value=http://www.2cto.com/kf/201110/'rd2']\").attr('checked','true');`\n* 6.删除Value值为rd2的Radio  \n$`(\"input:radio[value=http://www.2cto.com/kf/201110/'rd2']\").remove();`\n* 7.删除第几个Radio  \n   $(\"input:radio\").eq(索引值).remove();索引值=0,1,2....\n* 8.遍历Radio  \n    $('input:radio').each(function(index,domEle){});  \n### DropDownList  \n![](http://onep1caa3.bkt.clouddn.com/20170418205921.png)   \n \n* 1.获取选中项  \n获取选中项的Value值  \n`$('select#sel option:selected').val();`或者`$('select#sel').find('option:selected').val(); `   \n获取选中项的Text值  \n`$('select#seloption:selected').text();`或者`$('select#sel').find('option:selected').text();`\n* 2.获取当前选中项的索引值  \n    $('select#sel').get(0).selectedIndex;\n* 3.获取当前option的最大索引值  \n    $('select#sel option:last').attr(\"index\")\n* 4.获取DropdownList的长度  \n`$('select#sel')[0].options.length;`或者`$('select#sel').get(0).options.length;`\n* 5.设置第一个option为选中值\n`$('select#sel option:first').attr('selected','true')`或者`$('select#sel')[0].selectedIndex = 0;`","source":"_posts/2017.04.18radio&dropdownlist.md","raw":"---\ntitle: jQuery获取单选框的值\ntags: [jQuery,bootstrap]\ncategories: 知识\n---\n使用jQuery可以很方便地获取单选框的值，以下是详细的步骤  \n### Radio\n![](http://onep1caa3.bkt.clouddn.com/20170418205910.png)  \n\n* 1.获取选中值，有三种方法  \n>     $('input:radio:checked').val()；\n>     $(\"input[type='radio']:checked\").val();\n>     $(\"input[name='rd']:checked\").val();  \n  \n* 2.设置第一个Radio为选中值  \n`$('input:radio:first').attr('checked', 'checked');`或者`$('input:radio:first').attr('checked', 'true');`\n  \n\n* 3.设置最后一个Radio为选中值  \n`$('input:radio:last').attr('checked', 'checked');`或者`$('input:radio:last').attr('checked', 'true');`\n* 4.根据索引值设置任意一个radio为选中值  \n`$('input:radio').eq(索引值).attr('checked', 'true');索引值=0,1,2....`或者`$('input:radio').slice(1,2).attr('checked', 'true');`\n* 5.根据Value值设置Radio为选中值  \n`$(\"input:radio[value=http://www.2cto.com/kf/201110/'rd2']\").attr('checked','true');`或者`$(\"input[value=http://www.2cto.com/kf/201110/'rd2']\").attr('checked','true');`\n* 6.删除Value值为rd2的Radio  \n$`(\"input:radio[value=http://www.2cto.com/kf/201110/'rd2']\").remove();`\n* 7.删除第几个Radio  \n   $(\"input:radio\").eq(索引值).remove();索引值=0,1,2....\n* 8.遍历Radio  \n    $('input:radio').each(function(index,domEle){});  \n### DropDownList  \n![](http://onep1caa3.bkt.clouddn.com/20170418205921.png)   \n \n* 1.获取选中项  \n获取选中项的Value值  \n`$('select#sel option:selected').val();`或者`$('select#sel').find('option:selected').val(); `   \n获取选中项的Text值  \n`$('select#seloption:selected').text();`或者`$('select#sel').find('option:selected').text();`\n* 2.获取当前选中项的索引值  \n    $('select#sel').get(0).selectedIndex;\n* 3.获取当前option的最大索引值  \n    $('select#sel option:last').attr(\"index\")\n* 4.获取DropdownList的长度  \n`$('select#sel')[0].options.length;`或者`$('select#sel').get(0).options.length;`\n* 5.设置第一个option为选中值\n`$('select#sel option:first').attr('selected','true')`或者`$('select#sel')[0].selectedIndex = 0;`","slug":"2017.04.18radio&dropdownlist","published":1,"date":"2017-04-21T12:43:04.000Z","updated":"2017-04-21T12:43:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwvh2591000nw39zyo125nvi","content":"<p>使用jQuery可以很方便地获取单选框的值，以下是详细的步骤  </p>\n<h3 id=\"Radio\"><a href=\"#Radio\" class=\"headerlink\" title=\"Radio\"></a>Radio</h3><p><img src=\"http://onep1caa3.bkt.clouddn.com/20170418205910.png\" alt=\"\">  </p>\n<ul>\n<li><p>1.获取选中值，有三种方法  </p>\n<blockquote>\n<pre><code>$(&apos;input:radio:checked&apos;).val()；\n$(&quot;input[type=&apos;radio&apos;]:checked&quot;).val();\n$(&quot;input[name=&apos;rd&apos;]:checked&quot;).val();  \n</code></pre></blockquote>\n</li>\n<li><p>2.设置第一个Radio为选中值<br><code>$(&#39;input:radio:first&#39;).attr(&#39;checked&#39;, &#39;checked&#39;);</code>或者<code>$(&#39;input:radio:first&#39;).attr(&#39;checked&#39;, &#39;true&#39;);</code></p>\n</li>\n</ul>\n<ul>\n<li>3.设置最后一个Radio为选中值<br><code>$(&#39;input:radio:last&#39;).attr(&#39;checked&#39;, &#39;checked&#39;);</code>或者<code>$(&#39;input:radio:last&#39;).attr(&#39;checked&#39;, &#39;true&#39;);</code></li>\n<li>4.根据索引值设置任意一个radio为选中值<br><code>$(&#39;input:radio&#39;).eq(索引值).attr(&#39;checked&#39;, &#39;true&#39;);索引值=0,1,2....</code>或者<code>$(&#39;input:radio&#39;).slice(1,2).attr(&#39;checked&#39;, &#39;true&#39;);</code></li>\n<li>5.根据Value值设置Radio为选中值<br><code>$(&quot;input:radio[value=http://www.2cto.com/kf/201110/&#39;rd2&#39;]&quot;).attr(&#39;checked&#39;,&#39;true&#39;);</code>或者<code>$(&quot;input[value=http://www.2cto.com/kf/201110/&#39;rd2&#39;]&quot;).attr(&#39;checked&#39;,&#39;true&#39;);</code></li>\n<li>6.删除Value值为rd2的Radio<br>$<code>(&quot;input:radio[value=http://www.2cto.com/kf/201110/&#39;rd2&#39;]&quot;).remove();</code></li>\n<li>7.删除第几个Radio<br> $(“input:radio”).eq(索引值).remove();索引值=0,1,2….</li>\n<li><p>8.遍历Radio<br>  $(‘input:radio’).each(function(index,domEle){});  </p>\n<h3 id=\"DropDownList\"><a href=\"#DropDownList\" class=\"headerlink\" title=\"DropDownList\"></a>DropDownList</h3><p><img src=\"http://onep1caa3.bkt.clouddn.com/20170418205921.png\" alt=\"\">   </p>\n</li>\n<li><p>1.获取选中项<br>获取选中项的Value值<br><code>$(&#39;select#sel option:selected&#39;).val();</code>或者<code>$(&#39;select#sel&#39;).find(&#39;option:selected&#39;).val();</code><br>获取选中项的Text值<br><code>$(&#39;select#seloption:selected&#39;).text();</code>或者<code>$(&#39;select#sel&#39;).find(&#39;option:selected&#39;).text();</code></p>\n</li>\n<li>2.获取当前选中项的索引值<br>  $(‘select#sel’).get(0).selectedIndex;</li>\n<li>3.获取当前option的最大索引值<br>  $(‘select#sel option:last’).attr(“index”)</li>\n<li>4.获取DropdownList的长度<br><code>$(&#39;select#sel&#39;)[0].options.length;</code>或者<code>$(&#39;select#sel&#39;).get(0).options.length;</code></li>\n<li>5.设置第一个option为选中值<br><code>$(&#39;select#sel option:first&#39;).attr(&#39;selected&#39;,&#39;true&#39;)</code>或者<code>$(&#39;select#sel&#39;)[0].selectedIndex = 0;</code></li>\n</ul>\n","excerpt":"","more":"<p>使用jQuery可以很方便地获取单选框的值，以下是详细的步骤  </p>\n<h3 id=\"Radio\"><a href=\"#Radio\" class=\"headerlink\" title=\"Radio\"></a>Radio</h3><p><img src=\"http://onep1caa3.bkt.clouddn.com/20170418205910.png\" alt=\"\">  </p>\n<ul>\n<li><p>1.获取选中值，有三种方法  </p>\n<blockquote>\n<pre><code>$(&apos;input:radio:checked&apos;).val()；\n$(&quot;input[type=&apos;radio&apos;]:checked&quot;).val();\n$(&quot;input[name=&apos;rd&apos;]:checked&quot;).val();  \n</code></pre></blockquote>\n</li>\n<li><p>2.设置第一个Radio为选中值<br><code>$(&#39;input:radio:first&#39;).attr(&#39;checked&#39;, &#39;checked&#39;);</code>或者<code>$(&#39;input:radio:first&#39;).attr(&#39;checked&#39;, &#39;true&#39;);</code></p>\n</li>\n</ul>\n<ul>\n<li>3.设置最后一个Radio为选中值<br><code>$(&#39;input:radio:last&#39;).attr(&#39;checked&#39;, &#39;checked&#39;);</code>或者<code>$(&#39;input:radio:last&#39;).attr(&#39;checked&#39;, &#39;true&#39;);</code></li>\n<li>4.根据索引值设置任意一个radio为选中值<br><code>$(&#39;input:radio&#39;).eq(索引值).attr(&#39;checked&#39;, &#39;true&#39;);索引值=0,1,2....</code>或者<code>$(&#39;input:radio&#39;).slice(1,2).attr(&#39;checked&#39;, &#39;true&#39;);</code></li>\n<li>5.根据Value值设置Radio为选中值<br><code>$(&quot;input:radio[value=http://www.2cto.com/kf/201110/&#39;rd2&#39;]&quot;).attr(&#39;checked&#39;,&#39;true&#39;);</code>或者<code>$(&quot;input[value=http://www.2cto.com/kf/201110/&#39;rd2&#39;]&quot;).attr(&#39;checked&#39;,&#39;true&#39;);</code></li>\n<li>6.删除Value值为rd2的Radio<br>$<code>(&quot;input:radio[value=http://www.2cto.com/kf/201110/&#39;rd2&#39;]&quot;).remove();</code></li>\n<li>7.删除第几个Radio<br> $(“input:radio”).eq(索引值).remove();索引值=0,1,2….</li>\n<li><p>8.遍历Radio<br>  $(‘input:radio’).each(function(index,domEle){});  </p>\n<h3 id=\"DropDownList\"><a href=\"#DropDownList\" class=\"headerlink\" title=\"DropDownList\"></a>DropDownList</h3><p><img src=\"http://onep1caa3.bkt.clouddn.com/20170418205921.png\" alt=\"\">   </p>\n</li>\n<li><p>1.获取选中项<br>获取选中项的Value值<br><code>$(&#39;select#sel option:selected&#39;).val();</code>或者<code>$(&#39;select#sel&#39;).find(&#39;option:selected&#39;).val();</code><br>获取选中项的Text值<br><code>$(&#39;select#seloption:selected&#39;).text();</code>或者<code>$(&#39;select#sel&#39;).find(&#39;option:selected&#39;).text();</code></p>\n</li>\n<li>2.获取当前选中项的索引值<br>  $(‘select#sel’).get(0).selectedIndex;</li>\n<li>3.获取当前option的最大索引值<br>  $(‘select#sel option:last’).attr(“index”)</li>\n<li>4.获取DropdownList的长度<br><code>$(&#39;select#sel&#39;)[0].options.length;</code>或者<code>$(&#39;select#sel&#39;).get(0).options.length;</code></li>\n<li>5.设置第一个option为选中值<br><code>$(&#39;select#sel option:first&#39;).attr(&#39;selected&#39;,&#39;true&#39;)</code>或者<code>$(&#39;select#sel&#39;)[0].selectedIndex = 0;</code></li>\n</ul>\n"},{"title":"从输入url到页面加载完成中发生的事情","_content":"## 一个页面从输入URL到页面加载显示完成，这个过程都发生什么？\n### 1.url分割\n输入url之后，浏览器会把url分割成几个部分，包括协议，网络地址，资源路径，端口等；  \n### 2.域名解析 \n判断网络地址是不是ip，如果是ip的话，向该ip地址发起http请求，如果网络地址是域名的话，进行DNS解析的步骤：  \n\n* （1）本机向本地dns服务器发起DNS解析请求，本地服务器首先检查本地缓存中是否存在请求的域名对应的ip地址，（这里的缓存查看顺序为从浏览器缓存开始，到系统缓存，再到路由器缓存）有的话直接返回，没有dns缓存的话进行下一步；  \n*  （2）本地dns服务器向全球13个根域名服务器中的一台发送dns查询请求，根服务器会返回顶级域名服务器的ip（如果有的话）给本地dns服务器；\n*  （3）本地dns服务器得到顶级域名服务器的IP地址之后， 向顶级域名服务器发送dns查询请求，顶级域名服务器会返回域名所对应的权威dns服务器的ip地址（如果有的话）给本地dns服务器；\n*  （4）本地dns服务器根据得到的权威dns域名服务器的ip向此权威dns域名服务器发起dns查询请求，权威dns服务器会返回查找的域名的ip地址给本地dns服务器（如果有的话）。  \n当然这些都是建立在本地dns没有根dns服务器，顶级dns服务器以及权威dns服务器的dns缓存的情况下的，如果有上述的缓存，可能会跳过一些步骤。\n### 3.确定端口  \n如果输入的url没有著名端口的话，浏览器发送http请求是会使用默认端口，如http连接的默认端口是80。如果url中定义了端口，就会按照定义的端口进行连接；  \n### 4.浏览器向服务器发送一个HTTP请求  \n#### （1）在发送http缓存之前，首先客户端要与服务器建立TCP连接（三次握手）:  \n* SYN_SEND 客户端发送一个带SYN标志的TCP报文到服务器。这是三次握手过程中的报文1； \n* SYN_RECV 服务器端回应客户端，这是三次握手中的第2个报文，这个报文同时带ACK标志(表示服务器准备好了数据通信)和SYN标志。因为它表示对刚才客户端SYN报文的回应；同时又标志SYN给客户端，询问客户端是否准备好数据通讯；内核在收到最后一个ACK后，accept会返回；\n* ESTABLISH 客户端必须再次回应服务器端一个ACK报文（表示客户端也准备好了数据通信），这是报文段3；  \n这时就成功建立了TCP连接.  \n#### （2）客户端向服务器发送命令请求\n一旦建立了TCP连接，Web浏览器就会向Web服务器发送请求命令。例如：GET/sample/hello.jsp HTTP/1.1。\n#### （3）浏览器发送请求头信息\n浏览器发送其请求命令之后，还要以头信息的形式向Web服务器发送一些别的信息，之后浏览器发送了一空白行来通知服务器，它已经结束了该头信息的发送。\n#### （4）服务器响应\n客户机向服务器发出请求后，服务器会客户机回送应答， HTTP/1.1 200 OK ，应答的第一部分是协议的版本号和应答状态码。  \n#### （5）服务器应对应答头信息\n正如客户端会随同请求发送关于自身的信息一样，服务器也会随同应答向用户发送关于它自己的数据及被请求的文档。\n#### （6）服务器向浏览器发送数据\nWeb服务器向浏览器发送头信息后，它会发送一个空白行来表示头信息的发送到此为结束，接着，它就以Content-Type应答头信息所描述的格式发送用户所请求的实际数据。\n#### （7）关闭TCP链接\n一般来说，服务器向客户端发送数据之后会关闭tcp连接，如果过浏览器发送的头信息中加入了`Connection:keep-alive  `之后，就会一直保持连接的打开状态。\n### 5.浏览器根据得到的数据，开始进行网页的加载，解析，渲染过程  \n\n\n#### 加载\n加载是指获取HTML/SVG/XHTML，CSS和JavaScript的过程。加载过程中遇到外部css文件，浏览器另外发出一个请求，来获取css文件。遇到图片资源，浏览器也会另外发出一个请求，来获取图片资源。这是异步请求，并不会影响html文档进行加载，但是当文档加载过程中遇到js文件，html文档会挂起渲染（加载解析渲染同步）的线程，不仅要等待文档中js文件加载完毕，还要等待解析执行完毕，才可以恢复html文档的渲染线程。虽然css文件的加载不影响js文件的加载，但是却影响js文件的执行，即使js文件内只有一行代码，也会造成阻塞。\n#### 解析  \n* 解析HTML/SVG/XHTML来产生一个DOM tree，dom tree是由dom元素及属性节点组成，树的根是document对象；\n* 解析CSS来生成CSS rule tree，包含css规则，该规则包含选择器和声明对象；\n* 解析JavaScript脚本，通过DOM API 和 CSSOM API 来操作DOM tree 和 CSS rule tree。\n\n#### 渲染\n即为构建渲染树的过程，是原来DOM树的可视化表示，构建这棵树是为了以正确的顺序绘制文档内容。\n##### 渲染顺序\n* 1.渲染的顺序也是从上到下；\n* 2.在渲染到页面的某一部分时，其上面的所有部分都已经下载完成；\n* 3.如果遇到语义解释性的标签嵌入文件（JS脚本，CSS样式），会进行加载和解析，解析过程中，停止页面所有往下元素的加载；\n* 4.样式表在加载完成后，将和以前加载的所有样式表一起进行解析，解析完成后，将对此前所有元素（含以前已经渲染的）重新进行渲染；\n* 5.JS、CSS中如有重定义，后定义函数将覆盖前定义函数。\n\n##### JavaScript的加载\nJavaScript加载后马上执行，而且执行时会阻塞页面后续的内容（包括页面的渲染、其它资源的下载）。于是，如果有多个js文件被引入，那么对于浏览器来说，这些js文件被被串行地载入，并依次执行。因为javascript可能会来操作HTML文档的DOM树，所以，浏览器一般都不会像并行下载css文件并行下载js文件。因此JavaScript无法操作此JavaScript之后的dom元素。\n\n\n\n\n\n\n\n  \n","source":"_posts/2017.05.23.md","raw":"---\ntitle: 从输入url到页面加载完成中发生的事情\ntags: [dns,http,tcp/ip]\ncategories: 知识 \n---\n## 一个页面从输入URL到页面加载显示完成，这个过程都发生什么？\n### 1.url分割\n输入url之后，浏览器会把url分割成几个部分，包括协议，网络地址，资源路径，端口等；  \n### 2.域名解析 \n判断网络地址是不是ip，如果是ip的话，向该ip地址发起http请求，如果网络地址是域名的话，进行DNS解析的步骤：  \n\n* （1）本机向本地dns服务器发起DNS解析请求，本地服务器首先检查本地缓存中是否存在请求的域名对应的ip地址，（这里的缓存查看顺序为从浏览器缓存开始，到系统缓存，再到路由器缓存）有的话直接返回，没有dns缓存的话进行下一步；  \n*  （2）本地dns服务器向全球13个根域名服务器中的一台发送dns查询请求，根服务器会返回顶级域名服务器的ip（如果有的话）给本地dns服务器；\n*  （3）本地dns服务器得到顶级域名服务器的IP地址之后， 向顶级域名服务器发送dns查询请求，顶级域名服务器会返回域名所对应的权威dns服务器的ip地址（如果有的话）给本地dns服务器；\n*  （4）本地dns服务器根据得到的权威dns域名服务器的ip向此权威dns域名服务器发起dns查询请求，权威dns服务器会返回查找的域名的ip地址给本地dns服务器（如果有的话）。  \n当然这些都是建立在本地dns没有根dns服务器，顶级dns服务器以及权威dns服务器的dns缓存的情况下的，如果有上述的缓存，可能会跳过一些步骤。\n### 3.确定端口  \n如果输入的url没有著名端口的话，浏览器发送http请求是会使用默认端口，如http连接的默认端口是80。如果url中定义了端口，就会按照定义的端口进行连接；  \n### 4.浏览器向服务器发送一个HTTP请求  \n#### （1）在发送http缓存之前，首先客户端要与服务器建立TCP连接（三次握手）:  \n* SYN_SEND 客户端发送一个带SYN标志的TCP报文到服务器。这是三次握手过程中的报文1； \n* SYN_RECV 服务器端回应客户端，这是三次握手中的第2个报文，这个报文同时带ACK标志(表示服务器准备好了数据通信)和SYN标志。因为它表示对刚才客户端SYN报文的回应；同时又标志SYN给客户端，询问客户端是否准备好数据通讯；内核在收到最后一个ACK后，accept会返回；\n* ESTABLISH 客户端必须再次回应服务器端一个ACK报文（表示客户端也准备好了数据通信），这是报文段3；  \n这时就成功建立了TCP连接.  \n#### （2）客户端向服务器发送命令请求\n一旦建立了TCP连接，Web浏览器就会向Web服务器发送请求命令。例如：GET/sample/hello.jsp HTTP/1.1。\n#### （3）浏览器发送请求头信息\n浏览器发送其请求命令之后，还要以头信息的形式向Web服务器发送一些别的信息，之后浏览器发送了一空白行来通知服务器，它已经结束了该头信息的发送。\n#### （4）服务器响应\n客户机向服务器发出请求后，服务器会客户机回送应答， HTTP/1.1 200 OK ，应答的第一部分是协议的版本号和应答状态码。  \n#### （5）服务器应对应答头信息\n正如客户端会随同请求发送关于自身的信息一样，服务器也会随同应答向用户发送关于它自己的数据及被请求的文档。\n#### （6）服务器向浏览器发送数据\nWeb服务器向浏览器发送头信息后，它会发送一个空白行来表示头信息的发送到此为结束，接着，它就以Content-Type应答头信息所描述的格式发送用户所请求的实际数据。\n#### （7）关闭TCP链接\n一般来说，服务器向客户端发送数据之后会关闭tcp连接，如果过浏览器发送的头信息中加入了`Connection:keep-alive  `之后，就会一直保持连接的打开状态。\n### 5.浏览器根据得到的数据，开始进行网页的加载，解析，渲染过程  \n\n\n#### 加载\n加载是指获取HTML/SVG/XHTML，CSS和JavaScript的过程。加载过程中遇到外部css文件，浏览器另外发出一个请求，来获取css文件。遇到图片资源，浏览器也会另外发出一个请求，来获取图片资源。这是异步请求，并不会影响html文档进行加载，但是当文档加载过程中遇到js文件，html文档会挂起渲染（加载解析渲染同步）的线程，不仅要等待文档中js文件加载完毕，还要等待解析执行完毕，才可以恢复html文档的渲染线程。虽然css文件的加载不影响js文件的加载，但是却影响js文件的执行，即使js文件内只有一行代码，也会造成阻塞。\n#### 解析  \n* 解析HTML/SVG/XHTML来产生一个DOM tree，dom tree是由dom元素及属性节点组成，树的根是document对象；\n* 解析CSS来生成CSS rule tree，包含css规则，该规则包含选择器和声明对象；\n* 解析JavaScript脚本，通过DOM API 和 CSSOM API 来操作DOM tree 和 CSS rule tree。\n\n#### 渲染\n即为构建渲染树的过程，是原来DOM树的可视化表示，构建这棵树是为了以正确的顺序绘制文档内容。\n##### 渲染顺序\n* 1.渲染的顺序也是从上到下；\n* 2.在渲染到页面的某一部分时，其上面的所有部分都已经下载完成；\n* 3.如果遇到语义解释性的标签嵌入文件（JS脚本，CSS样式），会进行加载和解析，解析过程中，停止页面所有往下元素的加载；\n* 4.样式表在加载完成后，将和以前加载的所有样式表一起进行解析，解析完成后，将对此前所有元素（含以前已经渲染的）重新进行渲染；\n* 5.JS、CSS中如有重定义，后定义函数将覆盖前定义函数。\n\n##### JavaScript的加载\nJavaScript加载后马上执行，而且执行时会阻塞页面后续的内容（包括页面的渲染、其它资源的下载）。于是，如果有多个js文件被引入，那么对于浏览器来说，这些js文件被被串行地载入，并依次执行。因为javascript可能会来操作HTML文档的DOM树，所以，浏览器一般都不会像并行下载css文件并行下载js文件。因此JavaScript无法操作此JavaScript之后的dom元素。\n\n\n\n\n\n\n\n  \n","slug":"2017.05.23","published":1,"date":"2017-05-23T15:16:46.000Z","updated":"2017-05-23T15:16:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwvh2592000rw39zb9igczmr","content":"<h2 id=\"一个页面从输入URL到页面加载显示完成，这个过程都发生什么？\"><a href=\"#一个页面从输入URL到页面加载显示完成，这个过程都发生什么？\" class=\"headerlink\" title=\"一个页面从输入URL到页面加载显示完成，这个过程都发生什么？\"></a>一个页面从输入URL到页面加载显示完成，这个过程都发生什么？</h2><h3 id=\"1-url分割\"><a href=\"#1-url分割\" class=\"headerlink\" title=\"1.url分割\"></a>1.url分割</h3><p>输入url之后，浏览器会把url分割成几个部分，包括协议，网络地址，资源路径，端口等；  </p>\n<h3 id=\"2-域名解析\"><a href=\"#2-域名解析\" class=\"headerlink\" title=\"2.域名解析\"></a>2.域名解析</h3><p>判断网络地址是不是ip，如果是ip的话，向该ip地址发起http请求，如果网络地址是域名的话，进行DNS解析的步骤：  </p>\n<ul>\n<li>（1）本机向本地dns服务器发起DNS解析请求，本地服务器首先检查本地缓存中是否存在请求的域名对应的ip地址，（这里的缓存查看顺序为从浏览器缓存开始，到系统缓存，再到路由器缓存）有的话直接返回，没有dns缓存的话进行下一步；  </li>\n<li>（2）本地dns服务器向全球13个根域名服务器中的一台发送dns查询请求，根服务器会返回顶级域名服务器的ip（如果有的话）给本地dns服务器；</li>\n<li>（3）本地dns服务器得到顶级域名服务器的IP地址之后， 向顶级域名服务器发送dns查询请求，顶级域名服务器会返回域名所对应的权威dns服务器的ip地址（如果有的话）给本地dns服务器；</li>\n<li>（4）本地dns服务器根据得到的权威dns域名服务器的ip向此权威dns域名服务器发起dns查询请求，权威dns服务器会返回查找的域名的ip地址给本地dns服务器（如果有的话）。<br>当然这些都是建立在本地dns没有根dns服务器，顶级dns服务器以及权威dns服务器的dns缓存的情况下的，如果有上述的缓存，可能会跳过一些步骤。<h3 id=\"3-确定端口\"><a href=\"#3-确定端口\" class=\"headerlink\" title=\"3.确定端口\"></a>3.确定端口</h3>如果输入的url没有著名端口的话，浏览器发送http请求是会使用默认端口，如http连接的默认端口是80。如果url中定义了端口，就会按照定义的端口进行连接；  <h3 id=\"4-浏览器向服务器发送一个HTTP请求\"><a href=\"#4-浏览器向服务器发送一个HTTP请求\" class=\"headerlink\" title=\"4.浏览器向服务器发送一个HTTP请求\"></a>4.浏览器向服务器发送一个HTTP请求</h3><h4 id=\"（1）在发送http缓存之前，首先客户端要与服务器建立TCP连接（三次握手）\"><a href=\"#（1）在发送http缓存之前，首先客户端要与服务器建立TCP连接（三次握手）\" class=\"headerlink\" title=\"（1）在发送http缓存之前，首先客户端要与服务器建立TCP连接（三次握手）:\"></a>（1）在发送http缓存之前，首先客户端要与服务器建立TCP连接（三次握手）:</h4></li>\n<li>SYN_SEND 客户端发送一个带SYN标志的TCP报文到服务器。这是三次握手过程中的报文1； </li>\n<li>SYN_RECV 服务器端回应客户端，这是三次握手中的第2个报文，这个报文同时带ACK标志(表示服务器准备好了数据通信)和SYN标志。因为它表示对刚才客户端SYN报文的回应；同时又标志SYN给客户端，询问客户端是否准备好数据通讯；内核在收到最后一个ACK后，accept会返回；</li>\n<li>ESTABLISH 客户端必须再次回应服务器端一个ACK报文（表示客户端也准备好了数据通信），这是报文段3；<br>这时就成功建立了TCP连接.  <h4 id=\"（2）客户端向服务器发送命令请求\"><a href=\"#（2）客户端向服务器发送命令请求\" class=\"headerlink\" title=\"（2）客户端向服务器发送命令请求\"></a>（2）客户端向服务器发送命令请求</h4>一旦建立了TCP连接，Web浏览器就会向Web服务器发送请求命令。例如：GET/sample/hello.jsp HTTP/1.1。<h4 id=\"（3）浏览器发送请求头信息\"><a href=\"#（3）浏览器发送请求头信息\" class=\"headerlink\" title=\"（3）浏览器发送请求头信息\"></a>（3）浏览器发送请求头信息</h4>浏览器发送其请求命令之后，还要以头信息的形式向Web服务器发送一些别的信息，之后浏览器发送了一空白行来通知服务器，它已经结束了该头信息的发送。<h4 id=\"（4）服务器响应\"><a href=\"#（4）服务器响应\" class=\"headerlink\" title=\"（4）服务器响应\"></a>（4）服务器响应</h4>客户机向服务器发出请求后，服务器会客户机回送应答， HTTP/1.1 200 OK ，应答的第一部分是协议的版本号和应答状态码。  <h4 id=\"（5）服务器应对应答头信息\"><a href=\"#（5）服务器应对应答头信息\" class=\"headerlink\" title=\"（5）服务器应对应答头信息\"></a>（5）服务器应对应答头信息</h4>正如客户端会随同请求发送关于自身的信息一样，服务器也会随同应答向用户发送关于它自己的数据及被请求的文档。<h4 id=\"（6）服务器向浏览器发送数据\"><a href=\"#（6）服务器向浏览器发送数据\" class=\"headerlink\" title=\"（6）服务器向浏览器发送数据\"></a>（6）服务器向浏览器发送数据</h4>Web服务器向浏览器发送头信息后，它会发送一个空白行来表示头信息的发送到此为结束，接着，它就以Content-Type应答头信息所描述的格式发送用户所请求的实际数据。<h4 id=\"（7）关闭TCP链接\"><a href=\"#（7）关闭TCP链接\" class=\"headerlink\" title=\"（7）关闭TCP链接\"></a>（7）关闭TCP链接</h4>一般来说，服务器向客户端发送数据之后会关闭tcp连接，如果过浏览器发送的头信息中加入了<code>Connection:keep-alive</code>之后，就会一直保持连接的打开状态。<h3 id=\"5-浏览器根据得到的数据，开始进行网页的加载，解析，渲染过程\"><a href=\"#5-浏览器根据得到的数据，开始进行网页的加载，解析，渲染过程\" class=\"headerlink\" title=\"5.浏览器根据得到的数据，开始进行网页的加载，解析，渲染过程\"></a>5.浏览器根据得到的数据，开始进行网页的加载，解析，渲染过程</h3></li>\n</ul>\n<h4 id=\"加载\"><a href=\"#加载\" class=\"headerlink\" title=\"加载\"></a>加载</h4><p>加载是指获取HTML/SVG/XHTML，CSS和JavaScript的过程。加载过程中遇到外部css文件，浏览器另外发出一个请求，来获取css文件。遇到图片资源，浏览器也会另外发出一个请求，来获取图片资源。这是异步请求，并不会影响html文档进行加载，但是当文档加载过程中遇到js文件，html文档会挂起渲染（加载解析渲染同步）的线程，不仅要等待文档中js文件加载完毕，还要等待解析执行完毕，才可以恢复html文档的渲染线程。虽然css文件的加载不影响js文件的加载，但是却影响js文件的执行，即使js文件内只有一行代码，也会造成阻塞。</p>\n<h4 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h4><ul>\n<li>解析HTML/SVG/XHTML来产生一个DOM tree，dom tree是由dom元素及属性节点组成，树的根是document对象；</li>\n<li>解析CSS来生成CSS rule tree，包含css规则，该规则包含选择器和声明对象；</li>\n<li>解析JavaScript脚本，通过DOM API 和 CSSOM API 来操作DOM tree 和 CSS rule tree。</li>\n</ul>\n<h4 id=\"渲染\"><a href=\"#渲染\" class=\"headerlink\" title=\"渲染\"></a>渲染</h4><p>即为构建渲染树的过程，是原来DOM树的可视化表示，构建这棵树是为了以正确的顺序绘制文档内容。</p>\n<h5 id=\"渲染顺序\"><a href=\"#渲染顺序\" class=\"headerlink\" title=\"渲染顺序\"></a>渲染顺序</h5><ul>\n<li>1.渲染的顺序也是从上到下；</li>\n<li>2.在渲染到页面的某一部分时，其上面的所有部分都已经下载完成；</li>\n<li>3.如果遇到语义解释性的标签嵌入文件（JS脚本，CSS样式），会进行加载和解析，解析过程中，停止页面所有往下元素的加载；</li>\n<li>4.样式表在加载完成后，将和以前加载的所有样式表一起进行解析，解析完成后，将对此前所有元素（含以前已经渲染的）重新进行渲染；</li>\n<li>5.JS、CSS中如有重定义，后定义函数将覆盖前定义函数。</li>\n</ul>\n<h5 id=\"JavaScript的加载\"><a href=\"#JavaScript的加载\" class=\"headerlink\" title=\"JavaScript的加载\"></a>JavaScript的加载</h5><p>JavaScript加载后马上执行，而且执行时会阻塞页面后续的内容（包括页面的渲染、其它资源的下载）。于是，如果有多个js文件被引入，那么对于浏览器来说，这些js文件被被串行地载入，并依次执行。因为javascript可能会来操作HTML文档的DOM树，所以，浏览器一般都不会像并行下载css文件并行下载js文件。因此JavaScript无法操作此JavaScript之后的dom元素。</p>\n","excerpt":"","more":"<h2 id=\"一个页面从输入URL到页面加载显示完成，这个过程都发生什么？\"><a href=\"#一个页面从输入URL到页面加载显示完成，这个过程都发生什么？\" class=\"headerlink\" title=\"一个页面从输入URL到页面加载显示完成，这个过程都发生什么？\"></a>一个页面从输入URL到页面加载显示完成，这个过程都发生什么？</h2><h3 id=\"1-url分割\"><a href=\"#1-url分割\" class=\"headerlink\" title=\"1.url分割\"></a>1.url分割</h3><p>输入url之后，浏览器会把url分割成几个部分，包括协议，网络地址，资源路径，端口等；  </p>\n<h3 id=\"2-域名解析\"><a href=\"#2-域名解析\" class=\"headerlink\" title=\"2.域名解析\"></a>2.域名解析</h3><p>判断网络地址是不是ip，如果是ip的话，向该ip地址发起http请求，如果网络地址是域名的话，进行DNS解析的步骤：  </p>\n<ul>\n<li>（1）本机向本地dns服务器发起DNS解析请求，本地服务器首先检查本地缓存中是否存在请求的域名对应的ip地址，（这里的缓存查看顺序为从浏览器缓存开始，到系统缓存，再到路由器缓存）有的话直接返回，没有dns缓存的话进行下一步；  </li>\n<li>（2）本地dns服务器向全球13个根域名服务器中的一台发送dns查询请求，根服务器会返回顶级域名服务器的ip（如果有的话）给本地dns服务器；</li>\n<li>（3）本地dns服务器得到顶级域名服务器的IP地址之后， 向顶级域名服务器发送dns查询请求，顶级域名服务器会返回域名所对应的权威dns服务器的ip地址（如果有的话）给本地dns服务器；</li>\n<li>（4）本地dns服务器根据得到的权威dns域名服务器的ip向此权威dns域名服务器发起dns查询请求，权威dns服务器会返回查找的域名的ip地址给本地dns服务器（如果有的话）。<br>当然这些都是建立在本地dns没有根dns服务器，顶级dns服务器以及权威dns服务器的dns缓存的情况下的，如果有上述的缓存，可能会跳过一些步骤。<h3 id=\"3-确定端口\"><a href=\"#3-确定端口\" class=\"headerlink\" title=\"3.确定端口\"></a>3.确定端口</h3>如果输入的url没有著名端口的话，浏览器发送http请求是会使用默认端口，如http连接的默认端口是80。如果url中定义了端口，就会按照定义的端口进行连接；  <h3 id=\"4-浏览器向服务器发送一个HTTP请求\"><a href=\"#4-浏览器向服务器发送一个HTTP请求\" class=\"headerlink\" title=\"4.浏览器向服务器发送一个HTTP请求\"></a>4.浏览器向服务器发送一个HTTP请求</h3><h4 id=\"（1）在发送http缓存之前，首先客户端要与服务器建立TCP连接（三次握手）\"><a href=\"#（1）在发送http缓存之前，首先客户端要与服务器建立TCP连接（三次握手）\" class=\"headerlink\" title=\"（1）在发送http缓存之前，首先客户端要与服务器建立TCP连接（三次握手）:\"></a>（1）在发送http缓存之前，首先客户端要与服务器建立TCP连接（三次握手）:</h4></li>\n<li>SYN_SEND 客户端发送一个带SYN标志的TCP报文到服务器。这是三次握手过程中的报文1； </li>\n<li>SYN_RECV 服务器端回应客户端，这是三次握手中的第2个报文，这个报文同时带ACK标志(表示服务器准备好了数据通信)和SYN标志。因为它表示对刚才客户端SYN报文的回应；同时又标志SYN给客户端，询问客户端是否准备好数据通讯；内核在收到最后一个ACK后，accept会返回；</li>\n<li>ESTABLISH 客户端必须再次回应服务器端一个ACK报文（表示客户端也准备好了数据通信），这是报文段3；<br>这时就成功建立了TCP连接.  <h4 id=\"（2）客户端向服务器发送命令请求\"><a href=\"#（2）客户端向服务器发送命令请求\" class=\"headerlink\" title=\"（2）客户端向服务器发送命令请求\"></a>（2）客户端向服务器发送命令请求</h4>一旦建立了TCP连接，Web浏览器就会向Web服务器发送请求命令。例如：GET/sample/hello.jsp HTTP/1.1。<h4 id=\"（3）浏览器发送请求头信息\"><a href=\"#（3）浏览器发送请求头信息\" class=\"headerlink\" title=\"（3）浏览器发送请求头信息\"></a>（3）浏览器发送请求头信息</h4>浏览器发送其请求命令之后，还要以头信息的形式向Web服务器发送一些别的信息，之后浏览器发送了一空白行来通知服务器，它已经结束了该头信息的发送。<h4 id=\"（4）服务器响应\"><a href=\"#（4）服务器响应\" class=\"headerlink\" title=\"（4）服务器响应\"></a>（4）服务器响应</h4>客户机向服务器发出请求后，服务器会客户机回送应答， HTTP/1.1 200 OK ，应答的第一部分是协议的版本号和应答状态码。  <h4 id=\"（5）服务器应对应答头信息\"><a href=\"#（5）服务器应对应答头信息\" class=\"headerlink\" title=\"（5）服务器应对应答头信息\"></a>（5）服务器应对应答头信息</h4>正如客户端会随同请求发送关于自身的信息一样，服务器也会随同应答向用户发送关于它自己的数据及被请求的文档。<h4 id=\"（6）服务器向浏览器发送数据\"><a href=\"#（6）服务器向浏览器发送数据\" class=\"headerlink\" title=\"（6）服务器向浏览器发送数据\"></a>（6）服务器向浏览器发送数据</h4>Web服务器向浏览器发送头信息后，它会发送一个空白行来表示头信息的发送到此为结束，接着，它就以Content-Type应答头信息所描述的格式发送用户所请求的实际数据。<h4 id=\"（7）关闭TCP链接\"><a href=\"#（7）关闭TCP链接\" class=\"headerlink\" title=\"（7）关闭TCP链接\"></a>（7）关闭TCP链接</h4>一般来说，服务器向客户端发送数据之后会关闭tcp连接，如果过浏览器发送的头信息中加入了<code>Connection:keep-alive</code>之后，就会一直保持连接的打开状态。<h3 id=\"5-浏览器根据得到的数据，开始进行网页的加载，解析，渲染过程\"><a href=\"#5-浏览器根据得到的数据，开始进行网页的加载，解析，渲染过程\" class=\"headerlink\" title=\"5.浏览器根据得到的数据，开始进行网页的加载，解析，渲染过程\"></a>5.浏览器根据得到的数据，开始进行网页的加载，解析，渲染过程</h3></li>\n</ul>\n<h4 id=\"加载\"><a href=\"#加载\" class=\"headerlink\" title=\"加载\"></a>加载</h4><p>加载是指获取HTML/SVG/XHTML，CSS和JavaScript的过程。加载过程中遇到外部css文件，浏览器另外发出一个请求，来获取css文件。遇到图片资源，浏览器也会另外发出一个请求，来获取图片资源。这是异步请求，并不会影响html文档进行加载，但是当文档加载过程中遇到js文件，html文档会挂起渲染（加载解析渲染同步）的线程，不仅要等待文档中js文件加载完毕，还要等待解析执行完毕，才可以恢复html文档的渲染线程。虽然css文件的加载不影响js文件的加载，但是却影响js文件的执行，即使js文件内只有一行代码，也会造成阻塞。</p>\n<h4 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h4><ul>\n<li>解析HTML/SVG/XHTML来产生一个DOM tree，dom tree是由dom元素及属性节点组成，树的根是document对象；</li>\n<li>解析CSS来生成CSS rule tree，包含css规则，该规则包含选择器和声明对象；</li>\n<li>解析JavaScript脚本，通过DOM API 和 CSSOM API 来操作DOM tree 和 CSS rule tree。</li>\n</ul>\n<h4 id=\"渲染\"><a href=\"#渲染\" class=\"headerlink\" title=\"渲染\"></a>渲染</h4><p>即为构建渲染树的过程，是原来DOM树的可视化表示，构建这棵树是为了以正确的顺序绘制文档内容。</p>\n<h5 id=\"渲染顺序\"><a href=\"#渲染顺序\" class=\"headerlink\" title=\"渲染顺序\"></a>渲染顺序</h5><ul>\n<li>1.渲染的顺序也是从上到下；</li>\n<li>2.在渲染到页面的某一部分时，其上面的所有部分都已经下载完成；</li>\n<li>3.如果遇到语义解释性的标签嵌入文件（JS脚本，CSS样式），会进行加载和解析，解析过程中，停止页面所有往下元素的加载；</li>\n<li>4.样式表在加载完成后，将和以前加载的所有样式表一起进行解析，解析完成后，将对此前所有元素（含以前已经渲染的）重新进行渲染；</li>\n<li>5.JS、CSS中如有重定义，后定义函数将覆盖前定义函数。</li>\n</ul>\n<h5 id=\"JavaScript的加载\"><a href=\"#JavaScript的加载\" class=\"headerlink\" title=\"JavaScript的加载\"></a>JavaScript的加载</h5><p>JavaScript加载后马上执行，而且执行时会阻塞页面后续的内容（包括页面的渲染、其它资源的下载）。于是，如果有多个js文件被引入，那么对于浏览器来说，这些js文件被被串行地载入，并依次执行。因为javascript可能会来操作HTML文档的DOM树，所以，浏览器一般都不会像并行下载css文件并行下载js文件。因此JavaScript无法操作此JavaScript之后的dom元素。</p>\n"},{"title":"Vue.js——vue-resource","_content":"# 概述\nvue-resource是Vue.js的一款插件，它可以通过XMLHttpRequest或JSONP发起请求并处理响应。也就是说，$.ajax能做的事情，vue-resource插件一样也能做到，而且vue-resource的API更为简洁。另外，vue-resource还提供了非常有用的inteceptor功能，使用inteceptor可以在请求前和请求后附加一些行为，比如使用inteceptor在ajax请求时显示loading界面。  \n# vue-resource特点\n## 体积小\nvue-resource非常小巧，在压缩以后只有大约12KB，服务端启用gzip压缩后只有4.5KB大小，这远比jQuery的体积要小得多。\n## 支持主流浏览器\n和Vue.js一样，vue-resource除了不支持IE 9以下的浏览器，其他主流的浏览器都支持。\n## 支持Promise API 和 URL Templates\nPromise是ES6的特性，Promise的中文含义为“先知”，Promise对象用于异步计算。\nURI Templates表示URI模板，有些类似于ASP.NET MVC的路由模板。\n## 支持拦截器\n拦截器是全局的，拦截器可以在请求发送前和发送请求后做一些处理。\n拦截器在一些场景下会非常有用，比如请求发送前在headers中设置access_token，或者在请求失败时，提供共通的处理方式。\n# vue-resource 使用\n## 引入vue-resource\n    <script src=\"js/vue.js\"></script>\n    <script src=\"js/vue-resource.js\"></script>  \n## 基本语法\n引入vue-resource后，可以基于全局的Vue对象使用http，也可以基于某个Vue实例使用http。  \n\n\n    // 基于全局Vue对象使用http\n    Vue.http.get('/someUrl', [options]).then(successCallback, errorCallback);\n    Vue.http.post('/someUrl', [body], [options]).then(successCallback, errorCallback);\n    \n    // 在一个Vue实例内使用$http\n    this.$http.get('/someUrl', [options]).then(successCallback, errorCallback);\n    this.$http.post('/someUrl', [body], [options]).then(successCallback, errorCallback);  \n在发送请求后，使用then方法来处理响应结果，then方法有两个参数，第一个参数是响应成功时的回调函数，第二个参数是响应失败时的回调函数。\n\nthen方法的回调函数也有两种写法，第一种是传统的函数写法，第二种是更为简洁的ES 6的Lambda写法：  \n    // 传统写法\n    this.$http.get('/someUrl', [options]).then(function(response){\n    // 响应成功回调\n    }, function(response){\n    // 响应错误回调\n    });\n    \n    \n    // Lambda写法\n    this.$http.get('/someUrl', [options]).then((response) => {\n    // 响应成功回调\n    }, (response) => {\n    // 响应错误回调\n    });\n## 支持的HTTP方法\nvue-resource的请求API是按照REST风格设计的，它提供了7种请求API：   \n \n* get(url, [options])\n* head(url, [options])\n* delete(url, [options])\n* jsonp(url, [options])\n* post(url, [body], [options])\n* put(url, [body], [options])\n* patch(url, [body], [options])  \n\n除了jsonp以外，另外6种的API名称是标准的HTTP方法。当服务端使用REST API时，客户端的编码风格和服务端的编码风格近乎一致，这可以减少前端和后端开发人员的沟通成本。  \n## options 对象  \nresponse对象包含以下属性：  \n![](http://onep1caa3.bkt.clouddn.com/04.25.1.png)  \n# CURD 示例\n## get 请求\n    var demo = new Vue({\n    el: '#app',\n    data: {\n    gridColumns: ['customerId', 'companyName', 'contactName', 'phone'],\n    gridData: [],\n    apiUrl: 'http://211.149.193.19:8080/api/customers'\n    },\n    ready: function() {\n    this.getCustomers()\n    },\n    methods: {\n    getCustomers: function() {\n    this.$http.get(this.apiUrl)\n    .then((response) => {\n    this.$set('gridData', response.data)\n    })\n    .catch(function(response) {\n    console.log(response)\n    })\n    }\n    }\n    })  \n这段程序的then方法只提供了successCallback，而省略了errorCallback。\ncatch方法用于捕捉程序的异常，catch方法和errorCallback是不同的，errorCallback只在响应失败时调用，而catch则是在整个请求到响应过程中，只要程序出错了就会被调用。\n\n在then方法的回调函数内，你也可以直接使用this，this仍然是指向Vue实例的： \n \n    getCustomers: function() {\n    this.$http.get(this.apiUrl)\n    .then((response) => {\n    this.$set('gridData', response.data)\n    })\n    .catch(function(response) {\n    console.log(response)\n    })\n    }  \n## JSONP 请求\n    getCustomers: function() {\n    this.$http.jsonp(this.apiUrl).then(function(response){\n    this.$set('gridData', response.data)\n    })\n    }  \n## POST 请求\n    var demo = new Vue({\n    el: '#app',\n    data: {\n    show: false,\n    gridColumns: [{\n    name: 'customerId',\n    isKey: true\n    }, {\n    name: 'companyName'\n    }, {\n    name: 'contactName'\n    }, {\n    name: 'phone'\n    }],\n    gridData: [],\n    apiUrl: 'http://211.149.193.19:8080/api/customers',\n    item: {}\n    },\n    ready: function() {\n    this.getCustomers()\n    },\n    methods: {\n    closeDialog: function() {\n    this.show = false\n    },\n    getCustomers: function() {\n    var vm = this\n    vm.$http.get(vm.apiUrl)\n    .then((response) => {\n    vm.$set('gridData', response.data)\n    })\n    },\n    createCustomer: function() {\n    var vm = this\n    vm.$http.post(vm.apiUrl, vm.item)\n    .then((response) => {\n    vm.$set('item', {})\n    vm.getCustomers()\n    })\n    this.show = false\n    }\n    }\n    })  \n## PUT 请求\n    updateCustomer: function() {\n    var vm = this\n    vm.$http.put(this.apiUrl + '/' + vm.item.customerId, vm.item)\n    .then((response) => {\n    vm.getCustomers()\n    })\n    }  \n## DELETE 请求\n    deleteCustomer: function(customer){\n    var vm = this\n    vm.$http.delete(this.apiUrl + '/' + customer.customerId)\n    .then((response) => {\n    vm.getCustomers()\n    })\n    }  \n# 使用resource 请求  \nvue-resource提供了另外一种方式访问HTTP——resource服务，resource服务包含以下几种默认的action：  \n\n    get: {method: 'GET'},\n    save: {method: 'POST'},\n    query: {method: 'GET'},\n    update: {method: 'PUT'},\n    remove: {method: 'DELETE'},\n    delete: {method: 'DELETE'}  \nresource对象也有两种访问方式：  \n\n* 全局访问：Vue.resource\n* 实例访问：this.$resource  \n\n## GET 请求\n    getCustomers: function() {\n    \n    var resource = this.$resource(this.apiUrl)\n    vm = this\n    \n    resource.get()\n    .then((response) => {\n    vm.$set('gridData', response.data)\n    })\n    .catch(function(response) {\n    console.log(response)\n    })\n    }  \n## POST 请求\n    createCustomer: function() {\n    var resource = this.$resource(this.apiUrl)\n    vm = this\n    \n    resource.save(vm.apiUrl, vm.item)\n    .then((response) => {\n    vm.$set('item', {})\n    vm.getCustomers()\n    })\n    this.show = false\n    }  \n## PUT 请求\n    updateCustomer: function() {\n    var resource = this.$resource(this.apiUrl)\n    vm = this\n    \n    resource.update({ id: vm.item.customerId}, vm.item)\n    .then((response) => {\n    vm.getCustomers()\n    })\n    } \n## DELETE 请求\n    deleteCustomer: function(customer){\n    var resource = this.$resource(this.apiUrl)\n    vm = this\n    \n    resource.remove({ id: customer.customerId})\n    .then((response) => {\n    vm.getCustomers()\n    })\n    }  \n","source":"_posts/2017.04.25.vueresource.md","raw":"---\ntitle: Vue.js——vue-resource\ntags: [vue]\ncategories: 知识 \n---\n# 概述\nvue-resource是Vue.js的一款插件，它可以通过XMLHttpRequest或JSONP发起请求并处理响应。也就是说，$.ajax能做的事情，vue-resource插件一样也能做到，而且vue-resource的API更为简洁。另外，vue-resource还提供了非常有用的inteceptor功能，使用inteceptor可以在请求前和请求后附加一些行为，比如使用inteceptor在ajax请求时显示loading界面。  \n# vue-resource特点\n## 体积小\nvue-resource非常小巧，在压缩以后只有大约12KB，服务端启用gzip压缩后只有4.5KB大小，这远比jQuery的体积要小得多。\n## 支持主流浏览器\n和Vue.js一样，vue-resource除了不支持IE 9以下的浏览器，其他主流的浏览器都支持。\n## 支持Promise API 和 URL Templates\nPromise是ES6的特性，Promise的中文含义为“先知”，Promise对象用于异步计算。\nURI Templates表示URI模板，有些类似于ASP.NET MVC的路由模板。\n## 支持拦截器\n拦截器是全局的，拦截器可以在请求发送前和发送请求后做一些处理。\n拦截器在一些场景下会非常有用，比如请求发送前在headers中设置access_token，或者在请求失败时，提供共通的处理方式。\n# vue-resource 使用\n## 引入vue-resource\n    <script src=\"js/vue.js\"></script>\n    <script src=\"js/vue-resource.js\"></script>  \n## 基本语法\n引入vue-resource后，可以基于全局的Vue对象使用http，也可以基于某个Vue实例使用http。  \n\n\n    // 基于全局Vue对象使用http\n    Vue.http.get('/someUrl', [options]).then(successCallback, errorCallback);\n    Vue.http.post('/someUrl', [body], [options]).then(successCallback, errorCallback);\n    \n    // 在一个Vue实例内使用$http\n    this.$http.get('/someUrl', [options]).then(successCallback, errorCallback);\n    this.$http.post('/someUrl', [body], [options]).then(successCallback, errorCallback);  \n在发送请求后，使用then方法来处理响应结果，then方法有两个参数，第一个参数是响应成功时的回调函数，第二个参数是响应失败时的回调函数。\n\nthen方法的回调函数也有两种写法，第一种是传统的函数写法，第二种是更为简洁的ES 6的Lambda写法：  \n    // 传统写法\n    this.$http.get('/someUrl', [options]).then(function(response){\n    // 响应成功回调\n    }, function(response){\n    // 响应错误回调\n    });\n    \n    \n    // Lambda写法\n    this.$http.get('/someUrl', [options]).then((response) => {\n    // 响应成功回调\n    }, (response) => {\n    // 响应错误回调\n    });\n## 支持的HTTP方法\nvue-resource的请求API是按照REST风格设计的，它提供了7种请求API：   \n \n* get(url, [options])\n* head(url, [options])\n* delete(url, [options])\n* jsonp(url, [options])\n* post(url, [body], [options])\n* put(url, [body], [options])\n* patch(url, [body], [options])  \n\n除了jsonp以外，另外6种的API名称是标准的HTTP方法。当服务端使用REST API时，客户端的编码风格和服务端的编码风格近乎一致，这可以减少前端和后端开发人员的沟通成本。  \n## options 对象  \nresponse对象包含以下属性：  \n![](http://onep1caa3.bkt.clouddn.com/04.25.1.png)  \n# CURD 示例\n## get 请求\n    var demo = new Vue({\n    el: '#app',\n    data: {\n    gridColumns: ['customerId', 'companyName', 'contactName', 'phone'],\n    gridData: [],\n    apiUrl: 'http://211.149.193.19:8080/api/customers'\n    },\n    ready: function() {\n    this.getCustomers()\n    },\n    methods: {\n    getCustomers: function() {\n    this.$http.get(this.apiUrl)\n    .then((response) => {\n    this.$set('gridData', response.data)\n    })\n    .catch(function(response) {\n    console.log(response)\n    })\n    }\n    }\n    })  \n这段程序的then方法只提供了successCallback，而省略了errorCallback。\ncatch方法用于捕捉程序的异常，catch方法和errorCallback是不同的，errorCallback只在响应失败时调用，而catch则是在整个请求到响应过程中，只要程序出错了就会被调用。\n\n在then方法的回调函数内，你也可以直接使用this，this仍然是指向Vue实例的： \n \n    getCustomers: function() {\n    this.$http.get(this.apiUrl)\n    .then((response) => {\n    this.$set('gridData', response.data)\n    })\n    .catch(function(response) {\n    console.log(response)\n    })\n    }  \n## JSONP 请求\n    getCustomers: function() {\n    this.$http.jsonp(this.apiUrl).then(function(response){\n    this.$set('gridData', response.data)\n    })\n    }  \n## POST 请求\n    var demo = new Vue({\n    el: '#app',\n    data: {\n    show: false,\n    gridColumns: [{\n    name: 'customerId',\n    isKey: true\n    }, {\n    name: 'companyName'\n    }, {\n    name: 'contactName'\n    }, {\n    name: 'phone'\n    }],\n    gridData: [],\n    apiUrl: 'http://211.149.193.19:8080/api/customers',\n    item: {}\n    },\n    ready: function() {\n    this.getCustomers()\n    },\n    methods: {\n    closeDialog: function() {\n    this.show = false\n    },\n    getCustomers: function() {\n    var vm = this\n    vm.$http.get(vm.apiUrl)\n    .then((response) => {\n    vm.$set('gridData', response.data)\n    })\n    },\n    createCustomer: function() {\n    var vm = this\n    vm.$http.post(vm.apiUrl, vm.item)\n    .then((response) => {\n    vm.$set('item', {})\n    vm.getCustomers()\n    })\n    this.show = false\n    }\n    }\n    })  \n## PUT 请求\n    updateCustomer: function() {\n    var vm = this\n    vm.$http.put(this.apiUrl + '/' + vm.item.customerId, vm.item)\n    .then((response) => {\n    vm.getCustomers()\n    })\n    }  \n## DELETE 请求\n    deleteCustomer: function(customer){\n    var vm = this\n    vm.$http.delete(this.apiUrl + '/' + customer.customerId)\n    .then((response) => {\n    vm.getCustomers()\n    })\n    }  \n# 使用resource 请求  \nvue-resource提供了另外一种方式访问HTTP——resource服务，resource服务包含以下几种默认的action：  \n\n    get: {method: 'GET'},\n    save: {method: 'POST'},\n    query: {method: 'GET'},\n    update: {method: 'PUT'},\n    remove: {method: 'DELETE'},\n    delete: {method: 'DELETE'}  \nresource对象也有两种访问方式：  \n\n* 全局访问：Vue.resource\n* 实例访问：this.$resource  \n\n## GET 请求\n    getCustomers: function() {\n    \n    var resource = this.$resource(this.apiUrl)\n    vm = this\n    \n    resource.get()\n    .then((response) => {\n    vm.$set('gridData', response.data)\n    })\n    .catch(function(response) {\n    console.log(response)\n    })\n    }  \n## POST 请求\n    createCustomer: function() {\n    var resource = this.$resource(this.apiUrl)\n    vm = this\n    \n    resource.save(vm.apiUrl, vm.item)\n    .then((response) => {\n    vm.$set('item', {})\n    vm.getCustomers()\n    })\n    this.show = false\n    }  \n## PUT 请求\n    updateCustomer: function() {\n    var resource = this.$resource(this.apiUrl)\n    vm = this\n    \n    resource.update({ id: vm.item.customerId}, vm.item)\n    .then((response) => {\n    vm.getCustomers()\n    })\n    } \n## DELETE 请求\n    deleteCustomer: function(customer){\n    var resource = this.$resource(this.apiUrl)\n    vm = this\n    \n    resource.remove({ id: customer.customerId})\n    .then((response) => {\n    vm.getCustomers()\n    })\n    }  \n","slug":"2017.04.25.vueresource","published":1,"date":"2017-04-25T12:48:44.000Z","updated":"2017-04-25T12:48:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwvh2593000tw39zjqhv19be","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>vue-resource是Vue.js的一款插件，它可以通过XMLHttpRequest或JSONP发起请求并处理响应。也就是说，$.ajax能做的事情，vue-resource插件一样也能做到，而且vue-resource的API更为简洁。另外，vue-resource还提供了非常有用的inteceptor功能，使用inteceptor可以在请求前和请求后附加一些行为，比如使用inteceptor在ajax请求时显示loading界面。  </p>\n<h1 id=\"vue-resource特点\"><a href=\"#vue-resource特点\" class=\"headerlink\" title=\"vue-resource特点\"></a>vue-resource特点</h1><h2 id=\"体积小\"><a href=\"#体积小\" class=\"headerlink\" title=\"体积小\"></a>体积小</h2><p>vue-resource非常小巧，在压缩以后只有大约12KB，服务端启用gzip压缩后只有4.5KB大小，这远比jQuery的体积要小得多。</p>\n<h2 id=\"支持主流浏览器\"><a href=\"#支持主流浏览器\" class=\"headerlink\" title=\"支持主流浏览器\"></a>支持主流浏览器</h2><p>和Vue.js一样，vue-resource除了不支持IE 9以下的浏览器，其他主流的浏览器都支持。</p>\n<h2 id=\"支持Promise-API-和-URL-Templates\"><a href=\"#支持Promise-API-和-URL-Templates\" class=\"headerlink\" title=\"支持Promise API 和 URL Templates\"></a>支持Promise API 和 URL Templates</h2><p>Promise是ES6的特性，Promise的中文含义为“先知”，Promise对象用于异步计算。<br>URI Templates表示URI模板，有些类似于ASP.NET MVC的路由模板。</p>\n<h2 id=\"支持拦截器\"><a href=\"#支持拦截器\" class=\"headerlink\" title=\"支持拦截器\"></a>支持拦截器</h2><p>拦截器是全局的，拦截器可以在请求发送前和发送请求后做一些处理。<br>拦截器在一些场景下会非常有用，比如请求发送前在headers中设置access_token，或者在请求失败时，提供共通的处理方式。</p>\n<h1 id=\"vue-resource-使用\"><a href=\"#vue-resource-使用\" class=\"headerlink\" title=\"vue-resource 使用\"></a>vue-resource 使用</h1><h2 id=\"引入vue-resource\"><a href=\"#引入vue-resource\" class=\"headerlink\" title=\"引入vue-resource\"></a>引入vue-resource</h2><pre><code>&lt;script src=&quot;js/vue.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;js/vue-resource.js&quot;&gt;&lt;/script&gt;  \n</code></pre><h2 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h2><p>引入vue-resource后，可以基于全局的Vue对象使用http，也可以基于某个Vue实例使用http。  </p>\n<pre><code>// 基于全局Vue对象使用http\nVue.http.get(&apos;/someUrl&apos;, [options]).then(successCallback, errorCallback);\nVue.http.post(&apos;/someUrl&apos;, [body], [options]).then(successCallback, errorCallback);\n\n// 在一个Vue实例内使用$http\nthis.$http.get(&apos;/someUrl&apos;, [options]).then(successCallback, errorCallback);\nthis.$http.post(&apos;/someUrl&apos;, [body], [options]).then(successCallback, errorCallback);  \n</code></pre><p>在发送请求后，使用then方法来处理响应结果，then方法有两个参数，第一个参数是响应成功时的回调函数，第二个参数是响应失败时的回调函数。</p>\n<p>then方法的回调函数也有两种写法，第一种是传统的函数写法，第二种是更为简洁的ES 6的Lambda写法：<br>    // 传统写法<br>    this.$http.get(‘/someUrl’, [options]).then(function(response){<br>    // 响应成功回调<br>    }, function(response){<br>    // 响应错误回调<br>    });</p>\n<pre><code>// Lambda写法\nthis.$http.get(&apos;/someUrl&apos;, [options]).then((response) =&gt; {\n// 响应成功回调\n}, (response) =&gt; {\n// 响应错误回调\n});\n</code></pre><h2 id=\"支持的HTTP方法\"><a href=\"#支持的HTTP方法\" class=\"headerlink\" title=\"支持的HTTP方法\"></a>支持的HTTP方法</h2><p>vue-resource的请求API是按照REST风格设计的，它提供了7种请求API：   </p>\n<ul>\n<li>get(url, [options])</li>\n<li>head(url, [options])</li>\n<li>delete(url, [options])</li>\n<li>jsonp(url, [options])</li>\n<li>post(url, [body], [options])</li>\n<li>put(url, [body], [options])</li>\n<li>patch(url, [body], [options])  </li>\n</ul>\n<p>除了jsonp以外，另外6种的API名称是标准的HTTP方法。当服务端使用REST API时，客户端的编码风格和服务端的编码风格近乎一致，这可以减少前端和后端开发人员的沟通成本。  </p>\n<h2 id=\"options-对象\"><a href=\"#options-对象\" class=\"headerlink\" title=\"options 对象\"></a>options 对象</h2><p>response对象包含以下属性：<br><img src=\"http://onep1caa3.bkt.clouddn.com/04.25.1.png\" alt=\"\">  </p>\n<h1 id=\"CURD-示例\"><a href=\"#CURD-示例\" class=\"headerlink\" title=\"CURD 示例\"></a>CURD 示例</h1><h2 id=\"get-请求\"><a href=\"#get-请求\" class=\"headerlink\" title=\"get 请求\"></a>get 请求</h2><pre><code>var demo = new Vue({\nel: &apos;#app&apos;,\ndata: {\ngridColumns: [&apos;customerId&apos;, &apos;companyName&apos;, &apos;contactName&apos;, &apos;phone&apos;],\ngridData: [],\napiUrl: &apos;http://211.149.193.19:8080/api/customers&apos;\n},\nready: function() {\nthis.getCustomers()\n},\nmethods: {\ngetCustomers: function() {\nthis.$http.get(this.apiUrl)\n.then((response) =&gt; {\nthis.$set(&apos;gridData&apos;, response.data)\n})\n.catch(function(response) {\nconsole.log(response)\n})\n}\n}\n})  \n</code></pre><p>这段程序的then方法只提供了successCallback，而省略了errorCallback。<br>catch方法用于捕捉程序的异常，catch方法和errorCallback是不同的，errorCallback只在响应失败时调用，而catch则是在整个请求到响应过程中，只要程序出错了就会被调用。</p>\n<p>在then方法的回调函数内，你也可以直接使用this，this仍然是指向Vue实例的： </p>\n<pre><code>getCustomers: function() {\nthis.$http.get(this.apiUrl)\n.then((response) =&gt; {\nthis.$set(&apos;gridData&apos;, response.data)\n})\n.catch(function(response) {\nconsole.log(response)\n})\n}  \n</code></pre><h2 id=\"JSONP-请求\"><a href=\"#JSONP-请求\" class=\"headerlink\" title=\"JSONP 请求\"></a>JSONP 请求</h2><pre><code>getCustomers: function() {\nthis.$http.jsonp(this.apiUrl).then(function(response){\nthis.$set(&apos;gridData&apos;, response.data)\n})\n}  \n</code></pre><h2 id=\"POST-请求\"><a href=\"#POST-请求\" class=\"headerlink\" title=\"POST 请求\"></a>POST 请求</h2><pre><code>var demo = new Vue({\nel: &apos;#app&apos;,\ndata: {\nshow: false,\ngridColumns: [{\nname: &apos;customerId&apos;,\nisKey: true\n}, {\nname: &apos;companyName&apos;\n}, {\nname: &apos;contactName&apos;\n}, {\nname: &apos;phone&apos;\n}],\ngridData: [],\napiUrl: &apos;http://211.149.193.19:8080/api/customers&apos;,\nitem: {}\n},\nready: function() {\nthis.getCustomers()\n},\nmethods: {\ncloseDialog: function() {\nthis.show = false\n},\ngetCustomers: function() {\nvar vm = this\nvm.$http.get(vm.apiUrl)\n.then((response) =&gt; {\nvm.$set(&apos;gridData&apos;, response.data)\n})\n},\ncreateCustomer: function() {\nvar vm = this\nvm.$http.post(vm.apiUrl, vm.item)\n.then((response) =&gt; {\nvm.$set(&apos;item&apos;, {})\nvm.getCustomers()\n})\nthis.show = false\n}\n}\n})  \n</code></pre><h2 id=\"PUT-请求\"><a href=\"#PUT-请求\" class=\"headerlink\" title=\"PUT 请求\"></a>PUT 请求</h2><pre><code>updateCustomer: function() {\nvar vm = this\nvm.$http.put(this.apiUrl + &apos;/&apos; + vm.item.customerId, vm.item)\n.then((response) =&gt; {\nvm.getCustomers()\n})\n}  \n</code></pre><h2 id=\"DELETE-请求\"><a href=\"#DELETE-请求\" class=\"headerlink\" title=\"DELETE 请求\"></a>DELETE 请求</h2><pre><code>deleteCustomer: function(customer){\nvar vm = this\nvm.$http.delete(this.apiUrl + &apos;/&apos; + customer.customerId)\n.then((response) =&gt; {\nvm.getCustomers()\n})\n}  \n</code></pre><h1 id=\"使用resource-请求\"><a href=\"#使用resource-请求\" class=\"headerlink\" title=\"使用resource 请求\"></a>使用resource 请求</h1><p>vue-resource提供了另外一种方式访问HTTP——resource服务，resource服务包含以下几种默认的action：  </p>\n<pre><code>get: {method: &apos;GET&apos;},\nsave: {method: &apos;POST&apos;},\nquery: {method: &apos;GET&apos;},\nupdate: {method: &apos;PUT&apos;},\nremove: {method: &apos;DELETE&apos;},\ndelete: {method: &apos;DELETE&apos;}  \n</code></pre><p>resource对象也有两种访问方式：  </p>\n<ul>\n<li>全局访问：Vue.resource</li>\n<li>实例访问：this.$resource  </li>\n</ul>\n<h2 id=\"GET-请求\"><a href=\"#GET-请求\" class=\"headerlink\" title=\"GET 请求\"></a>GET 请求</h2><pre><code>getCustomers: function() {\n\nvar resource = this.$resource(this.apiUrl)\nvm = this\n\nresource.get()\n.then((response) =&gt; {\nvm.$set(&apos;gridData&apos;, response.data)\n})\n.catch(function(response) {\nconsole.log(response)\n})\n}  \n</code></pre><h2 id=\"POST-请求-1\"><a href=\"#POST-请求-1\" class=\"headerlink\" title=\"POST 请求\"></a>POST 请求</h2><pre><code>createCustomer: function() {\nvar resource = this.$resource(this.apiUrl)\nvm = this\n\nresource.save(vm.apiUrl, vm.item)\n.then((response) =&gt; {\nvm.$set(&apos;item&apos;, {})\nvm.getCustomers()\n})\nthis.show = false\n}  \n</code></pre><h2 id=\"PUT-请求-1\"><a href=\"#PUT-请求-1\" class=\"headerlink\" title=\"PUT 请求\"></a>PUT 请求</h2><pre><code>updateCustomer: function() {\nvar resource = this.$resource(this.apiUrl)\nvm = this\n\nresource.update({ id: vm.item.customerId}, vm.item)\n.then((response) =&gt; {\nvm.getCustomers()\n})\n} \n</code></pre><h2 id=\"DELETE-请求-1\"><a href=\"#DELETE-请求-1\" class=\"headerlink\" title=\"DELETE 请求\"></a>DELETE 请求</h2><pre><code>deleteCustomer: function(customer){\nvar resource = this.$resource(this.apiUrl)\nvm = this\n\nresource.remove({ id: customer.customerId})\n.then((response) =&gt; {\nvm.getCustomers()\n})\n}  \n</code></pre>","excerpt":"","more":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><p>vue-resource是Vue.js的一款插件，它可以通过XMLHttpRequest或JSONP发起请求并处理响应。也就是说，$.ajax能做的事情，vue-resource插件一样也能做到，而且vue-resource的API更为简洁。另外，vue-resource还提供了非常有用的inteceptor功能，使用inteceptor可以在请求前和请求后附加一些行为，比如使用inteceptor在ajax请求时显示loading界面。  </p>\n<h1 id=\"vue-resource特点\"><a href=\"#vue-resource特点\" class=\"headerlink\" title=\"vue-resource特点\"></a>vue-resource特点</h1><h2 id=\"体积小\"><a href=\"#体积小\" class=\"headerlink\" title=\"体积小\"></a>体积小</h2><p>vue-resource非常小巧，在压缩以后只有大约12KB，服务端启用gzip压缩后只有4.5KB大小，这远比jQuery的体积要小得多。</p>\n<h2 id=\"支持主流浏览器\"><a href=\"#支持主流浏览器\" class=\"headerlink\" title=\"支持主流浏览器\"></a>支持主流浏览器</h2><p>和Vue.js一样，vue-resource除了不支持IE 9以下的浏览器，其他主流的浏览器都支持。</p>\n<h2 id=\"支持Promise-API-和-URL-Templates\"><a href=\"#支持Promise-API-和-URL-Templates\" class=\"headerlink\" title=\"支持Promise API 和 URL Templates\"></a>支持Promise API 和 URL Templates</h2><p>Promise是ES6的特性，Promise的中文含义为“先知”，Promise对象用于异步计算。<br>URI Templates表示URI模板，有些类似于ASP.NET MVC的路由模板。</p>\n<h2 id=\"支持拦截器\"><a href=\"#支持拦截器\" class=\"headerlink\" title=\"支持拦截器\"></a>支持拦截器</h2><p>拦截器是全局的，拦截器可以在请求发送前和发送请求后做一些处理。<br>拦截器在一些场景下会非常有用，比如请求发送前在headers中设置access_token，或者在请求失败时，提供共通的处理方式。</p>\n<h1 id=\"vue-resource-使用\"><a href=\"#vue-resource-使用\" class=\"headerlink\" title=\"vue-resource 使用\"></a>vue-resource 使用</h1><h2 id=\"引入vue-resource\"><a href=\"#引入vue-resource\" class=\"headerlink\" title=\"引入vue-resource\"></a>引入vue-resource</h2><pre><code>&lt;script src=&quot;js/vue.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;js/vue-resource.js&quot;&gt;&lt;/script&gt;  \n</code></pre><h2 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h2><p>引入vue-resource后，可以基于全局的Vue对象使用http，也可以基于某个Vue实例使用http。  </p>\n<pre><code>// 基于全局Vue对象使用http\nVue.http.get(&apos;/someUrl&apos;, [options]).then(successCallback, errorCallback);\nVue.http.post(&apos;/someUrl&apos;, [body], [options]).then(successCallback, errorCallback);\n\n// 在一个Vue实例内使用$http\nthis.$http.get(&apos;/someUrl&apos;, [options]).then(successCallback, errorCallback);\nthis.$http.post(&apos;/someUrl&apos;, [body], [options]).then(successCallback, errorCallback);  \n</code></pre><p>在发送请求后，使用then方法来处理响应结果，then方法有两个参数，第一个参数是响应成功时的回调函数，第二个参数是响应失败时的回调函数。</p>\n<p>then方法的回调函数也有两种写法，第一种是传统的函数写法，第二种是更为简洁的ES 6的Lambda写法：<br>    // 传统写法<br>    this.$http.get(‘/someUrl’, [options]).then(function(response){<br>    // 响应成功回调<br>    }, function(response){<br>    // 响应错误回调<br>    });</p>\n<pre><code>// Lambda写法\nthis.$http.get(&apos;/someUrl&apos;, [options]).then((response) =&gt; {\n// 响应成功回调\n}, (response) =&gt; {\n// 响应错误回调\n});\n</code></pre><h2 id=\"支持的HTTP方法\"><a href=\"#支持的HTTP方法\" class=\"headerlink\" title=\"支持的HTTP方法\"></a>支持的HTTP方法</h2><p>vue-resource的请求API是按照REST风格设计的，它提供了7种请求API：   </p>\n<ul>\n<li>get(url, [options])</li>\n<li>head(url, [options])</li>\n<li>delete(url, [options])</li>\n<li>jsonp(url, [options])</li>\n<li>post(url, [body], [options])</li>\n<li>put(url, [body], [options])</li>\n<li>patch(url, [body], [options])  </li>\n</ul>\n<p>除了jsonp以外，另外6种的API名称是标准的HTTP方法。当服务端使用REST API时，客户端的编码风格和服务端的编码风格近乎一致，这可以减少前端和后端开发人员的沟通成本。  </p>\n<h2 id=\"options-对象\"><a href=\"#options-对象\" class=\"headerlink\" title=\"options 对象\"></a>options 对象</h2><p>response对象包含以下属性：<br><img src=\"http://onep1caa3.bkt.clouddn.com/04.25.1.png\" alt=\"\">  </p>\n<h1 id=\"CURD-示例\"><a href=\"#CURD-示例\" class=\"headerlink\" title=\"CURD 示例\"></a>CURD 示例</h1><h2 id=\"get-请求\"><a href=\"#get-请求\" class=\"headerlink\" title=\"get 请求\"></a>get 请求</h2><pre><code>var demo = new Vue({\nel: &apos;#app&apos;,\ndata: {\ngridColumns: [&apos;customerId&apos;, &apos;companyName&apos;, &apos;contactName&apos;, &apos;phone&apos;],\ngridData: [],\napiUrl: &apos;http://211.149.193.19:8080/api/customers&apos;\n},\nready: function() {\nthis.getCustomers()\n},\nmethods: {\ngetCustomers: function() {\nthis.$http.get(this.apiUrl)\n.then((response) =&gt; {\nthis.$set(&apos;gridData&apos;, response.data)\n})\n.catch(function(response) {\nconsole.log(response)\n})\n}\n}\n})  \n</code></pre><p>这段程序的then方法只提供了successCallback，而省略了errorCallback。<br>catch方法用于捕捉程序的异常，catch方法和errorCallback是不同的，errorCallback只在响应失败时调用，而catch则是在整个请求到响应过程中，只要程序出错了就会被调用。</p>\n<p>在then方法的回调函数内，你也可以直接使用this，this仍然是指向Vue实例的： </p>\n<pre><code>getCustomers: function() {\nthis.$http.get(this.apiUrl)\n.then((response) =&gt; {\nthis.$set(&apos;gridData&apos;, response.data)\n})\n.catch(function(response) {\nconsole.log(response)\n})\n}  \n</code></pre><h2 id=\"JSONP-请求\"><a href=\"#JSONP-请求\" class=\"headerlink\" title=\"JSONP 请求\"></a>JSONP 请求</h2><pre><code>getCustomers: function() {\nthis.$http.jsonp(this.apiUrl).then(function(response){\nthis.$set(&apos;gridData&apos;, response.data)\n})\n}  \n</code></pre><h2 id=\"POST-请求\"><a href=\"#POST-请求\" class=\"headerlink\" title=\"POST 请求\"></a>POST 请求</h2><pre><code>var demo = new Vue({\nel: &apos;#app&apos;,\ndata: {\nshow: false,\ngridColumns: [{\nname: &apos;customerId&apos;,\nisKey: true\n}, {\nname: &apos;companyName&apos;\n}, {\nname: &apos;contactName&apos;\n}, {\nname: &apos;phone&apos;\n}],\ngridData: [],\napiUrl: &apos;http://211.149.193.19:8080/api/customers&apos;,\nitem: {}\n},\nready: function() {\nthis.getCustomers()\n},\nmethods: {\ncloseDialog: function() {\nthis.show = false\n},\ngetCustomers: function() {\nvar vm = this\nvm.$http.get(vm.apiUrl)\n.then((response) =&gt; {\nvm.$set(&apos;gridData&apos;, response.data)\n})\n},\ncreateCustomer: function() {\nvar vm = this\nvm.$http.post(vm.apiUrl, vm.item)\n.then((response) =&gt; {\nvm.$set(&apos;item&apos;, {})\nvm.getCustomers()\n})\nthis.show = false\n}\n}\n})  \n</code></pre><h2 id=\"PUT-请求\"><a href=\"#PUT-请求\" class=\"headerlink\" title=\"PUT 请求\"></a>PUT 请求</h2><pre><code>updateCustomer: function() {\nvar vm = this\nvm.$http.put(this.apiUrl + &apos;/&apos; + vm.item.customerId, vm.item)\n.then((response) =&gt; {\nvm.getCustomers()\n})\n}  \n</code></pre><h2 id=\"DELETE-请求\"><a href=\"#DELETE-请求\" class=\"headerlink\" title=\"DELETE 请求\"></a>DELETE 请求</h2><pre><code>deleteCustomer: function(customer){\nvar vm = this\nvm.$http.delete(this.apiUrl + &apos;/&apos; + customer.customerId)\n.then((response) =&gt; {\nvm.getCustomers()\n})\n}  \n</code></pre><h1 id=\"使用resource-请求\"><a href=\"#使用resource-请求\" class=\"headerlink\" title=\"使用resource 请求\"></a>使用resource 请求</h1><p>vue-resource提供了另外一种方式访问HTTP——resource服务，resource服务包含以下几种默认的action：  </p>\n<pre><code>get: {method: &apos;GET&apos;},\nsave: {method: &apos;POST&apos;},\nquery: {method: &apos;GET&apos;},\nupdate: {method: &apos;PUT&apos;},\nremove: {method: &apos;DELETE&apos;},\ndelete: {method: &apos;DELETE&apos;}  \n</code></pre><p>resource对象也有两种访问方式：  </p>\n<ul>\n<li>全局访问：Vue.resource</li>\n<li>实例访问：this.$resource  </li>\n</ul>\n<h2 id=\"GET-请求\"><a href=\"#GET-请求\" class=\"headerlink\" title=\"GET 请求\"></a>GET 请求</h2><pre><code>getCustomers: function() {\n\nvar resource = this.$resource(this.apiUrl)\nvm = this\n\nresource.get()\n.then((response) =&gt; {\nvm.$set(&apos;gridData&apos;, response.data)\n})\n.catch(function(response) {\nconsole.log(response)\n})\n}  \n</code></pre><h2 id=\"POST-请求-1\"><a href=\"#POST-请求-1\" class=\"headerlink\" title=\"POST 请求\"></a>POST 请求</h2><pre><code>createCustomer: function() {\nvar resource = this.$resource(this.apiUrl)\nvm = this\n\nresource.save(vm.apiUrl, vm.item)\n.then((response) =&gt; {\nvm.$set(&apos;item&apos;, {})\nvm.getCustomers()\n})\nthis.show = false\n}  \n</code></pre><h2 id=\"PUT-请求-1\"><a href=\"#PUT-请求-1\" class=\"headerlink\" title=\"PUT 请求\"></a>PUT 请求</h2><pre><code>updateCustomer: function() {\nvar resource = this.$resource(this.apiUrl)\nvm = this\n\nresource.update({ id: vm.item.customerId}, vm.item)\n.then((response) =&gt; {\nvm.getCustomers()\n})\n} \n</code></pre><h2 id=\"DELETE-请求-1\"><a href=\"#DELETE-请求-1\" class=\"headerlink\" title=\"DELETE 请求\"></a>DELETE 请求</h2><pre><code>deleteCustomer: function(customer){\nvar resource = this.$resource(this.apiUrl)\nvm = this\n\nresource.remove({ id: customer.customerId})\n.then((response) =&gt; {\nvm.getCustomers()\n})\n}  \n</code></pre>"},{"title":"绑定dom的几种方法&事件代理","_content":"网页中经常需要处理各种事件,通常的做法是绑定listener对事件进行监听,当事件发生后进行一些特定处理。以下是几种绑定DOM的方法：\n### 1.写在标签页里面（即内嵌式）\n    <button onclick=\"alert('Hello')\">Say hello</button>\n上面这行代码,将按钮点击后的弹窗操作在标签声明的时候就绑定了。  \n\n优点：简单易懂；  \n缺点：把HTML与JavaScript糅合，每次想要改变方法，都需要编辑HTML。另外这种方法可扩展性差.如果这个方法需要被附加在多个元素上,重复的代码会让页面膨胀,并且维护困难。  \n### 2.用JavaScript设置元素对应的onXXX事件属性 （即属性式） \n    <!DOCTYPE html>\n    <html>\n    <head>\n    <script type=\"text/javascript\">\n    window.onload = function () {\n    // Event binding using onXXX property from JavaScript\n    var helloBtn = document.getElementById(\"helloBtn\");\n    helloBtn.onclick = function (event) {\n    alert(\"Hello Button\");\n    }\n    }\n    </script>\n    \n    </head>\n    <body>\n    <button id=\"helloBtn\">Say hello</button>\n    </body>\n    </html>  \n优点：可以做到页面呈现与功能的分离；\n缺点：只能绑定一个方法到同一事件类型上，第二个方法如果赋给相同的事件类型，则只会覆盖前者。 \n### 3.使用addEventLisntener（方法式）\n绑定方法是addEventListener，该方法接受3个参数分别为：type(事件类型)，listener(事件监听方法)，useCapture(指定该方法是捕获式还是冒泡式)。例如：  \n    \n    <button id=\"btn_w3c\">W3C Advanced Event Bind</button>\n    <script type=\"text/javascript\">\n    function func4w3c() {\n    alert(\"call function bind with addEventListener\");\n    }\n    var btn = document.getElementById(\"btn_w3c\");\n    btn.addEventListener(\"click\", func4w3c, false);\n    </script>    \n优点：可以绑定多个方法到同一事件类型上；\n缺点：而用addEventListener绑定的匿名方法， 因为在外部已经失去了对匿名方法的引用，也就不能传递给removeEventListener，所以就无法用任何的方式来取消绑定，只能通过刷新页面来重置所有的内容。  \n### 4.使用jQuery的方法进行事件处理器绑定\n使用on（）来绑定  \n优点：可以动态添加到页面的DOM元素，用.on()方法绑定的事件不需要关心注册该事件的元素何时被添加进来，也不需要重复绑定；\n缺点：jQuery本身的局限性。  \n## 事件委托的原理\n简单地说就是利用冒泡法，只指定一个事件处理程序，就可以管理某一类型的所有事件。或者说事件从最深的节点开始，然后逐步向上传播事件。  \n\n优点：如果要用事件委托，就会将所有的操作放到js程序里面，与dom的操作就只需要交互一次，这样就能大大的减少与dom的交互次数，提高性能。而且新添加的元素也会有之前的事件。","source":"_posts/2017.05.24dom.dom.md","raw":"---\ntitle: 绑定dom的几种方法&事件代理\ntags: [dom]\ncategories: 知识 \n---\n网页中经常需要处理各种事件,通常的做法是绑定listener对事件进行监听,当事件发生后进行一些特定处理。以下是几种绑定DOM的方法：\n### 1.写在标签页里面（即内嵌式）\n    <button onclick=\"alert('Hello')\">Say hello</button>\n上面这行代码,将按钮点击后的弹窗操作在标签声明的时候就绑定了。  \n\n优点：简单易懂；  \n缺点：把HTML与JavaScript糅合，每次想要改变方法，都需要编辑HTML。另外这种方法可扩展性差.如果这个方法需要被附加在多个元素上,重复的代码会让页面膨胀,并且维护困难。  \n### 2.用JavaScript设置元素对应的onXXX事件属性 （即属性式） \n    <!DOCTYPE html>\n    <html>\n    <head>\n    <script type=\"text/javascript\">\n    window.onload = function () {\n    // Event binding using onXXX property from JavaScript\n    var helloBtn = document.getElementById(\"helloBtn\");\n    helloBtn.onclick = function (event) {\n    alert(\"Hello Button\");\n    }\n    }\n    </script>\n    \n    </head>\n    <body>\n    <button id=\"helloBtn\">Say hello</button>\n    </body>\n    </html>  \n优点：可以做到页面呈现与功能的分离；\n缺点：只能绑定一个方法到同一事件类型上，第二个方法如果赋给相同的事件类型，则只会覆盖前者。 \n### 3.使用addEventLisntener（方法式）\n绑定方法是addEventListener，该方法接受3个参数分别为：type(事件类型)，listener(事件监听方法)，useCapture(指定该方法是捕获式还是冒泡式)。例如：  \n    \n    <button id=\"btn_w3c\">W3C Advanced Event Bind</button>\n    <script type=\"text/javascript\">\n    function func4w3c() {\n    alert(\"call function bind with addEventListener\");\n    }\n    var btn = document.getElementById(\"btn_w3c\");\n    btn.addEventListener(\"click\", func4w3c, false);\n    </script>    \n优点：可以绑定多个方法到同一事件类型上；\n缺点：而用addEventListener绑定的匿名方法， 因为在外部已经失去了对匿名方法的引用，也就不能传递给removeEventListener，所以就无法用任何的方式来取消绑定，只能通过刷新页面来重置所有的内容。  \n### 4.使用jQuery的方法进行事件处理器绑定\n使用on（）来绑定  \n优点：可以动态添加到页面的DOM元素，用.on()方法绑定的事件不需要关心注册该事件的元素何时被添加进来，也不需要重复绑定；\n缺点：jQuery本身的局限性。  \n## 事件委托的原理\n简单地说就是利用冒泡法，只指定一个事件处理程序，就可以管理某一类型的所有事件。或者说事件从最深的节点开始，然后逐步向上传播事件。  \n\n优点：如果要用事件委托，就会将所有的操作放到js程序里面，与dom的操作就只需要交互一次，这样就能大大的减少与dom的交互次数，提高性能。而且新添加的元素也会有之前的事件。","slug":"2017.05.24dom.dom","published":1,"date":"2017-05-24T13:59:30.000Z","updated":"2017-05-24T13:59:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwvh2594000xw39zzbeubf0h","content":"<p>网页中经常需要处理各种事件,通常的做法是绑定listener对事件进行监听,当事件发生后进行一些特定处理。以下是几种绑定DOM的方法：</p>\n<h3 id=\"1-写在标签页里面（即内嵌式）\"><a href=\"#1-写在标签页里面（即内嵌式）\" class=\"headerlink\" title=\"1.写在标签页里面（即内嵌式）\"></a>1.写在标签页里面（即内嵌式）</h3><pre><code>&lt;button onclick=&quot;alert(&apos;Hello&apos;)&quot;&gt;Say hello&lt;/button&gt;\n</code></pre><p>上面这行代码,将按钮点击后的弹窗操作在标签声明的时候就绑定了。  </p>\n<p>优点：简单易懂；<br>缺点：把HTML与JavaScript糅合，每次想要改变方法，都需要编辑HTML。另外这种方法可扩展性差.如果这个方法需要被附加在多个元素上,重复的代码会让页面膨胀,并且维护困难。  </p>\n<h3 id=\"2-用JavaScript设置元素对应的onXXX事件属性-（即属性式）\"><a href=\"#2-用JavaScript设置元素对应的onXXX事件属性-（即属性式）\" class=\"headerlink\" title=\"2.用JavaScript设置元素对应的onXXX事件属性 （即属性式）\"></a>2.用JavaScript设置元素对应的onXXX事件属性 （即属性式）</h3><pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;script type=&quot;text/javascript&quot;&gt;\nwindow.onload = function () {\n// Event binding using onXXX property from JavaScript\nvar helloBtn = document.getElementById(&quot;helloBtn&quot;);\nhelloBtn.onclick = function (event) {\nalert(&quot;Hello Button&quot;);\n}\n}\n&lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n&lt;button id=&quot;helloBtn&quot;&gt;Say hello&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;  \n</code></pre><p>优点：可以做到页面呈现与功能的分离；<br>缺点：只能绑定一个方法到同一事件类型上，第二个方法如果赋给相同的事件类型，则只会覆盖前者。 </p>\n<h3 id=\"3-使用addEventLisntener（方法式）\"><a href=\"#3-使用addEventLisntener（方法式）\" class=\"headerlink\" title=\"3.使用addEventLisntener（方法式）\"></a>3.使用addEventLisntener（方法式）</h3><p>绑定方法是addEventListener，该方法接受3个参数分别为：type(事件类型)，listener(事件监听方法)，useCapture(指定该方法是捕获式还是冒泡式)。例如：  </p>\n<pre><code>&lt;button id=&quot;btn_w3c&quot;&gt;W3C Advanced Event Bind&lt;/button&gt;\n&lt;script type=&quot;text/javascript&quot;&gt;\nfunction func4w3c() {\nalert(&quot;call function bind with addEventListener&quot;);\n}\nvar btn = document.getElementById(&quot;btn_w3c&quot;);\nbtn.addEventListener(&quot;click&quot;, func4w3c, false);\n&lt;/script&gt;    \n</code></pre><p>优点：可以绑定多个方法到同一事件类型上；<br>缺点：而用addEventListener绑定的匿名方法， 因为在外部已经失去了对匿名方法的引用，也就不能传递给removeEventListener，所以就无法用任何的方式来取消绑定，只能通过刷新页面来重置所有的内容。  </p>\n<h3 id=\"4-使用jQuery的方法进行事件处理器绑定\"><a href=\"#4-使用jQuery的方法进行事件处理器绑定\" class=\"headerlink\" title=\"4.使用jQuery的方法进行事件处理器绑定\"></a>4.使用jQuery的方法进行事件处理器绑定</h3><p>使用on（）来绑定<br>优点：可以动态添加到页面的DOM元素，用.on()方法绑定的事件不需要关心注册该事件的元素何时被添加进来，也不需要重复绑定；<br>缺点：jQuery本身的局限性。  </p>\n<h2 id=\"事件委托的原理\"><a href=\"#事件委托的原理\" class=\"headerlink\" title=\"事件委托的原理\"></a>事件委托的原理</h2><p>简单地说就是利用冒泡法，只指定一个事件处理程序，就可以管理某一类型的所有事件。或者说事件从最深的节点开始，然后逐步向上传播事件。  </p>\n<p>优点：如果要用事件委托，就会将所有的操作放到js程序里面，与dom的操作就只需要交互一次，这样就能大大的减少与dom的交互次数，提高性能。而且新添加的元素也会有之前的事件。</p>\n","excerpt":"","more":"<p>网页中经常需要处理各种事件,通常的做法是绑定listener对事件进行监听,当事件发生后进行一些特定处理。以下是几种绑定DOM的方法：</p>\n<h3 id=\"1-写在标签页里面（即内嵌式）\"><a href=\"#1-写在标签页里面（即内嵌式）\" class=\"headerlink\" title=\"1.写在标签页里面（即内嵌式）\"></a>1.写在标签页里面（即内嵌式）</h3><pre><code>&lt;button onclick=&quot;alert(&apos;Hello&apos;)&quot;&gt;Say hello&lt;/button&gt;\n</code></pre><p>上面这行代码,将按钮点击后的弹窗操作在标签声明的时候就绑定了。  </p>\n<p>优点：简单易懂；<br>缺点：把HTML与JavaScript糅合，每次想要改变方法，都需要编辑HTML。另外这种方法可扩展性差.如果这个方法需要被附加在多个元素上,重复的代码会让页面膨胀,并且维护困难。  </p>\n<h3 id=\"2-用JavaScript设置元素对应的onXXX事件属性-（即属性式）\"><a href=\"#2-用JavaScript设置元素对应的onXXX事件属性-（即属性式）\" class=\"headerlink\" title=\"2.用JavaScript设置元素对应的onXXX事件属性 （即属性式）\"></a>2.用JavaScript设置元素对应的onXXX事件属性 （即属性式）</h3><pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;script type=&quot;text/javascript&quot;&gt;\nwindow.onload = function () {\n// Event binding using onXXX property from JavaScript\nvar helloBtn = document.getElementById(&quot;helloBtn&quot;);\nhelloBtn.onclick = function (event) {\nalert(&quot;Hello Button&quot;);\n}\n}\n&lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n&lt;button id=&quot;helloBtn&quot;&gt;Say hello&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;  \n</code></pre><p>优点：可以做到页面呈现与功能的分离；<br>缺点：只能绑定一个方法到同一事件类型上，第二个方法如果赋给相同的事件类型，则只会覆盖前者。 </p>\n<h3 id=\"3-使用addEventLisntener（方法式）\"><a href=\"#3-使用addEventLisntener（方法式）\" class=\"headerlink\" title=\"3.使用addEventLisntener（方法式）\"></a>3.使用addEventLisntener（方法式）</h3><p>绑定方法是addEventListener，该方法接受3个参数分别为：type(事件类型)，listener(事件监听方法)，useCapture(指定该方法是捕获式还是冒泡式)。例如：  </p>\n<pre><code>&lt;button id=&quot;btn_w3c&quot;&gt;W3C Advanced Event Bind&lt;/button&gt;\n&lt;script type=&quot;text/javascript&quot;&gt;\nfunction func4w3c() {\nalert(&quot;call function bind with addEventListener&quot;);\n}\nvar btn = document.getElementById(&quot;btn_w3c&quot;);\nbtn.addEventListener(&quot;click&quot;, func4w3c, false);\n&lt;/script&gt;    \n</code></pre><p>优点：可以绑定多个方法到同一事件类型上；<br>缺点：而用addEventListener绑定的匿名方法， 因为在外部已经失去了对匿名方法的引用，也就不能传递给removeEventListener，所以就无法用任何的方式来取消绑定，只能通过刷新页面来重置所有的内容。  </p>\n<h3 id=\"4-使用jQuery的方法进行事件处理器绑定\"><a href=\"#4-使用jQuery的方法进行事件处理器绑定\" class=\"headerlink\" title=\"4.使用jQuery的方法进行事件处理器绑定\"></a>4.使用jQuery的方法进行事件处理器绑定</h3><p>使用on（）来绑定<br>优点：可以动态添加到页面的DOM元素，用.on()方法绑定的事件不需要关心注册该事件的元素何时被添加进来，也不需要重复绑定；<br>缺点：jQuery本身的局限性。  </p>\n<h2 id=\"事件委托的原理\"><a href=\"#事件委托的原理\" class=\"headerlink\" title=\"事件委托的原理\"></a>事件委托的原理</h2><p>简单地说就是利用冒泡法，只指定一个事件处理程序，就可以管理某一类型的所有事件。或者说事件从最深的节点开始，然后逐步向上传播事件。  </p>\n<p>优点：如果要用事件委托，就会将所有的操作放到js程序里面，与dom的操作就只需要交互一次，这样就能大大的减少与dom的交互次数，提高性能。而且新添加的元素也会有之前的事件。</p>\n"},{"title":"两种盒子模型","_content":"盒子模型是CSS中一个重要的概念，理解了盒子模型才能更好的排版。其实盒子模型有两种，分别是 IE 盒子模型和标准 W3C 盒子模型。  \n## 1.标准盒子模型\n![](http://onep1caa3.bkt.clouddn.com/2017.0525.png)  \n从上图可以看到标准 W3C 盒子模型的范围包括 margin、border、padding、content，并且 content 部分不包含其他部分。  \n## IE盒子模型  \nIE 盒子模型的范围也包括 margin、border、padding、content，和标准 W3C 盒子模型不同的是：IE 盒子模型的 content 部分包含了 border 和 padding。  \n**举个例子：一个盒子的 margin 为 20px，border 为 1px，padding 为 10px，content 的宽为 200px、高为 50px，如果用标准 W3C 盒子模型解释，那么这个盒子需要占据的位置为：宽 20*2 1*2 10*2 200=262px、高 20*2 1*2*10*2 50=112px，盒子的实际大小为：宽 1*2 10*2 200=222px、高 1*2 10*2 50=72px；如果用IE 盒子模型，那么这个盒子需要占据的位置为：宽 20*2 200=240px、高 20*2 50=70px，盒子的实际大小为：宽 200px、高 50px。   **\n一般我们选择W3C盒子模型，也就是标准的盒子模型，需要在网页的顶部加上DOCTYPE声明。","source":"_posts/2017.05.25.box.md","raw":"---\ntitle: 两种盒子模型\ntags: [css,box]\ncategories: 随笔 \n---\n盒子模型是CSS中一个重要的概念，理解了盒子模型才能更好的排版。其实盒子模型有两种，分别是 IE 盒子模型和标准 W3C 盒子模型。  \n## 1.标准盒子模型\n![](http://onep1caa3.bkt.clouddn.com/2017.0525.png)  \n从上图可以看到标准 W3C 盒子模型的范围包括 margin、border、padding、content，并且 content 部分不包含其他部分。  \n## IE盒子模型  \nIE 盒子模型的范围也包括 margin、border、padding、content，和标准 W3C 盒子模型不同的是：IE 盒子模型的 content 部分包含了 border 和 padding。  \n**举个例子：一个盒子的 margin 为 20px，border 为 1px，padding 为 10px，content 的宽为 200px、高为 50px，如果用标准 W3C 盒子模型解释，那么这个盒子需要占据的位置为：宽 20*2 1*2 10*2 200=262px、高 20*2 1*2*10*2 50=112px，盒子的实际大小为：宽 1*2 10*2 200=222px、高 1*2 10*2 50=72px；如果用IE 盒子模型，那么这个盒子需要占据的位置为：宽 20*2 200=240px、高 20*2 50=70px，盒子的实际大小为：宽 200px、高 50px。   **\n一般我们选择W3C盒子模型，也就是标准的盒子模型，需要在网页的顶部加上DOCTYPE声明。","slug":"2017.05.25.box","published":1,"date":"2017-05-25T04:38:58.000Z","updated":"2017-05-25T04:38:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwvh25940010w39zauk3qm3x","content":"<p>盒子模型是CSS中一个重要的概念，理解了盒子模型才能更好的排版。其实盒子模型有两种，分别是 IE 盒子模型和标准 W3C 盒子模型。  </p>\n<h2 id=\"1-标准盒子模型\"><a href=\"#1-标准盒子模型\" class=\"headerlink\" title=\"1.标准盒子模型\"></a>1.标准盒子模型</h2><p><img src=\"http://onep1caa3.bkt.clouddn.com/2017.0525.png\" alt=\"\"><br>从上图可以看到标准 W3C 盒子模型的范围包括 margin、border、padding、content，并且 content 部分不包含其他部分。  </p>\n<h2 id=\"IE盒子模型\"><a href=\"#IE盒子模型\" class=\"headerlink\" title=\"IE盒子模型\"></a>IE盒子模型</h2><p>IE 盒子模型的范围也包括 margin、border、padding、content，和标准 W3C 盒子模型不同的是：IE 盒子模型的 content 部分包含了 border 和 padding。<br><strong>举个例子：一个盒子的 margin 为 20px，border 为 1px，padding 为 10px，content 的宽为 200px、高为 50px，如果用标准 W3C 盒子模型解释，那么这个盒子需要占据的位置为：宽 20<em>2 1</em>2 10<em>2 200=262px、高 20</em>2 1<em>2</em>10<em>2 50=112px，盒子的实际大小为：宽 1</em>2 10<em>2 200=222px、高 1</em>2 10<em>2 50=72px；如果用IE 盒子模型，那么这个盒子需要占据的位置为：宽 20</em>2 200=240px、高 20*2 50=70px，盒子的实际大小为：宽 200px、高 50px。   </strong><br>一般我们选择W3C盒子模型，也就是标准的盒子模型，需要在网页的顶部加上DOCTYPE声明。</p>\n","excerpt":"","more":"<p>盒子模型是CSS中一个重要的概念，理解了盒子模型才能更好的排版。其实盒子模型有两种，分别是 IE 盒子模型和标准 W3C 盒子模型。  </p>\n<h2 id=\"1-标准盒子模型\"><a href=\"#1-标准盒子模型\" class=\"headerlink\" title=\"1.标准盒子模型\"></a>1.标准盒子模型</h2><p><img src=\"http://onep1caa3.bkt.clouddn.com/2017.0525.png\" alt=\"\"><br>从上图可以看到标准 W3C 盒子模型的范围包括 margin、border、padding、content，并且 content 部分不包含其他部分。  </p>\n<h2 id=\"IE盒子模型\"><a href=\"#IE盒子模型\" class=\"headerlink\" title=\"IE盒子模型\"></a>IE盒子模型</h2><p>IE 盒子模型的范围也包括 margin、border、padding、content，和标准 W3C 盒子模型不同的是：IE 盒子模型的 content 部分包含了 border 和 padding。<br><strong>举个例子：一个盒子的 margin 为 20px，border 为 1px，padding 为 10px，content 的宽为 200px、高为 50px，如果用标准 W3C 盒子模型解释，那么这个盒子需要占据的位置为：宽 20<em>2 1</em>2 10<em>2 200=262px、高 20</em>2 1<em>2</em>10<em>2 50=112px，盒子的实际大小为：宽 1</em>2 10<em>2 200=222px、高 1</em>2 10<em>2 50=72px；如果用IE 盒子模型，那么这个盒子需要占据的位置为：宽 20</em>2 200=240px、高 20*2 50=70px，盒子的实际大小为：宽 200px、高 50px。   </strong><br>一般我们选择W3C盒子模型，也就是标准的盒子模型，需要在网页的顶部加上DOCTYPE声明。</p>\n"},{"title":"部署SSR","_content":"\n## 一.注册主机\n\n这里我选用的是digital ocean的主机,选择一个月五刀的服务器就可以,注册的时候可以使用我的[邀请链接](https://m.do.co/c/e784ca31deb3) .\n\n\n## 二.创建主机  \n选择 centOS 6.9 ,方便后续更换内核,如果在校园网中使用,记得勾选IPV6.\n\n添加SSH可以使用免密登录\n\n## 三.安装ssr脚本  \n使用 SSH 连接远程主机\n\n     \n`ssh root@ip`\n\n接着安装 SSR 脚本:\n\n在安装 SSR 之前需要更新 yum 和 wget.\n\n\n     sudo yum update\n     sudo yum install wget  \n     wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.shchmod +x ssr.sh && bash.ssr.sh\n\n## 四.配置 SSR 脚本\n\n混淆等都是可选的.\n\n设备数,单线程限速,端口总限速等根据自己喜好设置.\n\n## 五.设置 speedsServer\n     uname -r #查看当前内核版本\n     CentOS 6支持安装锐速的内核：2.6.32-504.3.3.el6.x86_64\n     rpm -ivh http://xz.wn789.com/CentOSkernel/kernel-firmware-2.6.32-504.3.3.el6.noarch.rpm\n     rpm -ivh http://xz.wn789.com/CentOSkernel/kernel-2.6.32-504.3.3.el6.x86_64.rpm--force\n     rpm |grep kernel\n     reboot\n\n\n","source":"_posts/2018.11.16SSR.md","raw":"---\ntitle: 部署SSR\ntags: [SSR]\ncategories: 知识 \n---\n\n## 一.注册主机\n\n这里我选用的是digital ocean的主机,选择一个月五刀的服务器就可以,注册的时候可以使用我的[邀请链接](https://m.do.co/c/e784ca31deb3) .\n\n\n## 二.创建主机  \n选择 centOS 6.9 ,方便后续更换内核,如果在校园网中使用,记得勾选IPV6.\n\n添加SSH可以使用免密登录\n\n## 三.安装ssr脚本  \n使用 SSH 连接远程主机\n\n     \n`ssh root@ip`\n\n接着安装 SSR 脚本:\n\n在安装 SSR 之前需要更新 yum 和 wget.\n\n\n     sudo yum update\n     sudo yum install wget  \n     wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.shchmod +x ssr.sh && bash.ssr.sh\n\n## 四.配置 SSR 脚本\n\n混淆等都是可选的.\n\n设备数,单线程限速,端口总限速等根据自己喜好设置.\n\n## 五.设置 speedsServer\n     uname -r #查看当前内核版本\n     CentOS 6支持安装锐速的内核：2.6.32-504.3.3.el6.x86_64\n     rpm -ivh http://xz.wn789.com/CentOSkernel/kernel-firmware-2.6.32-504.3.3.el6.noarch.rpm\n     rpm -ivh http://xz.wn789.com/CentOSkernel/kernel-2.6.32-504.3.3.el6.x86_64.rpm--force\n     rpm |grep kernel\n     reboot\n\n\n","slug":"2018.11.16SSR","published":1,"date":"2019-01-09T06:26:28.730Z","updated":"2019-01-12T08:56:16.300Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwvh25950013w39z2ilz28gp","content":"<h2 id=\"一-注册主机\"><a href=\"#一-注册主机\" class=\"headerlink\" title=\"一.注册主机\"></a>一.注册主机</h2><p>这里我选用的是digital ocean的主机,选择一个月五刀的服务器就可以,注册的时候可以使用我的<a href=\"https://m.do.co/c/e784ca31deb3\" target=\"_blank\" rel=\"external\">邀请链接</a> .</p>\n<h2 id=\"二-创建主机\"><a href=\"#二-创建主机\" class=\"headerlink\" title=\"二.创建主机\"></a>二.创建主机</h2><p>选择 centOS 6.9 ,方便后续更换内核,如果在校园网中使用,记得勾选IPV6.</p>\n<p>添加SSH可以使用免密登录</p>\n<h2 id=\"三-安装ssr脚本\"><a href=\"#三-安装ssr脚本\" class=\"headerlink\" title=\"三.安装ssr脚本\"></a>三.安装ssr脚本</h2><p>使用 SSH 连接远程主机</p>\n<p><code>ssh root@ip</code></p>\n<p>接着安装 SSR 脚本:</p>\n<p>在安装 SSR 之前需要更新 yum 和 wget.</p>\n<pre><code>sudo yum update\nsudo yum install wget  \nwget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.shchmod +x ssr.sh &amp;&amp; bash.ssr.sh\n</code></pre><h2 id=\"四-配置-SSR-脚本\"><a href=\"#四-配置-SSR-脚本\" class=\"headerlink\" title=\"四.配置 SSR 脚本\"></a>四.配置 SSR 脚本</h2><p>混淆等都是可选的.</p>\n<p>设备数,单线程限速,端口总限速等根据自己喜好设置.</p>\n<h2 id=\"五-设置-speedsServer\"><a href=\"#五-设置-speedsServer\" class=\"headerlink\" title=\"五.设置 speedsServer\"></a>五.设置 speedsServer</h2><pre><code>uname -r #查看当前内核版本\nCentOS 6支持安装锐速的内核：2.6.32-504.3.3.el6.x86_64\nrpm -ivh http://xz.wn789.com/CentOSkernel/kernel-firmware-2.6.32-504.3.3.el6.noarch.rpm\nrpm -ivh http://xz.wn789.com/CentOSkernel/kernel-2.6.32-504.3.3.el6.x86_64.rpm--force\nrpm |grep kernel\nreboot\n</code></pre>","excerpt":"","more":"<h2 id=\"一-注册主机\"><a href=\"#一-注册主机\" class=\"headerlink\" title=\"一.注册主机\"></a>一.注册主机</h2><p>这里我选用的是digital ocean的主机,选择一个月五刀的服务器就可以,注册的时候可以使用我的<a href=\"https://m.do.co/c/e784ca31deb3\">邀请链接</a> .</p>\n<h2 id=\"二-创建主机\"><a href=\"#二-创建主机\" class=\"headerlink\" title=\"二.创建主机\"></a>二.创建主机</h2><p>选择 centOS 6.9 ,方便后续更换内核,如果在校园网中使用,记得勾选IPV6.</p>\n<p>添加SSH可以使用免密登录</p>\n<h2 id=\"三-安装ssr脚本\"><a href=\"#三-安装ssr脚本\" class=\"headerlink\" title=\"三.安装ssr脚本\"></a>三.安装ssr脚本</h2><p>使用 SSH 连接远程主机</p>\n<p><code>ssh root@ip</code></p>\n<p>接着安装 SSR 脚本:</p>\n<p>在安装 SSR 之前需要更新 yum 和 wget.</p>\n<pre><code>sudo yum update\nsudo yum install wget  \nwget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.shchmod +x ssr.sh &amp;&amp; bash.ssr.sh\n</code></pre><h2 id=\"四-配置-SSR-脚本\"><a href=\"#四-配置-SSR-脚本\" class=\"headerlink\" title=\"四.配置 SSR 脚本\"></a>四.配置 SSR 脚本</h2><p>混淆等都是可选的.</p>\n<p>设备数,单线程限速,端口总限速等根据自己喜好设置.</p>\n<h2 id=\"五-设置-speedsServer\"><a href=\"#五-设置-speedsServer\" class=\"headerlink\" title=\"五.设置 speedsServer\"></a>五.设置 speedsServer</h2><pre><code>uname -r #查看当前内核版本\nCentOS 6支持安装锐速的内核：2.6.32-504.3.3.el6.x86_64\nrpm -ivh http://xz.wn789.com/CentOSkernel/kernel-firmware-2.6.32-504.3.3.el6.noarch.rpm\nrpm -ivh http://xz.wn789.com/CentOSkernel/kernel-2.6.32-504.3.3.el6.x86_64.rpm--force\nrpm |grep kernel\nreboot\n</code></pre>"},{"title":"CSS 选择器/动画","_content":"\n## 一.基本选择器\n\n* 通用元素选择器(*)\n\n通用元素选择器,匹配任何元素;\n\n* 标签选择器(E)\n\n匹配所有使用 E 标签的元素;\n\n* class选择器(.class)\n\n匹配所有class属性中包含此class 的元素;\n\n* id选择器(#id)\n\n匹配所有id属性为此id的元素\n\n实例:\n\n\t* { margin:0; padding:0; }\n\t\n\tp { font-size:2em; }\n\t\n\t.info { background:#ff0; }\n\t\n\tp.info { background:#ff0; }\n\t\n\tp.info.error { color:#900; font-weight:bold; }\n\t\n\t#info { background:#ff0; }\n\t\n\tp#info { background:#ff0; }\n\n## 二.多元素选择器\n\n* 多元素选择器(E,F)\n\n同时匹配所有的E元素和F元素,中间用逗号分隔.\n\n* 后代元素选择器(E F)\n\n匹配所有属于 E 元素后代的F 元素,用空格分开.\n\n* 子元素选择器(E>F)\n\n匹配所有的E元素的子元素F.\n\n* 毗邻元素选择器(E+F)\n\n匹配所有紧随E元素之后的同级元素F.\n\n实例:\n\n\tdiv p { color:#f00; }\n\t\n\t#nav li { display:inline; }\n\t\n\t#nav a { font-weight:bold; }\n\t\n\tdiv > strong { color:#f00; }\n\t\n\tp + p { color:#f00; }\n\n\n\n\n\n## CSS 动画\n\n###  CSS transition\n\ntransition 指定状态变化所需要的时间,例如:\n\n\timg{\n\t    height:15px;\n\t    width:15px;\n\t    transition: 1s;\n\t}\n\t\n\timg:hover{\n\t    height: 450px;\n\t    width: 450px;\n\t}\n\n这样可以指定图片的访达过程需要1s🐸.\n\n#### 还可以指定 transition 使用的属性,比如只适用于 height:\n\n\timg{\n\t    transition: 1s height;\n\t}\n\n这样只有高度变化需要1s 实现,其他变化依然瞬间实现.\n\n#### transition-delay\n\n\timg{\n\t    transition: 1s height, 1s 1s width;\n\t}\n\n如上, width 在1s 以后才开始变化.\n\n#### transition-timing-function\n\n 状态变化速度,默认不是匀速的,而是逐渐放慢,称为 ease.\n\n\timg{\n\t    transition: 1s ease;\n\t}\n除了 ease 以外,还包括:\n\n* linear 匀速\n* ease-in 加速\n* ease-out 减速\n* cubic-bezier 函数: 自定义速度模式\n\n#### transition 的各项属性\n\n完整写法:\n\n\timg{\n\t    transition: 1s 1s height ease;\n\t}\n单独定义:\n\n\timg{\n\t    transition-property: height;\n\t    transition-duration: 1s;\n\t    transition-delay: 1s;\n\t    transition-timing-function: ease;\n\t}\n\n#### 使用注意\n\n* 各大浏览器都支持无前缀的 transition;\n* 不是所有的属性都支持 transition;\n* transition 必须明确状态;\n\n#### transition 的局限\n\n* 需要事件触发,无法在网页加载时自动生成;\n* 一次性,不能重发触发,除非一再触发;\n* 只能定义开始和结束状态,不能定义中间状态,即只有两个状态;\n* 一条 transition 只能定义一个属性的变化,不能涉及多个属性.\n\n### CSS animation\n\n#### 基本用法\n\n首先, css animation 需要制定动画一个周期持续时间,以及动画效果的名称.\n\t\n\tdiv:hover {\n\t  animation: 1s rainbow;\n\t}\n\n上面代码表示，当鼠标悬停在div元素上时，会产生名为rainbow的动画效果，持续时间为1秒。为此，我们还需要用keyframes关键字，定义rainbow效果。\n\n\t@keyframes rainbow {\n\t  0% { background: #c00; }\n\t  50% { background: orange; }\n\t  100% { background: yellowgreen; }\n\t}\n\n上面代码表示，rainbow效果一共有三个状态，分别为起始（0%）、中点（50%）和结束（100%）。如果有需要，完全可以插入更多状态。\n\n\n默认情况下，动画只播放一次。加入infinite关键字，可以让动画无限次播放。\n\n默认情况下，动画只播放一次。加入infinite关键字，可以让动画无限次播放。\n\n#### animation-fill-mode\n\n动画结束以后，会立即从结束状态跳回到起始状态。如果想让动画保持在结束状态，需要使用animation-fill-mode属性。\n\n* none: 默认值,回到动画没开始的状态;\n* backwoards: 让动画回到第一帧的状态;\n* both: 根据 animation-direction 轮流应用 forwards 和 backwards 规则.\n\n#### animation-direction\n\n动画循环播放时，每次都是从结束状态跳回到起始状态，再开始播放。animation-direction属性，可以改变这种行为。\n\n下面看一个例子，来说明如何使用animation-direction。假定有一个动画是这样定义的。\n\n\t@keyframes rainbow {\n\t  0% { background-color: yellow; }\n\t  100% { background: blue; }\n\t}\n默认情况下, animation-direction 等于 normal.\n\n此外，还可以等于取alternate、reverse、alternate-reverse等值。它们的含义见下图（假定动画连续播放三次）。\n\n![](http://www.ruanyifeng.com/blogimg/asset/201402/bg2014021401.png)\n\n#### animation 的各项属性\n\n\tdiv:hover {\n\t  animation: 1s 1s rainbow linear 3 forwards normal;\n\t}\n\n单独的属性:\n\n\tdiv:hover {\n\t  animation-name: rainbow;\n\t  animation-duration: 1s;\n\t  animation-timing-function: linear;\n\t  animation-delay: 1s;\n\t    animation-fill-mode:forwards;\n\t  animation-direction: normal;\n\t  animation-iteration-count: 3;\n}\n#### keyframes 的写法\n\n用于定义动画的各个状态:\n\n\t@keyframes rainbow {\n\t  0% { background: #c00 }\n\t  50% { background: orange }\n\t  100% { background: yellowgreen }\n\t}\n\n或者:\n\n\t@keyframes rainbow {\n\t  from { background: #c00 }\n\t  50% { background: orange }\n\t  to { background: yellowgreen }\n\t}\n如果省略某个状态，浏览器会自动推算中间状态，所以下面都是合法的写法。\n\n\n\t@keyframes rainbow {\n\t  50% { background: orange }\n\t  to { background: yellowgreen }\n\t}\n\t\n\t@keyframes rainbow {\n\t  to { background: yellowgreen }\n\t}\n\n甚至，可以把多个状态写在一行。\n\n\n\t@keyframes pound {\n\t  from，to { transform: none; }\n\t  50% { transform: scale(1.2); }\n\t}\n\n另外一点需要注意的是，浏览器从一个状态向另一个状态过渡，是平滑过渡。steps函数可以实现分步过渡。\n\n\t\n\tdiv:hover {\n\t  animation: 1s rainbow infinite steps(10);\n\t}\n\n#### animation-play-state\n\n如果想让动画保持突然终止时的状态，就要使用animation-play-state属性。\n\n\n\tdiv {\n\t    animation: spin 1s linear infinite;\n\t    animation-play-state: paused;\n\t}\n\t\n\tdiv:hover {\n\t  animation-play-state: running;\n\t}\n\n\t\n\n\n\n\n","source":"_posts/2018.11.19CSS-selector.md","raw":"---\ntitle: CSS 选择器/动画\ntags: [CSS]\ncategories: 知识 \n---\n\n## 一.基本选择器\n\n* 通用元素选择器(*)\n\n通用元素选择器,匹配任何元素;\n\n* 标签选择器(E)\n\n匹配所有使用 E 标签的元素;\n\n* class选择器(.class)\n\n匹配所有class属性中包含此class 的元素;\n\n* id选择器(#id)\n\n匹配所有id属性为此id的元素\n\n实例:\n\n\t* { margin:0; padding:0; }\n\t\n\tp { font-size:2em; }\n\t\n\t.info { background:#ff0; }\n\t\n\tp.info { background:#ff0; }\n\t\n\tp.info.error { color:#900; font-weight:bold; }\n\t\n\t#info { background:#ff0; }\n\t\n\tp#info { background:#ff0; }\n\n## 二.多元素选择器\n\n* 多元素选择器(E,F)\n\n同时匹配所有的E元素和F元素,中间用逗号分隔.\n\n* 后代元素选择器(E F)\n\n匹配所有属于 E 元素后代的F 元素,用空格分开.\n\n* 子元素选择器(E>F)\n\n匹配所有的E元素的子元素F.\n\n* 毗邻元素选择器(E+F)\n\n匹配所有紧随E元素之后的同级元素F.\n\n实例:\n\n\tdiv p { color:#f00; }\n\t\n\t#nav li { display:inline; }\n\t\n\t#nav a { font-weight:bold; }\n\t\n\tdiv > strong { color:#f00; }\n\t\n\tp + p { color:#f00; }\n\n\n\n\n\n## CSS 动画\n\n###  CSS transition\n\ntransition 指定状态变化所需要的时间,例如:\n\n\timg{\n\t    height:15px;\n\t    width:15px;\n\t    transition: 1s;\n\t}\n\t\n\timg:hover{\n\t    height: 450px;\n\t    width: 450px;\n\t}\n\n这样可以指定图片的访达过程需要1s🐸.\n\n#### 还可以指定 transition 使用的属性,比如只适用于 height:\n\n\timg{\n\t    transition: 1s height;\n\t}\n\n这样只有高度变化需要1s 实现,其他变化依然瞬间实现.\n\n#### transition-delay\n\n\timg{\n\t    transition: 1s height, 1s 1s width;\n\t}\n\n如上, width 在1s 以后才开始变化.\n\n#### transition-timing-function\n\n 状态变化速度,默认不是匀速的,而是逐渐放慢,称为 ease.\n\n\timg{\n\t    transition: 1s ease;\n\t}\n除了 ease 以外,还包括:\n\n* linear 匀速\n* ease-in 加速\n* ease-out 减速\n* cubic-bezier 函数: 自定义速度模式\n\n#### transition 的各项属性\n\n完整写法:\n\n\timg{\n\t    transition: 1s 1s height ease;\n\t}\n单独定义:\n\n\timg{\n\t    transition-property: height;\n\t    transition-duration: 1s;\n\t    transition-delay: 1s;\n\t    transition-timing-function: ease;\n\t}\n\n#### 使用注意\n\n* 各大浏览器都支持无前缀的 transition;\n* 不是所有的属性都支持 transition;\n* transition 必须明确状态;\n\n#### transition 的局限\n\n* 需要事件触发,无法在网页加载时自动生成;\n* 一次性,不能重发触发,除非一再触发;\n* 只能定义开始和结束状态,不能定义中间状态,即只有两个状态;\n* 一条 transition 只能定义一个属性的变化,不能涉及多个属性.\n\n### CSS animation\n\n#### 基本用法\n\n首先, css animation 需要制定动画一个周期持续时间,以及动画效果的名称.\n\t\n\tdiv:hover {\n\t  animation: 1s rainbow;\n\t}\n\n上面代码表示，当鼠标悬停在div元素上时，会产生名为rainbow的动画效果，持续时间为1秒。为此，我们还需要用keyframes关键字，定义rainbow效果。\n\n\t@keyframes rainbow {\n\t  0% { background: #c00; }\n\t  50% { background: orange; }\n\t  100% { background: yellowgreen; }\n\t}\n\n上面代码表示，rainbow效果一共有三个状态，分别为起始（0%）、中点（50%）和结束（100%）。如果有需要，完全可以插入更多状态。\n\n\n默认情况下，动画只播放一次。加入infinite关键字，可以让动画无限次播放。\n\n默认情况下，动画只播放一次。加入infinite关键字，可以让动画无限次播放。\n\n#### animation-fill-mode\n\n动画结束以后，会立即从结束状态跳回到起始状态。如果想让动画保持在结束状态，需要使用animation-fill-mode属性。\n\n* none: 默认值,回到动画没开始的状态;\n* backwoards: 让动画回到第一帧的状态;\n* both: 根据 animation-direction 轮流应用 forwards 和 backwards 规则.\n\n#### animation-direction\n\n动画循环播放时，每次都是从结束状态跳回到起始状态，再开始播放。animation-direction属性，可以改变这种行为。\n\n下面看一个例子，来说明如何使用animation-direction。假定有一个动画是这样定义的。\n\n\t@keyframes rainbow {\n\t  0% { background-color: yellow; }\n\t  100% { background: blue; }\n\t}\n默认情况下, animation-direction 等于 normal.\n\n此外，还可以等于取alternate、reverse、alternate-reverse等值。它们的含义见下图（假定动画连续播放三次）。\n\n![](http://www.ruanyifeng.com/blogimg/asset/201402/bg2014021401.png)\n\n#### animation 的各项属性\n\n\tdiv:hover {\n\t  animation: 1s 1s rainbow linear 3 forwards normal;\n\t}\n\n单独的属性:\n\n\tdiv:hover {\n\t  animation-name: rainbow;\n\t  animation-duration: 1s;\n\t  animation-timing-function: linear;\n\t  animation-delay: 1s;\n\t    animation-fill-mode:forwards;\n\t  animation-direction: normal;\n\t  animation-iteration-count: 3;\n}\n#### keyframes 的写法\n\n用于定义动画的各个状态:\n\n\t@keyframes rainbow {\n\t  0% { background: #c00 }\n\t  50% { background: orange }\n\t  100% { background: yellowgreen }\n\t}\n\n或者:\n\n\t@keyframes rainbow {\n\t  from { background: #c00 }\n\t  50% { background: orange }\n\t  to { background: yellowgreen }\n\t}\n如果省略某个状态，浏览器会自动推算中间状态，所以下面都是合法的写法。\n\n\n\t@keyframes rainbow {\n\t  50% { background: orange }\n\t  to { background: yellowgreen }\n\t}\n\t\n\t@keyframes rainbow {\n\t  to { background: yellowgreen }\n\t}\n\n甚至，可以把多个状态写在一行。\n\n\n\t@keyframes pound {\n\t  from，to { transform: none; }\n\t  50% { transform: scale(1.2); }\n\t}\n\n另外一点需要注意的是，浏览器从一个状态向另一个状态过渡，是平滑过渡。steps函数可以实现分步过渡。\n\n\t\n\tdiv:hover {\n\t  animation: 1s rainbow infinite steps(10);\n\t}\n\n#### animation-play-state\n\n如果想让动画保持突然终止时的状态，就要使用animation-play-state属性。\n\n\n\tdiv {\n\t    animation: spin 1s linear infinite;\n\t    animation-play-state: paused;\n\t}\n\t\n\tdiv:hover {\n\t  animation-play-state: running;\n\t}\n\n\t\n\n\n\n\n","slug":"2018.11.19CSS-selector","published":1,"date":"2018-11-19T08:49:25.499Z","updated":"2018-11-28T08:44:32.732Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwvh25960017w39z34ap3vaz","content":"<h2 id=\"一-基本选择器\"><a href=\"#一-基本选择器\" class=\"headerlink\" title=\"一.基本选择器\"></a>一.基本选择器</h2><ul>\n<li>通用元素选择器(*)</li>\n</ul>\n<p>通用元素选择器,匹配任何元素;</p>\n<ul>\n<li>标签选择器(E)</li>\n</ul>\n<p>匹配所有使用 E 标签的元素;</p>\n<ul>\n<li>class选择器(.class)</li>\n</ul>\n<p>匹配所有class属性中包含此class 的元素;</p>\n<ul>\n<li>id选择器(#id)</li>\n</ul>\n<p>匹配所有id属性为此id的元素</p>\n<p>实例:</p>\n<pre><code>* { margin:0; padding:0; }\n\np { font-size:2em; }\n\n.info { background:#ff0; }\n\np.info { background:#ff0; }\n\np.info.error { color:#900; font-weight:bold; }\n\n#info { background:#ff0; }\n\np#info { background:#ff0; }\n</code></pre><h2 id=\"二-多元素选择器\"><a href=\"#二-多元素选择器\" class=\"headerlink\" title=\"二.多元素选择器\"></a>二.多元素选择器</h2><ul>\n<li>多元素选择器(E,F)</li>\n</ul>\n<p>同时匹配所有的E元素和F元素,中间用逗号分隔.</p>\n<ul>\n<li>后代元素选择器(E F)</li>\n</ul>\n<p>匹配所有属于 E 元素后代的F 元素,用空格分开.</p>\n<ul>\n<li>子元素选择器(E&gt;F)</li>\n</ul>\n<p>匹配所有的E元素的子元素F.</p>\n<ul>\n<li>毗邻元素选择器(E+F)</li>\n</ul>\n<p>匹配所有紧随E元素之后的同级元素F.</p>\n<p>实例:</p>\n<pre><code>div p { color:#f00; }\n\n#nav li { display:inline; }\n\n#nav a { font-weight:bold; }\n\ndiv &gt; strong { color:#f00; }\n\np + p { color:#f00; }\n</code></pre><h2 id=\"CSS-动画\"><a href=\"#CSS-动画\" class=\"headerlink\" title=\"CSS 动画\"></a>CSS 动画</h2><h3 id=\"CSS-transition\"><a href=\"#CSS-transition\" class=\"headerlink\" title=\"CSS transition\"></a>CSS transition</h3><p>transition 指定状态变化所需要的时间,例如:</p>\n<pre><code>img{\n    height:15px;\n    width:15px;\n    transition: 1s;\n}\n\nimg:hover{\n    height: 450px;\n    width: 450px;\n}\n</code></pre><p>这样可以指定图片的访达过程需要1s🐸.</p>\n<h4 id=\"还可以指定-transition-使用的属性-比如只适用于-height\"><a href=\"#还可以指定-transition-使用的属性-比如只适用于-height\" class=\"headerlink\" title=\"还可以指定 transition 使用的属性,比如只适用于 height:\"></a>还可以指定 transition 使用的属性,比如只适用于 height:</h4><pre><code>img{\n    transition: 1s height;\n}\n</code></pre><p>这样只有高度变化需要1s 实现,其他变化依然瞬间实现.</p>\n<h4 id=\"transition-delay\"><a href=\"#transition-delay\" class=\"headerlink\" title=\"transition-delay\"></a>transition-delay</h4><pre><code>img{\n    transition: 1s height, 1s 1s width;\n}\n</code></pre><p>如上, width 在1s 以后才开始变化.</p>\n<h4 id=\"transition-timing-function\"><a href=\"#transition-timing-function\" class=\"headerlink\" title=\"transition-timing-function\"></a>transition-timing-function</h4><p> 状态变化速度,默认不是匀速的,而是逐渐放慢,称为 ease.</p>\n<pre><code>img{\n    transition: 1s ease;\n}\n</code></pre><p>除了 ease 以外,还包括:</p>\n<ul>\n<li>linear 匀速</li>\n<li>ease-in 加速</li>\n<li>ease-out 减速</li>\n<li>cubic-bezier 函数: 自定义速度模式</li>\n</ul>\n<h4 id=\"transition-的各项属性\"><a href=\"#transition-的各项属性\" class=\"headerlink\" title=\"transition 的各项属性\"></a>transition 的各项属性</h4><p>完整写法:</p>\n<pre><code>img{\n    transition: 1s 1s height ease;\n}\n</code></pre><p>单独定义:</p>\n<pre><code>img{\n    transition-property: height;\n    transition-duration: 1s;\n    transition-delay: 1s;\n    transition-timing-function: ease;\n}\n</code></pre><h4 id=\"使用注意\"><a href=\"#使用注意\" class=\"headerlink\" title=\"使用注意\"></a>使用注意</h4><ul>\n<li>各大浏览器都支持无前缀的 transition;</li>\n<li>不是所有的属性都支持 transition;</li>\n<li>transition 必须明确状态;</li>\n</ul>\n<h4 id=\"transition-的局限\"><a href=\"#transition-的局限\" class=\"headerlink\" title=\"transition 的局限\"></a>transition 的局限</h4><ul>\n<li>需要事件触发,无法在网页加载时自动生成;</li>\n<li>一次性,不能重发触发,除非一再触发;</li>\n<li>只能定义开始和结束状态,不能定义中间状态,即只有两个状态;</li>\n<li>一条 transition 只能定义一个属性的变化,不能涉及多个属性.</li>\n</ul>\n<h3 id=\"CSS-animation\"><a href=\"#CSS-animation\" class=\"headerlink\" title=\"CSS animation\"></a>CSS animation</h3><h4 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h4><p>首先, css animation 需要制定动画一个周期持续时间,以及动画效果的名称.</p>\n<pre><code>div:hover {\n  animation: 1s rainbow;\n}\n</code></pre><p>上面代码表示，当鼠标悬停在div元素上时，会产生名为rainbow的动画效果，持续时间为1秒。为此，我们还需要用keyframes关键字，定义rainbow效果。</p>\n<pre><code>@keyframes rainbow {\n  0% { background: #c00; }\n  50% { background: orange; }\n  100% { background: yellowgreen; }\n}\n</code></pre><p>上面代码表示，rainbow效果一共有三个状态，分别为起始（0%）、中点（50%）和结束（100%）。如果有需要，完全可以插入更多状态。</p>\n<p>默认情况下，动画只播放一次。加入infinite关键字，可以让动画无限次播放。</p>\n<p>默认情况下，动画只播放一次。加入infinite关键字，可以让动画无限次播放。</p>\n<h4 id=\"animation-fill-mode\"><a href=\"#animation-fill-mode\" class=\"headerlink\" title=\"animation-fill-mode\"></a>animation-fill-mode</h4><p>动画结束以后，会立即从结束状态跳回到起始状态。如果想让动画保持在结束状态，需要使用animation-fill-mode属性。</p>\n<ul>\n<li>none: 默认值,回到动画没开始的状态;</li>\n<li>backwoards: 让动画回到第一帧的状态;</li>\n<li>both: 根据 animation-direction 轮流应用 forwards 和 backwards 规则.</li>\n</ul>\n<h4 id=\"animation-direction\"><a href=\"#animation-direction\" class=\"headerlink\" title=\"animation-direction\"></a>animation-direction</h4><p>动画循环播放时，每次都是从结束状态跳回到起始状态，再开始播放。animation-direction属性，可以改变这种行为。</p>\n<p>下面看一个例子，来说明如何使用animation-direction。假定有一个动画是这样定义的。</p>\n<pre><code>@keyframes rainbow {\n  0% { background-color: yellow; }\n  100% { background: blue; }\n}\n</code></pre><p>默认情况下, animation-direction 等于 normal.</p>\n<p>此外，还可以等于取alternate、reverse、alternate-reverse等值。它们的含义见下图（假定动画连续播放三次）。</p>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/201402/bg2014021401.png\" alt=\"\"></p>\n<h4 id=\"animation-的各项属性\"><a href=\"#animation-的各项属性\" class=\"headerlink\" title=\"animation 的各项属性\"></a>animation 的各项属性</h4><pre><code>div:hover {\n  animation: 1s 1s rainbow linear 3 forwards normal;\n}\n</code></pre><p>单独的属性:</p>\n<pre><code>div:hover {\n  animation-name: rainbow;\n  animation-duration: 1s;\n  animation-timing-function: linear;\n  animation-delay: 1s;\n    animation-fill-mode:forwards;\n  animation-direction: normal;\n  animation-iteration-count: 3;\n</code></pre><p>}</p>\n<h4 id=\"keyframes-的写法\"><a href=\"#keyframes-的写法\" class=\"headerlink\" title=\"keyframes 的写法\"></a>keyframes 的写法</h4><p>用于定义动画的各个状态:</p>\n<pre><code>@keyframes rainbow {\n  0% { background: #c00 }\n  50% { background: orange }\n  100% { background: yellowgreen }\n}\n</code></pre><p>或者:</p>\n<pre><code>@keyframes rainbow {\n  from { background: #c00 }\n  50% { background: orange }\n  to { background: yellowgreen }\n}\n</code></pre><p>如果省略某个状态，浏览器会自动推算中间状态，所以下面都是合法的写法。</p>\n<pre><code>@keyframes rainbow {\n  50% { background: orange }\n  to { background: yellowgreen }\n}\n\n@keyframes rainbow {\n  to { background: yellowgreen }\n}\n</code></pre><p>甚至，可以把多个状态写在一行。</p>\n<pre><code>@keyframes pound {\n  from，to { transform: none; }\n  50% { transform: scale(1.2); }\n}\n</code></pre><p>另外一点需要注意的是，浏览器从一个状态向另一个状态过渡，是平滑过渡。steps函数可以实现分步过渡。</p>\n<pre><code>div:hover {\n  animation: 1s rainbow infinite steps(10);\n}\n</code></pre><h4 id=\"animation-play-state\"><a href=\"#animation-play-state\" class=\"headerlink\" title=\"animation-play-state\"></a>animation-play-state</h4><p>如果想让动画保持突然终止时的状态，就要使用animation-play-state属性。</p>\n<pre><code>div {\n    animation: spin 1s linear infinite;\n    animation-play-state: paused;\n}\n\ndiv:hover {\n  animation-play-state: running;\n}\n</code></pre>","excerpt":"","more":"<h2 id=\"一-基本选择器\"><a href=\"#一-基本选择器\" class=\"headerlink\" title=\"一.基本选择器\"></a>一.基本选择器</h2><ul>\n<li>通用元素选择器(*)</li>\n</ul>\n<p>通用元素选择器,匹配任何元素;</p>\n<ul>\n<li>标签选择器(E)</li>\n</ul>\n<p>匹配所有使用 E 标签的元素;</p>\n<ul>\n<li>class选择器(.class)</li>\n</ul>\n<p>匹配所有class属性中包含此class 的元素;</p>\n<ul>\n<li>id选择器(#id)</li>\n</ul>\n<p>匹配所有id属性为此id的元素</p>\n<p>实例:</p>\n<pre><code>* { margin:0; padding:0; }\n\np { font-size:2em; }\n\n.info { background:#ff0; }\n\np.info { background:#ff0; }\n\np.info.error { color:#900; font-weight:bold; }\n\n#info { background:#ff0; }\n\np#info { background:#ff0; }\n</code></pre><h2 id=\"二-多元素选择器\"><a href=\"#二-多元素选择器\" class=\"headerlink\" title=\"二.多元素选择器\"></a>二.多元素选择器</h2><ul>\n<li>多元素选择器(E,F)</li>\n</ul>\n<p>同时匹配所有的E元素和F元素,中间用逗号分隔.</p>\n<ul>\n<li>后代元素选择器(E F)</li>\n</ul>\n<p>匹配所有属于 E 元素后代的F 元素,用空格分开.</p>\n<ul>\n<li>子元素选择器(E&gt;F)</li>\n</ul>\n<p>匹配所有的E元素的子元素F.</p>\n<ul>\n<li>毗邻元素选择器(E+F)</li>\n</ul>\n<p>匹配所有紧随E元素之后的同级元素F.</p>\n<p>实例:</p>\n<pre><code>div p { color:#f00; }\n\n#nav li { display:inline; }\n\n#nav a { font-weight:bold; }\n\ndiv &gt; strong { color:#f00; }\n\np + p { color:#f00; }\n</code></pre><h2 id=\"CSS-动画\"><a href=\"#CSS-动画\" class=\"headerlink\" title=\"CSS 动画\"></a>CSS 动画</h2><h3 id=\"CSS-transition\"><a href=\"#CSS-transition\" class=\"headerlink\" title=\"CSS transition\"></a>CSS transition</h3><p>transition 指定状态变化所需要的时间,例如:</p>\n<pre><code>img{\n    height:15px;\n    width:15px;\n    transition: 1s;\n}\n\nimg:hover{\n    height: 450px;\n    width: 450px;\n}\n</code></pre><p>这样可以指定图片的访达过程需要1s🐸.</p>\n<h4 id=\"还可以指定-transition-使用的属性-比如只适用于-height\"><a href=\"#还可以指定-transition-使用的属性-比如只适用于-height\" class=\"headerlink\" title=\"还可以指定 transition 使用的属性,比如只适用于 height:\"></a>还可以指定 transition 使用的属性,比如只适用于 height:</h4><pre><code>img{\n    transition: 1s height;\n}\n</code></pre><p>这样只有高度变化需要1s 实现,其他变化依然瞬间实现.</p>\n<h4 id=\"transition-delay\"><a href=\"#transition-delay\" class=\"headerlink\" title=\"transition-delay\"></a>transition-delay</h4><pre><code>img{\n    transition: 1s height, 1s 1s width;\n}\n</code></pre><p>如上, width 在1s 以后才开始变化.</p>\n<h4 id=\"transition-timing-function\"><a href=\"#transition-timing-function\" class=\"headerlink\" title=\"transition-timing-function\"></a>transition-timing-function</h4><p> 状态变化速度,默认不是匀速的,而是逐渐放慢,称为 ease.</p>\n<pre><code>img{\n    transition: 1s ease;\n}\n</code></pre><p>除了 ease 以外,还包括:</p>\n<ul>\n<li>linear 匀速</li>\n<li>ease-in 加速</li>\n<li>ease-out 减速</li>\n<li>cubic-bezier 函数: 自定义速度模式</li>\n</ul>\n<h4 id=\"transition-的各项属性\"><a href=\"#transition-的各项属性\" class=\"headerlink\" title=\"transition 的各项属性\"></a>transition 的各项属性</h4><p>完整写法:</p>\n<pre><code>img{\n    transition: 1s 1s height ease;\n}\n</code></pre><p>单独定义:</p>\n<pre><code>img{\n    transition-property: height;\n    transition-duration: 1s;\n    transition-delay: 1s;\n    transition-timing-function: ease;\n}\n</code></pre><h4 id=\"使用注意\"><a href=\"#使用注意\" class=\"headerlink\" title=\"使用注意\"></a>使用注意</h4><ul>\n<li>各大浏览器都支持无前缀的 transition;</li>\n<li>不是所有的属性都支持 transition;</li>\n<li>transition 必须明确状态;</li>\n</ul>\n<h4 id=\"transition-的局限\"><a href=\"#transition-的局限\" class=\"headerlink\" title=\"transition 的局限\"></a>transition 的局限</h4><ul>\n<li>需要事件触发,无法在网页加载时自动生成;</li>\n<li>一次性,不能重发触发,除非一再触发;</li>\n<li>只能定义开始和结束状态,不能定义中间状态,即只有两个状态;</li>\n<li>一条 transition 只能定义一个属性的变化,不能涉及多个属性.</li>\n</ul>\n<h3 id=\"CSS-animation\"><a href=\"#CSS-animation\" class=\"headerlink\" title=\"CSS animation\"></a>CSS animation</h3><h4 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h4><p>首先, css animation 需要制定动画一个周期持续时间,以及动画效果的名称.</p>\n<pre><code>div:hover {\n  animation: 1s rainbow;\n}\n</code></pre><p>上面代码表示，当鼠标悬停在div元素上时，会产生名为rainbow的动画效果，持续时间为1秒。为此，我们还需要用keyframes关键字，定义rainbow效果。</p>\n<pre><code>@keyframes rainbow {\n  0% { background: #c00; }\n  50% { background: orange; }\n  100% { background: yellowgreen; }\n}\n</code></pre><p>上面代码表示，rainbow效果一共有三个状态，分别为起始（0%）、中点（50%）和结束（100%）。如果有需要，完全可以插入更多状态。</p>\n<p>默认情况下，动画只播放一次。加入infinite关键字，可以让动画无限次播放。</p>\n<p>默认情况下，动画只播放一次。加入infinite关键字，可以让动画无限次播放。</p>\n<h4 id=\"animation-fill-mode\"><a href=\"#animation-fill-mode\" class=\"headerlink\" title=\"animation-fill-mode\"></a>animation-fill-mode</h4><p>动画结束以后，会立即从结束状态跳回到起始状态。如果想让动画保持在结束状态，需要使用animation-fill-mode属性。</p>\n<ul>\n<li>none: 默认值,回到动画没开始的状态;</li>\n<li>backwoards: 让动画回到第一帧的状态;</li>\n<li>both: 根据 animation-direction 轮流应用 forwards 和 backwards 规则.</li>\n</ul>\n<h4 id=\"animation-direction\"><a href=\"#animation-direction\" class=\"headerlink\" title=\"animation-direction\"></a>animation-direction</h4><p>动画循环播放时，每次都是从结束状态跳回到起始状态，再开始播放。animation-direction属性，可以改变这种行为。</p>\n<p>下面看一个例子，来说明如何使用animation-direction。假定有一个动画是这样定义的。</p>\n<pre><code>@keyframes rainbow {\n  0% { background-color: yellow; }\n  100% { background: blue; }\n}\n</code></pre><p>默认情况下, animation-direction 等于 normal.</p>\n<p>此外，还可以等于取alternate、reverse、alternate-reverse等值。它们的含义见下图（假定动画连续播放三次）。</p>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/201402/bg2014021401.png\" alt=\"\"></p>\n<h4 id=\"animation-的各项属性\"><a href=\"#animation-的各项属性\" class=\"headerlink\" title=\"animation 的各项属性\"></a>animation 的各项属性</h4><pre><code>div:hover {\n  animation: 1s 1s rainbow linear 3 forwards normal;\n}\n</code></pre><p>单独的属性:</p>\n<pre><code>div:hover {\n  animation-name: rainbow;\n  animation-duration: 1s;\n  animation-timing-function: linear;\n  animation-delay: 1s;\n    animation-fill-mode:forwards;\n  animation-direction: normal;\n  animation-iteration-count: 3;\n</code></pre><p>}</p>\n<h4 id=\"keyframes-的写法\"><a href=\"#keyframes-的写法\" class=\"headerlink\" title=\"keyframes 的写法\"></a>keyframes 的写法</h4><p>用于定义动画的各个状态:</p>\n<pre><code>@keyframes rainbow {\n  0% { background: #c00 }\n  50% { background: orange }\n  100% { background: yellowgreen }\n}\n</code></pre><p>或者:</p>\n<pre><code>@keyframes rainbow {\n  from { background: #c00 }\n  50% { background: orange }\n  to { background: yellowgreen }\n}\n</code></pre><p>如果省略某个状态，浏览器会自动推算中间状态，所以下面都是合法的写法。</p>\n<pre><code>@keyframes rainbow {\n  50% { background: orange }\n  to { background: yellowgreen }\n}\n\n@keyframes rainbow {\n  to { background: yellowgreen }\n}\n</code></pre><p>甚至，可以把多个状态写在一行。</p>\n<pre><code>@keyframes pound {\n  from，to { transform: none; }\n  50% { transform: scale(1.2); }\n}\n</code></pre><p>另外一点需要注意的是，浏览器从一个状态向另一个状态过渡，是平滑过渡。steps函数可以实现分步过渡。</p>\n<pre><code>div:hover {\n  animation: 1s rainbow infinite steps(10);\n}\n</code></pre><h4 id=\"animation-play-state\"><a href=\"#animation-play-state\" class=\"headerlink\" title=\"animation-play-state\"></a>animation-play-state</h4><p>如果想让动画保持突然终止时的状态，就要使用animation-play-state属性。</p>\n<pre><code>div {\n    animation: spin 1s linear infinite;\n    animation-play-state: paused;\n}\n\ndiv:hover {\n  animation-play-state: running;\n}\n</code></pre>"},{"title":"语义化版本号","_content":"\n## 概述\n\n[Semmantic Versioning](https://semver.org/lang/zh-CN/)是由github起草的具有指导意义的,统一的版本号表示规则:\n\n* 软件的版本通常由三位组成,形如: X.Y.Z(主版本号/次版本号/修订号).\n\n* 版本是严格递增的,例如: 16.2.0 -> 16.3.0 -> 16.3.1;\n* 在发布重要版本时,可以发布alpha,beta,rc等现行版本;\n* alpha 和 rc 等修饰版本的关键字后面可以加上次数和meta信息.\n\n## 版本格式\n\n* 主版本号(major):当你做了不兼容的 API 修改;\n* 次版本号(minor): 当你做了向下兼容的功能性新增,可以理解为 feature 版本;\n* 修订号(Patch):当你做了向下兼容的问题修正,可以理解为bug fix 版本.\n\n## 先行版本\n\n当要发布大版本或者核心的Feature时，但是又不能保证这个版本的功能 100% 正常。这个时候就需要通过发布先行版本。比较常见的先行版本包括：内测版、灰度版本了和RC版本。Semver规范中使用alpha、beta、rc(以前叫做gama)来修饰即将要发布的版本。它们的含义是：\n\n* alpha:内部版本;\n* beta:公测版本:\n* rc:即release candiate,正式版本的候选版本\n\n比如：1.0.0-alpha.0, 1.0.0-alpha.1, 1.0.0-beta.0, 1.0.0-rc.0, 1.0.p-rc.1 等版本。alpha, beta, rc后需要带上次数信息。\n\n## 版本发布准则\n\n* 标准的版本号必须按照XYZ的格式,并且XYZ为飞负的整数,禁止在数字前方补0,版本发布号要严格递增;\n* 某个软件版本发布后,任何修改都必须以新版本发行;\n* 1.0.0用于界定公共API,当你的软件发布到了正式环境,或者有稳定的API时,就可以发布1.0.0版本了;\n* 版本的有限层级指的是不同版本在排序时如何比较.判断优先级时,必须把版本依照顺序拆分为主板本号,次版本号,修订号和先行版本号后进行比较.\n\n## NPM 包依赖\n\n当执行:\n\n\tnpm install package -s\n\n来安装第三方包时,npm首先会安装包的最新版本,然后把包的名称以及版本号写在package.json文件中.\n\n### 指定可用的版本号范围\n\n#### 仅更新修复版本\n\n* 最简写法: 1.0\n* 使用通配符的写法: 1.0.x\n* 使用模糊符的写法: ~1.0.4(大于等于1.0.4 且小于1.1.0)\n\n#### 跟进每个小版本更新\n\n* 最简写法: 1\n* 使用通配符: 1.x 1.x.x\n* 使用模糊符: ^1.0.4(大于等于1.0.4且小于2.0.0)\n\n#### 始终升级到最新版\n\n* 最简写法: *\n* 使用通配符的写法: *\n* 使用模糊符的写法: *(大于等于0.0.0)\n\n## NPM 包依赖\n\n通常我们发布一个包到npm仓库时，我们的做法是先修改 package.json 为某个版本，然后执行 npm publish 命令。手动修改版本号的做法建立在你对Semver规范特别熟悉的基础之上，否则可能会造成版本混乱。npm 考虑到了这点，它提供了相关的命令来让我们更好的遵从Semver规范：\n\n\n* 升级补丁版本号: npm version patch\n* 升级小版本号: npm version minor\n* 升级大版本号: npm version major\n\n当执行npm publish 时,会首先将当前版本发布到npm registry,然后更新dist-tags.latest的值为新版本.\n\n当执行 npm publish --tag=next 时，会首先将当前版本发布到 npm registry，并且更新 dist-tags.next 的值为新版本。这里的 next 可以是任意有意义的命名（比如：v1.x、v2.x 等等）","source":"_posts/2018.11.20semver.md","raw":"---\n\ntitle: 语义化版本号\ntags: [Semver]\ncategories: 知识\n---\n\n## 概述\n\n[Semmantic Versioning](https://semver.org/lang/zh-CN/)是由github起草的具有指导意义的,统一的版本号表示规则:\n\n* 软件的版本通常由三位组成,形如: X.Y.Z(主版本号/次版本号/修订号).\n\n* 版本是严格递增的,例如: 16.2.0 -> 16.3.0 -> 16.3.1;\n* 在发布重要版本时,可以发布alpha,beta,rc等现行版本;\n* alpha 和 rc 等修饰版本的关键字后面可以加上次数和meta信息.\n\n## 版本格式\n\n* 主版本号(major):当你做了不兼容的 API 修改;\n* 次版本号(minor): 当你做了向下兼容的功能性新增,可以理解为 feature 版本;\n* 修订号(Patch):当你做了向下兼容的问题修正,可以理解为bug fix 版本.\n\n## 先行版本\n\n当要发布大版本或者核心的Feature时，但是又不能保证这个版本的功能 100% 正常。这个时候就需要通过发布先行版本。比较常见的先行版本包括：内测版、灰度版本了和RC版本。Semver规范中使用alpha、beta、rc(以前叫做gama)来修饰即将要发布的版本。它们的含义是：\n\n* alpha:内部版本;\n* beta:公测版本:\n* rc:即release candiate,正式版本的候选版本\n\n比如：1.0.0-alpha.0, 1.0.0-alpha.1, 1.0.0-beta.0, 1.0.0-rc.0, 1.0.p-rc.1 等版本。alpha, beta, rc后需要带上次数信息。\n\n## 版本发布准则\n\n* 标准的版本号必须按照XYZ的格式,并且XYZ为飞负的整数,禁止在数字前方补0,版本发布号要严格递增;\n* 某个软件版本发布后,任何修改都必须以新版本发行;\n* 1.0.0用于界定公共API,当你的软件发布到了正式环境,或者有稳定的API时,就可以发布1.0.0版本了;\n* 版本的有限层级指的是不同版本在排序时如何比较.判断优先级时,必须把版本依照顺序拆分为主板本号,次版本号,修订号和先行版本号后进行比较.\n\n## NPM 包依赖\n\n当执行:\n\n\tnpm install package -s\n\n来安装第三方包时,npm首先会安装包的最新版本,然后把包的名称以及版本号写在package.json文件中.\n\n### 指定可用的版本号范围\n\n#### 仅更新修复版本\n\n* 最简写法: 1.0\n* 使用通配符的写法: 1.0.x\n* 使用模糊符的写法: ~1.0.4(大于等于1.0.4 且小于1.1.0)\n\n#### 跟进每个小版本更新\n\n* 最简写法: 1\n* 使用通配符: 1.x 1.x.x\n* 使用模糊符: ^1.0.4(大于等于1.0.4且小于2.0.0)\n\n#### 始终升级到最新版\n\n* 最简写法: *\n* 使用通配符的写法: *\n* 使用模糊符的写法: *(大于等于0.0.0)\n\n## NPM 包依赖\n\n通常我们发布一个包到npm仓库时，我们的做法是先修改 package.json 为某个版本，然后执行 npm publish 命令。手动修改版本号的做法建立在你对Semver规范特别熟悉的基础之上，否则可能会造成版本混乱。npm 考虑到了这点，它提供了相关的命令来让我们更好的遵从Semver规范：\n\n\n* 升级补丁版本号: npm version patch\n* 升级小版本号: npm version minor\n* 升级大版本号: npm version major\n\n当执行npm publish 时,会首先将当前版本发布到npm registry,然后更新dist-tags.latest的值为新版本.\n\n当执行 npm publish --tag=next 时，会首先将当前版本发布到 npm registry，并且更新 dist-tags.next 的值为新版本。这里的 next 可以是任意有意义的命名（比如：v1.x、v2.x 等等）","slug":"2018.11.20semver","published":1,"date":"2018-11-20T07:05:56.816Z","updated":"2018-11-20T08:32:35.345Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwvh25960019w39zi4wfxg6a","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p><a href=\"https://semver.org/lang/zh-CN/\" target=\"_blank\" rel=\"external\">Semmantic Versioning</a>是由github起草的具有指导意义的,统一的版本号表示规则:</p>\n<ul>\n<li><p>软件的版本通常由三位组成,形如: X.Y.Z(主版本号/次版本号/修订号).</p>\n</li>\n<li><p>版本是严格递增的,例如: 16.2.0 -&gt; 16.3.0 -&gt; 16.3.1;</p>\n</li>\n<li>在发布重要版本时,可以发布alpha,beta,rc等现行版本;</li>\n<li>alpha 和 rc 等修饰版本的关键字后面可以加上次数和meta信息.</li>\n</ul>\n<h2 id=\"版本格式\"><a href=\"#版本格式\" class=\"headerlink\" title=\"版本格式\"></a>版本格式</h2><ul>\n<li>主版本号(major):当你做了不兼容的 API 修改;</li>\n<li>次版本号(minor): 当你做了向下兼容的功能性新增,可以理解为 feature 版本;</li>\n<li>修订号(Patch):当你做了向下兼容的问题修正,可以理解为bug fix 版本.</li>\n</ul>\n<h2 id=\"先行版本\"><a href=\"#先行版本\" class=\"headerlink\" title=\"先行版本\"></a>先行版本</h2><p>当要发布大版本或者核心的Feature时，但是又不能保证这个版本的功能 100% 正常。这个时候就需要通过发布先行版本。比较常见的先行版本包括：内测版、灰度版本了和RC版本。Semver规范中使用alpha、beta、rc(以前叫做gama)来修饰即将要发布的版本。它们的含义是：</p>\n<ul>\n<li>alpha:内部版本;</li>\n<li>beta:公测版本:</li>\n<li>rc:即release candiate,正式版本的候选版本</li>\n</ul>\n<p>比如：1.0.0-alpha.0, 1.0.0-alpha.1, 1.0.0-beta.0, 1.0.0-rc.0, 1.0.p-rc.1 等版本。alpha, beta, rc后需要带上次数信息。</p>\n<h2 id=\"版本发布准则\"><a href=\"#版本发布准则\" class=\"headerlink\" title=\"版本发布准则\"></a>版本发布准则</h2><ul>\n<li>标准的版本号必须按照XYZ的格式,并且XYZ为飞负的整数,禁止在数字前方补0,版本发布号要严格递增;</li>\n<li>某个软件版本发布后,任何修改都必须以新版本发行;</li>\n<li>1.0.0用于界定公共API,当你的软件发布到了正式环境,或者有稳定的API时,就可以发布1.0.0版本了;</li>\n<li>版本的有限层级指的是不同版本在排序时如何比较.判断优先级时,必须把版本依照顺序拆分为主板本号,次版本号,修订号和先行版本号后进行比较.</li>\n</ul>\n<h2 id=\"NPM-包依赖\"><a href=\"#NPM-包依赖\" class=\"headerlink\" title=\"NPM 包依赖\"></a>NPM 包依赖</h2><p>当执行:</p>\n<pre><code>npm install package -s\n</code></pre><p>来安装第三方包时,npm首先会安装包的最新版本,然后把包的名称以及版本号写在package.json文件中.</p>\n<h3 id=\"指定可用的版本号范围\"><a href=\"#指定可用的版本号范围\" class=\"headerlink\" title=\"指定可用的版本号范围\"></a>指定可用的版本号范围</h3><h4 id=\"仅更新修复版本\"><a href=\"#仅更新修复版本\" class=\"headerlink\" title=\"仅更新修复版本\"></a>仅更新修复版本</h4><ul>\n<li>最简写法: 1.0</li>\n<li>使用通配符的写法: 1.0.x</li>\n<li>使用模糊符的写法: ~1.0.4(大于等于1.0.4 且小于1.1.0)</li>\n</ul>\n<h4 id=\"跟进每个小版本更新\"><a href=\"#跟进每个小版本更新\" class=\"headerlink\" title=\"跟进每个小版本更新\"></a>跟进每个小版本更新</h4><ul>\n<li>最简写法: 1</li>\n<li>使用通配符: 1.x 1.x.x</li>\n<li>使用模糊符: ^1.0.4(大于等于1.0.4且小于2.0.0)</li>\n</ul>\n<h4 id=\"始终升级到最新版\"><a href=\"#始终升级到最新版\" class=\"headerlink\" title=\"始终升级到最新版\"></a>始终升级到最新版</h4><ul>\n<li>最简写法: *</li>\n<li>使用通配符的写法: *</li>\n<li>使用模糊符的写法: *(大于等于0.0.0)</li>\n</ul>\n<h2 id=\"NPM-包依赖-1\"><a href=\"#NPM-包依赖-1\" class=\"headerlink\" title=\"NPM 包依赖\"></a>NPM 包依赖</h2><p>通常我们发布一个包到npm仓库时，我们的做法是先修改 package.json 为某个版本，然后执行 npm publish 命令。手动修改版本号的做法建立在你对Semver规范特别熟悉的基础之上，否则可能会造成版本混乱。npm 考虑到了这点，它提供了相关的命令来让我们更好的遵从Semver规范：</p>\n<ul>\n<li>升级补丁版本号: npm version patch</li>\n<li>升级小版本号: npm version minor</li>\n<li>升级大版本号: npm version major</li>\n</ul>\n<p>当执行npm publish 时,会首先将当前版本发布到npm registry,然后更新dist-tags.latest的值为新版本.</p>\n<p>当执行 npm publish –tag=next 时，会首先将当前版本发布到 npm registry，并且更新 dist-tags.next 的值为新版本。这里的 next 可以是任意有意义的命名（比如：v1.x、v2.x 等等）</p>\n","excerpt":"","more":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p><a href=\"https://semver.org/lang/zh-CN/\">Semmantic Versioning</a>是由github起草的具有指导意义的,统一的版本号表示规则:</p>\n<ul>\n<li><p>软件的版本通常由三位组成,形如: X.Y.Z(主版本号/次版本号/修订号).</p>\n</li>\n<li><p>版本是严格递增的,例如: 16.2.0 -&gt; 16.3.0 -&gt; 16.3.1;</p>\n</li>\n<li>在发布重要版本时,可以发布alpha,beta,rc等现行版本;</li>\n<li>alpha 和 rc 等修饰版本的关键字后面可以加上次数和meta信息.</li>\n</ul>\n<h2 id=\"版本格式\"><a href=\"#版本格式\" class=\"headerlink\" title=\"版本格式\"></a>版本格式</h2><ul>\n<li>主版本号(major):当你做了不兼容的 API 修改;</li>\n<li>次版本号(minor): 当你做了向下兼容的功能性新增,可以理解为 feature 版本;</li>\n<li>修订号(Patch):当你做了向下兼容的问题修正,可以理解为bug fix 版本.</li>\n</ul>\n<h2 id=\"先行版本\"><a href=\"#先行版本\" class=\"headerlink\" title=\"先行版本\"></a>先行版本</h2><p>当要发布大版本或者核心的Feature时，但是又不能保证这个版本的功能 100% 正常。这个时候就需要通过发布先行版本。比较常见的先行版本包括：内测版、灰度版本了和RC版本。Semver规范中使用alpha、beta、rc(以前叫做gama)来修饰即将要发布的版本。它们的含义是：</p>\n<ul>\n<li>alpha:内部版本;</li>\n<li>beta:公测版本:</li>\n<li>rc:即release candiate,正式版本的候选版本</li>\n</ul>\n<p>比如：1.0.0-alpha.0, 1.0.0-alpha.1, 1.0.0-beta.0, 1.0.0-rc.0, 1.0.p-rc.1 等版本。alpha, beta, rc后需要带上次数信息。</p>\n<h2 id=\"版本发布准则\"><a href=\"#版本发布准则\" class=\"headerlink\" title=\"版本发布准则\"></a>版本发布准则</h2><ul>\n<li>标准的版本号必须按照XYZ的格式,并且XYZ为飞负的整数,禁止在数字前方补0,版本发布号要严格递增;</li>\n<li>某个软件版本发布后,任何修改都必须以新版本发行;</li>\n<li>1.0.0用于界定公共API,当你的软件发布到了正式环境,或者有稳定的API时,就可以发布1.0.0版本了;</li>\n<li>版本的有限层级指的是不同版本在排序时如何比较.判断优先级时,必须把版本依照顺序拆分为主板本号,次版本号,修订号和先行版本号后进行比较.</li>\n</ul>\n<h2 id=\"NPM-包依赖\"><a href=\"#NPM-包依赖\" class=\"headerlink\" title=\"NPM 包依赖\"></a>NPM 包依赖</h2><p>当执行:</p>\n<pre><code>npm install package -s\n</code></pre><p>来安装第三方包时,npm首先会安装包的最新版本,然后把包的名称以及版本号写在package.json文件中.</p>\n<h3 id=\"指定可用的版本号范围\"><a href=\"#指定可用的版本号范围\" class=\"headerlink\" title=\"指定可用的版本号范围\"></a>指定可用的版本号范围</h3><h4 id=\"仅更新修复版本\"><a href=\"#仅更新修复版本\" class=\"headerlink\" title=\"仅更新修复版本\"></a>仅更新修复版本</h4><ul>\n<li>最简写法: 1.0</li>\n<li>使用通配符的写法: 1.0.x</li>\n<li>使用模糊符的写法: ~1.0.4(大于等于1.0.4 且小于1.1.0)</li>\n</ul>\n<h4 id=\"跟进每个小版本更新\"><a href=\"#跟进每个小版本更新\" class=\"headerlink\" title=\"跟进每个小版本更新\"></a>跟进每个小版本更新</h4><ul>\n<li>最简写法: 1</li>\n<li>使用通配符: 1.x 1.x.x</li>\n<li>使用模糊符: ^1.0.4(大于等于1.0.4且小于2.0.0)</li>\n</ul>\n<h4 id=\"始终升级到最新版\"><a href=\"#始终升级到最新版\" class=\"headerlink\" title=\"始终升级到最新版\"></a>始终升级到最新版</h4><ul>\n<li>最简写法: *</li>\n<li>使用通配符的写法: *</li>\n<li>使用模糊符的写法: *(大于等于0.0.0)</li>\n</ul>\n<h2 id=\"NPM-包依赖-1\"><a href=\"#NPM-包依赖-1\" class=\"headerlink\" title=\"NPM 包依赖\"></a>NPM 包依赖</h2><p>通常我们发布一个包到npm仓库时，我们的做法是先修改 package.json 为某个版本，然后执行 npm publish 命令。手动修改版本号的做法建立在你对Semver规范特别熟悉的基础之上，否则可能会造成版本混乱。npm 考虑到了这点，它提供了相关的命令来让我们更好的遵从Semver规范：</p>\n<ul>\n<li>升级补丁版本号: npm version patch</li>\n<li>升级小版本号: npm version minor</li>\n<li>升级大版本号: npm version major</li>\n</ul>\n<p>当执行npm publish 时,会首先将当前版本发布到npm registry,然后更新dist-tags.latest的值为新版本.</p>\n<p>当执行 npm publish –tag=next 时，会首先将当前版本发布到 npm registry，并且更新 dist-tags.next 的值为新版本。这里的 next 可以是任意有意义的命名（比如：v1.x、v2.x 等等）</p>\n"},{"title":"在不同电脑更新hexo博客","_content":"\n在github 仓库部署hexo静态博客,可以参考我[这篇文章](https://hhb1994.github.io/2017/03/27/2017.03.26/),本篇文章讲述的是把博客文件和网站文件放在同一仓库的不同分支上,并实现在不同的电脑上更新博客的方法.\n\n## 创建 hexo 分支\n\n在原博客的仓库创建hexo分支,并设为默认,用来存放博客文件;\n## 清空远程仓库的 hexo 分支\n\n*  git clone 把远程仓库clone到本地;\n*  进入仓库,删除除.git文件夹以外的所有文件和文件夹;\n*  git add . ,git commit -m \"-\" , git push origin hexo 清空远程仓库hexo分支;\n\n## 上传本地博客文件\n\n* 把上述 .git文件夹复制到本机博客目录下;\n* 将本机博客themes里面的 .git .gitignore删除;\n* cd 到本机博客目录,执行: git add . ,git commit -m '-' , git push origin hexo 把本机博客文件推送到远程仓库hexo分支;\n\n## 在新电脑上的操作\n\n* 安装环境:git hexo node.js sshKEY等;\n* 创建博客目录,clone hexo分支到本地,执行: npm install  hexo -g && hexo s 安装依赖;\n* 推送文件到hexo分支: git add ...\n* 部署hexo: hexo clean && hexo g && hexo d\n\n","source":"_posts/2018.11.21.deployHexo.md","raw":"---\ntitle: 在不同电脑更新hexo博客\ntags: [hexo,git]\ncategories: 知识 \n---\n\n在github 仓库部署hexo静态博客,可以参考我[这篇文章](https://hhb1994.github.io/2017/03/27/2017.03.26/),本篇文章讲述的是把博客文件和网站文件放在同一仓库的不同分支上,并实现在不同的电脑上更新博客的方法.\n\n## 创建 hexo 分支\n\n在原博客的仓库创建hexo分支,并设为默认,用来存放博客文件;\n## 清空远程仓库的 hexo 分支\n\n*  git clone 把远程仓库clone到本地;\n*  进入仓库,删除除.git文件夹以外的所有文件和文件夹;\n*  git add . ,git commit -m \"-\" , git push origin hexo 清空远程仓库hexo分支;\n\n## 上传本地博客文件\n\n* 把上述 .git文件夹复制到本机博客目录下;\n* 将本机博客themes里面的 .git .gitignore删除;\n* cd 到本机博客目录,执行: git add . ,git commit -m '-' , git push origin hexo 把本机博客文件推送到远程仓库hexo分支;\n\n## 在新电脑上的操作\n\n* 安装环境:git hexo node.js sshKEY等;\n* 创建博客目录,clone hexo分支到本地,执行: npm install  hexo -g && hexo s 安装依赖;\n* 推送文件到hexo分支: git add ...\n* 部署hexo: hexo clean && hexo g && hexo d\n\n","slug":"2018.11.21.deployHexo","published":1,"date":"2018-11-21T09:01:46.329Z","updated":"2018-11-21T09:27:48.694Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwvh2597001cw39zk8xmnyfq","content":"<p>在github 仓库部署hexo静态博客,可以参考我<a href=\"https://hhb1994.github.io/2017/03/27/2017.03.26/\" target=\"_blank\" rel=\"external\">这篇文章</a>,本篇文章讲述的是把博客文件和网站文件放在同一仓库的不同分支上,并实现在不同的电脑上更新博客的方法.</p>\n<h2 id=\"创建-hexo-分支\"><a href=\"#创建-hexo-分支\" class=\"headerlink\" title=\"创建 hexo 分支\"></a>创建 hexo 分支</h2><p>在原博客的仓库创建hexo分支,并设为默认,用来存放博客文件;</p>\n<h2 id=\"清空远程仓库的-hexo-分支\"><a href=\"#清空远程仓库的-hexo-分支\" class=\"headerlink\" title=\"清空远程仓库的 hexo 分支\"></a>清空远程仓库的 hexo 分支</h2><ul>\n<li>git clone 把远程仓库clone到本地;</li>\n<li>进入仓库,删除除.git文件夹以外的所有文件和文件夹;</li>\n<li>git add . ,git commit -m “-“ , git push origin hexo 清空远程仓库hexo分支;</li>\n</ul>\n<h2 id=\"上传本地博客文件\"><a href=\"#上传本地博客文件\" class=\"headerlink\" title=\"上传本地博客文件\"></a>上传本地博客文件</h2><ul>\n<li>把上述 .git文件夹复制到本机博客目录下;</li>\n<li>将本机博客themes里面的 .git .gitignore删除;</li>\n<li>cd 到本机博客目录,执行: git add . ,git commit -m ‘-‘ , git push origin hexo 把本机博客文件推送到远程仓库hexo分支;</li>\n</ul>\n<h2 id=\"在新电脑上的操作\"><a href=\"#在新电脑上的操作\" class=\"headerlink\" title=\"在新电脑上的操作\"></a>在新电脑上的操作</h2><ul>\n<li>安装环境:git hexo node.js sshKEY等;</li>\n<li>创建博客目录,clone hexo分支到本地,执行: npm install  hexo -g &amp;&amp; hexo s 安装依赖;</li>\n<li>推送文件到hexo分支: git add …</li>\n<li>部署hexo: hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</li>\n</ul>\n","excerpt":"","more":"<p>在github 仓库部署hexo静态博客,可以参考我<a href=\"https://hhb1994.github.io/2017/03/27/2017.03.26/\">这篇文章</a>,本篇文章讲述的是把博客文件和网站文件放在同一仓库的不同分支上,并实现在不同的电脑上更新博客的方法.</p>\n<h2 id=\"创建-hexo-分支\"><a href=\"#创建-hexo-分支\" class=\"headerlink\" title=\"创建 hexo 分支\"></a>创建 hexo 分支</h2><p>在原博客的仓库创建hexo分支,并设为默认,用来存放博客文件;</p>\n<h2 id=\"清空远程仓库的-hexo-分支\"><a href=\"#清空远程仓库的-hexo-分支\" class=\"headerlink\" title=\"清空远程仓库的 hexo 分支\"></a>清空远程仓库的 hexo 分支</h2><ul>\n<li>git clone 把远程仓库clone到本地;</li>\n<li>进入仓库,删除除.git文件夹以外的所有文件和文件夹;</li>\n<li>git add . ,git commit -m “-“ , git push origin hexo 清空远程仓库hexo分支;</li>\n</ul>\n<h2 id=\"上传本地博客文件\"><a href=\"#上传本地博客文件\" class=\"headerlink\" title=\"上传本地博客文件\"></a>上传本地博客文件</h2><ul>\n<li>把上述 .git文件夹复制到本机博客目录下;</li>\n<li>将本机博客themes里面的 .git .gitignore删除;</li>\n<li>cd 到本机博客目录,执行: git add . ,git commit -m ‘-‘ , git push origin hexo 把本机博客文件推送到远程仓库hexo分支;</li>\n</ul>\n<h2 id=\"在新电脑上的操作\"><a href=\"#在新电脑上的操作\" class=\"headerlink\" title=\"在新电脑上的操作\"></a>在新电脑上的操作</h2><ul>\n<li>安装环境:git hexo node.js sshKEY等;</li>\n<li>创建博客目录,clone hexo分支到本地,执行: npm install  hexo -g &amp;&amp; hexo s 安装依赖;</li>\n<li>推送文件到hexo分支: git add …</li>\n<li>部署hexo: hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</li>\n</ul>\n"},{"title":"常用插件","_content":"\n## 时间插件\n\nmoment.js\n\n## 图标插件\n\nchart.js\n\n## 表格插件\n\ndatatable.js\n\n初始化:\n\n\t$('#table1').DataTable({\n\t\"oLanguage\": {\n\t\"oAria\": {\n\t\"sSortAscending\": \" - click/return to sort ascending\",\n\t\"sSortDescending\": \" - click/return to sort descending\"\n\t},\n\t\"sLengthMenu\": \"显示 _MENU_ 记录\",\n\t\"sZeroRecords\": \"对不起，查询不到任何相关数据\",\n\t\"sEmptyTable\": \"未查询到相关数据\",\n\t\"sLoadingRecords\": \"正在加载数据-请等待...\",\n\t\"sInfo\": \"当前显示 _START_ 到 _END_ 条，共 _TOTAL_ 条记录。\",\n\t\"sInfoEmpty\": \"当前显示0到0条，共0条记录\",\n\t\"sInfoFiltered\": \"（数据库中共为 _MAX_ 条记录）\",\n\t\"sSearch\": \"模糊查询：\",\n\t\"sUrl\": \"\",\n\t\"oPaginate\": {\n\t\"sFirst\": \"首页\",\n\t\"sPrevious\": \" 上一页 \",\n\t\"sNext\": \" 下一页 \",\n\t\"sLast\": \" 尾页 \"\n\t}\n\t}\n\t\n\t});\n\n## 日期选择插件\n\ndatetimepicker.js\n\n## video/audio插件\n\nvideo.js(播放rtmp流需要videojs-flash.js)\n\nvideo.js 加载新的信源:\n\n\tvar player = videojs('my-video');\n\tplayer.src(data);\n\tplayer.autoplay()\n\naudio.js\n\n","source":"_posts/2018.11.21plg.md","raw":"---\ntitle: 常用插件\ntags: [Plugin]\ncategories: 插件\n---\n\n## 时间插件\n\nmoment.js\n\n## 图标插件\n\nchart.js\n\n## 表格插件\n\ndatatable.js\n\n初始化:\n\n\t$('#table1').DataTable({\n\t\"oLanguage\": {\n\t\"oAria\": {\n\t\"sSortAscending\": \" - click/return to sort ascending\",\n\t\"sSortDescending\": \" - click/return to sort descending\"\n\t},\n\t\"sLengthMenu\": \"显示 _MENU_ 记录\",\n\t\"sZeroRecords\": \"对不起，查询不到任何相关数据\",\n\t\"sEmptyTable\": \"未查询到相关数据\",\n\t\"sLoadingRecords\": \"正在加载数据-请等待...\",\n\t\"sInfo\": \"当前显示 _START_ 到 _END_ 条，共 _TOTAL_ 条记录。\",\n\t\"sInfoEmpty\": \"当前显示0到0条，共0条记录\",\n\t\"sInfoFiltered\": \"（数据库中共为 _MAX_ 条记录）\",\n\t\"sSearch\": \"模糊查询：\",\n\t\"sUrl\": \"\",\n\t\"oPaginate\": {\n\t\"sFirst\": \"首页\",\n\t\"sPrevious\": \" 上一页 \",\n\t\"sNext\": \" 下一页 \",\n\t\"sLast\": \" 尾页 \"\n\t}\n\t}\n\t\n\t});\n\n## 日期选择插件\n\ndatetimepicker.js\n\n## video/audio插件\n\nvideo.js(播放rtmp流需要videojs-flash.js)\n\nvideo.js 加载新的信源:\n\n\tvar player = videojs('my-video');\n\tplayer.src(data);\n\tplayer.autoplay()\n\naudio.js\n\n","slug":"2018.11.21plg","published":1,"date":"2018-11-21T08:45:04.750Z","updated":"2018-11-21T08:55:00.169Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwvh2598001ew39z60zqigpu","content":"<h2 id=\"时间插件\"><a href=\"#时间插件\" class=\"headerlink\" title=\"时间插件\"></a>时间插件</h2><p>moment.js</p>\n<h2 id=\"图标插件\"><a href=\"#图标插件\" class=\"headerlink\" title=\"图标插件\"></a>图标插件</h2><p>chart.js</p>\n<h2 id=\"表格插件\"><a href=\"#表格插件\" class=\"headerlink\" title=\"表格插件\"></a>表格插件</h2><p>datatable.js</p>\n<p>初始化:</p>\n<pre><code>$(&apos;#table1&apos;).DataTable({\n&quot;oLanguage&quot;: {\n&quot;oAria&quot;: {\n&quot;sSortAscending&quot;: &quot; - click/return to sort ascending&quot;,\n&quot;sSortDescending&quot;: &quot; - click/return to sort descending&quot;\n},\n&quot;sLengthMenu&quot;: &quot;显示 _MENU_ 记录&quot;,\n&quot;sZeroRecords&quot;: &quot;对不起，查询不到任何相关数据&quot;,\n&quot;sEmptyTable&quot;: &quot;未查询到相关数据&quot;,\n&quot;sLoadingRecords&quot;: &quot;正在加载数据-请等待...&quot;,\n&quot;sInfo&quot;: &quot;当前显示 _START_ 到 _END_ 条，共 _TOTAL_ 条记录。&quot;,\n&quot;sInfoEmpty&quot;: &quot;当前显示0到0条，共0条记录&quot;,\n&quot;sInfoFiltered&quot;: &quot;（数据库中共为 _MAX_ 条记录）&quot;,\n&quot;sSearch&quot;: &quot;模糊查询：&quot;,\n&quot;sUrl&quot;: &quot;&quot;,\n&quot;oPaginate&quot;: {\n&quot;sFirst&quot;: &quot;首页&quot;,\n&quot;sPrevious&quot;: &quot; 上一页 &quot;,\n&quot;sNext&quot;: &quot; 下一页 &quot;,\n&quot;sLast&quot;: &quot; 尾页 &quot;\n}\n}\n\n});\n</code></pre><h2 id=\"日期选择插件\"><a href=\"#日期选择插件\" class=\"headerlink\" title=\"日期选择插件\"></a>日期选择插件</h2><p>datetimepicker.js</p>\n<h2 id=\"video-audio插件\"><a href=\"#video-audio插件\" class=\"headerlink\" title=\"video/audio插件\"></a>video/audio插件</h2><p>video.js(播放rtmp流需要videojs-flash.js)</p>\n<p>video.js 加载新的信源:</p>\n<pre><code>var player = videojs(&apos;my-video&apos;);\nplayer.src(data);\nplayer.autoplay()\n</code></pre><p>audio.js</p>\n","excerpt":"","more":"<h2 id=\"时间插件\"><a href=\"#时间插件\" class=\"headerlink\" title=\"时间插件\"></a>时间插件</h2><p>moment.js</p>\n<h2 id=\"图标插件\"><a href=\"#图标插件\" class=\"headerlink\" title=\"图标插件\"></a>图标插件</h2><p>chart.js</p>\n<h2 id=\"表格插件\"><a href=\"#表格插件\" class=\"headerlink\" title=\"表格插件\"></a>表格插件</h2><p>datatable.js</p>\n<p>初始化:</p>\n<pre><code>$(&apos;#table1&apos;).DataTable({\n&quot;oLanguage&quot;: {\n&quot;oAria&quot;: {\n&quot;sSortAscending&quot;: &quot; - click/return to sort ascending&quot;,\n&quot;sSortDescending&quot;: &quot; - click/return to sort descending&quot;\n},\n&quot;sLengthMenu&quot;: &quot;显示 _MENU_ 记录&quot;,\n&quot;sZeroRecords&quot;: &quot;对不起，查询不到任何相关数据&quot;,\n&quot;sEmptyTable&quot;: &quot;未查询到相关数据&quot;,\n&quot;sLoadingRecords&quot;: &quot;正在加载数据-请等待...&quot;,\n&quot;sInfo&quot;: &quot;当前显示 _START_ 到 _END_ 条，共 _TOTAL_ 条记录。&quot;,\n&quot;sInfoEmpty&quot;: &quot;当前显示0到0条，共0条记录&quot;,\n&quot;sInfoFiltered&quot;: &quot;（数据库中共为 _MAX_ 条记录）&quot;,\n&quot;sSearch&quot;: &quot;模糊查询：&quot;,\n&quot;sUrl&quot;: &quot;&quot;,\n&quot;oPaginate&quot;: {\n&quot;sFirst&quot;: &quot;首页&quot;,\n&quot;sPrevious&quot;: &quot; 上一页 &quot;,\n&quot;sNext&quot;: &quot; 下一页 &quot;,\n&quot;sLast&quot;: &quot; 尾页 &quot;\n}\n}\n\n});\n</code></pre><h2 id=\"日期选择插件\"><a href=\"#日期选择插件\" class=\"headerlink\" title=\"日期选择插件\"></a>日期选择插件</h2><p>datetimepicker.js</p>\n<h2 id=\"video-audio插件\"><a href=\"#video-audio插件\" class=\"headerlink\" title=\"video/audio插件\"></a>video/audio插件</h2><p>video.js(播放rtmp流需要videojs-flash.js)</p>\n<p>video.js 加载新的信源:</p>\n<pre><code>var player = videojs(&apos;my-video&apos;);\nplayer.src(data);\nplayer.autoplay()\n</code></pre><p>audio.js</p>\n"},{"title":"HTTP 协议","_content":"# HTTP 简介\n\nHTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。\n\nHTTP 基于 TCP/IP 通信协议来传递数据.\n\nHTTP 协议工作在客户端,服务端架构上,浏览器作为 HTTP 客户端通过 URL 向 HTTP 服务端 ,即 web 服务器发送所有请求, web 服务器接收到请求后,向客户端发送响应信息.\n\n# 主要特点\n\n* 简单快速:客户端向服务端请求服务时,只需传送请求方法和路径,请求方法常用的有 GET,HEAD,POST.由于 HTTP 协议简单,是的 HTTP 服务器的程序规模很小,因而通信速度很快.\n* 灵活:允许传输任意类型的数据对象,正在传输的类型由 content-type 家已标记;\n* 无连接,服务器处理完一次客户端的请求并受到应答之后,即断开链接;\n* 无状态:协议对于事务处理没有记忆能力,意味着如果后续需要处理前面的信息,必须重传.\n* 支持 B/S 与 C/S 架构.\n\n# HTTP 中的 URL\n\nURL,全称是UniformResourceLocator, 中文叫统一资源定位符,是互联网上用来标识某一处资源的地址。以下面这个URL为例，介绍下普通URL的各部分组成：\n\nhttp://www.aspxfans.com:8080/news/index.asp?boardID=5&ID=24618&page=1#name\n\n* 1.协议部分:\"http:\",代表网页使用的是http协议,在后面加入\"//\"分隔符;\n* 2.域名部分:该 URL 的域名为:\"www.aspxfans.com\" ,一个 url 中,也可以使用ip 作为域名使用;\n* 3.端口部分,\":8080\"为端口,如果省略端口则采用默认端口;\n* 4.虚拟目录部分:\"/news/\" , 虚拟目录不是一个 url 的必须部分;\n* 5.文件名部分:\"index.jsp\" ,如省略则使用默认文件名;\n* 6.锚⚓️部分: \"#name\",非必须;\n* 7.参数部分: 从 ? 开始 ,到 # 结束 为止,之间的部分.允许有多个参数,参数与参数之间用 & 作为分隔符.\n\n# HTTP request\n\n 客户端发送到服务端的 HTTP 请求如下包括以下格式:\n\n![HTTP 报文格式](https://segmentfault.com/img/bVGuNT?w=466&h=165)\n\n一个HTTP 请求如下:\n\nGET /562f25980001b1b106000338.jpg HTTP/1.1\nHost    img.mukewang.com\nUser-Agent  Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36\nAccept  image/webp,image/*,*/*;q=0.8\nReferer http://www.imooc.com/\nAccept-Encoding gzip, deflate, sdch\nAccept-Language zh-CN,zh;q=0.8\n\n## 请求行\n\n请求行以一个方法符号开头,以空格分开,后面跟着 URL 和协议的版本.用来说明请求类型,要访问的资源以及所使用的 HTTP 版本.\n\n## 请求头\n\n host: 指出 请求目的地;\n useragent: 浏览器类型检测需要的数据;\n\n## 空行\n\n请求头后面必须的部分;\n\n## 请求体\n\n请求数据也叫主体,可以添加任意数据.\n\n# HTTP response\n\n![](https://segmentfault.com/img/remote/1460000006760783)\n\n\tHTTP/1.1 200 OK\n\tDate: Fri, 22 May 2009 06:07:21 GMT\n\tContent-Type: text/html; charset=UTF-8\n\t\n\t<html>\n\t      <head></head>\n\t      <body>\n\t            <!--body goes here-->\n\t      </body>\n\t</html>\n\n## 状态行\n\n由 HTTP 协议版本号,状态码,状态消息组成;\n\n## 消息报头\n\n用来说明客户端要使用的附加信息;\n\n## 空行\n\n消息报头后面的空行是必须的.\n\n## 响应正文\n\n服务器返回给客户端的文本信息,空行后面的 html 部分为响应正文.\n\n#  HTTP 状态码\n\n[见这篇文章](https://hhb1994.github.io/2017/04/03/2017-04-03httpcode/)","source":"_posts/2018.11.23.HTTP.md","raw":"---\ntitle: HTTP 协议\ntags: [HTTP]\ncategories: 知识 \n---\n# HTTP 简介\n\nHTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。\n\nHTTP 基于 TCP/IP 通信协议来传递数据.\n\nHTTP 协议工作在客户端,服务端架构上,浏览器作为 HTTP 客户端通过 URL 向 HTTP 服务端 ,即 web 服务器发送所有请求, web 服务器接收到请求后,向客户端发送响应信息.\n\n# 主要特点\n\n* 简单快速:客户端向服务端请求服务时,只需传送请求方法和路径,请求方法常用的有 GET,HEAD,POST.由于 HTTP 协议简单,是的 HTTP 服务器的程序规模很小,因而通信速度很快.\n* 灵活:允许传输任意类型的数据对象,正在传输的类型由 content-type 家已标记;\n* 无连接,服务器处理完一次客户端的请求并受到应答之后,即断开链接;\n* 无状态:协议对于事务处理没有记忆能力,意味着如果后续需要处理前面的信息,必须重传.\n* 支持 B/S 与 C/S 架构.\n\n# HTTP 中的 URL\n\nURL,全称是UniformResourceLocator, 中文叫统一资源定位符,是互联网上用来标识某一处资源的地址。以下面这个URL为例，介绍下普通URL的各部分组成：\n\nhttp://www.aspxfans.com:8080/news/index.asp?boardID=5&ID=24618&page=1#name\n\n* 1.协议部分:\"http:\",代表网页使用的是http协议,在后面加入\"//\"分隔符;\n* 2.域名部分:该 URL 的域名为:\"www.aspxfans.com\" ,一个 url 中,也可以使用ip 作为域名使用;\n* 3.端口部分,\":8080\"为端口,如果省略端口则采用默认端口;\n* 4.虚拟目录部分:\"/news/\" , 虚拟目录不是一个 url 的必须部分;\n* 5.文件名部分:\"index.jsp\" ,如省略则使用默认文件名;\n* 6.锚⚓️部分: \"#name\",非必须;\n* 7.参数部分: 从 ? 开始 ,到 # 结束 为止,之间的部分.允许有多个参数,参数与参数之间用 & 作为分隔符.\n\n# HTTP request\n\n 客户端发送到服务端的 HTTP 请求如下包括以下格式:\n\n![HTTP 报文格式](https://segmentfault.com/img/bVGuNT?w=466&h=165)\n\n一个HTTP 请求如下:\n\nGET /562f25980001b1b106000338.jpg HTTP/1.1\nHost    img.mukewang.com\nUser-Agent  Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36\nAccept  image/webp,image/*,*/*;q=0.8\nReferer http://www.imooc.com/\nAccept-Encoding gzip, deflate, sdch\nAccept-Language zh-CN,zh;q=0.8\n\n## 请求行\n\n请求行以一个方法符号开头,以空格分开,后面跟着 URL 和协议的版本.用来说明请求类型,要访问的资源以及所使用的 HTTP 版本.\n\n## 请求头\n\n host: 指出 请求目的地;\n useragent: 浏览器类型检测需要的数据;\n\n## 空行\n\n请求头后面必须的部分;\n\n## 请求体\n\n请求数据也叫主体,可以添加任意数据.\n\n# HTTP response\n\n![](https://segmentfault.com/img/remote/1460000006760783)\n\n\tHTTP/1.1 200 OK\n\tDate: Fri, 22 May 2009 06:07:21 GMT\n\tContent-Type: text/html; charset=UTF-8\n\t\n\t<html>\n\t      <head></head>\n\t      <body>\n\t            <!--body goes here-->\n\t      </body>\n\t</html>\n\n## 状态行\n\n由 HTTP 协议版本号,状态码,状态消息组成;\n\n## 消息报头\n\n用来说明客户端要使用的附加信息;\n\n## 空行\n\n消息报头后面的空行是必须的.\n\n## 响应正文\n\n服务器返回给客户端的文本信息,空行后面的 html 部分为响应正文.\n\n#  HTTP 状态码\n\n[见这篇文章](https://hhb1994.github.io/2017/04/03/2017-04-03httpcode/)","slug":"2018.11.23.HTTP","published":1,"date":"2018-11-23T08:14:02.003Z","updated":"2018-11-26T01:23:16.604Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwvh2599001iw39z6q7xumx5","content":"<h1 id=\"HTTP-简介\"><a href=\"#HTTP-简介\" class=\"headerlink\" title=\"HTTP 简介\"></a>HTTP 简介</h1><p>HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。</p>\n<p>HTTP 基于 TCP/IP 通信协议来传递数据.</p>\n<p>HTTP 协议工作在客户端,服务端架构上,浏览器作为 HTTP 客户端通过 URL 向 HTTP 服务端 ,即 web 服务器发送所有请求, web 服务器接收到请求后,向客户端发送响应信息.</p>\n<h1 id=\"主要特点\"><a href=\"#主要特点\" class=\"headerlink\" title=\"主要特点\"></a>主要特点</h1><ul>\n<li>简单快速:客户端向服务端请求服务时,只需传送请求方法和路径,请求方法常用的有 GET,HEAD,POST.由于 HTTP 协议简单,是的 HTTP 服务器的程序规模很小,因而通信速度很快.</li>\n<li>灵活:允许传输任意类型的数据对象,正在传输的类型由 content-type 家已标记;</li>\n<li>无连接,服务器处理完一次客户端的请求并受到应答之后,即断开链接;</li>\n<li>无状态:协议对于事务处理没有记忆能力,意味着如果后续需要处理前面的信息,必须重传.</li>\n<li>支持 B/S 与 C/S 架构.</li>\n</ul>\n<h1 id=\"HTTP-中的-URL\"><a href=\"#HTTP-中的-URL\" class=\"headerlink\" title=\"HTTP 中的 URL\"></a>HTTP 中的 URL</h1><p>URL,全称是UniformResourceLocator, 中文叫统一资源定位符,是互联网上用来标识某一处资源的地址。以下面这个URL为例，介绍下普通URL的各部分组成：</p>\n<p><a href=\"http://www.aspxfans.com:8080/news/index.asp?boardID=5&amp;ID=24618&amp;page=1#name\" target=\"_blank\" rel=\"external\">http://www.aspxfans.com:8080/news/index.asp?boardID=5&amp;ID=24618&amp;page=1#name</a></p>\n<ul>\n<li>1.协议部分:”http:”,代表网页使用的是http协议,在后面加入”//“分隔符;</li>\n<li>2.域名部分:该 URL 的域名为:”www.aspxfans.com” ,一个 url 中,也可以使用ip 作为域名使用;</li>\n<li>3.端口部分,”:8080”为端口,如果省略端口则采用默认端口;</li>\n<li>4.虚拟目录部分:”/news/“ , 虚拟目录不是一个 url 的必须部分;</li>\n<li>5.文件名部分:”index.jsp” ,如省略则使用默认文件名;</li>\n<li>6.锚⚓️部分: “#name”,非必须;</li>\n<li>7.参数部分: 从 ? 开始 ,到 # 结束 为止,之间的部分.允许有多个参数,参数与参数之间用 &amp; 作为分隔符.</li>\n</ul>\n<h1 id=\"HTTP-request\"><a href=\"#HTTP-request\" class=\"headerlink\" title=\"HTTP request\"></a>HTTP request</h1><p> 客户端发送到服务端的 HTTP 请求如下包括以下格式:</p>\n<p><img src=\"https://segmentfault.com/img/bVGuNT?w=466&amp;h=165\" alt=\"HTTP 报文格式\"></p>\n<p>一个HTTP 请求如下:</p>\n<p>GET /562f25980001b1b106000338.jpg HTTP/1.1<br>Host    img.mukewang.com<br>User-Agent  Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36<br>Accept  image/webp,image/<em>,</em>/*;q=0.8<br>Referer <a href=\"http://www.imooc.com/\" target=\"_blank\" rel=\"external\">http://www.imooc.com/</a><br>Accept-Encoding gzip, deflate, sdch<br>Accept-Language zh-CN,zh;q=0.8</p>\n<h2 id=\"请求行\"><a href=\"#请求行\" class=\"headerlink\" title=\"请求行\"></a>请求行</h2><p>请求行以一个方法符号开头,以空格分开,后面跟着 URL 和协议的版本.用来说明请求类型,要访问的资源以及所使用的 HTTP 版本.</p>\n<h2 id=\"请求头\"><a href=\"#请求头\" class=\"headerlink\" title=\"请求头\"></a>请求头</h2><p> host: 指出 请求目的地;<br> useragent: 浏览器类型检测需要的数据;</p>\n<h2 id=\"空行\"><a href=\"#空行\" class=\"headerlink\" title=\"空行\"></a>空行</h2><p>请求头后面必须的部分;</p>\n<h2 id=\"请求体\"><a href=\"#请求体\" class=\"headerlink\" title=\"请求体\"></a>请求体</h2><p>请求数据也叫主体,可以添加任意数据.</p>\n<h1 id=\"HTTP-response\"><a href=\"#HTTP-response\" class=\"headerlink\" title=\"HTTP response\"></a>HTTP response</h1><p><img src=\"https://segmentfault.com/img/remote/1460000006760783\" alt=\"\"></p>\n<pre><code>HTTP/1.1 200 OK\nDate: Fri, 22 May 2009 06:07:21 GMT\nContent-Type: text/html; charset=UTF-8\n\n&lt;html&gt;\n      &lt;head&gt;&lt;/head&gt;\n      &lt;body&gt;\n            &lt;!--body goes here--&gt;\n      &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><h2 id=\"状态行\"><a href=\"#状态行\" class=\"headerlink\" title=\"状态行\"></a>状态行</h2><p>由 HTTP 协议版本号,状态码,状态消息组成;</p>\n<h2 id=\"消息报头\"><a href=\"#消息报头\" class=\"headerlink\" title=\"消息报头\"></a>消息报头</h2><p>用来说明客户端要使用的附加信息;</p>\n<h2 id=\"空行-1\"><a href=\"#空行-1\" class=\"headerlink\" title=\"空行\"></a>空行</h2><p>消息报头后面的空行是必须的.</p>\n<h2 id=\"响应正文\"><a href=\"#响应正文\" class=\"headerlink\" title=\"响应正文\"></a>响应正文</h2><p>服务器返回给客户端的文本信息,空行后面的 html 部分为响应正文.</p>\n<h1 id=\"HTTP-状态码\"><a href=\"#HTTP-状态码\" class=\"headerlink\" title=\"HTTP 状态码\"></a>HTTP 状态码</h1><p><a href=\"https://hhb1994.github.io/2017/04/03/2017-04-03httpcode/\" target=\"_blank\" rel=\"external\">见这篇文章</a></p>\n","excerpt":"","more":"<h1 id=\"HTTP-简介\"><a href=\"#HTTP-简介\" class=\"headerlink\" title=\"HTTP 简介\"></a>HTTP 简介</h1><p>HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。</p>\n<p>HTTP 基于 TCP/IP 通信协议来传递数据.</p>\n<p>HTTP 协议工作在客户端,服务端架构上,浏览器作为 HTTP 客户端通过 URL 向 HTTP 服务端 ,即 web 服务器发送所有请求, web 服务器接收到请求后,向客户端发送响应信息.</p>\n<h1 id=\"主要特点\"><a href=\"#主要特点\" class=\"headerlink\" title=\"主要特点\"></a>主要特点</h1><ul>\n<li>简单快速:客户端向服务端请求服务时,只需传送请求方法和路径,请求方法常用的有 GET,HEAD,POST.由于 HTTP 协议简单,是的 HTTP 服务器的程序规模很小,因而通信速度很快.</li>\n<li>灵活:允许传输任意类型的数据对象,正在传输的类型由 content-type 家已标记;</li>\n<li>无连接,服务器处理完一次客户端的请求并受到应答之后,即断开链接;</li>\n<li>无状态:协议对于事务处理没有记忆能力,意味着如果后续需要处理前面的信息,必须重传.</li>\n<li>支持 B/S 与 C/S 架构.</li>\n</ul>\n<h1 id=\"HTTP-中的-URL\"><a href=\"#HTTP-中的-URL\" class=\"headerlink\" title=\"HTTP 中的 URL\"></a>HTTP 中的 URL</h1><p>URL,全称是UniformResourceLocator, 中文叫统一资源定位符,是互联网上用来标识某一处资源的地址。以下面这个URL为例，介绍下普通URL的各部分组成：</p>\n<p><a href=\"http://www.aspxfans.com:8080/news/index.asp?boardID=5&amp;ID=24618&amp;page=1#name\">http://www.aspxfans.com:8080/news/index.asp?boardID=5&amp;ID=24618&amp;page=1#name</a></p>\n<ul>\n<li>1.协议部分:”http:”,代表网页使用的是http协议,在后面加入”//“分隔符;</li>\n<li>2.域名部分:该 URL 的域名为:”www.aspxfans.com” ,一个 url 中,也可以使用ip 作为域名使用;</li>\n<li>3.端口部分,”:8080”为端口,如果省略端口则采用默认端口;</li>\n<li>4.虚拟目录部分:”/news/“ , 虚拟目录不是一个 url 的必须部分;</li>\n<li>5.文件名部分:”index.jsp” ,如省略则使用默认文件名;</li>\n<li>6.锚⚓️部分: “#name”,非必须;</li>\n<li>7.参数部分: 从 ? 开始 ,到 # 结束 为止,之间的部分.允许有多个参数,参数与参数之间用 &amp; 作为分隔符.</li>\n</ul>\n<h1 id=\"HTTP-request\"><a href=\"#HTTP-request\" class=\"headerlink\" title=\"HTTP request\"></a>HTTP request</h1><p> 客户端发送到服务端的 HTTP 请求如下包括以下格式:</p>\n<p><img src=\"https://segmentfault.com/img/bVGuNT?w=466&amp;h=165\" alt=\"HTTP 报文格式\"></p>\n<p>一个HTTP 请求如下:</p>\n<p>GET /562f25980001b1b106000338.jpg HTTP/1.1<br>Host    img.mukewang.com<br>User-Agent  Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36<br>Accept  image/webp,image/<em>,</em>/*;q=0.8<br>Referer <a href=\"http://www.imooc.com/\">http://www.imooc.com/</a><br>Accept-Encoding gzip, deflate, sdch<br>Accept-Language zh-CN,zh;q=0.8</p>\n<h2 id=\"请求行\"><a href=\"#请求行\" class=\"headerlink\" title=\"请求行\"></a>请求行</h2><p>请求行以一个方法符号开头,以空格分开,后面跟着 URL 和协议的版本.用来说明请求类型,要访问的资源以及所使用的 HTTP 版本.</p>\n<h2 id=\"请求头\"><a href=\"#请求头\" class=\"headerlink\" title=\"请求头\"></a>请求头</h2><p> host: 指出 请求目的地;<br> useragent: 浏览器类型检测需要的数据;</p>\n<h2 id=\"空行\"><a href=\"#空行\" class=\"headerlink\" title=\"空行\"></a>空行</h2><p>请求头后面必须的部分;</p>\n<h2 id=\"请求体\"><a href=\"#请求体\" class=\"headerlink\" title=\"请求体\"></a>请求体</h2><p>请求数据也叫主体,可以添加任意数据.</p>\n<h1 id=\"HTTP-response\"><a href=\"#HTTP-response\" class=\"headerlink\" title=\"HTTP response\"></a>HTTP response</h1><p><img src=\"https://segmentfault.com/img/remote/1460000006760783\" alt=\"\"></p>\n<pre><code>HTTP/1.1 200 OK\nDate: Fri, 22 May 2009 06:07:21 GMT\nContent-Type: text/html; charset=UTF-8\n\n&lt;html&gt;\n      &lt;head&gt;&lt;/head&gt;\n      &lt;body&gt;\n            &lt;!--body goes here--&gt;\n      &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><h2 id=\"状态行\"><a href=\"#状态行\" class=\"headerlink\" title=\"状态行\"></a>状态行</h2><p>由 HTTP 协议版本号,状态码,状态消息组成;</p>\n<h2 id=\"消息报头\"><a href=\"#消息报头\" class=\"headerlink\" title=\"消息报头\"></a>消息报头</h2><p>用来说明客户端要使用的附加信息;</p>\n<h2 id=\"空行-1\"><a href=\"#空行-1\" class=\"headerlink\" title=\"空行\"></a>空行</h2><p>消息报头后面的空行是必须的.</p>\n<h2 id=\"响应正文\"><a href=\"#响应正文\" class=\"headerlink\" title=\"响应正文\"></a>响应正文</h2><p>服务器返回给客户端的文本信息,空行后面的 html 部分为响应正文.</p>\n<h1 id=\"HTTP-状态码\"><a href=\"#HTTP-状态码\" class=\"headerlink\" title=\"HTTP 状态码\"></a>HTTP 状态码</h1><p><a href=\"https://hhb1994.github.io/2017/04/03/2017-04-03httpcode/\">见这篇文章</a></p>\n"},{"title":"门户设计","_content":"\n# 门户设计\n\n## 视频作为网页背景\n\n\t#zglyvideo{\n\t    position: fixed; right: 0; bottom: 0;\n\t    min-width: 100%; min-height: 100%;\n\t    width: auto; height: auto; z-index: -100;\n\t}\n\n将视频的位置设置为 fixed, min-width/min-height设置为 100% ,同时 z-index 设置为 -100.\n\n## animate.css\n\n使用 animate.css 设置动画:\n\n\t<h4 class=\"\"animated fadeInUp>fadeInUp</h4>\n\n## 使用 css3 animate 做出文字输入效果\n\n\th1{\n\t    border-right: .1em solid;\n\t    display: block;\n\t    margin-left: auto;\n\t    margin-right: auto;\n\t    color: white;\n\t    font-weight:  700;\n\t    font-size: 5rem;\n\t    margin-top: 14rem;\n\t    text-shadow: 2px 4px 3px rgba(0,0,0,0.3);\n\t    width: 24rem;\n\t    white-space: nowrap;\n\t    overflow: hidden;\n\t    animation: typing  2.6s steps(4,end),\n\t    blink-caret .5s step-end infinite alternate;\n\t\n\t}\n\t\n\t@keyframes typing {\n\t    from{width: 0}\n\t}\n\t@keyframes blink-caret { 50% { border-color: transparent; } }\n\n### typeing \n\n实现文字输入效果,如果一共有四个字符需要展示,设置动画时长为 2.6s;\n\n\nsteps(4,end)代表动画分四步进行;\n\nh1的 width 从 0 到 24 rem 过渡\n\n### blink-caret\n\n 实现光标闪烁效果.","source":"_posts/2018.11.29portal.md","raw":"---\ntitle: 门户设计\ntags: [portal]\ncategories: 知识 \n---\n\n# 门户设计\n\n## 视频作为网页背景\n\n\t#zglyvideo{\n\t    position: fixed; right: 0; bottom: 0;\n\t    min-width: 100%; min-height: 100%;\n\t    width: auto; height: auto; z-index: -100;\n\t}\n\n将视频的位置设置为 fixed, min-width/min-height设置为 100% ,同时 z-index 设置为 -100.\n\n## animate.css\n\n使用 animate.css 设置动画:\n\n\t<h4 class=\"\"animated fadeInUp>fadeInUp</h4>\n\n## 使用 css3 animate 做出文字输入效果\n\n\th1{\n\t    border-right: .1em solid;\n\t    display: block;\n\t    margin-left: auto;\n\t    margin-right: auto;\n\t    color: white;\n\t    font-weight:  700;\n\t    font-size: 5rem;\n\t    margin-top: 14rem;\n\t    text-shadow: 2px 4px 3px rgba(0,0,0,0.3);\n\t    width: 24rem;\n\t    white-space: nowrap;\n\t    overflow: hidden;\n\t    animation: typing  2.6s steps(4,end),\n\t    blink-caret .5s step-end infinite alternate;\n\t\n\t}\n\t\n\t@keyframes typing {\n\t    from{width: 0}\n\t}\n\t@keyframes blink-caret { 50% { border-color: transparent; } }\n\n### typeing \n\n实现文字输入效果,如果一共有四个字符需要展示,设置动画时长为 2.6s;\n\n\nsteps(4,end)代表动画分四步进行;\n\nh1的 width 从 0 到 24 rem 过渡\n\n### blink-caret\n\n 实现光标闪烁效果.","slug":"2018.11.29portal","published":1,"date":"2018-11-29T02:58:19.264Z","updated":"2018-11-29T07:11:09.150Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwvh2599001mw39zoyjx8h2h","content":"<h1 id=\"门户设计\"><a href=\"#门户设计\" class=\"headerlink\" title=\"门户设计\"></a>门户设计</h1><h2 id=\"视频作为网页背景\"><a href=\"#视频作为网页背景\" class=\"headerlink\" title=\"视频作为网页背景\"></a>视频作为网页背景</h2><pre><code>#zglyvideo{\n    position: fixed; right: 0; bottom: 0;\n    min-width: 100%; min-height: 100%;\n    width: auto; height: auto; z-index: -100;\n}\n</code></pre><p>将视频的位置设置为 fixed, min-width/min-height设置为 100% ,同时 z-index 设置为 -100.</p>\n<h2 id=\"animate-css\"><a href=\"#animate-css\" class=\"headerlink\" title=\"animate.css\"></a>animate.css</h2><p>使用 animate.css 设置动画:</p>\n<pre><code>&lt;h4 class=&quot;&quot;animated fadeInUp&gt;fadeInUp&lt;/h4&gt;\n</code></pre><h2 id=\"使用-css3-animate-做出文字输入效果\"><a href=\"#使用-css3-animate-做出文字输入效果\" class=\"headerlink\" title=\"使用 css3 animate 做出文字输入效果\"></a>使用 css3 animate 做出文字输入效果</h2><pre><code>h1{\n    border-right: .1em solid;\n    display: block;\n    margin-left: auto;\n    margin-right: auto;\n    color: white;\n    font-weight:  700;\n    font-size: 5rem;\n    margin-top: 14rem;\n    text-shadow: 2px 4px 3px rgba(0,0,0,0.3);\n    width: 24rem;\n    white-space: nowrap;\n    overflow: hidden;\n    animation: typing  2.6s steps(4,end),\n    blink-caret .5s step-end infinite alternate;\n\n}\n\n@keyframes typing {\n    from{width: 0}\n}\n@keyframes blink-caret { 50% { border-color: transparent; } }\n</code></pre><h3 id=\"typeing\"><a href=\"#typeing\" class=\"headerlink\" title=\"typeing\"></a>typeing</h3><p>实现文字输入效果,如果一共有四个字符需要展示,设置动画时长为 2.6s;</p>\n<p>steps(4,end)代表动画分四步进行;</p>\n<p>h1的 width 从 0 到 24 rem 过渡</p>\n<h3 id=\"blink-caret\"><a href=\"#blink-caret\" class=\"headerlink\" title=\"blink-caret\"></a>blink-caret</h3><p> 实现光标闪烁效果.</p>\n","excerpt":"","more":"<h1 id=\"门户设计\"><a href=\"#门户设计\" class=\"headerlink\" title=\"门户设计\"></a>门户设计</h1><h2 id=\"视频作为网页背景\"><a href=\"#视频作为网页背景\" class=\"headerlink\" title=\"视频作为网页背景\"></a>视频作为网页背景</h2><pre><code>#zglyvideo{\n    position: fixed; right: 0; bottom: 0;\n    min-width: 100%; min-height: 100%;\n    width: auto; height: auto; z-index: -100;\n}\n</code></pre><p>将视频的位置设置为 fixed, min-width/min-height设置为 100% ,同时 z-index 设置为 -100.</p>\n<h2 id=\"animate-css\"><a href=\"#animate-css\" class=\"headerlink\" title=\"animate.css\"></a>animate.css</h2><p>使用 animate.css 设置动画:</p>\n<pre><code>&lt;h4 class=&quot;&quot;animated fadeInUp&gt;fadeInUp&lt;/h4&gt;\n</code></pre><h2 id=\"使用-css3-animate-做出文字输入效果\"><a href=\"#使用-css3-animate-做出文字输入效果\" class=\"headerlink\" title=\"使用 css3 animate 做出文字输入效果\"></a>使用 css3 animate 做出文字输入效果</h2><pre><code>h1{\n    border-right: .1em solid;\n    display: block;\n    margin-left: auto;\n    margin-right: auto;\n    color: white;\n    font-weight:  700;\n    font-size: 5rem;\n    margin-top: 14rem;\n    text-shadow: 2px 4px 3px rgba(0,0,0,0.3);\n    width: 24rem;\n    white-space: nowrap;\n    overflow: hidden;\n    animation: typing  2.6s steps(4,end),\n    blink-caret .5s step-end infinite alternate;\n\n}\n\n@keyframes typing {\n    from{width: 0}\n}\n@keyframes blink-caret { 50% { border-color: transparent; } }\n</code></pre><h3 id=\"typeing\"><a href=\"#typeing\" class=\"headerlink\" title=\"typeing\"></a>typeing</h3><p>实现文字输入效果,如果一共有四个字符需要展示,设置动画时长为 2.6s;</p>\n<p>steps(4,end)代表动画分四步进行;</p>\n<p>h1的 width 从 0 到 24 rem 过渡</p>\n<h3 id=\"blink-caret\"><a href=\"#blink-caret\" class=\"headerlink\" title=\"blink-caret\"></a>blink-caret</h3><p> 实现光标闪烁效果.</p>\n"},{"title":"滚动监听","_content":"\n在进行网页设计的时候,有一个需求就是在网页滚动到指定位置时执行特定的操作,这时候就需要用到滚动监听.\n\n# scrollTop\n\nJavaScript 的原生方法,获取滚动距离:\n\n\tvar scrollTop = document.documentElement.scrollTop || document.body.scrollTop;\n\tconsole.log(\"滚动距离\" + scrollTop);\n\n为保证兼容性.使用`document.documentElement.scrollTop || document.body.scrollTop`\n\n# ScrollWatch\n\n使用[ScrollWatch](https://edull24.github.io/ScrollWatch/)插件来实现指定位置的滚动监听.\n当需要监听的元素进入视野时,会给元素添加scroll-watch-in-view 的 class, 元素离开视野时添加 scroll-watch-ignore class.\n\n在需要监听的元素上添加data-scroll-watch属性,并进行初始化:\n\n\tvar sw = new ScrollWatch({\n\t                        watchOnce: false,\n\t                        infiniteScroll: false,\n\t                        // infiniteOffset: 50,\n\t                        inViewClass: 'fadeInUp',\n\t                        onElementInView: function(data) {\n\t                            console.log(data.el, '...is now in view');\n\t                            data.el.classList.add(\"\");\n\t                        }\n\t                    });\n\n* watchonce:监听一次,如果设置为 true,则每次 inview 都会触发;\n* inviewClass: 进入视野时要添加的类;\n* onElementInView:进入视野时的回调函数.","source":"_posts/2018.11.30.ScrollWatch.md","raw":"---\ntitle: 滚动监听\ntags: [ScrollWatch]\ncategories: 知识 \n---\n\n在进行网页设计的时候,有一个需求就是在网页滚动到指定位置时执行特定的操作,这时候就需要用到滚动监听.\n\n# scrollTop\n\nJavaScript 的原生方法,获取滚动距离:\n\n\tvar scrollTop = document.documentElement.scrollTop || document.body.scrollTop;\n\tconsole.log(\"滚动距离\" + scrollTop);\n\n为保证兼容性.使用`document.documentElement.scrollTop || document.body.scrollTop`\n\n# ScrollWatch\n\n使用[ScrollWatch](https://edull24.github.io/ScrollWatch/)插件来实现指定位置的滚动监听.\n当需要监听的元素进入视野时,会给元素添加scroll-watch-in-view 的 class, 元素离开视野时添加 scroll-watch-ignore class.\n\n在需要监听的元素上添加data-scroll-watch属性,并进行初始化:\n\n\tvar sw = new ScrollWatch({\n\t                        watchOnce: false,\n\t                        infiniteScroll: false,\n\t                        // infiniteOffset: 50,\n\t                        inViewClass: 'fadeInUp',\n\t                        onElementInView: function(data) {\n\t                            console.log(data.el, '...is now in view');\n\t                            data.el.classList.add(\"\");\n\t                        }\n\t                    });\n\n* watchonce:监听一次,如果设置为 true,则每次 inview 都会触发;\n* inviewClass: 进入视野时要添加的类;\n* onElementInView:进入视野时的回调函数.","slug":"2018.11.30.ScrollWatch","published":1,"date":"2018-11-30T02:07:37.326Z","updated":"2018-11-30T02:27:24.518Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwvh259a001qw39znvsrgho7","content":"<p>在进行网页设计的时候,有一个需求就是在网页滚动到指定位置时执行特定的操作,这时候就需要用到滚动监听.</p>\n<h1 id=\"scrollTop\"><a href=\"#scrollTop\" class=\"headerlink\" title=\"scrollTop\"></a>scrollTop</h1><p>JavaScript 的原生方法,获取滚动距离:</p>\n<pre><code>var scrollTop = document.documentElement.scrollTop || document.body.scrollTop;\nconsole.log(&quot;滚动距离&quot; + scrollTop);\n</code></pre><p>为保证兼容性.使用<code>document.documentElement.scrollTop || document.body.scrollTop</code></p>\n<h1 id=\"ScrollWatch\"><a href=\"#ScrollWatch\" class=\"headerlink\" title=\"ScrollWatch\"></a>ScrollWatch</h1><p>使用<a href=\"https://edull24.github.io/ScrollWatch/\" target=\"_blank\" rel=\"external\">ScrollWatch</a>插件来实现指定位置的滚动监听.<br>当需要监听的元素进入视野时,会给元素添加scroll-watch-in-view 的 class, 元素离开视野时添加 scroll-watch-ignore class.</p>\n<p>在需要监听的元素上添加data-scroll-watch属性,并进行初始化:</p>\n<pre><code>var sw = new ScrollWatch({\n                        watchOnce: false,\n                        infiniteScroll: false,\n                        // infiniteOffset: 50,\n                        inViewClass: &apos;fadeInUp&apos;,\n                        onElementInView: function(data) {\n                            console.log(data.el, &apos;...is now in view&apos;);\n                            data.el.classList.add(&quot;&quot;);\n                        }\n                    });\n</code></pre><ul>\n<li>watchonce:监听一次,如果设置为 true,则每次 inview 都会触发;</li>\n<li>inviewClass: 进入视野时要添加的类;</li>\n<li>onElementInView:进入视野时的回调函数.</li>\n</ul>\n","excerpt":"","more":"<p>在进行网页设计的时候,有一个需求就是在网页滚动到指定位置时执行特定的操作,这时候就需要用到滚动监听.</p>\n<h1 id=\"scrollTop\"><a href=\"#scrollTop\" class=\"headerlink\" title=\"scrollTop\"></a>scrollTop</h1><p>JavaScript 的原生方法,获取滚动距离:</p>\n<pre><code>var scrollTop = document.documentElement.scrollTop || document.body.scrollTop;\nconsole.log(&quot;滚动距离&quot; + scrollTop);\n</code></pre><p>为保证兼容性.使用<code>document.documentElement.scrollTop || document.body.scrollTop</code></p>\n<h1 id=\"ScrollWatch\"><a href=\"#ScrollWatch\" class=\"headerlink\" title=\"ScrollWatch\"></a>ScrollWatch</h1><p>使用<a href=\"https://edull24.github.io/ScrollWatch/\">ScrollWatch</a>插件来实现指定位置的滚动监听.<br>当需要监听的元素进入视野时,会给元素添加scroll-watch-in-view 的 class, 元素离开视野时添加 scroll-watch-ignore class.</p>\n<p>在需要监听的元素上添加data-scroll-watch属性,并进行初始化:</p>\n<pre><code>var sw = new ScrollWatch({\n                        watchOnce: false,\n                        infiniteScroll: false,\n                        // infiniteOffset: 50,\n                        inViewClass: &apos;fadeInUp&apos;,\n                        onElementInView: function(data) {\n                            console.log(data.el, &apos;...is now in view&apos;);\n                            data.el.classList.add(&quot;&quot;);\n                        }\n                    });\n</code></pre><ul>\n<li>watchonce:监听一次,如果设置为 true,则每次 inview 都会触发;</li>\n<li>inviewClass: 进入视野时要添加的类;</li>\n<li>onElementInView:进入视野时的回调函数.</li>\n</ul>\n"},{"title":"CSS 伪类与 CSS 元素","_content":"# 伪类与伪元素\n\n伪类和伪元素是用来修饰不在文档树中的内容.\n\n伪类用于当已有元素处于的某个状态时,为其添加对应的样式,这个状态是根据用户的行为而动态变化的,比如说当用户悬停在指定的元素时,我们可以添加:hover来描述这个元素的状态.虽然和普通的 css类相似,可以为已有的元素添加样式,但是它只有处于 dom tree无法描述的状态下才能为元素添加样式,所以将其称为伪类.\n\n伪元素用于创建不在文档树中的元素,并为其添加样式.比如说，我们可以通过:before来在一个元素前增加一些文本，并为这些文本添加样式。虽然用户可以看到这些文本，但是这些文本实际上不在文档树中.\n\n# 伪类和伪元素的区别\n\n伪类的操作对象是文档树中已有的元素,二伪元素则创建了一个文档树外的元素.因此,伪类和伪元素的区别在于:有没有创建一个文档树以外的元素. \n\n# 单冒号 or 双冒号?\n\nCSS3规范中的要求使用双冒号(::)表示伪元素，以此来区分伪元素和伪类，比如::before和::after等伪元素使用双冒号(::)，:hover和:active等伪类使用单冒号(:)。除了一些低于IE8版本的浏览器外，大部分浏览器都支持伪元素的双冒号(::)表示方法。\n\n# 伪类和伪元素的具体用法\n\n![](http://www.alloyteam.com/wp-content/uploads/2016/05/%E4%BC%AA%E7%B1%BB.png)\n\n\n![](http://www.alloyteam.com/wp-content/uploads/2016/05/%E4%BC%AA%E5%85%83%E7%B4%A0.png)\n\n\n\n","source":"_posts/2018.12.07.pseudo.md","raw":"---\ntitle: CSS 伪类与 CSS 元素\ntags: [CSS]\ncategories: 知识 \n---\n# 伪类与伪元素\n\n伪类和伪元素是用来修饰不在文档树中的内容.\n\n伪类用于当已有元素处于的某个状态时,为其添加对应的样式,这个状态是根据用户的行为而动态变化的,比如说当用户悬停在指定的元素时,我们可以添加:hover来描述这个元素的状态.虽然和普通的 css类相似,可以为已有的元素添加样式,但是它只有处于 dom tree无法描述的状态下才能为元素添加样式,所以将其称为伪类.\n\n伪元素用于创建不在文档树中的元素,并为其添加样式.比如说，我们可以通过:before来在一个元素前增加一些文本，并为这些文本添加样式。虽然用户可以看到这些文本，但是这些文本实际上不在文档树中.\n\n# 伪类和伪元素的区别\n\n伪类的操作对象是文档树中已有的元素,二伪元素则创建了一个文档树外的元素.因此,伪类和伪元素的区别在于:有没有创建一个文档树以外的元素. \n\n# 单冒号 or 双冒号?\n\nCSS3规范中的要求使用双冒号(::)表示伪元素，以此来区分伪元素和伪类，比如::before和::after等伪元素使用双冒号(::)，:hover和:active等伪类使用单冒号(:)。除了一些低于IE8版本的浏览器外，大部分浏览器都支持伪元素的双冒号(::)表示方法。\n\n# 伪类和伪元素的具体用法\n\n![](http://www.alloyteam.com/wp-content/uploads/2016/05/%E4%BC%AA%E7%B1%BB.png)\n\n\n![](http://www.alloyteam.com/wp-content/uploads/2016/05/%E4%BC%AA%E5%85%83%E7%B4%A0.png)\n\n\n\n","slug":"2018.12.07.pseudo","published":1,"date":"2018-12-07T06:19:41.264Z","updated":"2018-12-07T06:37:00.105Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwvh259b001tw39znjkw49h9","content":"<h1 id=\"伪类与伪元素\"><a href=\"#伪类与伪元素\" class=\"headerlink\" title=\"伪类与伪元素\"></a>伪类与伪元素</h1><p>伪类和伪元素是用来修饰不在文档树中的内容.</p>\n<p>伪类用于当已有元素处于的某个状态时,为其添加对应的样式,这个状态是根据用户的行为而动态变化的,比如说当用户悬停在指定的元素时,我们可以添加:hover来描述这个元素的状态.虽然和普通的 css类相似,可以为已有的元素添加样式,但是它只有处于 dom tree无法描述的状态下才能为元素添加样式,所以将其称为伪类.</p>\n<p>伪元素用于创建不在文档树中的元素,并为其添加样式.比如说，我们可以通过:before来在一个元素前增加一些文本，并为这些文本添加样式。虽然用户可以看到这些文本，但是这些文本实际上不在文档树中.</p>\n<h1 id=\"伪类和伪元素的区别\"><a href=\"#伪类和伪元素的区别\" class=\"headerlink\" title=\"伪类和伪元素的区别\"></a>伪类和伪元素的区别</h1><p>伪类的操作对象是文档树中已有的元素,二伪元素则创建了一个文档树外的元素.因此,伪类和伪元素的区别在于:有没有创建一个文档树以外的元素. </p>\n<h1 id=\"单冒号-or-双冒号\"><a href=\"#单冒号-or-双冒号\" class=\"headerlink\" title=\"单冒号 or 双冒号?\"></a>单冒号 or 双冒号?</h1><p>CSS3规范中的要求使用双冒号(::)表示伪元素，以此来区分伪元素和伪类，比如::before和::after等伪元素使用双冒号(::)，:hover和:active等伪类使用单冒号(:)。除了一些低于IE8版本的浏览器外，大部分浏览器都支持伪元素的双冒号(::)表示方法。</p>\n<h1 id=\"伪类和伪元素的具体用法\"><a href=\"#伪类和伪元素的具体用法\" class=\"headerlink\" title=\"伪类和伪元素的具体用法\"></a>伪类和伪元素的具体用法</h1><p><img src=\"http://www.alloyteam.com/wp-content/uploads/2016/05/%E4%BC%AA%E7%B1%BB.png\" alt=\"\"></p>\n<p><img src=\"http://www.alloyteam.com/wp-content/uploads/2016/05/%E4%BC%AA%E5%85%83%E7%B4%A0.png\" alt=\"\"></p>\n","excerpt":"","more":"<h1 id=\"伪类与伪元素\"><a href=\"#伪类与伪元素\" class=\"headerlink\" title=\"伪类与伪元素\"></a>伪类与伪元素</h1><p>伪类和伪元素是用来修饰不在文档树中的内容.</p>\n<p>伪类用于当已有元素处于的某个状态时,为其添加对应的样式,这个状态是根据用户的行为而动态变化的,比如说当用户悬停在指定的元素时,我们可以添加:hover来描述这个元素的状态.虽然和普通的 css类相似,可以为已有的元素添加样式,但是它只有处于 dom tree无法描述的状态下才能为元素添加样式,所以将其称为伪类.</p>\n<p>伪元素用于创建不在文档树中的元素,并为其添加样式.比如说，我们可以通过:before来在一个元素前增加一些文本，并为这些文本添加样式。虽然用户可以看到这些文本，但是这些文本实际上不在文档树中.</p>\n<h1 id=\"伪类和伪元素的区别\"><a href=\"#伪类和伪元素的区别\" class=\"headerlink\" title=\"伪类和伪元素的区别\"></a>伪类和伪元素的区别</h1><p>伪类的操作对象是文档树中已有的元素,二伪元素则创建了一个文档树外的元素.因此,伪类和伪元素的区别在于:有没有创建一个文档树以外的元素. </p>\n<h1 id=\"单冒号-or-双冒号\"><a href=\"#单冒号-or-双冒号\" class=\"headerlink\" title=\"单冒号 or 双冒号?\"></a>单冒号 or 双冒号?</h1><p>CSS3规范中的要求使用双冒号(::)表示伪元素，以此来区分伪元素和伪类，比如::before和::after等伪元素使用双冒号(::)，:hover和:active等伪类使用单冒号(:)。除了一些低于IE8版本的浏览器外，大部分浏览器都支持伪元素的双冒号(::)表示方法。</p>\n<h1 id=\"伪类和伪元素的具体用法\"><a href=\"#伪类和伪元素的具体用法\" class=\"headerlink\" title=\"伪类和伪元素的具体用法\"></a>伪类和伪元素的具体用法</h1><p><img src=\"http://www.alloyteam.com/wp-content/uploads/2016/05/%E4%BC%AA%E7%B1%BB.png\" alt=\"\"></p>\n<p><img src=\"http://www.alloyteam.com/wp-content/uploads/2016/05/%E4%BC%AA%E5%85%83%E7%B4%A0.png\" alt=\"\"></p>\n"},{"title":"实现文字与图片并排显示","_content":"\n\t<div>\n\t    <img src=\"images/pic.png\">\n\t    <span>content</span>\n\t</div>\n\n实现方式:\n\n css:\n\n\timg{\n\t\tvertical-align:middle\n\t}\n\n`\"vertical-align\"` 这个属性只适用于 inline 和 inline-block, 对其他 postion 属性无效.\n","source":"_posts/2018.12.09.vertical.md","raw":"---\n\ntitle: 实现文字与图片并排显示\ntags: [css]\ncategories: 知识\n---\n\n\t<div>\n\t    <img src=\"images/pic.png\">\n\t    <span>content</span>\n\t</div>\n\n实现方式:\n\n css:\n\n\timg{\n\t\tvertical-align:middle\n\t}\n\n`\"vertical-align\"` 这个属性只适用于 inline 和 inline-block, 对其他 postion 属性无效.\n","slug":"2018.12.09.vertical","published":1,"date":"2018-12-09T09:54:07.208Z","updated":"2018-12-09T10:05:15.314Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwvh259d001ww39zte0sa48i","content":"<pre><code>&lt;div&gt;\n    &lt;img src=&quot;images/pic.png&quot;&gt;\n    &lt;span&gt;content&lt;/span&gt;\n&lt;/div&gt;\n</code></pre><p>实现方式:</p>\n<p> css:</p>\n<pre><code>img{\n    vertical-align:middle\n}\n</code></pre><p><code>&quot;vertical-align&quot;</code> 这个属性只适用于 inline 和 inline-block, 对其他 postion 属性无效.</p>\n","excerpt":"","more":"<pre><code>&lt;div&gt;\n    &lt;img src=&quot;images/pic.png&quot;&gt;\n    &lt;span&gt;content&lt;/span&gt;\n&lt;/div&gt;\n</code></pre><p>实现方式:</p>\n<p> css:</p>\n<pre><code>img{\n    vertical-align:middle\n}\n</code></pre><p><code>&quot;vertical-align&quot;</code> 这个属性只适用于 inline 和 inline-block, 对其他 postion 属性无效.</p>\n"},{"title":"检测浏览器类型&判断 IE 版本","_content":"\n# JS 获取浏览器信息\n\n\t浏览器代码名称：navigator.appCodeName\n    浏览器名称：navigator.appName\n    浏览器版本号：navigator.appVersion\n    对Java的支持：navigator.javaEnabled()\n    MIME类型（数组）：navigator.mimeTypes\n    系统平台：navigator.platform\n    插件（数组）：navigator.plugins\n    用户代理：navigator.userAgent\n\n# 各大浏览器的 userAgent 值\n各大浏览器输出 navigator.userAgent 的值：\n\n* IE 8：Mozilla/4.0 (compatible; **MSIE 8.0**; Windows NT 10.0; WOW64; Trident/8.0; .NET4.0C; .NET4.0E; InfoPath.3; .NET CLR 2.0.50727; .NET CLR 3.0.30729; .NET CLR 3.5.30729)\n* IE 11：Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; InfoPath.3; .NET CLR 2.0.50727; .NET CLR 3.0.30729; .NET CLR 3.5.30729; **rv:11.0)like Gecko**\n* win EDGE：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 **Edge/12.10240**\n* FireFox：Mozilla/5.0 (Windows NT 10.0; WOW64; rv:49.0) Gecko/20100101 **Firefox/49.0**\n* Chrome：Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) **Chrome/54.0.2840.71** Safari/537.36\n* Opera：Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.87 Safari/537.36 **OPR/41.0.2353.56**\n* Safari：mozilla/5.0 (windows; u; windows nt 5.1; zh-cn) applewebkit/533.16 (khtml, like gecko) version/5.0 **safari/533.16**\n* 360安全浏览器：Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36\n* QQ浏览器：Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.104 Safari/537.36 Core/1.53.1708.400 **QQBrowser/9.5.9635.400**\n\n总结:\n\n* IE 10 之前的版本，匹配关键字 MSIE 8.0；\n* IE 11 要通过 rv:11.0) like Gecko 来匹配；\n* EDGE 通过 Edge/12.10240；\n* Firefox 通过 Firefox/49.0；\n* Chrome 通过 Chrome/54.0.2840.71，但是会发现，后面的浏览器都是基于 Chrome 内核（safari 除外），但是 Chrome 又是基于 safari 内核的。。\n* Opera 通过 OPR/41.0.2353.56，但是网上普遍是通过 opera 字段.\n* Safari 通过 safari/533.16 来匹配；\n* 360 和 QQ 都是基于 Chrome 内核的，当然 QQ 还能通过 QQBrowser/9.5.9635.400，如果你高兴去匹配的话。\n\n# 获取浏览器类型和版本\n\n\tfunction getExplore(){\n\t  var Sys = {};  \n\t  var ua = navigator.userAgent.toLowerCase();  \n\t  var s;  \n\t  (s = ua.match(/rv:([\\d.]+)\\) like gecko/)) ? Sys.ie = s[1] :\n\t  (s = ua.match(/msie ([\\d\\.]+)/)) ? Sys.ie = s[1] :  \n\t  (s = ua.match(/edge\\/([\\d\\.]+)/)) ? Sys.edge = s[1] :\n\t  (s = ua.match(/firefox\\/([\\d\\.]+)/)) ? Sys.firefox = s[1] :  \n\t  (s = ua.match(/(?:opera|opr).([\\d\\.]+)/)) ? Sys.opera = s[1] :  \n\t  (s = ua.match(/chrome\\/([\\d\\.]+)/)) ? Sys.chrome = s[1] :  \n\t  (s = ua.match(/version\\/([\\d\\.]+).*safari/)) ? Sys.safari = s[1] : 0;  \n\t  // 根据关系进行判断\n\t  if (Sys.ie) return ('IE: ' + Sys.ie);  \n\t  if (Sys.edge) return ('EDGE: ' + Sys.edge);\n\t  if (Sys.firefox) return ('Firefox: ' + Sys.firefox);  \n\t  if (Sys.chrome) return ('Chrome: ' + Sys.chrome);  \n\t  if (Sys.opera) return ('Opera: ' + Sys.opera);  \n\t  if (Sys.safari) return ('Safari: ' + Sys.safari);\n\t  return 'Unkonwn';\n\t}\n\n判断的顺序很重要,因为很多浏览器是多核的.\n\n简单判断浏览器类型,不需要版本号:\n\n\tfunction getExploreName(){\n\t  var userAgent = navigator.userAgent;\n\t  if(userAgent.indexOf(\"Opera\") > -1 || userAgent.indexOf(\"OPR\") > -1){\n\t    return 'Opera';\n\t  }else if(userAgent.indexOf(\"compatible\") > -1 && userAgent.indexOf(\"MSIE\") > -1){\n\t    return 'IE';\n\t  }else if(userAgent.indexOf(\"Edge\") > -1){\n\t    return 'Edge';\n\t  }else if(userAgent.indexOf(\"Firefox\") > -1){\n\t    return 'Firefox';\n\t  }else if(userAgent.indexOf(\"Safari\") > -1 && userAgent.indexOf(\"Chrome\") == -1){\n\t    return 'Safari';\n\t  }else if(userAgent.indexOf(\"Chrome\") > -1 && userAgent.indexOf(\"Safari\") > -1){\n\t    return 'Chrome';\n\t  }else if(!!window.ActiveXObject || \"ActiveXObject\" in window){\n\t    return 'IE>=11';\n\t  }else{\n\t    return 'Unkonwn';\n\t  }\n\t}\n\n# 判断 IE 的方法\n\n## 1. \n\n\tif(window.addEventListener){ \n\talert(\"not ie\"); \n\t}else if(window.attachEvent){ \n\talert(\"is ie\"); \n\t}else{ \n\talert(\"这种情况发生在不支持DHTML的老版本浏览器（现在一般都支持）\") \n\t}\n\n## 2.\n\n\tif(document.all){ \n\talert(\"IE\"); \n\t}else{ \n\talert(\"not ie\"); \n\t}\n\n## 3.\n\n\tvar navigatorName = \"Microsoft Internet Explorer\"; \n\tif( navigator.appName == navigatorName ){ \n\talert(\"ie\") \n\t}else{\n\talert(\"not ie\") \n\t}\n\n## 4.\n\n\tif(!+[1,])alert(\"这是ie浏览器\"); \n\telse alert(\"这不是ie浏览器\");\n\n# IE 条件注释\n\n## 关键词释义\n\n\tlt ：就是Less than的简写，也就是小于的意思。\n\t\n\tlte ：就是Less than or equal to的简写，也就是小于或等于的意思。\n\t\n\tgt ：就是Greater than的简写，也就是大于的意思。\n\t\n\tgte：就是Greater than or equal to的简写，也就是大于或等于的意思。\n\t\n\t!：就是不等于的意思，跟javascript里的不等于判断符相同。\n## 例如\n\n* 1.只有 IE 可以识别\n\n\t\t<!--[if IE]>\n\t\t <link type=\"text/css\" rel=\"stylesheet\" href=\"my.css\" />\n\t\t<![endif]-->\n\n* 2.只有特定版本才能识别\n\n\t\t<!--[if IE 8]> \n\t\t<link type=\"text/css\" rel=\"stylesheet\" href=\"my.css\" />   \n\t\t<![endif]-->\n\n*  3.等于或者高于特定版本才能识别\n\n\t\t<!--[if gte IE 7]> \n\t\t<link type=\"text/css\" rel=\"stylesheet\" href=\"my.css\" />   \n\t\t<![endif]-->\n\n\n\n","source":"_posts/2018.12.12.broswercheck.md","raw":"---\ntitle: 检测浏览器类型&判断 IE 版本\ntags: [浏览器]\ncategories: 知识 \n---\n\n# JS 获取浏览器信息\n\n\t浏览器代码名称：navigator.appCodeName\n    浏览器名称：navigator.appName\n    浏览器版本号：navigator.appVersion\n    对Java的支持：navigator.javaEnabled()\n    MIME类型（数组）：navigator.mimeTypes\n    系统平台：navigator.platform\n    插件（数组）：navigator.plugins\n    用户代理：navigator.userAgent\n\n# 各大浏览器的 userAgent 值\n各大浏览器输出 navigator.userAgent 的值：\n\n* IE 8：Mozilla/4.0 (compatible; **MSIE 8.0**; Windows NT 10.0; WOW64; Trident/8.0; .NET4.0C; .NET4.0E; InfoPath.3; .NET CLR 2.0.50727; .NET CLR 3.0.30729; .NET CLR 3.5.30729)\n* IE 11：Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; InfoPath.3; .NET CLR 2.0.50727; .NET CLR 3.0.30729; .NET CLR 3.5.30729; **rv:11.0)like Gecko**\n* win EDGE：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 **Edge/12.10240**\n* FireFox：Mozilla/5.0 (Windows NT 10.0; WOW64; rv:49.0) Gecko/20100101 **Firefox/49.0**\n* Chrome：Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) **Chrome/54.0.2840.71** Safari/537.36\n* Opera：Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.87 Safari/537.36 **OPR/41.0.2353.56**\n* Safari：mozilla/5.0 (windows; u; windows nt 5.1; zh-cn) applewebkit/533.16 (khtml, like gecko) version/5.0 **safari/533.16**\n* 360安全浏览器：Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36\n* QQ浏览器：Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.104 Safari/537.36 Core/1.53.1708.400 **QQBrowser/9.5.9635.400**\n\n总结:\n\n* IE 10 之前的版本，匹配关键字 MSIE 8.0；\n* IE 11 要通过 rv:11.0) like Gecko 来匹配；\n* EDGE 通过 Edge/12.10240；\n* Firefox 通过 Firefox/49.0；\n* Chrome 通过 Chrome/54.0.2840.71，但是会发现，后面的浏览器都是基于 Chrome 内核（safari 除外），但是 Chrome 又是基于 safari 内核的。。\n* Opera 通过 OPR/41.0.2353.56，但是网上普遍是通过 opera 字段.\n* Safari 通过 safari/533.16 来匹配；\n* 360 和 QQ 都是基于 Chrome 内核的，当然 QQ 还能通过 QQBrowser/9.5.9635.400，如果你高兴去匹配的话。\n\n# 获取浏览器类型和版本\n\n\tfunction getExplore(){\n\t  var Sys = {};  \n\t  var ua = navigator.userAgent.toLowerCase();  \n\t  var s;  \n\t  (s = ua.match(/rv:([\\d.]+)\\) like gecko/)) ? Sys.ie = s[1] :\n\t  (s = ua.match(/msie ([\\d\\.]+)/)) ? Sys.ie = s[1] :  \n\t  (s = ua.match(/edge\\/([\\d\\.]+)/)) ? Sys.edge = s[1] :\n\t  (s = ua.match(/firefox\\/([\\d\\.]+)/)) ? Sys.firefox = s[1] :  \n\t  (s = ua.match(/(?:opera|opr).([\\d\\.]+)/)) ? Sys.opera = s[1] :  \n\t  (s = ua.match(/chrome\\/([\\d\\.]+)/)) ? Sys.chrome = s[1] :  \n\t  (s = ua.match(/version\\/([\\d\\.]+).*safari/)) ? Sys.safari = s[1] : 0;  \n\t  // 根据关系进行判断\n\t  if (Sys.ie) return ('IE: ' + Sys.ie);  \n\t  if (Sys.edge) return ('EDGE: ' + Sys.edge);\n\t  if (Sys.firefox) return ('Firefox: ' + Sys.firefox);  \n\t  if (Sys.chrome) return ('Chrome: ' + Sys.chrome);  \n\t  if (Sys.opera) return ('Opera: ' + Sys.opera);  \n\t  if (Sys.safari) return ('Safari: ' + Sys.safari);\n\t  return 'Unkonwn';\n\t}\n\n判断的顺序很重要,因为很多浏览器是多核的.\n\n简单判断浏览器类型,不需要版本号:\n\n\tfunction getExploreName(){\n\t  var userAgent = navigator.userAgent;\n\t  if(userAgent.indexOf(\"Opera\") > -1 || userAgent.indexOf(\"OPR\") > -1){\n\t    return 'Opera';\n\t  }else if(userAgent.indexOf(\"compatible\") > -1 && userAgent.indexOf(\"MSIE\") > -1){\n\t    return 'IE';\n\t  }else if(userAgent.indexOf(\"Edge\") > -1){\n\t    return 'Edge';\n\t  }else if(userAgent.indexOf(\"Firefox\") > -1){\n\t    return 'Firefox';\n\t  }else if(userAgent.indexOf(\"Safari\") > -1 && userAgent.indexOf(\"Chrome\") == -1){\n\t    return 'Safari';\n\t  }else if(userAgent.indexOf(\"Chrome\") > -1 && userAgent.indexOf(\"Safari\") > -1){\n\t    return 'Chrome';\n\t  }else if(!!window.ActiveXObject || \"ActiveXObject\" in window){\n\t    return 'IE>=11';\n\t  }else{\n\t    return 'Unkonwn';\n\t  }\n\t}\n\n# 判断 IE 的方法\n\n## 1. \n\n\tif(window.addEventListener){ \n\talert(\"not ie\"); \n\t}else if(window.attachEvent){ \n\talert(\"is ie\"); \n\t}else{ \n\talert(\"这种情况发生在不支持DHTML的老版本浏览器（现在一般都支持）\") \n\t}\n\n## 2.\n\n\tif(document.all){ \n\talert(\"IE\"); \n\t}else{ \n\talert(\"not ie\"); \n\t}\n\n## 3.\n\n\tvar navigatorName = \"Microsoft Internet Explorer\"; \n\tif( navigator.appName == navigatorName ){ \n\talert(\"ie\") \n\t}else{\n\talert(\"not ie\") \n\t}\n\n## 4.\n\n\tif(!+[1,])alert(\"这是ie浏览器\"); \n\telse alert(\"这不是ie浏览器\");\n\n# IE 条件注释\n\n## 关键词释义\n\n\tlt ：就是Less than的简写，也就是小于的意思。\n\t\n\tlte ：就是Less than or equal to的简写，也就是小于或等于的意思。\n\t\n\tgt ：就是Greater than的简写，也就是大于的意思。\n\t\n\tgte：就是Greater than or equal to的简写，也就是大于或等于的意思。\n\t\n\t!：就是不等于的意思，跟javascript里的不等于判断符相同。\n## 例如\n\n* 1.只有 IE 可以识别\n\n\t\t<!--[if IE]>\n\t\t <link type=\"text/css\" rel=\"stylesheet\" href=\"my.css\" />\n\t\t<![endif]-->\n\n* 2.只有特定版本才能识别\n\n\t\t<!--[if IE 8]> \n\t\t<link type=\"text/css\" rel=\"stylesheet\" href=\"my.css\" />   \n\t\t<![endif]-->\n\n*  3.等于或者高于特定版本才能识别\n\n\t\t<!--[if gte IE 7]> \n\t\t<link type=\"text/css\" rel=\"stylesheet\" href=\"my.css\" />   \n\t\t<![endif]-->\n\n\n\n","slug":"2018.12.12.broswercheck","published":1,"date":"2018-12-12T08:49:11.032Z","updated":"2018-12-12T09:38:35.477Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwvh259e001zw39zp61mdu6y","content":"<h1 id=\"JS-获取浏览器信息\"><a href=\"#JS-获取浏览器信息\" class=\"headerlink\" title=\"JS 获取浏览器信息\"></a>JS 获取浏览器信息</h1><pre><code>浏览器代码名称：navigator.appCodeName\n浏览器名称：navigator.appName\n浏览器版本号：navigator.appVersion\n对Java的支持：navigator.javaEnabled()\nMIME类型（数组）：navigator.mimeTypes\n系统平台：navigator.platform\n插件（数组）：navigator.plugins\n用户代理：navigator.userAgent\n</code></pre><h1 id=\"各大浏览器的-userAgent-值\"><a href=\"#各大浏览器的-userAgent-值\" class=\"headerlink\" title=\"各大浏览器的 userAgent 值\"></a>各大浏览器的 userAgent 值</h1><p>各大浏览器输出 navigator.userAgent 的值：</p>\n<ul>\n<li>IE 8：Mozilla/4.0 (compatible; <strong>MSIE 8.0</strong>; Windows NT 10.0; WOW64; Trident/8.0; .NET4.0C; .NET4.0E; InfoPath.3; .NET CLR 2.0.50727; .NET CLR 3.0.30729; .NET CLR 3.5.30729)</li>\n<li>IE 11：Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; InfoPath.3; .NET CLR 2.0.50727; .NET CLR 3.0.30729; .NET CLR 3.5.30729; <strong>rv:11.0)like Gecko</strong></li>\n<li>win EDGE：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 <strong>Edge/12.10240</strong></li>\n<li>FireFox：Mozilla/5.0 (Windows NT 10.0; WOW64; rv:49.0) Gecko/20100101 <strong>Firefox/49.0</strong></li>\n<li>Chrome：Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) <strong>Chrome/54.0.2840.71</strong> Safari/537.36</li>\n<li>Opera：Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.87 Safari/537.36 <strong>OPR/41.0.2353.56</strong></li>\n<li>Safari：mozilla/5.0 (windows; u; windows nt 5.1; zh-cn) applewebkit/533.16 (khtml, like gecko) version/5.0 <strong>safari/533.16</strong></li>\n<li>360安全浏览器：Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36</li>\n<li>QQ浏览器：Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.104 Safari/537.36 Core/1.53.1708.400 <strong>QQBrowser/9.5.9635.400</strong></li>\n</ul>\n<p>总结:</p>\n<ul>\n<li>IE 10 之前的版本，匹配关键字 MSIE 8.0；</li>\n<li>IE 11 要通过 rv:11.0) like Gecko 来匹配；</li>\n<li>EDGE 通过 Edge/12.10240；</li>\n<li>Firefox 通过 Firefox/49.0；</li>\n<li>Chrome 通过 Chrome/54.0.2840.71，但是会发现，后面的浏览器都是基于 Chrome 内核（safari 除外），但是 Chrome 又是基于 safari 内核的。。</li>\n<li>Opera 通过 OPR/41.0.2353.56，但是网上普遍是通过 opera 字段.</li>\n<li>Safari 通过 safari/533.16 来匹配；</li>\n<li>360 和 QQ 都是基于 Chrome 内核的，当然 QQ 还能通过 QQBrowser/9.5.9635.400，如果你高兴去匹配的话。</li>\n</ul>\n<h1 id=\"获取浏览器类型和版本\"><a href=\"#获取浏览器类型和版本\" class=\"headerlink\" title=\"获取浏览器类型和版本\"></a>获取浏览器类型和版本</h1><pre><code>function getExplore(){\n  var Sys = {};  \n  var ua = navigator.userAgent.toLowerCase();  \n  var s;  \n  (s = ua.match(/rv:([\\d.]+)\\) like gecko/)) ? Sys.ie = s[1] :\n  (s = ua.match(/msie ([\\d\\.]+)/)) ? Sys.ie = s[1] :  \n  (s = ua.match(/edge\\/([\\d\\.]+)/)) ? Sys.edge = s[1] :\n  (s = ua.match(/firefox\\/([\\d\\.]+)/)) ? Sys.firefox = s[1] :  \n  (s = ua.match(/(?:opera|opr).([\\d\\.]+)/)) ? Sys.opera = s[1] :  \n  (s = ua.match(/chrome\\/([\\d\\.]+)/)) ? Sys.chrome = s[1] :  \n  (s = ua.match(/version\\/([\\d\\.]+).*safari/)) ? Sys.safari = s[1] : 0;  \n  // 根据关系进行判断\n  if (Sys.ie) return (&apos;IE: &apos; + Sys.ie);  \n  if (Sys.edge) return (&apos;EDGE: &apos; + Sys.edge);\n  if (Sys.firefox) return (&apos;Firefox: &apos; + Sys.firefox);  \n  if (Sys.chrome) return (&apos;Chrome: &apos; + Sys.chrome);  \n  if (Sys.opera) return (&apos;Opera: &apos; + Sys.opera);  \n  if (Sys.safari) return (&apos;Safari: &apos; + Sys.safari);\n  return &apos;Unkonwn&apos;;\n}\n</code></pre><p>判断的顺序很重要,因为很多浏览器是多核的.</p>\n<p>简单判断浏览器类型,不需要版本号:</p>\n<pre><code>function getExploreName(){\n  var userAgent = navigator.userAgent;\n  if(userAgent.indexOf(&quot;Opera&quot;) &gt; -1 || userAgent.indexOf(&quot;OPR&quot;) &gt; -1){\n    return &apos;Opera&apos;;\n  }else if(userAgent.indexOf(&quot;compatible&quot;) &gt; -1 &amp;&amp; userAgent.indexOf(&quot;MSIE&quot;) &gt; -1){\n    return &apos;IE&apos;;\n  }else if(userAgent.indexOf(&quot;Edge&quot;) &gt; -1){\n    return &apos;Edge&apos;;\n  }else if(userAgent.indexOf(&quot;Firefox&quot;) &gt; -1){\n    return &apos;Firefox&apos;;\n  }else if(userAgent.indexOf(&quot;Safari&quot;) &gt; -1 &amp;&amp; userAgent.indexOf(&quot;Chrome&quot;) == -1){\n    return &apos;Safari&apos;;\n  }else if(userAgent.indexOf(&quot;Chrome&quot;) &gt; -1 &amp;&amp; userAgent.indexOf(&quot;Safari&quot;) &gt; -1){\n    return &apos;Chrome&apos;;\n  }else if(!!window.ActiveXObject || &quot;ActiveXObject&quot; in window){\n    return &apos;IE&gt;=11&apos;;\n  }else{\n    return &apos;Unkonwn&apos;;\n  }\n}\n</code></pre><h1 id=\"判断-IE-的方法\"><a href=\"#判断-IE-的方法\" class=\"headerlink\" title=\"判断 IE 的方法\"></a>判断 IE 的方法</h1><h2 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1.\"></a>1.</h2><pre><code>if(window.addEventListener){ \nalert(&quot;not ie&quot;); \n}else if(window.attachEvent){ \nalert(&quot;is ie&quot;); \n}else{ \nalert(&quot;这种情况发生在不支持DHTML的老版本浏览器（现在一般都支持）&quot;) \n}\n</code></pre><h2 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2.\"></a>2.</h2><pre><code>if(document.all){ \nalert(&quot;IE&quot;); \n}else{ \nalert(&quot;not ie&quot;); \n}\n</code></pre><h2 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3.\"></a>3.</h2><pre><code>var navigatorName = &quot;Microsoft Internet Explorer&quot;; \nif( navigator.appName == navigatorName ){ \nalert(&quot;ie&quot;) \n}else{\nalert(&quot;not ie&quot;) \n}\n</code></pre><h2 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4.\"></a>4.</h2><pre><code>if(!+[1,])alert(&quot;这是ie浏览器&quot;); \nelse alert(&quot;这不是ie浏览器&quot;);\n</code></pre><h1 id=\"IE-条件注释\"><a href=\"#IE-条件注释\" class=\"headerlink\" title=\"IE 条件注释\"></a>IE 条件注释</h1><h2 id=\"关键词释义\"><a href=\"#关键词释义\" class=\"headerlink\" title=\"关键词释义\"></a>关键词释义</h2><pre><code>lt ：就是Less than的简写，也就是小于的意思。\n\nlte ：就是Less than or equal to的简写，也就是小于或等于的意思。\n\ngt ：就是Greater than的简写，也就是大于的意思。\n\ngte：就是Greater than or equal to的简写，也就是大于或等于的意思。\n\n!：就是不等于的意思，跟javascript里的不等于判断符相同。\n</code></pre><h2 id=\"例如\"><a href=\"#例如\" class=\"headerlink\" title=\"例如\"></a>例如</h2><ul>\n<li><p>1.只有 IE 可以识别</p>\n<pre><code>&lt;!--[if IE]&gt;\n &lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;my.css&quot; /&gt;\n&lt;![endif]--&gt;\n</code></pre></li>\n<li><p>2.只有特定版本才能识别</p>\n<pre><code>&lt;!--[if IE 8]&gt; \n&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;my.css&quot; /&gt;   \n&lt;![endif]--&gt;\n</code></pre></li>\n<li><p>3.等于或者高于特定版本才能识别</p>\n<pre><code>&lt;!--[if gte IE 7]&gt; \n&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;my.css&quot; /&gt;   \n&lt;![endif]--&gt;\n</code></pre></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"JS-获取浏览器信息\"><a href=\"#JS-获取浏览器信息\" class=\"headerlink\" title=\"JS 获取浏览器信息\"></a>JS 获取浏览器信息</h1><pre><code>浏览器代码名称：navigator.appCodeName\n浏览器名称：navigator.appName\n浏览器版本号：navigator.appVersion\n对Java的支持：navigator.javaEnabled()\nMIME类型（数组）：navigator.mimeTypes\n系统平台：navigator.platform\n插件（数组）：navigator.plugins\n用户代理：navigator.userAgent\n</code></pre><h1 id=\"各大浏览器的-userAgent-值\"><a href=\"#各大浏览器的-userAgent-值\" class=\"headerlink\" title=\"各大浏览器的 userAgent 值\"></a>各大浏览器的 userAgent 值</h1><p>各大浏览器输出 navigator.userAgent 的值：</p>\n<ul>\n<li>IE 8：Mozilla/4.0 (compatible; <strong>MSIE 8.0</strong>; Windows NT 10.0; WOW64; Trident/8.0; .NET4.0C; .NET4.0E; InfoPath.3; .NET CLR 2.0.50727; .NET CLR 3.0.30729; .NET CLR 3.5.30729)</li>\n<li>IE 11：Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; InfoPath.3; .NET CLR 2.0.50727; .NET CLR 3.0.30729; .NET CLR 3.5.30729; <strong>rv:11.0)like Gecko</strong></li>\n<li>win EDGE：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 <strong>Edge/12.10240</strong></li>\n<li>FireFox：Mozilla/5.0 (Windows NT 10.0; WOW64; rv:49.0) Gecko/20100101 <strong>Firefox/49.0</strong></li>\n<li>Chrome：Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) <strong>Chrome/54.0.2840.71</strong> Safari/537.36</li>\n<li>Opera：Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.87 Safari/537.36 <strong>OPR/41.0.2353.56</strong></li>\n<li>Safari：mozilla/5.0 (windows; u; windows nt 5.1; zh-cn) applewebkit/533.16 (khtml, like gecko) version/5.0 <strong>safari/533.16</strong></li>\n<li>360安全浏览器：Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36</li>\n<li>QQ浏览器：Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.104 Safari/537.36 Core/1.53.1708.400 <strong>QQBrowser/9.5.9635.400</strong></li>\n</ul>\n<p>总结:</p>\n<ul>\n<li>IE 10 之前的版本，匹配关键字 MSIE 8.0；</li>\n<li>IE 11 要通过 rv:11.0) like Gecko 来匹配；</li>\n<li>EDGE 通过 Edge/12.10240；</li>\n<li>Firefox 通过 Firefox/49.0；</li>\n<li>Chrome 通过 Chrome/54.0.2840.71，但是会发现，后面的浏览器都是基于 Chrome 内核（safari 除外），但是 Chrome 又是基于 safari 内核的。。</li>\n<li>Opera 通过 OPR/41.0.2353.56，但是网上普遍是通过 opera 字段.</li>\n<li>Safari 通过 safari/533.16 来匹配；</li>\n<li>360 和 QQ 都是基于 Chrome 内核的，当然 QQ 还能通过 QQBrowser/9.5.9635.400，如果你高兴去匹配的话。</li>\n</ul>\n<h1 id=\"获取浏览器类型和版本\"><a href=\"#获取浏览器类型和版本\" class=\"headerlink\" title=\"获取浏览器类型和版本\"></a>获取浏览器类型和版本</h1><pre><code>function getExplore(){\n  var Sys = {};  \n  var ua = navigator.userAgent.toLowerCase();  \n  var s;  \n  (s = ua.match(/rv:([\\d.]+)\\) like gecko/)) ? Sys.ie = s[1] :\n  (s = ua.match(/msie ([\\d\\.]+)/)) ? Sys.ie = s[1] :  \n  (s = ua.match(/edge\\/([\\d\\.]+)/)) ? Sys.edge = s[1] :\n  (s = ua.match(/firefox\\/([\\d\\.]+)/)) ? Sys.firefox = s[1] :  \n  (s = ua.match(/(?:opera|opr).([\\d\\.]+)/)) ? Sys.opera = s[1] :  \n  (s = ua.match(/chrome\\/([\\d\\.]+)/)) ? Sys.chrome = s[1] :  \n  (s = ua.match(/version\\/([\\d\\.]+).*safari/)) ? Sys.safari = s[1] : 0;  \n  // 根据关系进行判断\n  if (Sys.ie) return (&apos;IE: &apos; + Sys.ie);  \n  if (Sys.edge) return (&apos;EDGE: &apos; + Sys.edge);\n  if (Sys.firefox) return (&apos;Firefox: &apos; + Sys.firefox);  \n  if (Sys.chrome) return (&apos;Chrome: &apos; + Sys.chrome);  \n  if (Sys.opera) return (&apos;Opera: &apos; + Sys.opera);  \n  if (Sys.safari) return (&apos;Safari: &apos; + Sys.safari);\n  return &apos;Unkonwn&apos;;\n}\n</code></pre><p>判断的顺序很重要,因为很多浏览器是多核的.</p>\n<p>简单判断浏览器类型,不需要版本号:</p>\n<pre><code>function getExploreName(){\n  var userAgent = navigator.userAgent;\n  if(userAgent.indexOf(&quot;Opera&quot;) &gt; -1 || userAgent.indexOf(&quot;OPR&quot;) &gt; -1){\n    return &apos;Opera&apos;;\n  }else if(userAgent.indexOf(&quot;compatible&quot;) &gt; -1 &amp;&amp; userAgent.indexOf(&quot;MSIE&quot;) &gt; -1){\n    return &apos;IE&apos;;\n  }else if(userAgent.indexOf(&quot;Edge&quot;) &gt; -1){\n    return &apos;Edge&apos;;\n  }else if(userAgent.indexOf(&quot;Firefox&quot;) &gt; -1){\n    return &apos;Firefox&apos;;\n  }else if(userAgent.indexOf(&quot;Safari&quot;) &gt; -1 &amp;&amp; userAgent.indexOf(&quot;Chrome&quot;) == -1){\n    return &apos;Safari&apos;;\n  }else if(userAgent.indexOf(&quot;Chrome&quot;) &gt; -1 &amp;&amp; userAgent.indexOf(&quot;Safari&quot;) &gt; -1){\n    return &apos;Chrome&apos;;\n  }else if(!!window.ActiveXObject || &quot;ActiveXObject&quot; in window){\n    return &apos;IE&gt;=11&apos;;\n  }else{\n    return &apos;Unkonwn&apos;;\n  }\n}\n</code></pre><h1 id=\"判断-IE-的方法\"><a href=\"#判断-IE-的方法\" class=\"headerlink\" title=\"判断 IE 的方法\"></a>判断 IE 的方法</h1><h2 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1.\"></a>1.</h2><pre><code>if(window.addEventListener){ \nalert(&quot;not ie&quot;); \n}else if(window.attachEvent){ \nalert(&quot;is ie&quot;); \n}else{ \nalert(&quot;这种情况发生在不支持DHTML的老版本浏览器（现在一般都支持）&quot;) \n}\n</code></pre><h2 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2.\"></a>2.</h2><pre><code>if(document.all){ \nalert(&quot;IE&quot;); \n}else{ \nalert(&quot;not ie&quot;); \n}\n</code></pre><h2 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3.\"></a>3.</h2><pre><code>var navigatorName = &quot;Microsoft Internet Explorer&quot;; \nif( navigator.appName == navigatorName ){ \nalert(&quot;ie&quot;) \n}else{\nalert(&quot;not ie&quot;) \n}\n</code></pre><h2 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4.\"></a>4.</h2><pre><code>if(!+[1,])alert(&quot;这是ie浏览器&quot;); \nelse alert(&quot;这不是ie浏览器&quot;);\n</code></pre><h1 id=\"IE-条件注释\"><a href=\"#IE-条件注释\" class=\"headerlink\" title=\"IE 条件注释\"></a>IE 条件注释</h1><h2 id=\"关键词释义\"><a href=\"#关键词释义\" class=\"headerlink\" title=\"关键词释义\"></a>关键词释义</h2><pre><code>lt ：就是Less than的简写，也就是小于的意思。\n\nlte ：就是Less than or equal to的简写，也就是小于或等于的意思。\n\ngt ：就是Greater than的简写，也就是大于的意思。\n\ngte：就是Greater than or equal to的简写，也就是大于或等于的意思。\n\n!：就是不等于的意思，跟javascript里的不等于判断符相同。\n</code></pre><h2 id=\"例如\"><a href=\"#例如\" class=\"headerlink\" title=\"例如\"></a>例如</h2><ul>\n<li><p>1.只有 IE 可以识别</p>\n<pre><code>&lt;!--[if IE]&gt;\n &lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;my.css&quot; /&gt;\n&lt;![endif]--&gt;\n</code></pre></li>\n<li><p>2.只有特定版本才能识别</p>\n<pre><code>&lt;!--[if IE 8]&gt; \n&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;my.css&quot; /&gt;   \n&lt;![endif]--&gt;\n</code></pre></li>\n<li><p>3.等于或者高于特定版本才能识别</p>\n<pre><code>&lt;!--[if gte IE 7]&gt; \n&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;my.css&quot; /&gt;   \n&lt;![endif]--&gt;\n</code></pre></li>\n</ul>\n"},{"title":"使用 impress.js 制作PPT","_content":"\n[impress.js](https://github.com/impress/impress.js?utm_source=recordnotfound.com),用写代码的方式来制作 PPT, 逼格极高.[DEMO](https://impress.js.org/#/bored).\n\n# 使用\n##初始化\n* 创建一个 id 为 impress 的 div, 之后的所有文稿都会放在这个 div 里面.\n* 引入 impress.js   \n\n\t\t<script type=\"text/javascript\" src=\"impress.js\"></script>\n\t\t<script type=\"text/javascript\">\n\t\timpress().init()\n\t\t</script>\n\n## 创建幻灯片\n\n每张幻灯片都放在 class 为 step 的 div 里面,同时也可以为这个 div 指定 id,如下:\n\n\t<div id=\"bored\" class=\"step slide\" data-x=\"-1000\" data-y=\"-1500\" data-autoplay=\"10\">\n\t            <q>Aren’t you just <b>bored</b> with all those slides-based presentations?</q>\n\t        </div>\n\n创建以后将按照顺序播放.\n\n### 参数  \n\n#### 位置属性\n\nimpress.js 创建一个三维空间,每张幻灯片都有自己的位置(x,y,z).\n\ndata-x: x 轴坐标,向右越来越大;\n\ndata-y:y 轴坐标,向下越来越大;\n\ndata-z:z 轴坐标,向屏幕外越来越大\n\n从第一张幻灯片开始,camera 会移到每个幻灯片的坐标处,产生变换的效果.\n\n#### data-autoplay\n\n 自动播放的时间,如 data-auto-play='10' 代表在10s 后播放下一张幻灯片.\n\n#### data-scale\n\n 放大的倍数,如  data-scale='4' 代表这个元素的大小是正常元素的四倍.\n\n#### data-rorate\n\n 旋转的角度 ,如 data-rotate='90' 代表顺时针旋转90度, 角度为负则代表逆时针旋转指定度数.\n\n#### data-rorate-x/data-rorate-y\n\n 相对于x,y 轴旋转的角度.","source":"_posts/2018.12.19.impress.js.md","raw":"---\ntitle: 使用 impress.js 制作PPT\ntags: [JS]\ncategories: 知识 \n---\n\n[impress.js](https://github.com/impress/impress.js?utm_source=recordnotfound.com),用写代码的方式来制作 PPT, 逼格极高.[DEMO](https://impress.js.org/#/bored).\n\n# 使用\n##初始化\n* 创建一个 id 为 impress 的 div, 之后的所有文稿都会放在这个 div 里面.\n* 引入 impress.js   \n\n\t\t<script type=\"text/javascript\" src=\"impress.js\"></script>\n\t\t<script type=\"text/javascript\">\n\t\timpress().init()\n\t\t</script>\n\n## 创建幻灯片\n\n每张幻灯片都放在 class 为 step 的 div 里面,同时也可以为这个 div 指定 id,如下:\n\n\t<div id=\"bored\" class=\"step slide\" data-x=\"-1000\" data-y=\"-1500\" data-autoplay=\"10\">\n\t            <q>Aren’t you just <b>bored</b> with all those slides-based presentations?</q>\n\t        </div>\n\n创建以后将按照顺序播放.\n\n### 参数  \n\n#### 位置属性\n\nimpress.js 创建一个三维空间,每张幻灯片都有自己的位置(x,y,z).\n\ndata-x: x 轴坐标,向右越来越大;\n\ndata-y:y 轴坐标,向下越来越大;\n\ndata-z:z 轴坐标,向屏幕外越来越大\n\n从第一张幻灯片开始,camera 会移到每个幻灯片的坐标处,产生变换的效果.\n\n#### data-autoplay\n\n 自动播放的时间,如 data-auto-play='10' 代表在10s 后播放下一张幻灯片.\n\n#### data-scale\n\n 放大的倍数,如  data-scale='4' 代表这个元素的大小是正常元素的四倍.\n\n#### data-rorate\n\n 旋转的角度 ,如 data-rotate='90' 代表顺时针旋转90度, 角度为负则代表逆时针旋转指定度数.\n\n#### data-rorate-x/data-rorate-y\n\n 相对于x,y 轴旋转的角度.","slug":"2018.12.19.impress.js","published":1,"date":"2018-12-19T02:24:11.701Z","updated":"2018-12-19T04:56:31.579Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwvh259e0023w39zhxy5k7g2","content":"<p><a href=\"https://github.com/impress/impress.js?utm_source=recordnotfound.com\" target=\"_blank\" rel=\"external\">impress.js</a>,用写代码的方式来制作 PPT, 逼格极高.<a href=\"https://impress.js.org/#/bored\" target=\"_blank\" rel=\"external\">DEMO</a>.</p>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><p>##初始化</p>\n<ul>\n<li>创建一个 id 为 impress 的 div, 之后的所有文稿都会放在这个 div 里面.</li>\n<li><p>引入 impress.js   </p>\n<pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;impress.js&quot;&gt;&lt;/script&gt;\n&lt;script type=&quot;text/javascript&quot;&gt;\nimpress().init()\n&lt;/script&gt;\n</code></pre></li>\n</ul>\n<h2 id=\"创建幻灯片\"><a href=\"#创建幻灯片\" class=\"headerlink\" title=\"创建幻灯片\"></a>创建幻灯片</h2><p>每张幻灯片都放在 class 为 step 的 div 里面,同时也可以为这个 div 指定 id,如下:</p>\n<pre><code>&lt;div id=&quot;bored&quot; class=&quot;step slide&quot; data-x=&quot;-1000&quot; data-y=&quot;-1500&quot; data-autoplay=&quot;10&quot;&gt;\n            &lt;q&gt;Aren’t you just &lt;b&gt;bored&lt;/b&gt; with all those slides-based presentations?&lt;/q&gt;\n        &lt;/div&gt;\n</code></pre><p>创建以后将按照顺序播放.</p>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><h4 id=\"位置属性\"><a href=\"#位置属性\" class=\"headerlink\" title=\"位置属性\"></a>位置属性</h4><p>impress.js 创建一个三维空间,每张幻灯片都有自己的位置(x,y,z).</p>\n<p>data-x: x 轴坐标,向右越来越大;</p>\n<p>data-y:y 轴坐标,向下越来越大;</p>\n<p>data-z:z 轴坐标,向屏幕外越来越大</p>\n<p>从第一张幻灯片开始,camera 会移到每个幻灯片的坐标处,产生变换的效果.</p>\n<h4 id=\"data-autoplay\"><a href=\"#data-autoplay\" class=\"headerlink\" title=\"data-autoplay\"></a>data-autoplay</h4><p> 自动播放的时间,如 data-auto-play=’10’ 代表在10s 后播放下一张幻灯片.</p>\n<h4 id=\"data-scale\"><a href=\"#data-scale\" class=\"headerlink\" title=\"data-scale\"></a>data-scale</h4><p> 放大的倍数,如  data-scale=’4’ 代表这个元素的大小是正常元素的四倍.</p>\n<h4 id=\"data-rorate\"><a href=\"#data-rorate\" class=\"headerlink\" title=\"data-rorate\"></a>data-rorate</h4><p> 旋转的角度 ,如 data-rotate=’90’ 代表顺时针旋转90度, 角度为负则代表逆时针旋转指定度数.</p>\n<h4 id=\"data-rorate-x-data-rorate-y\"><a href=\"#data-rorate-x-data-rorate-y\" class=\"headerlink\" title=\"data-rorate-x/data-rorate-y\"></a>data-rorate-x/data-rorate-y</h4><p> 相对于x,y 轴旋转的角度.</p>\n","excerpt":"","more":"<p><a href=\"https://github.com/impress/impress.js?utm_source=recordnotfound.com\">impress.js</a>,用写代码的方式来制作 PPT, 逼格极高.<a href=\"https://impress.js.org/#/bored\">DEMO</a>.</p>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><p>##初始化</p>\n<ul>\n<li>创建一个 id 为 impress 的 div, 之后的所有文稿都会放在这个 div 里面.</li>\n<li><p>引入 impress.js   </p>\n<pre><code>&lt;script type=&quot;text/javascript&quot; src=&quot;impress.js&quot;&gt;&lt;/script&gt;\n&lt;script type=&quot;text/javascript&quot;&gt;\nimpress().init()\n&lt;/script&gt;\n</code></pre></li>\n</ul>\n<h2 id=\"创建幻灯片\"><a href=\"#创建幻灯片\" class=\"headerlink\" title=\"创建幻灯片\"></a>创建幻灯片</h2><p>每张幻灯片都放在 class 为 step 的 div 里面,同时也可以为这个 div 指定 id,如下:</p>\n<pre><code>&lt;div id=&quot;bored&quot; class=&quot;step slide&quot; data-x=&quot;-1000&quot; data-y=&quot;-1500&quot; data-autoplay=&quot;10&quot;&gt;\n            &lt;q&gt;Aren’t you just &lt;b&gt;bored&lt;/b&gt; with all those slides-based presentations?&lt;/q&gt;\n        &lt;/div&gt;\n</code></pre><p>创建以后将按照顺序播放.</p>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><h4 id=\"位置属性\"><a href=\"#位置属性\" class=\"headerlink\" title=\"位置属性\"></a>位置属性</h4><p>impress.js 创建一个三维空间,每张幻灯片都有自己的位置(x,y,z).</p>\n<p>data-x: x 轴坐标,向右越来越大;</p>\n<p>data-y:y 轴坐标,向下越来越大;</p>\n<p>data-z:z 轴坐标,向屏幕外越来越大</p>\n<p>从第一张幻灯片开始,camera 会移到每个幻灯片的坐标处,产生变换的效果.</p>\n<h4 id=\"data-autoplay\"><a href=\"#data-autoplay\" class=\"headerlink\" title=\"data-autoplay\"></a>data-autoplay</h4><p> 自动播放的时间,如 data-auto-play=’10’ 代表在10s 后播放下一张幻灯片.</p>\n<h4 id=\"data-scale\"><a href=\"#data-scale\" class=\"headerlink\" title=\"data-scale\"></a>data-scale</h4><p> 放大的倍数,如  data-scale=’4’ 代表这个元素的大小是正常元素的四倍.</p>\n<h4 id=\"data-rorate\"><a href=\"#data-rorate\" class=\"headerlink\" title=\"data-rorate\"></a>data-rorate</h4><p> 旋转的角度 ,如 data-rotate=’90’ 代表顺时针旋转90度, 角度为负则代表逆时针旋转指定度数.</p>\n<h4 id=\"data-rorate-x-data-rorate-y\"><a href=\"#data-rorate-x-data-rorate-y\" class=\"headerlink\" title=\"data-rorate-x/data-rorate-y\"></a>data-rorate-x/data-rorate-y</h4><p> 相对于x,y 轴旋转的角度.</p>\n"},{"title":"ES6 之 promise","_content":"\npromise 是一步变成的一种解决方案,比传统的回调函数和事件更强大和合理, es6将其写入语言标准,统一了用法,并原生提供了 promise对象.从语法上来说, promise 是一个对象,从它可以获取异步操作的消息, promise 提供统一的 api, 各种异步操作都可以用同样的方法进行处理.\n\n# promise 的特点\n\n## 对象的状态不受外界影响\n\n promise 对象代表一个异步操作,有三种状态, pending(进行中),fulfilled(已成功)和 rejected(已失败).只有结果来决定当前是哪种状态.\n\n## 一旦状态改变就不再变化\n\n promise 对象的改变,只有两种可能,从 pending 变为 fulfilled 和从 pending 变为 rejected, 发生这两种状态改变以后装填就不再变化了.如果改变已经发生了,再对 promise 对象添加回调函数,也会立即得到这个结果.\n\n# 基本用法\n\n promise 对象是一个构造函数,用来生成 promise 实例.\n\n\tconst promise = new Promise(function(resolve, reject) {\n\t  // ... some code\n\t\n\t  if (/* 异步操作成功 */){\n\t    resolve(value);\n\t  } else {\n\t    reject(error);\n\t  }\n\t});\n\nPromise 构造函数接受一个函数作为参数,该函数的两个参数分别为 resolve 和 reject, 这两个参数是两个函数.\n\nresolve 函数的作用是,将 promise 对象的状态从未完成装变为完成,即从 pending 变为 resolved. 在异步操作成功时调用,并将异步操作的结果,作为参数传递出去;\n\nreject 函数的作用是,将 promise 对象的状态从未完成变为失败,即从 pending 变为 rejected. 在异步操作失败时调用,并将异步操作爆出的信息,作为参数传递出去.\n\nPromise 实例生成以后,可以使用 .then  方法来接收两个回调函数作为参数,第一个回调函数是Promise对象的状态变为resolved时调用，第二个回调函数是Promise对象的状态变为rejected时调用。其中，第二个函数是可选的，不一定要提供。这两个函数都接受Promise对象传出的值作为参数。\n\n也可以使用 .catch 来接收 promise 变为 rejected 时的回调函数.\n\n\tfunction test(resolve, reject) {\n\t    var timeOut = Math.random() * 2;\n\t    log('set timeout to: ' + timeOut + ' seconds.');\n\t    setTimeout(function () {\n\t        if (timeOut < 1) {\n\t            log('call resolve()...');\n\t            resolve('200 OK');\n\t        }\n\t        else {\n\t            log('call reject()...');\n\t            reject('timeout in ' + timeOut + ' seconds.');\n\t        }\n\t    }, timeOut * 1000);\n\t};\n\tnew Promise(test).then(function (result) {\n\t    console.log('成功：' + result);\n\t}).catch(function (reason) {\n\t    console.log('失败：' + reason);\n\t});\n\n`test()`只关心自身的逻辑,并不关心具体的 resolve 和 rejected 将如何处理结果.也就是说 Promise 最大的好处,就是在异步执行的过程中,吧执行代码和处理结果清晰地分离了.\n\nPromise还可以做更多的事情，比如，有若干个异步任务，需要先做任务1，如果成功后再做任务2，任何任务失败则不再继续并执行错误处理函数。\n\n有些时候，多个异步任务是为了容错。比如，同时向两个URL读取用户的个人信息，只需要获得先返回的结果即可。这种情况下，用Promise.race()实现：\n\n\tvar p1 = new Promise(function (resolve, reject) {\n\t    setTimeout(resolve, 500, 'P1');\n\t});\n\tvar p2 = new Promise(function (resolve, reject) {\n\t    setTimeout(resolve, 600, 'P2');\n\t});\n\tPromise.race([p1, p2]).then(function (result) {\n\t    console.log(result); // 'P1'\n\t});\n\n由于p1执行较快，Promise的then()将获得结果'P1'。p2仍在继续执行，但执行结果将被丢弃。\n\n如果我们组合使用Promise，就可以把很多异步任务以并行和串行的方式组合起来执行。\n\n\nto be continued...","source":"_posts/2018.12.24.es6-promise.md","raw":"---\ntitle: ES6 之 promise\ntags: [es6]\ncategories: 知识 \n---\n\npromise 是一步变成的一种解决方案,比传统的回调函数和事件更强大和合理, es6将其写入语言标准,统一了用法,并原生提供了 promise对象.从语法上来说, promise 是一个对象,从它可以获取异步操作的消息, promise 提供统一的 api, 各种异步操作都可以用同样的方法进行处理.\n\n# promise 的特点\n\n## 对象的状态不受外界影响\n\n promise 对象代表一个异步操作,有三种状态, pending(进行中),fulfilled(已成功)和 rejected(已失败).只有结果来决定当前是哪种状态.\n\n## 一旦状态改变就不再变化\n\n promise 对象的改变,只有两种可能,从 pending 变为 fulfilled 和从 pending 变为 rejected, 发生这两种状态改变以后装填就不再变化了.如果改变已经发生了,再对 promise 对象添加回调函数,也会立即得到这个结果.\n\n# 基本用法\n\n promise 对象是一个构造函数,用来生成 promise 实例.\n\n\tconst promise = new Promise(function(resolve, reject) {\n\t  // ... some code\n\t\n\t  if (/* 异步操作成功 */){\n\t    resolve(value);\n\t  } else {\n\t    reject(error);\n\t  }\n\t});\n\nPromise 构造函数接受一个函数作为参数,该函数的两个参数分别为 resolve 和 reject, 这两个参数是两个函数.\n\nresolve 函数的作用是,将 promise 对象的状态从未完成装变为完成,即从 pending 变为 resolved. 在异步操作成功时调用,并将异步操作的结果,作为参数传递出去;\n\nreject 函数的作用是,将 promise 对象的状态从未完成变为失败,即从 pending 变为 rejected. 在异步操作失败时调用,并将异步操作爆出的信息,作为参数传递出去.\n\nPromise 实例生成以后,可以使用 .then  方法来接收两个回调函数作为参数,第一个回调函数是Promise对象的状态变为resolved时调用，第二个回调函数是Promise对象的状态变为rejected时调用。其中，第二个函数是可选的，不一定要提供。这两个函数都接受Promise对象传出的值作为参数。\n\n也可以使用 .catch 来接收 promise 变为 rejected 时的回调函数.\n\n\tfunction test(resolve, reject) {\n\t    var timeOut = Math.random() * 2;\n\t    log('set timeout to: ' + timeOut + ' seconds.');\n\t    setTimeout(function () {\n\t        if (timeOut < 1) {\n\t            log('call resolve()...');\n\t            resolve('200 OK');\n\t        }\n\t        else {\n\t            log('call reject()...');\n\t            reject('timeout in ' + timeOut + ' seconds.');\n\t        }\n\t    }, timeOut * 1000);\n\t};\n\tnew Promise(test).then(function (result) {\n\t    console.log('成功：' + result);\n\t}).catch(function (reason) {\n\t    console.log('失败：' + reason);\n\t});\n\n`test()`只关心自身的逻辑,并不关心具体的 resolve 和 rejected 将如何处理结果.也就是说 Promise 最大的好处,就是在异步执行的过程中,吧执行代码和处理结果清晰地分离了.\n\nPromise还可以做更多的事情，比如，有若干个异步任务，需要先做任务1，如果成功后再做任务2，任何任务失败则不再继续并执行错误处理函数。\n\n有些时候，多个异步任务是为了容错。比如，同时向两个URL读取用户的个人信息，只需要获得先返回的结果即可。这种情况下，用Promise.race()实现：\n\n\tvar p1 = new Promise(function (resolve, reject) {\n\t    setTimeout(resolve, 500, 'P1');\n\t});\n\tvar p2 = new Promise(function (resolve, reject) {\n\t    setTimeout(resolve, 600, 'P2');\n\t});\n\tPromise.race([p1, p2]).then(function (result) {\n\t    console.log(result); // 'P1'\n\t});\n\n由于p1执行较快，Promise的then()将获得结果'P1'。p2仍在继续执行，但执行结果将被丢弃。\n\n如果我们组合使用Promise，就可以把很多异步任务以并行和串行的方式组合起来执行。\n\n\nto be continued...","slug":"2018.12.24.es6-promise","published":1,"date":"2018-12-24T08:01:59.349Z","updated":"2018-12-24T09:28:59.737Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwvh259f0025w39zkpww5eb8","content":"<p>promise 是一步变成的一种解决方案,比传统的回调函数和事件更强大和合理, es6将其写入语言标准,统一了用法,并原生提供了 promise对象.从语法上来说, promise 是一个对象,从它可以获取异步操作的消息, promise 提供统一的 api, 各种异步操作都可以用同样的方法进行处理.</p>\n<h1 id=\"promise-的特点\"><a href=\"#promise-的特点\" class=\"headerlink\" title=\"promise 的特点\"></a>promise 的特点</h1><h2 id=\"对象的状态不受外界影响\"><a href=\"#对象的状态不受外界影响\" class=\"headerlink\" title=\"对象的状态不受外界影响\"></a>对象的状态不受外界影响</h2><p> promise 对象代表一个异步操作,有三种状态, pending(进行中),fulfilled(已成功)和 rejected(已失败).只有结果来决定当前是哪种状态.</p>\n<h2 id=\"一旦状态改变就不再变化\"><a href=\"#一旦状态改变就不再变化\" class=\"headerlink\" title=\"一旦状态改变就不再变化\"></a>一旦状态改变就不再变化</h2><p> promise 对象的改变,只有两种可能,从 pending 变为 fulfilled 和从 pending 变为 rejected, 发生这两种状态改变以后装填就不再变化了.如果改变已经发生了,再对 promise 对象添加回调函数,也会立即得到这个结果.</p>\n<h1 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h1><p> promise 对象是一个构造函数,用来生成 promise 实例.</p>\n<pre><code>const promise = new Promise(function(resolve, reject) {\n  // ... some code\n\n  if (/* 异步操作成功 */){\n    resolve(value);\n  } else {\n    reject(error);\n  }\n});\n</code></pre><p>Promise 构造函数接受一个函数作为参数,该函数的两个参数分别为 resolve 和 reject, 这两个参数是两个函数.</p>\n<p>resolve 函数的作用是,将 promise 对象的状态从未完成装变为完成,即从 pending 变为 resolved. 在异步操作成功时调用,并将异步操作的结果,作为参数传递出去;</p>\n<p>reject 函数的作用是,将 promise 对象的状态从未完成变为失败,即从 pending 变为 rejected. 在异步操作失败时调用,并将异步操作爆出的信息,作为参数传递出去.</p>\n<p>Promise 实例生成以后,可以使用 .then  方法来接收两个回调函数作为参数,第一个回调函数是Promise对象的状态变为resolved时调用，第二个回调函数是Promise对象的状态变为rejected时调用。其中，第二个函数是可选的，不一定要提供。这两个函数都接受Promise对象传出的值作为参数。</p>\n<p>也可以使用 .catch 来接收 promise 变为 rejected 时的回调函数.</p>\n<pre><code>function test(resolve, reject) {\n    var timeOut = Math.random() * 2;\n    log(&apos;set timeout to: &apos; + timeOut + &apos; seconds.&apos;);\n    setTimeout(function () {\n        if (timeOut &lt; 1) {\n            log(&apos;call resolve()...&apos;);\n            resolve(&apos;200 OK&apos;);\n        }\n        else {\n            log(&apos;call reject()...&apos;);\n            reject(&apos;timeout in &apos; + timeOut + &apos; seconds.&apos;);\n        }\n    }, timeOut * 1000);\n};\nnew Promise(test).then(function (result) {\n    console.log(&apos;成功：&apos; + result);\n}).catch(function (reason) {\n    console.log(&apos;失败：&apos; + reason);\n});\n</code></pre><p><code>test()</code>只关心自身的逻辑,并不关心具体的 resolve 和 rejected 将如何处理结果.也就是说 Promise 最大的好处,就是在异步执行的过程中,吧执行代码和处理结果清晰地分离了.</p>\n<p>Promise还可以做更多的事情，比如，有若干个异步任务，需要先做任务1，如果成功后再做任务2，任何任务失败则不再继续并执行错误处理函数。</p>\n<p>有些时候，多个异步任务是为了容错。比如，同时向两个URL读取用户的个人信息，只需要获得先返回的结果即可。这种情况下，用Promise.race()实现：</p>\n<pre><code>var p1 = new Promise(function (resolve, reject) {\n    setTimeout(resolve, 500, &apos;P1&apos;);\n});\nvar p2 = new Promise(function (resolve, reject) {\n    setTimeout(resolve, 600, &apos;P2&apos;);\n});\nPromise.race([p1, p2]).then(function (result) {\n    console.log(result); // &apos;P1&apos;\n});\n</code></pre><p>由于p1执行较快，Promise的then()将获得结果’P1’。p2仍在继续执行，但执行结果将被丢弃。</p>\n<p>如果我们组合使用Promise，就可以把很多异步任务以并行和串行的方式组合起来执行。</p>\n<p>to be continued…</p>\n","excerpt":"","more":"<p>promise 是一步变成的一种解决方案,比传统的回调函数和事件更强大和合理, es6将其写入语言标准,统一了用法,并原生提供了 promise对象.从语法上来说, promise 是一个对象,从它可以获取异步操作的消息, promise 提供统一的 api, 各种异步操作都可以用同样的方法进行处理.</p>\n<h1 id=\"promise-的特点\"><a href=\"#promise-的特点\" class=\"headerlink\" title=\"promise 的特点\"></a>promise 的特点</h1><h2 id=\"对象的状态不受外界影响\"><a href=\"#对象的状态不受外界影响\" class=\"headerlink\" title=\"对象的状态不受外界影响\"></a>对象的状态不受外界影响</h2><p> promise 对象代表一个异步操作,有三种状态, pending(进行中),fulfilled(已成功)和 rejected(已失败).只有结果来决定当前是哪种状态.</p>\n<h2 id=\"一旦状态改变就不再变化\"><a href=\"#一旦状态改变就不再变化\" class=\"headerlink\" title=\"一旦状态改变就不再变化\"></a>一旦状态改变就不再变化</h2><p> promise 对象的改变,只有两种可能,从 pending 变为 fulfilled 和从 pending 变为 rejected, 发生这两种状态改变以后装填就不再变化了.如果改变已经发生了,再对 promise 对象添加回调函数,也会立即得到这个结果.</p>\n<h1 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h1><p> promise 对象是一个构造函数,用来生成 promise 实例.</p>\n<pre><code>const promise = new Promise(function(resolve, reject) {\n  // ... some code\n\n  if (/* 异步操作成功 */){\n    resolve(value);\n  } else {\n    reject(error);\n  }\n});\n</code></pre><p>Promise 构造函数接受一个函数作为参数,该函数的两个参数分别为 resolve 和 reject, 这两个参数是两个函数.</p>\n<p>resolve 函数的作用是,将 promise 对象的状态从未完成装变为完成,即从 pending 变为 resolved. 在异步操作成功时调用,并将异步操作的结果,作为参数传递出去;</p>\n<p>reject 函数的作用是,将 promise 对象的状态从未完成变为失败,即从 pending 变为 rejected. 在异步操作失败时调用,并将异步操作爆出的信息,作为参数传递出去.</p>\n<p>Promise 实例生成以后,可以使用 .then  方法来接收两个回调函数作为参数,第一个回调函数是Promise对象的状态变为resolved时调用，第二个回调函数是Promise对象的状态变为rejected时调用。其中，第二个函数是可选的，不一定要提供。这两个函数都接受Promise对象传出的值作为参数。</p>\n<p>也可以使用 .catch 来接收 promise 变为 rejected 时的回调函数.</p>\n<pre><code>function test(resolve, reject) {\n    var timeOut = Math.random() * 2;\n    log(&apos;set timeout to: &apos; + timeOut + &apos; seconds.&apos;);\n    setTimeout(function () {\n        if (timeOut &lt; 1) {\n            log(&apos;call resolve()...&apos;);\n            resolve(&apos;200 OK&apos;);\n        }\n        else {\n            log(&apos;call reject()...&apos;);\n            reject(&apos;timeout in &apos; + timeOut + &apos; seconds.&apos;);\n        }\n    }, timeOut * 1000);\n};\nnew Promise(test).then(function (result) {\n    console.log(&apos;成功：&apos; + result);\n}).catch(function (reason) {\n    console.log(&apos;失败：&apos; + reason);\n});\n</code></pre><p><code>test()</code>只关心自身的逻辑,并不关心具体的 resolve 和 rejected 将如何处理结果.也就是说 Promise 最大的好处,就是在异步执行的过程中,吧执行代码和处理结果清晰地分离了.</p>\n<p>Promise还可以做更多的事情，比如，有若干个异步任务，需要先做任务1，如果成功后再做任务2，任何任务失败则不再继续并执行错误处理函数。</p>\n<p>有些时候，多个异步任务是为了容错。比如，同时向两个URL读取用户的个人信息，只需要获得先返回的结果即可。这种情况下，用Promise.race()实现：</p>\n<pre><code>var p1 = new Promise(function (resolve, reject) {\n    setTimeout(resolve, 500, &apos;P1&apos;);\n});\nvar p2 = new Promise(function (resolve, reject) {\n    setTimeout(resolve, 600, &apos;P2&apos;);\n});\nPromise.race([p1, p2]).then(function (result) {\n    console.log(result); // &apos;P1&apos;\n});\n</code></pre><p>由于p1执行较快，Promise的then()将获得结果’P1’。p2仍在继续执行，但执行结果将被丢弃。</p>\n<p>如果我们组合使用Promise，就可以把很多异步任务以并行和串行的方式组合起来执行。</p>\n<p>to be continued…</p>\n"},{"title":"es6 之 import 与 export","_content":"\nES6 实现了模块功能,称为浏览器和服务器的通用解决方案.ES6 模块主要包括两个功能:import 与 export.\n\nexport 用于对外输出本模块(一个文件可以理解为一个模块)变量的接口;\n\nimport 用于在一个模块中加载另一个含有 export 接口的模块.\n\n使用 export 命令定义了模块的对外接口以后,其他 js 文件就可以通过 import 命令加载这个模块(文件).\n### export\n\n\na.js:\n\n\tvar sex=\"boy\";\n\tvar echo=function(value){\n\t　　console.log(value)\n\t}\n\texport {sex,echo} \n\n使用 export 向大括号中添加 sex 和 echo 并输出,就可以将 sex 和 echo 以变量标识符的形式暴露给其他文件而被读取到,不能直接写成 export sex.对外的输出必须是变量接口,而不是输出的字符串.\n\nexport 命令除了输出变量,还可以输出函数或者类.\n\nexport 语句输出的值,与其对应的值是动态绑定关系,通过该模块的值,可以取到模块内部实时的值.\n\nexpoet 命令可以出现在模块的任何位置,只要处于模块顶层就可以.\n\n### import\n\nb.js\n\n\timport {sex,echo} from \"./a.js\" \n\tconsole.log(sex)   // boy\n\techo(sex) // boy\n\t\n\t\n\t\nimport 命令输入的变量都是只读的,因为它的本质是输入接口.也就是说,不允许在加载模块的脚本里面改写接口.\n\nimport 具有提升效果,会提升到整个模块的头部,首先执行.\n\n由于 import 是静态执行,所以不能使用表达式和变量,这些只有在运行时才能得到的结果的语法结构.\n\n\n### export default\n可以使用 `export default` ,为模块指定默认输出,这样就不需要知道所要加载模块的变量名.\n\n\t// export-default.js\n\texport default function () {\n\t  console.log('foo');\n\t}\n\n上面的代码的默认输出是一个函数,其他模块加载该模块时,import 命令可以为该匿名函数指定任意名字.\n\n\t// import-default.js\n\timport customName from './export-default';\n\tcustomName(); // 'foo'\n\n\n\n\n","source":"_posts/2018.12.27.es6-import.md","raw":"---\ntitle: es6 之 import 与 export\ntags: [es6]\ncategories: 知识 \n---\n\nES6 实现了模块功能,称为浏览器和服务器的通用解决方案.ES6 模块主要包括两个功能:import 与 export.\n\nexport 用于对外输出本模块(一个文件可以理解为一个模块)变量的接口;\n\nimport 用于在一个模块中加载另一个含有 export 接口的模块.\n\n使用 export 命令定义了模块的对外接口以后,其他 js 文件就可以通过 import 命令加载这个模块(文件).\n### export\n\n\na.js:\n\n\tvar sex=\"boy\";\n\tvar echo=function(value){\n\t　　console.log(value)\n\t}\n\texport {sex,echo} \n\n使用 export 向大括号中添加 sex 和 echo 并输出,就可以将 sex 和 echo 以变量标识符的形式暴露给其他文件而被读取到,不能直接写成 export sex.对外的输出必须是变量接口,而不是输出的字符串.\n\nexport 命令除了输出变量,还可以输出函数或者类.\n\nexport 语句输出的值,与其对应的值是动态绑定关系,通过该模块的值,可以取到模块内部实时的值.\n\nexpoet 命令可以出现在模块的任何位置,只要处于模块顶层就可以.\n\n### import\n\nb.js\n\n\timport {sex,echo} from \"./a.js\" \n\tconsole.log(sex)   // boy\n\techo(sex) // boy\n\t\n\t\n\t\nimport 命令输入的变量都是只读的,因为它的本质是输入接口.也就是说,不允许在加载模块的脚本里面改写接口.\n\nimport 具有提升效果,会提升到整个模块的头部,首先执行.\n\n由于 import 是静态执行,所以不能使用表达式和变量,这些只有在运行时才能得到的结果的语法结构.\n\n\n### export default\n可以使用 `export default` ,为模块指定默认输出,这样就不需要知道所要加载模块的变量名.\n\n\t// export-default.js\n\texport default function () {\n\t  console.log('foo');\n\t}\n\n上面的代码的默认输出是一个函数,其他模块加载该模块时,import 命令可以为该匿名函数指定任意名字.\n\n\t// import-default.js\n\timport customName from './export-default';\n\tcustomName(); // 'foo'\n\n\n\n\n","slug":"2018.12.27.es6-import","published":1,"date":"2018-12-27T07:47:09.160Z","updated":"2018-12-27T09:36:18.245Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwvh259g0028w39zrkze88ik","content":"<p>ES6 实现了模块功能,称为浏览器和服务器的通用解决方案.ES6 模块主要包括两个功能:import 与 export.</p>\n<p>export 用于对外输出本模块(一个文件可以理解为一个模块)变量的接口;</p>\n<p>import 用于在一个模块中加载另一个含有 export 接口的模块.</p>\n<p>使用 export 命令定义了模块的对外接口以后,其他 js 文件就可以通过 import 命令加载这个模块(文件).</p>\n<h3 id=\"export\"><a href=\"#export\" class=\"headerlink\" title=\"export\"></a>export</h3><p>a.js:</p>\n<pre><code>var sex=&quot;boy&quot;;\nvar echo=function(value){\n　　console.log(value)\n}\nexport {sex,echo} \n</code></pre><p>使用 export 向大括号中添加 sex 和 echo 并输出,就可以将 sex 和 echo 以变量标识符的形式暴露给其他文件而被读取到,不能直接写成 export sex.对外的输出必须是变量接口,而不是输出的字符串.</p>\n<p>export 命令除了输出变量,还可以输出函数或者类.</p>\n<p>export 语句输出的值,与其对应的值是动态绑定关系,通过该模块的值,可以取到模块内部实时的值.</p>\n<p>expoet 命令可以出现在模块的任何位置,只要处于模块顶层就可以.</p>\n<h3 id=\"import\"><a href=\"#import\" class=\"headerlink\" title=\"import\"></a>import</h3><p>b.js</p>\n<pre><code>import {sex,echo} from &quot;./a.js&quot; \nconsole.log(sex)   // boy\necho(sex) // boy\n</code></pre><p>import 命令输入的变量都是只读的,因为它的本质是输入接口.也就是说,不允许在加载模块的脚本里面改写接口.</p>\n<p>import 具有提升效果,会提升到整个模块的头部,首先执行.</p>\n<p>由于 import 是静态执行,所以不能使用表达式和变量,这些只有在运行时才能得到的结果的语法结构.</p>\n<h3 id=\"export-default\"><a href=\"#export-default\" class=\"headerlink\" title=\"export default\"></a>export default</h3><p>可以使用 <code>export default</code> ,为模块指定默认输出,这样就不需要知道所要加载模块的变量名.</p>\n<pre><code>// export-default.js\nexport default function () {\n  console.log(&apos;foo&apos;);\n}\n</code></pre><p>上面的代码的默认输出是一个函数,其他模块加载该模块时,import 命令可以为该匿名函数指定任意名字.</p>\n<pre><code>// import-default.js\nimport customName from &apos;./export-default&apos;;\ncustomName(); // &apos;foo&apos;\n</code></pre>","excerpt":"","more":"<p>ES6 实现了模块功能,称为浏览器和服务器的通用解决方案.ES6 模块主要包括两个功能:import 与 export.</p>\n<p>export 用于对外输出本模块(一个文件可以理解为一个模块)变量的接口;</p>\n<p>import 用于在一个模块中加载另一个含有 export 接口的模块.</p>\n<p>使用 export 命令定义了模块的对外接口以后,其他 js 文件就可以通过 import 命令加载这个模块(文件).</p>\n<h3 id=\"export\"><a href=\"#export\" class=\"headerlink\" title=\"export\"></a>export</h3><p>a.js:</p>\n<pre><code>var sex=&quot;boy&quot;;\nvar echo=function(value){\n　　console.log(value)\n}\nexport {sex,echo} \n</code></pre><p>使用 export 向大括号中添加 sex 和 echo 并输出,就可以将 sex 和 echo 以变量标识符的形式暴露给其他文件而被读取到,不能直接写成 export sex.对外的输出必须是变量接口,而不是输出的字符串.</p>\n<p>export 命令除了输出变量,还可以输出函数或者类.</p>\n<p>export 语句输出的值,与其对应的值是动态绑定关系,通过该模块的值,可以取到模块内部实时的值.</p>\n<p>expoet 命令可以出现在模块的任何位置,只要处于模块顶层就可以.</p>\n<h3 id=\"import\"><a href=\"#import\" class=\"headerlink\" title=\"import\"></a>import</h3><p>b.js</p>\n<pre><code>import {sex,echo} from &quot;./a.js&quot; \nconsole.log(sex)   // boy\necho(sex) // boy\n</code></pre><p>import 命令输入的变量都是只读的,因为它的本质是输入接口.也就是说,不允许在加载模块的脚本里面改写接口.</p>\n<p>import 具有提升效果,会提升到整个模块的头部,首先执行.</p>\n<p>由于 import 是静态执行,所以不能使用表达式和变量,这些只有在运行时才能得到的结果的语法结构.</p>\n<h3 id=\"export-default\"><a href=\"#export-default\" class=\"headerlink\" title=\"export default\"></a>export default</h3><p>可以使用 <code>export default</code> ,为模块指定默认输出,这样就不需要知道所要加载模块的变量名.</p>\n<pre><code>// export-default.js\nexport default function () {\n  console.log(&apos;foo&apos;);\n}\n</code></pre><p>上面的代码的默认输出是一个函数,其他模块加载该模块时,import 命令可以为该匿名函数指定任意名字.</p>\n<pre><code>// import-default.js\nimport customName from &apos;./export-default&apos;;\ncustomName(); // &apos;foo&apos;\n</code></pre>"},{"title":"webpack使用","_content":"#什么是 webpack?\n![what-is-webpack](https://i.loli.net/2019/01/12/5c39eb56b9248.png)\n[webpack](https://www.webpackjs.com/concepts/)是一个静态文件打包器.当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle.\nwebpack 有四个核心概念:\n* 入口(entry)\n* 输出(output)\n* loader\n* 插件(plugins)\n\n此外,在 webpack4中,增加了 mode 的选项,通过选择 development 或 production 之中的一个，来设置 mode 参数，你可以启用相应模式下的 webpack 内置的优化.\n##入口起点(entry point)\n### 单个入口写法\n用法:`entry: string|Array<string>`\n在 webpack.config.js 中配置:\n\n    const config = {\n    entry: './path/to/my/entry/file.js'\n    };\n\n    module.exports = config;\n上面这种 entry 的写法是👇的简写:\n\n    const config = {\n    entry: {\n        main: './path/to/my/entry/file.js'\n    }\n    };\n向 entry 传入数组,会创建多个主入口(multi-main entry).\n### 对象语法\n用法:`entry: {[entryChunkName: string]: string|Array<string>}`\n在 webpack.config.js中配置:\n\n    const config = {\n    entry: {\n        app: './src/app.js',\n        vendors: './src/vendors.js'\n    }\n    };\n### 常见场景\n#### 分离\b应用程序(app)和第三方库(vendor)入口\n在 webpack.config.js 中配置:\n\n    const config = {\n    entry: {\n        app: './src/app.js',\n        vendors: './src/vendors.js'\n    }\n    };\n *webpack 从 app.js 和 vendors.js 开始创建依赖图(dependency graph)。这些依赖图是彼此完全分离、互相独立的（每个 bundle 中都有一个 webpack 引导(bootstrap)）。这种方式比较常见于，只有一个入口起点（不包括 vendor）的单页应用程序(single page application)中。*\n #### 多页面应用程序\n 在 webpack.config.js中配置:\n\n    const config = {\n    entry: {\n        pageOne: './src/pageOne/index.js',\n        pageTwo: './src/pageTwo/index.js',\n        pageThree: './src/pageThree/index.js'\n    }\n    };\n*webpack 需要 3 个独立分离的依赖图（如上面的示例）。*\n## 输出(OUTPUT)\n配置 output 选项可以控制 webpack 如何向硬盘写入编译文件.即时存在多个入口起点,但只指定一个输出配置.\n### 用法\n在 webpack 中配置 output 属性的最低要求是,将它的值设置为一个对象,包括以下两点:\n* filename 用于输出文件的文件名;\n* 目标输出目录 path 的绝对路径.\n\n在 webpack.config.js 中配置\n\n    module.exports = {\n    output: {\n        filename: 'bundle.js',\n        path: '/home/proj/public/assets'\n    }\n    };\n### \b多个入口起点\n如果配置了多个单独的 chunk,则应该使用占位符来确保每个文件具有唯一的名称.\nmodule.exports = {\n  entry: {\n    app: './src/app.js',\n    search: './src/search.js'\n  },\n  output: {\n    filename: '[name].js',\n    path: __dirname + '/dist'\n  }\n};\n\n// 写入到硬盘：./dist/app.js, ./dist/search.js\n## 模式\n提供 mode 配置选项,告知 webpack 使用相应模式的内置优化.\n### 用法\n只在\b配置中提供 node 选项:\n\n    module.export = {\n        mode:'production'\n    }\n或者在 cli 参数中传递:\n`webpack --mode=production`\n支持\b一下字符串:\n#### development\n会将 process.env.NODE_ENV 的值设为 development。启用 NamedChunksPlugin 和 NamedModulesPlugin。\n#### production\n会将 process.env.NODE_ENV 的值设为 production。启用 FlagDependencyUsagePlugin, FlagIncludedChunksPlugin, ModuleConcatenationPlugin, NoEmitOnErrorsPlugin, OccurrenceOrderPlugin, SideEffectsFlagPlugin 和 UglifyJsPlugin.\n#### none\n不选用任何默认优化选项\n## loader\nloader 用于对模块的源代码进行转换.loader 可以使你在 import 或加载模块时预处理文件.因此 loader 类似于替他构建工具中的任务(tesk),并提供了处理前端构建步骤的强大方法.loader 可以将文件从不同的语言转化成 JavaScript.\n### 实例\n可以使用 loader 告诉 webpack 加载 css 文件,为此首先安装相对应的 loader\b.\n`npm install css-loader -D`\n`npm install ts-loader -D `\n\n    //webpack.config.js\n    module.exports = {\n    module: {\n        rules: [\n        { test: /\\.css$/, use: 'css-loader' },\n        { test: /\\.ts$/, use: 'ts-loader' }\n        ]\n    }\n    };\n### 使用 loader\n有三种 使用 loader 的方式:\n* 配置>在 webpack.config.js文件中指定 lodaer.\n* 内联>在每个 import 语句中显式指定 loader.\n* cli>在 shell 命令中指定他们.\n#### 配置[configuration]\n\n    module.exports = {\n    module: {\n        rules: [\n        {\n            test: /\\.css$/,\n            use: [\n            { loader: 'style-loader' },\n            {\n                loader: 'css-loader',\n                options: {\n                modules: true\n                }\n            }\n            ]\n        }\n        ]\n    }\n    };\n#### 内联\n可以在 import 语句或者任何等效于 import 的方式中指定 lodaer.使用 ! 来将资源中的 loader 分开.分开的每个部分都相对于当前目录解析.\n`import Styles from 'style-loader!css-loader?modules!./styles.css';`\n#### cli\n`webpack --module-bind jade-loader --module-bind 'css=style-loader!css-loader'`\n这会对 .jade 文件使用 jade-loader,对 .css 文件使用 style-loader 和 css-loader.\n### loader特性\n* loader 支持链式传输,loader 链中每个 loader,都对前一个 loader 处理后的资源进行转换.\n * loader 可以是同步的,也可以是异步的.\n * loader 可以运行在 node.js中,并且能够执行任何可能的操作.\n * loader 接受查询参数.\n * loader 能够使用 options 对象进行配置.\n * 除了使用package,json 常见的 main 属性,还可以将普通的 npm 模块导出为 loader,做法是在 package.json中定义一个 lodaer 字段.\n * 插件(plugins)可以为 loader 带来更多特性.\n * loader 能够产生额外的任意文件.\n## 插件(暂时跳过)\n## 配置[configuration]\nwebpack 的配置文件,是导出一个对象的 JavaScript 文件,此对象由 webpack 根据对象定义的属性进行解析.\n因为 webpack 是标准的 node.js commonJS 模块,因此可以:\n* 通过 require 导入其他文件.\n* 通过 require 使用 npm的工具函数.\n* 使用 JavaScript 控制流表达式.\n* 对常用值使用常量或者变量.\n* 编写并执行函数来生成部分配置.\n### 基本配置\n\n    //webpack.config.js\n    var path = require('path');\n    module.exports = {\n    mode: 'development',\n    entry: './foo.js',\n    output: {\n        path: path.resolve(__dirname, 'dist'),\n        filename: 'foo.bundle.js'\n    }\n    };\n## 模块(modules)\n在模块化编程中,开发者将程序分解成离散功能块,并称之为模块.\n### webpack模块\n*  ES 2015  import 语句\n* CommonJ\bS require()语句\n* AM\bD define 和 require 语句\n* css/sass/less 文件中的@import 语句\n* 样式或 html 文件中的图片链接","source":"_posts/2019.01.09.webpack-4.md","raw":"---\ntitle: webpack使用\ntags: [ webpack]\ncategories: 知识 \n---\n#什么是 webpack?\n![what-is-webpack](https://i.loli.net/2019/01/12/5c39eb56b9248.png)\n[webpack](https://www.webpackjs.com/concepts/)是一个静态文件打包器.当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle.\nwebpack 有四个核心概念:\n* 入口(entry)\n* 输出(output)\n* loader\n* 插件(plugins)\n\n此外,在 webpack4中,增加了 mode 的选项,通过选择 development 或 production 之中的一个，来设置 mode 参数，你可以启用相应模式下的 webpack 内置的优化.\n##入口起点(entry point)\n### 单个入口写法\n用法:`entry: string|Array<string>`\n在 webpack.config.js 中配置:\n\n    const config = {\n    entry: './path/to/my/entry/file.js'\n    };\n\n    module.exports = config;\n上面这种 entry 的写法是👇的简写:\n\n    const config = {\n    entry: {\n        main: './path/to/my/entry/file.js'\n    }\n    };\n向 entry 传入数组,会创建多个主入口(multi-main entry).\n### 对象语法\n用法:`entry: {[entryChunkName: string]: string|Array<string>}`\n在 webpack.config.js中配置:\n\n    const config = {\n    entry: {\n        app: './src/app.js',\n        vendors: './src/vendors.js'\n    }\n    };\n### 常见场景\n#### 分离\b应用程序(app)和第三方库(vendor)入口\n在 webpack.config.js 中配置:\n\n    const config = {\n    entry: {\n        app: './src/app.js',\n        vendors: './src/vendors.js'\n    }\n    };\n *webpack 从 app.js 和 vendors.js 开始创建依赖图(dependency graph)。这些依赖图是彼此完全分离、互相独立的（每个 bundle 中都有一个 webpack 引导(bootstrap)）。这种方式比较常见于，只有一个入口起点（不包括 vendor）的单页应用程序(single page application)中。*\n #### 多页面应用程序\n 在 webpack.config.js中配置:\n\n    const config = {\n    entry: {\n        pageOne: './src/pageOne/index.js',\n        pageTwo: './src/pageTwo/index.js',\n        pageThree: './src/pageThree/index.js'\n    }\n    };\n*webpack 需要 3 个独立分离的依赖图（如上面的示例）。*\n## 输出(OUTPUT)\n配置 output 选项可以控制 webpack 如何向硬盘写入编译文件.即时存在多个入口起点,但只指定一个输出配置.\n### 用法\n在 webpack 中配置 output 属性的最低要求是,将它的值设置为一个对象,包括以下两点:\n* filename 用于输出文件的文件名;\n* 目标输出目录 path 的绝对路径.\n\n在 webpack.config.js 中配置\n\n    module.exports = {\n    output: {\n        filename: 'bundle.js',\n        path: '/home/proj/public/assets'\n    }\n    };\n### \b多个入口起点\n如果配置了多个单独的 chunk,则应该使用占位符来确保每个文件具有唯一的名称.\nmodule.exports = {\n  entry: {\n    app: './src/app.js',\n    search: './src/search.js'\n  },\n  output: {\n    filename: '[name].js',\n    path: __dirname + '/dist'\n  }\n};\n\n// 写入到硬盘：./dist/app.js, ./dist/search.js\n## 模式\n提供 mode 配置选项,告知 webpack 使用相应模式的内置优化.\n### 用法\n只在\b配置中提供 node 选项:\n\n    module.export = {\n        mode:'production'\n    }\n或者在 cli 参数中传递:\n`webpack --mode=production`\n支持\b一下字符串:\n#### development\n会将 process.env.NODE_ENV 的值设为 development。启用 NamedChunksPlugin 和 NamedModulesPlugin。\n#### production\n会将 process.env.NODE_ENV 的值设为 production。启用 FlagDependencyUsagePlugin, FlagIncludedChunksPlugin, ModuleConcatenationPlugin, NoEmitOnErrorsPlugin, OccurrenceOrderPlugin, SideEffectsFlagPlugin 和 UglifyJsPlugin.\n#### none\n不选用任何默认优化选项\n## loader\nloader 用于对模块的源代码进行转换.loader 可以使你在 import 或加载模块时预处理文件.因此 loader 类似于替他构建工具中的任务(tesk),并提供了处理前端构建步骤的强大方法.loader 可以将文件从不同的语言转化成 JavaScript.\n### 实例\n可以使用 loader 告诉 webpack 加载 css 文件,为此首先安装相对应的 loader\b.\n`npm install css-loader -D`\n`npm install ts-loader -D `\n\n    //webpack.config.js\n    module.exports = {\n    module: {\n        rules: [\n        { test: /\\.css$/, use: 'css-loader' },\n        { test: /\\.ts$/, use: 'ts-loader' }\n        ]\n    }\n    };\n### 使用 loader\n有三种 使用 loader 的方式:\n* 配置>在 webpack.config.js文件中指定 lodaer.\n* 内联>在每个 import 语句中显式指定 loader.\n* cli>在 shell 命令中指定他们.\n#### 配置[configuration]\n\n    module.exports = {\n    module: {\n        rules: [\n        {\n            test: /\\.css$/,\n            use: [\n            { loader: 'style-loader' },\n            {\n                loader: 'css-loader',\n                options: {\n                modules: true\n                }\n            }\n            ]\n        }\n        ]\n    }\n    };\n#### 内联\n可以在 import 语句或者任何等效于 import 的方式中指定 lodaer.使用 ! 来将资源中的 loader 分开.分开的每个部分都相对于当前目录解析.\n`import Styles from 'style-loader!css-loader?modules!./styles.css';`\n#### cli\n`webpack --module-bind jade-loader --module-bind 'css=style-loader!css-loader'`\n这会对 .jade 文件使用 jade-loader,对 .css 文件使用 style-loader 和 css-loader.\n### loader特性\n* loader 支持链式传输,loader 链中每个 loader,都对前一个 loader 处理后的资源进行转换.\n * loader 可以是同步的,也可以是异步的.\n * loader 可以运行在 node.js中,并且能够执行任何可能的操作.\n * loader 接受查询参数.\n * loader 能够使用 options 对象进行配置.\n * 除了使用package,json 常见的 main 属性,还可以将普通的 npm 模块导出为 loader,做法是在 package.json中定义一个 lodaer 字段.\n * 插件(plugins)可以为 loader 带来更多特性.\n * loader 能够产生额外的任意文件.\n## 插件(暂时跳过)\n## 配置[configuration]\nwebpack 的配置文件,是导出一个对象的 JavaScript 文件,此对象由 webpack 根据对象定义的属性进行解析.\n因为 webpack 是标准的 node.js commonJS 模块,因此可以:\n* 通过 require 导入其他文件.\n* 通过 require 使用 npm的工具函数.\n* 使用 JavaScript 控制流表达式.\n* 对常用值使用常量或者变量.\n* 编写并执行函数来生成部分配置.\n### 基本配置\n\n    //webpack.config.js\n    var path = require('path');\n    module.exports = {\n    mode: 'development',\n    entry: './foo.js',\n    output: {\n        path: path.resolve(__dirname, 'dist'),\n        filename: 'foo.bundle.js'\n    }\n    };\n## 模块(modules)\n在模块化编程中,开发者将程序分解成离散功能块,并称之为模块.\n### webpack模块\n*  ES 2015  import 语句\n* CommonJ\bS require()语句\n* AM\bD define 和 require 语句\n* css/sass/less 文件中的@import 语句\n* 样式或 html 文件中的图片链接","slug":"2019.01.09.webpack-4","published":1,"date":"2019-01-09T03:55:49.725Z","updated":"2019-01-14T03:30:19.496Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwvh259g002aw39zykr0esi8","content":"<p>#什么是 webpack?<br><img src=\"https://i.loli.net/2019/01/12/5c39eb56b9248.png\" alt=\"what-is-webpack\"><br><a href=\"https://www.webpackjs.com/concepts/\" target=\"_blank\" rel=\"external\">webpack</a>是一个静态文件打包器.当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle.<br>webpack 有四个核心概念:</p>\n<ul>\n<li>入口(entry)</li>\n<li>输出(output)</li>\n<li>loader</li>\n<li>插件(plugins)</li>\n</ul>\n<p>此外,在 webpack4中,增加了 mode 的选项,通过选择 development 或 production 之中的一个，来设置 mode 参数，你可以启用相应模式下的 webpack 内置的优化.</p>\n<p>##入口起点(entry point)</p>\n<h3 id=\"单个入口写法\"><a href=\"#单个入口写法\" class=\"headerlink\" title=\"单个入口写法\"></a>单个入口写法</h3><p>用法:<code>entry: string|Array&lt;string&gt;</code><br>在 webpack.config.js 中配置:</p>\n<pre><code>const config = {\nentry: &apos;./path/to/my/entry/file.js&apos;\n};\n\nmodule.exports = config;\n</code></pre><p>上面这种 entry 的写法是👇的简写:</p>\n<pre><code>const config = {\nentry: {\n    main: &apos;./path/to/my/entry/file.js&apos;\n}\n};\n</code></pre><p>向 entry 传入数组,会创建多个主入口(multi-main entry).</p>\n<h3 id=\"对象语法\"><a href=\"#对象语法\" class=\"headerlink\" title=\"对象语法\"></a>对象语法</h3><p>用法:<code>entry: {[entryChunkName: string]: string|Array&lt;string&gt;}</code><br>在 webpack.config.js中配置:</p>\n<pre><code>const config = {\nentry: {\n    app: &apos;./src/app.js&apos;,\n    vendors: &apos;./src/vendors.js&apos;\n}\n};\n</code></pre><h3 id=\"常见场景\"><a href=\"#常见场景\" class=\"headerlink\" title=\"常见场景\"></a>常见场景</h3><h4 id=\"分离应用程序-app-和第三方库-vendor-入口\"><a href=\"#分离应用程序-app-和第三方库-vendor-入口\" class=\"headerlink\" title=\"分离\b应用程序(app)和第三方库(vendor)入口\"></a>分离\b应用程序(app)和第三方库(vendor)入口</h4><p>在 webpack.config.js 中配置:</p>\n<pre><code>const config = {\nentry: {\n    app: &apos;./src/app.js&apos;,\n    vendors: &apos;./src/vendors.js&apos;\n}\n};\n</code></pre><p> <em>webpack 从 app.js 和 vendors.js 开始创建依赖图(dependency graph)。这些依赖图是彼此完全分离、互相独立的（每个 bundle 中都有一个 webpack 引导(bootstrap)）。这种方式比较常见于，只有一个入口起点（不包括 vendor）的单页应用程序(single page application)中。</em></p>\n<h4 id=\"多页面应用程序\"><a href=\"#多页面应用程序\" class=\"headerlink\" title=\"多页面应用程序\"></a>多页面应用程序</h4><p> 在 webpack.config.js中配置:</p>\n<pre><code>const config = {\nentry: {\n    pageOne: &apos;./src/pageOne/index.js&apos;,\n    pageTwo: &apos;./src/pageTwo/index.js&apos;,\n    pageThree: &apos;./src/pageThree/index.js&apos;\n}\n};\n</code></pre><p><em>webpack 需要 3 个独立分离的依赖图（如上面的示例）。</em></p>\n<h2 id=\"输出-OUTPUT\"><a href=\"#输出-OUTPUT\" class=\"headerlink\" title=\"输出(OUTPUT)\"></a>输出(OUTPUT)</h2><p>配置 output 选项可以控制 webpack 如何向硬盘写入编译文件.即时存在多个入口起点,但只指定一个输出配置.</p>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><p>在 webpack 中配置 output 属性的最低要求是,将它的值设置为一个对象,包括以下两点:</p>\n<ul>\n<li>filename 用于输出文件的文件名;</li>\n<li>目标输出目录 path 的绝对路径.</li>\n</ul>\n<p>在 webpack.config.js 中配置</p>\n<pre><code>module.exports = {\noutput: {\n    filename: &apos;bundle.js&apos;,\n    path: &apos;/home/proj/public/assets&apos;\n}\n};\n</code></pre><h3 id=\"多个入口起点\"><a href=\"#多个入口起点\" class=\"headerlink\" title=\"\b多个入口起点\"></a>\b多个入口起点</h3><p>如果配置了多个单独的 chunk,则应该使用占位符来确保每个文件具有唯一的名称.<br>module.exports = {<br>  entry: {<br>    app: ‘./src/app.js’,<br>    search: ‘./src/search.js’<br>  },<br>  output: {<br>    filename: ‘[name].js’,<br>    path: __dirname + ‘/dist’<br>  }<br>};</p>\n<p>// 写入到硬盘：./dist/app.js, ./dist/search.js</p>\n<h2 id=\"模式\"><a href=\"#模式\" class=\"headerlink\" title=\"模式\"></a>模式</h2><p>提供 mode 配置选项,告知 webpack 使用相应模式的内置优化.</p>\n<h3 id=\"用法-1\"><a href=\"#用法-1\" class=\"headerlink\" title=\"用法\"></a>用法</h3><p>只在\b配置中提供 node 选项:</p>\n<pre><code>module.export = {\n    mode:&apos;production&apos;\n}\n</code></pre><p>或者在 cli 参数中传递:<br><code>webpack --mode=production</code><br>支持\b一下字符串:</p>\n<h4 id=\"development\"><a href=\"#development\" class=\"headerlink\" title=\"development\"></a>development</h4><p>会将 process.env.NODE_ENV 的值设为 development。启用 NamedChunksPlugin 和 NamedModulesPlugin。</p>\n<h4 id=\"production\"><a href=\"#production\" class=\"headerlink\" title=\"production\"></a>production</h4><p>会将 process.env.NODE_ENV 的值设为 production。启用 FlagDependencyUsagePlugin, FlagIncludedChunksPlugin, ModuleConcatenationPlugin, NoEmitOnErrorsPlugin, OccurrenceOrderPlugin, SideEffectsFlagPlugin 和 UglifyJsPlugin.</p>\n<h4 id=\"none\"><a href=\"#none\" class=\"headerlink\" title=\"none\"></a>none</h4><p>不选用任何默认优化选项</p>\n<h2 id=\"loader\"><a href=\"#loader\" class=\"headerlink\" title=\"loader\"></a>loader</h2><p>loader 用于对模块的源代码进行转换.loader 可以使你在 import 或加载模块时预处理文件.因此 loader 类似于替他构建工具中的任务(tesk),并提供了处理前端构建步骤的强大方法.loader 可以将文件从不同的语言转化成 JavaScript.</p>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p>可以使用 loader 告诉 webpack 加载 css 文件,为此首先安装相对应的 loader\b.<br><code>npm install css-loader -D</code><br><code>npm install ts-loader -D</code></p>\n<pre><code>//webpack.config.js\nmodule.exports = {\nmodule: {\n    rules: [\n    { test: /\\.css$/, use: &apos;css-loader&apos; },\n    { test: /\\.ts$/, use: &apos;ts-loader&apos; }\n    ]\n}\n};\n</code></pre><h3 id=\"使用-loader\"><a href=\"#使用-loader\" class=\"headerlink\" title=\"使用 loader\"></a>使用 loader</h3><p>有三种 使用 loader 的方式:</p>\n<ul>\n<li>配置&gt;在 webpack.config.js文件中指定 lodaer.</li>\n<li>内联&gt;在每个 import 语句中显式指定 loader.</li>\n<li><p>cli&gt;在 shell 命令中指定他们.</p>\n<h4 id=\"配置-configuration\"><a href=\"#配置-configuration\" class=\"headerlink\" title=\"配置[configuration]\"></a>配置[configuration]</h4><p>  module.exports = {<br>  module: {</p>\n<pre><code>rules: [\n{\n    test: /\\.css$/,\n    use: [\n    { loader: &apos;style-loader&apos; },\n    {\n        loader: &apos;css-loader&apos;,\n        options: {\n        modules: true\n        }\n    }\n    ]\n}\n]\n</code></pre><p>  }<br>  };</p>\n<h4 id=\"内联\"><a href=\"#内联\" class=\"headerlink\" title=\"内联\"></a>内联</h4><p>可以在 import 语句或者任何等效于 import 的方式中指定 lodaer.使用 ! 来将资源中的 loader 分开.分开的每个部分都相对于当前目录解析.<br><code>import Styles from &#39;style-loader!css-loader?modules!./styles.css&#39;;</code></p>\n<h4 id=\"cli\"><a href=\"#cli\" class=\"headerlink\" title=\"cli\"></a>cli</h4><p><code>webpack --module-bind jade-loader --module-bind &#39;css=style-loader!css-loader&#39;</code><br>这会对 .jade 文件使用 jade-loader,对 .css 文件使用 style-loader 和 css-loader.</p>\n<h3 id=\"loader特性\"><a href=\"#loader特性\" class=\"headerlink\" title=\"loader特性\"></a>loader特性</h3></li>\n<li>loader 支持链式传输,loader 链中每个 loader,都对前一个 loader 处理后的资源进行转换.<ul>\n<li>loader 可以是同步的,也可以是异步的.</li>\n<li>loader 可以运行在 node.js中,并且能够执行任何可能的操作.</li>\n<li>loader 接受查询参数.</li>\n<li>loader 能够使用 options 对象进行配置.</li>\n<li>除了使用package,json 常见的 main 属性,还可以将普通的 npm 模块导出为 loader,做法是在 package.json中定义一个 lodaer 字段.</li>\n<li>插件(plugins)可以为 loader 带来更多特性.</li>\n<li>loader 能够产生额外的任意文件.<h2 id=\"插件-暂时跳过\"><a href=\"#插件-暂时跳过\" class=\"headerlink\" title=\"插件(暂时跳过)\"></a>插件(暂时跳过)</h2><h2 id=\"配置-configuration-1\"><a href=\"#配置-configuration-1\" class=\"headerlink\" title=\"配置[configuration]\"></a>配置[configuration]</h2>webpack 的配置文件,是导出一个对象的 JavaScript 文件,此对象由 webpack 根据对象定义的属性进行解析.<br>因为 webpack 是标准的 node.js commonJS 模块,因此可以:</li>\n</ul>\n</li>\n<li>通过 require 导入其他文件.</li>\n<li>通过 require 使用 npm的工具函数.</li>\n<li>使用 JavaScript 控制流表达式.</li>\n<li>对常用值使用常量或者变量.</li>\n<li><p>编写并执行函数来生成部分配置.</p>\n<h3 id=\"基本配置\"><a href=\"#基本配置\" class=\"headerlink\" title=\"基本配置\"></a>基本配置</h3><p>  //webpack.config.js<br>  var path = require(‘path’);<br>  module.exports = {<br>  mode: ‘development’,<br>  entry: ‘./foo.js’,<br>  output: {</p>\n<pre><code>path: path.resolve(__dirname, &apos;dist&apos;),\nfilename: &apos;foo.bundle.js&apos;\n</code></pre><p>  }<br>  };</p>\n<h2 id=\"模块-modules\"><a href=\"#模块-modules\" class=\"headerlink\" title=\"模块(modules)\"></a>模块(modules)</h2><p>在模块化编程中,开发者将程序分解成离散功能块,并称之为模块.</p>\n<h3 id=\"webpack模块\"><a href=\"#webpack模块\" class=\"headerlink\" title=\"webpack模块\"></a>webpack模块</h3></li>\n<li>ES 2015  import 语句</li>\n<li>CommonJ\bS require()语句</li>\n<li>AM\bD define 和 require 语句</li>\n<li>css/sass/less 文件中的@import 语句</li>\n<li>样式或 html 文件中的图片链接</li>\n</ul>\n","excerpt":"","more":"<p>#什么是 webpack?<br><img src=\"https://i.loli.net/2019/01/12/5c39eb56b9248.png\" alt=\"what-is-webpack\"><br><a href=\"https://www.webpackjs.com/concepts/\">webpack</a>是一个静态文件打包器.当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle.<br>webpack 有四个核心概念:</p>\n<ul>\n<li>入口(entry)</li>\n<li>输出(output)</li>\n<li>loader</li>\n<li>插件(plugins)</li>\n</ul>\n<p>此外,在 webpack4中,增加了 mode 的选项,通过选择 development 或 production 之中的一个，来设置 mode 参数，你可以启用相应模式下的 webpack 内置的优化.</p>\n<p>##入口起点(entry point)</p>\n<h3 id=\"单个入口写法\"><a href=\"#单个入口写法\" class=\"headerlink\" title=\"单个入口写法\"></a>单个入口写法</h3><p>用法:<code>entry: string|Array&lt;string&gt;</code><br>在 webpack.config.js 中配置:</p>\n<pre><code>const config = {\nentry: &apos;./path/to/my/entry/file.js&apos;\n};\n\nmodule.exports = config;\n</code></pre><p>上面这种 entry 的写法是👇的简写:</p>\n<pre><code>const config = {\nentry: {\n    main: &apos;./path/to/my/entry/file.js&apos;\n}\n};\n</code></pre><p>向 entry 传入数组,会创建多个主入口(multi-main entry).</p>\n<h3 id=\"对象语法\"><a href=\"#对象语法\" class=\"headerlink\" title=\"对象语法\"></a>对象语法</h3><p>用法:<code>entry: {[entryChunkName: string]: string|Array&lt;string&gt;}</code><br>在 webpack.config.js中配置:</p>\n<pre><code>const config = {\nentry: {\n    app: &apos;./src/app.js&apos;,\n    vendors: &apos;./src/vendors.js&apos;\n}\n};\n</code></pre><h3 id=\"常见场景\"><a href=\"#常见场景\" class=\"headerlink\" title=\"常见场景\"></a>常见场景</h3><h4 id=\"分离应用程序-app-和第三方库-vendor-入口\"><a href=\"#分离应用程序-app-和第三方库-vendor-入口\" class=\"headerlink\" title=\"分离\b应用程序(app)和第三方库(vendor)入口\"></a>分离\b应用程序(app)和第三方库(vendor)入口</h4><p>在 webpack.config.js 中配置:</p>\n<pre><code>const config = {\nentry: {\n    app: &apos;./src/app.js&apos;,\n    vendors: &apos;./src/vendors.js&apos;\n}\n};\n</code></pre><p> <em>webpack 从 app.js 和 vendors.js 开始创建依赖图(dependency graph)。这些依赖图是彼此完全分离、互相独立的（每个 bundle 中都有一个 webpack 引导(bootstrap)）。这种方式比较常见于，只有一个入口起点（不包括 vendor）的单页应用程序(single page application)中。</em></p>\n<h4 id=\"多页面应用程序\"><a href=\"#多页面应用程序\" class=\"headerlink\" title=\"多页面应用程序\"></a>多页面应用程序</h4><p> 在 webpack.config.js中配置:</p>\n<pre><code>const config = {\nentry: {\n    pageOne: &apos;./src/pageOne/index.js&apos;,\n    pageTwo: &apos;./src/pageTwo/index.js&apos;,\n    pageThree: &apos;./src/pageThree/index.js&apos;\n}\n};\n</code></pre><p><em>webpack 需要 3 个独立分离的依赖图（如上面的示例）。</em></p>\n<h2 id=\"输出-OUTPUT\"><a href=\"#输出-OUTPUT\" class=\"headerlink\" title=\"输出(OUTPUT)\"></a>输出(OUTPUT)</h2><p>配置 output 选项可以控制 webpack 如何向硬盘写入编译文件.即时存在多个入口起点,但只指定一个输出配置.</p>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><p>在 webpack 中配置 output 属性的最低要求是,将它的值设置为一个对象,包括以下两点:</p>\n<ul>\n<li>filename 用于输出文件的文件名;</li>\n<li>目标输出目录 path 的绝对路径.</li>\n</ul>\n<p>在 webpack.config.js 中配置</p>\n<pre><code>module.exports = {\noutput: {\n    filename: &apos;bundle.js&apos;,\n    path: &apos;/home/proj/public/assets&apos;\n}\n};\n</code></pre><h3 id=\"多个入口起点\"><a href=\"#多个入口起点\" class=\"headerlink\" title=\"\b多个入口起点\"></a>\b多个入口起点</h3><p>如果配置了多个单独的 chunk,则应该使用占位符来确保每个文件具有唯一的名称.<br>module.exports = {<br>  entry: {<br>    app: ‘./src/app.js’,<br>    search: ‘./src/search.js’<br>  },<br>  output: {<br>    filename: ‘[name].js’,<br>    path: __dirname + ‘/dist’<br>  }<br>};</p>\n<p>// 写入到硬盘：./dist/app.js, ./dist/search.js</p>\n<h2 id=\"模式\"><a href=\"#模式\" class=\"headerlink\" title=\"模式\"></a>模式</h2><p>提供 mode 配置选项,告知 webpack 使用相应模式的内置优化.</p>\n<h3 id=\"用法-1\"><a href=\"#用法-1\" class=\"headerlink\" title=\"用法\"></a>用法</h3><p>只在\b配置中提供 node 选项:</p>\n<pre><code>module.export = {\n    mode:&apos;production&apos;\n}\n</code></pre><p>或者在 cli 参数中传递:<br><code>webpack --mode=production</code><br>支持\b一下字符串:</p>\n<h4 id=\"development\"><a href=\"#development\" class=\"headerlink\" title=\"development\"></a>development</h4><p>会将 process.env.NODE_ENV 的值设为 development。启用 NamedChunksPlugin 和 NamedModulesPlugin。</p>\n<h4 id=\"production\"><a href=\"#production\" class=\"headerlink\" title=\"production\"></a>production</h4><p>会将 process.env.NODE_ENV 的值设为 production。启用 FlagDependencyUsagePlugin, FlagIncludedChunksPlugin, ModuleConcatenationPlugin, NoEmitOnErrorsPlugin, OccurrenceOrderPlugin, SideEffectsFlagPlugin 和 UglifyJsPlugin.</p>\n<h4 id=\"none\"><a href=\"#none\" class=\"headerlink\" title=\"none\"></a>none</h4><p>不选用任何默认优化选项</p>\n<h2 id=\"loader\"><a href=\"#loader\" class=\"headerlink\" title=\"loader\"></a>loader</h2><p>loader 用于对模块的源代码进行转换.loader 可以使你在 import 或加载模块时预处理文件.因此 loader 类似于替他构建工具中的任务(tesk),并提供了处理前端构建步骤的强大方法.loader 可以将文件从不同的语言转化成 JavaScript.</p>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p>可以使用 loader 告诉 webpack 加载 css 文件,为此首先安装相对应的 loader\b.<br><code>npm install css-loader -D</code><br><code>npm install ts-loader -D</code></p>\n<pre><code>//webpack.config.js\nmodule.exports = {\nmodule: {\n    rules: [\n    { test: /\\.css$/, use: &apos;css-loader&apos; },\n    { test: /\\.ts$/, use: &apos;ts-loader&apos; }\n    ]\n}\n};\n</code></pre><h3 id=\"使用-loader\"><a href=\"#使用-loader\" class=\"headerlink\" title=\"使用 loader\"></a>使用 loader</h3><p>有三种 使用 loader 的方式:</p>\n<ul>\n<li>配置&gt;在 webpack.config.js文件中指定 lodaer.</li>\n<li>内联&gt;在每个 import 语句中显式指定 loader.</li>\n<li><p>cli&gt;在 shell 命令中指定他们.</p>\n<h4 id=\"配置-configuration\"><a href=\"#配置-configuration\" class=\"headerlink\" title=\"配置[configuration]\"></a>配置[configuration]</h4><p>  module.exports = {<br>  module: {</p>\n<pre><code>rules: [\n{\n    test: /\\.css$/,\n    use: [\n    { loader: &apos;style-loader&apos; },\n    {\n        loader: &apos;css-loader&apos;,\n        options: {\n        modules: true\n        }\n    }\n    ]\n}\n]\n</code></pre><p>  }<br>  };</p>\n<h4 id=\"内联\"><a href=\"#内联\" class=\"headerlink\" title=\"内联\"></a>内联</h4><p>可以在 import 语句或者任何等效于 import 的方式中指定 lodaer.使用 ! 来将资源中的 loader 分开.分开的每个部分都相对于当前目录解析.<br><code>import Styles from &#39;style-loader!css-loader?modules!./styles.css&#39;;</code></p>\n<h4 id=\"cli\"><a href=\"#cli\" class=\"headerlink\" title=\"cli\"></a>cli</h4><p><code>webpack --module-bind jade-loader --module-bind &#39;css=style-loader!css-loader&#39;</code><br>这会对 .jade 文件使用 jade-loader,对 .css 文件使用 style-loader 和 css-loader.</p>\n<h3 id=\"loader特性\"><a href=\"#loader特性\" class=\"headerlink\" title=\"loader特性\"></a>loader特性</h3></li>\n<li>loader 支持链式传输,loader 链中每个 loader,都对前一个 loader 处理后的资源进行转换.<ul>\n<li>loader 可以是同步的,也可以是异步的.</li>\n<li>loader 可以运行在 node.js中,并且能够执行任何可能的操作.</li>\n<li>loader 接受查询参数.</li>\n<li>loader 能够使用 options 对象进行配置.</li>\n<li>除了使用package,json 常见的 main 属性,还可以将普通的 npm 模块导出为 loader,做法是在 package.json中定义一个 lodaer 字段.</li>\n<li>插件(plugins)可以为 loader 带来更多特性.</li>\n<li>loader 能够产生额外的任意文件.<h2 id=\"插件-暂时跳过\"><a href=\"#插件-暂时跳过\" class=\"headerlink\" title=\"插件(暂时跳过)\"></a>插件(暂时跳过)</h2><h2 id=\"配置-configuration-1\"><a href=\"#配置-configuration-1\" class=\"headerlink\" title=\"配置[configuration]\"></a>配置[configuration]</h2>webpack 的配置文件,是导出一个对象的 JavaScript 文件,此对象由 webpack 根据对象定义的属性进行解析.<br>因为 webpack 是标准的 node.js commonJS 模块,因此可以:</li>\n</ul>\n</li>\n<li>通过 require 导入其他文件.</li>\n<li>通过 require 使用 npm的工具函数.</li>\n<li>使用 JavaScript 控制流表达式.</li>\n<li>对常用值使用常量或者变量.</li>\n<li><p>编写并执行函数来生成部分配置.</p>\n<h3 id=\"基本配置\"><a href=\"#基本配置\" class=\"headerlink\" title=\"基本配置\"></a>基本配置</h3><p>  //webpack.config.js<br>  var path = require(‘path’);<br>  module.exports = {<br>  mode: ‘development’,<br>  entry: ‘./foo.js’,<br>  output: {</p>\n<pre><code>path: path.resolve(__dirname, &apos;dist&apos;),\nfilename: &apos;foo.bundle.js&apos;\n</code></pre><p>  }<br>  };</p>\n<h2 id=\"模块-modules\"><a href=\"#模块-modules\" class=\"headerlink\" title=\"模块(modules)\"></a>模块(modules)</h2><p>在模块化编程中,开发者将程序分解成离散功能块,并称之为模块.</p>\n<h3 id=\"webpack模块\"><a href=\"#webpack模块\" class=\"headerlink\" title=\"webpack模块\"></a>webpack模块</h3></li>\n<li>ES 2015  import 语句</li>\n<li>CommonJ\bS require()语句</li>\n<li>AM\bD define 和 require 语句</li>\n<li>css/sass/less 文件中的@import 语句</li>\n<li>样式或 html 文件中的图片链接</li>\n</ul>\n"},{"title":"群辉怎么玩儿(TO BE CONTINUED)","_content":"# 前言\n随着国内各大网盘日渐式微,把数据保存在网盘似乎不是一个很好的办法,数据的安全和隐私都是值得我们关注的问题.这时候 NAS 就是一个很好的选择了.\n\n> NAS（Network Attached Storage：网络附属存储）按字面简单说就是连接在网络上，具备资料存储功能的装置，因此也称为“网络存储器”。它是一种专用数据存储服务器。它以数据为中心，将存储设备与服务器彻底分离，集中管理数据，从而释放带宽、提高性能、降低总拥有成本、保护投资。其成本远远低于使用服务器存储，而效率却远远高于后者。目前国际著名的NAS企业有Netapp、EMC、OUO等。\n\n换言之,针对个人的 NAS 可以理解为剥离了除存储以外所有功能的PC.\n# 个人 NAS 的选择\n搭建(购买)个人N\bAS需要满足以下需求:\n* 稳定: 保证7*24 工作,以及数据安全;\n* 节能: 功率低,动辄几百瓦功耗放在家里肯定是不合适的;\n* 静音: 这个就不用说了吧;\n* 性价比: 按需购买.\n\n## 可选的方案\n### 群辉\n\n>群晖科技股份有限公司（品牌名称：Synology，简称群晖或群晖科技）为台湾一家网络附加储存（NAS）服务商，总部位于台北市。截至2017年，群晖以Synology品牌行销全球，在中小企业及家用NAS市场占有率居世界首位。\n\n在 NAS 发展的这几年间,头部效应渐渐形成.群辉可以说是 NAS 界的 APPLE, 一家独大.凭借其出色的软件服务受到广大 NAS 玩家的青睐.\n\n\n\n### 威联通/铁威马等\n其他 NAS 提供商可以说是一个能打的也没有,无法提供像群辉一样的优质服务.除了价格方面没有任何优势.\n\n### 自己搭建 NAS\n自己购买硬件搭建,稳定性无法得到保障,即使刷黑群晖也无法使用群晖提供的DDNS等服务.\n## 我选择的方案\n综合自己的需求和价格,我选择了群辉的两盘位机器DS218+,搭配两块4\bT的硬盘.\n![DS219+](https://i.loli.net/2019/02/01/5c54076f75b9e.jpeg)\n\n## 群晖的一些功能\n### 文件存储\n最简单的用法,你可以把群晖当做自己的个人云盘,用作文件备份.\n![WX20190201-170812@2x](https://i.loli.net/2019/02/01/5c540c9780da0.png)\n### 相册(moments)\n群晖的相册,可以提供像 icloud相册类似的体验.时间轴,智能识别等功能一应俱全.\n![WX20190201-171122@2x](https://i.loli.net/2019/02/01/5c540d4a71bd4.png)\n\n### video station\n这个功能必须强吹一波,当你把视频文件存入时,群晖会自动识别并匹配封面图和介绍等.\n![WX20190201-171349@2x](https://i.loli.net/2019/02/01/5c540de167341.png)\n### 权限配置\n群晖提供了完整的用户权限,群组权限功能.你可以添加用户并赋予指定的文件/文件夹的读写权限.\n![WX20190201-171640@2x](https://i.loli.net/2019/02/01/5c540e87f19eb.png)\n### 远程下载(download station)\n群晖类似迅雷的远程下载功能.\n![WX20190201-171816@2x](https://i.loli.net/2019/02/01/5c540ee74d856.png)\n### docker\n群晖支持 docker,这个锦上添花的功能 又给群晖添加了无数的玩法.举几个例子:\n#### 人人美剧\n下载 docker 中的人人美剧,亲测可以满网速,批量下载美剧.\n![WX20190201-172049@2x](https://i.loli.net/2019/02/01/5c540f80a6dfc.png)\n#### 迅雷 docker 版\n搭配迅雷远程下载可以提供类似 downlaod station的功能,但是由于迅雷的限速政策,体验并不是很好.\n![WX20190201-172306@2x](https://i.loli.net/2019/02/01/5c541009e39a7.png)\n\n","source":"_posts/2019.02.01.NAS.md","raw":"---\ntitle: 群辉怎么玩儿(TO BE CONTINUED)\ntags: [NAS]\ncategories: 随笔 \n---\n# 前言\n随着国内各大网盘日渐式微,把数据保存在网盘似乎不是一个很好的办法,数据的安全和隐私都是值得我们关注的问题.这时候 NAS 就是一个很好的选择了.\n\n> NAS（Network Attached Storage：网络附属存储）按字面简单说就是连接在网络上，具备资料存储功能的装置，因此也称为“网络存储器”。它是一种专用数据存储服务器。它以数据为中心，将存储设备与服务器彻底分离，集中管理数据，从而释放带宽、提高性能、降低总拥有成本、保护投资。其成本远远低于使用服务器存储，而效率却远远高于后者。目前国际著名的NAS企业有Netapp、EMC、OUO等。\n\n换言之,针对个人的 NAS 可以理解为剥离了除存储以外所有功能的PC.\n# 个人 NAS 的选择\n搭建(购买)个人N\bAS需要满足以下需求:\n* 稳定: 保证7*24 工作,以及数据安全;\n* 节能: 功率低,动辄几百瓦功耗放在家里肯定是不合适的;\n* 静音: 这个就不用说了吧;\n* 性价比: 按需购买.\n\n## 可选的方案\n### 群辉\n\n>群晖科技股份有限公司（品牌名称：Synology，简称群晖或群晖科技）为台湾一家网络附加储存（NAS）服务商，总部位于台北市。截至2017年，群晖以Synology品牌行销全球，在中小企业及家用NAS市场占有率居世界首位。\n\n在 NAS 发展的这几年间,头部效应渐渐形成.群辉可以说是 NAS 界的 APPLE, 一家独大.凭借其出色的软件服务受到广大 NAS 玩家的青睐.\n\n\n\n### 威联通/铁威马等\n其他 NAS 提供商可以说是一个能打的也没有,无法提供像群辉一样的优质服务.除了价格方面没有任何优势.\n\n### 自己搭建 NAS\n自己购买硬件搭建,稳定性无法得到保障,即使刷黑群晖也无法使用群晖提供的DDNS等服务.\n## 我选择的方案\n综合自己的需求和价格,我选择了群辉的两盘位机器DS218+,搭配两块4\bT的硬盘.\n![DS219+](https://i.loli.net/2019/02/01/5c54076f75b9e.jpeg)\n\n## 群晖的一些功能\n### 文件存储\n最简单的用法,你可以把群晖当做自己的个人云盘,用作文件备份.\n![WX20190201-170812@2x](https://i.loli.net/2019/02/01/5c540c9780da0.png)\n### 相册(moments)\n群晖的相册,可以提供像 icloud相册类似的体验.时间轴,智能识别等功能一应俱全.\n![WX20190201-171122@2x](https://i.loli.net/2019/02/01/5c540d4a71bd4.png)\n\n### video station\n这个功能必须强吹一波,当你把视频文件存入时,群晖会自动识别并匹配封面图和介绍等.\n![WX20190201-171349@2x](https://i.loli.net/2019/02/01/5c540de167341.png)\n### 权限配置\n群晖提供了完整的用户权限,群组权限功能.你可以添加用户并赋予指定的文件/文件夹的读写权限.\n![WX20190201-171640@2x](https://i.loli.net/2019/02/01/5c540e87f19eb.png)\n### 远程下载(download station)\n群晖类似迅雷的远程下载功能.\n![WX20190201-171816@2x](https://i.loli.net/2019/02/01/5c540ee74d856.png)\n### docker\n群晖支持 docker,这个锦上添花的功能 又给群晖添加了无数的玩法.举几个例子:\n#### 人人美剧\n下载 docker 中的人人美剧,亲测可以满网速,批量下载美剧.\n![WX20190201-172049@2x](https://i.loli.net/2019/02/01/5c540f80a6dfc.png)\n#### 迅雷 docker 版\n搭配迅雷远程下载可以提供类似 downlaod station的功能,但是由于迅雷的限速政策,体验并不是很好.\n![WX20190201-172306@2x](https://i.loli.net/2019/02/01/5c541009e39a7.png)\n\n","slug":"2019.02.01.NAS","published":1,"date":"2019-02-01T07:48:35.452Z","updated":"2019-02-01T09:23:28.807Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwvh259h002dw39z0kw6licr","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>随着国内各大网盘日渐式微,把数据保存在网盘似乎不是一个很好的办法,数据的安全和隐私都是值得我们关注的问题.这时候 NAS 就是一个很好的选择了.</p>\n<blockquote>\n<p>NAS（Network Attached Storage：网络附属存储）按字面简单说就是连接在网络上，具备资料存储功能的装置，因此也称为“网络存储器”。它是一种专用数据存储服务器。它以数据为中心，将存储设备与服务器彻底分离，集中管理数据，从而释放带宽、提高性能、降低总拥有成本、保护投资。其成本远远低于使用服务器存储，而效率却远远高于后者。目前国际著名的NAS企业有Netapp、EMC、OUO等。</p>\n</blockquote>\n<p>换言之,针对个人的 NAS 可以理解为剥离了除存储以外所有功能的PC.</p>\n<h1 id=\"个人-NAS-的选择\"><a href=\"#个人-NAS-的选择\" class=\"headerlink\" title=\"个人 NAS 的选择\"></a>个人 NAS 的选择</h1><p>搭建(购买)个人N\bAS需要满足以下需求:</p>\n<ul>\n<li>稳定: 保证7*24 工作,以及数据安全;</li>\n<li>节能: 功率低,动辄几百瓦功耗放在家里肯定是不合适的;</li>\n<li>静音: 这个就不用说了吧;</li>\n<li>性价比: 按需购买.</li>\n</ul>\n<h2 id=\"可选的方案\"><a href=\"#可选的方案\" class=\"headerlink\" title=\"可选的方案\"></a>可选的方案</h2><h3 id=\"群辉\"><a href=\"#群辉\" class=\"headerlink\" title=\"群辉\"></a>群辉</h3><blockquote>\n<p>群晖科技股份有限公司（品牌名称：Synology，简称群晖或群晖科技）为台湾一家网络附加储存（NAS）服务商，总部位于台北市。截至2017年，群晖以Synology品牌行销全球，在中小企业及家用NAS市场占有率居世界首位。</p>\n</blockquote>\n<p>在 NAS 发展的这几年间,头部效应渐渐形成.群辉可以说是 NAS 界的 APPLE, 一家独大.凭借其出色的软件服务受到广大 NAS 玩家的青睐.</p>\n<h3 id=\"威联通-铁威马等\"><a href=\"#威联通-铁威马等\" class=\"headerlink\" title=\"威联通/铁威马等\"></a>威联通/铁威马等</h3><p>其他 NAS 提供商可以说是一个能打的也没有,无法提供像群辉一样的优质服务.除了价格方面没有任何优势.</p>\n<h3 id=\"自己搭建-NAS\"><a href=\"#自己搭建-NAS\" class=\"headerlink\" title=\"自己搭建 NAS\"></a>自己搭建 NAS</h3><p>自己购买硬件搭建,稳定性无法得到保障,即使刷黑群晖也无法使用群晖提供的DDNS等服务.</p>\n<h2 id=\"我选择的方案\"><a href=\"#我选择的方案\" class=\"headerlink\" title=\"我选择的方案\"></a>我选择的方案</h2><p>综合自己的需求和价格,我选择了群辉的两盘位机器DS218+,搭配两块4\bT的硬盘.<br><img src=\"https://i.loli.net/2019/02/01/5c54076f75b9e.jpeg\" alt=\"DS219+\"></p>\n<h2 id=\"群晖的一些功能\"><a href=\"#群晖的一些功能\" class=\"headerlink\" title=\"群晖的一些功能\"></a>群晖的一些功能</h2><h3 id=\"文件存储\"><a href=\"#文件存储\" class=\"headerlink\" title=\"文件存储\"></a>文件存储</h3><p>最简单的用法,你可以把群晖当做自己的个人云盘,用作文件备份.<br><img src=\"https://i.loli.net/2019/02/01/5c540c9780da0.png\" alt=\"WX20190201-170812@2x\"></p>\n<h3 id=\"相册-moments\"><a href=\"#相册-moments\" class=\"headerlink\" title=\"相册(moments)\"></a>相册(moments)</h3><p>群晖的相册,可以提供像 icloud相册类似的体验.时间轴,智能识别等功能一应俱全.<br><img src=\"https://i.loli.net/2019/02/01/5c540d4a71bd4.png\" alt=\"WX20190201-171122@2x\"></p>\n<h3 id=\"video-station\"><a href=\"#video-station\" class=\"headerlink\" title=\"video station\"></a>video station</h3><p>这个功能必须强吹一波,当你把视频文件存入时,群晖会自动识别并匹配封面图和介绍等.<br><img src=\"https://i.loli.net/2019/02/01/5c540de167341.png\" alt=\"WX20190201-171349@2x\"></p>\n<h3 id=\"权限配置\"><a href=\"#权限配置\" class=\"headerlink\" title=\"权限配置\"></a>权限配置</h3><p>群晖提供了完整的用户权限,群组权限功能.你可以添加用户并赋予指定的文件/文件夹的读写权限.<br><img src=\"https://i.loli.net/2019/02/01/5c540e87f19eb.png\" alt=\"WX20190201-171640@2x\"></p>\n<h3 id=\"远程下载-download-station\"><a href=\"#远程下载-download-station\" class=\"headerlink\" title=\"远程下载(download station)\"></a>远程下载(download station)</h3><p>群晖类似迅雷的远程下载功能.<br><img src=\"https://i.loli.net/2019/02/01/5c540ee74d856.png\" alt=\"WX20190201-171816@2x\"></p>\n<h3 id=\"docker\"><a href=\"#docker\" class=\"headerlink\" title=\"docker\"></a>docker</h3><p>群晖支持 docker,这个锦上添花的功能 又给群晖添加了无数的玩法.举几个例子:</p>\n<h4 id=\"人人美剧\"><a href=\"#人人美剧\" class=\"headerlink\" title=\"人人美剧\"></a>人人美剧</h4><p>下载 docker 中的人人美剧,亲测可以满网速,批量下载美剧.<br><img src=\"https://i.loli.net/2019/02/01/5c540f80a6dfc.png\" alt=\"WX20190201-172049@2x\"></p>\n<h4 id=\"迅雷-docker-版\"><a href=\"#迅雷-docker-版\" class=\"headerlink\" title=\"迅雷 docker 版\"></a>迅雷 docker 版</h4><p>搭配迅雷远程下载可以提供类似 downlaod station的功能,但是由于迅雷的限速政策,体验并不是很好.<br><img src=\"https://i.loli.net/2019/02/01/5c541009e39a7.png\" alt=\"WX20190201-172306@2x\"></p>\n","excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>随着国内各大网盘日渐式微,把数据保存在网盘似乎不是一个很好的办法,数据的安全和隐私都是值得我们关注的问题.这时候 NAS 就是一个很好的选择了.</p>\n<blockquote>\n<p>NAS（Network Attached Storage：网络附属存储）按字面简单说就是连接在网络上，具备资料存储功能的装置，因此也称为“网络存储器”。它是一种专用数据存储服务器。它以数据为中心，将存储设备与服务器彻底分离，集中管理数据，从而释放带宽、提高性能、降低总拥有成本、保护投资。其成本远远低于使用服务器存储，而效率却远远高于后者。目前国际著名的NAS企业有Netapp、EMC、OUO等。</p>\n</blockquote>\n<p>换言之,针对个人的 NAS 可以理解为剥离了除存储以外所有功能的PC.</p>\n<h1 id=\"个人-NAS-的选择\"><a href=\"#个人-NAS-的选择\" class=\"headerlink\" title=\"个人 NAS 的选择\"></a>个人 NAS 的选择</h1><p>搭建(购买)个人N\bAS需要满足以下需求:</p>\n<ul>\n<li>稳定: 保证7*24 工作,以及数据安全;</li>\n<li>节能: 功率低,动辄几百瓦功耗放在家里肯定是不合适的;</li>\n<li>静音: 这个就不用说了吧;</li>\n<li>性价比: 按需购买.</li>\n</ul>\n<h2 id=\"可选的方案\"><a href=\"#可选的方案\" class=\"headerlink\" title=\"可选的方案\"></a>可选的方案</h2><h3 id=\"群辉\"><a href=\"#群辉\" class=\"headerlink\" title=\"群辉\"></a>群辉</h3><blockquote>\n<p>群晖科技股份有限公司（品牌名称：Synology，简称群晖或群晖科技）为台湾一家网络附加储存（NAS）服务商，总部位于台北市。截至2017年，群晖以Synology品牌行销全球，在中小企业及家用NAS市场占有率居世界首位。</p>\n</blockquote>\n<p>在 NAS 发展的这几年间,头部效应渐渐形成.群辉可以说是 NAS 界的 APPLE, 一家独大.凭借其出色的软件服务受到广大 NAS 玩家的青睐.</p>\n<h3 id=\"威联通-铁威马等\"><a href=\"#威联通-铁威马等\" class=\"headerlink\" title=\"威联通/铁威马等\"></a>威联通/铁威马等</h3><p>其他 NAS 提供商可以说是一个能打的也没有,无法提供像群辉一样的优质服务.除了价格方面没有任何优势.</p>\n<h3 id=\"自己搭建-NAS\"><a href=\"#自己搭建-NAS\" class=\"headerlink\" title=\"自己搭建 NAS\"></a>自己搭建 NAS</h3><p>自己购买硬件搭建,稳定性无法得到保障,即使刷黑群晖也无法使用群晖提供的DDNS等服务.</p>\n<h2 id=\"我选择的方案\"><a href=\"#我选择的方案\" class=\"headerlink\" title=\"我选择的方案\"></a>我选择的方案</h2><p>综合自己的需求和价格,我选择了群辉的两盘位机器DS218+,搭配两块4\bT的硬盘.<br><img src=\"https://i.loli.net/2019/02/01/5c54076f75b9e.jpeg\" alt=\"DS219+\"></p>\n<h2 id=\"群晖的一些功能\"><a href=\"#群晖的一些功能\" class=\"headerlink\" title=\"群晖的一些功能\"></a>群晖的一些功能</h2><h3 id=\"文件存储\"><a href=\"#文件存储\" class=\"headerlink\" title=\"文件存储\"></a>文件存储</h3><p>最简单的用法,你可以把群晖当做自己的个人云盘,用作文件备份.<br><img src=\"https://i.loli.net/2019/02/01/5c540c9780da0.png\" alt=\"WX20190201-170812@2x\"></p>\n<h3 id=\"相册-moments\"><a href=\"#相册-moments\" class=\"headerlink\" title=\"相册(moments)\"></a>相册(moments)</h3><p>群晖的相册,可以提供像 icloud相册类似的体验.时间轴,智能识别等功能一应俱全.<br><img src=\"https://i.loli.net/2019/02/01/5c540d4a71bd4.png\" alt=\"WX20190201-171122@2x\"></p>\n<h3 id=\"video-station\"><a href=\"#video-station\" class=\"headerlink\" title=\"video station\"></a>video station</h3><p>这个功能必须强吹一波,当你把视频文件存入时,群晖会自动识别并匹配封面图和介绍等.<br><img src=\"https://i.loli.net/2019/02/01/5c540de167341.png\" alt=\"WX20190201-171349@2x\"></p>\n<h3 id=\"权限配置\"><a href=\"#权限配置\" class=\"headerlink\" title=\"权限配置\"></a>权限配置</h3><p>群晖提供了完整的用户权限,群组权限功能.你可以添加用户并赋予指定的文件/文件夹的读写权限.<br><img src=\"https://i.loli.net/2019/02/01/5c540e87f19eb.png\" alt=\"WX20190201-171640@2x\"></p>\n<h3 id=\"远程下载-download-station\"><a href=\"#远程下载-download-station\" class=\"headerlink\" title=\"远程下载(download station)\"></a>远程下载(download station)</h3><p>群晖类似迅雷的远程下载功能.<br><img src=\"https://i.loli.net/2019/02/01/5c540ee74d856.png\" alt=\"WX20190201-171816@2x\"></p>\n<h3 id=\"docker\"><a href=\"#docker\" class=\"headerlink\" title=\"docker\"></a>docker</h3><p>群晖支持 docker,这个锦上添花的功能 又给群晖添加了无数的玩法.举几个例子:</p>\n<h4 id=\"人人美剧\"><a href=\"#人人美剧\" class=\"headerlink\" title=\"人人美剧\"></a>人人美剧</h4><p>下载 docker 中的人人美剧,亲测可以满网速,批量下载美剧.<br><img src=\"https://i.loli.net/2019/02/01/5c540f80a6dfc.png\" alt=\"WX20190201-172049@2x\"></p>\n<h4 id=\"迅雷-docker-版\"><a href=\"#迅雷-docker-版\" class=\"headerlink\" title=\"迅雷 docker 版\"></a>迅雷 docker 版</h4><p>搭配迅雷远程下载可以提供类似 downlaod station的功能,但是由于迅雷的限速政策,体验并不是很好.<br><img src=\"https://i.loli.net/2019/02/01/5c541009e39a7.png\" alt=\"WX20190201-172306@2x\"></p>\n"},{"title":"BASE64 加密","_content":"# BASE64加密算法\n>所谓Base64，就是说选出64个字符----小写字母a-z、大写字母A-Z、数字0-9、符号\"+\"、\"/\"（再加上作为垫字的\"=\"，实际上是65个字符）----作为一个基本字符集。然后，其他所有符号都转换成这个字符集中的字符。\n\n## 具体步骤\n* 第一步，将每三个字节作为一组，一共是24个二进制位。\n* 第二步，将这24个二进制位分为四组，每个组有6个二进制位。\n* 第三步，在每组前面加两个00，扩展成32个二进制位，即四个字节。\n* 第四步，根据下表，得到扩展后的每个字节的对应符号，这就是Base64的编码值。\n![WX20190513-144448@2x](https://i.loli.net/2019/05/13/5cd9127ce8b0686436.png)\n![img2](https://i.loli.net/2019/05/13/5cd912bbd6a0785141.png)\n### 字节数不足 3\n#### 字节数为 2\n将这二个字节的一共16个二进制位，按照上面的规则，转成三组，最后一组除了前面加两个0以外，后面也要加两个0。这样得到一个三位的Base64编码，再在末尾补上一个\"=\"号。\n\n比如，\"Ma\"这个字符串是两个字节，可以转化成三组00010011、00010110、00010000以后，对应Base64值分别为T、W、E，再补上一个\"=\"号，因此\"Ma\"的Base64编码就是TWE=。\n#### 字节数为 1\n一个字节的情况：将这一个字节的8个二进制位，按照上面的规则转成二组，最后一组除了前面加二个0以外，后面再加4个0。这样得到一个二位的Base64编码，再在末尾补上两个\"=\"号。\n\n比如，\"M\"这个字母是一个字节，可以转化为二组00010011、00010000，对应的Base64值分别为T、Q，再补上二个\"=\"号，因此\"M\"的Base64编码就是TQ==。\n### 汉字如何转化为 base64 编码\n汉字本身可以有多种编码，比如gb2312、utf-8、gbk等等，每一种编码的Base64对应值都不一样。下面的例子以utf-8为例。\n\n首先，\"严\"的utf-8编码为E4B8A5，写成二进制就是三字节的\"11100100 10111000 10100101\"。将这个24位的二进制字符串，按照第3节中的规则，转换成四组一共32位的二进制值\"00111001 00001011 00100010 00100101\"，相应的十进制数为57、11、34、37，它们对应的Base64值就为5、L、i、l。\n\n所以，汉字\"严\"（utf-8编码）的Base64值就是5Lil。\n\n","source":"_posts/2019.05.13.encrypt.md","raw":"---\ntitle: BASE64 加密\ntags: [加密]\ncategories: 随笔\n---\n# BASE64加密算法\n>所谓Base64，就是说选出64个字符----小写字母a-z、大写字母A-Z、数字0-9、符号\"+\"、\"/\"（再加上作为垫字的\"=\"，实际上是65个字符）----作为一个基本字符集。然后，其他所有符号都转换成这个字符集中的字符。\n\n## 具体步骤\n* 第一步，将每三个字节作为一组，一共是24个二进制位。\n* 第二步，将这24个二进制位分为四组，每个组有6个二进制位。\n* 第三步，在每组前面加两个00，扩展成32个二进制位，即四个字节。\n* 第四步，根据下表，得到扩展后的每个字节的对应符号，这就是Base64的编码值。\n![WX20190513-144448@2x](https://i.loli.net/2019/05/13/5cd9127ce8b0686436.png)\n![img2](https://i.loli.net/2019/05/13/5cd912bbd6a0785141.png)\n### 字节数不足 3\n#### 字节数为 2\n将这二个字节的一共16个二进制位，按照上面的规则，转成三组，最后一组除了前面加两个0以外，后面也要加两个0。这样得到一个三位的Base64编码，再在末尾补上一个\"=\"号。\n\n比如，\"Ma\"这个字符串是两个字节，可以转化成三组00010011、00010110、00010000以后，对应Base64值分别为T、W、E，再补上一个\"=\"号，因此\"Ma\"的Base64编码就是TWE=。\n#### 字节数为 1\n一个字节的情况：将这一个字节的8个二进制位，按照上面的规则转成二组，最后一组除了前面加二个0以外，后面再加4个0。这样得到一个二位的Base64编码，再在末尾补上两个\"=\"号。\n\n比如，\"M\"这个字母是一个字节，可以转化为二组00010011、00010000，对应的Base64值分别为T、Q，再补上二个\"=\"号，因此\"M\"的Base64编码就是TQ==。\n### 汉字如何转化为 base64 编码\n汉字本身可以有多种编码，比如gb2312、utf-8、gbk等等，每一种编码的Base64对应值都不一样。下面的例子以utf-8为例。\n\n首先，\"严\"的utf-8编码为E4B8A5，写成二进制就是三字节的\"11100100 10111000 10100101\"。将这个24位的二进制字符串，按照第3节中的规则，转换成四组一共32位的二进制值\"00111001 00001011 00100010 00100101\"，相应的十进制数为57、11、34、37，它们对应的Base64值就为5、L、i、l。\n\n所以，汉字\"严\"（utf-8编码）的Base64值就是5Lil。\n\n","slug":"2019.05.13.encrypt","published":1,"date":"2019-05-13T03:11:46.184Z","updated":"2019-05-13T06:48:23.834Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwvh259i002gw39zdrbkjbms","content":"<h1 id=\"BASE64加密算法\"><a href=\"#BASE64加密算法\" class=\"headerlink\" title=\"BASE64加密算法\"></a>BASE64加密算法</h1><blockquote>\n<p>所谓Base64，就是说选出64个字符—-小写字母a-z、大写字母A-Z、数字0-9、符号”+”、”/“（再加上作为垫字的”=”，实际上是65个字符）—-作为一个基本字符集。然后，其他所有符号都转换成这个字符集中的字符。</p>\n</blockquote>\n<h2 id=\"具体步骤\"><a href=\"#具体步骤\" class=\"headerlink\" title=\"具体步骤\"></a>具体步骤</h2><ul>\n<li>第一步，将每三个字节作为一组，一共是24个二进制位。</li>\n<li>第二步，将这24个二进制位分为四组，每个组有6个二进制位。</li>\n<li>第三步，在每组前面加两个00，扩展成32个二进制位，即四个字节。</li>\n<li>第四步，根据下表，得到扩展后的每个字节的对应符号，这就是Base64的编码值。<br><img src=\"https://i.loli.net/2019/05/13/5cd9127ce8b0686436.png\" alt=\"WX20190513-144448@2x\"><br><img src=\"https://i.loli.net/2019/05/13/5cd912bbd6a0785141.png\" alt=\"img2\"><h3 id=\"字节数不足-3\"><a href=\"#字节数不足-3\" class=\"headerlink\" title=\"字节数不足 3\"></a>字节数不足 3</h3><h4 id=\"字节数为-2\"><a href=\"#字节数为-2\" class=\"headerlink\" title=\"字节数为 2\"></a>字节数为 2</h4>将这二个字节的一共16个二进制位，按照上面的规则，转成三组，最后一组除了前面加两个0以外，后面也要加两个0。这样得到一个三位的Base64编码，再在末尾补上一个”=”号。</li>\n</ul>\n<p>比如，”Ma”这个字符串是两个字节，可以转化成三组00010011、00010110、00010000以后，对应Base64值分别为T、W、E，再补上一个”=”号，因此”Ma”的Base64编码就是TWE=。</p>\n<h4 id=\"字节数为-1\"><a href=\"#字节数为-1\" class=\"headerlink\" title=\"字节数为 1\"></a>字节数为 1</h4><p>一个字节的情况：将这一个字节的8个二进制位，按照上面的规则转成二组，最后一组除了前面加二个0以外，后面再加4个0。这样得到一个二位的Base64编码，再在末尾补上两个”=”号。</p>\n<p>比如，”M”这个字母是一个字节，可以转化为二组00010011、00010000，对应的Base64值分别为T、Q，再补上二个”=”号，因此”M”的Base64编码就是TQ==。</p>\n<h3 id=\"汉字如何转化为-base64-编码\"><a href=\"#汉字如何转化为-base64-编码\" class=\"headerlink\" title=\"汉字如何转化为 base64 编码\"></a>汉字如何转化为 base64 编码</h3><p>汉字本身可以有多种编码，比如gb2312、utf-8、gbk等等，每一种编码的Base64对应值都不一样。下面的例子以utf-8为例。</p>\n<p>首先，”严”的utf-8编码为E4B8A5，写成二进制就是三字节的”11100100 10111000 10100101”。将这个24位的二进制字符串，按照第3节中的规则，转换成四组一共32位的二进制值”00111001 00001011 00100010 00100101”，相应的十进制数为57、11、34、37，它们对应的Base64值就为5、L、i、l。</p>\n<p>所以，汉字”严”（utf-8编码）的Base64值就是5Lil。</p>\n","excerpt":"","more":"<h1 id=\"BASE64加密算法\"><a href=\"#BASE64加密算法\" class=\"headerlink\" title=\"BASE64加密算法\"></a>BASE64加密算法</h1><blockquote>\n<p>所谓Base64，就是说选出64个字符—-小写字母a-z、大写字母A-Z、数字0-9、符号”+”、”/“（再加上作为垫字的”=”，实际上是65个字符）—-作为一个基本字符集。然后，其他所有符号都转换成这个字符集中的字符。</p>\n</blockquote>\n<h2 id=\"具体步骤\"><a href=\"#具体步骤\" class=\"headerlink\" title=\"具体步骤\"></a>具体步骤</h2><ul>\n<li>第一步，将每三个字节作为一组，一共是24个二进制位。</li>\n<li>第二步，将这24个二进制位分为四组，每个组有6个二进制位。</li>\n<li>第三步，在每组前面加两个00，扩展成32个二进制位，即四个字节。</li>\n<li>第四步，根据下表，得到扩展后的每个字节的对应符号，这就是Base64的编码值。<br><img src=\"https://i.loli.net/2019/05/13/5cd9127ce8b0686436.png\" alt=\"WX20190513-144448@2x\"><br><img src=\"https://i.loli.net/2019/05/13/5cd912bbd6a0785141.png\" alt=\"img2\"><h3 id=\"字节数不足-3\"><a href=\"#字节数不足-3\" class=\"headerlink\" title=\"字节数不足 3\"></a>字节数不足 3</h3><h4 id=\"字节数为-2\"><a href=\"#字节数为-2\" class=\"headerlink\" title=\"字节数为 2\"></a>字节数为 2</h4>将这二个字节的一共16个二进制位，按照上面的规则，转成三组，最后一组除了前面加两个0以外，后面也要加两个0。这样得到一个三位的Base64编码，再在末尾补上一个”=”号。</li>\n</ul>\n<p>比如，”Ma”这个字符串是两个字节，可以转化成三组00010011、00010110、00010000以后，对应Base64值分别为T、W、E，再补上一个”=”号，因此”Ma”的Base64编码就是TWE=。</p>\n<h4 id=\"字节数为-1\"><a href=\"#字节数为-1\" class=\"headerlink\" title=\"字节数为 1\"></a>字节数为 1</h4><p>一个字节的情况：将这一个字节的8个二进制位，按照上面的规则转成二组，最后一组除了前面加二个0以外，后面再加4个0。这样得到一个二位的Base64编码，再在末尾补上两个”=”号。</p>\n<p>比如，”M”这个字母是一个字节，可以转化为二组00010011、00010000，对应的Base64值分别为T、Q，再补上二个”=”号，因此”M”的Base64编码就是TQ==。</p>\n<h3 id=\"汉字如何转化为-base64-编码\"><a href=\"#汉字如何转化为-base64-编码\" class=\"headerlink\" title=\"汉字如何转化为 base64 编码\"></a>汉字如何转化为 base64 编码</h3><p>汉字本身可以有多种编码，比如gb2312、utf-8、gbk等等，每一种编码的Base64对应值都不一样。下面的例子以utf-8为例。</p>\n<p>首先，”严”的utf-8编码为E4B8A5，写成二进制就是三字节的”11100100 10111000 10100101”。将这个24位的二进制字符串，按照第3节中的规则，转换成四组一共32位的二进制值”00111001 00001011 00100010 00100101”，相应的十进制数为57、11、34、37，它们对应的Base64值就为5、L、i、l。</p>\n<p>所以，汉字”严”（utf-8编码）的Base64值就是5Lil。</p>\n"},{"title":"关于电信的 CN2","_content":"\n# 什么是电信 CN2 网络\n\nCN2全称为中国电信下一代承载网，英文Chinatelecom Next Carrier Network，缩写为CNCN，进一步缩写为CN2。\n\n\n# CN2 线路的优势在哪里\nCN2作为“精品网络项目”被提出来，其技术构造是远远领先于电信原有网络的，极为先进的QOS保证网络的畅通性，具体可参考资料。当然除了先进的技术，其昂贵的价格和对大量网络资源的独占性也是重要的原因，资料。普通家庭宽带用户用不上CN2线路，哪怕加几倍的钱也不一定能用上，而接入CN2线路机房的VPS，价格卖得比其他线路的高很多。用户少，服务器少，分配的独享资源多，这样就能保证绝大多数情况下CN2线路的流畅性。\n\n如果想要寻找接入CN2线路的国外VPS提供商，建议使用“Next Carrier Network” 或者CN2这个关键词搜索即可。\n# 三种承载网络的对比\n提到CN2，我们还不得不提到老一代的163骨干网，而CN2本身又分为两种类型，所以，我们在这里把这三者逐一对比一下：\n* 普通163: 就是电信用户最经常遇到的电信线路，等级最低，省级/出国/国际骨干节点都以202.97开头，全程没有59.43开头的CN2节点。在出国线路上表现为拥堵，丢包率高。\n* CN2 GT: CN2里属于Global Transit的产品(又名GIS-Global Internet Service)，在CN2里等级低，省级/出国节点为202.97开头，国际骨干节点有2～4个59.43开头的CN2节点。在出国线路上拥堵程度一般，相对于163骨干网的稍强，相比CN2 GIA，性价比也较高。\n* CN2 GIA: CN2里属于Global Internet Access的产品，等级最高，省级/出国/国际骨干节点都以59.43开头，全程没有202.97开头的节点。在出国线路上表现最好，很少拥堵，理论上速度最快最稳定，当然，价格也相对CN2 GT偏高。\n# 如何判断线路类型\n通常情况下，我们使用mtr或者traceroute，通过跟踪网络包的路由节点，来判断具体的网络承载类型，下面，我们来举几个栗子：\n* 整个路由节点信息中，全程没有59.43开头的CN2节点，并且一些省级或者出口的节点是以202.97开头的，因此我们可以判断承载网络就是163普通线路。\n* 在路由节点中，出现了59.43开头的节点，在一些出口节点上，仍然通过了202.97开头的节点，可以判断为CN2 GT线路。\n* 路由的跳数相对较少，并且经过了59.43..开头的节点，而并没有经过202.97开头的节点，此承载网络类型为CN2 GIA线路。\n# CN2 VPS 是否一定比普通 163 承载网络的 VPS 更快呢?\nCN2决定了网络质量会优于普通163承载网络，但也不一定，除了承载网络之外，机房的地理位置也很重要。\n# 单向 CN2 与双向 CN2 \nCN2除了线路分为两种类型，购买时，还得注意CN2是双向还是单向。所为双向，顾名思义，去程的路由节点和回程的路由节点，都使用了CN2的承载网络。而单向CN2，一般都是去程CN2，回程普通电信线路，在速度上，会略逊于双向CN2。\n","source":"_posts/2019.05.14.cn2.md","raw":"---\ntitle: 关于电信的 CN2\ntags: [翻墙]\ncategories: 随笔\n---\n\n# 什么是电信 CN2 网络\n\nCN2全称为中国电信下一代承载网，英文Chinatelecom Next Carrier Network，缩写为CNCN，进一步缩写为CN2。\n\n\n# CN2 线路的优势在哪里\nCN2作为“精品网络项目”被提出来，其技术构造是远远领先于电信原有网络的，极为先进的QOS保证网络的畅通性，具体可参考资料。当然除了先进的技术，其昂贵的价格和对大量网络资源的独占性也是重要的原因，资料。普通家庭宽带用户用不上CN2线路，哪怕加几倍的钱也不一定能用上，而接入CN2线路机房的VPS，价格卖得比其他线路的高很多。用户少，服务器少，分配的独享资源多，这样就能保证绝大多数情况下CN2线路的流畅性。\n\n如果想要寻找接入CN2线路的国外VPS提供商，建议使用“Next Carrier Network” 或者CN2这个关键词搜索即可。\n# 三种承载网络的对比\n提到CN2，我们还不得不提到老一代的163骨干网，而CN2本身又分为两种类型，所以，我们在这里把这三者逐一对比一下：\n* 普通163: 就是电信用户最经常遇到的电信线路，等级最低，省级/出国/国际骨干节点都以202.97开头，全程没有59.43开头的CN2节点。在出国线路上表现为拥堵，丢包率高。\n* CN2 GT: CN2里属于Global Transit的产品(又名GIS-Global Internet Service)，在CN2里等级低，省级/出国节点为202.97开头，国际骨干节点有2～4个59.43开头的CN2节点。在出国线路上拥堵程度一般，相对于163骨干网的稍强，相比CN2 GIA，性价比也较高。\n* CN2 GIA: CN2里属于Global Internet Access的产品，等级最高，省级/出国/国际骨干节点都以59.43开头，全程没有202.97开头的节点。在出国线路上表现最好，很少拥堵，理论上速度最快最稳定，当然，价格也相对CN2 GT偏高。\n# 如何判断线路类型\n通常情况下，我们使用mtr或者traceroute，通过跟踪网络包的路由节点，来判断具体的网络承载类型，下面，我们来举几个栗子：\n* 整个路由节点信息中，全程没有59.43开头的CN2节点，并且一些省级或者出口的节点是以202.97开头的，因此我们可以判断承载网络就是163普通线路。\n* 在路由节点中，出现了59.43开头的节点，在一些出口节点上，仍然通过了202.97开头的节点，可以判断为CN2 GT线路。\n* 路由的跳数相对较少，并且经过了59.43..开头的节点，而并没有经过202.97开头的节点，此承载网络类型为CN2 GIA线路。\n# CN2 VPS 是否一定比普通 163 承载网络的 VPS 更快呢?\nCN2决定了网络质量会优于普通163承载网络，但也不一定，除了承载网络之外，机房的地理位置也很重要。\n# 单向 CN2 与双向 CN2 \nCN2除了线路分为两种类型，购买时，还得注意CN2是双向还是单向。所为双向，顾名思义，去程的路由节点和回程的路由节点，都使用了CN2的承载网络。而单向CN2，一般都是去程CN2，回程普通电信线路，在速度上，会略逊于双向CN2。\n","slug":"2019.05.14.cn2","published":1,"date":"2019-05-14T09:37:46.670Z","updated":"2019-05-15T01:39:53.243Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwvh259j002jw39zss73f208","content":"<h1 id=\"什么是电信-CN2-网络\"><a href=\"#什么是电信-CN2-网络\" class=\"headerlink\" title=\"什么是电信 CN2 网络\"></a>什么是电信 CN2 网络</h1><p>CN2全称为中国电信下一代承载网，英文Chinatelecom Next Carrier Network，缩写为CNCN，进一步缩写为CN2。</p>\n<h1 id=\"CN2-线路的优势在哪里\"><a href=\"#CN2-线路的优势在哪里\" class=\"headerlink\" title=\"CN2 线路的优势在哪里\"></a>CN2 线路的优势在哪里</h1><p>CN2作为“精品网络项目”被提出来，其技术构造是远远领先于电信原有网络的，极为先进的QOS保证网络的畅通性，具体可参考资料。当然除了先进的技术，其昂贵的价格和对大量网络资源的独占性也是重要的原因，资料。普通家庭宽带用户用不上CN2线路，哪怕加几倍的钱也不一定能用上，而接入CN2线路机房的VPS，价格卖得比其他线路的高很多。用户少，服务器少，分配的独享资源多，这样就能保证绝大多数情况下CN2线路的流畅性。</p>\n<p>如果想要寻找接入CN2线路的国外VPS提供商，建议使用“Next Carrier Network” 或者CN2这个关键词搜索即可。</p>\n<h1 id=\"三种承载网络的对比\"><a href=\"#三种承载网络的对比\" class=\"headerlink\" title=\"三种承载网络的对比\"></a>三种承载网络的对比</h1><p>提到CN2，我们还不得不提到老一代的163骨干网，而CN2本身又分为两种类型，所以，我们在这里把这三者逐一对比一下：</p>\n<ul>\n<li>普通163: 就是电信用户最经常遇到的电信线路，等级最低，省级/出国/国际骨干节点都以202.97开头，全程没有59.43开头的CN2节点。在出国线路上表现为拥堵，丢包率高。</li>\n<li>CN2 GT: CN2里属于Global Transit的产品(又名GIS-Global Internet Service)，在CN2里等级低，省级/出国节点为202.97开头，国际骨干节点有2～4个59.43开头的CN2节点。在出国线路上拥堵程度一般，相对于163骨干网的稍强，相比CN2 GIA，性价比也较高。</li>\n<li>CN2 GIA: CN2里属于Global Internet Access的产品，等级最高，省级/出国/国际骨干节点都以59.43开头，全程没有202.97开头的节点。在出国线路上表现最好，很少拥堵，理论上速度最快最稳定，当然，价格也相对CN2 GT偏高。<h1 id=\"如何判断线路类型\"><a href=\"#如何判断线路类型\" class=\"headerlink\" title=\"如何判断线路类型\"></a>如何判断线路类型</h1>通常情况下，我们使用mtr或者traceroute，通过跟踪网络包的路由节点，来判断具体的网络承载类型，下面，我们来举几个栗子：</li>\n<li>整个路由节点信息中，全程没有59.43开头的CN2节点，并且一些省级或者出口的节点是以202.97开头的，因此我们可以判断承载网络就是163普通线路。</li>\n<li>在路由节点中，出现了59.43开头的节点，在一些出口节点上，仍然通过了202.97开头的节点，可以判断为CN2 GT线路。</li>\n<li>路由的跳数相对较少，并且经过了59.43..开头的节点，而并没有经过202.97开头的节点，此承载网络类型为CN2 GIA线路。<h1 id=\"CN2-VPS-是否一定比普通-163-承载网络的-VPS-更快呢\"><a href=\"#CN2-VPS-是否一定比普通-163-承载网络的-VPS-更快呢\" class=\"headerlink\" title=\"CN2 VPS 是否一定比普通 163 承载网络的 VPS 更快呢?\"></a>CN2 VPS 是否一定比普通 163 承载网络的 VPS 更快呢?</h1>CN2决定了网络质量会优于普通163承载网络，但也不一定，除了承载网络之外，机房的地理位置也很重要。<h1 id=\"单向-CN2-与双向-CN2\"><a href=\"#单向-CN2-与双向-CN2\" class=\"headerlink\" title=\"单向 CN2 与双向 CN2\"></a>单向 CN2 与双向 CN2</h1>CN2除了线路分为两种类型，购买时，还得注意CN2是双向还是单向。所为双向，顾名思义，去程的路由节点和回程的路由节点，都使用了CN2的承载网络。而单向CN2，一般都是去程CN2，回程普通电信线路，在速度上，会略逊于双向CN2。</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"什么是电信-CN2-网络\"><a href=\"#什么是电信-CN2-网络\" class=\"headerlink\" title=\"什么是电信 CN2 网络\"></a>什么是电信 CN2 网络</h1><p>CN2全称为中国电信下一代承载网，英文Chinatelecom Next Carrier Network，缩写为CNCN，进一步缩写为CN2。</p>\n<h1 id=\"CN2-线路的优势在哪里\"><a href=\"#CN2-线路的优势在哪里\" class=\"headerlink\" title=\"CN2 线路的优势在哪里\"></a>CN2 线路的优势在哪里</h1><p>CN2作为“精品网络项目”被提出来，其技术构造是远远领先于电信原有网络的，极为先进的QOS保证网络的畅通性，具体可参考资料。当然除了先进的技术，其昂贵的价格和对大量网络资源的独占性也是重要的原因，资料。普通家庭宽带用户用不上CN2线路，哪怕加几倍的钱也不一定能用上，而接入CN2线路机房的VPS，价格卖得比其他线路的高很多。用户少，服务器少，分配的独享资源多，这样就能保证绝大多数情况下CN2线路的流畅性。</p>\n<p>如果想要寻找接入CN2线路的国外VPS提供商，建议使用“Next Carrier Network” 或者CN2这个关键词搜索即可。</p>\n<h1 id=\"三种承载网络的对比\"><a href=\"#三种承载网络的对比\" class=\"headerlink\" title=\"三种承载网络的对比\"></a>三种承载网络的对比</h1><p>提到CN2，我们还不得不提到老一代的163骨干网，而CN2本身又分为两种类型，所以，我们在这里把这三者逐一对比一下：</p>\n<ul>\n<li>普通163: 就是电信用户最经常遇到的电信线路，等级最低，省级/出国/国际骨干节点都以202.97开头，全程没有59.43开头的CN2节点。在出国线路上表现为拥堵，丢包率高。</li>\n<li>CN2 GT: CN2里属于Global Transit的产品(又名GIS-Global Internet Service)，在CN2里等级低，省级/出国节点为202.97开头，国际骨干节点有2～4个59.43开头的CN2节点。在出国线路上拥堵程度一般，相对于163骨干网的稍强，相比CN2 GIA，性价比也较高。</li>\n<li>CN2 GIA: CN2里属于Global Internet Access的产品，等级最高，省级/出国/国际骨干节点都以59.43开头，全程没有202.97开头的节点。在出国线路上表现最好，很少拥堵，理论上速度最快最稳定，当然，价格也相对CN2 GT偏高。<h1 id=\"如何判断线路类型\"><a href=\"#如何判断线路类型\" class=\"headerlink\" title=\"如何判断线路类型\"></a>如何判断线路类型</h1>通常情况下，我们使用mtr或者traceroute，通过跟踪网络包的路由节点，来判断具体的网络承载类型，下面，我们来举几个栗子：</li>\n<li>整个路由节点信息中，全程没有59.43开头的CN2节点，并且一些省级或者出口的节点是以202.97开头的，因此我们可以判断承载网络就是163普通线路。</li>\n<li>在路由节点中，出现了59.43开头的节点，在一些出口节点上，仍然通过了202.97开头的节点，可以判断为CN2 GT线路。</li>\n<li>路由的跳数相对较少，并且经过了59.43..开头的节点，而并没有经过202.97开头的节点，此承载网络类型为CN2 GIA线路。<h1 id=\"CN2-VPS-是否一定比普通-163-承载网络的-VPS-更快呢\"><a href=\"#CN2-VPS-是否一定比普通-163-承载网络的-VPS-更快呢\" class=\"headerlink\" title=\"CN2 VPS 是否一定比普通 163 承载网络的 VPS 更快呢?\"></a>CN2 VPS 是否一定比普通 163 承载网络的 VPS 更快呢?</h1>CN2决定了网络质量会优于普通163承载网络，但也不一定，除了承载网络之外，机房的地理位置也很重要。<h1 id=\"单向-CN2-与双向-CN2\"><a href=\"#单向-CN2-与双向-CN2\" class=\"headerlink\" title=\"单向 CN2 与双向 CN2\"></a>单向 CN2 与双向 CN2</h1>CN2除了线路分为两种类型，购买时，还得注意CN2是双向还是单向。所为双向，顾名思义，去程的路由节点和回程的路由节点，都使用了CN2的承载网络。而单向CN2，一般都是去程CN2，回程普通电信线路，在速度上，会略逊于双向CN2。</li>\n</ul>\n"},{"title":"JavaScript 中的 sort()","_content":"\n# sort()\n\n> sort() 方法用原地算法对数组的元素进行排序，并返回数组。排序算法现在是稳定的。默认排序顺序是根据字符串 Unicode 码点。\n\n样例:\n\n    var months = ['March', 'Jan', 'Feb', 'Dec'];\n    months.sort();\n    console.log(months);\n    // expected output: Array [\"Dec\", \"Feb\", \"Jan\", \"March\"]\n\n    var array1 = [1, 30, 4, 21, 100000];\n    array1.sort();\n    console.log(array1);\n    // expected output: Array [1, 100000, 21, 30, 4]\n\n## 语法\n\n    arr.sort([compareFunction])\n\n---\n\n### 参数\n\n#### compareFunction(firstEl,secondEl) (可选)\n\n##### fisrtEl\n\n第一个要比较的元素\n\n##### secondEl\n\n第二个要比较的元素\n\n### 返回值\n\n返回排序以后的算法,由于采用原地算法,不进行复制.\n\n## 描述\n\n如果没有指明 compareFunction ，那么元素会按照转换为的字符串的诸个字符的 Unicode 位点进行排序。例如 \"Banana\" 会被排列到 \"cherry\" 之前。当数字按由小到大排序时，9 出现在 80 之前，但因为（没有指明 compareFunction），比较的数字会先被转换为字符串，所以在 Unicode 顺序上 \"80\" 要比 \"9\" 要靠前。\n\n如果指明了 compareFunction ，那么数组会按照调用该函数的返回值排序。即 a 和 b 是两个将要被比较的元素：\n\n- 如果 compareFunction(a, b) 小于 0 ，那么 a 会被排列到 b 之前；\n- 如果 compareFunction(a, b) 等于 0 ， a 和 b 的相对位置不变。备注： ECMAScript 标准并不保证这一行为，而且也不是所有浏览器都会遵守（例如 Mozilla 在 2003 年之前的版本）；\n- 如果 compareFunction(a, b) 大于 0 ， b 会被排列到 a 之前。\n- compareFunction(a, b) 必须总是对相同的输入返回相同的比较结果，否则排序的结果将是不确定的。\n\n        function compare(a, b) {\n        if (a < b ) {           // 按某种排序标准进行比较, a 小于 b\n            return -1;\n        }\n        if (a > b ) {\n            return 1;\n        }\n        // a must be equal to b\n        return 0;\n        }\n\n## 使用\n\n###sort()方法可以使用函数表达式方便地表示\n\n    var numbers = [4, 2, 5, 1, 3];\n    numbers.sort((a, b) => a - b);\n    console.log(numbers);\n\n    // [1, 2, 3, 4, 5]\n\n###对象可以按照属性排序\n\n    var items = [\n    { name: 'Edward', value: 21 },\n    { name: 'Sharpe', value: 37 },\n    { name: 'And', value: 45 },\n    { name: 'The', value: -12 },\n    { name: 'Magnetic' },\n    { name: 'Zeros', value: 37 }\n    ];\n\n    // sort by value\n    items.sort(function (a, b) {\n    return (a.value - b.value)\n    });\n\n    // sort by name\n    items.sort(function(a, b) {\n    var nameA = a.name.toUpperCase(); // ignore upper and lowercase\n    var nameB = b.name.toUpperCase(); // ignore upper and lowercase\n    if (nameA < nameB) {\n        return -1;\n    }\n    if (nameA > nameB) {\n        return 1;\n    }\n\n\n    // names must be equal\n\n    return 0;\n    });\n\n###按照指定的顺序排序\n\n    sortList:[\"事业编制\",\"企业编制\",\"二批企聘\"];\n    list:[{type:\"企业编制\",number:12344}\n    ,{type:\"二批企聘\",number:52344},\n    {type:\"事业编制\",number:8567244}]\n    list.sort((a,b)=>{\n        return sortList.indexOf(a.type)-sortList.indexOf(b.type)\n    })\n    // [{type:\"事业编制\",number:8567244},{type:\"企业编制\",number:12344},{type:\"二批企聘\",number:52344}]\n\n\n\n","source":"_posts/2019.05.24.sort.md","raw":"---\ntitle: JavaScript 中的 sort()\ntags: [JavaScript]\ncategories: 随笔\n---\n\n# sort()\n\n> sort() 方法用原地算法对数组的元素进行排序，并返回数组。排序算法现在是稳定的。默认排序顺序是根据字符串 Unicode 码点。\n\n样例:\n\n    var months = ['March', 'Jan', 'Feb', 'Dec'];\n    months.sort();\n    console.log(months);\n    // expected output: Array [\"Dec\", \"Feb\", \"Jan\", \"March\"]\n\n    var array1 = [1, 30, 4, 21, 100000];\n    array1.sort();\n    console.log(array1);\n    // expected output: Array [1, 100000, 21, 30, 4]\n\n## 语法\n\n    arr.sort([compareFunction])\n\n---\n\n### 参数\n\n#### compareFunction(firstEl,secondEl) (可选)\n\n##### fisrtEl\n\n第一个要比较的元素\n\n##### secondEl\n\n第二个要比较的元素\n\n### 返回值\n\n返回排序以后的算法,由于采用原地算法,不进行复制.\n\n## 描述\n\n如果没有指明 compareFunction ，那么元素会按照转换为的字符串的诸个字符的 Unicode 位点进行排序。例如 \"Banana\" 会被排列到 \"cherry\" 之前。当数字按由小到大排序时，9 出现在 80 之前，但因为（没有指明 compareFunction），比较的数字会先被转换为字符串，所以在 Unicode 顺序上 \"80\" 要比 \"9\" 要靠前。\n\n如果指明了 compareFunction ，那么数组会按照调用该函数的返回值排序。即 a 和 b 是两个将要被比较的元素：\n\n- 如果 compareFunction(a, b) 小于 0 ，那么 a 会被排列到 b 之前；\n- 如果 compareFunction(a, b) 等于 0 ， a 和 b 的相对位置不变。备注： ECMAScript 标准并不保证这一行为，而且也不是所有浏览器都会遵守（例如 Mozilla 在 2003 年之前的版本）；\n- 如果 compareFunction(a, b) 大于 0 ， b 会被排列到 a 之前。\n- compareFunction(a, b) 必须总是对相同的输入返回相同的比较结果，否则排序的结果将是不确定的。\n\n        function compare(a, b) {\n        if (a < b ) {           // 按某种排序标准进行比较, a 小于 b\n            return -1;\n        }\n        if (a > b ) {\n            return 1;\n        }\n        // a must be equal to b\n        return 0;\n        }\n\n## 使用\n\n###sort()方法可以使用函数表达式方便地表示\n\n    var numbers = [4, 2, 5, 1, 3];\n    numbers.sort((a, b) => a - b);\n    console.log(numbers);\n\n    // [1, 2, 3, 4, 5]\n\n###对象可以按照属性排序\n\n    var items = [\n    { name: 'Edward', value: 21 },\n    { name: 'Sharpe', value: 37 },\n    { name: 'And', value: 45 },\n    { name: 'The', value: -12 },\n    { name: 'Magnetic' },\n    { name: 'Zeros', value: 37 }\n    ];\n\n    // sort by value\n    items.sort(function (a, b) {\n    return (a.value - b.value)\n    });\n\n    // sort by name\n    items.sort(function(a, b) {\n    var nameA = a.name.toUpperCase(); // ignore upper and lowercase\n    var nameB = b.name.toUpperCase(); // ignore upper and lowercase\n    if (nameA < nameB) {\n        return -1;\n    }\n    if (nameA > nameB) {\n        return 1;\n    }\n\n\n    // names must be equal\n\n    return 0;\n    });\n\n###按照指定的顺序排序\n\n    sortList:[\"事业编制\",\"企业编制\",\"二批企聘\"];\n    list:[{type:\"企业编制\",number:12344}\n    ,{type:\"二批企聘\",number:52344},\n    {type:\"事业编制\",number:8567244}]\n    list.sort((a,b)=>{\n        return sortList.indexOf(a.type)-sortList.indexOf(b.type)\n    })\n    // [{type:\"事业编制\",number:8567244},{type:\"企业编制\",number:12344},{type:\"二批企聘\",number:52344}]\n\n\n\n","slug":"2019.05.24.sort","published":1,"date":"2019-05-24T14:49:38.730Z","updated":"2019-05-24T16:17:15.274Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwvh259j002nw39zkc9g8pyj","content":"<h1 id=\"sort\"><a href=\"#sort\" class=\"headerlink\" title=\"sort()\"></a>sort()</h1><blockquote>\n<p>sort() 方法用原地算法对数组的元素进行排序，并返回数组。排序算法现在是稳定的。默认排序顺序是根据字符串 Unicode 码点。</p>\n</blockquote>\n<p>样例:</p>\n<pre><code>var months = [&apos;March&apos;, &apos;Jan&apos;, &apos;Feb&apos;, &apos;Dec&apos;];\nmonths.sort();\nconsole.log(months);\n// expected output: Array [&quot;Dec&quot;, &quot;Feb&quot;, &quot;Jan&quot;, &quot;March&quot;]\n\nvar array1 = [1, 30, 4, 21, 100000];\narray1.sort();\nconsole.log(array1);\n// expected output: Array [1, 100000, 21, 30, 4]\n</code></pre><h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><pre><code>arr.sort([compareFunction])\n</code></pre><hr>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><h4 id=\"compareFunction-firstEl-secondEl-可选\"><a href=\"#compareFunction-firstEl-secondEl-可选\" class=\"headerlink\" title=\"compareFunction(firstEl,secondEl) (可选)\"></a>compareFunction(firstEl,secondEl) (可选)</h4><h5 id=\"fisrtEl\"><a href=\"#fisrtEl\" class=\"headerlink\" title=\"fisrtEl\"></a>fisrtEl</h5><p>第一个要比较的元素</p>\n<h5 id=\"secondEl\"><a href=\"#secondEl\" class=\"headerlink\" title=\"secondEl\"></a>secondEl</h5><p>第二个要比较的元素</p>\n<h3 id=\"返回值\"><a href=\"#返回值\" class=\"headerlink\" title=\"返回值\"></a>返回值</h3><p>返回排序以后的算法,由于采用原地算法,不进行复制.</p>\n<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><p>如果没有指明 compareFunction ，那么元素会按照转换为的字符串的诸个字符的 Unicode 位点进行排序。例如 “Banana” 会被排列到 “cherry” 之前。当数字按由小到大排序时，9 出现在 80 之前，但因为（没有指明 compareFunction），比较的数字会先被转换为字符串，所以在 Unicode 顺序上 “80” 要比 “9” 要靠前。</p>\n<p>如果指明了 compareFunction ，那么数组会按照调用该函数的返回值排序。即 a 和 b 是两个将要被比较的元素：</p>\n<ul>\n<li>如果 compareFunction(a, b) 小于 0 ，那么 a 会被排列到 b 之前；</li>\n<li>如果 compareFunction(a, b) 等于 0 ， a 和 b 的相对位置不变。备注： ECMAScript 标准并不保证这一行为，而且也不是所有浏览器都会遵守（例如 Mozilla 在 2003 年之前的版本）；</li>\n<li>如果 compareFunction(a, b) 大于 0 ， b 会被排列到 a 之前。</li>\n<li><p>compareFunction(a, b) 必须总是对相同的输入返回相同的比较结果，否则排序的结果将是不确定的。</p>\n<pre><code>function compare(a, b) {\nif (a &lt; b ) {           // 按某种排序标准进行比较, a 小于 b\n    return -1;\n}\nif (a &gt; b ) {\n    return 1;\n}\n// a must be equal to b\nreturn 0;\n}\n</code></pre></li>\n</ul>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>###sort()方法可以使用函数表达式方便地表示</p>\n<pre><code>var numbers = [4, 2, 5, 1, 3];\nnumbers.sort((a, b) =&gt; a - b);\nconsole.log(numbers);\n\n// [1, 2, 3, 4, 5]\n</code></pre><p>###对象可以按照属性排序</p>\n<pre><code>var items = [\n{ name: &apos;Edward&apos;, value: 21 },\n{ name: &apos;Sharpe&apos;, value: 37 },\n{ name: &apos;And&apos;, value: 45 },\n{ name: &apos;The&apos;, value: -12 },\n{ name: &apos;Magnetic&apos; },\n{ name: &apos;Zeros&apos;, value: 37 }\n];\n\n// sort by value\nitems.sort(function (a, b) {\nreturn (a.value - b.value)\n});\n\n// sort by name\nitems.sort(function(a, b) {\nvar nameA = a.name.toUpperCase(); // ignore upper and lowercase\nvar nameB = b.name.toUpperCase(); // ignore upper and lowercase\nif (nameA &lt; nameB) {\n    return -1;\n}\nif (nameA &gt; nameB) {\n    return 1;\n}\n\n\n// names must be equal\n\nreturn 0;\n});\n</code></pre><p>###按照指定的顺序排序</p>\n<pre><code>sortList:[&quot;事业编制&quot;,&quot;企业编制&quot;,&quot;二批企聘&quot;];\nlist:[{type:&quot;企业编制&quot;,number:12344}\n,{type:&quot;二批企聘&quot;,number:52344},\n{type:&quot;事业编制&quot;,number:8567244}]\nlist.sort((a,b)=&gt;{\n    return sortList.indexOf(a.type)-sortList.indexOf(b.type)\n})\n// [{type:&quot;事业编制&quot;,number:8567244},{type:&quot;企业编制&quot;,number:12344},{type:&quot;二批企聘&quot;,number:52344}]\n</code></pre>","excerpt":"","more":"<h1 id=\"sort\"><a href=\"#sort\" class=\"headerlink\" title=\"sort()\"></a>sort()</h1><blockquote>\n<p>sort() 方法用原地算法对数组的元素进行排序，并返回数组。排序算法现在是稳定的。默认排序顺序是根据字符串 Unicode 码点。</p>\n</blockquote>\n<p>样例:</p>\n<pre><code>var months = [&apos;March&apos;, &apos;Jan&apos;, &apos;Feb&apos;, &apos;Dec&apos;];\nmonths.sort();\nconsole.log(months);\n// expected output: Array [&quot;Dec&quot;, &quot;Feb&quot;, &quot;Jan&quot;, &quot;March&quot;]\n\nvar array1 = [1, 30, 4, 21, 100000];\narray1.sort();\nconsole.log(array1);\n// expected output: Array [1, 100000, 21, 30, 4]\n</code></pre><h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><pre><code>arr.sort([compareFunction])\n</code></pre><hr>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><h4 id=\"compareFunction-firstEl-secondEl-可选\"><a href=\"#compareFunction-firstEl-secondEl-可选\" class=\"headerlink\" title=\"compareFunction(firstEl,secondEl) (可选)\"></a>compareFunction(firstEl,secondEl) (可选)</h4><h5 id=\"fisrtEl\"><a href=\"#fisrtEl\" class=\"headerlink\" title=\"fisrtEl\"></a>fisrtEl</h5><p>第一个要比较的元素</p>\n<h5 id=\"secondEl\"><a href=\"#secondEl\" class=\"headerlink\" title=\"secondEl\"></a>secondEl</h5><p>第二个要比较的元素</p>\n<h3 id=\"返回值\"><a href=\"#返回值\" class=\"headerlink\" title=\"返回值\"></a>返回值</h3><p>返回排序以后的算法,由于采用原地算法,不进行复制.</p>\n<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><p>如果没有指明 compareFunction ，那么元素会按照转换为的字符串的诸个字符的 Unicode 位点进行排序。例如 “Banana” 会被排列到 “cherry” 之前。当数字按由小到大排序时，9 出现在 80 之前，但因为（没有指明 compareFunction），比较的数字会先被转换为字符串，所以在 Unicode 顺序上 “80” 要比 “9” 要靠前。</p>\n<p>如果指明了 compareFunction ，那么数组会按照调用该函数的返回值排序。即 a 和 b 是两个将要被比较的元素：</p>\n<ul>\n<li>如果 compareFunction(a, b) 小于 0 ，那么 a 会被排列到 b 之前；</li>\n<li>如果 compareFunction(a, b) 等于 0 ， a 和 b 的相对位置不变。备注： ECMAScript 标准并不保证这一行为，而且也不是所有浏览器都会遵守（例如 Mozilla 在 2003 年之前的版本）；</li>\n<li>如果 compareFunction(a, b) 大于 0 ， b 会被排列到 a 之前。</li>\n<li><p>compareFunction(a, b) 必须总是对相同的输入返回相同的比较结果，否则排序的结果将是不确定的。</p>\n<pre><code>function compare(a, b) {\nif (a &lt; b ) {           // 按某种排序标准进行比较, a 小于 b\n    return -1;\n}\nif (a &gt; b ) {\n    return 1;\n}\n// a must be equal to b\nreturn 0;\n}\n</code></pre></li>\n</ul>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>###sort()方法可以使用函数表达式方便地表示</p>\n<pre><code>var numbers = [4, 2, 5, 1, 3];\nnumbers.sort((a, b) =&gt; a - b);\nconsole.log(numbers);\n\n// [1, 2, 3, 4, 5]\n</code></pre><p>###对象可以按照属性排序</p>\n<pre><code>var items = [\n{ name: &apos;Edward&apos;, value: 21 },\n{ name: &apos;Sharpe&apos;, value: 37 },\n{ name: &apos;And&apos;, value: 45 },\n{ name: &apos;The&apos;, value: -12 },\n{ name: &apos;Magnetic&apos; },\n{ name: &apos;Zeros&apos;, value: 37 }\n];\n\n// sort by value\nitems.sort(function (a, b) {\nreturn (a.value - b.value)\n});\n\n// sort by name\nitems.sort(function(a, b) {\nvar nameA = a.name.toUpperCase(); // ignore upper and lowercase\nvar nameB = b.name.toUpperCase(); // ignore upper and lowercase\nif (nameA &lt; nameB) {\n    return -1;\n}\nif (nameA &gt; nameB) {\n    return 1;\n}\n\n\n// names must be equal\n\nreturn 0;\n});\n</code></pre><p>###按照指定的顺序排序</p>\n<pre><code>sortList:[&quot;事业编制&quot;,&quot;企业编制&quot;,&quot;二批企聘&quot;];\nlist:[{type:&quot;企业编制&quot;,number:12344}\n,{type:&quot;二批企聘&quot;,number:52344},\n{type:&quot;事业编制&quot;,number:8567244}]\nlist.sort((a,b)=&gt;{\n    return sortList.indexOf(a.type)-sortList.indexOf(b.type)\n})\n// [{type:&quot;事业编制&quot;,number:8567244},{type:&quot;企业编制&quot;,number:12344},{type:&quot;二批企聘&quot;,number:52344}]\n</code></pre>"},{"title":"玩转彩色 mac terminal","_content":"# mac 彩色控制台\nmac 的彩色控制台基于两个方面实现:\n* 字符\n* 渐变\n## 字符 == > FIGlet\n>FIGlet」是基于ASCII字符组成的字符画，可以根据不同的字符类型来生成不一样的效果, 目前应该支持314种\n\n效果:\n\n        _____          _      _    _ _             _ \n        / ____|        | |    | |  | | |           | |\n        | |     ___   __| | ___| |__| | |_ _ __ ___ | |\n        | |    / _ \\ / _` |/ _ \\  __  | __| '_ ` _ \\| |\n        | |___| (_) | (_| |  __/ |  | | |_| | | | | | |\n        \\_____\\___/ \\__,_|\\___|_|  |_|\\__|_| |_| |_|_|\n### 安装\n    npm install -g figlet-cli\n### 使用文档参数\n* font\n>字符类型,默认为 stardand\n* horizontalLayout\n>水平布局 默认值： default\n\n* verticalLayout\n>垂直布局 默认值： default\n\n### 控制台使用\n* 基本命令\n\n        -l, --list           List all the available fonts\n        -f, --font           A string value that indicates the FIGlet font to use\n        --horizontal-layout  A string value that indicates the horizontal layout to use\n        --vertical-layout    A string value that indicates the vertical layout to use\n\n* 简单执行\n\n        figlet \"TREASURE\"\n\n效果:\n\n\n    _____ ____  _____    _    ____  _   _ ____  _____\n    |_   _|  _ \\| ____|  / \\  / ___|| | | |  _ \\| ____|\n    | | | |_) |  _|   / _ \\ \\___ \\| | | | |_) |  _|\n    | | |  _ <| |___ / ___ \\ ___) | |_| |  _ <| |___\n    |_| |_| \\_\\_____/_/   \\_\\____/ \\___/|_| \\_\\_____|\n\n\n\n* 使用字体\n\n        figlet -f \"Def Leppard\"  \"codehtml\" \n\n\n                            ;\n                    :      ED.\n                .,    t#,     E#Wi                 ,;\n            ,Wt   ;##W.    E###G.             f#i .    .                                           i\n            i#D.  :#L:WE    E#fD#W;          .E#t  Di   Dt    GEEEEEEEL        ..       :          LE\n            f#f   .KG  ,#D   E#t t##L        i#W,   E#i  E#i   ,;;L#K;;.       ,W,     .Et         L#E\n        .D#i    EE    ;#f  E#t  .E#K,     L#D.    E#t  E#t      t#E         t##,    ,W#t        G#W.\n        :KW,    f#.     t#i E#t    j##f  :K#Wfff;  E#t  E#t      t#E        L###,   j###t       D#K.\n        t#f     :#G     GK  E#t    :E#K: i##WLLLLt E########f.   t#E      .E#j##,  G#fE#t      E#K.\n        ;#G     ;#L   LW.  E#t   t##L    .E#L     E#j..K#j...   t#E     ;WW; ##,:K#i E#t    .E#E.\n            :KE.    t#f f#:   E#t .D#W;       f#E:   E#t  E#t      t#E    j#E.  ##f#W,  E#t   .K#E\n            .DW:    f#D#;    E#tiW#G.         ,WW;  E#t  E#t      t#E  .D#L    ###K:   E#t  .K#D\n            L#,    G#t     E#K##i            .D#; f#t  f#t      t#E :K#t     ##D.    E#t .W#G\n                jt     t      E##D.               tt  ii   ii       fE ...      #G      .. :W##########Wt\n                            E#t                                    :          j          :,,,,,,,,,,,,,.\n                            L:\n\n## 渐变色 == > lolcat\n\n### 安装\n            get isntall lolcat\n\n![WX20190525-165006@2x](https://i.loli.net/2019/05/25/5ce901cc5be9434532.png)\n\n\n## figlet 与 lolcat 结合\n        figlet \"MOTHER FUCKER\" | lolcat\n![WX20190525-165641@2x](https://i.loli.net/2019/05/25/5ce90354de96043522.png)\n\n## 测试不同的 figlet 字体 \n可以访问[这个网站](http://patorjk.com/software/taag/#p=display&h=1&v=1&f=Alpha&t=codehtml)\n\n\n","source":"_posts/2019.05.25.colorfulMacTerminal.md","raw":"---\ntitle: 玩转彩色 mac terminal\ntags: [mac]\ncategories: 随笔\n---\n# mac 彩色控制台\nmac 的彩色控制台基于两个方面实现:\n* 字符\n* 渐变\n## 字符 == > FIGlet\n>FIGlet」是基于ASCII字符组成的字符画，可以根据不同的字符类型来生成不一样的效果, 目前应该支持314种\n\n效果:\n\n        _____          _      _    _ _             _ \n        / ____|        | |    | |  | | |           | |\n        | |     ___   __| | ___| |__| | |_ _ __ ___ | |\n        | |    / _ \\ / _` |/ _ \\  __  | __| '_ ` _ \\| |\n        | |___| (_) | (_| |  __/ |  | | |_| | | | | | |\n        \\_____\\___/ \\__,_|\\___|_|  |_|\\__|_| |_| |_|_|\n### 安装\n    npm install -g figlet-cli\n### 使用文档参数\n* font\n>字符类型,默认为 stardand\n* horizontalLayout\n>水平布局 默认值： default\n\n* verticalLayout\n>垂直布局 默认值： default\n\n### 控制台使用\n* 基本命令\n\n        -l, --list           List all the available fonts\n        -f, --font           A string value that indicates the FIGlet font to use\n        --horizontal-layout  A string value that indicates the horizontal layout to use\n        --vertical-layout    A string value that indicates the vertical layout to use\n\n* 简单执行\n\n        figlet \"TREASURE\"\n\n效果:\n\n\n    _____ ____  _____    _    ____  _   _ ____  _____\n    |_   _|  _ \\| ____|  / \\  / ___|| | | |  _ \\| ____|\n    | | | |_) |  _|   / _ \\ \\___ \\| | | | |_) |  _|\n    | | |  _ <| |___ / ___ \\ ___) | |_| |  _ <| |___\n    |_| |_| \\_\\_____/_/   \\_\\____/ \\___/|_| \\_\\_____|\n\n\n\n* 使用字体\n\n        figlet -f \"Def Leppard\"  \"codehtml\" \n\n\n                            ;\n                    :      ED.\n                .,    t#,     E#Wi                 ,;\n            ,Wt   ;##W.    E###G.             f#i .    .                                           i\n            i#D.  :#L:WE    E#fD#W;          .E#t  Di   Dt    GEEEEEEEL        ..       :          LE\n            f#f   .KG  ,#D   E#t t##L        i#W,   E#i  E#i   ,;;L#K;;.       ,W,     .Et         L#E\n        .D#i    EE    ;#f  E#t  .E#K,     L#D.    E#t  E#t      t#E         t##,    ,W#t        G#W.\n        :KW,    f#.     t#i E#t    j##f  :K#Wfff;  E#t  E#t      t#E        L###,   j###t       D#K.\n        t#f     :#G     GK  E#t    :E#K: i##WLLLLt E########f.   t#E      .E#j##,  G#fE#t      E#K.\n        ;#G     ;#L   LW.  E#t   t##L    .E#L     E#j..K#j...   t#E     ;WW; ##,:K#i E#t    .E#E.\n            :KE.    t#f f#:   E#t .D#W;       f#E:   E#t  E#t      t#E    j#E.  ##f#W,  E#t   .K#E\n            .DW:    f#D#;    E#tiW#G.         ,WW;  E#t  E#t      t#E  .D#L    ###K:   E#t  .K#D\n            L#,    G#t     E#K##i            .D#; f#t  f#t      t#E :K#t     ##D.    E#t .W#G\n                jt     t      E##D.               tt  ii   ii       fE ...      #G      .. :W##########Wt\n                            E#t                                    :          j          :,,,,,,,,,,,,,.\n                            L:\n\n## 渐变色 == > lolcat\n\n### 安装\n            get isntall lolcat\n\n![WX20190525-165006@2x](https://i.loli.net/2019/05/25/5ce901cc5be9434532.png)\n\n\n## figlet 与 lolcat 结合\n        figlet \"MOTHER FUCKER\" | lolcat\n![WX20190525-165641@2x](https://i.loli.net/2019/05/25/5ce90354de96043522.png)\n\n## 测试不同的 figlet 字体 \n可以访问[这个网站](http://patorjk.com/software/taag/#p=display&h=1&v=1&f=Alpha&t=codehtml)\n\n\n","slug":"2019.05.25.colorfulMacTerminal","published":1,"date":"2019-05-25T08:36:01.370Z","updated":"2019-05-28T07:05:38.899Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwvh259k002pw39zwlsqpdjl","content":"<h1 id=\"mac-彩色控制台\"><a href=\"#mac-彩色控制台\" class=\"headerlink\" title=\"mac 彩色控制台\"></a>mac 彩色控制台</h1><p>mac 的彩色控制台基于两个方面实现:</p>\n<ul>\n<li>字符</li>\n<li>渐变<h2 id=\"字符-gt-FIGlet\"><a href=\"#字符-gt-FIGlet\" class=\"headerlink\" title=\"字符 == &gt; FIGlet\"></a>字符 == &gt; FIGlet</h2><blockquote>\n<p>FIGlet」是基于ASCII字符组成的字符画，可以根据不同的字符类型来生成不一样的效果, 目前应该支持314种</p>\n</blockquote>\n</li>\n</ul>\n<p>效果:</p>\n<pre><code>_____          _      _    _ _             _ \n/ ____|        | |    | |  | | |           | |\n| |     ___   __| | ___| |__| | |_ _ __ ___ | |\n| |    / _ \\ / _` |/ _ \\  __  | __| &apos;_ ` _ \\| |\n| |___| (_) | (_| |  __/ |  | | |_| | | | | | |\n\\_____\\___/ \\__,_|\\___|_|  |_|\\__|_| |_| |_|_|\n</code></pre><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><pre><code>npm install -g figlet-cli\n</code></pre><h3 id=\"使用文档参数\"><a href=\"#使用文档参数\" class=\"headerlink\" title=\"使用文档参数\"></a>使用文档参数</h3><ul>\n<li>font<blockquote>\n<p>字符类型,默认为 stardand</p>\n</blockquote>\n</li>\n<li><p>horizontalLayout</p>\n<blockquote>\n<p>水平布局 默认值： default</p>\n</blockquote>\n</li>\n<li><p>verticalLayout</p>\n<blockquote>\n<p>垂直布局 默认值： default</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"控制台使用\"><a href=\"#控制台使用\" class=\"headerlink\" title=\"控制台使用\"></a>控制台使用</h3><ul>\n<li><p>基本命令</p>\n<pre><code>-l, --list           List all the available fonts\n-f, --font           A string value that indicates the FIGlet font to use\n--horizontal-layout  A string value that indicates the horizontal layout to use\n--vertical-layout    A string value that indicates the vertical layout to use\n</code></pre></li>\n<li><p>简单执行</p>\n<pre><code>figlet &quot;TREASURE&quot;\n</code></pre></li>\n</ul>\n<p>效果:</p>\n<pre><code>_____ ____  _____    _    ____  _   _ ____  _____\n|_   _|  _ \\| ____|  / \\  / ___|| | | |  _ \\| ____|\n| | | |_) |  _|   / _ \\ \\___ \\| | | | |_) |  _|\n| | |  _ &lt;| |___ / ___ \\ ___) | |_| |  _ &lt;| |___\n|_| |_| \\_\\_____/_/   \\_\\____/ \\___/|_| \\_\\_____|\n</code></pre><ul>\n<li><p>使用字体</p>\n<pre><code>figlet -f &quot;Def Leppard&quot;  &quot;codehtml&quot; \n</code></pre></li>\n</ul>\n<pre><code>                    ;\n            :      ED.\n        .,    t#,     E#Wi                 ,;\n    ,Wt   ;##W.    E###G.             f#i .    .                                           i\n    i#D.  :#L:WE    E#fD#W;          .E#t  Di   Dt    GEEEEEEEL        ..       :          LE\n    f#f   .KG  ,#D   E#t t##L        i#W,   E#i  E#i   ,;;L#K;;.       ,W,     .Et         L#E\n.D#i    EE    ;#f  E#t  .E#K,     L#D.    E#t  E#t      t#E         t##,    ,W#t        G#W.\n:KW,    f#.     t#i E#t    j##f  :K#Wfff;  E#t  E#t      t#E        L###,   j###t       D#K.\nt#f     :#G     GK  E#t    :E#K: i##WLLLLt E########f.   t#E      .E#j##,  G#fE#t      E#K.\n;#G     ;#L   LW.  E#t   t##L    .E#L     E#j..K#j...   t#E     ;WW; ##,:K#i E#t    .E#E.\n    :KE.    t#f f#:   E#t .D#W;       f#E:   E#t  E#t      t#E    j#E.  ##f#W,  E#t   .K#E\n    .DW:    f#D#;    E#tiW#G.         ,WW;  E#t  E#t      t#E  .D#L    ###K:   E#t  .K#D\n    L#,    G#t     E#K##i            .D#; f#t  f#t      t#E :K#t     ##D.    E#t .W#G\n        jt     t      E##D.               tt  ii   ii       fE ...      #G      .. :W##########Wt\n                    E#t                                    :          j          :,,,,,,,,,,,,,.\n                    L:\n</code></pre><h2 id=\"渐变色-gt-lolcat\"><a href=\"#渐变色-gt-lolcat\" class=\"headerlink\" title=\"渐变色 == &gt; lolcat\"></a>渐变色 == &gt; lolcat</h2><h3 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h3><pre><code>get isntall lolcat\n</code></pre><p><img src=\"https://i.loli.net/2019/05/25/5ce901cc5be9434532.png\" alt=\"WX20190525-165006@2x\"></p>\n<h2 id=\"figlet-与-lolcat-结合\"><a href=\"#figlet-与-lolcat-结合\" class=\"headerlink\" title=\"figlet 与 lolcat 结合\"></a>figlet 与 lolcat 结合</h2><pre><code>figlet &quot;MOTHER FUCKER&quot; | lolcat\n</code></pre><p><img src=\"https://i.loli.net/2019/05/25/5ce90354de96043522.png\" alt=\"WX20190525-165641@2x\"></p>\n<h2 id=\"测试不同的-figlet-字体\"><a href=\"#测试不同的-figlet-字体\" class=\"headerlink\" title=\"测试不同的 figlet 字体\"></a>测试不同的 figlet 字体</h2><p>可以访问<a href=\"http://patorjk.com/software/taag/#p=display&amp;h=1&amp;v=1&amp;f=Alpha&amp;t=codehtml\" target=\"_blank\" rel=\"external\">这个网站</a></p>\n","excerpt":"","more":"<h1 id=\"mac-彩色控制台\"><a href=\"#mac-彩色控制台\" class=\"headerlink\" title=\"mac 彩色控制台\"></a>mac 彩色控制台</h1><p>mac 的彩色控制台基于两个方面实现:</p>\n<ul>\n<li>字符</li>\n<li>渐变<h2 id=\"字符-gt-FIGlet\"><a href=\"#字符-gt-FIGlet\" class=\"headerlink\" title=\"字符 == &gt; FIGlet\"></a>字符 == &gt; FIGlet</h2><blockquote>\n<p>FIGlet」是基于ASCII字符组成的字符画，可以根据不同的字符类型来生成不一样的效果, 目前应该支持314种</p>\n</blockquote>\n</li>\n</ul>\n<p>效果:</p>\n<pre><code>_____          _      _    _ _             _ \n/ ____|        | |    | |  | | |           | |\n| |     ___   __| | ___| |__| | |_ _ __ ___ | |\n| |    / _ \\ / _` |/ _ \\  __  | __| &apos;_ ` _ \\| |\n| |___| (_) | (_| |  __/ |  | | |_| | | | | | |\n\\_____\\___/ \\__,_|\\___|_|  |_|\\__|_| |_| |_|_|\n</code></pre><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><pre><code>npm install -g figlet-cli\n</code></pre><h3 id=\"使用文档参数\"><a href=\"#使用文档参数\" class=\"headerlink\" title=\"使用文档参数\"></a>使用文档参数</h3><ul>\n<li>font<blockquote>\n<p>字符类型,默认为 stardand</p>\n</blockquote>\n</li>\n<li><p>horizontalLayout</p>\n<blockquote>\n<p>水平布局 默认值： default</p>\n</blockquote>\n</li>\n<li><p>verticalLayout</p>\n<blockquote>\n<p>垂直布局 默认值： default</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"控制台使用\"><a href=\"#控制台使用\" class=\"headerlink\" title=\"控制台使用\"></a>控制台使用</h3><ul>\n<li><p>基本命令</p>\n<pre><code>-l, --list           List all the available fonts\n-f, --font           A string value that indicates the FIGlet font to use\n--horizontal-layout  A string value that indicates the horizontal layout to use\n--vertical-layout    A string value that indicates the vertical layout to use\n</code></pre></li>\n<li><p>简单执行</p>\n<pre><code>figlet &quot;TREASURE&quot;\n</code></pre></li>\n</ul>\n<p>效果:</p>\n<pre><code>_____ ____  _____    _    ____  _   _ ____  _____\n|_   _|  _ \\| ____|  / \\  / ___|| | | |  _ \\| ____|\n| | | |_) |  _|   / _ \\ \\___ \\| | | | |_) |  _|\n| | |  _ &lt;| |___ / ___ \\ ___) | |_| |  _ &lt;| |___\n|_| |_| \\_\\_____/_/   \\_\\____/ \\___/|_| \\_\\_____|\n</code></pre><ul>\n<li><p>使用字体</p>\n<pre><code>figlet -f &quot;Def Leppard&quot;  &quot;codehtml&quot; \n</code></pre></li>\n</ul>\n<pre><code>                    ;\n            :      ED.\n        .,    t#,     E#Wi                 ,;\n    ,Wt   ;##W.    E###G.             f#i .    .                                           i\n    i#D.  :#L:WE    E#fD#W;          .E#t  Di   Dt    GEEEEEEEL        ..       :          LE\n    f#f   .KG  ,#D   E#t t##L        i#W,   E#i  E#i   ,;;L#K;;.       ,W,     .Et         L#E\n.D#i    EE    ;#f  E#t  .E#K,     L#D.    E#t  E#t      t#E         t##,    ,W#t        G#W.\n:KW,    f#.     t#i E#t    j##f  :K#Wfff;  E#t  E#t      t#E        L###,   j###t       D#K.\nt#f     :#G     GK  E#t    :E#K: i##WLLLLt E########f.   t#E      .E#j##,  G#fE#t      E#K.\n;#G     ;#L   LW.  E#t   t##L    .E#L     E#j..K#j...   t#E     ;WW; ##,:K#i E#t    .E#E.\n    :KE.    t#f f#:   E#t .D#W;       f#E:   E#t  E#t      t#E    j#E.  ##f#W,  E#t   .K#E\n    .DW:    f#D#;    E#tiW#G.         ,WW;  E#t  E#t      t#E  .D#L    ###K:   E#t  .K#D\n    L#,    G#t     E#K##i            .D#; f#t  f#t      t#E :K#t     ##D.    E#t .W#G\n        jt     t      E##D.               tt  ii   ii       fE ...      #G      .. :W##########Wt\n                    E#t                                    :          j          :,,,,,,,,,,,,,.\n                    L:\n</code></pre><h2 id=\"渐变色-gt-lolcat\"><a href=\"#渐变色-gt-lolcat\" class=\"headerlink\" title=\"渐变色 == &gt; lolcat\"></a>渐变色 == &gt; lolcat</h2><h3 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h3><pre><code>get isntall lolcat\n</code></pre><p><img src=\"https://i.loli.net/2019/05/25/5ce901cc5be9434532.png\" alt=\"WX20190525-165006@2x\"></p>\n<h2 id=\"figlet-与-lolcat-结合\"><a href=\"#figlet-与-lolcat-结合\" class=\"headerlink\" title=\"figlet 与 lolcat 结合\"></a>figlet 与 lolcat 结合</h2><pre><code>figlet &quot;MOTHER FUCKER&quot; | lolcat\n</code></pre><p><img src=\"https://i.loli.net/2019/05/25/5ce90354de96043522.png\" alt=\"WX20190525-165641@2x\"></p>\n<h2 id=\"测试不同的-figlet-字体\"><a href=\"#测试不同的-figlet-字体\" class=\"headerlink\" title=\"测试不同的 figlet 字体\"></a>测试不同的 figlet 字体</h2><p>可以访问<a href=\"http://patorjk.com/software/taag/#p=display&amp;h=1&amp;v=1&amp;f=Alpha&amp;t=codehtml\">这个网站</a></p>\n"},{"title":"在不同电脑上同步 vscode 的插件/设置","_content":"\n# 前言\n>Visual Studio Code(以下简称vsCode)现在已经渐渐成为前端开发的主力工具，我们在使用vscode Coding 时也一定会装很多插件。这篇文章提供了可以一键同步 vscode 设置/插件的方法.\n# 准备工作\n* setting sync 插件\n* github 账户\n# 开始!\n## 步骤 1==> 安装 `setting sync`插件\n\nsetting sync 快捷键:\n### windows\n上传： Shift + Alt + U (Sync: Update / Upload Settings)\n\n下载： Shift + Alt + D (Sync: Download Settings)\n### mac\n上传： Shift + option + U (Sync: Update / Upload Settings)\n\n下载： Shift + option + D (Sync: Download Settings)\n![WX20190529-132756@2x](https://i.loli.net/2019/05/29/5cee186a5788631404.png)\n## 步骤 2 ==> 生成 github token\n![WX20190529-132351@2x](https://i.loli.net/2019/05/29/5cee177815c7d59714.png)\n## 步骤 3 ==> 获取 gist ID\n在 vscode 中键入 `Shift + option + U`,并输入之前生成的 token,会生成一个gist id.\n在设置中搜索 `sync`获取 gist ID. \n![WX20190529-132609@2x](https://i.loli.net/2019/05/29/5cee18086757c68071.png)\n## 步骤 4 ==> 在另一台电脑上完成同步\n在新的电脑上安装 `setting sync`,键入`shift+ option+ U`,输入 gist ID,等待完成同步!\n","source":"_posts/2019.05.29.vscodesync.md","raw":"---\ntitle: 在不同电脑上同步 vscode 的插件/设置\ntags: [vscode]\ncategories: 随笔\n---\n\n# 前言\n>Visual Studio Code(以下简称vsCode)现在已经渐渐成为前端开发的主力工具，我们在使用vscode Coding 时也一定会装很多插件。这篇文章提供了可以一键同步 vscode 设置/插件的方法.\n# 准备工作\n* setting sync 插件\n* github 账户\n# 开始!\n## 步骤 1==> 安装 `setting sync`插件\n\nsetting sync 快捷键:\n### windows\n上传： Shift + Alt + U (Sync: Update / Upload Settings)\n\n下载： Shift + Alt + D (Sync: Download Settings)\n### mac\n上传： Shift + option + U (Sync: Update / Upload Settings)\n\n下载： Shift + option + D (Sync: Download Settings)\n![WX20190529-132756@2x](https://i.loli.net/2019/05/29/5cee186a5788631404.png)\n## 步骤 2 ==> 生成 github token\n![WX20190529-132351@2x](https://i.loli.net/2019/05/29/5cee177815c7d59714.png)\n## 步骤 3 ==> 获取 gist ID\n在 vscode 中键入 `Shift + option + U`,并输入之前生成的 token,会生成一个gist id.\n在设置中搜索 `sync`获取 gist ID. \n![WX20190529-132609@2x](https://i.loli.net/2019/05/29/5cee18086757c68071.png)\n## 步骤 4 ==> 在另一台电脑上完成同步\n在新的电脑上安装 `setting sync`,键入`shift+ option+ U`,输入 gist ID,等待完成同步!\n","slug":"2019.05.29.vscodesync","published":1,"date":"2019-05-29T04:53:42.907Z","updated":"2019-05-29T05:31:55.612Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwvh259l002tw39zpwejwoxh","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>Visual Studio Code(以下简称vsCode)现在已经渐渐成为前端开发的主力工具，我们在使用vscode Coding 时也一定会装很多插件。这篇文章提供了可以一键同步 vscode 设置/插件的方法.</p>\n<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><ul>\n<li>setting sync 插件</li>\n<li>github 账户<h1 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始!\"></a>开始!</h1><h2 id=\"步骤-1-gt-安装-setting-sync插件\"><a href=\"#步骤-1-gt-安装-setting-sync插件\" class=\"headerlink\" title=\"步骤 1==&gt; 安装 setting sync插件\"></a>步骤 1==&gt; 安装 <code>setting sync</code>插件</h2></li>\n</ul>\n</blockquote>\n<p>setting sync 快捷键:</p>\n<h3 id=\"windows\"><a href=\"#windows\" class=\"headerlink\" title=\"windows\"></a>windows</h3><p>上传： Shift + Alt + U (Sync: Update / Upload Settings)</p>\n<p>下载： Shift + Alt + D (Sync: Download Settings)</p>\n<h3 id=\"mac\"><a href=\"#mac\" class=\"headerlink\" title=\"mac\"></a>mac</h3><p>上传： Shift + option + U (Sync: Update / Upload Settings)</p>\n<p>下载： Shift + option + D (Sync: Download Settings)<br><img src=\"https://i.loli.net/2019/05/29/5cee186a5788631404.png\" alt=\"WX20190529-132756@2x\"></p>\n<h2 id=\"步骤-2-gt-生成-github-token\"><a href=\"#步骤-2-gt-生成-github-token\" class=\"headerlink\" title=\"步骤 2 ==&gt; 生成 github token\"></a>步骤 2 ==&gt; 生成 github token</h2><p><img src=\"https://i.loli.net/2019/05/29/5cee177815c7d59714.png\" alt=\"WX20190529-132351@2x\"></p>\n<h2 id=\"步骤-3-gt-获取-gist-ID\"><a href=\"#步骤-3-gt-获取-gist-ID\" class=\"headerlink\" title=\"步骤 3 ==&gt; 获取 gist ID\"></a>步骤 3 ==&gt; 获取 gist ID</h2><p>在 vscode 中键入 <code>Shift + option + U</code>,并输入之前生成的 token,会生成一个gist id.<br>在设置中搜索 <code>sync</code>获取 gist ID.<br><img src=\"https://i.loli.net/2019/05/29/5cee18086757c68071.png\" alt=\"WX20190529-132609@2x\"></p>\n<h2 id=\"步骤-4-gt-在另一台电脑上完成同步\"><a href=\"#步骤-4-gt-在另一台电脑上完成同步\" class=\"headerlink\" title=\"步骤 4 ==&gt; 在另一台电脑上完成同步\"></a>步骤 4 ==&gt; 在另一台电脑上完成同步</h2><p>在新的电脑上安装 <code>setting sync</code>,键入<code>shift+ option+ U</code>,输入 gist ID,等待完成同步!</p>\n","excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>Visual Studio Code(以下简称vsCode)现在已经渐渐成为前端开发的主力工具，我们在使用vscode Coding 时也一定会装很多插件。这篇文章提供了可以一键同步 vscode 设置/插件的方法.</p>\n<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><ul>\n<li>setting sync 插件</li>\n<li>github 账户<h1 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始!\"></a>开始!</h1><h2 id=\"步骤-1-gt-安装-setting-sync插件\"><a href=\"#步骤-1-gt-安装-setting-sync插件\" class=\"headerlink\" title=\"步骤 1==&gt; 安装 setting sync插件\"></a>步骤 1==&gt; 安装 <code>setting sync</code>插件</h2></li>\n</ul>\n</blockquote>\n<p>setting sync 快捷键:</p>\n<h3 id=\"windows\"><a href=\"#windows\" class=\"headerlink\" title=\"windows\"></a>windows</h3><p>上传： Shift + Alt + U (Sync: Update / Upload Settings)</p>\n<p>下载： Shift + Alt + D (Sync: Download Settings)</p>\n<h3 id=\"mac\"><a href=\"#mac\" class=\"headerlink\" title=\"mac\"></a>mac</h3><p>上传： Shift + option + U (Sync: Update / Upload Settings)</p>\n<p>下载： Shift + option + D (Sync: Download Settings)<br><img src=\"https://i.loli.net/2019/05/29/5cee186a5788631404.png\" alt=\"WX20190529-132756@2x\"></p>\n<h2 id=\"步骤-2-gt-生成-github-token\"><a href=\"#步骤-2-gt-生成-github-token\" class=\"headerlink\" title=\"步骤 2 ==&gt; 生成 github token\"></a>步骤 2 ==&gt; 生成 github token</h2><p><img src=\"https://i.loli.net/2019/05/29/5cee177815c7d59714.png\" alt=\"WX20190529-132351@2x\"></p>\n<h2 id=\"步骤-3-gt-获取-gist-ID\"><a href=\"#步骤-3-gt-获取-gist-ID\" class=\"headerlink\" title=\"步骤 3 ==&gt; 获取 gist ID\"></a>步骤 3 ==&gt; 获取 gist ID</h2><p>在 vscode 中键入 <code>Shift + option + U</code>,并输入之前生成的 token,会生成一个gist id.<br>在设置中搜索 <code>sync</code>获取 gist ID.<br><img src=\"https://i.loli.net/2019/05/29/5cee18086757c68071.png\" alt=\"WX20190529-132609@2x\"></p>\n<h2 id=\"步骤-4-gt-在另一台电脑上完成同步\"><a href=\"#步骤-4-gt-在另一台电脑上完成同步\" class=\"headerlink\" title=\"步骤 4 ==&gt; 在另一台电脑上完成同步\"></a>步骤 4 ==&gt; 在另一台电脑上完成同步</h2><p>在新的电脑上安装 <code>setting sync</code>,键入<code>shift+ option+ U</code>,输入 gist ID,等待完成同步!</p>\n"},{"title":"ASF的使用","_content":"#在 mac 上使用 asf\n**关于 ASF (ArchiSteamFarm)：**\n>ASF 是由 C# 編寫，能同時掛載多個 Steam 賬號的掛卡工具。其不像 Idle Master 那樣：同一時間只能為一個賬號掛卡，需要後台運行 Steam 客戶端，需啟動額外進程模擬『正在遊戲』狀態。ASF 不需要後台運行任何Steam 客戶端，不需要啟動額外進程，而且能為不限數目的 Steam 賬號同時掛卡。不僅如此，該軟件還能在服務器和其他非桌面電腦上運行，並擁有完整支持 Mono 的特性，這能讓其在 Windows、Linux 以及 OS X 等任何支持 Mono 的操作系統上運行。ASF 存在的基礎要歸功於 SteamKit2。\n\n[注] ArchiSteamFarm V3.0 以后的版本已经将 Mono 换成了 .Net Core。\n简单来说 ASF 就是一个假的 Steam 客户端，它通过“假装玩游戏”，让 Steam 以为你真的在玩某款游戏，从而获得 Steam 集换式卡牌。\n## ASF 的安装与使用\n### mac 使用 asf\n\n* 到[这里](https://github.com/JustArchiNET/ArchiSteamFarm/releases)下载 mac 客户端(mac 上需要安装 openssl,最好在 mac 上安装 xcode)\n\n\n* cd 到解压目录,然后赋予管理员权限:\n\n        chmod +x ./ArchiSteamFarm\n\n* 运行`./ArchiSteamFarm`或者直接双击`ArchiSteamFarm`\n\n## ASF 的配置\n\n 在 config 文件夹下添加 ASF.json/bot.json\nASF.json 文件是全局的配置文件,比较重要的参数如下:\n* “Blacklist”：不挂卡的游戏 (这里排除了所以带 VAC 的游戏)\n\n* “SteamOwnerID”：ASF 所有者的 SteamID；ASF 所有者可以使用全局指令 (例如：!exit、!restart、!update 等 )\n例如:\n\n        {\n            \"SteamOwnerID\": 76561198167718521\n        }\n\nbot.json 是单个 bot 的配置文件,可以添加多个不同名字的 bot 配置文件,\n配置文件的参数如下:\n\n        {\n        \"Enabled\": true,\n        \"FarmOffline\": true,\n        \"SteamLogin\": \"steam 账户名\",\n        \"SteamPassword\": \"steam 登录密码\"\n        }\n\n## ASF 的部分命令\n\n输入`c`来进入命令模式,需要注意的是,每次输入命令前,都需要输入 `c`\n### play \n使指定的bot玩指定的游戏（即指定游戏挂卡）玩的游戏必须已经在库中！\nsteam限制最多同时玩32个游戏,切换到手动挂卡模式——使指定机器人运行给定的 AppIDs，并且可选自定义 GameName 为游戏名称。 使用 resume 以返回自动挂卡模式。\n\n        play <AppIDs,GameName>\n        或\n        play <Bots> <AppIDs,GameName>\n\n如：play asf 570\n意思是所有bot玩游戏dota2(570应该是dota2的appid)\n>asf是指代所有bot，也可写作ASF，你可以把它替换为特定bot的机器人名称(第二步中设置)\n>appid可以用英文名在steamdb搜索，或根据steam商店链接来获取（末尾的数字）\n\n### pause \n暂停自动挂卡，用resume命令可恢复挂卡\n永久暂停指定机器人的自动挂卡模块。 ASF 在本次会话中将不会再尝试对此帐户进行挂卡，除非您手动 resume 或者重启 ASF。\n\n        pause \n        或\n        pause <Bots>\n\n### resume \n恢复自动挂卡模式\n\n    resume\n    或\n    resume <Bots>\n\n### addlicense\n添加免费游戏或限时免费游戏\n为指定机器人激活给定的 AppIDs（Steam 网络）或 SubIDs（Steam 商店），仅免费游戏有效。\n格式如下:\n\n    addlicense <GameIDs>\n\n如 addlince me 570\n意思是：名称为me的bot 添加 appid为570的免费游戏\n### redeem\n激活steamkey来添加游戏\n\n        redeem <Keys>\n        或\n        redeem <Bots> <Keys>\n\n### 其他\n1，如果只有一个bot，以上命令均可以不指定bot\n2，IPC GUI右上角的齿轮可以修改界面语言\n3，如果以后不用asf，关闭asf即可,\n4，ASF不依赖steam客户端，在没有安装steam的电脑上依旧能运行\n\n\n\n","source":"_posts/2019.05.28.asf.md","raw":"---\ntitle: ASF的使用\ntags: [steam]\ncategories: 随笔\n---\n#在 mac 上使用 asf\n**关于 ASF (ArchiSteamFarm)：**\n>ASF 是由 C# 編寫，能同時掛載多個 Steam 賬號的掛卡工具。其不像 Idle Master 那樣：同一時間只能為一個賬號掛卡，需要後台運行 Steam 客戶端，需啟動額外進程模擬『正在遊戲』狀態。ASF 不需要後台運行任何Steam 客戶端，不需要啟動額外進程，而且能為不限數目的 Steam 賬號同時掛卡。不僅如此，該軟件還能在服務器和其他非桌面電腦上運行，並擁有完整支持 Mono 的特性，這能讓其在 Windows、Linux 以及 OS X 等任何支持 Mono 的操作系統上運行。ASF 存在的基礎要歸功於 SteamKit2。\n\n[注] ArchiSteamFarm V3.0 以后的版本已经将 Mono 换成了 .Net Core。\n简单来说 ASF 就是一个假的 Steam 客户端，它通过“假装玩游戏”，让 Steam 以为你真的在玩某款游戏，从而获得 Steam 集换式卡牌。\n## ASF 的安装与使用\n### mac 使用 asf\n\n* 到[这里](https://github.com/JustArchiNET/ArchiSteamFarm/releases)下载 mac 客户端(mac 上需要安装 openssl,最好在 mac 上安装 xcode)\n\n\n* cd 到解压目录,然后赋予管理员权限:\n\n        chmod +x ./ArchiSteamFarm\n\n* 运行`./ArchiSteamFarm`或者直接双击`ArchiSteamFarm`\n\n## ASF 的配置\n\n 在 config 文件夹下添加 ASF.json/bot.json\nASF.json 文件是全局的配置文件,比较重要的参数如下:\n* “Blacklist”：不挂卡的游戏 (这里排除了所以带 VAC 的游戏)\n\n* “SteamOwnerID”：ASF 所有者的 SteamID；ASF 所有者可以使用全局指令 (例如：!exit、!restart、!update 等 )\n例如:\n\n        {\n            \"SteamOwnerID\": 76561198167718521\n        }\n\nbot.json 是单个 bot 的配置文件,可以添加多个不同名字的 bot 配置文件,\n配置文件的参数如下:\n\n        {\n        \"Enabled\": true,\n        \"FarmOffline\": true,\n        \"SteamLogin\": \"steam 账户名\",\n        \"SteamPassword\": \"steam 登录密码\"\n        }\n\n## ASF 的部分命令\n\n输入`c`来进入命令模式,需要注意的是,每次输入命令前,都需要输入 `c`\n### play \n使指定的bot玩指定的游戏（即指定游戏挂卡）玩的游戏必须已经在库中！\nsteam限制最多同时玩32个游戏,切换到手动挂卡模式——使指定机器人运行给定的 AppIDs，并且可选自定义 GameName 为游戏名称。 使用 resume 以返回自动挂卡模式。\n\n        play <AppIDs,GameName>\n        或\n        play <Bots> <AppIDs,GameName>\n\n如：play asf 570\n意思是所有bot玩游戏dota2(570应该是dota2的appid)\n>asf是指代所有bot，也可写作ASF，你可以把它替换为特定bot的机器人名称(第二步中设置)\n>appid可以用英文名在steamdb搜索，或根据steam商店链接来获取（末尾的数字）\n\n### pause \n暂停自动挂卡，用resume命令可恢复挂卡\n永久暂停指定机器人的自动挂卡模块。 ASF 在本次会话中将不会再尝试对此帐户进行挂卡，除非您手动 resume 或者重启 ASF。\n\n        pause \n        或\n        pause <Bots>\n\n### resume \n恢复自动挂卡模式\n\n    resume\n    或\n    resume <Bots>\n\n### addlicense\n添加免费游戏或限时免费游戏\n为指定机器人激活给定的 AppIDs（Steam 网络）或 SubIDs（Steam 商店），仅免费游戏有效。\n格式如下:\n\n    addlicense <GameIDs>\n\n如 addlince me 570\n意思是：名称为me的bot 添加 appid为570的免费游戏\n### redeem\n激活steamkey来添加游戏\n\n        redeem <Keys>\n        或\n        redeem <Bots> <Keys>\n\n### 其他\n1，如果只有一个bot，以上命令均可以不指定bot\n2，IPC GUI右上角的齿轮可以修改界面语言\n3，如果以后不用asf，关闭asf即可,\n4，ASF不依赖steam客户端，在没有安装steam的电脑上依旧能运行\n\n\n\n","slug":"2019.05.28.asf","published":1,"date":"2019-05-28T07:01:54.293Z","updated":"2019-05-28T07:46:11.926Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwvh259m002ww39zhryu91x5","content":"<p>#在 mac 上使用 asf<br><strong>关于 ASF (ArchiSteamFarm)：</strong></p>\n<blockquote>\n<p>ASF 是由 C# 編寫，能同時掛載多個 Steam 賬號的掛卡工具。其不像 Idle Master 那樣：同一時間只能為一個賬號掛卡，需要後台運行 Steam 客戶端，需啟動額外進程模擬『正在遊戲』狀態。ASF 不需要後台運行任何Steam 客戶端，不需要啟動額外進程，而且能為不限數目的 Steam 賬號同時掛卡。不僅如此，該軟件還能在服務器和其他非桌面電腦上運行，並擁有完整支持 Mono 的特性，這能讓其在 Windows、Linux 以及 OS X 等任何支持 Mono 的操作系統上運行。ASF 存在的基礎要歸功於 SteamKit2。</p>\n</blockquote>\n<p>[注] ArchiSteamFarm V3.0 以后的版本已经将 Mono 换成了 .Net Core。<br>简单来说 ASF 就是一个假的 Steam 客户端，它通过“假装玩游戏”，让 Steam 以为你真的在玩某款游戏，从而获得 Steam 集换式卡牌。</p>\n<h2 id=\"ASF-的安装与使用\"><a href=\"#ASF-的安装与使用\" class=\"headerlink\" title=\"ASF 的安装与使用\"></a>ASF 的安装与使用</h2><h3 id=\"mac-使用-asf\"><a href=\"#mac-使用-asf\" class=\"headerlink\" title=\"mac 使用 asf\"></a>mac 使用 asf</h3><ul>\n<li>到<a href=\"https://github.com/JustArchiNET/ArchiSteamFarm/releases\" target=\"_blank\" rel=\"external\">这里</a>下载 mac 客户端(mac 上需要安装 openssl,最好在 mac 上安装 xcode)</li>\n</ul>\n<ul>\n<li><p>cd 到解压目录,然后赋予管理员权限:</p>\n<pre><code>chmod +x ./ArchiSteamFarm\n</code></pre></li>\n<li><p>运行<code>./ArchiSteamFarm</code>或者直接双击<code>ArchiSteamFarm</code></p>\n</li>\n</ul>\n<h2 id=\"ASF-的配置\"><a href=\"#ASF-的配置\" class=\"headerlink\" title=\"ASF 的配置\"></a>ASF 的配置</h2><p> 在 config 文件夹下添加 ASF.json/bot.json<br>ASF.json 文件是全局的配置文件,比较重要的参数如下:</p>\n<ul>\n<li><p>“Blacklist”：不挂卡的游戏 (这里排除了所以带 VAC 的游戏)</p>\n</li>\n<li><p>“SteamOwnerID”：ASF 所有者的 SteamID；ASF 所有者可以使用全局指令 (例如：!exit、!restart、!update 等 )<br>例如:</p>\n<pre><code>{\n    &quot;SteamOwnerID&quot;: 76561198167718521\n}\n</code></pre></li>\n</ul>\n<p>bot.json 是单个 bot 的配置文件,可以添加多个不同名字的 bot 配置文件,<br>配置文件的参数如下:</p>\n<pre><code>{\n&quot;Enabled&quot;: true,\n&quot;FarmOffline&quot;: true,\n&quot;SteamLogin&quot;: &quot;steam 账户名&quot;,\n&quot;SteamPassword&quot;: &quot;steam 登录密码&quot;\n}\n</code></pre><h2 id=\"ASF-的部分命令\"><a href=\"#ASF-的部分命令\" class=\"headerlink\" title=\"ASF 的部分命令\"></a>ASF 的部分命令</h2><p>输入<code>c</code>来进入命令模式,需要注意的是,每次输入命令前,都需要输入 <code>c</code></p>\n<h3 id=\"play\"><a href=\"#play\" class=\"headerlink\" title=\"play\"></a>play</h3><p>使指定的bot玩指定的游戏（即指定游戏挂卡）玩的游戏必须已经在库中！<br>steam限制最多同时玩32个游戏,切换到手动挂卡模式——使指定机器人运行给定的 AppIDs，并且可选自定义 GameName 为游戏名称。 使用 resume 以返回自动挂卡模式。</p>\n<pre><code>play &lt;AppIDs,GameName&gt;\n或\nplay &lt;Bots&gt; &lt;AppIDs,GameName&gt;\n</code></pre><p>如：play asf 570<br>意思是所有bot玩游戏dota2(570应该是dota2的appid)</p>\n<blockquote>\n<p>asf是指代所有bot，也可写作ASF，你可以把它替换为特定bot的机器人名称(第二步中设置)<br>appid可以用英文名在steamdb搜索，或根据steam商店链接来获取（末尾的数字）</p>\n</blockquote>\n<h3 id=\"pause\"><a href=\"#pause\" class=\"headerlink\" title=\"pause\"></a>pause</h3><p>暂停自动挂卡，用resume命令可恢复挂卡<br>永久暂停指定机器人的自动挂卡模块。 ASF 在本次会话中将不会再尝试对此帐户进行挂卡，除非您手动 resume 或者重启 ASF。</p>\n<pre><code>pause \n或\npause &lt;Bots&gt;\n</code></pre><h3 id=\"resume\"><a href=\"#resume\" class=\"headerlink\" title=\"resume\"></a>resume</h3><p>恢复自动挂卡模式</p>\n<pre><code>resume\n或\nresume &lt;Bots&gt;\n</code></pre><h3 id=\"addlicense\"><a href=\"#addlicense\" class=\"headerlink\" title=\"addlicense\"></a>addlicense</h3><p>添加免费游戏或限时免费游戏<br>为指定机器人激活给定的 AppIDs（Steam 网络）或 SubIDs（Steam 商店），仅免费游戏有效。<br>格式如下:</p>\n<pre><code>addlicense &lt;GameIDs&gt;\n</code></pre><p>如 addlince me 570<br>意思是：名称为me的bot 添加 appid为570的免费游戏</p>\n<h3 id=\"redeem\"><a href=\"#redeem\" class=\"headerlink\" title=\"redeem\"></a>redeem</h3><p>激活steamkey来添加游戏</p>\n<pre><code>redeem &lt;Keys&gt;\n或\nredeem &lt;Bots&gt; &lt;Keys&gt;\n</code></pre><h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>1，如果只有一个bot，以上命令均可以不指定bot<br>2，IPC GUI右上角的齿轮可以修改界面语言<br>3，如果以后不用asf，关闭asf即可,<br>4，ASF不依赖steam客户端，在没有安装steam的电脑上依旧能运行</p>\n","excerpt":"","more":"<p>#在 mac 上使用 asf<br><strong>关于 ASF (ArchiSteamFarm)：</strong></p>\n<blockquote>\n<p>ASF 是由 C# 編寫，能同時掛載多個 Steam 賬號的掛卡工具。其不像 Idle Master 那樣：同一時間只能為一個賬號掛卡，需要後台運行 Steam 客戶端，需啟動額外進程模擬『正在遊戲』狀態。ASF 不需要後台運行任何Steam 客戶端，不需要啟動額外進程，而且能為不限數目的 Steam 賬號同時掛卡。不僅如此，該軟件還能在服務器和其他非桌面電腦上運行，並擁有完整支持 Mono 的特性，這能讓其在 Windows、Linux 以及 OS X 等任何支持 Mono 的操作系統上運行。ASF 存在的基礎要歸功於 SteamKit2。</p>\n</blockquote>\n<p>[注] ArchiSteamFarm V3.0 以后的版本已经将 Mono 换成了 .Net Core。<br>简单来说 ASF 就是一个假的 Steam 客户端，它通过“假装玩游戏”，让 Steam 以为你真的在玩某款游戏，从而获得 Steam 集换式卡牌。</p>\n<h2 id=\"ASF-的安装与使用\"><a href=\"#ASF-的安装与使用\" class=\"headerlink\" title=\"ASF 的安装与使用\"></a>ASF 的安装与使用</h2><h3 id=\"mac-使用-asf\"><a href=\"#mac-使用-asf\" class=\"headerlink\" title=\"mac 使用 asf\"></a>mac 使用 asf</h3><ul>\n<li>到<a href=\"https://github.com/JustArchiNET/ArchiSteamFarm/releases\">这里</a>下载 mac 客户端(mac 上需要安装 openssl,最好在 mac 上安装 xcode)</li>\n</ul>\n<ul>\n<li><p>cd 到解压目录,然后赋予管理员权限:</p>\n<pre><code>chmod +x ./ArchiSteamFarm\n</code></pre></li>\n<li><p>运行<code>./ArchiSteamFarm</code>或者直接双击<code>ArchiSteamFarm</code></p>\n</li>\n</ul>\n<h2 id=\"ASF-的配置\"><a href=\"#ASF-的配置\" class=\"headerlink\" title=\"ASF 的配置\"></a>ASF 的配置</h2><p> 在 config 文件夹下添加 ASF.json/bot.json<br>ASF.json 文件是全局的配置文件,比较重要的参数如下:</p>\n<ul>\n<li><p>“Blacklist”：不挂卡的游戏 (这里排除了所以带 VAC 的游戏)</p>\n</li>\n<li><p>“SteamOwnerID”：ASF 所有者的 SteamID；ASF 所有者可以使用全局指令 (例如：!exit、!restart、!update 等 )<br>例如:</p>\n<pre><code>{\n    &quot;SteamOwnerID&quot;: 76561198167718521\n}\n</code></pre></li>\n</ul>\n<p>bot.json 是单个 bot 的配置文件,可以添加多个不同名字的 bot 配置文件,<br>配置文件的参数如下:</p>\n<pre><code>{\n&quot;Enabled&quot;: true,\n&quot;FarmOffline&quot;: true,\n&quot;SteamLogin&quot;: &quot;steam 账户名&quot;,\n&quot;SteamPassword&quot;: &quot;steam 登录密码&quot;\n}\n</code></pre><h2 id=\"ASF-的部分命令\"><a href=\"#ASF-的部分命令\" class=\"headerlink\" title=\"ASF 的部分命令\"></a>ASF 的部分命令</h2><p>输入<code>c</code>来进入命令模式,需要注意的是,每次输入命令前,都需要输入 <code>c</code></p>\n<h3 id=\"play\"><a href=\"#play\" class=\"headerlink\" title=\"play\"></a>play</h3><p>使指定的bot玩指定的游戏（即指定游戏挂卡）玩的游戏必须已经在库中！<br>steam限制最多同时玩32个游戏,切换到手动挂卡模式——使指定机器人运行给定的 AppIDs，并且可选自定义 GameName 为游戏名称。 使用 resume 以返回自动挂卡模式。</p>\n<pre><code>play &lt;AppIDs,GameName&gt;\n或\nplay &lt;Bots&gt; &lt;AppIDs,GameName&gt;\n</code></pre><p>如：play asf 570<br>意思是所有bot玩游戏dota2(570应该是dota2的appid)</p>\n<blockquote>\n<p>asf是指代所有bot，也可写作ASF，你可以把它替换为特定bot的机器人名称(第二步中设置)<br>appid可以用英文名在steamdb搜索，或根据steam商店链接来获取（末尾的数字）</p>\n</blockquote>\n<h3 id=\"pause\"><a href=\"#pause\" class=\"headerlink\" title=\"pause\"></a>pause</h3><p>暂停自动挂卡，用resume命令可恢复挂卡<br>永久暂停指定机器人的自动挂卡模块。 ASF 在本次会话中将不会再尝试对此帐户进行挂卡，除非您手动 resume 或者重启 ASF。</p>\n<pre><code>pause \n或\npause &lt;Bots&gt;\n</code></pre><h3 id=\"resume\"><a href=\"#resume\" class=\"headerlink\" title=\"resume\"></a>resume</h3><p>恢复自动挂卡模式</p>\n<pre><code>resume\n或\nresume &lt;Bots&gt;\n</code></pre><h3 id=\"addlicense\"><a href=\"#addlicense\" class=\"headerlink\" title=\"addlicense\"></a>addlicense</h3><p>添加免费游戏或限时免费游戏<br>为指定机器人激活给定的 AppIDs（Steam 网络）或 SubIDs（Steam 商店），仅免费游戏有效。<br>格式如下:</p>\n<pre><code>addlicense &lt;GameIDs&gt;\n</code></pre><p>如 addlince me 570<br>意思是：名称为me的bot 添加 appid为570的免费游戏</p>\n<h3 id=\"redeem\"><a href=\"#redeem\" class=\"headerlink\" title=\"redeem\"></a>redeem</h3><p>激活steamkey来添加游戏</p>\n<pre><code>redeem &lt;Keys&gt;\n或\nredeem &lt;Bots&gt; &lt;Keys&gt;\n</code></pre><h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>1，如果只有一个bot，以上命令均可以不指定bot<br>2，IPC GUI右上角的齿轮可以修改界面语言<br>3，如果以后不用asf，关闭asf即可,<br>4，ASF不依赖steam客户端，在没有安装steam的电脑上依旧能运行</p>\n"},{"title":"程序员鼓励师","_content":"在 vscode 插件库中搜索\"超越鼓励师\",并安装\n![WX20190529-134038@2x](https://i.loli.net/2019/05/29/5cee1b8311b3652124.png)\n## 设置\n![WX20190529-134003@2x](https://i.loli.net/2019/05/29/5cee1ba433e2d68631.png)\n![WX20190529-134247@2x](https://i.loli.net/2019/05/29/5cee1bf0a218376862.png)","source":"_posts/2019.05.29.ycy.md","raw":"---\ntitle: 程序员鼓励师\ntags: [vscode]\ncategories: 随笔\n---\n在 vscode 插件库中搜索\"超越鼓励师\",并安装\n![WX20190529-134038@2x](https://i.loli.net/2019/05/29/5cee1b8311b3652124.png)\n## 设置\n![WX20190529-134003@2x](https://i.loli.net/2019/05/29/5cee1ba433e2d68631.png)\n![WX20190529-134247@2x](https://i.loli.net/2019/05/29/5cee1bf0a218376862.png)","slug":"2019.05.29.ycy","published":1,"date":"2019-05-29T05:33:51.232Z","updated":"2019-05-29T05:43:23.614Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwvh259n002zw39zw3ca6zm6","content":"<p>在 vscode 插件库中搜索”超越鼓励师”,并安装<br><img src=\"https://i.loli.net/2019/05/29/5cee1b8311b3652124.png\" alt=\"WX20190529-134038@2x\"></p>\n<h2 id=\"设置\"><a href=\"#设置\" class=\"headerlink\" title=\"设置\"></a>设置</h2><p><img src=\"https://i.loli.net/2019/05/29/5cee1ba433e2d68631.png\" alt=\"WX20190529-134003@2x\"><br><img src=\"https://i.loli.net/2019/05/29/5cee1bf0a218376862.png\" alt=\"WX20190529-134247@2x\"></p>\n","excerpt":"","more":"<p>在 vscode 插件库中搜索”超越鼓励师”,并安装<br><img src=\"https://i.loli.net/2019/05/29/5cee1b8311b3652124.png\" alt=\"WX20190529-134038@2x\"></p>\n<h2 id=\"设置\"><a href=\"#设置\" class=\"headerlink\" title=\"设置\"></a>设置</h2><p><img src=\"https://i.loli.net/2019/05/29/5cee1ba433e2d68631.png\" alt=\"WX20190529-134003@2x\"><br><img src=\"https://i.loli.net/2019/05/29/5cee1bf0a218376862.png\" alt=\"WX20190529-134247@2x\"></p>\n"},{"title":"算法的时间复杂度/空间复杂度","_content":"# 算法的复杂度\n算法（Algorithm）是指用来操作数据、解决程序问题的一组方法.对于同一个问题,使用不同的算法,也许最终得到的结果是一样的,但在过程中消耗的资源和时间却会有很大的区别.\n可以从两个维度考量算法的复杂度:\n* 1.时间维度 ==> 时间复杂度T()\n* 2.空间维度 ==> 空间复杂度S()\n通常情况下,时间复杂度和空间复杂度不可兼得.\n# 算法的时间复杂度\n常见的算法时间复杂度\n* 常数阶O(1)\n* 对数阶O(logN)\n* 线性阶O(n)\n* 线性对数阶O(nlogN)\n* 平方阶O(n²)\n* 立方阶O(n³)\n* K次方阶O(n^k)\n* 指数阶(2^n)\n## 常数阶\n>只要没有循环等复杂结构,不管代码有多少行,代码的时间复杂度都是 O(1)\n\n例如:\n\n        let i=0;\n        ++i;\n## 对数阶\n    int i = 1;\n    while(i<n)\n    {\n        i = i * 2;\n    }\n\n\n\n","source":"_posts/2019.06.04.Algorithm.md","raw":"---\ntitle: 算法的时间复杂度/空间复杂度\ntags: [算法]\ncategories: 随笔\n---\n# 算法的复杂度\n算法（Algorithm）是指用来操作数据、解决程序问题的一组方法.对于同一个问题,使用不同的算法,也许最终得到的结果是一样的,但在过程中消耗的资源和时间却会有很大的区别.\n可以从两个维度考量算法的复杂度:\n* 1.时间维度 ==> 时间复杂度T()\n* 2.空间维度 ==> 空间复杂度S()\n通常情况下,时间复杂度和空间复杂度不可兼得.\n# 算法的时间复杂度\n常见的算法时间复杂度\n* 常数阶O(1)\n* 对数阶O(logN)\n* 线性阶O(n)\n* 线性对数阶O(nlogN)\n* 平方阶O(n²)\n* 立方阶O(n³)\n* K次方阶O(n^k)\n* 指数阶(2^n)\n## 常数阶\n>只要没有循环等复杂结构,不管代码有多少行,代码的时间复杂度都是 O(1)\n\n例如:\n\n        let i=0;\n        ++i;\n## 对数阶\n    int i = 1;\n    while(i<n)\n    {\n        i = i * 2;\n    }\n\n\n\n","slug":"2019.06.04.Algorithm","published":1,"date":"2019-06-04T02:58:56.056Z","updated":"2019-06-04T06:15:26.212Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwvh259n0031w39zk0ixnsh8","content":"<h1 id=\"算法的复杂度\"><a href=\"#算法的复杂度\" class=\"headerlink\" title=\"算法的复杂度\"></a>算法的复杂度</h1><p>算法（Algorithm）是指用来操作数据、解决程序问题的一组方法.对于同一个问题,使用不同的算法,也许最终得到的结果是一样的,但在过程中消耗的资源和时间却会有很大的区别.<br>可以从两个维度考量算法的复杂度:</p>\n<ul>\n<li>1.时间维度 ==&gt; 时间复杂度T()</li>\n<li>2.空间维度 ==&gt; 空间复杂度S()<br>通常情况下,时间复杂度和空间复杂度不可兼得.<h1 id=\"算法的时间复杂度\"><a href=\"#算法的时间复杂度\" class=\"headerlink\" title=\"算法的时间复杂度\"></a>算法的时间复杂度</h1>常见的算法时间复杂度</li>\n<li>常数阶O(1)</li>\n<li>对数阶O(logN)</li>\n<li>线性阶O(n)</li>\n<li>线性对数阶O(nlogN)</li>\n<li>平方阶O(n²)</li>\n<li>立方阶O(n³)</li>\n<li>K次方阶O(n^k)</li>\n<li>指数阶(2^n)<h2 id=\"常数阶\"><a href=\"#常数阶\" class=\"headerlink\" title=\"常数阶\"></a>常数阶</h2><blockquote>\n<p>只要没有循环等复杂结构,不管代码有多少行,代码的时间复杂度都是 O(1)</p>\n</blockquote>\n</li>\n</ul>\n<p>例如:</p>\n<pre><code>let i=0;\n++i;\n</code></pre><h2 id=\"对数阶\"><a href=\"#对数阶\" class=\"headerlink\" title=\"对数阶\"></a>对数阶</h2><pre><code>int i = 1;\nwhile(i&lt;n)\n{\n    i = i * 2;\n}\n</code></pre>","excerpt":"","more":"<h1 id=\"算法的复杂度\"><a href=\"#算法的复杂度\" class=\"headerlink\" title=\"算法的复杂度\"></a>算法的复杂度</h1><p>算法（Algorithm）是指用来操作数据、解决程序问题的一组方法.对于同一个问题,使用不同的算法,也许最终得到的结果是一样的,但在过程中消耗的资源和时间却会有很大的区别.<br>可以从两个维度考量算法的复杂度:</p>\n<ul>\n<li>1.时间维度 ==&gt; 时间复杂度T()</li>\n<li>2.空间维度 ==&gt; 空间复杂度S()<br>通常情况下,时间复杂度和空间复杂度不可兼得.<h1 id=\"算法的时间复杂度\"><a href=\"#算法的时间复杂度\" class=\"headerlink\" title=\"算法的时间复杂度\"></a>算法的时间复杂度</h1>常见的算法时间复杂度</li>\n<li>常数阶O(1)</li>\n<li>对数阶O(logN)</li>\n<li>线性阶O(n)</li>\n<li>线性对数阶O(nlogN)</li>\n<li>平方阶O(n²)</li>\n<li>立方阶O(n³)</li>\n<li>K次方阶O(n^k)</li>\n<li>指数阶(2^n)<h2 id=\"常数阶\"><a href=\"#常数阶\" class=\"headerlink\" title=\"常数阶\"></a>常数阶</h2><blockquote>\n<p>只要没有循环等复杂结构,不管代码有多少行,代码的时间复杂度都是 O(1)</p>\n</blockquote>\n</li>\n</ul>\n<p>例如:</p>\n<pre><code>let i=0;\n++i;\n</code></pre><h2 id=\"对数阶\"><a href=\"#对数阶\" class=\"headerlink\" title=\"对数阶\"></a>对数阶</h2><pre><code>int i = 1;\nwhile(i&lt;n)\n{\n    i = i * 2;\n}\n</code></pre>"},{"title":"熟悉 docker","_content":"\n# 什么是 docker?\n\n![](http://www.ruanyifeng.com/blogimg/asset/2018/bg2018020901.png)\ndocker 属于 linux 容器的一种封装.\n\n## 什么是 Linux 容器\n\nLinux 容器不是模拟一个完整的操作系统，而是对进程进行隔离。或者说，在正常进程的外面套了一个保护层。对于容器里面的进程来说，它接触到的各种资源都是虚拟的，从而实现与底层系统的隔离。\n\n由于容器是进程级别的，相比虚拟机有启动快,资源占用少,体积小的优势.\n\n# docker 的用途\n\n* 提供一次性的环境;\n* 提供弹性的云服务;\n* 组建微服务架构.\n\n# docker 的架构\n\n![](https://static.oschina.net/uploads/space/2017/0705/154125_8LwL_1251444.png)\n\n## docker 镜像(images)\n\nDocker 把应用程序及其依赖，打包在 image 文件里面。只有通过这个文件，才能生成 Docker 容器。image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。(类似面向对象语言中类与实例的关系).\n\n镜像构建时，会一层层叠加，前一层是后一层的基础.\n\n![](https://img-blog.csdn.net/20170221093655867?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvMjFjbmJhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n\n\n\n## docker 容器(containers)\n\n## docker 仓库\n\n## docker registy\n\n\n\n\n\n\n","source":"_posts/docker.md","raw":"---\ntitle: 熟悉 docker\ntags: [docker]\ncategories: 知识 \n---\n\n# 什么是 docker?\n\n![](http://www.ruanyifeng.com/blogimg/asset/2018/bg2018020901.png)\ndocker 属于 linux 容器的一种封装.\n\n## 什么是 Linux 容器\n\nLinux 容器不是模拟一个完整的操作系统，而是对进程进行隔离。或者说，在正常进程的外面套了一个保护层。对于容器里面的进程来说，它接触到的各种资源都是虚拟的，从而实现与底层系统的隔离。\n\n由于容器是进程级别的，相比虚拟机有启动快,资源占用少,体积小的优势.\n\n# docker 的用途\n\n* 提供一次性的环境;\n* 提供弹性的云服务;\n* 组建微服务架构.\n\n# docker 的架构\n\n![](https://static.oschina.net/uploads/space/2017/0705/154125_8LwL_1251444.png)\n\n## docker 镜像(images)\n\nDocker 把应用程序及其依赖，打包在 image 文件里面。只有通过这个文件，才能生成 Docker 容器。image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。(类似面向对象语言中类与实例的关系).\n\n镜像构建时，会一层层叠加，前一层是后一层的基础.\n\n![](https://img-blog.csdn.net/20170221093655867?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvMjFjbmJhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n\n\n\n## docker 容器(containers)\n\n## docker 仓库\n\n## docker registy\n\n\n\n\n\n\n","slug":"docker","published":1,"date":"2018-11-23T02:10:25.731Z","updated":"2018-11-23T02:41:09.327Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwvh259o0034w39z70dq5ack","content":"<h1 id=\"什么是-docker\"><a href=\"#什么是-docker\" class=\"headerlink\" title=\"什么是 docker?\"></a>什么是 docker?</h1><p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2018/bg2018020901.png\" alt=\"\"><br>docker 属于 linux 容器的一种封装.</p>\n<h2 id=\"什么是-Linux-容器\"><a href=\"#什么是-Linux-容器\" class=\"headerlink\" title=\"什么是 Linux 容器\"></a>什么是 Linux 容器</h2><p>Linux 容器不是模拟一个完整的操作系统，而是对进程进行隔离。或者说，在正常进程的外面套了一个保护层。对于容器里面的进程来说，它接触到的各种资源都是虚拟的，从而实现与底层系统的隔离。</p>\n<p>由于容器是进程级别的，相比虚拟机有启动快,资源占用少,体积小的优势.</p>\n<h1 id=\"docker-的用途\"><a href=\"#docker-的用途\" class=\"headerlink\" title=\"docker 的用途\"></a>docker 的用途</h1><ul>\n<li>提供一次性的环境;</li>\n<li>提供弹性的云服务;</li>\n<li>组建微服务架构.</li>\n</ul>\n<h1 id=\"docker-的架构\"><a href=\"#docker-的架构\" class=\"headerlink\" title=\"docker 的架构\"></a>docker 的架构</h1><p><img src=\"https://static.oschina.net/uploads/space/2017/0705/154125_8LwL_1251444.png\" alt=\"\"></p>\n<h2 id=\"docker-镜像-images\"><a href=\"#docker-镜像-images\" class=\"headerlink\" title=\"docker 镜像(images)\"></a>docker 镜像(images)</h2><p>Docker 把应用程序及其依赖，打包在 image 文件里面。只有通过这个文件，才能生成 Docker 容器。image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。(类似面向对象语言中类与实例的关系).</p>\n<p>镜像构建时，会一层层叠加，前一层是后一层的基础.</p>\n<p><img src=\"https://img-blog.csdn.net/20170221093655867?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvMjFjbmJhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></p>\n<h2 id=\"docker-容器-containers\"><a href=\"#docker-容器-containers\" class=\"headerlink\" title=\"docker 容器(containers)\"></a>docker 容器(containers)</h2><h2 id=\"docker-仓库\"><a href=\"#docker-仓库\" class=\"headerlink\" title=\"docker 仓库\"></a>docker 仓库</h2><h2 id=\"docker-registy\"><a href=\"#docker-registy\" class=\"headerlink\" title=\"docker registy\"></a>docker registy</h2>","excerpt":"","more":"<h1 id=\"什么是-docker\"><a href=\"#什么是-docker\" class=\"headerlink\" title=\"什么是 docker?\"></a>什么是 docker?</h1><p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2018/bg2018020901.png\" alt=\"\"><br>docker 属于 linux 容器的一种封装.</p>\n<h2 id=\"什么是-Linux-容器\"><a href=\"#什么是-Linux-容器\" class=\"headerlink\" title=\"什么是 Linux 容器\"></a>什么是 Linux 容器</h2><p>Linux 容器不是模拟一个完整的操作系统，而是对进程进行隔离。或者说，在正常进程的外面套了一个保护层。对于容器里面的进程来说，它接触到的各种资源都是虚拟的，从而实现与底层系统的隔离。</p>\n<p>由于容器是进程级别的，相比虚拟机有启动快,资源占用少,体积小的优势.</p>\n<h1 id=\"docker-的用途\"><a href=\"#docker-的用途\" class=\"headerlink\" title=\"docker 的用途\"></a>docker 的用途</h1><ul>\n<li>提供一次性的环境;</li>\n<li>提供弹性的云服务;</li>\n<li>组建微服务架构.</li>\n</ul>\n<h1 id=\"docker-的架构\"><a href=\"#docker-的架构\" class=\"headerlink\" title=\"docker 的架构\"></a>docker 的架构</h1><p><img src=\"https://static.oschina.net/uploads/space/2017/0705/154125_8LwL_1251444.png\" alt=\"\"></p>\n<h2 id=\"docker-镜像-images\"><a href=\"#docker-镜像-images\" class=\"headerlink\" title=\"docker 镜像(images)\"></a>docker 镜像(images)</h2><p>Docker 把应用程序及其依赖，打包在 image 文件里面。只有通过这个文件，才能生成 Docker 容器。image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。(类似面向对象语言中类与实例的关系).</p>\n<p>镜像构建时，会一层层叠加，前一层是后一层的基础.</p>\n<p><img src=\"https://img-blog.csdn.net/20170221093655867?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvMjFjbmJhbw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"\"></p>\n<h2 id=\"docker-容器-containers\"><a href=\"#docker-容器-containers\" class=\"headerlink\" title=\"docker 容器(containers)\"></a>docker 容器(containers)</h2><h2 id=\"docker-仓库\"><a href=\"#docker-仓库\" class=\"headerlink\" title=\"docker 仓库\"></a>docker 仓库</h2><h2 id=\"docker-registy\"><a href=\"#docker-registy\" class=\"headerlink\" title=\"docker registy\"></a>docker registy</h2>"},{"title":"ES6语法","_content":"\n## 模板字符串\n\n### 语法\n\n\t`string text`\n\t\n\t`string text line 1\n\t string text line 2`\n\t\n\t`string text ${expression} string text`\n\t\n\ttag `string text ${expression} string text`\n\n---\n\n### 描述\n\n模板字符串使用反引号 (\\` \\`) 来代替普通字符串中的用双引号和单引号。模板字符串可以包含特定语法（${expression}）的占位符。占位符中的表达式和周围的文本会一起传递给一个默认函数，该函数负责将所有的部分连接起来，如果一个模板字符串由表达式开头，则该字符串被称为带标签的模板字符串，该表达式通常是一个函数，它会在模板字符串处理后被调用，在输出最终结果前，你都可以通过该函数来对模板字符串进行操作处理。在模版字符串内使用反引号（`）时，需要在它前面加转义符（\\）。\n\n``\\`` === \"`\" // --> true`\n\n#### 多行字符串\n\n例如:\n\n##### 普通字符串\n\n\tconsole.log('string text line 1\\n' +\n\t'string text line 2');\n\t// \"string text line 1\n\t// string text line 2\"\n\n##### 模板字符串\n\n\tconsole.log(`string text line 1\n\tstring text line 2`);\n\t// \"string text line 1\n\t// string text line 2\"\n\n#### 插入表达式\n\n例如:\n\n##### 普通表达式\n\n\tvar a = 5;\n\tvar b = 10;\n\tconsole.log('Fifteen is ' + (a + b) + ' and\\nnot ' + (2 * a + b) + '.');\n\t// \"Fifteen is 15 and\n\t// not 20.\"\n\n##### 模板字符串表达式\n\n\tvar a = 5;\n\tvar b = 10;\n\tconsole.log(`Fifteen is ${a + b} and\n\tnot ${2 * a + b}.`);\n\t// \"Fifteen is 15 and\n\t// not 20.\"\n\n### 示例\n\n\n\t'use strict';\n\tvar a = 1;\n\tconsole.log(a); //1\n\tconsole.log(`a=${a}`); //a=1\n\tconsole.log('a=${a}'); // a=${a}\n\n\n## 三元表达式\n\n### 语法\n\n`test ? expression1 : expression2` \n\n### 参数\n\n* test: 任何 Boolean 表达式;\n* expression1 : 如果 test 的值为 true ,则返回表达式,可能是逗号表达式;\n* expression2: 如果 test 的值为 false ,则返回表达式,可以使用逗号表达式链接多个表达式.\n\n### 备注\n\n?: 运算符可以用作 if...else.. 语句的快捷方式,例如:\n\t\n\tvar now = new Date();\n\tvar greeting = \"Good\" + ((now.getHours() > 17) ? \" evening.\" : \" day.\");\n\n如果使用 if...else...的话: \n\n\tvar now = new Date();\n\tvar greeting = \"Good\";\n\tif (now.getHours() > 17)\n\t   greeting += \" evening.\";\n\telse\n\t   greeting += \" day.\";\n\n### 示例\n\n\n\n## var/let/const\n\n### 概括\n\n* 使用 const 声明的是常量,在后面出现的代码中不能再修改该常量的值;\n* 使用 let 声明的变量,其作用域为该语句所在的代码块中,不存在变量提升;\n* 使用 var 声明的变量,其作用域为该语句所在的函数内,且存在变量提升现象.\n\n### 示例\n\n\tfor(var i=0;i<=2;i++){\n\t    var a = i;\n\t}\n\tconsole.log(a); //2\n\n---\n\n\tfor(var i=0;i<=2;i++){\n\t    let a = i;\n\t}\n\tconsole.log(a); //undefined\n\n---\n\n\tfor(var i=0;i<=2;i++){\n\t    const a = i;\n\t}\n\tconsole.log(a); //undefined\n\n---\n\n\tconst a = 1;\n\ta = 2 ;\n\tconsole.log(a); //Assignment to constant variable. \n\n---\n\n\tconst a = {b:1};\n\ta.b = 2;\n\tconsole.log(a.b); // 2 \n\n## 箭头函数 =>\n\n### 定义\n\n`(parameters) => { statements }`\n\n如果没有参数:\n\n`() => { statements }`\n\n如果只有一个参数,可以省略括号:\n\n`parameters => { statements }`\n\n如果返回值只有一个表达式,还可以省略花括号:\n\n`parameters => expression`\n\n等价于:\n\n\tfunction (parameters){\n\treturn expression;\n\t}\n\n\n## findIndex()\nfindIndex()方法返回数组中满足提供的测试函数的第一个元素的索引。否则返回-1。\n例如有数组:\n\n\tlet arr = [\n\t\t\t\t{id:1,value:2},\n\t\t\t\t{id:2,value:3},\n\t\t\t\t.......\n\t\t\t]\n想要删除 id=8的元素,可以用:\n`arr.splice(arr.findIndex(item => item.id === 8), 1)`\n\n\n\n\t\n\n\n","source":"_posts/es6.md","raw":"---\ntitle: ES6语法\ntags: [ES6]\ncategories: 知识\n---\n\n## 模板字符串\n\n### 语法\n\n\t`string text`\n\t\n\t`string text line 1\n\t string text line 2`\n\t\n\t`string text ${expression} string text`\n\t\n\ttag `string text ${expression} string text`\n\n---\n\n### 描述\n\n模板字符串使用反引号 (\\` \\`) 来代替普通字符串中的用双引号和单引号。模板字符串可以包含特定语法（${expression}）的占位符。占位符中的表达式和周围的文本会一起传递给一个默认函数，该函数负责将所有的部分连接起来，如果一个模板字符串由表达式开头，则该字符串被称为带标签的模板字符串，该表达式通常是一个函数，它会在模板字符串处理后被调用，在输出最终结果前，你都可以通过该函数来对模板字符串进行操作处理。在模版字符串内使用反引号（`）时，需要在它前面加转义符（\\）。\n\n``\\`` === \"`\" // --> true`\n\n#### 多行字符串\n\n例如:\n\n##### 普通字符串\n\n\tconsole.log('string text line 1\\n' +\n\t'string text line 2');\n\t// \"string text line 1\n\t// string text line 2\"\n\n##### 模板字符串\n\n\tconsole.log(`string text line 1\n\tstring text line 2`);\n\t// \"string text line 1\n\t// string text line 2\"\n\n#### 插入表达式\n\n例如:\n\n##### 普通表达式\n\n\tvar a = 5;\n\tvar b = 10;\n\tconsole.log('Fifteen is ' + (a + b) + ' and\\nnot ' + (2 * a + b) + '.');\n\t// \"Fifteen is 15 and\n\t// not 20.\"\n\n##### 模板字符串表达式\n\n\tvar a = 5;\n\tvar b = 10;\n\tconsole.log(`Fifteen is ${a + b} and\n\tnot ${2 * a + b}.`);\n\t// \"Fifteen is 15 and\n\t// not 20.\"\n\n### 示例\n\n\n\t'use strict';\n\tvar a = 1;\n\tconsole.log(a); //1\n\tconsole.log(`a=${a}`); //a=1\n\tconsole.log('a=${a}'); // a=${a}\n\n\n## 三元表达式\n\n### 语法\n\n`test ? expression1 : expression2` \n\n### 参数\n\n* test: 任何 Boolean 表达式;\n* expression1 : 如果 test 的值为 true ,则返回表达式,可能是逗号表达式;\n* expression2: 如果 test 的值为 false ,则返回表达式,可以使用逗号表达式链接多个表达式.\n\n### 备注\n\n?: 运算符可以用作 if...else.. 语句的快捷方式,例如:\n\t\n\tvar now = new Date();\n\tvar greeting = \"Good\" + ((now.getHours() > 17) ? \" evening.\" : \" day.\");\n\n如果使用 if...else...的话: \n\n\tvar now = new Date();\n\tvar greeting = \"Good\";\n\tif (now.getHours() > 17)\n\t   greeting += \" evening.\";\n\telse\n\t   greeting += \" day.\";\n\n### 示例\n\n\n\n## var/let/const\n\n### 概括\n\n* 使用 const 声明的是常量,在后面出现的代码中不能再修改该常量的值;\n* 使用 let 声明的变量,其作用域为该语句所在的代码块中,不存在变量提升;\n* 使用 var 声明的变量,其作用域为该语句所在的函数内,且存在变量提升现象.\n\n### 示例\n\n\tfor(var i=0;i<=2;i++){\n\t    var a = i;\n\t}\n\tconsole.log(a); //2\n\n---\n\n\tfor(var i=0;i<=2;i++){\n\t    let a = i;\n\t}\n\tconsole.log(a); //undefined\n\n---\n\n\tfor(var i=0;i<=2;i++){\n\t    const a = i;\n\t}\n\tconsole.log(a); //undefined\n\n---\n\n\tconst a = 1;\n\ta = 2 ;\n\tconsole.log(a); //Assignment to constant variable. \n\n---\n\n\tconst a = {b:1};\n\ta.b = 2;\n\tconsole.log(a.b); // 2 \n\n## 箭头函数 =>\n\n### 定义\n\n`(parameters) => { statements }`\n\n如果没有参数:\n\n`() => { statements }`\n\n如果只有一个参数,可以省略括号:\n\n`parameters => { statements }`\n\n如果返回值只有一个表达式,还可以省略花括号:\n\n`parameters => expression`\n\n等价于:\n\n\tfunction (parameters){\n\treturn expression;\n\t}\n\n\n## findIndex()\nfindIndex()方法返回数组中满足提供的测试函数的第一个元素的索引。否则返回-1。\n例如有数组:\n\n\tlet arr = [\n\t\t\t\t{id:1,value:2},\n\t\t\t\t{id:2,value:3},\n\t\t\t\t.......\n\t\t\t]\n想要删除 id=8的元素,可以用:\n`arr.splice(arr.findIndex(item => item.id === 8), 1)`\n\n\n\n\t\n\n\n","slug":"es6","published":1,"date":"2018-11-21T12:02:23.901Z","updated":"2019-01-12T08:47:29.270Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwvh259p0037w39z7bt9q784","content":"<h2 id=\"模板字符串\"><a href=\"#模板字符串\" class=\"headerlink\" title=\"模板字符串\"></a>模板字符串</h2><h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><pre><code>`string text`\n\n`string text line 1\n string text line 2`\n\n`string text ${expression} string text`\n\ntag `string text ${expression} string text`\n</code></pre><hr>\n<h3 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h3><p>模板字符串使用反引号 (` `) 来代替普通字符串中的用双引号和单引号。模板字符串可以包含特定语法（${expression}）的占位符。占位符中的表达式和周围的文本会一起传递给一个默认函数，该函数负责将所有的部分连接起来，如果一个模板字符串由表达式开头，则该字符串被称为带标签的模板字符串，该表达式通常是一个函数，它会在模板字符串处理后被调用，在输出最终结果前，你都可以通过该函数来对模板字符串进行操作处理。在模版字符串内使用反引号（`）时，需要在它前面加转义符（\\）。</p>\n<p><code>\\</code> === “<code>&quot; // --&gt; true</code></p>\n<h4 id=\"多行字符串\"><a href=\"#多行字符串\" class=\"headerlink\" title=\"多行字符串\"></a>多行字符串</h4><p>例如:</p>\n<h5 id=\"普通字符串\"><a href=\"#普通字符串\" class=\"headerlink\" title=\"普通字符串\"></a>普通字符串</h5><pre><code>console.log(&apos;string text line 1\\n&apos; +\n&apos;string text line 2&apos;);\n// &quot;string text line 1\n// string text line 2&quot;\n</code></pre><h5 id=\"模板字符串-1\"><a href=\"#模板字符串-1\" class=\"headerlink\" title=\"模板字符串\"></a>模板字符串</h5><pre><code>console.log(`string text line 1\nstring text line 2`);\n// &quot;string text line 1\n// string text line 2&quot;\n</code></pre><h4 id=\"插入表达式\"><a href=\"#插入表达式\" class=\"headerlink\" title=\"插入表达式\"></a>插入表达式</h4><p>例如:</p>\n<h5 id=\"普通表达式\"><a href=\"#普通表达式\" class=\"headerlink\" title=\"普通表达式\"></a>普通表达式</h5><pre><code>var a = 5;\nvar b = 10;\nconsole.log(&apos;Fifteen is &apos; + (a + b) + &apos; and\\nnot &apos; + (2 * a + b) + &apos;.&apos;);\n// &quot;Fifteen is 15 and\n// not 20.&quot;\n</code></pre><h5 id=\"模板字符串表达式\"><a href=\"#模板字符串表达式\" class=\"headerlink\" title=\"模板字符串表达式\"></a>模板字符串表达式</h5><pre><code>var a = 5;\nvar b = 10;\nconsole.log(`Fifteen is ${a + b} and\nnot ${2 * a + b}.`);\n// &quot;Fifteen is 15 and\n// not 20.&quot;\n</code></pre><h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><pre><code>&apos;use strict&apos;;\nvar a = 1;\nconsole.log(a); //1\nconsole.log(`a=${a}`); //a=1\nconsole.log(&apos;a=${a}&apos;); // a=${a}\n</code></pre><h2 id=\"三元表达式\"><a href=\"#三元表达式\" class=\"headerlink\" title=\"三元表达式\"></a>三元表达式</h2><h3 id=\"语法-1\"><a href=\"#语法-1\" class=\"headerlink\" title=\"语法\"></a>语法</h3><p><code>test ? expression1 : expression2</code> </p>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><ul>\n<li>test: 任何 Boolean 表达式;</li>\n<li>expression1 : 如果 test 的值为 true ,则返回表达式,可能是逗号表达式;</li>\n<li>expression2: 如果 test 的值为 false ,则返回表达式,可以使用逗号表达式链接多个表达式.</li>\n</ul>\n<h3 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h3><p>?: 运算符可以用作 if…else.. 语句的快捷方式,例如:</p>\n<pre><code>var now = new Date();\nvar greeting = &quot;Good&quot; + ((now.getHours() &gt; 17) ? &quot; evening.&quot; : &quot; day.&quot;);\n</code></pre><p>如果使用 if…else…的话: </p>\n<pre><code>var now = new Date();\nvar greeting = &quot;Good&quot;;\nif (now.getHours() &gt; 17)\n   greeting += &quot; evening.&quot;;\nelse\n   greeting += &quot; day.&quot;;\n</code></pre><h3 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h3><h2 id=\"var-let-const\"><a href=\"#var-let-const\" class=\"headerlink\" title=\"var/let/const\"></a>var/let/const</h2><h3 id=\"概括\"><a href=\"#概括\" class=\"headerlink\" title=\"概括\"></a>概括</h3><ul>\n<li>使用 const 声明的是常量,在后面出现的代码中不能再修改该常量的值;</li>\n<li>使用 let 声明的变量,其作用域为该语句所在的代码块中,不存在变量提升;</li>\n<li>使用 var 声明的变量,其作用域为该语句所在的函数内,且存在变量提升现象.</li>\n</ul>\n<h3 id=\"示例-2\"><a href=\"#示例-2\" class=\"headerlink\" title=\"示例\"></a>示例</h3><pre><code>for(var i=0;i&lt;=2;i++){\n    var a = i;\n}\nconsole.log(a); //2\n</code></pre><hr>\n<pre><code>for(var i=0;i&lt;=2;i++){\n    let a = i;\n}\nconsole.log(a); //undefined\n</code></pre><hr>\n<pre><code>for(var i=0;i&lt;=2;i++){\n    const a = i;\n}\nconsole.log(a); //undefined\n</code></pre><hr>\n<pre><code>const a = 1;\na = 2 ;\nconsole.log(a); //Assignment to constant variable. \n</code></pre><hr>\n<pre><code>const a = {b:1};\na.b = 2;\nconsole.log(a.b); // 2 \n</code></pre><h2 id=\"箭头函数-gt\"><a href=\"#箭头函数-gt\" class=\"headerlink\" title=\"箭头函数 =&gt;\"></a>箭头函数 =&gt;</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p><code>(parameters) =&gt; { statements }</code></p>\n<p>如果没有参数:</p>\n<p><code>() =&gt; { statements }</code></p>\n<p>如果只有一个参数,可以省略括号:</p>\n<p><code>parameters =&gt; { statements }</code></p>\n<p>如果返回值只有一个表达式,还可以省略花括号:</p>\n<p><code>parameters =&gt; expression</code></p>\n<p>等价于:</p>\n<pre><code>function (parameters){\nreturn expression;\n}\n</code></pre><h2 id=\"findIndex\"><a href=\"#findIndex\" class=\"headerlink\" title=\"findIndex()\"></a>findIndex()</h2><p>findIndex()方法返回数组中满足提供的测试函数的第一个元素的索引。否则返回-1。<br>例如有数组:</p>\n<pre><code>let arr = [\n            {id:1,value:2},\n            {id:2,value:3},\n            .......\n        ]\n</code></pre><p>想要删除 id=8的元素,可以用:<br><code>arr.splice(arr.findIndex(item =&gt; item.id === 8), 1)</code></p>\n","excerpt":"","more":"<h2 id=\"模板字符串\"><a href=\"#模板字符串\" class=\"headerlink\" title=\"模板字符串\"></a>模板字符串</h2><h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><pre><code>`string text`\n\n`string text line 1\n string text line 2`\n\n`string text ${expression} string text`\n\ntag `string text ${expression} string text`\n</code></pre><hr>\n<h3 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h3><p>模板字符串使用反引号 (` `) 来代替普通字符串中的用双引号和单引号。模板字符串可以包含特定语法（${expression}）的占位符。占位符中的表达式和周围的文本会一起传递给一个默认函数，该函数负责将所有的部分连接起来，如果一个模板字符串由表达式开头，则该字符串被称为带标签的模板字符串，该表达式通常是一个函数，它会在模板字符串处理后被调用，在输出最终结果前，你都可以通过该函数来对模板字符串进行操作处理。在模版字符串内使用反引号（`）时，需要在它前面加转义符（\\）。</p>\n<p><code>\\</code> === “<code>&quot; // --&gt; true</code></p>\n<h4 id=\"多行字符串\"><a href=\"#多行字符串\" class=\"headerlink\" title=\"多行字符串\"></a>多行字符串</h4><p>例如:</p>\n<h5 id=\"普通字符串\"><a href=\"#普通字符串\" class=\"headerlink\" title=\"普通字符串\"></a>普通字符串</h5><pre><code>console.log(&apos;string text line 1\\n&apos; +\n&apos;string text line 2&apos;);\n// &quot;string text line 1\n// string text line 2&quot;\n</code></pre><h5 id=\"模板字符串-1\"><a href=\"#模板字符串-1\" class=\"headerlink\" title=\"模板字符串\"></a>模板字符串</h5><pre><code>console.log(`string text line 1\nstring text line 2`);\n// &quot;string text line 1\n// string text line 2&quot;\n</code></pre><h4 id=\"插入表达式\"><a href=\"#插入表达式\" class=\"headerlink\" title=\"插入表达式\"></a>插入表达式</h4><p>例如:</p>\n<h5 id=\"普通表达式\"><a href=\"#普通表达式\" class=\"headerlink\" title=\"普通表达式\"></a>普通表达式</h5><pre><code>var a = 5;\nvar b = 10;\nconsole.log(&apos;Fifteen is &apos; + (a + b) + &apos; and\\nnot &apos; + (2 * a + b) + &apos;.&apos;);\n// &quot;Fifteen is 15 and\n// not 20.&quot;\n</code></pre><h5 id=\"模板字符串表达式\"><a href=\"#模板字符串表达式\" class=\"headerlink\" title=\"模板字符串表达式\"></a>模板字符串表达式</h5><pre><code>var a = 5;\nvar b = 10;\nconsole.log(`Fifteen is ${a + b} and\nnot ${2 * a + b}.`);\n// &quot;Fifteen is 15 and\n// not 20.&quot;\n</code></pre><h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><pre><code>&apos;use strict&apos;;\nvar a = 1;\nconsole.log(a); //1\nconsole.log(`a=${a}`); //a=1\nconsole.log(&apos;a=${a}&apos;); // a=${a}\n</code></pre><h2 id=\"三元表达式\"><a href=\"#三元表达式\" class=\"headerlink\" title=\"三元表达式\"></a>三元表达式</h2><h3 id=\"语法-1\"><a href=\"#语法-1\" class=\"headerlink\" title=\"语法\"></a>语法</h3><p><code>test ? expression1 : expression2</code> </p>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><ul>\n<li>test: 任何 Boolean 表达式;</li>\n<li>expression1 : 如果 test 的值为 true ,则返回表达式,可能是逗号表达式;</li>\n<li>expression2: 如果 test 的值为 false ,则返回表达式,可以使用逗号表达式链接多个表达式.</li>\n</ul>\n<h3 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h3><p>?: 运算符可以用作 if…else.. 语句的快捷方式,例如:</p>\n<pre><code>var now = new Date();\nvar greeting = &quot;Good&quot; + ((now.getHours() &gt; 17) ? &quot; evening.&quot; : &quot; day.&quot;);\n</code></pre><p>如果使用 if…else…的话: </p>\n<pre><code>var now = new Date();\nvar greeting = &quot;Good&quot;;\nif (now.getHours() &gt; 17)\n   greeting += &quot; evening.&quot;;\nelse\n   greeting += &quot; day.&quot;;\n</code></pre><h3 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h3><h2 id=\"var-let-const\"><a href=\"#var-let-const\" class=\"headerlink\" title=\"var/let/const\"></a>var/let/const</h2><h3 id=\"概括\"><a href=\"#概括\" class=\"headerlink\" title=\"概括\"></a>概括</h3><ul>\n<li>使用 const 声明的是常量,在后面出现的代码中不能再修改该常量的值;</li>\n<li>使用 let 声明的变量,其作用域为该语句所在的代码块中,不存在变量提升;</li>\n<li>使用 var 声明的变量,其作用域为该语句所在的函数内,且存在变量提升现象.</li>\n</ul>\n<h3 id=\"示例-2\"><a href=\"#示例-2\" class=\"headerlink\" title=\"示例\"></a>示例</h3><pre><code>for(var i=0;i&lt;=2;i++){\n    var a = i;\n}\nconsole.log(a); //2\n</code></pre><hr>\n<pre><code>for(var i=0;i&lt;=2;i++){\n    let a = i;\n}\nconsole.log(a); //undefined\n</code></pre><hr>\n<pre><code>for(var i=0;i&lt;=2;i++){\n    const a = i;\n}\nconsole.log(a); //undefined\n</code></pre><hr>\n<pre><code>const a = 1;\na = 2 ;\nconsole.log(a); //Assignment to constant variable. \n</code></pre><hr>\n<pre><code>const a = {b:1};\na.b = 2;\nconsole.log(a.b); // 2 \n</code></pre><h2 id=\"箭头函数-gt\"><a href=\"#箭头函数-gt\" class=\"headerlink\" title=\"箭头函数 =&gt;\"></a>箭头函数 =&gt;</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p><code>(parameters) =&gt; { statements }</code></p>\n<p>如果没有参数:</p>\n<p><code>() =&gt; { statements }</code></p>\n<p>如果只有一个参数,可以省略括号:</p>\n<p><code>parameters =&gt; { statements }</code></p>\n<p>如果返回值只有一个表达式,还可以省略花括号:</p>\n<p><code>parameters =&gt; expression</code></p>\n<p>等价于:</p>\n<pre><code>function (parameters){\nreturn expression;\n}\n</code></pre><h2 id=\"findIndex\"><a href=\"#findIndex\" class=\"headerlink\" title=\"findIndex()\"></a>findIndex()</h2><p>findIndex()方法返回数组中满足提供的测试函数的第一个元素的索引。否则返回-1。<br>例如有数组:</p>\n<pre><code>let arr = [\n            {id:1,value:2},\n            {id:2,value:3},\n            .......\n        ]\n</code></pre><p>想要删除 id=8的元素,可以用:<br><code>arr.splice(arr.findIndex(item =&gt; item.id === 8), 1)</code></p>\n"},{"title":"神器workflow介绍","_content":"## 神器workflow\n### workflow是什么\n\nWorkflow 是一款 iOS 端的付费应用，通过流程化自动处理各种事情，内置 150+ 动作，如开启相机、获取当前 GPS 位置、生成 PDF、打开 URL 链接、新建 EeverNote 笔记等等，只要能巧妙组合，搭配合理，几乎能实现使用者任何的复杂任务流程。前段时间Apple把workflow团队收购，这款软件从18RMB售价变为免费。将来Apple可能把workflow整合进ios11，简单来说，workflow在不越狱的情况下，可以完成在ios封闭环境下几乎不可能完成的任务。  \n\n举个例子，对于分享截图这一功能。虽然我早已能一气呵成地打出整套动作“手机截屏－打开照片.app－翻找截图－编辑图片－分享至他人－删除截屏”，但无奈的地方在于：其实整套动作中只有两个环节需要投入思考：“截图如何编辑？”＋“分享对象是谁？”，但仍不得不例行公事般重复其余操作，不仅毫无技术含量可言，更糟糕的是来回跳转 APP 总会生硬打断连贯性，效率低下。如果，在生活中你遇到类似的烦恼，那么肯定也曾幻想过有这么一款工具，能够帮助用户在手机上将重心集中在解决任务的关键步骤，而其他次要动作则直接自动执行，无需人为干预，进而达成任务目的，使之形成一套高效率的完整工作流（类似于 Apple 在 Mac 平台推出的 Automator）。这就是workflow的作用所在。它可以在一步操作的前提下帮你完成一整套上述操作。\n![](http://onep1caa3.bkt.clouddn.com/workflow.png)   \n\n------\n　\n### workflow的优点  \n\n* 效率为王：通过 Workflow 创建的工作流程，使得原本在手机上需要繁琐步骤才能完成的任务，现在很可能只需一键搞定；\n* 四通发达：Workflow 内置的 150+ 动作(不断更新中)涵盖了大部分手机功能，并进一步延伸至第三方 APP，如 开启相机、获取当前 GPS 位置、生成 PDF、打开 URL 链接、新建 EeverNote 笔记等等，只要能巧妙组合，搭配合理，几乎能实现使用者任何的复杂任务流程；\n* 化繁为简：图形化的美观界面将复杂的代码部分完全隐藏至背后，极大降低了使用门槛。通过简单的拖曳操作来设定想要实现的功能步骤，而无需用户懂得任何代码；\n* 凌波微步：创建后的任务流程可以保存至桌面、摆放至“共享”菜单中、甚至能将自己的作品共享至他人使用，极大拓宽了 Workflow 适用场景；\n* 大有可为：高级用户调用 Workflow 内置的特殊功能 ( SSH 运行脚本、API 等) 后，还能创造更多可能，如与对接并控制网站服务器。这也恰恰说明 Workflow 具有极强的拓展性。 \n\n------------  \n### 如何创建workflow工作流\n比如我要完成截屏-打开相册-选择照片-分享给好友-删除这一系列操作，使用workflow的话，我们需要先定义这个动作。即创建workflow工作流，下面是详细的步骤。  \n\n* 可以看到workflow会给出很多动作，我们的目标是选择相册最后一张图片分享给别人，第一步就是选择分享最后一张照片还是最后一张截图；\n* 由于ios权限设置，我们必须设置一个获得相片访问权限的步骤，接着获取相册最后一张图片，也就是第二步；\n![](http://onep1caa3.bkt.clouddn.com/workflow1.png)  \n* 接着选择分享方式，可以通过分享菜单或者airdrop分享；\n* 第四步就是分享；\n![](http://onep1caa3.bkt.clouddn.com/workflow2.png) \n* 分享完成之后就是删除照片的步骤了。\n![](http://onep1caa3.bkt.clouddn.com/workflow3.png)  \n##### 在保存这个工作流之后，我们只需要截屏，打开工作流widget，点击这个工作流，选择分享方式和分享对象，工作流就开始自己运作了，在分享完成之后，工作流会删除最后一张照片并自动关闭。 \n----------\n### 提供一些额外的工作流\nworkflow中有很多工作流，你也可以创作自己的工作流，分享自己的工作流，下面就是我收集的一些工作流，点击网址以后选择用workflow打开，添加工作流之后就可以使用了。workflow暂时不支持icloud同步，但是注册一个workflow账号在不同设备登陆也可以实现工作流的同步。  \n\n多用途通用视频下载 https://workflow.is/workflows/54f8d777636e430fb901d5a2e4ccfe56 多引擎搜索https://workflow.is/workflows/7921f8c6ca7b48529cfe9b8d0f17466d  图片处理   \n\n﻿\nhttps://workflow.is/workflows/89a39d40eb0543d29202e7e0a30f27bf﻿\n﻿\n快捷开关﻿\nhttps://workflow.is/workflows/fef60e8bed1446f6bf1284ddd6e3e05e﻿\n﻿\n多功能扫码工具箱﻿\nhttps://workflow.is/workflows/4bb0a613d4cb464e879050448f05fcfe多用途通用﻿\n﻿\n视频下载﻿\nhttps://workflow.is/workflows/54f8d777636e430fb901d5a2e4ccfe56﻿\n﻿\n多引擎搜索﻿\nhttps://workflow.is/workflows/7921f8c6ca7b48529cfe9b8d0f17466d﻿\n﻿\n图片处理﻿\nhttps://workflow.is/workflows/89a39d40eb0543d29202e7e0a30f27bf﻿\n﻿\n快捷开关﻿\nhttps://workflow.is/workflows/fef60e8bed1446f6bf1284ddd6e3e05e﻿\n﻿\n多功能扫码工具箱﻿\nhttps://workflow.is/workflows/4bb0a613d4cb464e879050448f05fcfe﻿\n﻿\n﻿\nworkflow下载类型  规则﻿\n﻿\n下载YouTube视频﻿\nhttps://workflow.is/workflows/73971870942c49da96cae6a490aea8e0﻿\n﻿\nhttps://workflow.is/workflows/617578d73f8244a5afed2a1665c8e320﻿\n﻿\n下载视频的tumblr﻿\nhttps://workflow.is/workflows/f8656cbb90524dffa1fe2eba8975946e﻿\n﻿\n展开网址的tumblr﻿\nhttps://workflow.is/workflows/62a9534d3ee1467080cd4136578d3d35﻿\n﻿\n下载Twitter的GIF﻿\nhttps://workflow.is/workflows/aa9821c4bce44b6f8febcbda6245c1f0﻿\n﻿\n获取Twitter的视频﻿\nhttps://workflow.is/workflows/087a0abf12c049dd9ab256afaec790c0﻿\n﻿\n从保存的Instagram﻿\nhttps://workflow.is/workflows/3a4f22ce8e794c7489a059224f3bc0b0﻿\n﻿\n应用图像至相机胶卷﻿\nhttps://workflow.is/workflows/613a8f5e6e714cc9aecaa4e76d981248﻿\n﻿\n新浪微博视频  先复制视频页地址 在运行﻿\nhttps://workflow.is/workflows/fd7fe0b7548046e689e9776b2182a8b1﻿\n﻿\n保存网页为pdf到ibook﻿\nhttps://workflow.is/workflows/2027271452ce4712853838f43550d326﻿\n﻿\n保存了几张照片﻿\nhttps://workflow.is/workflows/a6487b004917494b88fe0fc01f0ffbc6﻿\n﻿\n﻿\nworkflow分享类型  规则﻿\n﻿\n分享音乐到Instagram的﻿\nhttps://workflow.is/workflows/402507226b8844258dee694d58b126e9﻿\n﻿\n分享最新照片﻿\nhttps://workflow.is/workflows/5f9c56bfe6de447598a6d0440697c470﻿\n﻿\n分享音乐到Instagram的﻿\nhttps://workflow.is/workflows/402507226b8844258dee694d58b126e9﻿\n﻿\nworkflow备份类型  规则﻿\n﻿\nAB Backup备份﻿\nhttps://workflow.is/workflows/3db6bdcda3104b3b9bbaea8ddf655670﻿\n﻿\n备份workflow工作流﻿\nhttps://workflow.is/workflows/c5421ebe19bd4bf885da8b74d2cbaded﻿\n﻿\n保存到iCloud﻿\nhttps://workflow.is/workflows/08f3cc0e184844339eb2f5caa58a316b﻿\n﻿\nworkflow音乐类型  规则﻿\n﻿\n播放我的音乐﻿\nhttps://workflow.is/workflows/39d58771c84c4a50af50b3a0e1f7bda7﻿\n﻿\n加入我的音乐﻿\nhttps://workflow.is/workflows/5bf4367cdef74e3cbe5d4078bdac9882﻿\n﻿\n添加一些歌曲﻿\nhttps://workflow.is/workflows/c5f6d0b19e7e4463af581c0011860443﻿\n﻿\n获取歌曲信息﻿\nhttps://workflow.is/workflows/70900391fdd6423ab2e6d925abf148cc﻿\n﻿\n随机播放﻿\nhttps://workflow.is/workflows/7e2dab4135c24808b36a5384cde60b7d﻿\n﻿\n现在播放﻿\nhttps://workflow.is/workflows/3d954aa947474ed8b93d13f5b9d18625﻿\n﻿\nworkflow搜索类型  规则﻿\n﻿\n搜索电话号码﻿\nhttps://workflow.is/workflows/aa509941b57d48d4b51a0c2b1c06cf8c﻿\n﻿\n谷歌高级搜索﻿\nhttps://workflow.is/workflows/6e7e0853ae664c5ea7a0bae7dad6941e﻿\n﻿\n﻿\n自定义搜索﻿\nhttps://workflow.is/workflows/ac4b4abac0a2490e872b7134f5f9ca8a﻿\n﻿\nworkflow手电筒类型  规则﻿\n﻿\n﻿\n手电筒﻿\nhttps://workflow.is/workflows/31699d9bf6054e028c69286cdf932ce6﻿\n﻿\n莫尔斯电码编码器手电筒﻿\nhttps://workflow.is/workflows/3f723d2d0e0a4c45b920281cf7d30284﻿\n﻿\nworkflow距离类型  规则﻿\n﻿\n旅行距离﻿\nhttps://workflow.is/workflows/5e86637a392147449e7f0aebb3b18cf4﻿\n﻿\nBiking Distance（骑行距离）﻿\nhttps://workflow.is/workflows/90b54056340742f2bd24ed45f894d22e﻿\n﻿\nworkflow剪切板/书签类型  规则﻿\n﻿\n﻿\n剪切板列表﻿\nhttps://workflow.is/workflows/db3321f2eec84c4eb2caf29a6df81286﻿\n﻿\n剪贴板翻译﻿\nhttps://workflow.is/workflows/5de0062c54c041a386be048dd84fa361﻿\n﻿\n﻿\n复制到剪贴板﻿\nhttps://workflow.is/workflows/3242da310c4a45ec8270a09e49e6aa37﻿\n﻿\n书签﻿\nhttps://workflow.is/workflows/86a36fe10ac54a0cbe21c0016e762dee﻿\n﻿\n插接板书签离线﻿\nhttps://workflow.is/workflows/78e3d1afef39487db3d4a96d55e9a131﻿\n﻿\n﻿\nworkflow电池类型  规则﻿\n电池﻿\nhttps://workflow.is/workflows/febeed3ed07a4c78b9e77c2f48136a2a﻿\n﻿\n低功耗模式﻿\nhttps://workflow.is/workflows/640ae7eb22f143a093c77215a6e373e2﻿\n﻿\nworkflow未分类类  规则﻿\n﻿\nIP和位置﻿\n从通知中心中轻松找到你的IP和地理位置。﻿\nhttps://workflow.is/workflows/ea529c591a2740169388c0d2b8ca6505﻿\n﻿\n调整照片和删除原始﻿\n调整的原始照片，然后删除了原稿。非常适合在手机上节省磁盘空间。﻿\nhttps://workflow.is/workflows/014c0e9d263247979bc6a1c9894e07e4﻿\n﻿\n删除多张图片﻿\nhttps://workflow.is/workflows/c545d9c33b0f40d8a80712b282a19eb3﻿\n﻿\n更新浪涌/ shadowrocket主配置﻿\nhttps://workflow.is/workflows/55ecb14722f94d7c8c44ce3ce24d81c8﻿\n﻿\n计时器﻿\nhttps://workflow.is/workflows/93fd0318d0e14cdaa32c5d021effaa8b﻿\n﻿\n扩展和共享网址﻿\nhttps://workflow.is/workflows/acad8115a5564d6ea336b70b87dcab72﻿\n﻿\n合并PDF文件﻿\nhttps://workflow.is/workflows/adbb5f464fba4bc68a42a31bf91d1c4c﻿\n﻿\n抛硬币﻿\nhttps://workflow.is/workflows/4e37faab34864e1883c533754c788066﻿\n﻿\n货币换算﻿\nhttps://workflow.is/workflows/50f0132cbe654370bc35189e1cf31b86﻿\n﻿\n今天的天气﻿\nhttps://workflow.is/workflows/cf6db9a3c90c4bc7adec27f739480937﻿\n﻿\n翻译﻿\nhttps://workflow.is/workflows/a51df78f80414edf8469727f892d662d﻿\n﻿\n打开链接并复制密码﻿\nhttps://workflow.is/workflows/e5846d5f70db404a914db7c6ae07e6c8﻿\n﻿\n通知中心翻页﻿\nhttps://workflow.is/workflows/7afbf6fa09204e5e837d52cab41f0497﻿\n﻿\n读书打卡﻿\nhttps://workflow.is/workflows/051cbf0e7741444b88ba1c77d35bd08d﻿\n﻿\n﻿\n流量查询﻿\nhttps://workflow.is/workflows/068d7774623245a8849b5a051c41ee6d﻿\n﻿\n查询和访问﻿\nhttps://workflow.is/workflows/dd00747828a14ebfbddb9aac32432acd﻿\n﻿\n翻译文本﻿\nhttps://workflow.is/workflows/8d478a36a8eb41c782cbb74769eeb9b1﻿\n﻿\n安装字体﻿\nhttps://workflow.is/workflows/f9da142fe53946cd985459f96d2637e9﻿\n﻿\n网易音乐分享到推特﻿\nhttps://workflow.is/workflows/dc191b2487e147e489072c801592b10f﻿\n﻿\n通用下载﻿\nhttps://workflow.is/workflows/e645d621172347dabbe177fa24ef6a4b﻿\n﻿\n举报 iMessage 垃圾短信﻿\nhttps://workflow.is/workflows/98fa7fba0e104daab0c7473d3519cfcd﻿\n﻿\n分享最新一张图片﻿\nhttps://workflow.is/workflows/4b5e92f0777d4f59a37dbf2de267b79f﻿\n﻿\n扫描二维码﻿\nhttps://workflow.is/workflows/2be2c6a4cb1348c684d51075adba803b﻿\n﻿\n向同一个剪贴板里添加内容﻿\nhttps://workflow.is/workflows/40f931a7526d4243bb703571565edf9c\n\n","source":"_posts/2017.03.27workflow.md","raw":"----\ntitle: 神器workflow介绍\ncategories: 软件\ntags: [workflow]\n----\n## 神器workflow\n### workflow是什么\n\nWorkflow 是一款 iOS 端的付费应用，通过流程化自动处理各种事情，内置 150+ 动作，如开启相机、获取当前 GPS 位置、生成 PDF、打开 URL 链接、新建 EeverNote 笔记等等，只要能巧妙组合，搭配合理，几乎能实现使用者任何的复杂任务流程。前段时间Apple把workflow团队收购，这款软件从18RMB售价变为免费。将来Apple可能把workflow整合进ios11，简单来说，workflow在不越狱的情况下，可以完成在ios封闭环境下几乎不可能完成的任务。  \n\n举个例子，对于分享截图这一功能。虽然我早已能一气呵成地打出整套动作“手机截屏－打开照片.app－翻找截图－编辑图片－分享至他人－删除截屏”，但无奈的地方在于：其实整套动作中只有两个环节需要投入思考：“截图如何编辑？”＋“分享对象是谁？”，但仍不得不例行公事般重复其余操作，不仅毫无技术含量可言，更糟糕的是来回跳转 APP 总会生硬打断连贯性，效率低下。如果，在生活中你遇到类似的烦恼，那么肯定也曾幻想过有这么一款工具，能够帮助用户在手机上将重心集中在解决任务的关键步骤，而其他次要动作则直接自动执行，无需人为干预，进而达成任务目的，使之形成一套高效率的完整工作流（类似于 Apple 在 Mac 平台推出的 Automator）。这就是workflow的作用所在。它可以在一步操作的前提下帮你完成一整套上述操作。\n![](http://onep1caa3.bkt.clouddn.com/workflow.png)   \n\n------\n　\n### workflow的优点  \n\n* 效率为王：通过 Workflow 创建的工作流程，使得原本在手机上需要繁琐步骤才能完成的任务，现在很可能只需一键搞定；\n* 四通发达：Workflow 内置的 150+ 动作(不断更新中)涵盖了大部分手机功能，并进一步延伸至第三方 APP，如 开启相机、获取当前 GPS 位置、生成 PDF、打开 URL 链接、新建 EeverNote 笔记等等，只要能巧妙组合，搭配合理，几乎能实现使用者任何的复杂任务流程；\n* 化繁为简：图形化的美观界面将复杂的代码部分完全隐藏至背后，极大降低了使用门槛。通过简单的拖曳操作来设定想要实现的功能步骤，而无需用户懂得任何代码；\n* 凌波微步：创建后的任务流程可以保存至桌面、摆放至“共享”菜单中、甚至能将自己的作品共享至他人使用，极大拓宽了 Workflow 适用场景；\n* 大有可为：高级用户调用 Workflow 内置的特殊功能 ( SSH 运行脚本、API 等) 后，还能创造更多可能，如与对接并控制网站服务器。这也恰恰说明 Workflow 具有极强的拓展性。 \n\n------------  \n### 如何创建workflow工作流\n比如我要完成截屏-打开相册-选择照片-分享给好友-删除这一系列操作，使用workflow的话，我们需要先定义这个动作。即创建workflow工作流，下面是详细的步骤。  \n\n* 可以看到workflow会给出很多动作，我们的目标是选择相册最后一张图片分享给别人，第一步就是选择分享最后一张照片还是最后一张截图；\n* 由于ios权限设置，我们必须设置一个获得相片访问权限的步骤，接着获取相册最后一张图片，也就是第二步；\n![](http://onep1caa3.bkt.clouddn.com/workflow1.png)  \n* 接着选择分享方式，可以通过分享菜单或者airdrop分享；\n* 第四步就是分享；\n![](http://onep1caa3.bkt.clouddn.com/workflow2.png) \n* 分享完成之后就是删除照片的步骤了。\n![](http://onep1caa3.bkt.clouddn.com/workflow3.png)  \n##### 在保存这个工作流之后，我们只需要截屏，打开工作流widget，点击这个工作流，选择分享方式和分享对象，工作流就开始自己运作了，在分享完成之后，工作流会删除最后一张照片并自动关闭。 \n----------\n### 提供一些额外的工作流\nworkflow中有很多工作流，你也可以创作自己的工作流，分享自己的工作流，下面就是我收集的一些工作流，点击网址以后选择用workflow打开，添加工作流之后就可以使用了。workflow暂时不支持icloud同步，但是注册一个workflow账号在不同设备登陆也可以实现工作流的同步。  \n\n多用途通用视频下载 https://workflow.is/workflows/54f8d777636e430fb901d5a2e4ccfe56 多引擎搜索https://workflow.is/workflows/7921f8c6ca7b48529cfe9b8d0f17466d  图片处理   \n\n﻿\nhttps://workflow.is/workflows/89a39d40eb0543d29202e7e0a30f27bf﻿\n﻿\n快捷开关﻿\nhttps://workflow.is/workflows/fef60e8bed1446f6bf1284ddd6e3e05e﻿\n﻿\n多功能扫码工具箱﻿\nhttps://workflow.is/workflows/4bb0a613d4cb464e879050448f05fcfe多用途通用﻿\n﻿\n视频下载﻿\nhttps://workflow.is/workflows/54f8d777636e430fb901d5a2e4ccfe56﻿\n﻿\n多引擎搜索﻿\nhttps://workflow.is/workflows/7921f8c6ca7b48529cfe9b8d0f17466d﻿\n﻿\n图片处理﻿\nhttps://workflow.is/workflows/89a39d40eb0543d29202e7e0a30f27bf﻿\n﻿\n快捷开关﻿\nhttps://workflow.is/workflows/fef60e8bed1446f6bf1284ddd6e3e05e﻿\n﻿\n多功能扫码工具箱﻿\nhttps://workflow.is/workflows/4bb0a613d4cb464e879050448f05fcfe﻿\n﻿\n﻿\nworkflow下载类型  规则﻿\n﻿\n下载YouTube视频﻿\nhttps://workflow.is/workflows/73971870942c49da96cae6a490aea8e0﻿\n﻿\nhttps://workflow.is/workflows/617578d73f8244a5afed2a1665c8e320﻿\n﻿\n下载视频的tumblr﻿\nhttps://workflow.is/workflows/f8656cbb90524dffa1fe2eba8975946e﻿\n﻿\n展开网址的tumblr﻿\nhttps://workflow.is/workflows/62a9534d3ee1467080cd4136578d3d35﻿\n﻿\n下载Twitter的GIF﻿\nhttps://workflow.is/workflows/aa9821c4bce44b6f8febcbda6245c1f0﻿\n﻿\n获取Twitter的视频﻿\nhttps://workflow.is/workflows/087a0abf12c049dd9ab256afaec790c0﻿\n﻿\n从保存的Instagram﻿\nhttps://workflow.is/workflows/3a4f22ce8e794c7489a059224f3bc0b0﻿\n﻿\n应用图像至相机胶卷﻿\nhttps://workflow.is/workflows/613a8f5e6e714cc9aecaa4e76d981248﻿\n﻿\n新浪微博视频  先复制视频页地址 在运行﻿\nhttps://workflow.is/workflows/fd7fe0b7548046e689e9776b2182a8b1﻿\n﻿\n保存网页为pdf到ibook﻿\nhttps://workflow.is/workflows/2027271452ce4712853838f43550d326﻿\n﻿\n保存了几张照片﻿\nhttps://workflow.is/workflows/a6487b004917494b88fe0fc01f0ffbc6﻿\n﻿\n﻿\nworkflow分享类型  规则﻿\n﻿\n分享音乐到Instagram的﻿\nhttps://workflow.is/workflows/402507226b8844258dee694d58b126e9﻿\n﻿\n分享最新照片﻿\nhttps://workflow.is/workflows/5f9c56bfe6de447598a6d0440697c470﻿\n﻿\n分享音乐到Instagram的﻿\nhttps://workflow.is/workflows/402507226b8844258dee694d58b126e9﻿\n﻿\nworkflow备份类型  规则﻿\n﻿\nAB Backup备份﻿\nhttps://workflow.is/workflows/3db6bdcda3104b3b9bbaea8ddf655670﻿\n﻿\n备份workflow工作流﻿\nhttps://workflow.is/workflows/c5421ebe19bd4bf885da8b74d2cbaded﻿\n﻿\n保存到iCloud﻿\nhttps://workflow.is/workflows/08f3cc0e184844339eb2f5caa58a316b﻿\n﻿\nworkflow音乐类型  规则﻿\n﻿\n播放我的音乐﻿\nhttps://workflow.is/workflows/39d58771c84c4a50af50b3a0e1f7bda7﻿\n﻿\n加入我的音乐﻿\nhttps://workflow.is/workflows/5bf4367cdef74e3cbe5d4078bdac9882﻿\n﻿\n添加一些歌曲﻿\nhttps://workflow.is/workflows/c5f6d0b19e7e4463af581c0011860443﻿\n﻿\n获取歌曲信息﻿\nhttps://workflow.is/workflows/70900391fdd6423ab2e6d925abf148cc﻿\n﻿\n随机播放﻿\nhttps://workflow.is/workflows/7e2dab4135c24808b36a5384cde60b7d﻿\n﻿\n现在播放﻿\nhttps://workflow.is/workflows/3d954aa947474ed8b93d13f5b9d18625﻿\n﻿\nworkflow搜索类型  规则﻿\n﻿\n搜索电话号码﻿\nhttps://workflow.is/workflows/aa509941b57d48d4b51a0c2b1c06cf8c﻿\n﻿\n谷歌高级搜索﻿\nhttps://workflow.is/workflows/6e7e0853ae664c5ea7a0bae7dad6941e﻿\n﻿\n﻿\n自定义搜索﻿\nhttps://workflow.is/workflows/ac4b4abac0a2490e872b7134f5f9ca8a﻿\n﻿\nworkflow手电筒类型  规则﻿\n﻿\n﻿\n手电筒﻿\nhttps://workflow.is/workflows/31699d9bf6054e028c69286cdf932ce6﻿\n﻿\n莫尔斯电码编码器手电筒﻿\nhttps://workflow.is/workflows/3f723d2d0e0a4c45b920281cf7d30284﻿\n﻿\nworkflow距离类型  规则﻿\n﻿\n旅行距离﻿\nhttps://workflow.is/workflows/5e86637a392147449e7f0aebb3b18cf4﻿\n﻿\nBiking Distance（骑行距离）﻿\nhttps://workflow.is/workflows/90b54056340742f2bd24ed45f894d22e﻿\n﻿\nworkflow剪切板/书签类型  规则﻿\n﻿\n﻿\n剪切板列表﻿\nhttps://workflow.is/workflows/db3321f2eec84c4eb2caf29a6df81286﻿\n﻿\n剪贴板翻译﻿\nhttps://workflow.is/workflows/5de0062c54c041a386be048dd84fa361﻿\n﻿\n﻿\n复制到剪贴板﻿\nhttps://workflow.is/workflows/3242da310c4a45ec8270a09e49e6aa37﻿\n﻿\n书签﻿\nhttps://workflow.is/workflows/86a36fe10ac54a0cbe21c0016e762dee﻿\n﻿\n插接板书签离线﻿\nhttps://workflow.is/workflows/78e3d1afef39487db3d4a96d55e9a131﻿\n﻿\n﻿\nworkflow电池类型  规则﻿\n电池﻿\nhttps://workflow.is/workflows/febeed3ed07a4c78b9e77c2f48136a2a﻿\n﻿\n低功耗模式﻿\nhttps://workflow.is/workflows/640ae7eb22f143a093c77215a6e373e2﻿\n﻿\nworkflow未分类类  规则﻿\n﻿\nIP和位置﻿\n从通知中心中轻松找到你的IP和地理位置。﻿\nhttps://workflow.is/workflows/ea529c591a2740169388c0d2b8ca6505﻿\n﻿\n调整照片和删除原始﻿\n调整的原始照片，然后删除了原稿。非常适合在手机上节省磁盘空间。﻿\nhttps://workflow.is/workflows/014c0e9d263247979bc6a1c9894e07e4﻿\n﻿\n删除多张图片﻿\nhttps://workflow.is/workflows/c545d9c33b0f40d8a80712b282a19eb3﻿\n﻿\n更新浪涌/ shadowrocket主配置﻿\nhttps://workflow.is/workflows/55ecb14722f94d7c8c44ce3ce24d81c8﻿\n﻿\n计时器﻿\nhttps://workflow.is/workflows/93fd0318d0e14cdaa32c5d021effaa8b﻿\n﻿\n扩展和共享网址﻿\nhttps://workflow.is/workflows/acad8115a5564d6ea336b70b87dcab72﻿\n﻿\n合并PDF文件﻿\nhttps://workflow.is/workflows/adbb5f464fba4bc68a42a31bf91d1c4c﻿\n﻿\n抛硬币﻿\nhttps://workflow.is/workflows/4e37faab34864e1883c533754c788066﻿\n﻿\n货币换算﻿\nhttps://workflow.is/workflows/50f0132cbe654370bc35189e1cf31b86﻿\n﻿\n今天的天气﻿\nhttps://workflow.is/workflows/cf6db9a3c90c4bc7adec27f739480937﻿\n﻿\n翻译﻿\nhttps://workflow.is/workflows/a51df78f80414edf8469727f892d662d﻿\n﻿\n打开链接并复制密码﻿\nhttps://workflow.is/workflows/e5846d5f70db404a914db7c6ae07e6c8﻿\n﻿\n通知中心翻页﻿\nhttps://workflow.is/workflows/7afbf6fa09204e5e837d52cab41f0497﻿\n﻿\n读书打卡﻿\nhttps://workflow.is/workflows/051cbf0e7741444b88ba1c77d35bd08d﻿\n﻿\n﻿\n流量查询﻿\nhttps://workflow.is/workflows/068d7774623245a8849b5a051c41ee6d﻿\n﻿\n查询和访问﻿\nhttps://workflow.is/workflows/dd00747828a14ebfbddb9aac32432acd﻿\n﻿\n翻译文本﻿\nhttps://workflow.is/workflows/8d478a36a8eb41c782cbb74769eeb9b1﻿\n﻿\n安装字体﻿\nhttps://workflow.is/workflows/f9da142fe53946cd985459f96d2637e9﻿\n﻿\n网易音乐分享到推特﻿\nhttps://workflow.is/workflows/dc191b2487e147e489072c801592b10f﻿\n﻿\n通用下载﻿\nhttps://workflow.is/workflows/e645d621172347dabbe177fa24ef6a4b﻿\n﻿\n举报 iMessage 垃圾短信﻿\nhttps://workflow.is/workflows/98fa7fba0e104daab0c7473d3519cfcd﻿\n﻿\n分享最新一张图片﻿\nhttps://workflow.is/workflows/4b5e92f0777d4f59a37dbf2de267b79f﻿\n﻿\n扫描二维码﻿\nhttps://workflow.is/workflows/2be2c6a4cb1348c684d51075adba803b﻿\n﻿\n向同一个剪贴板里添加内容﻿\nhttps://workflow.is/workflows/40f931a7526d4243bb703571565edf9c\n\n","slug":"2017.03.27workflow","published":1,"date":"2017-03-27T12:14:02.000Z","updated":"2017-03-27T12:14:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwvh25dz0051w39z4rfr6ei3","content":"<h2 id=\"神器workflow\"><a href=\"#神器workflow\" class=\"headerlink\" title=\"神器workflow\"></a>神器workflow</h2><h3 id=\"workflow是什么\"><a href=\"#workflow是什么\" class=\"headerlink\" title=\"workflow是什么\"></a>workflow是什么</h3><p>Workflow 是一款 iOS 端的付费应用，通过流程化自动处理各种事情，内置 150+ 动作，如开启相机、获取当前 GPS 位置、生成 PDF、打开 URL 链接、新建 EeverNote 笔记等等，只要能巧妙组合，搭配合理，几乎能实现使用者任何的复杂任务流程。前段时间Apple把workflow团队收购，这款软件从18RMB售价变为免费。将来Apple可能把workflow整合进ios11，简单来说，workflow在不越狱的情况下，可以完成在ios封闭环境下几乎不可能完成的任务。  </p>\n<p>举个例子，对于分享截图这一功能。虽然我早已能一气呵成地打出整套动作“手机截屏－打开照片.app－翻找截图－编辑图片－分享至他人－删除截屏”，但无奈的地方在于：其实整套动作中只有两个环节需要投入思考：“截图如何编辑？”＋“分享对象是谁？”，但仍不得不例行公事般重复其余操作，不仅毫无技术含量可言，更糟糕的是来回跳转 APP 总会生硬打断连贯性，效率低下。如果，在生活中你遇到类似的烦恼，那么肯定也曾幻想过有这么一款工具，能够帮助用户在手机上将重心集中在解决任务的关键步骤，而其他次要动作则直接自动执行，无需人为干预，进而达成任务目的，使之形成一套高效率的完整工作流（类似于 Apple 在 Mac 平台推出的 Automator）。这就是workflow的作用所在。它可以在一步操作的前提下帮你完成一整套上述操作。<br><img src=\"http://onep1caa3.bkt.clouddn.com/workflow.png\" alt=\"\">   </p>\n<hr>\n<p>　</p>\n<h3 id=\"workflow的优点\"><a href=\"#workflow的优点\" class=\"headerlink\" title=\"workflow的优点\"></a>workflow的优点</h3><ul>\n<li>效率为王：通过 Workflow 创建的工作流程，使得原本在手机上需要繁琐步骤才能完成的任务，现在很可能只需一键搞定；</li>\n<li>四通发达：Workflow 内置的 150+ 动作(不断更新中)涵盖了大部分手机功能，并进一步延伸至第三方 APP，如 开启相机、获取当前 GPS 位置、生成 PDF、打开 URL 链接、新建 EeverNote 笔记等等，只要能巧妙组合，搭配合理，几乎能实现使用者任何的复杂任务流程；</li>\n<li>化繁为简：图形化的美观界面将复杂的代码部分完全隐藏至背后，极大降低了使用门槛。通过简单的拖曳操作来设定想要实现的功能步骤，而无需用户懂得任何代码；</li>\n<li>凌波微步：创建后的任务流程可以保存至桌面、摆放至“共享”菜单中、甚至能将自己的作品共享至他人使用，极大拓宽了 Workflow 适用场景；</li>\n<li>大有可为：高级用户调用 Workflow 内置的特殊功能 ( SSH 运行脚本、API 等) 后，还能创造更多可能，如与对接并控制网站服务器。这也恰恰说明 Workflow 具有极强的拓展性。 </li>\n</ul>\n<hr>\n<h3 id=\"如何创建workflow工作流\"><a href=\"#如何创建workflow工作流\" class=\"headerlink\" title=\"如何创建workflow工作流\"></a>如何创建workflow工作流</h3><p>比如我要完成截屏-打开相册-选择照片-分享给好友-删除这一系列操作，使用workflow的话，我们需要先定义这个动作。即创建workflow工作流，下面是详细的步骤。  </p>\n<ul>\n<li>可以看到workflow会给出很多动作，我们的目标是选择相册最后一张图片分享给别人，第一步就是选择分享最后一张照片还是最后一张截图；</li>\n<li>由于ios权限设置，我们必须设置一个获得相片访问权限的步骤，接着获取相册最后一张图片，也就是第二步；<br><img src=\"http://onep1caa3.bkt.clouddn.com/workflow1.png\" alt=\"\">  </li>\n<li>接着选择分享方式，可以通过分享菜单或者airdrop分享；</li>\n<li>第四步就是分享；<br><img src=\"http://onep1caa3.bkt.clouddn.com/workflow2.png\" alt=\"\"> </li>\n<li>分享完成之后就是删除照片的步骤了。<br><img src=\"http://onep1caa3.bkt.clouddn.com/workflow3.png\" alt=\"\">  <h5 id=\"在保存这个工作流之后，我们只需要截屏，打开工作流widget，点击这个工作流，选择分享方式和分享对象，工作流就开始自己运作了，在分享完成之后，工作流会删除最后一张照片并自动关闭。\"><a href=\"#在保存这个工作流之后，我们只需要截屏，打开工作流widget，点击这个工作流，选择分享方式和分享对象，工作流就开始自己运作了，在分享完成之后，工作流会删除最后一张照片并自动关闭。\" class=\"headerlink\" title=\"在保存这个工作流之后，我们只需要截屏，打开工作流widget，点击这个工作流，选择分享方式和分享对象，工作流就开始自己运作了，在分享完成之后，工作流会删除最后一张照片并自动关闭。\"></a>在保存这个工作流之后，我们只需要截屏，打开工作流widget，点击这个工作流，选择分享方式和分享对象，工作流就开始自己运作了，在分享完成之后，工作流会删除最后一张照片并自动关闭。</h5></li>\n</ul>\n<hr>\n<h3 id=\"提供一些额外的工作流\"><a href=\"#提供一些额外的工作流\" class=\"headerlink\" title=\"提供一些额外的工作流\"></a>提供一些额外的工作流</h3><p>workflow中有很多工作流，你也可以创作自己的工作流，分享自己的工作流，下面就是我收集的一些工作流，点击网址以后选择用workflow打开，添加工作流之后就可以使用了。workflow暂时不支持icloud同步，但是注册一个workflow账号在不同设备登陆也可以实现工作流的同步。  </p>\n<p>多用途通用视频下载 <a href=\"https://workflow.is/workflows/54f8d777636e430fb901d5a2e4ccfe56\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/54f8d777636e430fb901d5a2e4ccfe56</a> 多引擎搜索<a href=\"https://workflow.is/workflows/7921f8c6ca7b48529cfe9b8d0f17466d\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/7921f8c6ca7b48529cfe9b8d0f17466d</a>  图片处理   </p>\n<p>﻿<br><a href=\"https://workflow.is/workflows/89a39d40eb0543d29202e7e0a30f27bf\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/89a39d40eb0543d29202e7e0a30f27bf</a>﻿<br>﻿<br>快捷开关﻿<br><a href=\"https://workflow.is/workflows/fef60e8bed1446f6bf1284ddd6e3e05e\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/fef60e8bed1446f6bf1284ddd6e3e05e</a>﻿<br>﻿<br>多功能扫码工具箱﻿<br><a href=\"https://workflow.is/workflows/4bb0a613d4cb464e879050448f05fcfe多用途通用\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/4bb0a613d4cb464e879050448f05fcfe多用途通用</a>﻿<br>﻿<br>视频下载﻿<br><a href=\"https://workflow.is/workflows/54f8d777636e430fb901d5a2e4ccfe56\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/54f8d777636e430fb901d5a2e4ccfe56</a>﻿<br>﻿<br>多引擎搜索﻿<br><a href=\"https://workflow.is/workflows/7921f8c6ca7b48529cfe9b8d0f17466d\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/7921f8c6ca7b48529cfe9b8d0f17466d</a>﻿<br>﻿<br>图片处理﻿<br><a href=\"https://workflow.is/workflows/89a39d40eb0543d29202e7e0a30f27bf\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/89a39d40eb0543d29202e7e0a30f27bf</a>﻿<br>﻿<br>快捷开关﻿<br><a href=\"https://workflow.is/workflows/fef60e8bed1446f6bf1284ddd6e3e05e\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/fef60e8bed1446f6bf1284ddd6e3e05e</a>﻿<br>﻿<br>多功能扫码工具箱﻿<br><a href=\"https://workflow.is/workflows/4bb0a613d4cb464e879050448f05fcfe\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/4bb0a613d4cb464e879050448f05fcfe</a>﻿<br>﻿<br>﻿<br>workflow下载类型  规则﻿<br>﻿<br>下载YouTube视频﻿<br><a href=\"https://workflow.is/workflows/73971870942c49da96cae6a490aea8e0\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/73971870942c49da96cae6a490aea8e0</a>﻿<br>﻿<br><a href=\"https://workflow.is/workflows/617578d73f8244a5afed2a1665c8e320\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/617578d73f8244a5afed2a1665c8e320</a>﻿<br>﻿<br>下载视频的tumblr﻿<br><a href=\"https://workflow.is/workflows/f8656cbb90524dffa1fe2eba8975946e\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/f8656cbb90524dffa1fe2eba8975946e</a>﻿<br>﻿<br>展开网址的tumblr﻿<br><a href=\"https://workflow.is/workflows/62a9534d3ee1467080cd4136578d3d35\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/62a9534d3ee1467080cd4136578d3d35</a>﻿<br>﻿<br>下载Twitter的GIF﻿<br><a href=\"https://workflow.is/workflows/aa9821c4bce44b6f8febcbda6245c1f0\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/aa9821c4bce44b6f8febcbda6245c1f0</a>﻿<br>﻿<br>获取Twitter的视频﻿<br><a href=\"https://workflow.is/workflows/087a0abf12c049dd9ab256afaec790c0\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/087a0abf12c049dd9ab256afaec790c0</a>﻿<br>﻿<br>从保存的Instagram﻿<br><a href=\"https://workflow.is/workflows/3a4f22ce8e794c7489a059224f3bc0b0\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/3a4f22ce8e794c7489a059224f3bc0b0</a>﻿<br>﻿<br>应用图像至相机胶卷﻿<br><a href=\"https://workflow.is/workflows/613a8f5e6e714cc9aecaa4e76d981248\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/613a8f5e6e714cc9aecaa4e76d981248</a>﻿<br>﻿<br>新浪微博视频  先复制视频页地址 在运行﻿<br><a href=\"https://workflow.is/workflows/fd7fe0b7548046e689e9776b2182a8b1\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/fd7fe0b7548046e689e9776b2182a8b1</a>﻿<br>﻿<br>保存网页为pdf到ibook﻿<br><a href=\"https://workflow.is/workflows/2027271452ce4712853838f43550d326\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/2027271452ce4712853838f43550d326</a>﻿<br>﻿<br>保存了几张照片﻿<br><a href=\"https://workflow.is/workflows/a6487b004917494b88fe0fc01f0ffbc6\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/a6487b004917494b88fe0fc01f0ffbc6</a>﻿<br>﻿<br>﻿<br>workflow分享类型  规则﻿<br>﻿<br>分享音乐到Instagram的﻿<br><a href=\"https://workflow.is/workflows/402507226b8844258dee694d58b126e9\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/402507226b8844258dee694d58b126e9</a>﻿<br>﻿<br>分享最新照片﻿<br><a href=\"https://workflow.is/workflows/5f9c56bfe6de447598a6d0440697c470\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/5f9c56bfe6de447598a6d0440697c470</a>﻿<br>﻿<br>分享音乐到Instagram的﻿<br><a href=\"https://workflow.is/workflows/402507226b8844258dee694d58b126e9\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/402507226b8844258dee694d58b126e9</a>﻿<br>﻿<br>workflow备份类型  规则﻿<br>﻿<br>AB Backup备份﻿<br><a href=\"https://workflow.is/workflows/3db6bdcda3104b3b9bbaea8ddf655670\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/3db6bdcda3104b3b9bbaea8ddf655670</a>﻿<br>﻿<br>备份workflow工作流﻿<br><a href=\"https://workflow.is/workflows/c5421ebe19bd4bf885da8b74d2cbaded\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/c5421ebe19bd4bf885da8b74d2cbaded</a>﻿<br>﻿<br>保存到iCloud﻿<br><a href=\"https://workflow.is/workflows/08f3cc0e184844339eb2f5caa58a316b\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/08f3cc0e184844339eb2f5caa58a316b</a>﻿<br>﻿<br>workflow音乐类型  规则﻿<br>﻿<br>播放我的音乐﻿<br><a href=\"https://workflow.is/workflows/39d58771c84c4a50af50b3a0e1f7bda7\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/39d58771c84c4a50af50b3a0e1f7bda7</a>﻿<br>﻿<br>加入我的音乐﻿<br><a href=\"https://workflow.is/workflows/5bf4367cdef74e3cbe5d4078bdac9882\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/5bf4367cdef74e3cbe5d4078bdac9882</a>﻿<br>﻿<br>添加一些歌曲﻿<br><a href=\"https://workflow.is/workflows/c5f6d0b19e7e4463af581c0011860443\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/c5f6d0b19e7e4463af581c0011860443</a>﻿<br>﻿<br>获取歌曲信息﻿<br><a href=\"https://workflow.is/workflows/70900391fdd6423ab2e6d925abf148cc\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/70900391fdd6423ab2e6d925abf148cc</a>﻿<br>﻿<br>随机播放﻿<br><a href=\"https://workflow.is/workflows/7e2dab4135c24808b36a5384cde60b7d\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/7e2dab4135c24808b36a5384cde60b7d</a>﻿<br>﻿<br>现在播放﻿<br><a href=\"https://workflow.is/workflows/3d954aa947474ed8b93d13f5b9d18625\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/3d954aa947474ed8b93d13f5b9d18625</a>﻿<br>﻿<br>workflow搜索类型  规则﻿<br>﻿<br>搜索电话号码﻿<br><a href=\"https://workflow.is/workflows/aa509941b57d48d4b51a0c2b1c06cf8c\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/aa509941b57d48d4b51a0c2b1c06cf8c</a>﻿<br>﻿<br>谷歌高级搜索﻿<br><a href=\"https://workflow.is/workflows/6e7e0853ae664c5ea7a0bae7dad6941e\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/6e7e0853ae664c5ea7a0bae7dad6941e</a>﻿<br>﻿<br>﻿<br>自定义搜索﻿<br><a href=\"https://workflow.is/workflows/ac4b4abac0a2490e872b7134f5f9ca8a\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/ac4b4abac0a2490e872b7134f5f9ca8a</a>﻿<br>﻿<br>workflow手电筒类型  规则﻿<br>﻿<br>﻿<br>手电筒﻿<br><a href=\"https://workflow.is/workflows/31699d9bf6054e028c69286cdf932ce6\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/31699d9bf6054e028c69286cdf932ce6</a>﻿<br>﻿<br>莫尔斯电码编码器手电筒﻿<br><a href=\"https://workflow.is/workflows/3f723d2d0e0a4c45b920281cf7d30284\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/3f723d2d0e0a4c45b920281cf7d30284</a>﻿<br>﻿<br>workflow距离类型  规则﻿<br>﻿<br>旅行距离﻿<br><a href=\"https://workflow.is/workflows/5e86637a392147449e7f0aebb3b18cf4\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/5e86637a392147449e7f0aebb3b18cf4</a>﻿<br>﻿<br>Biking Distance（骑行距离）﻿<br><a href=\"https://workflow.is/workflows/90b54056340742f2bd24ed45f894d22e\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/90b54056340742f2bd24ed45f894d22e</a>﻿<br>﻿<br>workflow剪切板/书签类型  规则﻿<br>﻿<br>﻿<br>剪切板列表﻿<br><a href=\"https://workflow.is/workflows/db3321f2eec84c4eb2caf29a6df81286\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/db3321f2eec84c4eb2caf29a6df81286</a>﻿<br>﻿<br>剪贴板翻译﻿<br><a href=\"https://workflow.is/workflows/5de0062c54c041a386be048dd84fa361\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/5de0062c54c041a386be048dd84fa361</a>﻿<br>﻿<br>﻿<br>复制到剪贴板﻿<br><a href=\"https://workflow.is/workflows/3242da310c4a45ec8270a09e49e6aa37\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/3242da310c4a45ec8270a09e49e6aa37</a>﻿<br>﻿<br>书签﻿<br><a href=\"https://workflow.is/workflows/86a36fe10ac54a0cbe21c0016e762dee\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/86a36fe10ac54a0cbe21c0016e762dee</a>﻿<br>﻿<br>插接板书签离线﻿<br><a href=\"https://workflow.is/workflows/78e3d1afef39487db3d4a96d55e9a131\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/78e3d1afef39487db3d4a96d55e9a131</a>﻿<br>﻿<br>﻿<br>workflow电池类型  规则﻿<br>电池﻿<br><a href=\"https://workflow.is/workflows/febeed3ed07a4c78b9e77c2f48136a2a\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/febeed3ed07a4c78b9e77c2f48136a2a</a>﻿<br>﻿<br>低功耗模式﻿<br><a href=\"https://workflow.is/workflows/640ae7eb22f143a093c77215a6e373e2\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/640ae7eb22f143a093c77215a6e373e2</a>﻿<br>﻿<br>workflow未分类类  规则﻿<br>﻿<br>IP和位置﻿<br>从通知中心中轻松找到你的IP和地理位置。﻿<br><a href=\"https://workflow.is/workflows/ea529c591a2740169388c0d2b8ca6505\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/ea529c591a2740169388c0d2b8ca6505</a>﻿<br>﻿<br>调整照片和删除原始﻿<br>调整的原始照片，然后删除了原稿。非常适合在手机上节省磁盘空间。﻿<br><a href=\"https://workflow.is/workflows/014c0e9d263247979bc6a1c9894e07e4\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/014c0e9d263247979bc6a1c9894e07e4</a>﻿<br>﻿<br>删除多张图片﻿<br><a href=\"https://workflow.is/workflows/c545d9c33b0f40d8a80712b282a19eb3\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/c545d9c33b0f40d8a80712b282a19eb3</a>﻿<br>﻿<br>更新浪涌/ shadowrocket主配置﻿<br><a href=\"https://workflow.is/workflows/55ecb14722f94d7c8c44ce3ce24d81c8\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/55ecb14722f94d7c8c44ce3ce24d81c8</a>﻿<br>﻿<br>计时器﻿<br><a href=\"https://workflow.is/workflows/93fd0318d0e14cdaa32c5d021effaa8b\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/93fd0318d0e14cdaa32c5d021effaa8b</a>﻿<br>﻿<br>扩展和共享网址﻿<br><a href=\"https://workflow.is/workflows/acad8115a5564d6ea336b70b87dcab72\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/acad8115a5564d6ea336b70b87dcab72</a>﻿<br>﻿<br>合并PDF文件﻿<br><a href=\"https://workflow.is/workflows/adbb5f464fba4bc68a42a31bf91d1c4c\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/adbb5f464fba4bc68a42a31bf91d1c4c</a>﻿<br>﻿<br>抛硬币﻿<br><a href=\"https://workflow.is/workflows/4e37faab34864e1883c533754c788066\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/4e37faab34864e1883c533754c788066</a>﻿<br>﻿<br>货币换算﻿<br><a href=\"https://workflow.is/workflows/50f0132cbe654370bc35189e1cf31b86\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/50f0132cbe654370bc35189e1cf31b86</a>﻿<br>﻿<br>今天的天气﻿<br><a href=\"https://workflow.is/workflows/cf6db9a3c90c4bc7adec27f739480937\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/cf6db9a3c90c4bc7adec27f739480937</a>﻿<br>﻿<br>翻译﻿<br><a href=\"https://workflow.is/workflows/a51df78f80414edf8469727f892d662d\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/a51df78f80414edf8469727f892d662d</a>﻿<br>﻿<br>打开链接并复制密码﻿<br><a href=\"https://workflow.is/workflows/e5846d5f70db404a914db7c6ae07e6c8\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/e5846d5f70db404a914db7c6ae07e6c8</a>﻿<br>﻿<br>通知中心翻页﻿<br><a href=\"https://workflow.is/workflows/7afbf6fa09204e5e837d52cab41f0497\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/7afbf6fa09204e5e837d52cab41f0497</a>﻿<br>﻿<br>读书打卡﻿<br><a href=\"https://workflow.is/workflows/051cbf0e7741444b88ba1c77d35bd08d\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/051cbf0e7741444b88ba1c77d35bd08d</a>﻿<br>﻿<br>﻿<br>流量查询﻿<br><a href=\"https://workflow.is/workflows/068d7774623245a8849b5a051c41ee6d\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/068d7774623245a8849b5a051c41ee6d</a>﻿<br>﻿<br>查询和访问﻿<br><a href=\"https://workflow.is/workflows/dd00747828a14ebfbddb9aac32432acd\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/dd00747828a14ebfbddb9aac32432acd</a>﻿<br>﻿<br>翻译文本﻿<br><a href=\"https://workflow.is/workflows/8d478a36a8eb41c782cbb74769eeb9b1\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/8d478a36a8eb41c782cbb74769eeb9b1</a>﻿<br>﻿<br>安装字体﻿<br><a href=\"https://workflow.is/workflows/f9da142fe53946cd985459f96d2637e9\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/f9da142fe53946cd985459f96d2637e9</a>﻿<br>﻿<br>网易音乐分享到推特﻿<br><a href=\"https://workflow.is/workflows/dc191b2487e147e489072c801592b10f\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/dc191b2487e147e489072c801592b10f</a>﻿<br>﻿<br>通用下载﻿<br><a href=\"https://workflow.is/workflows/e645d621172347dabbe177fa24ef6a4b\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/e645d621172347dabbe177fa24ef6a4b</a>﻿<br>﻿<br>举报 iMessage 垃圾短信﻿<br><a href=\"https://workflow.is/workflows/98fa7fba0e104daab0c7473d3519cfcd\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/98fa7fba0e104daab0c7473d3519cfcd</a>﻿<br>﻿<br>分享最新一张图片﻿<br><a href=\"https://workflow.is/workflows/4b5e92f0777d4f59a37dbf2de267b79f\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/4b5e92f0777d4f59a37dbf2de267b79f</a>﻿<br>﻿<br>扫描二维码﻿<br><a href=\"https://workflow.is/workflows/2be2c6a4cb1348c684d51075adba803b\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/2be2c6a4cb1348c684d51075adba803b</a>﻿<br>﻿<br>向同一个剪贴板里添加内容﻿<br><a href=\"https://workflow.is/workflows/40f931a7526d4243bb703571565edf9c\" target=\"_blank\" rel=\"external\">https://workflow.is/workflows/40f931a7526d4243bb703571565edf9c</a></p>\n","excerpt":"","more":"<h2 id=\"神器workflow\"><a href=\"#神器workflow\" class=\"headerlink\" title=\"神器workflow\"></a>神器workflow</h2><h3 id=\"workflow是什么\"><a href=\"#workflow是什么\" class=\"headerlink\" title=\"workflow是什么\"></a>workflow是什么</h3><p>Workflow 是一款 iOS 端的付费应用，通过流程化自动处理各种事情，内置 150+ 动作，如开启相机、获取当前 GPS 位置、生成 PDF、打开 URL 链接、新建 EeverNote 笔记等等，只要能巧妙组合，搭配合理，几乎能实现使用者任何的复杂任务流程。前段时间Apple把workflow团队收购，这款软件从18RMB售价变为免费。将来Apple可能把workflow整合进ios11，简单来说，workflow在不越狱的情况下，可以完成在ios封闭环境下几乎不可能完成的任务。  </p>\n<p>举个例子，对于分享截图这一功能。虽然我早已能一气呵成地打出整套动作“手机截屏－打开照片.app－翻找截图－编辑图片－分享至他人－删除截屏”，但无奈的地方在于：其实整套动作中只有两个环节需要投入思考：“截图如何编辑？”＋“分享对象是谁？”，但仍不得不例行公事般重复其余操作，不仅毫无技术含量可言，更糟糕的是来回跳转 APP 总会生硬打断连贯性，效率低下。如果，在生活中你遇到类似的烦恼，那么肯定也曾幻想过有这么一款工具，能够帮助用户在手机上将重心集中在解决任务的关键步骤，而其他次要动作则直接自动执行，无需人为干预，进而达成任务目的，使之形成一套高效率的完整工作流（类似于 Apple 在 Mac 平台推出的 Automator）。这就是workflow的作用所在。它可以在一步操作的前提下帮你完成一整套上述操作。<br><img src=\"http://onep1caa3.bkt.clouddn.com/workflow.png\" alt=\"\">   </p>\n<hr>\n<p>　</p>\n<h3 id=\"workflow的优点\"><a href=\"#workflow的优点\" class=\"headerlink\" title=\"workflow的优点\"></a>workflow的优点</h3><ul>\n<li>效率为王：通过 Workflow 创建的工作流程，使得原本在手机上需要繁琐步骤才能完成的任务，现在很可能只需一键搞定；</li>\n<li>四通发达：Workflow 内置的 150+ 动作(不断更新中)涵盖了大部分手机功能，并进一步延伸至第三方 APP，如 开启相机、获取当前 GPS 位置、生成 PDF、打开 URL 链接、新建 EeverNote 笔记等等，只要能巧妙组合，搭配合理，几乎能实现使用者任何的复杂任务流程；</li>\n<li>化繁为简：图形化的美观界面将复杂的代码部分完全隐藏至背后，极大降低了使用门槛。通过简单的拖曳操作来设定想要实现的功能步骤，而无需用户懂得任何代码；</li>\n<li>凌波微步：创建后的任务流程可以保存至桌面、摆放至“共享”菜单中、甚至能将自己的作品共享至他人使用，极大拓宽了 Workflow 适用场景；</li>\n<li>大有可为：高级用户调用 Workflow 内置的特殊功能 ( SSH 运行脚本、API 等) 后，还能创造更多可能，如与对接并控制网站服务器。这也恰恰说明 Workflow 具有极强的拓展性。 </li>\n</ul>\n<hr>\n<h3 id=\"如何创建workflow工作流\"><a href=\"#如何创建workflow工作流\" class=\"headerlink\" title=\"如何创建workflow工作流\"></a>如何创建workflow工作流</h3><p>比如我要完成截屏-打开相册-选择照片-分享给好友-删除这一系列操作，使用workflow的话，我们需要先定义这个动作。即创建workflow工作流，下面是详细的步骤。  </p>\n<ul>\n<li>可以看到workflow会给出很多动作，我们的目标是选择相册最后一张图片分享给别人，第一步就是选择分享最后一张照片还是最后一张截图；</li>\n<li>由于ios权限设置，我们必须设置一个获得相片访问权限的步骤，接着获取相册最后一张图片，也就是第二步；<br><img src=\"http://onep1caa3.bkt.clouddn.com/workflow1.png\" alt=\"\">  </li>\n<li>接着选择分享方式，可以通过分享菜单或者airdrop分享；</li>\n<li>第四步就是分享；<br><img src=\"http://onep1caa3.bkt.clouddn.com/workflow2.png\" alt=\"\"> </li>\n<li>分享完成之后就是删除照片的步骤了。<br><img src=\"http://onep1caa3.bkt.clouddn.com/workflow3.png\" alt=\"\">  <h5 id=\"在保存这个工作流之后，我们只需要截屏，打开工作流widget，点击这个工作流，选择分享方式和分享对象，工作流就开始自己运作了，在分享完成之后，工作流会删除最后一张照片并自动关闭。\"><a href=\"#在保存这个工作流之后，我们只需要截屏，打开工作流widget，点击这个工作流，选择分享方式和分享对象，工作流就开始自己运作了，在分享完成之后，工作流会删除最后一张照片并自动关闭。\" class=\"headerlink\" title=\"在保存这个工作流之后，我们只需要截屏，打开工作流widget，点击这个工作流，选择分享方式和分享对象，工作流就开始自己运作了，在分享完成之后，工作流会删除最后一张照片并自动关闭。\"></a>在保存这个工作流之后，我们只需要截屏，打开工作流widget，点击这个工作流，选择分享方式和分享对象，工作流就开始自己运作了，在分享完成之后，工作流会删除最后一张照片并自动关闭。</h5></li>\n</ul>\n<hr>\n<h3 id=\"提供一些额外的工作流\"><a href=\"#提供一些额外的工作流\" class=\"headerlink\" title=\"提供一些额外的工作流\"></a>提供一些额外的工作流</h3><p>workflow中有很多工作流，你也可以创作自己的工作流，分享自己的工作流，下面就是我收集的一些工作流，点击网址以后选择用workflow打开，添加工作流之后就可以使用了。workflow暂时不支持icloud同步，但是注册一个workflow账号在不同设备登陆也可以实现工作流的同步。  </p>\n<p>多用途通用视频下载 <a href=\"https://workflow.is/workflows/54f8d777636e430fb901d5a2e4ccfe56\">https://workflow.is/workflows/54f8d777636e430fb901d5a2e4ccfe56</a> 多引擎搜索<a href=\"https://workflow.is/workflows/7921f8c6ca7b48529cfe9b8d0f17466d\">https://workflow.is/workflows/7921f8c6ca7b48529cfe9b8d0f17466d</a>  图片处理   </p>\n<p>﻿<br><a href=\"https://workflow.is/workflows/89a39d40eb0543d29202e7e0a30f27bf\">https://workflow.is/workflows/89a39d40eb0543d29202e7e0a30f27bf</a>﻿<br>﻿<br>快捷开关﻿<br><a href=\"https://workflow.is/workflows/fef60e8bed1446f6bf1284ddd6e3e05e\">https://workflow.is/workflows/fef60e8bed1446f6bf1284ddd6e3e05e</a>﻿<br>﻿<br>多功能扫码工具箱﻿<br><a href=\"https://workflow.is/workflows/4bb0a613d4cb464e879050448f05fcfe多用途通用\">https://workflow.is/workflows/4bb0a613d4cb464e879050448f05fcfe多用途通用</a>﻿<br>﻿<br>视频下载﻿<br><a href=\"https://workflow.is/workflows/54f8d777636e430fb901d5a2e4ccfe56\">https://workflow.is/workflows/54f8d777636e430fb901d5a2e4ccfe56</a>﻿<br>﻿<br>多引擎搜索﻿<br><a href=\"https://workflow.is/workflows/7921f8c6ca7b48529cfe9b8d0f17466d\">https://workflow.is/workflows/7921f8c6ca7b48529cfe9b8d0f17466d</a>﻿<br>﻿<br>图片处理﻿<br><a href=\"https://workflow.is/workflows/89a39d40eb0543d29202e7e0a30f27bf\">https://workflow.is/workflows/89a39d40eb0543d29202e7e0a30f27bf</a>﻿<br>﻿<br>快捷开关﻿<br><a href=\"https://workflow.is/workflows/fef60e8bed1446f6bf1284ddd6e3e05e\">https://workflow.is/workflows/fef60e8bed1446f6bf1284ddd6e3e05e</a>﻿<br>﻿<br>多功能扫码工具箱﻿<br><a href=\"https://workflow.is/workflows/4bb0a613d4cb464e879050448f05fcfe\">https://workflow.is/workflows/4bb0a613d4cb464e879050448f05fcfe</a>﻿<br>﻿<br>﻿<br>workflow下载类型  规则﻿<br>﻿<br>下载YouTube视频﻿<br><a href=\"https://workflow.is/workflows/73971870942c49da96cae6a490aea8e0\">https://workflow.is/workflows/73971870942c49da96cae6a490aea8e0</a>﻿<br>﻿<br><a href=\"https://workflow.is/workflows/617578d73f8244a5afed2a1665c8e320\">https://workflow.is/workflows/617578d73f8244a5afed2a1665c8e320</a>﻿<br>﻿<br>下载视频的tumblr﻿<br><a href=\"https://workflow.is/workflows/f8656cbb90524dffa1fe2eba8975946e\">https://workflow.is/workflows/f8656cbb90524dffa1fe2eba8975946e</a>﻿<br>﻿<br>展开网址的tumblr﻿<br><a href=\"https://workflow.is/workflows/62a9534d3ee1467080cd4136578d3d35\">https://workflow.is/workflows/62a9534d3ee1467080cd4136578d3d35</a>﻿<br>﻿<br>下载Twitter的GIF﻿<br><a href=\"https://workflow.is/workflows/aa9821c4bce44b6f8febcbda6245c1f0\">https://workflow.is/workflows/aa9821c4bce44b6f8febcbda6245c1f0</a>﻿<br>﻿<br>获取Twitter的视频﻿<br><a href=\"https://workflow.is/workflows/087a0abf12c049dd9ab256afaec790c0\">https://workflow.is/workflows/087a0abf12c049dd9ab256afaec790c0</a>﻿<br>﻿<br>从保存的Instagram﻿<br><a href=\"https://workflow.is/workflows/3a4f22ce8e794c7489a059224f3bc0b0\">https://workflow.is/workflows/3a4f22ce8e794c7489a059224f3bc0b0</a>﻿<br>﻿<br>应用图像至相机胶卷﻿<br><a href=\"https://workflow.is/workflows/613a8f5e6e714cc9aecaa4e76d981248\">https://workflow.is/workflows/613a8f5e6e714cc9aecaa4e76d981248</a>﻿<br>﻿<br>新浪微博视频  先复制视频页地址 在运行﻿<br><a href=\"https://workflow.is/workflows/fd7fe0b7548046e689e9776b2182a8b1\">https://workflow.is/workflows/fd7fe0b7548046e689e9776b2182a8b1</a>﻿<br>﻿<br>保存网页为pdf到ibook﻿<br><a href=\"https://workflow.is/workflows/2027271452ce4712853838f43550d326\">https://workflow.is/workflows/2027271452ce4712853838f43550d326</a>﻿<br>﻿<br>保存了几张照片﻿<br><a href=\"https://workflow.is/workflows/a6487b004917494b88fe0fc01f0ffbc6\">https://workflow.is/workflows/a6487b004917494b88fe0fc01f0ffbc6</a>﻿<br>﻿<br>﻿<br>workflow分享类型  规则﻿<br>﻿<br>分享音乐到Instagram的﻿<br><a href=\"https://workflow.is/workflows/402507226b8844258dee694d58b126e9\">https://workflow.is/workflows/402507226b8844258dee694d58b126e9</a>﻿<br>﻿<br>分享最新照片﻿<br><a href=\"https://workflow.is/workflows/5f9c56bfe6de447598a6d0440697c470\">https://workflow.is/workflows/5f9c56bfe6de447598a6d0440697c470</a>﻿<br>﻿<br>分享音乐到Instagram的﻿<br><a href=\"https://workflow.is/workflows/402507226b8844258dee694d58b126e9\">https://workflow.is/workflows/402507226b8844258dee694d58b126e9</a>﻿<br>﻿<br>workflow备份类型  规则﻿<br>﻿<br>AB Backup备份﻿<br><a href=\"https://workflow.is/workflows/3db6bdcda3104b3b9bbaea8ddf655670\">https://workflow.is/workflows/3db6bdcda3104b3b9bbaea8ddf655670</a>﻿<br>﻿<br>备份workflow工作流﻿<br><a href=\"https://workflow.is/workflows/c5421ebe19bd4bf885da8b74d2cbaded\">https://workflow.is/workflows/c5421ebe19bd4bf885da8b74d2cbaded</a>﻿<br>﻿<br>保存到iCloud﻿<br><a href=\"https://workflow.is/workflows/08f3cc0e184844339eb2f5caa58a316b\">https://workflow.is/workflows/08f3cc0e184844339eb2f5caa58a316b</a>﻿<br>﻿<br>workflow音乐类型  规则﻿<br>﻿<br>播放我的音乐﻿<br><a href=\"https://workflow.is/workflows/39d58771c84c4a50af50b3a0e1f7bda7\">https://workflow.is/workflows/39d58771c84c4a50af50b3a0e1f7bda7</a>﻿<br>﻿<br>加入我的音乐﻿<br><a href=\"https://workflow.is/workflows/5bf4367cdef74e3cbe5d4078bdac9882\">https://workflow.is/workflows/5bf4367cdef74e3cbe5d4078bdac9882</a>﻿<br>﻿<br>添加一些歌曲﻿<br><a href=\"https://workflow.is/workflows/c5f6d0b19e7e4463af581c0011860443\">https://workflow.is/workflows/c5f6d0b19e7e4463af581c0011860443</a>﻿<br>﻿<br>获取歌曲信息﻿<br><a href=\"https://workflow.is/workflows/70900391fdd6423ab2e6d925abf148cc\">https://workflow.is/workflows/70900391fdd6423ab2e6d925abf148cc</a>﻿<br>﻿<br>随机播放﻿<br><a href=\"https://workflow.is/workflows/7e2dab4135c24808b36a5384cde60b7d\">https://workflow.is/workflows/7e2dab4135c24808b36a5384cde60b7d</a>﻿<br>﻿<br>现在播放﻿<br><a href=\"https://workflow.is/workflows/3d954aa947474ed8b93d13f5b9d18625\">https://workflow.is/workflows/3d954aa947474ed8b93d13f5b9d18625</a>﻿<br>﻿<br>workflow搜索类型  规则﻿<br>﻿<br>搜索电话号码﻿<br><a href=\"https://workflow.is/workflows/aa509941b57d48d4b51a0c2b1c06cf8c\">https://workflow.is/workflows/aa509941b57d48d4b51a0c2b1c06cf8c</a>﻿<br>﻿<br>谷歌高级搜索﻿<br><a href=\"https://workflow.is/workflows/6e7e0853ae664c5ea7a0bae7dad6941e\">https://workflow.is/workflows/6e7e0853ae664c5ea7a0bae7dad6941e</a>﻿<br>﻿<br>﻿<br>自定义搜索﻿<br><a href=\"https://workflow.is/workflows/ac4b4abac0a2490e872b7134f5f9ca8a\">https://workflow.is/workflows/ac4b4abac0a2490e872b7134f5f9ca8a</a>﻿<br>﻿<br>workflow手电筒类型  规则﻿<br>﻿<br>﻿<br>手电筒﻿<br><a href=\"https://workflow.is/workflows/31699d9bf6054e028c69286cdf932ce6\">https://workflow.is/workflows/31699d9bf6054e028c69286cdf932ce6</a>﻿<br>﻿<br>莫尔斯电码编码器手电筒﻿<br><a href=\"https://workflow.is/workflows/3f723d2d0e0a4c45b920281cf7d30284\">https://workflow.is/workflows/3f723d2d0e0a4c45b920281cf7d30284</a>﻿<br>﻿<br>workflow距离类型  规则﻿<br>﻿<br>旅行距离﻿<br><a href=\"https://workflow.is/workflows/5e86637a392147449e7f0aebb3b18cf4\">https://workflow.is/workflows/5e86637a392147449e7f0aebb3b18cf4</a>﻿<br>﻿<br>Biking Distance（骑行距离）﻿<br><a href=\"https://workflow.is/workflows/90b54056340742f2bd24ed45f894d22e\">https://workflow.is/workflows/90b54056340742f2bd24ed45f894d22e</a>﻿<br>﻿<br>workflow剪切板/书签类型  规则﻿<br>﻿<br>﻿<br>剪切板列表﻿<br><a href=\"https://workflow.is/workflows/db3321f2eec84c4eb2caf29a6df81286\">https://workflow.is/workflows/db3321f2eec84c4eb2caf29a6df81286</a>﻿<br>﻿<br>剪贴板翻译﻿<br><a href=\"https://workflow.is/workflows/5de0062c54c041a386be048dd84fa361\">https://workflow.is/workflows/5de0062c54c041a386be048dd84fa361</a>﻿<br>﻿<br>﻿<br>复制到剪贴板﻿<br><a href=\"https://workflow.is/workflows/3242da310c4a45ec8270a09e49e6aa37\">https://workflow.is/workflows/3242da310c4a45ec8270a09e49e6aa37</a>﻿<br>﻿<br>书签﻿<br><a href=\"https://workflow.is/workflows/86a36fe10ac54a0cbe21c0016e762dee\">https://workflow.is/workflows/86a36fe10ac54a0cbe21c0016e762dee</a>﻿<br>﻿<br>插接板书签离线﻿<br><a href=\"https://workflow.is/workflows/78e3d1afef39487db3d4a96d55e9a131\">https://workflow.is/workflows/78e3d1afef39487db3d4a96d55e9a131</a>﻿<br>﻿<br>﻿<br>workflow电池类型  规则﻿<br>电池﻿<br><a href=\"https://workflow.is/workflows/febeed3ed07a4c78b9e77c2f48136a2a\">https://workflow.is/workflows/febeed3ed07a4c78b9e77c2f48136a2a</a>﻿<br>﻿<br>低功耗模式﻿<br><a href=\"https://workflow.is/workflows/640ae7eb22f143a093c77215a6e373e2\">https://workflow.is/workflows/640ae7eb22f143a093c77215a6e373e2</a>﻿<br>﻿<br>workflow未分类类  规则﻿<br>﻿<br>IP和位置﻿<br>从通知中心中轻松找到你的IP和地理位置。﻿<br><a href=\"https://workflow.is/workflows/ea529c591a2740169388c0d2b8ca6505\">https://workflow.is/workflows/ea529c591a2740169388c0d2b8ca6505</a>﻿<br>﻿<br>调整照片和删除原始﻿<br>调整的原始照片，然后删除了原稿。非常适合在手机上节省磁盘空间。﻿<br><a href=\"https://workflow.is/workflows/014c0e9d263247979bc6a1c9894e07e4\">https://workflow.is/workflows/014c0e9d263247979bc6a1c9894e07e4</a>﻿<br>﻿<br>删除多张图片﻿<br><a href=\"https://workflow.is/workflows/c545d9c33b0f40d8a80712b282a19eb3\">https://workflow.is/workflows/c545d9c33b0f40d8a80712b282a19eb3</a>﻿<br>﻿<br>更新浪涌/ shadowrocket主配置﻿<br><a href=\"https://workflow.is/workflows/55ecb14722f94d7c8c44ce3ce24d81c8\">https://workflow.is/workflows/55ecb14722f94d7c8c44ce3ce24d81c8</a>﻿<br>﻿<br>计时器﻿<br><a href=\"https://workflow.is/workflows/93fd0318d0e14cdaa32c5d021effaa8b\">https://workflow.is/workflows/93fd0318d0e14cdaa32c5d021effaa8b</a>﻿<br>﻿<br>扩展和共享网址﻿<br><a href=\"https://workflow.is/workflows/acad8115a5564d6ea336b70b87dcab72\">https://workflow.is/workflows/acad8115a5564d6ea336b70b87dcab72</a>﻿<br>﻿<br>合并PDF文件﻿<br><a href=\"https://workflow.is/workflows/adbb5f464fba4bc68a42a31bf91d1c4c\">https://workflow.is/workflows/adbb5f464fba4bc68a42a31bf91d1c4c</a>﻿<br>﻿<br>抛硬币﻿<br><a href=\"https://workflow.is/workflows/4e37faab34864e1883c533754c788066\">https://workflow.is/workflows/4e37faab34864e1883c533754c788066</a>﻿<br>﻿<br>货币换算﻿<br><a href=\"https://workflow.is/workflows/50f0132cbe654370bc35189e1cf31b86\">https://workflow.is/workflows/50f0132cbe654370bc35189e1cf31b86</a>﻿<br>﻿<br>今天的天气﻿<br><a href=\"https://workflow.is/workflows/cf6db9a3c90c4bc7adec27f739480937\">https://workflow.is/workflows/cf6db9a3c90c4bc7adec27f739480937</a>﻿<br>﻿<br>翻译﻿<br><a href=\"https://workflow.is/workflows/a51df78f80414edf8469727f892d662d\">https://workflow.is/workflows/a51df78f80414edf8469727f892d662d</a>﻿<br>﻿<br>打开链接并复制密码﻿<br><a href=\"https://workflow.is/workflows/e5846d5f70db404a914db7c6ae07e6c8\">https://workflow.is/workflows/e5846d5f70db404a914db7c6ae07e6c8</a>﻿<br>﻿<br>通知中心翻页﻿<br><a href=\"https://workflow.is/workflows/7afbf6fa09204e5e837d52cab41f0497\">https://workflow.is/workflows/7afbf6fa09204e5e837d52cab41f0497</a>﻿<br>﻿<br>读书打卡﻿<br><a href=\"https://workflow.is/workflows/051cbf0e7741444b88ba1c77d35bd08d\">https://workflow.is/workflows/051cbf0e7741444b88ba1c77d35bd08d</a>﻿<br>﻿<br>﻿<br>流量查询﻿<br><a href=\"https://workflow.is/workflows/068d7774623245a8849b5a051c41ee6d\">https://workflow.is/workflows/068d7774623245a8849b5a051c41ee6d</a>﻿<br>﻿<br>查询和访问﻿<br><a href=\"https://workflow.is/workflows/dd00747828a14ebfbddb9aac32432acd\">https://workflow.is/workflows/dd00747828a14ebfbddb9aac32432acd</a>﻿<br>﻿<br>翻译文本﻿<br><a href=\"https://workflow.is/workflows/8d478a36a8eb41c782cbb74769eeb9b1\">https://workflow.is/workflows/8d478a36a8eb41c782cbb74769eeb9b1</a>﻿<br>﻿<br>安装字体﻿<br><a href=\"https://workflow.is/workflows/f9da142fe53946cd985459f96d2637e9\">https://workflow.is/workflows/f9da142fe53946cd985459f96d2637e9</a>﻿<br>﻿<br>网易音乐分享到推特﻿<br><a href=\"https://workflow.is/workflows/dc191b2487e147e489072c801592b10f\">https://workflow.is/workflows/dc191b2487e147e489072c801592b10f</a>﻿<br>﻿<br>通用下载﻿<br><a href=\"https://workflow.is/workflows/e645d621172347dabbe177fa24ef6a4b\">https://workflow.is/workflows/e645d621172347dabbe177fa24ef6a4b</a>﻿<br>﻿<br>举报 iMessage 垃圾短信﻿<br><a href=\"https://workflow.is/workflows/98fa7fba0e104daab0c7473d3519cfcd\">https://workflow.is/workflows/98fa7fba0e104daab0c7473d3519cfcd</a>﻿<br>﻿<br>分享最新一张图片﻿<br><a href=\"https://workflow.is/workflows/4b5e92f0777d4f59a37dbf2de267b79f\">https://workflow.is/workflows/4b5e92f0777d4f59a37dbf2de267b79f</a>﻿<br>﻿<br>扫描二维码﻿<br><a href=\"https://workflow.is/workflows/2be2c6a4cb1348c684d51075adba803b\">https://workflow.is/workflows/2be2c6a4cb1348c684d51075adba803b</a>﻿<br>﻿<br>向同一个剪贴板里添加内容﻿<br><a href=\"https://workflow.is/workflows/40f931a7526d4243bb703571565edf9c\">https://workflow.is/workflows/40f931a7526d4243bb703571565edf9c</a></p>\n"},{"title":"使用node.js+express+mysql实现简单的网页数据写入到数据库功能","_content":"## 前言  \n最近几天一直在搞这个东西，越学越发现自己的知识太少。从express搭建网页结构开始，发现需要掌握jade的缩进书写规则，真的蛋疼，一不小心就写错了。接着看怎么把数据导入到mysql，又需要ajax方法，由于我没有基础，只能先去看使用jquery封装的ajax方法，本身jquery也不太熟悉，又恶补了一波jquery。另外数据库这方面我也是小白，所以又去看了mysql的基本语句，前后用了将近一星期时间。写下这篇文章，便于以后翻到看看自己有多菜哈哈。  \n## 实现的功能\n简单的网页数据保存到mysql数据库的功能。（在windows平台）  \n## 项目环境准备  \n### 1.node.js和npm的安装\n### 2.express的安装\n* express的安装可以使用npm，可以使用命令 `npm install express -g` 来进行express的全局安装。express是构建网页基本框架的工具。\n## mysql数据库的设计  \n### 1.mysql下载安装与启动\nmysql的下载安装可以到mysql官网进行，具体的安装流程要取决于你的电脑，安装方法网上有很多，这里给出一篇我随便在百度搜索到的[文章](http://www.cnblogs.com/fnlingnzb-learner/p/6009153.html)，需要注意到的是注册的时候要填写数据库用户名和密码，请牢记你的用户名和密码，同时建议把mysql添加到系统启动目录，这样可以实现开机自启，避免了每次开机在命令行输入`net start mysql` 的繁琐步骤。当开机以后在系统进程里面看到一个叫mysqld.exe的进程时，说明mysql启动成功了. ![](http://onep1caa3.bkt.clouddn.com/1.png)\n### 2.数据库可视化工具的使用  \n为了减少操作的难度，我使用了可视化的数据库操作工具，这里推荐一款名为Navicat for MySql的可视化工具，使用起来十分方便。操作也很简单，登陆数据库的时候，用户填root,密码就是配置数据库时的密码， 链接名可以随便起，端口号为3306，主机名默认localhost不用修改。登陆以后可以实现增删数据库，增删表的操作。  \n\n![](http://onep1caa3.bkt.clouddn.com/2.png)  \n\n### 3.配置mysql\n以我自己的数据库为例，新建数据库azkaban（这是我学弟项目的名字），在这个数据库里新建表excutors。   \n![](http://onep1caa3.bkt.clouddn.com/3.png)  \n接着设计表元素，这里我添加了id，host,port,active四个选项接着保存表。     \n![](http://onep1caa3.bkt.clouddn.com/4.png)  \n\n## 项目设计 \n我们要实现的目的比较简单。使用`express demo1`可以新建名为demo1的工程，工程目录如下.  \n![](http://onep1caa3.bkt.clouddn.com/5.png)  \n \n\n接下来的步骤：  \n \n* 在package.json中田间mysql依赖： `\"mysql\":\"latest\"` ,使用node.js中的`npm install` 命令安装依赖包。  \n* 编写录入信息界面register.jade文件,用来实现简单的信息录入界面以及使用$.ajax()的post方法向服务器发起登陆请求。代码如下：  \n\n>     doctype html\n>     html\n>     head\n>     title\n>     link(rel='stylesheet', href='/bootstrap-3.3.7-dist/css/bootstrap.min.css')\n>     script(src='/javascripts/jquery-3.1.1.min.js')\n>     script(src='/bootstrap-3.3.7-dist/js/bootstrap.min.js')\n>     body(style='background: #dcd9da')\n>     .container\n>       .row\n>         .col-md-4.col-md-offset-4\n>           .panel.panel-default(style='margin-top: 60px')\n>             .panel-heading(style='background: #0d6aad')\n>               h3(align='center', style='color: #ffffff;')\n>                 | azkaban\n>             .panel-body(style='background: #e0e1ea')\n>               .form-group\n>                 .input-group\n>                   span.input-group-addon host\n>                   input#host.form-control(type='text')\n>               .form-group\n>                 .input-group\n>                   span.input-group-addon port\n>                   input#port.form-control(type='port')\n>               \n>               .form-group\n>                 .input-group\n>                   span.input-group-addon active\n>                   input#active.form-control(type='text')\n>               .form-group\n>                 button#register.btn.btn-success.btn-block(type='button')\n>                   | log in\n>               #popup.alert.alert-warning\n>                 a#close.close(href='#') &times;\n>                 div(align='center')\n>                   strong#popup-content(style='color: #b12e30;')\n>     script(type='text/javascript').\n>       $(document).ready(function () {\n>         var host = $(\"#host\");\n>         var port = $(\"#port\");\n>         var active = $(\"#active\");\n>         var register = $(\"#register\");\n>         var popup = $(\"#popup\");\n>         var popupContent = $(\"#popup-content\");\n>         var close = $(\"#close\");\n>         popup.hide();\n>         close.click(function () {\n>           popup.hide();\n>         });\n>         register.click(function () {\n>           if (host.val() == \"\" || port.val() == \"\" || active.val() == \"\") {\n>             popup.show();\n>             popupContent.html(\"can't be empty！\");}  \n>           else {\n>             $.ajax({\n>               url: \"/register/userRegister\",\n>               data: {\n>                 host: $(\"#host\").val(),\n>                 port: $(\"#port\").val(),\n>                 active: $(\"#active\").val()\n>                     },\n>               type: \"POST\",\n>               timeout: 36000,\n>               dataType: \"text\",\n>               success: function (data, textStatus) {\n>                 var dataJson = eval(\"(\" + data + \")\");\n>                 if (dataJson.code == 200) {\n>                   alert(\"success\");\n>                 } else if (dataJson.code == 400) {\n>                   popup.show();\n>                   popupContent.html(\"fail,please retry！\");\n>                 } else {\n>                   popup.show();\n>                   popupContent.html(\"error！\");\n>                 }\n>               },\n>               error: function (XMLHttpRequest, textStatus, errorThrown) {\n>                 alert(\"error:\" + textStatus);\n>               }\n>             });\n>           }\n>         });\n>       });\n\n\n* 编写录入信息路由register.js文件  \n\n\n----------\n   \n>     var express = require('express');\n>     var router = express.Router();\n>     \n>     var mysql = require('mysql');\n>     var config = require('../model/config');\n>     \n>     var pool = mysql.createPool(config.mysql);\n>     /* GET home page. */\n>     router.get('/', function (req, res, next) {\n>       res.render('register', {title: 'register'});\n>     });\n>     router.post('/userRegister', function (req, res, next) {\n>       var host = req.body.host;\n>       var port = req.body.port;\n>       var active = req.body.active; \n>       pool.getConnection(function (err, connection) {\n>     var $sql1 = \"INSERT INTO executors(id, host, port, active) VALUES(0,?,?,?)\";\n>     connection.query($sql1, [host, port, active], function (err, result) {\n>       console.log(result);\n>       if (result) {\n>     result = {\n>       code: 200,\n>       msg: 'success'\n>     };\n>       } else {\n>     result = {\n>       code: 400,\n>       msg: 'fail'\n>     };\n>       }\n>       res.json(result);\n>       connection.release();\n>     });\n>       \n>     });\n>       });\n>     module.exports = router;  \n\n  \n* 在app.js中增加register的界面和路由  \n \n![](http://onep1caa3.bkt.clouddn.com/7.png) \n\n* 设置连接数据库参数model/config.js 。在这里我使用用户azkaban创建了数据库azkaban。 \n>     module.exports = {\n>       mysql: {\n>     host: '127.0.0.1',\n>     user: 'azkaban',\n>     password: '',\n>     database: 'azkaban',\n>     port: 3306\n>       }\n>     };\n \n* 项目运行，在命令行输入`npm start`来启动应用，接着访问http://localhost:3000/register  \n查看网页。  \n![](http://onep1caa3.bkt.clouddn.com/8.png)  \n* 输入数据查看是否能录入到数据库  \n![](http://onep1caa3.bkt.clouddn.com/9.png)  \n![](http://onep1caa3.bkt.clouddn.com/10.png)  \n![](http://onep1caa3.bkt.clouddn.com/11.png)  \n这样我们就完成一个简单的功能的实现！\n","source":"_posts/2017.04.06mysql.md","raw":"---\ntitle: 使用node.js+express+mysql实现简单的网页数据写入到数据库功能 \ncategories: 随笔\ntags: [node.js,express,mysql]\n---\n## 前言  \n最近几天一直在搞这个东西，越学越发现自己的知识太少。从express搭建网页结构开始，发现需要掌握jade的缩进书写规则，真的蛋疼，一不小心就写错了。接着看怎么把数据导入到mysql，又需要ajax方法，由于我没有基础，只能先去看使用jquery封装的ajax方法，本身jquery也不太熟悉，又恶补了一波jquery。另外数据库这方面我也是小白，所以又去看了mysql的基本语句，前后用了将近一星期时间。写下这篇文章，便于以后翻到看看自己有多菜哈哈。  \n## 实现的功能\n简单的网页数据保存到mysql数据库的功能。（在windows平台）  \n## 项目环境准备  \n### 1.node.js和npm的安装\n### 2.express的安装\n* express的安装可以使用npm，可以使用命令 `npm install express -g` 来进行express的全局安装。express是构建网页基本框架的工具。\n## mysql数据库的设计  \n### 1.mysql下载安装与启动\nmysql的下载安装可以到mysql官网进行，具体的安装流程要取决于你的电脑，安装方法网上有很多，这里给出一篇我随便在百度搜索到的[文章](http://www.cnblogs.com/fnlingnzb-learner/p/6009153.html)，需要注意到的是注册的时候要填写数据库用户名和密码，请牢记你的用户名和密码，同时建议把mysql添加到系统启动目录，这样可以实现开机自启，避免了每次开机在命令行输入`net start mysql` 的繁琐步骤。当开机以后在系统进程里面看到一个叫mysqld.exe的进程时，说明mysql启动成功了. ![](http://onep1caa3.bkt.clouddn.com/1.png)\n### 2.数据库可视化工具的使用  \n为了减少操作的难度，我使用了可视化的数据库操作工具，这里推荐一款名为Navicat for MySql的可视化工具，使用起来十分方便。操作也很简单，登陆数据库的时候，用户填root,密码就是配置数据库时的密码， 链接名可以随便起，端口号为3306，主机名默认localhost不用修改。登陆以后可以实现增删数据库，增删表的操作。  \n\n![](http://onep1caa3.bkt.clouddn.com/2.png)  \n\n### 3.配置mysql\n以我自己的数据库为例，新建数据库azkaban（这是我学弟项目的名字），在这个数据库里新建表excutors。   \n![](http://onep1caa3.bkt.clouddn.com/3.png)  \n接着设计表元素，这里我添加了id，host,port,active四个选项接着保存表。     \n![](http://onep1caa3.bkt.clouddn.com/4.png)  \n\n## 项目设计 \n我们要实现的目的比较简单。使用`express demo1`可以新建名为demo1的工程，工程目录如下.  \n![](http://onep1caa3.bkt.clouddn.com/5.png)  \n \n\n接下来的步骤：  \n \n* 在package.json中田间mysql依赖： `\"mysql\":\"latest\"` ,使用node.js中的`npm install` 命令安装依赖包。  \n* 编写录入信息界面register.jade文件,用来实现简单的信息录入界面以及使用$.ajax()的post方法向服务器发起登陆请求。代码如下：  \n\n>     doctype html\n>     html\n>     head\n>     title\n>     link(rel='stylesheet', href='/bootstrap-3.3.7-dist/css/bootstrap.min.css')\n>     script(src='/javascripts/jquery-3.1.1.min.js')\n>     script(src='/bootstrap-3.3.7-dist/js/bootstrap.min.js')\n>     body(style='background: #dcd9da')\n>     .container\n>       .row\n>         .col-md-4.col-md-offset-4\n>           .panel.panel-default(style='margin-top: 60px')\n>             .panel-heading(style='background: #0d6aad')\n>               h3(align='center', style='color: #ffffff;')\n>                 | azkaban\n>             .panel-body(style='background: #e0e1ea')\n>               .form-group\n>                 .input-group\n>                   span.input-group-addon host\n>                   input#host.form-control(type='text')\n>               .form-group\n>                 .input-group\n>                   span.input-group-addon port\n>                   input#port.form-control(type='port')\n>               \n>               .form-group\n>                 .input-group\n>                   span.input-group-addon active\n>                   input#active.form-control(type='text')\n>               .form-group\n>                 button#register.btn.btn-success.btn-block(type='button')\n>                   | log in\n>               #popup.alert.alert-warning\n>                 a#close.close(href='#') &times;\n>                 div(align='center')\n>                   strong#popup-content(style='color: #b12e30;')\n>     script(type='text/javascript').\n>       $(document).ready(function () {\n>         var host = $(\"#host\");\n>         var port = $(\"#port\");\n>         var active = $(\"#active\");\n>         var register = $(\"#register\");\n>         var popup = $(\"#popup\");\n>         var popupContent = $(\"#popup-content\");\n>         var close = $(\"#close\");\n>         popup.hide();\n>         close.click(function () {\n>           popup.hide();\n>         });\n>         register.click(function () {\n>           if (host.val() == \"\" || port.val() == \"\" || active.val() == \"\") {\n>             popup.show();\n>             popupContent.html(\"can't be empty！\");}  \n>           else {\n>             $.ajax({\n>               url: \"/register/userRegister\",\n>               data: {\n>                 host: $(\"#host\").val(),\n>                 port: $(\"#port\").val(),\n>                 active: $(\"#active\").val()\n>                     },\n>               type: \"POST\",\n>               timeout: 36000,\n>               dataType: \"text\",\n>               success: function (data, textStatus) {\n>                 var dataJson = eval(\"(\" + data + \")\");\n>                 if (dataJson.code == 200) {\n>                   alert(\"success\");\n>                 } else if (dataJson.code == 400) {\n>                   popup.show();\n>                   popupContent.html(\"fail,please retry！\");\n>                 } else {\n>                   popup.show();\n>                   popupContent.html(\"error！\");\n>                 }\n>               },\n>               error: function (XMLHttpRequest, textStatus, errorThrown) {\n>                 alert(\"error:\" + textStatus);\n>               }\n>             });\n>           }\n>         });\n>       });\n\n\n* 编写录入信息路由register.js文件  \n\n\n----------\n   \n>     var express = require('express');\n>     var router = express.Router();\n>     \n>     var mysql = require('mysql');\n>     var config = require('../model/config');\n>     \n>     var pool = mysql.createPool(config.mysql);\n>     /* GET home page. */\n>     router.get('/', function (req, res, next) {\n>       res.render('register', {title: 'register'});\n>     });\n>     router.post('/userRegister', function (req, res, next) {\n>       var host = req.body.host;\n>       var port = req.body.port;\n>       var active = req.body.active; \n>       pool.getConnection(function (err, connection) {\n>     var $sql1 = \"INSERT INTO executors(id, host, port, active) VALUES(0,?,?,?)\";\n>     connection.query($sql1, [host, port, active], function (err, result) {\n>       console.log(result);\n>       if (result) {\n>     result = {\n>       code: 200,\n>       msg: 'success'\n>     };\n>       } else {\n>     result = {\n>       code: 400,\n>       msg: 'fail'\n>     };\n>       }\n>       res.json(result);\n>       connection.release();\n>     });\n>       \n>     });\n>       });\n>     module.exports = router;  \n\n  \n* 在app.js中增加register的界面和路由  \n \n![](http://onep1caa3.bkt.clouddn.com/7.png) \n\n* 设置连接数据库参数model/config.js 。在这里我使用用户azkaban创建了数据库azkaban。 \n>     module.exports = {\n>       mysql: {\n>     host: '127.0.0.1',\n>     user: 'azkaban',\n>     password: '',\n>     database: 'azkaban',\n>     port: 3306\n>       }\n>     };\n \n* 项目运行，在命令行输入`npm start`来启动应用，接着访问http://localhost:3000/register  \n查看网页。  \n![](http://onep1caa3.bkt.clouddn.com/8.png)  \n* 输入数据查看是否能录入到数据库  \n![](http://onep1caa3.bkt.clouddn.com/9.png)  \n![](http://onep1caa3.bkt.clouddn.com/10.png)  \n![](http://onep1caa3.bkt.clouddn.com/11.png)  \n这样我们就完成一个简单的功能的实现！\n","slug":"2017.04.06mysql","published":1,"date":"2017-04-07T08:54:48.000Z","updated":"2017-04-07T08:54:48.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwvh25e10053w39zc3r7nxfz","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近几天一直在搞这个东西，越学越发现自己的知识太少。从express搭建网页结构开始，发现需要掌握jade的缩进书写规则，真的蛋疼，一不小心就写错了。接着看怎么把数据导入到mysql，又需要ajax方法，由于我没有基础，只能先去看使用jquery封装的ajax方法，本身jquery也不太熟悉，又恶补了一波jquery。另外数据库这方面我也是小白，所以又去看了mysql的基本语句，前后用了将近一星期时间。写下这篇文章，便于以后翻到看看自己有多菜哈哈。  </p>\n<h2 id=\"实现的功能\"><a href=\"#实现的功能\" class=\"headerlink\" title=\"实现的功能\"></a>实现的功能</h2><p>简单的网页数据保存到mysql数据库的功能。（在windows平台）  </p>\n<h2 id=\"项目环境准备\"><a href=\"#项目环境准备\" class=\"headerlink\" title=\"项目环境准备\"></a>项目环境准备</h2><h3 id=\"1-node-js和npm的安装\"><a href=\"#1-node-js和npm的安装\" class=\"headerlink\" title=\"1.node.js和npm的安装\"></a>1.node.js和npm的安装</h3><h3 id=\"2-express的安装\"><a href=\"#2-express的安装\" class=\"headerlink\" title=\"2.express的安装\"></a>2.express的安装</h3><ul>\n<li>express的安装可以使用npm，可以使用命令 <code>npm install express -g</code> 来进行express的全局安装。express是构建网页基本框架的工具。<h2 id=\"mysql数据库的设计\"><a href=\"#mysql数据库的设计\" class=\"headerlink\" title=\"mysql数据库的设计\"></a>mysql数据库的设计</h2><h3 id=\"1-mysql下载安装与启动\"><a href=\"#1-mysql下载安装与启动\" class=\"headerlink\" title=\"1.mysql下载安装与启动\"></a>1.mysql下载安装与启动</h3>mysql的下载安装可以到mysql官网进行，具体的安装流程要取决于你的电脑，安装方法网上有很多，这里给出一篇我随便在百度搜索到的<a href=\"http://www.cnblogs.com/fnlingnzb-learner/p/6009153.html\" target=\"_blank\" rel=\"external\">文章</a>，需要注意到的是注册的时候要填写数据库用户名和密码，请牢记你的用户名和密码，同时建议把mysql添加到系统启动目录，这样可以实现开机自启，避免了每次开机在命令行输入<code>net start mysql</code> 的繁琐步骤。当开机以后在系统进程里面看到一个叫mysqld.exe的进程时，说明mysql启动成功了. <img src=\"http://onep1caa3.bkt.clouddn.com/1.png\" alt=\"\"><h3 id=\"2-数据库可视化工具的使用\"><a href=\"#2-数据库可视化工具的使用\" class=\"headerlink\" title=\"2.数据库可视化工具的使用\"></a>2.数据库可视化工具的使用</h3>为了减少操作的难度，我使用了可视化的数据库操作工具，这里推荐一款名为Navicat for MySql的可视化工具，使用起来十分方便。操作也很简单，登陆数据库的时候，用户填root,密码就是配置数据库时的密码， 链接名可以随便起，端口号为3306，主机名默认localhost不用修改。登陆以后可以实现增删数据库，增删表的操作。  </li>\n</ul>\n<p><img src=\"http://onep1caa3.bkt.clouddn.com/2.png\" alt=\"\">  </p>\n<h3 id=\"3-配置mysql\"><a href=\"#3-配置mysql\" class=\"headerlink\" title=\"3.配置mysql\"></a>3.配置mysql</h3><p>以我自己的数据库为例，新建数据库azkaban（这是我学弟项目的名字），在这个数据库里新建表excutors。<br><img src=\"http://onep1caa3.bkt.clouddn.com/3.png\" alt=\"\"><br>接着设计表元素，这里我添加了id，host,port,active四个选项接着保存表。<br><img src=\"http://onep1caa3.bkt.clouddn.com/4.png\" alt=\"\">  </p>\n<h2 id=\"项目设计\"><a href=\"#项目设计\" class=\"headerlink\" title=\"项目设计\"></a>项目设计</h2><p>我们要实现的目的比较简单。使用<code>express demo1</code>可以新建名为demo1的工程，工程目录如下.<br><img src=\"http://onep1caa3.bkt.clouddn.com/5.png\" alt=\"\">  </p>\n<p>接下来的步骤：  </p>\n<ul>\n<li>在package.json中田间mysql依赖： <code>&quot;mysql&quot;:&quot;latest&quot;</code> ,使用node.js中的<code>npm install</code> 命令安装依赖包。  </li>\n<li>编写录入信息界面register.jade文件,用来实现简单的信息录入界面以及使用$.ajax()的post方法向服务器发起登陆请求。代码如下：  </li>\n</ul>\n<blockquote>\n<pre><code>doctype html\nhtml\nhead\ntitle\nlink(rel=&apos;stylesheet&apos;, href=&apos;/bootstrap-3.3.7-dist/css/bootstrap.min.css&apos;)\nscript(src=&apos;/javascripts/jquery-3.1.1.min.js&apos;)\nscript(src=&apos;/bootstrap-3.3.7-dist/js/bootstrap.min.js&apos;)\nbody(style=&apos;background: #dcd9da&apos;)\n.container\n  .row\n    .col-md-4.col-md-offset-4\n      .panel.panel-default(style=&apos;margin-top: 60px&apos;)\n        .panel-heading(style=&apos;background: #0d6aad&apos;)\n          h3(align=&apos;center&apos;, style=&apos;color: #ffffff;&apos;)\n            | azkaban\n        .panel-body(style=&apos;background: #e0e1ea&apos;)\n          .form-group\n            .input-group\n              span.input-group-addon host\n              input#host.form-control(type=&apos;text&apos;)\n          .form-group\n            .input-group\n              span.input-group-addon port\n              input#port.form-control(type=&apos;port&apos;)\n\n          .form-group\n            .input-group\n              span.input-group-addon active\n              input#active.form-control(type=&apos;text&apos;)\n          .form-group\n            button#register.btn.btn-success.btn-block(type=&apos;button&apos;)\n              | log in\n          #popup.alert.alert-warning\n            a#close.close(href=&apos;#&apos;) &amp;times;\n            div(align=&apos;center&apos;)\n              strong#popup-content(style=&apos;color: #b12e30;&apos;)\nscript(type=&apos;text/javascript&apos;).\n  $(document).ready(function () {\n    var host = $(&quot;#host&quot;);\n    var port = $(&quot;#port&quot;);\n    var active = $(&quot;#active&quot;);\n    var register = $(&quot;#register&quot;);\n    var popup = $(&quot;#popup&quot;);\n    var popupContent = $(&quot;#popup-content&quot;);\n    var close = $(&quot;#close&quot;);\n    popup.hide();\n    close.click(function () {\n      popup.hide();\n    });\n    register.click(function () {\n      if (host.val() == &quot;&quot; || port.val() == &quot;&quot; || active.val() == &quot;&quot;) {\n        popup.show();\n        popupContent.html(&quot;can&apos;t be empty！&quot;);}  \n      else {\n        $.ajax({\n          url: &quot;/register/userRegister&quot;,\n          data: {\n            host: $(&quot;#host&quot;).val(),\n            port: $(&quot;#port&quot;).val(),\n            active: $(&quot;#active&quot;).val()\n                },\n          type: &quot;POST&quot;,\n          timeout: 36000,\n          dataType: &quot;text&quot;,\n          success: function (data, textStatus) {\n            var dataJson = eval(&quot;(&quot; + data + &quot;)&quot;);\n            if (dataJson.code == 200) {\n              alert(&quot;success&quot;);\n            } else if (dataJson.code == 400) {\n              popup.show();\n              popupContent.html(&quot;fail,please retry！&quot;);\n            } else {\n              popup.show();\n              popupContent.html(&quot;error！&quot;);\n            }\n          },\n          error: function (XMLHttpRequest, textStatus, errorThrown) {\n            alert(&quot;error:&quot; + textStatus);\n          }\n        });\n      }\n    });\n  });\n</code></pre></blockquote>\n<ul>\n<li>编写录入信息路由register.js文件  </li>\n</ul>\n<hr>\n<blockquote>\n<pre><code>var express = require(&apos;express&apos;);\nvar router = express.Router();\n\nvar mysql = require(&apos;mysql&apos;);\nvar config = require(&apos;../model/config&apos;);\n\nvar pool = mysql.createPool(config.mysql);\n/* GET home page. */\nrouter.get(&apos;/&apos;, function (req, res, next) {\n  res.render(&apos;register&apos;, {title: &apos;register&apos;});\n});\nrouter.post(&apos;/userRegister&apos;, function (req, res, next) {\n  var host = req.body.host;\n  var port = req.body.port;\n  var active = req.body.active; \n  pool.getConnection(function (err, connection) {\nvar $sql1 = &quot;INSERT INTO executors(id, host, port, active) VALUES(0,?,?,?)&quot;;\nconnection.query($sql1, [host, port, active], function (err, result) {\n  console.log(result);\n  if (result) {\nresult = {\n  code: 200,\n  msg: &apos;success&apos;\n};\n  } else {\nresult = {\n  code: 400,\n  msg: &apos;fail&apos;\n};\n  }\n  res.json(result);\n  connection.release();\n});\n\n});\n  });\nmodule.exports = router;  \n</code></pre></blockquote>\n<ul>\n<li>在app.js中增加register的界面和路由  </li>\n</ul>\n<p><img src=\"http://onep1caa3.bkt.clouddn.com/7.png\" alt=\"\"> </p>\n<ul>\n<li><p>设置连接数据库参数model/config.js 。在这里我使用用户azkaban创建了数据库azkaban。 </p>\n<blockquote>\n<pre><code>module.exports = {\n  mysql: {\nhost: &apos;127.0.0.1&apos;,\nuser: &apos;azkaban&apos;,\npassword: &apos;&apos;,\ndatabase: &apos;azkaban&apos;,\nport: 3306\n  }\n};\n</code></pre></blockquote>\n</li>\n<li><p>项目运行，在命令行输入<code>npm start</code>来启动应用，接着访问<a href=\"http://localhost:3000/register\" target=\"_blank\" rel=\"external\">http://localhost:3000/register</a><br>查看网页。<br><img src=\"http://onep1caa3.bkt.clouddn.com/8.png\" alt=\"\">  </p>\n</li>\n<li>输入数据查看是否能录入到数据库<br><img src=\"http://onep1caa3.bkt.clouddn.com/9.png\" alt=\"\"><br><img src=\"http://onep1caa3.bkt.clouddn.com/10.png\" alt=\"\"><br><img src=\"http://onep1caa3.bkt.clouddn.com/11.png\" alt=\"\"><br>这样我们就完成一个简单的功能的实现！</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>最近几天一直在搞这个东西，越学越发现自己的知识太少。从express搭建网页结构开始，发现需要掌握jade的缩进书写规则，真的蛋疼，一不小心就写错了。接着看怎么把数据导入到mysql，又需要ajax方法，由于我没有基础，只能先去看使用jquery封装的ajax方法，本身jquery也不太熟悉，又恶补了一波jquery。另外数据库这方面我也是小白，所以又去看了mysql的基本语句，前后用了将近一星期时间。写下这篇文章，便于以后翻到看看自己有多菜哈哈。  </p>\n<h2 id=\"实现的功能\"><a href=\"#实现的功能\" class=\"headerlink\" title=\"实现的功能\"></a>实现的功能</h2><p>简单的网页数据保存到mysql数据库的功能。（在windows平台）  </p>\n<h2 id=\"项目环境准备\"><a href=\"#项目环境准备\" class=\"headerlink\" title=\"项目环境准备\"></a>项目环境准备</h2><h3 id=\"1-node-js和npm的安装\"><a href=\"#1-node-js和npm的安装\" class=\"headerlink\" title=\"1.node.js和npm的安装\"></a>1.node.js和npm的安装</h3><h3 id=\"2-express的安装\"><a href=\"#2-express的安装\" class=\"headerlink\" title=\"2.express的安装\"></a>2.express的安装</h3><ul>\n<li>express的安装可以使用npm，可以使用命令 <code>npm install express -g</code> 来进行express的全局安装。express是构建网页基本框架的工具。<h2 id=\"mysql数据库的设计\"><a href=\"#mysql数据库的设计\" class=\"headerlink\" title=\"mysql数据库的设计\"></a>mysql数据库的设计</h2><h3 id=\"1-mysql下载安装与启动\"><a href=\"#1-mysql下载安装与启动\" class=\"headerlink\" title=\"1.mysql下载安装与启动\"></a>1.mysql下载安装与启动</h3>mysql的下载安装可以到mysql官网进行，具体的安装流程要取决于你的电脑，安装方法网上有很多，这里给出一篇我随便在百度搜索到的<a href=\"http://www.cnblogs.com/fnlingnzb-learner/p/6009153.html\">文章</a>，需要注意到的是注册的时候要填写数据库用户名和密码，请牢记你的用户名和密码，同时建议把mysql添加到系统启动目录，这样可以实现开机自启，避免了每次开机在命令行输入<code>net start mysql</code> 的繁琐步骤。当开机以后在系统进程里面看到一个叫mysqld.exe的进程时，说明mysql启动成功了. <img src=\"http://onep1caa3.bkt.clouddn.com/1.png\" alt=\"\"><h3 id=\"2-数据库可视化工具的使用\"><a href=\"#2-数据库可视化工具的使用\" class=\"headerlink\" title=\"2.数据库可视化工具的使用\"></a>2.数据库可视化工具的使用</h3>为了减少操作的难度，我使用了可视化的数据库操作工具，这里推荐一款名为Navicat for MySql的可视化工具，使用起来十分方便。操作也很简单，登陆数据库的时候，用户填root,密码就是配置数据库时的密码， 链接名可以随便起，端口号为3306，主机名默认localhost不用修改。登陆以后可以实现增删数据库，增删表的操作。  </li>\n</ul>\n<p><img src=\"http://onep1caa3.bkt.clouddn.com/2.png\" alt=\"\">  </p>\n<h3 id=\"3-配置mysql\"><a href=\"#3-配置mysql\" class=\"headerlink\" title=\"3.配置mysql\"></a>3.配置mysql</h3><p>以我自己的数据库为例，新建数据库azkaban（这是我学弟项目的名字），在这个数据库里新建表excutors。<br><img src=\"http://onep1caa3.bkt.clouddn.com/3.png\" alt=\"\"><br>接着设计表元素，这里我添加了id，host,port,active四个选项接着保存表。<br><img src=\"http://onep1caa3.bkt.clouddn.com/4.png\" alt=\"\">  </p>\n<h2 id=\"项目设计\"><a href=\"#项目设计\" class=\"headerlink\" title=\"项目设计\"></a>项目设计</h2><p>我们要实现的目的比较简单。使用<code>express demo1</code>可以新建名为demo1的工程，工程目录如下.<br><img src=\"http://onep1caa3.bkt.clouddn.com/5.png\" alt=\"\">  </p>\n<p>接下来的步骤：  </p>\n<ul>\n<li>在package.json中田间mysql依赖： <code>&quot;mysql&quot;:&quot;latest&quot;</code> ,使用node.js中的<code>npm install</code> 命令安装依赖包。  </li>\n<li>编写录入信息界面register.jade文件,用来实现简单的信息录入界面以及使用$.ajax()的post方法向服务器发起登陆请求。代码如下：  </li>\n</ul>\n<blockquote>\n<pre><code>doctype html\nhtml\nhead\ntitle\nlink(rel=&apos;stylesheet&apos;, href=&apos;/bootstrap-3.3.7-dist/css/bootstrap.min.css&apos;)\nscript(src=&apos;/javascripts/jquery-3.1.1.min.js&apos;)\nscript(src=&apos;/bootstrap-3.3.7-dist/js/bootstrap.min.js&apos;)\nbody(style=&apos;background: #dcd9da&apos;)\n.container\n  .row\n    .col-md-4.col-md-offset-4\n      .panel.panel-default(style=&apos;margin-top: 60px&apos;)\n        .panel-heading(style=&apos;background: #0d6aad&apos;)\n          h3(align=&apos;center&apos;, style=&apos;color: #ffffff;&apos;)\n            | azkaban\n        .panel-body(style=&apos;background: #e0e1ea&apos;)\n          .form-group\n            .input-group\n              span.input-group-addon host\n              input#host.form-control(type=&apos;text&apos;)\n          .form-group\n            .input-group\n              span.input-group-addon port\n              input#port.form-control(type=&apos;port&apos;)\n\n          .form-group\n            .input-group\n              span.input-group-addon active\n              input#active.form-control(type=&apos;text&apos;)\n          .form-group\n            button#register.btn.btn-success.btn-block(type=&apos;button&apos;)\n              | log in\n          #popup.alert.alert-warning\n            a#close.close(href=&apos;#&apos;) &amp;times;\n            div(align=&apos;center&apos;)\n              strong#popup-content(style=&apos;color: #b12e30;&apos;)\nscript(type=&apos;text/javascript&apos;).\n  $(document).ready(function () {\n    var host = $(&quot;#host&quot;);\n    var port = $(&quot;#port&quot;);\n    var active = $(&quot;#active&quot;);\n    var register = $(&quot;#register&quot;);\n    var popup = $(&quot;#popup&quot;);\n    var popupContent = $(&quot;#popup-content&quot;);\n    var close = $(&quot;#close&quot;);\n    popup.hide();\n    close.click(function () {\n      popup.hide();\n    });\n    register.click(function () {\n      if (host.val() == &quot;&quot; || port.val() == &quot;&quot; || active.val() == &quot;&quot;) {\n        popup.show();\n        popupContent.html(&quot;can&apos;t be empty！&quot;);}  \n      else {\n        $.ajax({\n          url: &quot;/register/userRegister&quot;,\n          data: {\n            host: $(&quot;#host&quot;).val(),\n            port: $(&quot;#port&quot;).val(),\n            active: $(&quot;#active&quot;).val()\n                },\n          type: &quot;POST&quot;,\n          timeout: 36000,\n          dataType: &quot;text&quot;,\n          success: function (data, textStatus) {\n            var dataJson = eval(&quot;(&quot; + data + &quot;)&quot;);\n            if (dataJson.code == 200) {\n              alert(&quot;success&quot;);\n            } else if (dataJson.code == 400) {\n              popup.show();\n              popupContent.html(&quot;fail,please retry！&quot;);\n            } else {\n              popup.show();\n              popupContent.html(&quot;error！&quot;);\n            }\n          },\n          error: function (XMLHttpRequest, textStatus, errorThrown) {\n            alert(&quot;error:&quot; + textStatus);\n          }\n        });\n      }\n    });\n  });\n</code></pre></blockquote>\n<ul>\n<li>编写录入信息路由register.js文件  </li>\n</ul>\n<hr>\n<blockquote>\n<pre><code>var express = require(&apos;express&apos;);\nvar router = express.Router();\n\nvar mysql = require(&apos;mysql&apos;);\nvar config = require(&apos;../model/config&apos;);\n\nvar pool = mysql.createPool(config.mysql);\n/* GET home page. */\nrouter.get(&apos;/&apos;, function (req, res, next) {\n  res.render(&apos;register&apos;, {title: &apos;register&apos;});\n});\nrouter.post(&apos;/userRegister&apos;, function (req, res, next) {\n  var host = req.body.host;\n  var port = req.body.port;\n  var active = req.body.active; \n  pool.getConnection(function (err, connection) {\nvar $sql1 = &quot;INSERT INTO executors(id, host, port, active) VALUES(0,?,?,?)&quot;;\nconnection.query($sql1, [host, port, active], function (err, result) {\n  console.log(result);\n  if (result) {\nresult = {\n  code: 200,\n  msg: &apos;success&apos;\n};\n  } else {\nresult = {\n  code: 400,\n  msg: &apos;fail&apos;\n};\n  }\n  res.json(result);\n  connection.release();\n});\n\n});\n  });\nmodule.exports = router;  \n</code></pre></blockquote>\n<ul>\n<li>在app.js中增加register的界面和路由  </li>\n</ul>\n<p><img src=\"http://onep1caa3.bkt.clouddn.com/7.png\" alt=\"\"> </p>\n<ul>\n<li><p>设置连接数据库参数model/config.js 。在这里我使用用户azkaban创建了数据库azkaban。 </p>\n<blockquote>\n<pre><code>module.exports = {\n  mysql: {\nhost: &apos;127.0.0.1&apos;,\nuser: &apos;azkaban&apos;,\npassword: &apos;&apos;,\ndatabase: &apos;azkaban&apos;,\nport: 3306\n  }\n};\n</code></pre></blockquote>\n</li>\n<li><p>项目运行，在命令行输入<code>npm start</code>来启动应用，接着访问<a href=\"http://localhost:3000/register\">http://localhost:3000/register</a><br>查看网页。<br><img src=\"http://onep1caa3.bkt.clouddn.com/8.png\" alt=\"\">  </p>\n</li>\n<li>输入数据查看是否能录入到数据库<br><img src=\"http://onep1caa3.bkt.clouddn.com/9.png\" alt=\"\"><br><img src=\"http://onep1caa3.bkt.clouddn.com/10.png\" alt=\"\"><br><img src=\"http://onep1caa3.bkt.clouddn.com/11.png\" alt=\"\"><br>这样我们就完成一个简单的功能的实现！</li>\n</ul>\n"},{"title":"git的介绍和使用","_content":"## git的介绍 \n\ngit是世界上最先进的分布式版本控制系统，可以实现协作编辑，记录文件改动等功能，由linus公司于2005年开发，接着git迅速成为最流行的分布式版本控制系统，在2008年GitHub上线，git为GitHub提供免费git存储，无数开源项目开始迁移至GitHub，包括jQuery，php，ruby等。git属于分布式版本控制系统，它没有所谓的中央服务器，每个人的电脑都有完整的版本库。这样不会因为中央服务器宕机导致网络瘫痪。\n## 创建版本库 \n\n 版本库又名仓库，英文名repository，可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。  \n创建一个版本库十分简单，首先选择一个合适的位置，windows下最好选择英文目录，接着打开指定git bash，cd到指定目录，我的是`D:\\gitrepository`，接着通过`git init`命令把这个目录变成git可以管理的仓库。系统会告诉你这是一个空的仓库，同时目录里面多了一个.git目录，这个目录是用来跟踪管理版本的，没事不要去修改，同时这个目录默认是隐藏的。  \n![](http://onep1caa3.bkt.clouddn.com/04.21.1.png)  \n \n## 把文件添加到版本库\n\n所有的版本控制系统，其实只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等，Git也不例外。版本控制系统可以告诉你每次的改动，比如在第5行加了一个单词“Linux”，在第8行删了一个单词“Windows”。而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是只知道图片从100KB改成了120KB，但到底改了啥，版本控制系统不知道，也没法知道。\n\n不幸的是，Microsoft的Word格式是二进制格式，因此，版本控制系统是没法跟踪Word文件的改动的。因为文本是有编码的，比如中文有常用的GBK编码，日文有Shift_JIS编码，如果没有历史遗留问题，强烈建议使用标准的UTF-8编码，所有语言使用同一种编码，既没有冲突，又被所有平台所支持。 \n同时强烈建议Windows平台用户不要使用自带的记事本编辑任何文本文件，这样经常会引起各种报错。推荐一个文本编辑工具叫做nodepad++，功能强大且免费，同时需要把默认编码设置为UTF-8 without BOM。  \n接下来我们添加文件的功能。  \n首先我们在gitrepository文件夹下新建一个名为readme.txt的文件，内容如下：  \n> Git is a version control system.  \n> Git is free software.\n  \n接着执行`git add readme.txt`命令，执行之后没没有任何反应，说明命令执行成功！  \n接下来，用命令git commit 告诉git，把文件提交到仓库。`git commit -m\"wrote a readme file\"`,这样文件就成功提交了。-m之后是本次提交的声明，可以输入任何内容，这样可以从历史纪录中方便地找到改动的记录。另外，commit一次性地可以提交很多文件。  \n\n\n![](http://onep1caa3.bkt.clouddn.com/04.21.2.png)  \n \n## 时光穿梭机   \n \n我们继续修改readme.txt中的内容，修改为  \n> Git is a distributed version control system.  \n> Git is free software.  \n\n然后运行`git status`，查看结果：  \n![](http://onep1caa3.bkt.clouddn.com/04.22.1.png)  \n这个命令告诉我们，readme.txt已经被修改了，但是还没有准备提交的修改。  \n通过`git diff`命令可以查看具体的修改内容：  \n![](http://onep1caa3.bkt.clouddn.com/04.22.2.png)  \n接着就是`git add` 和`git commit -m`命令来提交提交以后的文件了。  \n### 版本回退  \n \n现在我们有两个版本的readme.txt了，使用`git log`命令可以查看历史纪录：  \n\n![](http://onep1caa3.bkt.clouddn.com/04.22.3.png)  \n使用可视化git工具，可以看到git会把版本变化记录串成一条时间线。接着我们要使用“时光穿梭机”功能，head表示当前版本，也就是最新的版本，上一个版本就是head^，或者head~1，以此类推。\n我们使用`git reset -- hard HEAD^`来回退到上一个版本。  \n![](http://onep1caa3.bkt.clouddn.com/04.22.4.png)  \n这时第二个版本已经不存在了，可以通过前面的commit id来查找，接着执行g`it reset --hrad commit id`命令来恢复，前提是你没有关闭命令窗口。关闭之后也有办法，执行`git reflog`用来记录你的每一次命令，就可以找到每次的commit id：  \n![](http://onep1caa3.bkt.clouddn.com/04.22.5.png)  \n### 工作区和暂存区  \n#### 工作区  \n指在电脑上可以看到的目录。 \n#### 版本库  \n工作区中隐藏的.git目录，称为git的版本库。版本库中包含一个叫stage（或者index）的暂存区，还有git为我们创建的一第个分支master，以及指向master的一个名为head的指针。  \n把文件向git版本库中添加时，是分两步执行的：  \n第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；\n\n第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。\n\n因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。  \n### 管理修改  \ngit管理的是修改，而不是文件。需要注意的是，每次修改之后，如果不add到暂存区，是不会加入到commit中的。 \n### 撤销修改  \n使用`git checkout --readme.txt`命令可以撤销修改。这里有两种情况：  \n一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；\n\n一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。  \n总之，就是让这个文件回到最近一次git commit或git add时的状态。  \ngit checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到git checkout命令。  \n![](https://marklodato.github.io/visual-git-guide/basic-usage.svg)    \n\n* git add files 把当前文件放入暂存区域。\n* git commit 给暂存区域生成快照并提交。\n* git reset -- files 用来撤销最后一次git add files，你也可以用git reset 撤销所有暂存区域文件。\n* git checkout -- files 把文件从暂存区域复制到工作目录，用来丢弃本地修改。   \n\n \n### 删除文件  \n命令`git rm`可以用于删除一个文件，如果这个文件已经提交到版本库，那么你永远不会担心会误删，可以进行一键还原操作。执行git status命令可以告诉你那个文件被删除了。执行`git rm`之后，再执行`git commit`就可以从版本库中删除该文件了。  \n## 远程仓库  \n对于github这种远程仓库，本地的git仓库与GitHub之间的传输是通过ssh加密的，所以需要添加ssh key，然后绑定在自己的github仓库上。   \n现在的情景是，你已经在本地创建了一个Git仓库后，又想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步，这样，GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作。  \n首先，登陆github，创建新仓库，填入名称gitrepository，替他保持默认设置。  \n接着执行`git remote add origin git@github.com:hhb1994/gitrepository`命令来关联，远程仓库的名字就是origin，下一步就是推送内容：`git push -u origin master`  \n ![](http://onep1caa3.bkt.clouddn.com/04.22.6.png)  \n把本地库的内容推送到远程，使用`git push`命令，实际上是把master分支推送到远程。由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。  \n推送成功后，可以立刻在GitHub页面中看到远程库的内容已经和本地一模一样：  \n![](http://onep1caa3.bkt.clouddn.com/04.22.7.png)  \n从现在开始，只要本地做了提交，就可以通过命令git push origin master把本地的master分支的最新内容推送到github！\n## 从远程仓库克隆  \n使用命令git clone来克隆一个本地库：  \n\n    git clone git@github.com:hhb1994/hhb1994.github.io.git  \n![](http://onep1caa3.bkt.clouddn.com/04.22.8.png)  \n\n## 分支管理  \n分支在实际中有什么用呢？假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。现在有了分支，就不用怕了。你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。其他版本控制系统如SVN等都有分支管理，但是用过之后你会发现，这些版本控制系统创建和切换分支比蜗牛还慢，简直让人无法忍受，结果分支功能成了摆设，大家都不去用。但Git的分支是与众不同的，无论创建、切换和删除分支，Git在1秒钟之内就能完成！无论你的版本库是1个文件还是1万个文件。  \n### 创建与管理分支  \n  \nGit鼓励大量使用分支：\n\n查看分支：git branch\n\n创建分支：git branch <name>\n\n切换分支：git checkout <name>\n\n创建+切换分支：git checkout -b <name>\n\n合并某分支到当前分支：git merge <name>\n\n删除分支：git branch -d <name>","source":"_posts/2017.04.21.git.md","raw":"---\ntitle: git的介绍和使用\ntags: [git]\ncategories: 知识 \n---\n## git的介绍 \n\ngit是世界上最先进的分布式版本控制系统，可以实现协作编辑，记录文件改动等功能，由linus公司于2005年开发，接着git迅速成为最流行的分布式版本控制系统，在2008年GitHub上线，git为GitHub提供免费git存储，无数开源项目开始迁移至GitHub，包括jQuery，php，ruby等。git属于分布式版本控制系统，它没有所谓的中央服务器，每个人的电脑都有完整的版本库。这样不会因为中央服务器宕机导致网络瘫痪。\n## 创建版本库 \n\n 版本库又名仓库，英文名repository，可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。  \n创建一个版本库十分简单，首先选择一个合适的位置，windows下最好选择英文目录，接着打开指定git bash，cd到指定目录，我的是`D:\\gitrepository`，接着通过`git init`命令把这个目录变成git可以管理的仓库。系统会告诉你这是一个空的仓库，同时目录里面多了一个.git目录，这个目录是用来跟踪管理版本的，没事不要去修改，同时这个目录默认是隐藏的。  \n![](http://onep1caa3.bkt.clouddn.com/04.21.1.png)  \n \n## 把文件添加到版本库\n\n所有的版本控制系统，其实只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等，Git也不例外。版本控制系统可以告诉你每次的改动，比如在第5行加了一个单词“Linux”，在第8行删了一个单词“Windows”。而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是只知道图片从100KB改成了120KB，但到底改了啥，版本控制系统不知道，也没法知道。\n\n不幸的是，Microsoft的Word格式是二进制格式，因此，版本控制系统是没法跟踪Word文件的改动的。因为文本是有编码的，比如中文有常用的GBK编码，日文有Shift_JIS编码，如果没有历史遗留问题，强烈建议使用标准的UTF-8编码，所有语言使用同一种编码，既没有冲突，又被所有平台所支持。 \n同时强烈建议Windows平台用户不要使用自带的记事本编辑任何文本文件，这样经常会引起各种报错。推荐一个文本编辑工具叫做nodepad++，功能强大且免费，同时需要把默认编码设置为UTF-8 without BOM。  \n接下来我们添加文件的功能。  \n首先我们在gitrepository文件夹下新建一个名为readme.txt的文件，内容如下：  \n> Git is a version control system.  \n> Git is free software.\n  \n接着执行`git add readme.txt`命令，执行之后没没有任何反应，说明命令执行成功！  \n接下来，用命令git commit 告诉git，把文件提交到仓库。`git commit -m\"wrote a readme file\"`,这样文件就成功提交了。-m之后是本次提交的声明，可以输入任何内容，这样可以从历史纪录中方便地找到改动的记录。另外，commit一次性地可以提交很多文件。  \n\n\n![](http://onep1caa3.bkt.clouddn.com/04.21.2.png)  \n \n## 时光穿梭机   \n \n我们继续修改readme.txt中的内容，修改为  \n> Git is a distributed version control system.  \n> Git is free software.  \n\n然后运行`git status`，查看结果：  \n![](http://onep1caa3.bkt.clouddn.com/04.22.1.png)  \n这个命令告诉我们，readme.txt已经被修改了，但是还没有准备提交的修改。  \n通过`git diff`命令可以查看具体的修改内容：  \n![](http://onep1caa3.bkt.clouddn.com/04.22.2.png)  \n接着就是`git add` 和`git commit -m`命令来提交提交以后的文件了。  \n### 版本回退  \n \n现在我们有两个版本的readme.txt了，使用`git log`命令可以查看历史纪录：  \n\n![](http://onep1caa3.bkt.clouddn.com/04.22.3.png)  \n使用可视化git工具，可以看到git会把版本变化记录串成一条时间线。接着我们要使用“时光穿梭机”功能，head表示当前版本，也就是最新的版本，上一个版本就是head^，或者head~1，以此类推。\n我们使用`git reset -- hard HEAD^`来回退到上一个版本。  \n![](http://onep1caa3.bkt.clouddn.com/04.22.4.png)  \n这时第二个版本已经不存在了，可以通过前面的commit id来查找，接着执行g`it reset --hrad commit id`命令来恢复，前提是你没有关闭命令窗口。关闭之后也有办法，执行`git reflog`用来记录你的每一次命令，就可以找到每次的commit id：  \n![](http://onep1caa3.bkt.clouddn.com/04.22.5.png)  \n### 工作区和暂存区  \n#### 工作区  \n指在电脑上可以看到的目录。 \n#### 版本库  \n工作区中隐藏的.git目录，称为git的版本库。版本库中包含一个叫stage（或者index）的暂存区，还有git为我们创建的一第个分支master，以及指向master的一个名为head的指针。  \n把文件向git版本库中添加时，是分两步执行的：  \n第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；\n\n第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。\n\n因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。  \n### 管理修改  \ngit管理的是修改，而不是文件。需要注意的是，每次修改之后，如果不add到暂存区，是不会加入到commit中的。 \n### 撤销修改  \n使用`git checkout --readme.txt`命令可以撤销修改。这里有两种情况：  \n一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；\n\n一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。  \n总之，就是让这个文件回到最近一次git commit或git add时的状态。  \ngit checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到git checkout命令。  \n![](https://marklodato.github.io/visual-git-guide/basic-usage.svg)    \n\n* git add files 把当前文件放入暂存区域。\n* git commit 给暂存区域生成快照并提交。\n* git reset -- files 用来撤销最后一次git add files，你也可以用git reset 撤销所有暂存区域文件。\n* git checkout -- files 把文件从暂存区域复制到工作目录，用来丢弃本地修改。   \n\n \n### 删除文件  \n命令`git rm`可以用于删除一个文件，如果这个文件已经提交到版本库，那么你永远不会担心会误删，可以进行一键还原操作。执行git status命令可以告诉你那个文件被删除了。执行`git rm`之后，再执行`git commit`就可以从版本库中删除该文件了。  \n## 远程仓库  \n对于github这种远程仓库，本地的git仓库与GitHub之间的传输是通过ssh加密的，所以需要添加ssh key，然后绑定在自己的github仓库上。   \n现在的情景是，你已经在本地创建了一个Git仓库后，又想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步，这样，GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作。  \n首先，登陆github，创建新仓库，填入名称gitrepository，替他保持默认设置。  \n接着执行`git remote add origin git@github.com:hhb1994/gitrepository`命令来关联，远程仓库的名字就是origin，下一步就是推送内容：`git push -u origin master`  \n ![](http://onep1caa3.bkt.clouddn.com/04.22.6.png)  \n把本地库的内容推送到远程，使用`git push`命令，实际上是把master分支推送到远程。由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。  \n推送成功后，可以立刻在GitHub页面中看到远程库的内容已经和本地一模一样：  \n![](http://onep1caa3.bkt.clouddn.com/04.22.7.png)  \n从现在开始，只要本地做了提交，就可以通过命令git push origin master把本地的master分支的最新内容推送到github！\n## 从远程仓库克隆  \n使用命令git clone来克隆一个本地库：  \n\n    git clone git@github.com:hhb1994/hhb1994.github.io.git  \n![](http://onep1caa3.bkt.clouddn.com/04.22.8.png)  \n\n## 分支管理  \n分支在实际中有什么用呢？假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。现在有了分支，就不用怕了。你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。其他版本控制系统如SVN等都有分支管理，但是用过之后你会发现，这些版本控制系统创建和切换分支比蜗牛还慢，简直让人无法忍受，结果分支功能成了摆设，大家都不去用。但Git的分支是与众不同的，无论创建、切换和删除分支，Git在1秒钟之内就能完成！无论你的版本库是1个文件还是1万个文件。  \n### 创建与管理分支  \n  \nGit鼓励大量使用分支：\n\n查看分支：git branch\n\n创建分支：git branch <name>\n\n切换分支：git checkout <name>\n\n创建+切换分支：git checkout -b <name>\n\n合并某分支到当前分支：git merge <name>\n\n删除分支：git branch -d <name>","slug":"2017.04.21.git","published":1,"date":"2017-04-22T06:30:56.000Z","updated":"2017-04-22T06:30:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwvh25e30056w39zvfj9t99k","content":"<h2 id=\"git的介绍\"><a href=\"#git的介绍\" class=\"headerlink\" title=\"git的介绍\"></a>git的介绍</h2><p>git是世界上最先进的分布式版本控制系统，可以实现协作编辑，记录文件改动等功能，由linus公司于2005年开发，接着git迅速成为最流行的分布式版本控制系统，在2008年GitHub上线，git为GitHub提供免费git存储，无数开源项目开始迁移至GitHub，包括jQuery，php，ruby等。git属于分布式版本控制系统，它没有所谓的中央服务器，每个人的电脑都有完整的版本库。这样不会因为中央服务器宕机导致网络瘫痪。</p>\n<h2 id=\"创建版本库\"><a href=\"#创建版本库\" class=\"headerlink\" title=\"创建版本库\"></a>创建版本库</h2><p> 版本库又名仓库，英文名repository，可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。<br>创建一个版本库十分简单，首先选择一个合适的位置，windows下最好选择英文目录，接着打开指定git bash，cd到指定目录，我的是<code>D:\\gitrepository</code>，接着通过<code>git init</code>命令把这个目录变成git可以管理的仓库。系统会告诉你这是一个空的仓库，同时目录里面多了一个.git目录，这个目录是用来跟踪管理版本的，没事不要去修改，同时这个目录默认是隐藏的。<br><img src=\"http://onep1caa3.bkt.clouddn.com/04.21.1.png\" alt=\"\">  </p>\n<h2 id=\"把文件添加到版本库\"><a href=\"#把文件添加到版本库\" class=\"headerlink\" title=\"把文件添加到版本库\"></a>把文件添加到版本库</h2><p>所有的版本控制系统，其实只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等，Git也不例外。版本控制系统可以告诉你每次的改动，比如在第5行加了一个单词“Linux”，在第8行删了一个单词“Windows”。而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是只知道图片从100KB改成了120KB，但到底改了啥，版本控制系统不知道，也没法知道。</p>\n<p>不幸的是，Microsoft的Word格式是二进制格式，因此，版本控制系统是没法跟踪Word文件的改动的。因为文本是有编码的，比如中文有常用的GBK编码，日文有Shift_JIS编码，如果没有历史遗留问题，强烈建议使用标准的UTF-8编码，所有语言使用同一种编码，既没有冲突，又被所有平台所支持。<br>同时强烈建议Windows平台用户不要使用自带的记事本编辑任何文本文件，这样经常会引起各种报错。推荐一个文本编辑工具叫做nodepad++，功能强大且免费，同时需要把默认编码设置为UTF-8 without BOM。<br>接下来我们添加文件的功能。<br>首先我们在gitrepository文件夹下新建一个名为readme.txt的文件，内容如下：  </p>\n<blockquote>\n<p>Git is a version control system.<br>Git is free software.</p>\n</blockquote>\n<p>接着执行<code>git add readme.txt</code>命令，执行之后没没有任何反应，说明命令执行成功！<br>接下来，用命令git commit 告诉git，把文件提交到仓库。<code>git commit -m&quot;wrote a readme file&quot;</code>,这样文件就成功提交了。-m之后是本次提交的声明，可以输入任何内容，这样可以从历史纪录中方便地找到改动的记录。另外，commit一次性地可以提交很多文件。  </p>\n<p><img src=\"http://onep1caa3.bkt.clouddn.com/04.21.2.png\" alt=\"\">  </p>\n<h2 id=\"时光穿梭机\"><a href=\"#时光穿梭机\" class=\"headerlink\" title=\"时光穿梭机\"></a>时光穿梭机</h2><p>我们继续修改readme.txt中的内容，修改为  </p>\n<blockquote>\n<p>Git is a distributed version control system.<br>Git is free software.  </p>\n</blockquote>\n<p>然后运行<code>git status</code>，查看结果：<br><img src=\"http://onep1caa3.bkt.clouddn.com/04.22.1.png\" alt=\"\"><br>这个命令告诉我们，readme.txt已经被修改了，但是还没有准备提交的修改。<br>通过<code>git diff</code>命令可以查看具体的修改内容：<br><img src=\"http://onep1caa3.bkt.clouddn.com/04.22.2.png\" alt=\"\"><br>接着就是<code>git add</code> 和<code>git commit -m</code>命令来提交提交以后的文件了。  </p>\n<h3 id=\"版本回退\"><a href=\"#版本回退\" class=\"headerlink\" title=\"版本回退\"></a>版本回退</h3><p>现在我们有两个版本的readme.txt了，使用<code>git log</code>命令可以查看历史纪录：  </p>\n<p><img src=\"http://onep1caa3.bkt.clouddn.com/04.22.3.png\" alt=\"\"><br>使用可视化git工具，可以看到git会把版本变化记录串成一条时间线。接着我们要使用“时光穿梭机”功能，head表示当前版本，也就是最新的版本，上一个版本就是head^，或者head~1，以此类推。<br>我们使用<code>git reset -- hard HEAD^</code>来回退到上一个版本。<br><img src=\"http://onep1caa3.bkt.clouddn.com/04.22.4.png\" alt=\"\"><br>这时第二个版本已经不存在了，可以通过前面的commit id来查找，接着执行g<code>it reset --hrad commit id</code>命令来恢复，前提是你没有关闭命令窗口。关闭之后也有办法，执行<code>git reflog</code>用来记录你的每一次命令，就可以找到每次的commit id：<br><img src=\"http://onep1caa3.bkt.clouddn.com/04.22.5.png\" alt=\"\">  </p>\n<h3 id=\"工作区和暂存区\"><a href=\"#工作区和暂存区\" class=\"headerlink\" title=\"工作区和暂存区\"></a>工作区和暂存区</h3><h4 id=\"工作区\"><a href=\"#工作区\" class=\"headerlink\" title=\"工作区\"></a>工作区</h4><p>指在电脑上可以看到的目录。 </p>\n<h4 id=\"版本库\"><a href=\"#版本库\" class=\"headerlink\" title=\"版本库\"></a>版本库</h4><p>工作区中隐藏的.git目录，称为git的版本库。版本库中包含一个叫stage（或者index）的暂存区，还有git为我们创建的一第个分支master，以及指向master的一个名为head的指针。<br>把文件向git版本库中添加时，是分两步执行的：<br>第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；</p>\n<p>第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。</p>\n<p>因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。  </p>\n<h3 id=\"管理修改\"><a href=\"#管理修改\" class=\"headerlink\" title=\"管理修改\"></a>管理修改</h3><p>git管理的是修改，而不是文件。需要注意的是，每次修改之后，如果不add到暂存区，是不会加入到commit中的。 </p>\n<h3 id=\"撤销修改\"><a href=\"#撤销修改\" class=\"headerlink\" title=\"撤销修改\"></a>撤销修改</h3><p>使用<code>git checkout --readme.txt</code>命令可以撤销修改。这里有两种情况：<br>一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</p>\n<p>一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。<br>总之，就是让这个文件回到最近一次git commit或git add时的状态。<br>git checkout – file命令中的–很重要，没有–，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到git checkout命令。<br><img src=\"https://marklodato.github.io/visual-git-guide/basic-usage.svg\" alt=\"\">    </p>\n<ul>\n<li>git add files 把当前文件放入暂存区域。</li>\n<li>git commit 给暂存区域生成快照并提交。</li>\n<li>git reset – files 用来撤销最后一次git add files，你也可以用git reset 撤销所有暂存区域文件。</li>\n<li>git checkout – files 把文件从暂存区域复制到工作目录，用来丢弃本地修改。   </li>\n</ul>\n<h3 id=\"删除文件\"><a href=\"#删除文件\" class=\"headerlink\" title=\"删除文件\"></a>删除文件</h3><p>命令<code>git rm</code>可以用于删除一个文件，如果这个文件已经提交到版本库，那么你永远不会担心会误删，可以进行一键还原操作。执行git status命令可以告诉你那个文件被删除了。执行<code>git rm</code>之后，再执行<code>git commit</code>就可以从版本库中删除该文件了。  </p>\n<h2 id=\"远程仓库\"><a href=\"#远程仓库\" class=\"headerlink\" title=\"远程仓库\"></a>远程仓库</h2><p>对于github这种远程仓库，本地的git仓库与GitHub之间的传输是通过ssh加密的，所以需要添加ssh key，然后绑定在自己的github仓库上。<br>现在的情景是，你已经在本地创建了一个Git仓库后，又想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步，这样，GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作。<br>首先，登陆github，创建新仓库，填入名称gitrepository，替他保持默认设置。<br>接着执行<code>git remote add origin git@github.com:hhb1994/gitrepository</code>命令来关联，远程仓库的名字就是origin，下一步就是推送内容：<code>git push -u origin master</code><br> <img src=\"http://onep1caa3.bkt.clouddn.com/04.22.6.png\" alt=\"\"><br>把本地库的内容推送到远程，使用<code>git push</code>命令，实际上是把master分支推送到远程。由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。<br>推送成功后，可以立刻在GitHub页面中看到远程库的内容已经和本地一模一样：<br><img src=\"http://onep1caa3.bkt.clouddn.com/04.22.7.png\" alt=\"\"><br>从现在开始，只要本地做了提交，就可以通过命令git push origin master把本地的master分支的最新内容推送到github！</p>\n<h2 id=\"从远程仓库克隆\"><a href=\"#从远程仓库克隆\" class=\"headerlink\" title=\"从远程仓库克隆\"></a>从远程仓库克隆</h2><p>使用命令git clone来克隆一个本地库：  </p>\n<pre><code>git clone git@github.com:hhb1994/hhb1994.github.io.git  \n</code></pre><p><img src=\"http://onep1caa3.bkt.clouddn.com/04.22.8.png\" alt=\"\">  </p>\n<h2 id=\"分支管理\"><a href=\"#分支管理\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h2><p>分支在实际中有什么用呢？假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。现在有了分支，就不用怕了。你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。其他版本控制系统如SVN等都有分支管理，但是用过之后你会发现，这些版本控制系统创建和切换分支比蜗牛还慢，简直让人无法忍受，结果分支功能成了摆设，大家都不去用。但Git的分支是与众不同的，无论创建、切换和删除分支，Git在1秒钟之内就能完成！无论你的版本库是1个文件还是1万个文件。  </p>\n<h3 id=\"创建与管理分支\"><a href=\"#创建与管理分支\" class=\"headerlink\" title=\"创建与管理分支\"></a>创建与管理分支</h3><p>Git鼓励大量使用分支：</p>\n<p>查看分支：git branch</p>\n<p>创建分支：git branch <name></name></p>\n<p>切换分支：git checkout <name></name></p>\n<p>创建+切换分支：git checkout -b <name></name></p>\n<p>合并某分支到当前分支：git merge <name></name></p>\n<p>删除分支：git branch -d <name></name></p>\n","excerpt":"","more":"<h2 id=\"git的介绍\"><a href=\"#git的介绍\" class=\"headerlink\" title=\"git的介绍\"></a>git的介绍</h2><p>git是世界上最先进的分布式版本控制系统，可以实现协作编辑，记录文件改动等功能，由linus公司于2005年开发，接着git迅速成为最流行的分布式版本控制系统，在2008年GitHub上线，git为GitHub提供免费git存储，无数开源项目开始迁移至GitHub，包括jQuery，php，ruby等。git属于分布式版本控制系统，它没有所谓的中央服务器，每个人的电脑都有完整的版本库。这样不会因为中央服务器宕机导致网络瘫痪。</p>\n<h2 id=\"创建版本库\"><a href=\"#创建版本库\" class=\"headerlink\" title=\"创建版本库\"></a>创建版本库</h2><p> 版本库又名仓库，英文名repository，可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。<br>创建一个版本库十分简单，首先选择一个合适的位置，windows下最好选择英文目录，接着打开指定git bash，cd到指定目录，我的是<code>D:\\gitrepository</code>，接着通过<code>git init</code>命令把这个目录变成git可以管理的仓库。系统会告诉你这是一个空的仓库，同时目录里面多了一个.git目录，这个目录是用来跟踪管理版本的，没事不要去修改，同时这个目录默认是隐藏的。<br><img src=\"http://onep1caa3.bkt.clouddn.com/04.21.1.png\" alt=\"\">  </p>\n<h2 id=\"把文件添加到版本库\"><a href=\"#把文件添加到版本库\" class=\"headerlink\" title=\"把文件添加到版本库\"></a>把文件添加到版本库</h2><p>所有的版本控制系统，其实只能跟踪文本文件的改动，比如TXT文件，网页，所有的程序代码等等，Git也不例外。版本控制系统可以告诉你每次的改动，比如在第5行加了一个单词“Linux”，在第8行删了一个单词“Windows”。而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是只知道图片从100KB改成了120KB，但到底改了啥，版本控制系统不知道，也没法知道。</p>\n<p>不幸的是，Microsoft的Word格式是二进制格式，因此，版本控制系统是没法跟踪Word文件的改动的。因为文本是有编码的，比如中文有常用的GBK编码，日文有Shift_JIS编码，如果没有历史遗留问题，强烈建议使用标准的UTF-8编码，所有语言使用同一种编码，既没有冲突，又被所有平台所支持。<br>同时强烈建议Windows平台用户不要使用自带的记事本编辑任何文本文件，这样经常会引起各种报错。推荐一个文本编辑工具叫做nodepad++，功能强大且免费，同时需要把默认编码设置为UTF-8 without BOM。<br>接下来我们添加文件的功能。<br>首先我们在gitrepository文件夹下新建一个名为readme.txt的文件，内容如下：  </p>\n<blockquote>\n<p>Git is a version control system.<br>Git is free software.</p>\n</blockquote>\n<p>接着执行<code>git add readme.txt</code>命令，执行之后没没有任何反应，说明命令执行成功！<br>接下来，用命令git commit 告诉git，把文件提交到仓库。<code>git commit -m&quot;wrote a readme file&quot;</code>,这样文件就成功提交了。-m之后是本次提交的声明，可以输入任何内容，这样可以从历史纪录中方便地找到改动的记录。另外，commit一次性地可以提交很多文件。  </p>\n<p><img src=\"http://onep1caa3.bkt.clouddn.com/04.21.2.png\" alt=\"\">  </p>\n<h2 id=\"时光穿梭机\"><a href=\"#时光穿梭机\" class=\"headerlink\" title=\"时光穿梭机\"></a>时光穿梭机</h2><p>我们继续修改readme.txt中的内容，修改为  </p>\n<blockquote>\n<p>Git is a distributed version control system.<br>Git is free software.  </p>\n</blockquote>\n<p>然后运行<code>git status</code>，查看结果：<br><img src=\"http://onep1caa3.bkt.clouddn.com/04.22.1.png\" alt=\"\"><br>这个命令告诉我们，readme.txt已经被修改了，但是还没有准备提交的修改。<br>通过<code>git diff</code>命令可以查看具体的修改内容：<br><img src=\"http://onep1caa3.bkt.clouddn.com/04.22.2.png\" alt=\"\"><br>接着就是<code>git add</code> 和<code>git commit -m</code>命令来提交提交以后的文件了。  </p>\n<h3 id=\"版本回退\"><a href=\"#版本回退\" class=\"headerlink\" title=\"版本回退\"></a>版本回退</h3><p>现在我们有两个版本的readme.txt了，使用<code>git log</code>命令可以查看历史纪录：  </p>\n<p><img src=\"http://onep1caa3.bkt.clouddn.com/04.22.3.png\" alt=\"\"><br>使用可视化git工具，可以看到git会把版本变化记录串成一条时间线。接着我们要使用“时光穿梭机”功能，head表示当前版本，也就是最新的版本，上一个版本就是head^，或者head~1，以此类推。<br>我们使用<code>git reset -- hard HEAD^</code>来回退到上一个版本。<br><img src=\"http://onep1caa3.bkt.clouddn.com/04.22.4.png\" alt=\"\"><br>这时第二个版本已经不存在了，可以通过前面的commit id来查找，接着执行g<code>it reset --hrad commit id</code>命令来恢复，前提是你没有关闭命令窗口。关闭之后也有办法，执行<code>git reflog</code>用来记录你的每一次命令，就可以找到每次的commit id：<br><img src=\"http://onep1caa3.bkt.clouddn.com/04.22.5.png\" alt=\"\">  </p>\n<h3 id=\"工作区和暂存区\"><a href=\"#工作区和暂存区\" class=\"headerlink\" title=\"工作区和暂存区\"></a>工作区和暂存区</h3><h4 id=\"工作区\"><a href=\"#工作区\" class=\"headerlink\" title=\"工作区\"></a>工作区</h4><p>指在电脑上可以看到的目录。 </p>\n<h4 id=\"版本库\"><a href=\"#版本库\" class=\"headerlink\" title=\"版本库\"></a>版本库</h4><p>工作区中隐藏的.git目录，称为git的版本库。版本库中包含一个叫stage（或者index）的暂存区，还有git为我们创建的一第个分支master，以及指向master的一个名为head的指针。<br>把文件向git版本库中添加时，是分两步执行的：<br>第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；</p>\n<p>第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。</p>\n<p>因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。  </p>\n<h3 id=\"管理修改\"><a href=\"#管理修改\" class=\"headerlink\" title=\"管理修改\"></a>管理修改</h3><p>git管理的是修改，而不是文件。需要注意的是，每次修改之后，如果不add到暂存区，是不会加入到commit中的。 </p>\n<h3 id=\"撤销修改\"><a href=\"#撤销修改\" class=\"headerlink\" title=\"撤销修改\"></a>撤销修改</h3><p>使用<code>git checkout --readme.txt</code>命令可以撤销修改。这里有两种情况：<br>一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</p>\n<p>一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。<br>总之，就是让这个文件回到最近一次git commit或git add时的状态。<br>git checkout – file命令中的–很重要，没有–，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到git checkout命令。<br><img src=\"https://marklodato.github.io/visual-git-guide/basic-usage.svg\" alt=\"\">    </p>\n<ul>\n<li>git add files 把当前文件放入暂存区域。</li>\n<li>git commit 给暂存区域生成快照并提交。</li>\n<li>git reset – files 用来撤销最后一次git add files，你也可以用git reset 撤销所有暂存区域文件。</li>\n<li>git checkout – files 把文件从暂存区域复制到工作目录，用来丢弃本地修改。   </li>\n</ul>\n<h3 id=\"删除文件\"><a href=\"#删除文件\" class=\"headerlink\" title=\"删除文件\"></a>删除文件</h3><p>命令<code>git rm</code>可以用于删除一个文件，如果这个文件已经提交到版本库，那么你永远不会担心会误删，可以进行一键还原操作。执行git status命令可以告诉你那个文件被删除了。执行<code>git rm</code>之后，再执行<code>git commit</code>就可以从版本库中删除该文件了。  </p>\n<h2 id=\"远程仓库\"><a href=\"#远程仓库\" class=\"headerlink\" title=\"远程仓库\"></a>远程仓库</h2><p>对于github这种远程仓库，本地的git仓库与GitHub之间的传输是通过ssh加密的，所以需要添加ssh key，然后绑定在自己的github仓库上。<br>现在的情景是，你已经在本地创建了一个Git仓库后，又想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步，这样，GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作。<br>首先，登陆github，创建新仓库，填入名称gitrepository，替他保持默认设置。<br>接着执行<code>git remote add origin git@github.com:hhb1994/gitrepository</code>命令来关联，远程仓库的名字就是origin，下一步就是推送内容：<code>git push -u origin master</code><br> <img src=\"http://onep1caa3.bkt.clouddn.com/04.22.6.png\" alt=\"\"><br>把本地库的内容推送到远程，使用<code>git push</code>命令，实际上是把master分支推送到远程。由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。<br>推送成功后，可以立刻在GitHub页面中看到远程库的内容已经和本地一模一样：<br><img src=\"http://onep1caa3.bkt.clouddn.com/04.22.7.png\" alt=\"\"><br>从现在开始，只要本地做了提交，就可以通过命令git push origin master把本地的master分支的最新内容推送到github！</p>\n<h2 id=\"从远程仓库克隆\"><a href=\"#从远程仓库克隆\" class=\"headerlink\" title=\"从远程仓库克隆\"></a>从远程仓库克隆</h2><p>使用命令git clone来克隆一个本地库：  </p>\n<pre><code>git clone git@github.com:hhb1994/hhb1994.github.io.git  \n</code></pre><p><img src=\"http://onep1caa3.bkt.clouddn.com/04.22.8.png\" alt=\"\">  </p>\n<h2 id=\"分支管理\"><a href=\"#分支管理\" class=\"headerlink\" title=\"分支管理\"></a>分支管理</h2><p>分支在实际中有什么用呢？假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。现在有了分支，就不用怕了。你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。其他版本控制系统如SVN等都有分支管理，但是用过之后你会发现，这些版本控制系统创建和切换分支比蜗牛还慢，简直让人无法忍受，结果分支功能成了摆设，大家都不去用。但Git的分支是与众不同的，无论创建、切换和删除分支，Git在1秒钟之内就能完成！无论你的版本库是1个文件还是1万个文件。  </p>\n<h3 id=\"创建与管理分支\"><a href=\"#创建与管理分支\" class=\"headerlink\" title=\"创建与管理分支\"></a>创建与管理分支</h3><p>Git鼓励大量使用分支：</p>\n<p>查看分支：git branch</p>\n<p>创建分支：git branch <name></p>\n<p>切换分支：git checkout <name></p>\n<p>创建+切换分支：git checkout -b <name></p>\n<p>合并某分支到当前分支：git merge <name></p>\n<p>删除分支：git branch -d <name></p>\n"},{"title":"HTML,XML和XHTML","_content":"# XHTML\n## XHTML是什么\n* XHTML 指可扩展超文本标签语言（EXtensible HyperText Markup Language）。\n* XHTML 的目标是取代 HTML。\n* XHTML 与 HTML 4.01 几乎是相同的。\n* XHTML 是更严格更纯净的 HTML 版本。\n* XHTML 是作为一种 XML 应用被重新定义的 HTML。\n* XHTML 是一个 W3C 标准。  \n## 为什么使用XHTML\n简单地说，XHTML是HTML与XML的结合物。HTML用来显示数据，而XML用来描述数据。XHTML可以被所有的支持XML的设备读取，同时在其余的浏览器升级至支持 XML 之前，XHTML 使我们有能力编写出拥有良好结构的文档，这些文档可以很好地工作于所有的浏览器，并且可以向后兼容。\n## XHTML语法\n* XHTML 元素必须被正确地嵌套。\n* XHTML 元素必须被关闭。\n* 标签名必须用小写字母。\n* XHTML 文档必须拥有根元素。\n* 属性名称必须小写。\n* 属性值必须加引号。\n* 属性不能简写。  \n\n下面是一个HTML的简写属性列表，以及在XHTML中的改写  \n![](http://onep1caa3.bkt.clouddn.com/04.24.1.png)\n\n* 用 Id 属性代替 name 属性。  \n\n* XHTML DTD 定义了强制使用的 HTML 元素。  \n\n## XHTML DTD\nXHTML定义了三种文件类型声明：   \n \n* STRICT（严格类型）\n* TRANSITIONAL（过渡类型）\n* FRAMESET（框架类型）  \n\n### XHTML 1.0 Strict\n    <!DOCTYPE html\n    PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \n    \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">  \n在此情况下使用：需要干净的标记，避免表现上的混乱。  \n### XHTML 1.0 Transitional\n    <!DOCTYPE html\n    PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n    \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">  \n在此情况下使用：当需要利用 HTML 在表现上的特性时，并且当需要为那些不支持层叠样式表的浏览器编写 XHTML 时。  \n### XHTML 1.0 Frameset\n    <!DOCTYPE html\n    PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\"\n    \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">  \n## 如何升级到XHTML\n* 添加文件类型声明\n* 小写的标签和属性名\n* 给所有属性加上引号\n* 空标签：`<hr>,<br>,<img>`中需要加上/\n* 验证站点\n\n## XHTML模块   \n### XHTML模块化的原因\n通过将 XHTML 分为若干模块，W3C 已经创造出数套小巧且定义良好的 XHTML 元素，这些元素既可被独立应用于简易设备，又可以与其他 XML 标准并入大型且更复杂的应用程序。  \n通过使用模块化的 XHTML，产品和软件设计者可以： \n \n* 选择被某种设备所支持的元素。\n* 在不打破 XHTML 标准的情况下，使用 XML 对 XHTML 进行扩展。\n* 针对小型设备，对 XHTML 进行简化。\n* 通过添加新的 XML 功能（比如 MathML, SVG, 语音和多媒体），针对复杂的应用对 XHTML 进行扩展。\n* 定义 XHTML 框架，比如 XHTML BASIC （针对移动设备的 XHTML 子集）。  \n\n### XHTML模块   \n![](http://onep1caa3.bkt.clouddn.com/04.24.2.png)\n \n\n## XHTML 标准属性  \n### 核心属性 (Core Attributes)\n![](http://onep1caa3.bkt.clouddn.com/04.24.3.png)  \n\n\n\n### 语言属性 (Language Attributes) \n![](http://onep1caa3.bkt.clouddn.com/04.24.4.png) \n### 键盘属性 (Keyboard Attributes)\n![](http://onep1caa3.bkt.clouddn.com/04.24.5.png)  \n## XHTML 事件属性\nHTML 4.0 的新特性之一是使 HTML 事件触发浏览器中的行为，比方说当用户点击一个 HTML 元素时启动一段 JavaScript 。以下就是可被插入 HTML 标签以定义事件行为的一系列属性。\n### 窗口事件 (Window Events)\n仅对body和frameset元素有效  \n![](http://onep1caa3.bkt.clouddn.com/04.24.6.png)\n### 表单元素事件 (Form Element Events)  \n仅对表单元素中有效。  \n![](http://onep1caa3.bkt.clouddn.com/04.24.7.png)\n### 键盘事件 (Keyboard Events) \n在下列元素中无效：base, bdo, br, frame, frameset, head, html, iframe, meta, param, script, style, 以及 title 元素。 \n![](http://onep1caa3.bkt.clouddn.com/04.24.8.png)\n### 鼠标事件 (Mouse Events)\n在下列元素中无效：base, bdo, br, frame, frameset, head, html, iframe, meta, param, script, style, title 元素。\n![](http://onep1caa3.bkt.clouddn.com/04.24.9.png)  \n# XML  \nXML被设计用来传输和存储数据。\n## 什么是 XML\n* XML 指可扩展标记语言（EXtensible Markup Language）；\n* XML 是一种标记语言，很类似 HTML；\n* XML 的设计宗旨是传输数据，而非显示数据；\n* XML 标签没有被预定义。您需要自行定义标签；\n* XML 被设计为具有自我描述性；\n* XML 是 W3C 的推荐标准。  \n\n### XML与HTML 的主要差别\n* XML 不是 HTML 的替代；\nXML 和 HTML 为不同的目的而设计；\n* XML 被设计为传输和存储数据，其焦点是数据的内容；\n* HTML 被设计用来显示数据，其焦点是数据的外观；\n* HTML 旨在显示信息，而 XML 旨在传输信息。  \n\n### XML没有任何行为\nXML仅仅是纯文本，有能力处理文本的软件都可以处理XML，通过XML你可以发明自己的标签，同时，XML是对HTML的一种补充，所以并不会代替HTML，XML是独立于软件和硬件的信息传输工具。\n## XML的用途\nXML常用于web开发的许多方面，比如简化数据的存储和共享，XML可以把数据从HTML分离。\n## XML 树结构\nXML文档形成了一种树结构，它从根部开始，然后扩展到枝叶。\n### 一个XML文档实例\n    <?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n    <note>\n    <to>George</to>\n    <from>John</from>\n    <heading>Reminder</heading>\n    <body>Don't forget the meeting!</body>\n    </note>  \n\n* 第一行是 XML 声明。它定义 XML 的版本 (1.0) 和所使用的编码 (ISO-8859-1 = Latin-1/西欧字符集)；\n* 下一行描述文档的根元素（像在说：“本文档是一个便签”）；\n* 接下来 4 行描述根的 4 个子元素（to, from, heading 以及 body）；\n* 最后一行定义根元素的结尾。\n\n树结构：  \n![](http://www.w3school.com.cn/i/ct_nodetree1.gif)    \n\n    <bookstore>\n    <book category=\"COOKING\">\n      <title lang=\"en\">Everyday Italian</title> \n      <author>Giada De Laurentiis</author> \n      <year>2005</year> \n      <price>30.00</price> \n    </book>\n    <book category=\"CHILDREN\">\n      <title lang=\"en\">Harry Potter</title> \n      <author>J K. Rowling</author> \n      <year>2005</year> \n      <price>29.99</price> \n    </book>\n    <book category=\"WEB\">\n      <title lang=\"en\">Learning XML</title> \n      <author>Erik T. Ray</author> \n      <year>2003</year> \n      <price>39.95</price> \n    </book>\n    </bookstore>  \n## XML 语法 \n* 所有XML 元素都必须有关闭标签\n* XML 对大小写敏感\n* XML 必须正确嵌套\n* XML 必须有根元素 \n* XML 的属性必须加引号 \n* 实体引用  \n* XML 中的注释`<!-- This is a comment -->` \n* 在XML中，空格会被保留  \n* XML 中以LF存储换行  \n\n## XML元素 \n### XML元素是什么\nXML 元素指的是从（且包括）开始标签直到（且包括）结束标签的部分。元素可包含其他元素、文本或者两者的混合物。元素也可以拥有属性。\n### XML 命名规则\n* 名称可以含字母、数字以及其他的字符\n* 名称不能以数字或者标点符号开始\n* 名称不能以字符 “xml”（或者 XML、Xml）开始\n* 名称不能包含空格\n\n### 最佳命名习惯  \n使名称具有描述性。使用下划线的名称也很不错。\n名称应当比较简短，比如：<book_title>，而不是：<the_title_of_the_book>。\n避免 \"-\" 字符。如果您按照这样的方式进行命名：\"first-name\"，一些软件会认为你需要提取第一个单词。\n避免 \".\" 字符。如果您按照这样的方式进行命名：\"first.name\"，一些软件会认为 \"name\" 是对象 \"first\" 的属性。\n避免 \":\" 字符。冒号会被转换为命名空间来使用（稍后介绍）。\nXML 文档经常有一个对应的数据库，其中的字段会对应 XML 文档中的元素。有一个实用的经验，即使用数据库的名称规则来命名 XML 文档中的元素。\n非英语的字母比如 éòá 也是合法的 XML 元素名，不过需要留意当软件开发商不支持这些字符时可能出现的问题。  \n### XML 是可扩展的\nXML 的优势之一，就是可以经常在不中断应用程序的情况下进行扩展。 \n## XML属性\n### XML属性\n属性通常提供不属于数据组成部分的信息。  \n`<file type=\"gif\">computer.gif</file>`   \n对于上面这个例子，文件类型与数据无关，但是对需要处理这个元素的软件来说却很重要。  \n### XML 属性必须加引号 \n属性值必须被引号包围，不过单引号和双引号均可使用。\n### XML 元素 vs. 属性\n 元数据（有关数据的数据）应当存储为属性，而数据本身应当存储为元素。  \n\n## XML 查看\nXML 文档不会携带有关如何显示数据的信息。\n由于 XML 标签由 XML 文档的作者“发明”，浏览器无法确定像 <table> 这样一个标签究竟描述一个 HTML 表格还是一个餐桌。\n在没有任何有关如何显示数据的信息的情况下，大多数的浏览器都会仅仅把 XML 文档显示为源代码。  \n## XML JavaScript\n### XMLHttpRequest 对象\nXMLHttpRequest 对象用于在后台与服务器交换数据。\n#### 什么是 XMLHttpRequest 对象？\nXMLHttpRequest 对象用于在后台与服务器交换数据。  \nXMLHttpRequest 对象是开发者的梦想，因为可以： \n \n* 在不重新加载页面的情况下更新网页\n* 在页面已加载后从服务器请求数据\n* 在页面已加载后从服务器接收数据\n* 在后台向服务器发送数据  \n\n#### 创建XMLHttpRequest 对象\n创建 XMLHttpRequest 对象的语法：`xmlhttp=new XMLHttpRequest();`  \n","source":"_posts/2017.04.24.html&xml&xhtml.md","raw":"---\ntitle: HTML,XML和XHTML\ntags: [HTML,XML,XHTML]\ncategories: 知识 \n---\n# XHTML\n## XHTML是什么\n* XHTML 指可扩展超文本标签语言（EXtensible HyperText Markup Language）。\n* XHTML 的目标是取代 HTML。\n* XHTML 与 HTML 4.01 几乎是相同的。\n* XHTML 是更严格更纯净的 HTML 版本。\n* XHTML 是作为一种 XML 应用被重新定义的 HTML。\n* XHTML 是一个 W3C 标准。  \n## 为什么使用XHTML\n简单地说，XHTML是HTML与XML的结合物。HTML用来显示数据，而XML用来描述数据。XHTML可以被所有的支持XML的设备读取，同时在其余的浏览器升级至支持 XML 之前，XHTML 使我们有能力编写出拥有良好结构的文档，这些文档可以很好地工作于所有的浏览器，并且可以向后兼容。\n## XHTML语法\n* XHTML 元素必须被正确地嵌套。\n* XHTML 元素必须被关闭。\n* 标签名必须用小写字母。\n* XHTML 文档必须拥有根元素。\n* 属性名称必须小写。\n* 属性值必须加引号。\n* 属性不能简写。  \n\n下面是一个HTML的简写属性列表，以及在XHTML中的改写  \n![](http://onep1caa3.bkt.clouddn.com/04.24.1.png)\n\n* 用 Id 属性代替 name 属性。  \n\n* XHTML DTD 定义了强制使用的 HTML 元素。  \n\n## XHTML DTD\nXHTML定义了三种文件类型声明：   \n \n* STRICT（严格类型）\n* TRANSITIONAL（过渡类型）\n* FRAMESET（框架类型）  \n\n### XHTML 1.0 Strict\n    <!DOCTYPE html\n    PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \n    \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">  \n在此情况下使用：需要干净的标记，避免表现上的混乱。  \n### XHTML 1.0 Transitional\n    <!DOCTYPE html\n    PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n    \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">  \n在此情况下使用：当需要利用 HTML 在表现上的特性时，并且当需要为那些不支持层叠样式表的浏览器编写 XHTML 时。  \n### XHTML 1.0 Frameset\n    <!DOCTYPE html\n    PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\"\n    \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">  \n## 如何升级到XHTML\n* 添加文件类型声明\n* 小写的标签和属性名\n* 给所有属性加上引号\n* 空标签：`<hr>,<br>,<img>`中需要加上/\n* 验证站点\n\n## XHTML模块   \n### XHTML模块化的原因\n通过将 XHTML 分为若干模块，W3C 已经创造出数套小巧且定义良好的 XHTML 元素，这些元素既可被独立应用于简易设备，又可以与其他 XML 标准并入大型且更复杂的应用程序。  \n通过使用模块化的 XHTML，产品和软件设计者可以： \n \n* 选择被某种设备所支持的元素。\n* 在不打破 XHTML 标准的情况下，使用 XML 对 XHTML 进行扩展。\n* 针对小型设备，对 XHTML 进行简化。\n* 通过添加新的 XML 功能（比如 MathML, SVG, 语音和多媒体），针对复杂的应用对 XHTML 进行扩展。\n* 定义 XHTML 框架，比如 XHTML BASIC （针对移动设备的 XHTML 子集）。  \n\n### XHTML模块   \n![](http://onep1caa3.bkt.clouddn.com/04.24.2.png)\n \n\n## XHTML 标准属性  \n### 核心属性 (Core Attributes)\n![](http://onep1caa3.bkt.clouddn.com/04.24.3.png)  \n\n\n\n### 语言属性 (Language Attributes) \n![](http://onep1caa3.bkt.clouddn.com/04.24.4.png) \n### 键盘属性 (Keyboard Attributes)\n![](http://onep1caa3.bkt.clouddn.com/04.24.5.png)  \n## XHTML 事件属性\nHTML 4.0 的新特性之一是使 HTML 事件触发浏览器中的行为，比方说当用户点击一个 HTML 元素时启动一段 JavaScript 。以下就是可被插入 HTML 标签以定义事件行为的一系列属性。\n### 窗口事件 (Window Events)\n仅对body和frameset元素有效  \n![](http://onep1caa3.bkt.clouddn.com/04.24.6.png)\n### 表单元素事件 (Form Element Events)  \n仅对表单元素中有效。  \n![](http://onep1caa3.bkt.clouddn.com/04.24.7.png)\n### 键盘事件 (Keyboard Events) \n在下列元素中无效：base, bdo, br, frame, frameset, head, html, iframe, meta, param, script, style, 以及 title 元素。 \n![](http://onep1caa3.bkt.clouddn.com/04.24.8.png)\n### 鼠标事件 (Mouse Events)\n在下列元素中无效：base, bdo, br, frame, frameset, head, html, iframe, meta, param, script, style, title 元素。\n![](http://onep1caa3.bkt.clouddn.com/04.24.9.png)  \n# XML  \nXML被设计用来传输和存储数据。\n## 什么是 XML\n* XML 指可扩展标记语言（EXtensible Markup Language）；\n* XML 是一种标记语言，很类似 HTML；\n* XML 的设计宗旨是传输数据，而非显示数据；\n* XML 标签没有被预定义。您需要自行定义标签；\n* XML 被设计为具有自我描述性；\n* XML 是 W3C 的推荐标准。  \n\n### XML与HTML 的主要差别\n* XML 不是 HTML 的替代；\nXML 和 HTML 为不同的目的而设计；\n* XML 被设计为传输和存储数据，其焦点是数据的内容；\n* HTML 被设计用来显示数据，其焦点是数据的外观；\n* HTML 旨在显示信息，而 XML 旨在传输信息。  \n\n### XML没有任何行为\nXML仅仅是纯文本，有能力处理文本的软件都可以处理XML，通过XML你可以发明自己的标签，同时，XML是对HTML的一种补充，所以并不会代替HTML，XML是独立于软件和硬件的信息传输工具。\n## XML的用途\nXML常用于web开发的许多方面，比如简化数据的存储和共享，XML可以把数据从HTML分离。\n## XML 树结构\nXML文档形成了一种树结构，它从根部开始，然后扩展到枝叶。\n### 一个XML文档实例\n    <?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n    <note>\n    <to>George</to>\n    <from>John</from>\n    <heading>Reminder</heading>\n    <body>Don't forget the meeting!</body>\n    </note>  \n\n* 第一行是 XML 声明。它定义 XML 的版本 (1.0) 和所使用的编码 (ISO-8859-1 = Latin-1/西欧字符集)；\n* 下一行描述文档的根元素（像在说：“本文档是一个便签”）；\n* 接下来 4 行描述根的 4 个子元素（to, from, heading 以及 body）；\n* 最后一行定义根元素的结尾。\n\n树结构：  \n![](http://www.w3school.com.cn/i/ct_nodetree1.gif)    \n\n    <bookstore>\n    <book category=\"COOKING\">\n      <title lang=\"en\">Everyday Italian</title> \n      <author>Giada De Laurentiis</author> \n      <year>2005</year> \n      <price>30.00</price> \n    </book>\n    <book category=\"CHILDREN\">\n      <title lang=\"en\">Harry Potter</title> \n      <author>J K. Rowling</author> \n      <year>2005</year> \n      <price>29.99</price> \n    </book>\n    <book category=\"WEB\">\n      <title lang=\"en\">Learning XML</title> \n      <author>Erik T. Ray</author> \n      <year>2003</year> \n      <price>39.95</price> \n    </book>\n    </bookstore>  \n## XML 语法 \n* 所有XML 元素都必须有关闭标签\n* XML 对大小写敏感\n* XML 必须正确嵌套\n* XML 必须有根元素 \n* XML 的属性必须加引号 \n* 实体引用  \n* XML 中的注释`<!-- This is a comment -->` \n* 在XML中，空格会被保留  \n* XML 中以LF存储换行  \n\n## XML元素 \n### XML元素是什么\nXML 元素指的是从（且包括）开始标签直到（且包括）结束标签的部分。元素可包含其他元素、文本或者两者的混合物。元素也可以拥有属性。\n### XML 命名规则\n* 名称可以含字母、数字以及其他的字符\n* 名称不能以数字或者标点符号开始\n* 名称不能以字符 “xml”（或者 XML、Xml）开始\n* 名称不能包含空格\n\n### 最佳命名习惯  \n使名称具有描述性。使用下划线的名称也很不错。\n名称应当比较简短，比如：<book_title>，而不是：<the_title_of_the_book>。\n避免 \"-\" 字符。如果您按照这样的方式进行命名：\"first-name\"，一些软件会认为你需要提取第一个单词。\n避免 \".\" 字符。如果您按照这样的方式进行命名：\"first.name\"，一些软件会认为 \"name\" 是对象 \"first\" 的属性。\n避免 \":\" 字符。冒号会被转换为命名空间来使用（稍后介绍）。\nXML 文档经常有一个对应的数据库，其中的字段会对应 XML 文档中的元素。有一个实用的经验，即使用数据库的名称规则来命名 XML 文档中的元素。\n非英语的字母比如 éòá 也是合法的 XML 元素名，不过需要留意当软件开发商不支持这些字符时可能出现的问题。  \n### XML 是可扩展的\nXML 的优势之一，就是可以经常在不中断应用程序的情况下进行扩展。 \n## XML属性\n### XML属性\n属性通常提供不属于数据组成部分的信息。  \n`<file type=\"gif\">computer.gif</file>`   \n对于上面这个例子，文件类型与数据无关，但是对需要处理这个元素的软件来说却很重要。  \n### XML 属性必须加引号 \n属性值必须被引号包围，不过单引号和双引号均可使用。\n### XML 元素 vs. 属性\n 元数据（有关数据的数据）应当存储为属性，而数据本身应当存储为元素。  \n\n## XML 查看\nXML 文档不会携带有关如何显示数据的信息。\n由于 XML 标签由 XML 文档的作者“发明”，浏览器无法确定像 <table> 这样一个标签究竟描述一个 HTML 表格还是一个餐桌。\n在没有任何有关如何显示数据的信息的情况下，大多数的浏览器都会仅仅把 XML 文档显示为源代码。  \n## XML JavaScript\n### XMLHttpRequest 对象\nXMLHttpRequest 对象用于在后台与服务器交换数据。\n#### 什么是 XMLHttpRequest 对象？\nXMLHttpRequest 对象用于在后台与服务器交换数据。  \nXMLHttpRequest 对象是开发者的梦想，因为可以： \n \n* 在不重新加载页面的情况下更新网页\n* 在页面已加载后从服务器请求数据\n* 在页面已加载后从服务器接收数据\n* 在后台向服务器发送数据  \n\n#### 创建XMLHttpRequest 对象\n创建 XMLHttpRequest 对象的语法：`xmlhttp=new XMLHttpRequest();`  \n","slug":"2017.04.24.html&xml&xhtml","published":1,"date":"2017-04-24T13:20:40.000Z","updated":"2017-04-24T13:20:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwvh25e30057w39z3vsuxn2s","content":"<h1 id=\"XHTML\"><a href=\"#XHTML\" class=\"headerlink\" title=\"XHTML\"></a>XHTML</h1><h2 id=\"XHTML是什么\"><a href=\"#XHTML是什么\" class=\"headerlink\" title=\"XHTML是什么\"></a>XHTML是什么</h2><ul>\n<li>XHTML 指可扩展超文本标签语言（EXtensible HyperText Markup Language）。</li>\n<li>XHTML 的目标是取代 HTML。</li>\n<li>XHTML 与 HTML 4.01 几乎是相同的。</li>\n<li>XHTML 是更严格更纯净的 HTML 版本。</li>\n<li>XHTML 是作为一种 XML 应用被重新定义的 HTML。</li>\n<li>XHTML 是一个 W3C 标准。  <h2 id=\"为什么使用XHTML\"><a href=\"#为什么使用XHTML\" class=\"headerlink\" title=\"为什么使用XHTML\"></a>为什么使用XHTML</h2>简单地说，XHTML是HTML与XML的结合物。HTML用来显示数据，而XML用来描述数据。XHTML可以被所有的支持XML的设备读取，同时在其余的浏览器升级至支持 XML 之前，XHTML 使我们有能力编写出拥有良好结构的文档，这些文档可以很好地工作于所有的浏览器，并且可以向后兼容。<h2 id=\"XHTML语法\"><a href=\"#XHTML语法\" class=\"headerlink\" title=\"XHTML语法\"></a>XHTML语法</h2></li>\n<li>XHTML 元素必须被正确地嵌套。</li>\n<li>XHTML 元素必须被关闭。</li>\n<li>标签名必须用小写字母。</li>\n<li>XHTML 文档必须拥有根元素。</li>\n<li>属性名称必须小写。</li>\n<li>属性值必须加引号。</li>\n<li>属性不能简写。  </li>\n</ul>\n<p>下面是一个HTML的简写属性列表，以及在XHTML中的改写<br><img src=\"http://onep1caa3.bkt.clouddn.com/04.24.1.png\" alt=\"\"></p>\n<ul>\n<li><p>用 Id 属性代替 name 属性。  </p>\n</li>\n<li><p>XHTML DTD 定义了强制使用的 HTML 元素。  </p>\n</li>\n</ul>\n<h2 id=\"XHTML-DTD\"><a href=\"#XHTML-DTD\" class=\"headerlink\" title=\"XHTML DTD\"></a>XHTML DTD</h2><p>XHTML定义了三种文件类型声明：   </p>\n<ul>\n<li>STRICT（严格类型）</li>\n<li>TRANSITIONAL（过渡类型）</li>\n<li>FRAMESET（框架类型）  </li>\n</ul>\n<h3 id=\"XHTML-1-0-Strict\"><a href=\"#XHTML-1-0-Strict\" class=\"headerlink\" title=\"XHTML 1.0 Strict\"></a>XHTML 1.0 Strict</h3><pre><code>&lt;!DOCTYPE html\nPUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; \n&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;  \n</code></pre><p>在此情况下使用：需要干净的标记，避免表现上的混乱。  </p>\n<h3 id=\"XHTML-1-0-Transitional\"><a href=\"#XHTML-1-0-Transitional\" class=\"headerlink\" title=\"XHTML 1.0 Transitional\"></a>XHTML 1.0 Transitional</h3><pre><code>&lt;!DOCTYPE html\nPUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;  \n</code></pre><p>在此情况下使用：当需要利用 HTML 在表现上的特性时，并且当需要为那些不支持层叠样式表的浏览器编写 XHTML 时。  </p>\n<h3 id=\"XHTML-1-0-Frameset\"><a href=\"#XHTML-1-0-Frameset\" class=\"headerlink\" title=\"XHTML 1.0 Frameset\"></a>XHTML 1.0 Frameset</h3><pre><code>&lt;!DOCTYPE html\nPUBLIC &quot;-//W3C//DTD XHTML 1.0 Frameset//EN&quot;\n&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd&quot;&gt;  \n</code></pre><h2 id=\"如何升级到XHTML\"><a href=\"#如何升级到XHTML\" class=\"headerlink\" title=\"如何升级到XHTML\"></a>如何升级到XHTML</h2><ul>\n<li>添加文件类型声明</li>\n<li>小写的标签和属性名</li>\n<li>给所有属性加上引号</li>\n<li>空标签：<code>&lt;hr&gt;,&lt;br&gt;,&lt;img&gt;</code>中需要加上/</li>\n<li>验证站点</li>\n</ul>\n<h2 id=\"XHTML模块\"><a href=\"#XHTML模块\" class=\"headerlink\" title=\"XHTML模块\"></a>XHTML模块</h2><h3 id=\"XHTML模块化的原因\"><a href=\"#XHTML模块化的原因\" class=\"headerlink\" title=\"XHTML模块化的原因\"></a>XHTML模块化的原因</h3><p>通过将 XHTML 分为若干模块，W3C 已经创造出数套小巧且定义良好的 XHTML 元素，这些元素既可被独立应用于简易设备，又可以与其他 XML 标准并入大型且更复杂的应用程序。<br>通过使用模块化的 XHTML，产品和软件设计者可以： </p>\n<ul>\n<li>选择被某种设备所支持的元素。</li>\n<li>在不打破 XHTML 标准的情况下，使用 XML 对 XHTML 进行扩展。</li>\n<li>针对小型设备，对 XHTML 进行简化。</li>\n<li>通过添加新的 XML 功能（比如 MathML, SVG, 语音和多媒体），针对复杂的应用对 XHTML 进行扩展。</li>\n<li>定义 XHTML 框架，比如 XHTML BASIC （针对移动设备的 XHTML 子集）。  </li>\n</ul>\n<h3 id=\"XHTML模块-1\"><a href=\"#XHTML模块-1\" class=\"headerlink\" title=\"XHTML模块\"></a>XHTML模块</h3><p><img src=\"http://onep1caa3.bkt.clouddn.com/04.24.2.png\" alt=\"\"></p>\n<h2 id=\"XHTML-标准属性\"><a href=\"#XHTML-标准属性\" class=\"headerlink\" title=\"XHTML 标准属性\"></a>XHTML 标准属性</h2><h3 id=\"核心属性-Core-Attributes\"><a href=\"#核心属性-Core-Attributes\" class=\"headerlink\" title=\"核心属性 (Core Attributes)\"></a>核心属性 (Core Attributes)</h3><p><img src=\"http://onep1caa3.bkt.clouddn.com/04.24.3.png\" alt=\"\">  </p>\n<h3 id=\"语言属性-Language-Attributes\"><a href=\"#语言属性-Language-Attributes\" class=\"headerlink\" title=\"语言属性 (Language Attributes)\"></a>语言属性 (Language Attributes)</h3><p><img src=\"http://onep1caa3.bkt.clouddn.com/04.24.4.png\" alt=\"\"> </p>\n<h3 id=\"键盘属性-Keyboard-Attributes\"><a href=\"#键盘属性-Keyboard-Attributes\" class=\"headerlink\" title=\"键盘属性 (Keyboard Attributes)\"></a>键盘属性 (Keyboard Attributes)</h3><p><img src=\"http://onep1caa3.bkt.clouddn.com/04.24.5.png\" alt=\"\">  </p>\n<h2 id=\"XHTML-事件属性\"><a href=\"#XHTML-事件属性\" class=\"headerlink\" title=\"XHTML 事件属性\"></a>XHTML 事件属性</h2><p>HTML 4.0 的新特性之一是使 HTML 事件触发浏览器中的行为，比方说当用户点击一个 HTML 元素时启动一段 JavaScript 。以下就是可被插入 HTML 标签以定义事件行为的一系列属性。</p>\n<h3 id=\"窗口事件-Window-Events\"><a href=\"#窗口事件-Window-Events\" class=\"headerlink\" title=\"窗口事件 (Window Events)\"></a>窗口事件 (Window Events)</h3><p>仅对body和frameset元素有效<br><img src=\"http://onep1caa3.bkt.clouddn.com/04.24.6.png\" alt=\"\"></p>\n<h3 id=\"表单元素事件-Form-Element-Events\"><a href=\"#表单元素事件-Form-Element-Events\" class=\"headerlink\" title=\"表单元素事件 (Form Element Events)\"></a>表单元素事件 (Form Element Events)</h3><p>仅对表单元素中有效。<br><img src=\"http://onep1caa3.bkt.clouddn.com/04.24.7.png\" alt=\"\"></p>\n<h3 id=\"键盘事件-Keyboard-Events\"><a href=\"#键盘事件-Keyboard-Events\" class=\"headerlink\" title=\"键盘事件 (Keyboard Events)\"></a>键盘事件 (Keyboard Events)</h3><p>在下列元素中无效：base, bdo, br, frame, frameset, head, html, iframe, meta, param, script, style, 以及 title 元素。<br><img src=\"http://onep1caa3.bkt.clouddn.com/04.24.8.png\" alt=\"\"></p>\n<h3 id=\"鼠标事件-Mouse-Events\"><a href=\"#鼠标事件-Mouse-Events\" class=\"headerlink\" title=\"鼠标事件 (Mouse Events)\"></a>鼠标事件 (Mouse Events)</h3><p>在下列元素中无效：base, bdo, br, frame, frameset, head, html, iframe, meta, param, script, style, title 元素。<br><img src=\"http://onep1caa3.bkt.clouddn.com/04.24.9.png\" alt=\"\">  </p>\n<h1 id=\"XML\"><a href=\"#XML\" class=\"headerlink\" title=\"XML\"></a>XML</h1><p>XML被设计用来传输和存储数据。</p>\n<h2 id=\"什么是-XML\"><a href=\"#什么是-XML\" class=\"headerlink\" title=\"什么是 XML\"></a>什么是 XML</h2><ul>\n<li>XML 指可扩展标记语言（EXtensible Markup Language）；</li>\n<li>XML 是一种标记语言，很类似 HTML；</li>\n<li>XML 的设计宗旨是传输数据，而非显示数据；</li>\n<li>XML 标签没有被预定义。您需要自行定义标签；</li>\n<li>XML 被设计为具有自我描述性；</li>\n<li>XML 是 W3C 的推荐标准。  </li>\n</ul>\n<h3 id=\"XML与HTML-的主要差别\"><a href=\"#XML与HTML-的主要差别\" class=\"headerlink\" title=\"XML与HTML 的主要差别\"></a>XML与HTML 的主要差别</h3><ul>\n<li>XML 不是 HTML 的替代；<br>XML 和 HTML 为不同的目的而设计；</li>\n<li>XML 被设计为传输和存储数据，其焦点是数据的内容；</li>\n<li>HTML 被设计用来显示数据，其焦点是数据的外观；</li>\n<li>HTML 旨在显示信息，而 XML 旨在传输信息。  </li>\n</ul>\n<h3 id=\"XML没有任何行为\"><a href=\"#XML没有任何行为\" class=\"headerlink\" title=\"XML没有任何行为\"></a>XML没有任何行为</h3><p>XML仅仅是纯文本，有能力处理文本的软件都可以处理XML，通过XML你可以发明自己的标签，同时，XML是对HTML的一种补充，所以并不会代替HTML，XML是独立于软件和硬件的信息传输工具。</p>\n<h2 id=\"XML的用途\"><a href=\"#XML的用途\" class=\"headerlink\" title=\"XML的用途\"></a>XML的用途</h2><p>XML常用于web开发的许多方面，比如简化数据的存储和共享，XML可以把数据从HTML分离。</p>\n<h2 id=\"XML-树结构\"><a href=\"#XML-树结构\" class=\"headerlink\" title=\"XML 树结构\"></a>XML 树结构</h2><p>XML文档形成了一种树结构，它从根部开始，然后扩展到枝叶。</p>\n<h3 id=\"一个XML文档实例\"><a href=\"#一个XML文档实例\" class=\"headerlink\" title=\"一个XML文档实例\"></a>一个XML文档实例</h3><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;\n&lt;note&gt;\n&lt;to&gt;George&lt;/to&gt;\n&lt;from&gt;John&lt;/from&gt;\n&lt;heading&gt;Reminder&lt;/heading&gt;\n&lt;body&gt;Don&apos;t forget the meeting!&lt;/body&gt;\n&lt;/note&gt;  \n</code></pre><ul>\n<li>第一行是 XML 声明。它定义 XML 的版本 (1.0) 和所使用的编码 (ISO-8859-1 = Latin-1/西欧字符集)；</li>\n<li>下一行描述文档的根元素（像在说：“本文档是一个便签”）；</li>\n<li>接下来 4 行描述根的 4 个子元素（to, from, heading 以及 body）；</li>\n<li>最后一行定义根元素的结尾。</li>\n</ul>\n<p>树结构：<br><img src=\"http://www.w3school.com.cn/i/ct_nodetree1.gif\" alt=\"\">    </p>\n<pre><code>&lt;bookstore&gt;\n&lt;book category=&quot;COOKING&quot;&gt;\n  &lt;title lang=&quot;en&quot;&gt;Everyday Italian&lt;/title&gt; \n  &lt;author&gt;Giada De Laurentiis&lt;/author&gt; \n  &lt;year&gt;2005&lt;/year&gt; \n  &lt;price&gt;30.00&lt;/price&gt; \n&lt;/book&gt;\n&lt;book category=&quot;CHILDREN&quot;&gt;\n  &lt;title lang=&quot;en&quot;&gt;Harry Potter&lt;/title&gt; \n  &lt;author&gt;J K. Rowling&lt;/author&gt; \n  &lt;year&gt;2005&lt;/year&gt; \n  &lt;price&gt;29.99&lt;/price&gt; \n&lt;/book&gt;\n&lt;book category=&quot;WEB&quot;&gt;\n  &lt;title lang=&quot;en&quot;&gt;Learning XML&lt;/title&gt; \n  &lt;author&gt;Erik T. Ray&lt;/author&gt; \n  &lt;year&gt;2003&lt;/year&gt; \n  &lt;price&gt;39.95&lt;/price&gt; \n&lt;/book&gt;\n&lt;/bookstore&gt;  \n</code></pre><h2 id=\"XML-语法\"><a href=\"#XML-语法\" class=\"headerlink\" title=\"XML 语法\"></a>XML 语法</h2><ul>\n<li>所有XML 元素都必须有关闭标签</li>\n<li>XML 对大小写敏感</li>\n<li>XML 必须正确嵌套</li>\n<li>XML 必须有根元素 </li>\n<li>XML 的属性必须加引号 </li>\n<li>实体引用  </li>\n<li>XML 中的注释<code>&lt;!-- This is a comment --&gt;</code> </li>\n<li>在XML中，空格会被保留  </li>\n<li>XML 中以LF存储换行  </li>\n</ul>\n<h2 id=\"XML元素\"><a href=\"#XML元素\" class=\"headerlink\" title=\"XML元素\"></a>XML元素</h2><h3 id=\"XML元素是什么\"><a href=\"#XML元素是什么\" class=\"headerlink\" title=\"XML元素是什么\"></a>XML元素是什么</h3><p>XML 元素指的是从（且包括）开始标签直到（且包括）结束标签的部分。元素可包含其他元素、文本或者两者的混合物。元素也可以拥有属性。</p>\n<h3 id=\"XML-命名规则\"><a href=\"#XML-命名规则\" class=\"headerlink\" title=\"XML 命名规则\"></a>XML 命名规则</h3><ul>\n<li>名称可以含字母、数字以及其他的字符</li>\n<li>名称不能以数字或者标点符号开始</li>\n<li>名称不能以字符 “xml”（或者 XML、Xml）开始</li>\n<li>名称不能包含空格</li>\n</ul>\n<h3 id=\"最佳命名习惯\"><a href=\"#最佳命名习惯\" class=\"headerlink\" title=\"最佳命名习惯\"></a>最佳命名习惯</h3><p>使名称具有描述性。使用下划线的名称也很不错。<br>名称应当比较简短，比如：<book_title>，而不是：<the_title_of_the_book>。<br>避免 “-“ 字符。如果您按照这样的方式进行命名：”first-name”，一些软件会认为你需要提取第一个单词。<br>避免 “.” 字符。如果您按照这样的方式进行命名：”first.name”，一些软件会认为 “name” 是对象 “first” 的属性。<br>避免 “:” 字符。冒号会被转换为命名空间来使用（稍后介绍）。<br>XML 文档经常有一个对应的数据库，其中的字段会对应 XML 文档中的元素。有一个实用的经验，即使用数据库的名称规则来命名 XML 文档中的元素。<br>非英语的字母比如 éòá 也是合法的 XML 元素名，不过需要留意当软件开发商不支持这些字符时可能出现的问题。  </the_title_of_the_book></book_title></p>\n<h3 id=\"XML-是可扩展的\"><a href=\"#XML-是可扩展的\" class=\"headerlink\" title=\"XML 是可扩展的\"></a>XML 是可扩展的</h3><p>XML 的优势之一，就是可以经常在不中断应用程序的情况下进行扩展。 </p>\n<h2 id=\"XML属性\"><a href=\"#XML属性\" class=\"headerlink\" title=\"XML属性\"></a>XML属性</h2><h3 id=\"XML属性-1\"><a href=\"#XML属性-1\" class=\"headerlink\" title=\"XML属性\"></a>XML属性</h3><p>属性通常提供不属于数据组成部分的信息。<br><code>&lt;file type=&quot;gif&quot;&gt;computer.gif&lt;/file&gt;</code><br>对于上面这个例子，文件类型与数据无关，但是对需要处理这个元素的软件来说却很重要。  </p>\n<h3 id=\"XML-属性必须加引号\"><a href=\"#XML-属性必须加引号\" class=\"headerlink\" title=\"XML 属性必须加引号\"></a>XML 属性必须加引号</h3><p>属性值必须被引号包围，不过单引号和双引号均可使用。</p>\n<h3 id=\"XML-元素-vs-属性\"><a href=\"#XML-元素-vs-属性\" class=\"headerlink\" title=\"XML 元素 vs. 属性\"></a>XML 元素 vs. 属性</h3><p> 元数据（有关数据的数据）应当存储为属性，而数据本身应当存储为元素。  </p>\n<h2 id=\"XML-查看\"><a href=\"#XML-查看\" class=\"headerlink\" title=\"XML 查看\"></a>XML 查看</h2><p>XML 文档不会携带有关如何显示数据的信息。<br>由于 XML 标签由 XML 文档的作者“发明”，浏览器无法确定像 <table> 这样一个标签究竟描述一个 HTML 表格还是一个餐桌。<br>在没有任何有关如何显示数据的信息的情况下，大多数的浏览器都会仅仅把 XML 文档显示为源代码。  </table></p>\n<h2 id=\"XML-JavaScript\"><a href=\"#XML-JavaScript\" class=\"headerlink\" title=\"XML JavaScript\"></a>XML JavaScript</h2><h3 id=\"XMLHttpRequest-对象\"><a href=\"#XMLHttpRequest-对象\" class=\"headerlink\" title=\"XMLHttpRequest 对象\"></a>XMLHttpRequest 对象</h3><p>XMLHttpRequest 对象用于在后台与服务器交换数据。</p>\n<h4 id=\"什么是-XMLHttpRequest-对象？\"><a href=\"#什么是-XMLHttpRequest-对象？\" class=\"headerlink\" title=\"什么是 XMLHttpRequest 对象？\"></a>什么是 XMLHttpRequest 对象？</h4><p>XMLHttpRequest 对象用于在后台与服务器交换数据。<br>XMLHttpRequest 对象是开发者的梦想，因为可以： </p>\n<ul>\n<li>在不重新加载页面的情况下更新网页</li>\n<li>在页面已加载后从服务器请求数据</li>\n<li>在页面已加载后从服务器接收数据</li>\n<li>在后台向服务器发送数据  </li>\n</ul>\n<h4 id=\"创建XMLHttpRequest-对象\"><a href=\"#创建XMLHttpRequest-对象\" class=\"headerlink\" title=\"创建XMLHttpRequest 对象\"></a>创建XMLHttpRequest 对象</h4><p>创建 XMLHttpRequest 对象的语法：<code>xmlhttp=new XMLHttpRequest();</code>  </p>\n","excerpt":"","more":"<h1 id=\"XHTML\"><a href=\"#XHTML\" class=\"headerlink\" title=\"XHTML\"></a>XHTML</h1><h2 id=\"XHTML是什么\"><a href=\"#XHTML是什么\" class=\"headerlink\" title=\"XHTML是什么\"></a>XHTML是什么</h2><ul>\n<li>XHTML 指可扩展超文本标签语言（EXtensible HyperText Markup Language）。</li>\n<li>XHTML 的目标是取代 HTML。</li>\n<li>XHTML 与 HTML 4.01 几乎是相同的。</li>\n<li>XHTML 是更严格更纯净的 HTML 版本。</li>\n<li>XHTML 是作为一种 XML 应用被重新定义的 HTML。</li>\n<li>XHTML 是一个 W3C 标准。  <h2 id=\"为什么使用XHTML\"><a href=\"#为什么使用XHTML\" class=\"headerlink\" title=\"为什么使用XHTML\"></a>为什么使用XHTML</h2>简单地说，XHTML是HTML与XML的结合物。HTML用来显示数据，而XML用来描述数据。XHTML可以被所有的支持XML的设备读取，同时在其余的浏览器升级至支持 XML 之前，XHTML 使我们有能力编写出拥有良好结构的文档，这些文档可以很好地工作于所有的浏览器，并且可以向后兼容。<h2 id=\"XHTML语法\"><a href=\"#XHTML语法\" class=\"headerlink\" title=\"XHTML语法\"></a>XHTML语法</h2></li>\n<li>XHTML 元素必须被正确地嵌套。</li>\n<li>XHTML 元素必须被关闭。</li>\n<li>标签名必须用小写字母。</li>\n<li>XHTML 文档必须拥有根元素。</li>\n<li>属性名称必须小写。</li>\n<li>属性值必须加引号。</li>\n<li>属性不能简写。  </li>\n</ul>\n<p>下面是一个HTML的简写属性列表，以及在XHTML中的改写<br><img src=\"http://onep1caa3.bkt.clouddn.com/04.24.1.png\" alt=\"\"></p>\n<ul>\n<li><p>用 Id 属性代替 name 属性。  </p>\n</li>\n<li><p>XHTML DTD 定义了强制使用的 HTML 元素。  </p>\n</li>\n</ul>\n<h2 id=\"XHTML-DTD\"><a href=\"#XHTML-DTD\" class=\"headerlink\" title=\"XHTML DTD\"></a>XHTML DTD</h2><p>XHTML定义了三种文件类型声明：   </p>\n<ul>\n<li>STRICT（严格类型）</li>\n<li>TRANSITIONAL（过渡类型）</li>\n<li>FRAMESET（框架类型）  </li>\n</ul>\n<h3 id=\"XHTML-1-0-Strict\"><a href=\"#XHTML-1-0-Strict\" class=\"headerlink\" title=\"XHTML 1.0 Strict\"></a>XHTML 1.0 Strict</h3><pre><code>&lt;!DOCTYPE html\nPUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot; \n&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;  \n</code></pre><p>在此情况下使用：需要干净的标记，避免表现上的混乱。  </p>\n<h3 id=\"XHTML-1-0-Transitional\"><a href=\"#XHTML-1-0-Transitional\" class=\"headerlink\" title=\"XHTML 1.0 Transitional\"></a>XHTML 1.0 Transitional</h3><pre><code>&lt;!DOCTYPE html\nPUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;  \n</code></pre><p>在此情况下使用：当需要利用 HTML 在表现上的特性时，并且当需要为那些不支持层叠样式表的浏览器编写 XHTML 时。  </p>\n<h3 id=\"XHTML-1-0-Frameset\"><a href=\"#XHTML-1-0-Frameset\" class=\"headerlink\" title=\"XHTML 1.0 Frameset\"></a>XHTML 1.0 Frameset</h3><pre><code>&lt;!DOCTYPE html\nPUBLIC &quot;-//W3C//DTD XHTML 1.0 Frameset//EN&quot;\n&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd&quot;&gt;  \n</code></pre><h2 id=\"如何升级到XHTML\"><a href=\"#如何升级到XHTML\" class=\"headerlink\" title=\"如何升级到XHTML\"></a>如何升级到XHTML</h2><ul>\n<li>添加文件类型声明</li>\n<li>小写的标签和属性名</li>\n<li>给所有属性加上引号</li>\n<li>空标签：<code>&lt;hr&gt;,&lt;br&gt;,&lt;img&gt;</code>中需要加上/</li>\n<li>验证站点</li>\n</ul>\n<h2 id=\"XHTML模块\"><a href=\"#XHTML模块\" class=\"headerlink\" title=\"XHTML模块\"></a>XHTML模块</h2><h3 id=\"XHTML模块化的原因\"><a href=\"#XHTML模块化的原因\" class=\"headerlink\" title=\"XHTML模块化的原因\"></a>XHTML模块化的原因</h3><p>通过将 XHTML 分为若干模块，W3C 已经创造出数套小巧且定义良好的 XHTML 元素，这些元素既可被独立应用于简易设备，又可以与其他 XML 标准并入大型且更复杂的应用程序。<br>通过使用模块化的 XHTML，产品和软件设计者可以： </p>\n<ul>\n<li>选择被某种设备所支持的元素。</li>\n<li>在不打破 XHTML 标准的情况下，使用 XML 对 XHTML 进行扩展。</li>\n<li>针对小型设备，对 XHTML 进行简化。</li>\n<li>通过添加新的 XML 功能（比如 MathML, SVG, 语音和多媒体），针对复杂的应用对 XHTML 进行扩展。</li>\n<li>定义 XHTML 框架，比如 XHTML BASIC （针对移动设备的 XHTML 子集）。  </li>\n</ul>\n<h3 id=\"XHTML模块-1\"><a href=\"#XHTML模块-1\" class=\"headerlink\" title=\"XHTML模块\"></a>XHTML模块</h3><p><img src=\"http://onep1caa3.bkt.clouddn.com/04.24.2.png\" alt=\"\"></p>\n<h2 id=\"XHTML-标准属性\"><a href=\"#XHTML-标准属性\" class=\"headerlink\" title=\"XHTML 标准属性\"></a>XHTML 标准属性</h2><h3 id=\"核心属性-Core-Attributes\"><a href=\"#核心属性-Core-Attributes\" class=\"headerlink\" title=\"核心属性 (Core Attributes)\"></a>核心属性 (Core Attributes)</h3><p><img src=\"http://onep1caa3.bkt.clouddn.com/04.24.3.png\" alt=\"\">  </p>\n<h3 id=\"语言属性-Language-Attributes\"><a href=\"#语言属性-Language-Attributes\" class=\"headerlink\" title=\"语言属性 (Language Attributes)\"></a>语言属性 (Language Attributes)</h3><p><img src=\"http://onep1caa3.bkt.clouddn.com/04.24.4.png\" alt=\"\"> </p>\n<h3 id=\"键盘属性-Keyboard-Attributes\"><a href=\"#键盘属性-Keyboard-Attributes\" class=\"headerlink\" title=\"键盘属性 (Keyboard Attributes)\"></a>键盘属性 (Keyboard Attributes)</h3><p><img src=\"http://onep1caa3.bkt.clouddn.com/04.24.5.png\" alt=\"\">  </p>\n<h2 id=\"XHTML-事件属性\"><a href=\"#XHTML-事件属性\" class=\"headerlink\" title=\"XHTML 事件属性\"></a>XHTML 事件属性</h2><p>HTML 4.0 的新特性之一是使 HTML 事件触发浏览器中的行为，比方说当用户点击一个 HTML 元素时启动一段 JavaScript 。以下就是可被插入 HTML 标签以定义事件行为的一系列属性。</p>\n<h3 id=\"窗口事件-Window-Events\"><a href=\"#窗口事件-Window-Events\" class=\"headerlink\" title=\"窗口事件 (Window Events)\"></a>窗口事件 (Window Events)</h3><p>仅对body和frameset元素有效<br><img src=\"http://onep1caa3.bkt.clouddn.com/04.24.6.png\" alt=\"\"></p>\n<h3 id=\"表单元素事件-Form-Element-Events\"><a href=\"#表单元素事件-Form-Element-Events\" class=\"headerlink\" title=\"表单元素事件 (Form Element Events)\"></a>表单元素事件 (Form Element Events)</h3><p>仅对表单元素中有效。<br><img src=\"http://onep1caa3.bkt.clouddn.com/04.24.7.png\" alt=\"\"></p>\n<h3 id=\"键盘事件-Keyboard-Events\"><a href=\"#键盘事件-Keyboard-Events\" class=\"headerlink\" title=\"键盘事件 (Keyboard Events)\"></a>键盘事件 (Keyboard Events)</h3><p>在下列元素中无效：base, bdo, br, frame, frameset, head, html, iframe, meta, param, script, style, 以及 title 元素。<br><img src=\"http://onep1caa3.bkt.clouddn.com/04.24.8.png\" alt=\"\"></p>\n<h3 id=\"鼠标事件-Mouse-Events\"><a href=\"#鼠标事件-Mouse-Events\" class=\"headerlink\" title=\"鼠标事件 (Mouse Events)\"></a>鼠标事件 (Mouse Events)</h3><p>在下列元素中无效：base, bdo, br, frame, frameset, head, html, iframe, meta, param, script, style, title 元素。<br><img src=\"http://onep1caa3.bkt.clouddn.com/04.24.9.png\" alt=\"\">  </p>\n<h1 id=\"XML\"><a href=\"#XML\" class=\"headerlink\" title=\"XML\"></a>XML</h1><p>XML被设计用来传输和存储数据。</p>\n<h2 id=\"什么是-XML\"><a href=\"#什么是-XML\" class=\"headerlink\" title=\"什么是 XML\"></a>什么是 XML</h2><ul>\n<li>XML 指可扩展标记语言（EXtensible Markup Language）；</li>\n<li>XML 是一种标记语言，很类似 HTML；</li>\n<li>XML 的设计宗旨是传输数据，而非显示数据；</li>\n<li>XML 标签没有被预定义。您需要自行定义标签；</li>\n<li>XML 被设计为具有自我描述性；</li>\n<li>XML 是 W3C 的推荐标准。  </li>\n</ul>\n<h3 id=\"XML与HTML-的主要差别\"><a href=\"#XML与HTML-的主要差别\" class=\"headerlink\" title=\"XML与HTML 的主要差别\"></a>XML与HTML 的主要差别</h3><ul>\n<li>XML 不是 HTML 的替代；<br>XML 和 HTML 为不同的目的而设计；</li>\n<li>XML 被设计为传输和存储数据，其焦点是数据的内容；</li>\n<li>HTML 被设计用来显示数据，其焦点是数据的外观；</li>\n<li>HTML 旨在显示信息，而 XML 旨在传输信息。  </li>\n</ul>\n<h3 id=\"XML没有任何行为\"><a href=\"#XML没有任何行为\" class=\"headerlink\" title=\"XML没有任何行为\"></a>XML没有任何行为</h3><p>XML仅仅是纯文本，有能力处理文本的软件都可以处理XML，通过XML你可以发明自己的标签，同时，XML是对HTML的一种补充，所以并不会代替HTML，XML是独立于软件和硬件的信息传输工具。</p>\n<h2 id=\"XML的用途\"><a href=\"#XML的用途\" class=\"headerlink\" title=\"XML的用途\"></a>XML的用途</h2><p>XML常用于web开发的许多方面，比如简化数据的存储和共享，XML可以把数据从HTML分离。</p>\n<h2 id=\"XML-树结构\"><a href=\"#XML-树结构\" class=\"headerlink\" title=\"XML 树结构\"></a>XML 树结构</h2><p>XML文档形成了一种树结构，它从根部开始，然后扩展到枝叶。</p>\n<h3 id=\"一个XML文档实例\"><a href=\"#一个XML文档实例\" class=\"headerlink\" title=\"一个XML文档实例\"></a>一个XML文档实例</h3><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;\n&lt;note&gt;\n&lt;to&gt;George&lt;/to&gt;\n&lt;from&gt;John&lt;/from&gt;\n&lt;heading&gt;Reminder&lt;/heading&gt;\n&lt;body&gt;Don&apos;t forget the meeting!&lt;/body&gt;\n&lt;/note&gt;  \n</code></pre><ul>\n<li>第一行是 XML 声明。它定义 XML 的版本 (1.0) 和所使用的编码 (ISO-8859-1 = Latin-1/西欧字符集)；</li>\n<li>下一行描述文档的根元素（像在说：“本文档是一个便签”）；</li>\n<li>接下来 4 行描述根的 4 个子元素（to, from, heading 以及 body）；</li>\n<li>最后一行定义根元素的结尾。</li>\n</ul>\n<p>树结构：<br><img src=\"http://www.w3school.com.cn/i/ct_nodetree1.gif\" alt=\"\">    </p>\n<pre><code>&lt;bookstore&gt;\n&lt;book category=&quot;COOKING&quot;&gt;\n  &lt;title lang=&quot;en&quot;&gt;Everyday Italian&lt;/title&gt; \n  &lt;author&gt;Giada De Laurentiis&lt;/author&gt; \n  &lt;year&gt;2005&lt;/year&gt; \n  &lt;price&gt;30.00&lt;/price&gt; \n&lt;/book&gt;\n&lt;book category=&quot;CHILDREN&quot;&gt;\n  &lt;title lang=&quot;en&quot;&gt;Harry Potter&lt;/title&gt; \n  &lt;author&gt;J K. Rowling&lt;/author&gt; \n  &lt;year&gt;2005&lt;/year&gt; \n  &lt;price&gt;29.99&lt;/price&gt; \n&lt;/book&gt;\n&lt;book category=&quot;WEB&quot;&gt;\n  &lt;title lang=&quot;en&quot;&gt;Learning XML&lt;/title&gt; \n  &lt;author&gt;Erik T. Ray&lt;/author&gt; \n  &lt;year&gt;2003&lt;/year&gt; \n  &lt;price&gt;39.95&lt;/price&gt; \n&lt;/book&gt;\n&lt;/bookstore&gt;  \n</code></pre><h2 id=\"XML-语法\"><a href=\"#XML-语法\" class=\"headerlink\" title=\"XML 语法\"></a>XML 语法</h2><ul>\n<li>所有XML 元素都必须有关闭标签</li>\n<li>XML 对大小写敏感</li>\n<li>XML 必须正确嵌套</li>\n<li>XML 必须有根元素 </li>\n<li>XML 的属性必须加引号 </li>\n<li>实体引用  </li>\n<li>XML 中的注释<code>&lt;!-- This is a comment --&gt;</code> </li>\n<li>在XML中，空格会被保留  </li>\n<li>XML 中以LF存储换行  </li>\n</ul>\n<h2 id=\"XML元素\"><a href=\"#XML元素\" class=\"headerlink\" title=\"XML元素\"></a>XML元素</h2><h3 id=\"XML元素是什么\"><a href=\"#XML元素是什么\" class=\"headerlink\" title=\"XML元素是什么\"></a>XML元素是什么</h3><p>XML 元素指的是从（且包括）开始标签直到（且包括）结束标签的部分。元素可包含其他元素、文本或者两者的混合物。元素也可以拥有属性。</p>\n<h3 id=\"XML-命名规则\"><a href=\"#XML-命名规则\" class=\"headerlink\" title=\"XML 命名规则\"></a>XML 命名规则</h3><ul>\n<li>名称可以含字母、数字以及其他的字符</li>\n<li>名称不能以数字或者标点符号开始</li>\n<li>名称不能以字符 “xml”（或者 XML、Xml）开始</li>\n<li>名称不能包含空格</li>\n</ul>\n<h3 id=\"最佳命名习惯\"><a href=\"#最佳命名习惯\" class=\"headerlink\" title=\"最佳命名习惯\"></a>最佳命名习惯</h3><p>使名称具有描述性。使用下划线的名称也很不错。<br>名称应当比较简短，比如：<book_title>，而不是：<the_title_of_the_book>。<br>避免 “-“ 字符。如果您按照这样的方式进行命名：”first-name”，一些软件会认为你需要提取第一个单词。<br>避免 “.” 字符。如果您按照这样的方式进行命名：”first.name”，一些软件会认为 “name” 是对象 “first” 的属性。<br>避免 “:” 字符。冒号会被转换为命名空间来使用（稍后介绍）。<br>XML 文档经常有一个对应的数据库，其中的字段会对应 XML 文档中的元素。有一个实用的经验，即使用数据库的名称规则来命名 XML 文档中的元素。<br>非英语的字母比如 éòá 也是合法的 XML 元素名，不过需要留意当软件开发商不支持这些字符时可能出现的问题。  </p>\n<h3 id=\"XML-是可扩展的\"><a href=\"#XML-是可扩展的\" class=\"headerlink\" title=\"XML 是可扩展的\"></a>XML 是可扩展的</h3><p>XML 的优势之一，就是可以经常在不中断应用程序的情况下进行扩展。 </p>\n<h2 id=\"XML属性\"><a href=\"#XML属性\" class=\"headerlink\" title=\"XML属性\"></a>XML属性</h2><h3 id=\"XML属性-1\"><a href=\"#XML属性-1\" class=\"headerlink\" title=\"XML属性\"></a>XML属性</h3><p>属性通常提供不属于数据组成部分的信息。<br><code>&lt;file type=&quot;gif&quot;&gt;computer.gif&lt;/file&gt;</code><br>对于上面这个例子，文件类型与数据无关，但是对需要处理这个元素的软件来说却很重要。  </p>\n<h3 id=\"XML-属性必须加引号\"><a href=\"#XML-属性必须加引号\" class=\"headerlink\" title=\"XML 属性必须加引号\"></a>XML 属性必须加引号</h3><p>属性值必须被引号包围，不过单引号和双引号均可使用。</p>\n<h3 id=\"XML-元素-vs-属性\"><a href=\"#XML-元素-vs-属性\" class=\"headerlink\" title=\"XML 元素 vs. 属性\"></a>XML 元素 vs. 属性</h3><p> 元数据（有关数据的数据）应当存储为属性，而数据本身应当存储为元素。  </p>\n<h2 id=\"XML-查看\"><a href=\"#XML-查看\" class=\"headerlink\" title=\"XML 查看\"></a>XML 查看</h2><p>XML 文档不会携带有关如何显示数据的信息。<br>由于 XML 标签由 XML 文档的作者“发明”，浏览器无法确定像 <table> 这样一个标签究竟描述一个 HTML 表格还是一个餐桌。<br>在没有任何有关如何显示数据的信息的情况下，大多数的浏览器都会仅仅把 XML 文档显示为源代码。  </p>\n<h2 id=\"XML-JavaScript\"><a href=\"#XML-JavaScript\" class=\"headerlink\" title=\"XML JavaScript\"></a>XML JavaScript</h2><h3 id=\"XMLHttpRequest-对象\"><a href=\"#XMLHttpRequest-对象\" class=\"headerlink\" title=\"XMLHttpRequest 对象\"></a>XMLHttpRequest 对象</h3><p>XMLHttpRequest 对象用于在后台与服务器交换数据。</p>\n<h4 id=\"什么是-XMLHttpRequest-对象？\"><a href=\"#什么是-XMLHttpRequest-对象？\" class=\"headerlink\" title=\"什么是 XMLHttpRequest 对象？\"></a>什么是 XMLHttpRequest 对象？</h4><p>XMLHttpRequest 对象用于在后台与服务器交换数据。<br>XMLHttpRequest 对象是开发者的梦想，因为可以： </p>\n<ul>\n<li>在不重新加载页面的情况下更新网页</li>\n<li>在页面已加载后从服务器请求数据</li>\n<li>在页面已加载后从服务器接收数据</li>\n<li>在后台向服务器发送数据  </li>\n</ul>\n<h4 id=\"创建XMLHttpRequest-对象\"><a href=\"#创建XMLHttpRequest-对象\" class=\"headerlink\" title=\"创建XMLHttpRequest 对象\"></a>创建XMLHttpRequest 对象</h4><p>创建 XMLHttpRequest 对象的语法：<code>xmlhttp=new XMLHttpRequest();</code>  </p>\n"},{"title":"加快网站访问速度的方法","_content":"通过以下的方法，可以提高网站的访问速度，减少页面的加载时间。\n\n----------\n## 1.减少HTTP请求数量\n80%的用户响应时间被花费在前端，而这其中的绝大多数时间是用于下载页面中的图片、样式表、脚本以及Flash这些组件。减少这些组件的数量就可以减少展示页面所需的请求数，而这是提高网页响应速度的关键。 \n  \n* 合并文件，通过把所有脚本置于一个脚本文件里或者把所有样式表放于一个样式表文件中，从而减少Http请求的数量。\n* CSS Sprites是减少图片请求的首选方案。把所有的背景图片合并到一张图中，使用CSS的`background-image` 和`background-position` 属性去控制展现恰当的图片区域。\n* Image maps把多张图片组合成为一张图片。图片的总大小是不变的，但减少Http请求数会提高页面的响应速度。Image maps只能用于图片在网页中相邻的情况，比如导航条。制定image maps中的图片坐标是个很麻烦的过程，而且容易出错。同时给导航使用image maps也并不易读，所以并不推荐使用。\n* 内联图片使用data: URL scheme 把图片数据嵌入页面，但这会增加Html文档的大小。把内联图片合并到你被缓存的的样式表中是一个能既减少HTTP请求数又不会增加页面大小的方法。 \n\n\n减少页面的Http请求数量是第一步，而且对于提高用户初次访问体验是最重要的一步。  \n## 2.使用内容分布式网络（CDN）\n用户80-90%的访问时间被花费在下载页面中的图片、样式表、脚本、Flash这些组件上。这是网站展示的黄金法则。那么与其重新设计网站的结构，不如先实现这些静态组件的分布。这不仅仅可以大幅减少响应时间，而且由于内容分布式网络（content delivery networks）的存在，这将是个很简单的工作。内容分布式网络（CDN）是一系列分布在不同地域的服务器的集合，能够更有效的给用户发送信息。它会根据一种衡量网域距离的方法，选取为某个用户发送数据的服务器。比如，到达用户最少跳或者最快相应速度的服务器会被选中。 \n## 3.给头部添加一个失效期或者Cache-Control \n* 对于静态组件：把头部的缓存期设为某个遥远的未来，使其能够“永不过期”；\n* 对于动态组件：使用适当的Cache-Control头部帮助浏览器执行特定的请求。 \n\n网页设计越来越丰富，页面里包含了越来越多的脚本、样式表、图片和Flash。页面的初次访问者也许会发送多个HTTP请求，但通过给头部添加失效期，你可以使那些组件被缓存。这会避免下次浏览页面时的不必要的HTTP请求。给图片文件的头部设置失效时间更为常用，但包括脚本文件、样式表和Flash之类的所有组件的头部都应该被设置失效时间。浏览器（还有代理服务器）使用缓存以减少HTTP请求的数量和大小，提高网页的加载速度。服务器在HTTP相应中通过头部中的过期时间告知客户端一个组件可以被缓存多久。\n## 4.Gzip压缩组件\n使用gzip压缩通常会减少70%的HTTP响应大小。当前浏览器中大约90%的Internet通讯传输声明支持gzip。\n## 5.把样式表放在前面\n把样式表放在文档的最后，会导致包括IE在内的大部分浏览器不进行逐步呈现。浏览器为了避免当样式改变时重绘元素而中止呈现。用户会十分无聊的看到一个空白的页面。\n## 6.把脚本放在最后\n脚本可能会堵塞并发的下载。HTTP/1.1规范建议浏览器在每个域名下只进行两个并发下载。如果你把图片放在多个域名下，可以实现多于两个的并发下载。当脚本被下载时，即使使用不同的域名。浏览器也不会进行任何其它的下载。有些情况下把脚本放到底部并不太容易。比如，脚本使用document.write 来添加部分页面中的内容，就不能放到页面中更后面的位置。还可能有作用域的问题。很多情况下，还有一些变通的方法。\n通常的建议是使用延迟脚本。DEFER属性表明脚本不包括document.write，而且提示浏览器继续展现。不幸的是，Firefox不支持DEFER属性。IE中，脚本可以被延迟，但并不如你期望的那么久。如果一个脚本可以被延迟，那么它也可以被放在页面的底部。这会让你的页面加载的更快。\n## 7.不使用CSS表达式\n使用一次性的表达式是减少CSS表达式的执行次数的一个方法，当表达式第一次执行时，CSS表达式会被一个确定的值代替。如果在页面生命周期中，样式属性必须动态的设定，使用事件处理替代CSS表达式是一个可选的方法。如果必须使用CSS表达式，要记得它们会执行上千次并影响页面的性能。\n## 8.使用外部的JavaScript和CSS\n在实际应用中使用外部的文件往往产生更快的页面，因为浏览器会缓存JavaScript和CSS文件。而内联在页面里的JavaScript和CSS会在每次请求页面时下载。这会减少所需的HTTP请求数，但增大HTML文档的体积。而另一方面，如果放在外部文件里的JavaScript和CSS被浏览器缓存，则既不用增加HTTP请求的数量，HTML文档的体积也会减少。\n## 9.减少DNS查询\n当客户端的DNS缓存被清空（包括浏览器和操作系统的缓存），DNS查询的数量等同于网页中单独的域名的数量。包括页面中的链接，图片，脚本文件，样式表，Flash对象等。减少不同域名的数量则会减少DNS查询的数量。减少不同域名的数量可能减少页面并行的下载数量。减少DNS查询缩短了响应时间，但减少了并行下载数也许会增加响应时间。将组件分布在两到四个域名之间能很好的折中减少DNS查询提高的速度和维持较高水平的并行下载的效果。\n## 10.缩小JavaScript和CSS\n缩小是指从代码中删除不必要的字母，减少文件体积从而提高加载速度。缩减代码时需要移除所有的注释，以及不需要的空白（空格，新行和tab）。这样处理JavaScript之后，会由于下载文件的体积被减少而提高响应的性能。不仅仅要压缩外部的脚本和样式表，内敛的\n< script>和< style>部分也可以而且应当被压缩。\n## 11.避免重定向\n重定向降低了用户体验。在用户和HTML文档之间插入的重定向延误了页面的呈现和组件下载，因为它们都不可能在获得HTML文档之前开始。\n## 12.移除重复的脚本\n当脚本被重复包含时，由于增加了不必要的HTTP请求和JavaScript的执行，影响了性能。\n## 13.设定ETags\n实体标签（ETags）是服务器和浏览器用于确定浏览器中缓存的组件和服务器中的是否对应的一种机制。\n## 14.让Ajax可以缓存\nAjax的好处之一是它能给用户提供瞬间的响应，因为它从服务端异步请求数据。但Ajax不能保证用户在等候那些异步的JavaScript和XML响应返回时什么都不做。在应用程序中，用户是否继续等待取决于Ajax怎样应用。为了提高性能，优化Ajax响应很重要。提高Ajax性能最重要的方式是使响应缓存。\n## 15.更早地刷新缓冲区\n当用户请求一个页面，服务端会花费200至500毫秒的时间组合HTML页面。在这期间，浏览器会静静等待数据到来。PHP中有flush（）函数，它允许你向浏览器发送部分就绪的HTML响应，这样浏览器可以在服务器处理余下的HTML页面时去获取组件。这样的好处主要在忙碌的后台和轻松的前台间可以看到。\n## 16.在Ajax请求中使用GET方法\nPOST方法在浏览器中分两步执行：先发送头部，然后发送数据。所以最好使用只发送一个TCP包（除非你有很多的cookie）的GET方法。IE中URL的最大长度是2000，所以如果你发送超过2000的数据就不能使用GET方法。\n## 17.后加载组件\n 有执行拖放、下拉和动画的JavaScript代码和菜单，它们可以稍后加载，因为用户在初始呈现之后才会在页面上拖动元素。其他的可以被后加载的地方包括隐藏的内容（当用户做某项操作才会展现的内容）和被折叠的图片。\n## 18.利用浏览器的空闲时间来加载之后需要的组件\n利用浏览器的空闲时间来加载之后需要的组件（比如图片，样式表和脚本），当用户浏览下一个页面的时候，大部分组件都已经在缓存里了而页面会加载的更快。\n## 19.减少DOM 元素数量\n复杂的页面意味着更多的字节需要被下载而且也意味着在JavaScript中遍历DOM更慢。比如你在页面中添加一个事件，让它在500或者5000个DOM元素中循环，它们的效率是不同的。\n## 20.减少cookie的大小\n尽量减少cookie的体积对减少用户获得响应的时间十分重要。\n## 21.减少dom的读取\n利用Javascript读取DOM元素很慢，所以为了获得响应更快的页面，应该减少dom的读取，同时避免利用JavaScript定位布局。\n## 22.不要再HTML中缩放图片\n不要使用大小超过需要的图片，即使你能够在HTML中设置它的属性。\n## 23.使用小的可缓存的favion.ico\nfavicon.icon是放在服务器根目录的一个图片，而且由于它是在同一服务器下的，Cookie也会随着每次请求一并发送。这张图片同样干扰下载队列，比如在IE中，当你在onload事件中请求额外的组件时，favicon会在这些额外组件之前下载。所以为了减少favicon.ico的不利影响，应当使用小图片，小于1k最好，并设置你认为合适的过期时间。","source":"_posts/2017.05.24speedup.md","raw":"---\ntitle: 加快网站访问速度的方法\ntags: [http]\ncategories: 知识 \n---\n通过以下的方法，可以提高网站的访问速度，减少页面的加载时间。\n\n----------\n## 1.减少HTTP请求数量\n80%的用户响应时间被花费在前端，而这其中的绝大多数时间是用于下载页面中的图片、样式表、脚本以及Flash这些组件。减少这些组件的数量就可以减少展示页面所需的请求数，而这是提高网页响应速度的关键。 \n  \n* 合并文件，通过把所有脚本置于一个脚本文件里或者把所有样式表放于一个样式表文件中，从而减少Http请求的数量。\n* CSS Sprites是减少图片请求的首选方案。把所有的背景图片合并到一张图中，使用CSS的`background-image` 和`background-position` 属性去控制展现恰当的图片区域。\n* Image maps把多张图片组合成为一张图片。图片的总大小是不变的，但减少Http请求数会提高页面的响应速度。Image maps只能用于图片在网页中相邻的情况，比如导航条。制定image maps中的图片坐标是个很麻烦的过程，而且容易出错。同时给导航使用image maps也并不易读，所以并不推荐使用。\n* 内联图片使用data: URL scheme 把图片数据嵌入页面，但这会增加Html文档的大小。把内联图片合并到你被缓存的的样式表中是一个能既减少HTTP请求数又不会增加页面大小的方法。 \n\n\n减少页面的Http请求数量是第一步，而且对于提高用户初次访问体验是最重要的一步。  \n## 2.使用内容分布式网络（CDN）\n用户80-90%的访问时间被花费在下载页面中的图片、样式表、脚本、Flash这些组件上。这是网站展示的黄金法则。那么与其重新设计网站的结构，不如先实现这些静态组件的分布。这不仅仅可以大幅减少响应时间，而且由于内容分布式网络（content delivery networks）的存在，这将是个很简单的工作。内容分布式网络（CDN）是一系列分布在不同地域的服务器的集合，能够更有效的给用户发送信息。它会根据一种衡量网域距离的方法，选取为某个用户发送数据的服务器。比如，到达用户最少跳或者最快相应速度的服务器会被选中。 \n## 3.给头部添加一个失效期或者Cache-Control \n* 对于静态组件：把头部的缓存期设为某个遥远的未来，使其能够“永不过期”；\n* 对于动态组件：使用适当的Cache-Control头部帮助浏览器执行特定的请求。 \n\n网页设计越来越丰富，页面里包含了越来越多的脚本、样式表、图片和Flash。页面的初次访问者也许会发送多个HTTP请求，但通过给头部添加失效期，你可以使那些组件被缓存。这会避免下次浏览页面时的不必要的HTTP请求。给图片文件的头部设置失效时间更为常用，但包括脚本文件、样式表和Flash之类的所有组件的头部都应该被设置失效时间。浏览器（还有代理服务器）使用缓存以减少HTTP请求的数量和大小，提高网页的加载速度。服务器在HTTP相应中通过头部中的过期时间告知客户端一个组件可以被缓存多久。\n## 4.Gzip压缩组件\n使用gzip压缩通常会减少70%的HTTP响应大小。当前浏览器中大约90%的Internet通讯传输声明支持gzip。\n## 5.把样式表放在前面\n把样式表放在文档的最后，会导致包括IE在内的大部分浏览器不进行逐步呈现。浏览器为了避免当样式改变时重绘元素而中止呈现。用户会十分无聊的看到一个空白的页面。\n## 6.把脚本放在最后\n脚本可能会堵塞并发的下载。HTTP/1.1规范建议浏览器在每个域名下只进行两个并发下载。如果你把图片放在多个域名下，可以实现多于两个的并发下载。当脚本被下载时，即使使用不同的域名。浏览器也不会进行任何其它的下载。有些情况下把脚本放到底部并不太容易。比如，脚本使用document.write 来添加部分页面中的内容，就不能放到页面中更后面的位置。还可能有作用域的问题。很多情况下，还有一些变通的方法。\n通常的建议是使用延迟脚本。DEFER属性表明脚本不包括document.write，而且提示浏览器继续展现。不幸的是，Firefox不支持DEFER属性。IE中，脚本可以被延迟，但并不如你期望的那么久。如果一个脚本可以被延迟，那么它也可以被放在页面的底部。这会让你的页面加载的更快。\n## 7.不使用CSS表达式\n使用一次性的表达式是减少CSS表达式的执行次数的一个方法，当表达式第一次执行时，CSS表达式会被一个确定的值代替。如果在页面生命周期中，样式属性必须动态的设定，使用事件处理替代CSS表达式是一个可选的方法。如果必须使用CSS表达式，要记得它们会执行上千次并影响页面的性能。\n## 8.使用外部的JavaScript和CSS\n在实际应用中使用外部的文件往往产生更快的页面，因为浏览器会缓存JavaScript和CSS文件。而内联在页面里的JavaScript和CSS会在每次请求页面时下载。这会减少所需的HTTP请求数，但增大HTML文档的体积。而另一方面，如果放在外部文件里的JavaScript和CSS被浏览器缓存，则既不用增加HTTP请求的数量，HTML文档的体积也会减少。\n## 9.减少DNS查询\n当客户端的DNS缓存被清空（包括浏览器和操作系统的缓存），DNS查询的数量等同于网页中单独的域名的数量。包括页面中的链接，图片，脚本文件，样式表，Flash对象等。减少不同域名的数量则会减少DNS查询的数量。减少不同域名的数量可能减少页面并行的下载数量。减少DNS查询缩短了响应时间，但减少了并行下载数也许会增加响应时间。将组件分布在两到四个域名之间能很好的折中减少DNS查询提高的速度和维持较高水平的并行下载的效果。\n## 10.缩小JavaScript和CSS\n缩小是指从代码中删除不必要的字母，减少文件体积从而提高加载速度。缩减代码时需要移除所有的注释，以及不需要的空白（空格，新行和tab）。这样处理JavaScript之后，会由于下载文件的体积被减少而提高响应的性能。不仅仅要压缩外部的脚本和样式表，内敛的\n< script>和< style>部分也可以而且应当被压缩。\n## 11.避免重定向\n重定向降低了用户体验。在用户和HTML文档之间插入的重定向延误了页面的呈现和组件下载，因为它们都不可能在获得HTML文档之前开始。\n## 12.移除重复的脚本\n当脚本被重复包含时，由于增加了不必要的HTTP请求和JavaScript的执行，影响了性能。\n## 13.设定ETags\n实体标签（ETags）是服务器和浏览器用于确定浏览器中缓存的组件和服务器中的是否对应的一种机制。\n## 14.让Ajax可以缓存\nAjax的好处之一是它能给用户提供瞬间的响应，因为它从服务端异步请求数据。但Ajax不能保证用户在等候那些异步的JavaScript和XML响应返回时什么都不做。在应用程序中，用户是否继续等待取决于Ajax怎样应用。为了提高性能，优化Ajax响应很重要。提高Ajax性能最重要的方式是使响应缓存。\n## 15.更早地刷新缓冲区\n当用户请求一个页面，服务端会花费200至500毫秒的时间组合HTML页面。在这期间，浏览器会静静等待数据到来。PHP中有flush（）函数，它允许你向浏览器发送部分就绪的HTML响应，这样浏览器可以在服务器处理余下的HTML页面时去获取组件。这样的好处主要在忙碌的后台和轻松的前台间可以看到。\n## 16.在Ajax请求中使用GET方法\nPOST方法在浏览器中分两步执行：先发送头部，然后发送数据。所以最好使用只发送一个TCP包（除非你有很多的cookie）的GET方法。IE中URL的最大长度是2000，所以如果你发送超过2000的数据就不能使用GET方法。\n## 17.后加载组件\n 有执行拖放、下拉和动画的JavaScript代码和菜单，它们可以稍后加载，因为用户在初始呈现之后才会在页面上拖动元素。其他的可以被后加载的地方包括隐藏的内容（当用户做某项操作才会展现的内容）和被折叠的图片。\n## 18.利用浏览器的空闲时间来加载之后需要的组件\n利用浏览器的空闲时间来加载之后需要的组件（比如图片，样式表和脚本），当用户浏览下一个页面的时候，大部分组件都已经在缓存里了而页面会加载的更快。\n## 19.减少DOM 元素数量\n复杂的页面意味着更多的字节需要被下载而且也意味着在JavaScript中遍历DOM更慢。比如你在页面中添加一个事件，让它在500或者5000个DOM元素中循环，它们的效率是不同的。\n## 20.减少cookie的大小\n尽量减少cookie的体积对减少用户获得响应的时间十分重要。\n## 21.减少dom的读取\n利用Javascript读取DOM元素很慢，所以为了获得响应更快的页面，应该减少dom的读取，同时避免利用JavaScript定位布局。\n## 22.不要再HTML中缩放图片\n不要使用大小超过需要的图片，即使你能够在HTML中设置它的属性。\n## 23.使用小的可缓存的favion.ico\nfavicon.icon是放在服务器根目录的一个图片，而且由于它是在同一服务器下的，Cookie也会随着每次请求一并发送。这张图片同样干扰下载队列，比如在IE中，当你在onload事件中请求额外的组件时，favicon会在这些额外组件之前下载。所以为了减少favicon.ico的不利影响，应当使用小图片，小于1k最好，并设置你认为合适的过期时间。","slug":"2017.05.24speedup","published":1,"date":"2017-05-24T03:30:44.000Z","updated":"2017-05-24T03:30:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwvh25e5005aw39zquccf8db","content":"<p>通过以下的方法，可以提高网站的访问速度，减少页面的加载时间。</p>\n<hr>\n<h2 id=\"1-减少HTTP请求数量\"><a href=\"#1-减少HTTP请求数量\" class=\"headerlink\" title=\"1.减少HTTP请求数量\"></a>1.减少HTTP请求数量</h2><p>80%的用户响应时间被花费在前端，而这其中的绝大多数时间是用于下载页面中的图片、样式表、脚本以及Flash这些组件。减少这些组件的数量就可以减少展示页面所需的请求数，而这是提高网页响应速度的关键。 </p>\n<ul>\n<li>合并文件，通过把所有脚本置于一个脚本文件里或者把所有样式表放于一个样式表文件中，从而减少Http请求的数量。</li>\n<li>CSS Sprites是减少图片请求的首选方案。把所有的背景图片合并到一张图中，使用CSS的<code>background-image</code> 和<code>background-position</code> 属性去控制展现恰当的图片区域。</li>\n<li>Image maps把多张图片组合成为一张图片。图片的总大小是不变的，但减少Http请求数会提高页面的响应速度。Image maps只能用于图片在网页中相邻的情况，比如导航条。制定image maps中的图片坐标是个很麻烦的过程，而且容易出错。同时给导航使用image maps也并不易读，所以并不推荐使用。</li>\n<li>内联图片使用data: URL scheme 把图片数据嵌入页面，但这会增加Html文档的大小。把内联图片合并到你被缓存的的样式表中是一个能既减少HTTP请求数又不会增加页面大小的方法。 </li>\n</ul>\n<p>减少页面的Http请求数量是第一步，而且对于提高用户初次访问体验是最重要的一步。  </p>\n<h2 id=\"2-使用内容分布式网络（CDN）\"><a href=\"#2-使用内容分布式网络（CDN）\" class=\"headerlink\" title=\"2.使用内容分布式网络（CDN）\"></a>2.使用内容分布式网络（CDN）</h2><p>用户80-90%的访问时间被花费在下载页面中的图片、样式表、脚本、Flash这些组件上。这是网站展示的黄金法则。那么与其重新设计网站的结构，不如先实现这些静态组件的分布。这不仅仅可以大幅减少响应时间，而且由于内容分布式网络（content delivery networks）的存在，这将是个很简单的工作。内容分布式网络（CDN）是一系列分布在不同地域的服务器的集合，能够更有效的给用户发送信息。它会根据一种衡量网域距离的方法，选取为某个用户发送数据的服务器。比如，到达用户最少跳或者最快相应速度的服务器会被选中。 </p>\n<h2 id=\"3-给头部添加一个失效期或者Cache-Control\"><a href=\"#3-给头部添加一个失效期或者Cache-Control\" class=\"headerlink\" title=\"3.给头部添加一个失效期或者Cache-Control\"></a>3.给头部添加一个失效期或者Cache-Control</h2><ul>\n<li>对于静态组件：把头部的缓存期设为某个遥远的未来，使其能够“永不过期”；</li>\n<li>对于动态组件：使用适当的Cache-Control头部帮助浏览器执行特定的请求。 </li>\n</ul>\n<p>网页设计越来越丰富，页面里包含了越来越多的脚本、样式表、图片和Flash。页面的初次访问者也许会发送多个HTTP请求，但通过给头部添加失效期，你可以使那些组件被缓存。这会避免下次浏览页面时的不必要的HTTP请求。给图片文件的头部设置失效时间更为常用，但包括脚本文件、样式表和Flash之类的所有组件的头部都应该被设置失效时间。浏览器（还有代理服务器）使用缓存以减少HTTP请求的数量和大小，提高网页的加载速度。服务器在HTTP相应中通过头部中的过期时间告知客户端一个组件可以被缓存多久。</p>\n<h2 id=\"4-Gzip压缩组件\"><a href=\"#4-Gzip压缩组件\" class=\"headerlink\" title=\"4.Gzip压缩组件\"></a>4.Gzip压缩组件</h2><p>使用gzip压缩通常会减少70%的HTTP响应大小。当前浏览器中大约90%的Internet通讯传输声明支持gzip。</p>\n<h2 id=\"5-把样式表放在前面\"><a href=\"#5-把样式表放在前面\" class=\"headerlink\" title=\"5.把样式表放在前面\"></a>5.把样式表放在前面</h2><p>把样式表放在文档的最后，会导致包括IE在内的大部分浏览器不进行逐步呈现。浏览器为了避免当样式改变时重绘元素而中止呈现。用户会十分无聊的看到一个空白的页面。</p>\n<h2 id=\"6-把脚本放在最后\"><a href=\"#6-把脚本放在最后\" class=\"headerlink\" title=\"6.把脚本放在最后\"></a>6.把脚本放在最后</h2><p>脚本可能会堵塞并发的下载。HTTP/1.1规范建议浏览器在每个域名下只进行两个并发下载。如果你把图片放在多个域名下，可以实现多于两个的并发下载。当脚本被下载时，即使使用不同的域名。浏览器也不会进行任何其它的下载。有些情况下把脚本放到底部并不太容易。比如，脚本使用document.write 来添加部分页面中的内容，就不能放到页面中更后面的位置。还可能有作用域的问题。很多情况下，还有一些变通的方法。<br>通常的建议是使用延迟脚本。DEFER属性表明脚本不包括document.write，而且提示浏览器继续展现。不幸的是，Firefox不支持DEFER属性。IE中，脚本可以被延迟，但并不如你期望的那么久。如果一个脚本可以被延迟，那么它也可以被放在页面的底部。这会让你的页面加载的更快。</p>\n<h2 id=\"7-不使用CSS表达式\"><a href=\"#7-不使用CSS表达式\" class=\"headerlink\" title=\"7.不使用CSS表达式\"></a>7.不使用CSS表达式</h2><p>使用一次性的表达式是减少CSS表达式的执行次数的一个方法，当表达式第一次执行时，CSS表达式会被一个确定的值代替。如果在页面生命周期中，样式属性必须动态的设定，使用事件处理替代CSS表达式是一个可选的方法。如果必须使用CSS表达式，要记得它们会执行上千次并影响页面的性能。</p>\n<h2 id=\"8-使用外部的JavaScript和CSS\"><a href=\"#8-使用外部的JavaScript和CSS\" class=\"headerlink\" title=\"8.使用外部的JavaScript和CSS\"></a>8.使用外部的JavaScript和CSS</h2><p>在实际应用中使用外部的文件往往产生更快的页面，因为浏览器会缓存JavaScript和CSS文件。而内联在页面里的JavaScript和CSS会在每次请求页面时下载。这会减少所需的HTTP请求数，但增大HTML文档的体积。而另一方面，如果放在外部文件里的JavaScript和CSS被浏览器缓存，则既不用增加HTTP请求的数量，HTML文档的体积也会减少。</p>\n<h2 id=\"9-减少DNS查询\"><a href=\"#9-减少DNS查询\" class=\"headerlink\" title=\"9.减少DNS查询\"></a>9.减少DNS查询</h2><p>当客户端的DNS缓存被清空（包括浏览器和操作系统的缓存），DNS查询的数量等同于网页中单独的域名的数量。包括页面中的链接，图片，脚本文件，样式表，Flash对象等。减少不同域名的数量则会减少DNS查询的数量。减少不同域名的数量可能减少页面并行的下载数量。减少DNS查询缩短了响应时间，但减少了并行下载数也许会增加响应时间。将组件分布在两到四个域名之间能很好的折中减少DNS查询提高的速度和维持较高水平的并行下载的效果。</p>\n<h2 id=\"10-缩小JavaScript和CSS\"><a href=\"#10-缩小JavaScript和CSS\" class=\"headerlink\" title=\"10.缩小JavaScript和CSS\"></a>10.缩小JavaScript和CSS</h2><p>缩小是指从代码中删除不必要的字母，减少文件体积从而提高加载速度。缩减代码时需要移除所有的注释，以及不需要的空白（空格，新行和tab）。这样处理JavaScript之后，会由于下载文件的体积被减少而提高响应的性能。不仅仅要压缩外部的脚本和样式表，内敛的<br>&lt; script&gt;和&lt; style&gt;部分也可以而且应当被压缩。</p>\n<h2 id=\"11-避免重定向\"><a href=\"#11-避免重定向\" class=\"headerlink\" title=\"11.避免重定向\"></a>11.避免重定向</h2><p>重定向降低了用户体验。在用户和HTML文档之间插入的重定向延误了页面的呈现和组件下载，因为它们都不可能在获得HTML文档之前开始。</p>\n<h2 id=\"12-移除重复的脚本\"><a href=\"#12-移除重复的脚本\" class=\"headerlink\" title=\"12.移除重复的脚本\"></a>12.移除重复的脚本</h2><p>当脚本被重复包含时，由于增加了不必要的HTTP请求和JavaScript的执行，影响了性能。</p>\n<h2 id=\"13-设定ETags\"><a href=\"#13-设定ETags\" class=\"headerlink\" title=\"13.设定ETags\"></a>13.设定ETags</h2><p>实体标签（ETags）是服务器和浏览器用于确定浏览器中缓存的组件和服务器中的是否对应的一种机制。</p>\n<h2 id=\"14-让Ajax可以缓存\"><a href=\"#14-让Ajax可以缓存\" class=\"headerlink\" title=\"14.让Ajax可以缓存\"></a>14.让Ajax可以缓存</h2><p>Ajax的好处之一是它能给用户提供瞬间的响应，因为它从服务端异步请求数据。但Ajax不能保证用户在等候那些异步的JavaScript和XML响应返回时什么都不做。在应用程序中，用户是否继续等待取决于Ajax怎样应用。为了提高性能，优化Ajax响应很重要。提高Ajax性能最重要的方式是使响应缓存。</p>\n<h2 id=\"15-更早地刷新缓冲区\"><a href=\"#15-更早地刷新缓冲区\" class=\"headerlink\" title=\"15.更早地刷新缓冲区\"></a>15.更早地刷新缓冲区</h2><p>当用户请求一个页面，服务端会花费200至500毫秒的时间组合HTML页面。在这期间，浏览器会静静等待数据到来。PHP中有flush（）函数，它允许你向浏览器发送部分就绪的HTML响应，这样浏览器可以在服务器处理余下的HTML页面时去获取组件。这样的好处主要在忙碌的后台和轻松的前台间可以看到。</p>\n<h2 id=\"16-在Ajax请求中使用GET方法\"><a href=\"#16-在Ajax请求中使用GET方法\" class=\"headerlink\" title=\"16.在Ajax请求中使用GET方法\"></a>16.在Ajax请求中使用GET方法</h2><p>POST方法在浏览器中分两步执行：先发送头部，然后发送数据。所以最好使用只发送一个TCP包（除非你有很多的cookie）的GET方法。IE中URL的最大长度是2000，所以如果你发送超过2000的数据就不能使用GET方法。</p>\n<h2 id=\"17-后加载组件\"><a href=\"#17-后加载组件\" class=\"headerlink\" title=\"17.后加载组件\"></a>17.后加载组件</h2><p> 有执行拖放、下拉和动画的JavaScript代码和菜单，它们可以稍后加载，因为用户在初始呈现之后才会在页面上拖动元素。其他的可以被后加载的地方包括隐藏的内容（当用户做某项操作才会展现的内容）和被折叠的图片。</p>\n<h2 id=\"18-利用浏览器的空闲时间来加载之后需要的组件\"><a href=\"#18-利用浏览器的空闲时间来加载之后需要的组件\" class=\"headerlink\" title=\"18.利用浏览器的空闲时间来加载之后需要的组件\"></a>18.利用浏览器的空闲时间来加载之后需要的组件</h2><p>利用浏览器的空闲时间来加载之后需要的组件（比如图片，样式表和脚本），当用户浏览下一个页面的时候，大部分组件都已经在缓存里了而页面会加载的更快。</p>\n<h2 id=\"19-减少DOM-元素数量\"><a href=\"#19-减少DOM-元素数量\" class=\"headerlink\" title=\"19.减少DOM 元素数量\"></a>19.减少DOM 元素数量</h2><p>复杂的页面意味着更多的字节需要被下载而且也意味着在JavaScript中遍历DOM更慢。比如你在页面中添加一个事件，让它在500或者5000个DOM元素中循环，它们的效率是不同的。</p>\n<h2 id=\"20-减少cookie的大小\"><a href=\"#20-减少cookie的大小\" class=\"headerlink\" title=\"20.减少cookie的大小\"></a>20.减少cookie的大小</h2><p>尽量减少cookie的体积对减少用户获得响应的时间十分重要。</p>\n<h2 id=\"21-减少dom的读取\"><a href=\"#21-减少dom的读取\" class=\"headerlink\" title=\"21.减少dom的读取\"></a>21.减少dom的读取</h2><p>利用Javascript读取DOM元素很慢，所以为了获得响应更快的页面，应该减少dom的读取，同时避免利用JavaScript定位布局。</p>\n<h2 id=\"22-不要再HTML中缩放图片\"><a href=\"#22-不要再HTML中缩放图片\" class=\"headerlink\" title=\"22.不要再HTML中缩放图片\"></a>22.不要再HTML中缩放图片</h2><p>不要使用大小超过需要的图片，即使你能够在HTML中设置它的属性。</p>\n<h2 id=\"23-使用小的可缓存的favion-ico\"><a href=\"#23-使用小的可缓存的favion-ico\" class=\"headerlink\" title=\"23.使用小的可缓存的favion.ico\"></a>23.使用小的可缓存的favion.ico</h2><p>favicon.icon是放在服务器根目录的一个图片，而且由于它是在同一服务器下的，Cookie也会随着每次请求一并发送。这张图片同样干扰下载队列，比如在IE中，当你在onload事件中请求额外的组件时，favicon会在这些额外组件之前下载。所以为了减少favicon.ico的不利影响，应当使用小图片，小于1k最好，并设置你认为合适的过期时间。</p>\n","excerpt":"","more":"<p>通过以下的方法，可以提高网站的访问速度，减少页面的加载时间。</p>\n<hr>\n<h2 id=\"1-减少HTTP请求数量\"><a href=\"#1-减少HTTP请求数量\" class=\"headerlink\" title=\"1.减少HTTP请求数量\"></a>1.减少HTTP请求数量</h2><p>80%的用户响应时间被花费在前端，而这其中的绝大多数时间是用于下载页面中的图片、样式表、脚本以及Flash这些组件。减少这些组件的数量就可以减少展示页面所需的请求数，而这是提高网页响应速度的关键。 </p>\n<ul>\n<li>合并文件，通过把所有脚本置于一个脚本文件里或者把所有样式表放于一个样式表文件中，从而减少Http请求的数量。</li>\n<li>CSS Sprites是减少图片请求的首选方案。把所有的背景图片合并到一张图中，使用CSS的<code>background-image</code> 和<code>background-position</code> 属性去控制展现恰当的图片区域。</li>\n<li>Image maps把多张图片组合成为一张图片。图片的总大小是不变的，但减少Http请求数会提高页面的响应速度。Image maps只能用于图片在网页中相邻的情况，比如导航条。制定image maps中的图片坐标是个很麻烦的过程，而且容易出错。同时给导航使用image maps也并不易读，所以并不推荐使用。</li>\n<li>内联图片使用data: URL scheme 把图片数据嵌入页面，但这会增加Html文档的大小。把内联图片合并到你被缓存的的样式表中是一个能既减少HTTP请求数又不会增加页面大小的方法。 </li>\n</ul>\n<p>减少页面的Http请求数量是第一步，而且对于提高用户初次访问体验是最重要的一步。  </p>\n<h2 id=\"2-使用内容分布式网络（CDN）\"><a href=\"#2-使用内容分布式网络（CDN）\" class=\"headerlink\" title=\"2.使用内容分布式网络（CDN）\"></a>2.使用内容分布式网络（CDN）</h2><p>用户80-90%的访问时间被花费在下载页面中的图片、样式表、脚本、Flash这些组件上。这是网站展示的黄金法则。那么与其重新设计网站的结构，不如先实现这些静态组件的分布。这不仅仅可以大幅减少响应时间，而且由于内容分布式网络（content delivery networks）的存在，这将是个很简单的工作。内容分布式网络（CDN）是一系列分布在不同地域的服务器的集合，能够更有效的给用户发送信息。它会根据一种衡量网域距离的方法，选取为某个用户发送数据的服务器。比如，到达用户最少跳或者最快相应速度的服务器会被选中。 </p>\n<h2 id=\"3-给头部添加一个失效期或者Cache-Control\"><a href=\"#3-给头部添加一个失效期或者Cache-Control\" class=\"headerlink\" title=\"3.给头部添加一个失效期或者Cache-Control\"></a>3.给头部添加一个失效期或者Cache-Control</h2><ul>\n<li>对于静态组件：把头部的缓存期设为某个遥远的未来，使其能够“永不过期”；</li>\n<li>对于动态组件：使用适当的Cache-Control头部帮助浏览器执行特定的请求。 </li>\n</ul>\n<p>网页设计越来越丰富，页面里包含了越来越多的脚本、样式表、图片和Flash。页面的初次访问者也许会发送多个HTTP请求，但通过给头部添加失效期，你可以使那些组件被缓存。这会避免下次浏览页面时的不必要的HTTP请求。给图片文件的头部设置失效时间更为常用，但包括脚本文件、样式表和Flash之类的所有组件的头部都应该被设置失效时间。浏览器（还有代理服务器）使用缓存以减少HTTP请求的数量和大小，提高网页的加载速度。服务器在HTTP相应中通过头部中的过期时间告知客户端一个组件可以被缓存多久。</p>\n<h2 id=\"4-Gzip压缩组件\"><a href=\"#4-Gzip压缩组件\" class=\"headerlink\" title=\"4.Gzip压缩组件\"></a>4.Gzip压缩组件</h2><p>使用gzip压缩通常会减少70%的HTTP响应大小。当前浏览器中大约90%的Internet通讯传输声明支持gzip。</p>\n<h2 id=\"5-把样式表放在前面\"><a href=\"#5-把样式表放在前面\" class=\"headerlink\" title=\"5.把样式表放在前面\"></a>5.把样式表放在前面</h2><p>把样式表放在文档的最后，会导致包括IE在内的大部分浏览器不进行逐步呈现。浏览器为了避免当样式改变时重绘元素而中止呈现。用户会十分无聊的看到一个空白的页面。</p>\n<h2 id=\"6-把脚本放在最后\"><a href=\"#6-把脚本放在最后\" class=\"headerlink\" title=\"6.把脚本放在最后\"></a>6.把脚本放在最后</h2><p>脚本可能会堵塞并发的下载。HTTP/1.1规范建议浏览器在每个域名下只进行两个并发下载。如果你把图片放在多个域名下，可以实现多于两个的并发下载。当脚本被下载时，即使使用不同的域名。浏览器也不会进行任何其它的下载。有些情况下把脚本放到底部并不太容易。比如，脚本使用document.write 来添加部分页面中的内容，就不能放到页面中更后面的位置。还可能有作用域的问题。很多情况下，还有一些变通的方法。<br>通常的建议是使用延迟脚本。DEFER属性表明脚本不包括document.write，而且提示浏览器继续展现。不幸的是，Firefox不支持DEFER属性。IE中，脚本可以被延迟，但并不如你期望的那么久。如果一个脚本可以被延迟，那么它也可以被放在页面的底部。这会让你的页面加载的更快。</p>\n<h2 id=\"7-不使用CSS表达式\"><a href=\"#7-不使用CSS表达式\" class=\"headerlink\" title=\"7.不使用CSS表达式\"></a>7.不使用CSS表达式</h2><p>使用一次性的表达式是减少CSS表达式的执行次数的一个方法，当表达式第一次执行时，CSS表达式会被一个确定的值代替。如果在页面生命周期中，样式属性必须动态的设定，使用事件处理替代CSS表达式是一个可选的方法。如果必须使用CSS表达式，要记得它们会执行上千次并影响页面的性能。</p>\n<h2 id=\"8-使用外部的JavaScript和CSS\"><a href=\"#8-使用外部的JavaScript和CSS\" class=\"headerlink\" title=\"8.使用外部的JavaScript和CSS\"></a>8.使用外部的JavaScript和CSS</h2><p>在实际应用中使用外部的文件往往产生更快的页面，因为浏览器会缓存JavaScript和CSS文件。而内联在页面里的JavaScript和CSS会在每次请求页面时下载。这会减少所需的HTTP请求数，但增大HTML文档的体积。而另一方面，如果放在外部文件里的JavaScript和CSS被浏览器缓存，则既不用增加HTTP请求的数量，HTML文档的体积也会减少。</p>\n<h2 id=\"9-减少DNS查询\"><a href=\"#9-减少DNS查询\" class=\"headerlink\" title=\"9.减少DNS查询\"></a>9.减少DNS查询</h2><p>当客户端的DNS缓存被清空（包括浏览器和操作系统的缓存），DNS查询的数量等同于网页中单独的域名的数量。包括页面中的链接，图片，脚本文件，样式表，Flash对象等。减少不同域名的数量则会减少DNS查询的数量。减少不同域名的数量可能减少页面并行的下载数量。减少DNS查询缩短了响应时间，但减少了并行下载数也许会增加响应时间。将组件分布在两到四个域名之间能很好的折中减少DNS查询提高的速度和维持较高水平的并行下载的效果。</p>\n<h2 id=\"10-缩小JavaScript和CSS\"><a href=\"#10-缩小JavaScript和CSS\" class=\"headerlink\" title=\"10.缩小JavaScript和CSS\"></a>10.缩小JavaScript和CSS</h2><p>缩小是指从代码中删除不必要的字母，减少文件体积从而提高加载速度。缩减代码时需要移除所有的注释，以及不需要的空白（空格，新行和tab）。这样处理JavaScript之后，会由于下载文件的体积被减少而提高响应的性能。不仅仅要压缩外部的脚本和样式表，内敛的<br>&lt; script&gt;和&lt; style&gt;部分也可以而且应当被压缩。</p>\n<h2 id=\"11-避免重定向\"><a href=\"#11-避免重定向\" class=\"headerlink\" title=\"11.避免重定向\"></a>11.避免重定向</h2><p>重定向降低了用户体验。在用户和HTML文档之间插入的重定向延误了页面的呈现和组件下载，因为它们都不可能在获得HTML文档之前开始。</p>\n<h2 id=\"12-移除重复的脚本\"><a href=\"#12-移除重复的脚本\" class=\"headerlink\" title=\"12.移除重复的脚本\"></a>12.移除重复的脚本</h2><p>当脚本被重复包含时，由于增加了不必要的HTTP请求和JavaScript的执行，影响了性能。</p>\n<h2 id=\"13-设定ETags\"><a href=\"#13-设定ETags\" class=\"headerlink\" title=\"13.设定ETags\"></a>13.设定ETags</h2><p>实体标签（ETags）是服务器和浏览器用于确定浏览器中缓存的组件和服务器中的是否对应的一种机制。</p>\n<h2 id=\"14-让Ajax可以缓存\"><a href=\"#14-让Ajax可以缓存\" class=\"headerlink\" title=\"14.让Ajax可以缓存\"></a>14.让Ajax可以缓存</h2><p>Ajax的好处之一是它能给用户提供瞬间的响应，因为它从服务端异步请求数据。但Ajax不能保证用户在等候那些异步的JavaScript和XML响应返回时什么都不做。在应用程序中，用户是否继续等待取决于Ajax怎样应用。为了提高性能，优化Ajax响应很重要。提高Ajax性能最重要的方式是使响应缓存。</p>\n<h2 id=\"15-更早地刷新缓冲区\"><a href=\"#15-更早地刷新缓冲区\" class=\"headerlink\" title=\"15.更早地刷新缓冲区\"></a>15.更早地刷新缓冲区</h2><p>当用户请求一个页面，服务端会花费200至500毫秒的时间组合HTML页面。在这期间，浏览器会静静等待数据到来。PHP中有flush（）函数，它允许你向浏览器发送部分就绪的HTML响应，这样浏览器可以在服务器处理余下的HTML页面时去获取组件。这样的好处主要在忙碌的后台和轻松的前台间可以看到。</p>\n<h2 id=\"16-在Ajax请求中使用GET方法\"><a href=\"#16-在Ajax请求中使用GET方法\" class=\"headerlink\" title=\"16.在Ajax请求中使用GET方法\"></a>16.在Ajax请求中使用GET方法</h2><p>POST方法在浏览器中分两步执行：先发送头部，然后发送数据。所以最好使用只发送一个TCP包（除非你有很多的cookie）的GET方法。IE中URL的最大长度是2000，所以如果你发送超过2000的数据就不能使用GET方法。</p>\n<h2 id=\"17-后加载组件\"><a href=\"#17-后加载组件\" class=\"headerlink\" title=\"17.后加载组件\"></a>17.后加载组件</h2><p> 有执行拖放、下拉和动画的JavaScript代码和菜单，它们可以稍后加载，因为用户在初始呈现之后才会在页面上拖动元素。其他的可以被后加载的地方包括隐藏的内容（当用户做某项操作才会展现的内容）和被折叠的图片。</p>\n<h2 id=\"18-利用浏览器的空闲时间来加载之后需要的组件\"><a href=\"#18-利用浏览器的空闲时间来加载之后需要的组件\" class=\"headerlink\" title=\"18.利用浏览器的空闲时间来加载之后需要的组件\"></a>18.利用浏览器的空闲时间来加载之后需要的组件</h2><p>利用浏览器的空闲时间来加载之后需要的组件（比如图片，样式表和脚本），当用户浏览下一个页面的时候，大部分组件都已经在缓存里了而页面会加载的更快。</p>\n<h2 id=\"19-减少DOM-元素数量\"><a href=\"#19-减少DOM-元素数量\" class=\"headerlink\" title=\"19.减少DOM 元素数量\"></a>19.减少DOM 元素数量</h2><p>复杂的页面意味着更多的字节需要被下载而且也意味着在JavaScript中遍历DOM更慢。比如你在页面中添加一个事件，让它在500或者5000个DOM元素中循环，它们的效率是不同的。</p>\n<h2 id=\"20-减少cookie的大小\"><a href=\"#20-减少cookie的大小\" class=\"headerlink\" title=\"20.减少cookie的大小\"></a>20.减少cookie的大小</h2><p>尽量减少cookie的体积对减少用户获得响应的时间十分重要。</p>\n<h2 id=\"21-减少dom的读取\"><a href=\"#21-减少dom的读取\" class=\"headerlink\" title=\"21.减少dom的读取\"></a>21.减少dom的读取</h2><p>利用Javascript读取DOM元素很慢，所以为了获得响应更快的页面，应该减少dom的读取，同时避免利用JavaScript定位布局。</p>\n<h2 id=\"22-不要再HTML中缩放图片\"><a href=\"#22-不要再HTML中缩放图片\" class=\"headerlink\" title=\"22.不要再HTML中缩放图片\"></a>22.不要再HTML中缩放图片</h2><p>不要使用大小超过需要的图片，即使你能够在HTML中设置它的属性。</p>\n<h2 id=\"23-使用小的可缓存的favion-ico\"><a href=\"#23-使用小的可缓存的favion-ico\" class=\"headerlink\" title=\"23.使用小的可缓存的favion.ico\"></a>23.使用小的可缓存的favion.ico</h2><p>favicon.icon是放在服务器根目录的一个图片，而且由于它是在同一服务器下的，Cookie也会随着每次请求一并发送。这张图片同样干扰下载队列，比如在IE中，当你在onload事件中请求额外的组件时，favicon会在这些额外组件之前下载。所以为了减少favicon.ico的不利影响，应当使用小图片，小于1k最好，并设置你认为合适的过期时间。</p>\n"},{"title":"如何解决跨域问题","_content":"## 什么是跨域\n跨域，指的是浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是浏览器对JavaScript施加的安全限制。   \n## 同源策略\n所谓同源是指，域名，协议，端口均相同。例如：  \nhttp://www.123.com/index.html 调用 http://www.123.com/server.PHP （**非跨域**）\n\nhttp://www.123.com/index.html 调用 http://www.456.com/server.php （**主域名不同:123/456，跨域**）\n\nhttp://abc.123.com/index.html 调用 http://def.123.com/server.php （**子域名不同:abc/def，跨域**）\n\nhttp://www.123.com:8080/index.html 调用 http://www.123.com:8081/server.php （**端口不同:8080/8081，跨域**）\n\nhttp://www.123.com/index.html 调用 https://www.123.com/server.php （**协议不同:http/https，跨域**）\n\n**localhost和127.0.0.1虽然都指向本机，但也属于跨域。**  \n用一张表可以更明显地表示：  \n![](http://onep1caa3.bkt.clouddn.com/2017.05.24.png)  \n需要特别注意的是：\n  \n* 如果是协议和端口造成的跨域问题“前台”是无能为力的；\n* 在跨域问题上，域仅仅是通过“URL的首部”来识别而不会去尝试判断相同的ip地址对应着两个域或两个域是否在同一个ip上。（“URL的首部”指window.location.protocol +window.location.host，也可以理解为“Domains, protocols and ports must match”）  \n\n## 前端如何解决跨域问题\n### 1.document.domain + iframe      (只有在主域相同的时候才能使用该方法)\n#### （1）在www.a.com/a.html中：\n    document.domain = 'a.com';\n    var ifr = document.createElement('iframe');\n    ifr.src = 'http://www.script.a.com/b.html';\n    ifr.display = none;\n    document.body.appendChild(ifr);\n    ifr.onload = function(){\n    var doc = ifr.contentDocument || ifr.contentWindow.document;\n    //在这里操作doc，也就是b.html\n    ifr.onload = null;\n    };  \n#### （2）在www.script.a.com/b.html中：\n    document.domain = 'a.com';  \n### 2.动态创建script\n    function loadScript(url, func) {\n      var head = document.head || document.getElementByTagName('head')[0];\n      var script = document.createElement('script');\n      script.src = url;\n    \n      script.onload = script.onreadystatechange = function(){\n    if(!this.readyState || this.readyState=='loaded' || this.readyState=='complete'){\n      func();\n      script.onload = script.onreadystatechange = null;\n    }\n      };\n    \n      head.insertBefore(script, 0);\n    }\n    window.baidu = {\n      sug: function(data){\n    console.log(data);\n      }\n    }\n    loadScript('http://suggestion.baidu.com/su?wd=w',function(){console.log('loaded')});\n    //我们请求的内容在哪里？\n    //我们可以在chorme调试面板的source中看到script引入的内容  \n### 3. location.hash + iframe \n原理是利用location.hash来进行传值。\n\n假设域名a.com下的文件cs1.html要和cnblogs.com域名下的cs2.html传递信息。  \n\n1) cs1.html首先创建自动创建一个隐藏的iframe，iframe的src指向cnblogs.com域名下的cs2.html页面  \n\n2) cs2.html响应请求后再将通过修改cs1.html的hash值来传递数据  \n\n3) 同时在cs1.html上加一个定时器，隔一段时间来判断location.hash的值有没有变化，一旦有变化则获取获取hash值  \n\n注：由于两个页面不在同一个域下IE、Chrome不允许修改parent.location.hash的值，所以要借助于a.com域名下的一个代理iframe  \n\n  先是a.com下的文件cs1.html文件：  \n  \n    function startRequest(){\n    var ifr = document.createElement('iframe');\n    ifr.style.display = 'none';\n    ifr.src = 'http://www.cnblogs.com/lab/cscript/cs2.html#paramdo';\n    document.body.appendChild(ifr);\n    }\n    \n    function checkHash() {\n    try {\n    var data = location.hash ? location.hash.substring(1) : '';\n    if (console.log) {\n    console.log('Now the data is '+data);\n    }\n    } catch(e) {};\n    }\n    setInterval(checkHash, 2000);  \n另一个域名下的 cs2.html：  \n  \n    //模拟一个简单的参数处理操作\n    switch(location.hash){\n    case '#paramdo':\n    callBack();\n    break;\n    case '#paramset':\n    //do something……\n    break;\n    }\n    \n    function callBack(){\n    try {\n    parent.location.hash = 'somedata';\n    } catch (e) {\n    // ie、chrome的安全机制无法修改parent.location.hash，\n    // 所以要利用一个中间的cnblogs域下的代理iframe\n    var ifrproxy = document.createElement('iframe');\n    ifrproxy.style.display = 'none';\n    ifrproxy.src = 'http://a.com/test/cscript/cs3.html#somedata';// 注意该文件在\"a.com\"域下\n    document.body.appendChild(ifrproxy);\n    }\n    }  \na.com下的域名cs3.html：  \n     \n    //因为parent.parent和自身属于同一个域，所以可以改变其location.hash的值\n    parent.parent.location.hash = self.location.hash.substring(1);  \n### 4.window.name + iframe  \nwindow.name 的美妙之处：name 值在不同的页面（甚至不同域名）加载后依旧存在，并且可以支持非常长的 name 值（2MB）。需要以下步骤：\n  \n* 1）创建a.com/cs1.html\n* 2）创建a.com/proxy.html，并加入如下代码   \n\n\n\n>       <script>\n>       function proxy(url, func){\n>     var isFirst = true,\n>     ifr = document.createElement('iframe'),\n>     loadFunc = function(){\n>       if(isFirst){\n>     ifr.contentWindow.location = 'http://a.com/cs1.html';\n>     isFirst = false;\n>       }else{\n>     func(ifr.contentWindow.name);\n>     ifr.contentWindow.close();\n>     document.body.removeChild(ifr);\n>     ifr.src = '';\n>     ifr = null;\n>       }\n>     };\n>     \n>     ifr.src = url;\n>     ifr.style.display = 'none';\n>     if(ifr.attachEvent) ifr.attachEvent('onload', loadFunc);\n>     else ifr.onload = loadFunc;\n>     \n>     document.body.appendChild(iframe);\n>       }\n>     </script>\n>     </head>\n>     <body>\n>       <script>\n>     proxy('http://www.baidu.com/', function(data){\n>       console.log(data);\n>     });\n>       </script>\n>     </body>    \n\n\n* 3）在b.com/cs1.html中包含:\n\n>     <script>\n>     window.name = '要传送的内容';\n>     </script> \n\n### 5.postMessage（HTML5中的XMLHttpRequest Level 2中的API）  \n1) a.com/index.html中的代码：  \n  \n    <iframe id=\"ifr\" src=\"b.com/index.html\"></iframe>\n    <script type=\"text/javascript\">\n    window.onload = function() {\n    var ifr = document.getElementById('ifr');\n    var targetOrigin = 'http://b.com';  // 若写成'http://b.com/c/proxy.html'效果一样\n    // 若写成'http://c.com'就不会执行postMessage了\n    ifr.contentWindow.postMessage('I was there!', targetOrigin);\n    };\n    </script>  \n\n2)b.com/index.html中的代码：  \n\n    <script type=\"text/javascript\">\n    window.addEventListener('message', function(event){\n    // 通过origin属性判断消息来源地址\n    if (event.origin == 'http://a.com') {\n    alert(event.data);// 弹出\"I was there!\"\n    alert(event.source);  // 对a.com、index.html中window对象的引用\n      // 但由于同源策略，这里event.source不可以访问window对象\n    }\n    }, false);\n    </script>  \n### 6.JSONP  \nJSONP包含两部分：回调函数和数据。\n\n回调函数是当响应到来时要放在当前页面被调用的函数。\n\n数据就是传入回调函数中的json数据，也就是回调函数的参数了。 \n\n  \n    function handleResponse(response){\n    console.log('The responsed data is: '+response.data);\n    }\n    var script = document.createElement('script');\n    script.src = 'http://www.baidu.com/json/?callback=handleResponse';\n    document.body.insertBefore(script, document.body.firstChild);\n    /*handleResonse({\"data\": \"zhe\"})*/\n    //原理如下：\n    //当我们通过script标签请求时\n    //后台就会根据相应的参数(json,handleResponse)\n    //来生成相应的json数据(handleResponse({\"data\": \"zhe\"}))\n    //最后这个返回的json数据(代码)就会被放在当前js文件中被执行\n    //至此跨域通信完成  \n### 7.web sockets  \nweb sockets是一种浏览器的API，它的目标是在一个单独的持久连接上提供全双工、双向通信。(同源策略对web sockets不适用)\n\nweb sockets原理：在JS创建了web socket之后，会有一个HTTP请求发送到浏览器以发起连接。取得服务器响应后，建立的连接会使用HTTP升级从HTTP协议交换为web sockt协议。  \n只有在支持web socket协议的服务器上才能正常工作。   \n \n    var socket = new WebSockt('ws://www.baidu.com');//http->ws; https->wss\n    socket.send('hello WebSockt');\n    socket.onmessage = function(event){\n    var data = event.data;\n    }","source":"_posts/2017.05.2huayu.md","raw":"---\ntitle: 如何解决跨域问题\ntags: [http]\ncategories: 知识 \n---\n## 什么是跨域\n跨域，指的是浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是浏览器对JavaScript施加的安全限制。   \n## 同源策略\n所谓同源是指，域名，协议，端口均相同。例如：  \nhttp://www.123.com/index.html 调用 http://www.123.com/server.PHP （**非跨域**）\n\nhttp://www.123.com/index.html 调用 http://www.456.com/server.php （**主域名不同:123/456，跨域**）\n\nhttp://abc.123.com/index.html 调用 http://def.123.com/server.php （**子域名不同:abc/def，跨域**）\n\nhttp://www.123.com:8080/index.html 调用 http://www.123.com:8081/server.php （**端口不同:8080/8081，跨域**）\n\nhttp://www.123.com/index.html 调用 https://www.123.com/server.php （**协议不同:http/https，跨域**）\n\n**localhost和127.0.0.1虽然都指向本机，但也属于跨域。**  \n用一张表可以更明显地表示：  \n![](http://onep1caa3.bkt.clouddn.com/2017.05.24.png)  \n需要特别注意的是：\n  \n* 如果是协议和端口造成的跨域问题“前台”是无能为力的；\n* 在跨域问题上，域仅仅是通过“URL的首部”来识别而不会去尝试判断相同的ip地址对应着两个域或两个域是否在同一个ip上。（“URL的首部”指window.location.protocol +window.location.host，也可以理解为“Domains, protocols and ports must match”）  \n\n## 前端如何解决跨域问题\n### 1.document.domain + iframe      (只有在主域相同的时候才能使用该方法)\n#### （1）在www.a.com/a.html中：\n    document.domain = 'a.com';\n    var ifr = document.createElement('iframe');\n    ifr.src = 'http://www.script.a.com/b.html';\n    ifr.display = none;\n    document.body.appendChild(ifr);\n    ifr.onload = function(){\n    var doc = ifr.contentDocument || ifr.contentWindow.document;\n    //在这里操作doc，也就是b.html\n    ifr.onload = null;\n    };  \n#### （2）在www.script.a.com/b.html中：\n    document.domain = 'a.com';  \n### 2.动态创建script\n    function loadScript(url, func) {\n      var head = document.head || document.getElementByTagName('head')[0];\n      var script = document.createElement('script');\n      script.src = url;\n    \n      script.onload = script.onreadystatechange = function(){\n    if(!this.readyState || this.readyState=='loaded' || this.readyState=='complete'){\n      func();\n      script.onload = script.onreadystatechange = null;\n    }\n      };\n    \n      head.insertBefore(script, 0);\n    }\n    window.baidu = {\n      sug: function(data){\n    console.log(data);\n      }\n    }\n    loadScript('http://suggestion.baidu.com/su?wd=w',function(){console.log('loaded')});\n    //我们请求的内容在哪里？\n    //我们可以在chorme调试面板的source中看到script引入的内容  \n### 3. location.hash + iframe \n原理是利用location.hash来进行传值。\n\n假设域名a.com下的文件cs1.html要和cnblogs.com域名下的cs2.html传递信息。  \n\n1) cs1.html首先创建自动创建一个隐藏的iframe，iframe的src指向cnblogs.com域名下的cs2.html页面  \n\n2) cs2.html响应请求后再将通过修改cs1.html的hash值来传递数据  \n\n3) 同时在cs1.html上加一个定时器，隔一段时间来判断location.hash的值有没有变化，一旦有变化则获取获取hash值  \n\n注：由于两个页面不在同一个域下IE、Chrome不允许修改parent.location.hash的值，所以要借助于a.com域名下的一个代理iframe  \n\n  先是a.com下的文件cs1.html文件：  \n  \n    function startRequest(){\n    var ifr = document.createElement('iframe');\n    ifr.style.display = 'none';\n    ifr.src = 'http://www.cnblogs.com/lab/cscript/cs2.html#paramdo';\n    document.body.appendChild(ifr);\n    }\n    \n    function checkHash() {\n    try {\n    var data = location.hash ? location.hash.substring(1) : '';\n    if (console.log) {\n    console.log('Now the data is '+data);\n    }\n    } catch(e) {};\n    }\n    setInterval(checkHash, 2000);  \n另一个域名下的 cs2.html：  \n  \n    //模拟一个简单的参数处理操作\n    switch(location.hash){\n    case '#paramdo':\n    callBack();\n    break;\n    case '#paramset':\n    //do something……\n    break;\n    }\n    \n    function callBack(){\n    try {\n    parent.location.hash = 'somedata';\n    } catch (e) {\n    // ie、chrome的安全机制无法修改parent.location.hash，\n    // 所以要利用一个中间的cnblogs域下的代理iframe\n    var ifrproxy = document.createElement('iframe');\n    ifrproxy.style.display = 'none';\n    ifrproxy.src = 'http://a.com/test/cscript/cs3.html#somedata';// 注意该文件在\"a.com\"域下\n    document.body.appendChild(ifrproxy);\n    }\n    }  \na.com下的域名cs3.html：  \n     \n    //因为parent.parent和自身属于同一个域，所以可以改变其location.hash的值\n    parent.parent.location.hash = self.location.hash.substring(1);  \n### 4.window.name + iframe  \nwindow.name 的美妙之处：name 值在不同的页面（甚至不同域名）加载后依旧存在，并且可以支持非常长的 name 值（2MB）。需要以下步骤：\n  \n* 1）创建a.com/cs1.html\n* 2）创建a.com/proxy.html，并加入如下代码   \n\n\n\n>       <script>\n>       function proxy(url, func){\n>     var isFirst = true,\n>     ifr = document.createElement('iframe'),\n>     loadFunc = function(){\n>       if(isFirst){\n>     ifr.contentWindow.location = 'http://a.com/cs1.html';\n>     isFirst = false;\n>       }else{\n>     func(ifr.contentWindow.name);\n>     ifr.contentWindow.close();\n>     document.body.removeChild(ifr);\n>     ifr.src = '';\n>     ifr = null;\n>       }\n>     };\n>     \n>     ifr.src = url;\n>     ifr.style.display = 'none';\n>     if(ifr.attachEvent) ifr.attachEvent('onload', loadFunc);\n>     else ifr.onload = loadFunc;\n>     \n>     document.body.appendChild(iframe);\n>       }\n>     </script>\n>     </head>\n>     <body>\n>       <script>\n>     proxy('http://www.baidu.com/', function(data){\n>       console.log(data);\n>     });\n>       </script>\n>     </body>    \n\n\n* 3）在b.com/cs1.html中包含:\n\n>     <script>\n>     window.name = '要传送的内容';\n>     </script> \n\n### 5.postMessage（HTML5中的XMLHttpRequest Level 2中的API）  \n1) a.com/index.html中的代码：  \n  \n    <iframe id=\"ifr\" src=\"b.com/index.html\"></iframe>\n    <script type=\"text/javascript\">\n    window.onload = function() {\n    var ifr = document.getElementById('ifr');\n    var targetOrigin = 'http://b.com';  // 若写成'http://b.com/c/proxy.html'效果一样\n    // 若写成'http://c.com'就不会执行postMessage了\n    ifr.contentWindow.postMessage('I was there!', targetOrigin);\n    };\n    </script>  \n\n2)b.com/index.html中的代码：  \n\n    <script type=\"text/javascript\">\n    window.addEventListener('message', function(event){\n    // 通过origin属性判断消息来源地址\n    if (event.origin == 'http://a.com') {\n    alert(event.data);// 弹出\"I was there!\"\n    alert(event.source);  // 对a.com、index.html中window对象的引用\n      // 但由于同源策略，这里event.source不可以访问window对象\n    }\n    }, false);\n    </script>  \n### 6.JSONP  \nJSONP包含两部分：回调函数和数据。\n\n回调函数是当响应到来时要放在当前页面被调用的函数。\n\n数据就是传入回调函数中的json数据，也就是回调函数的参数了。 \n\n  \n    function handleResponse(response){\n    console.log('The responsed data is: '+response.data);\n    }\n    var script = document.createElement('script');\n    script.src = 'http://www.baidu.com/json/?callback=handleResponse';\n    document.body.insertBefore(script, document.body.firstChild);\n    /*handleResonse({\"data\": \"zhe\"})*/\n    //原理如下：\n    //当我们通过script标签请求时\n    //后台就会根据相应的参数(json,handleResponse)\n    //来生成相应的json数据(handleResponse({\"data\": \"zhe\"}))\n    //最后这个返回的json数据(代码)就会被放在当前js文件中被执行\n    //至此跨域通信完成  \n### 7.web sockets  \nweb sockets是一种浏览器的API，它的目标是在一个单独的持久连接上提供全双工、双向通信。(同源策略对web sockets不适用)\n\nweb sockets原理：在JS创建了web socket之后，会有一个HTTP请求发送到浏览器以发起连接。取得服务器响应后，建立的连接会使用HTTP升级从HTTP协议交换为web sockt协议。  \n只有在支持web socket协议的服务器上才能正常工作。   \n \n    var socket = new WebSockt('ws://www.baidu.com');//http->ws; https->wss\n    socket.send('hello WebSockt');\n    socket.onmessage = function(event){\n    var data = event.data;\n    }","slug":"2017.05.2huayu","published":1,"date":"2017-05-24T10:44:14.000Z","updated":"2017-05-24T10:44:14.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwvh25e6005ew39ztlfhse5x","content":"<h2 id=\"什么是跨域\"><a href=\"#什么是跨域\" class=\"headerlink\" title=\"什么是跨域\"></a>什么是跨域</h2><p>跨域，指的是浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是浏览器对JavaScript施加的安全限制。   </p>\n<h2 id=\"同源策略\"><a href=\"#同源策略\" class=\"headerlink\" title=\"同源策略\"></a>同源策略</h2><p>所谓同源是指，域名，协议，端口均相同。例如：<br><a href=\"http://www.123.com/index.html\" target=\"_blank\" rel=\"external\">http://www.123.com/index.html</a> 调用 <a href=\"http://www.123.com/server.PHP\" target=\"_blank\" rel=\"external\">http://www.123.com/server.PHP</a> （<strong>非跨域</strong>）</p>\n<p><a href=\"http://www.123.com/index.html\" target=\"_blank\" rel=\"external\">http://www.123.com/index.html</a> 调用 <a href=\"http://www.456.com/server.php\" target=\"_blank\" rel=\"external\">http://www.456.com/server.php</a> （<strong>主域名不同:123/456，跨域</strong>）</p>\n<p><a href=\"http://abc.123.com/index.html\" target=\"_blank\" rel=\"external\">http://abc.123.com/index.html</a> 调用 <a href=\"http://def.123.com/server.php\" target=\"_blank\" rel=\"external\">http://def.123.com/server.php</a> （<strong>子域名不同:abc/def，跨域</strong>）</p>\n<p><a href=\"http://www.123.com:8080/index.html\" target=\"_blank\" rel=\"external\">http://www.123.com:8080/index.html</a> 调用 <a href=\"http://www.123.com:8081/server.php\" target=\"_blank\" rel=\"external\">http://www.123.com:8081/server.php</a> （<strong>端口不同:8080/8081，跨域</strong>）</p>\n<p><a href=\"http://www.123.com/index.html\" target=\"_blank\" rel=\"external\">http://www.123.com/index.html</a> 调用 <a href=\"https://www.123.com/server.php\" target=\"_blank\" rel=\"external\">https://www.123.com/server.php</a> （<strong>协议不同:http/https，跨域</strong>）</p>\n<p><strong>localhost和127.0.0.1虽然都指向本机，但也属于跨域。</strong><br>用一张表可以更明显地表示：<br><img src=\"http://onep1caa3.bkt.clouddn.com/2017.05.24.png\" alt=\"\"><br>需要特别注意的是：</p>\n<ul>\n<li>如果是协议和端口造成的跨域问题“前台”是无能为力的；</li>\n<li>在跨域问题上，域仅仅是通过“URL的首部”来识别而不会去尝试判断相同的ip地址对应着两个域或两个域是否在同一个ip上。（“URL的首部”指window.location.protocol +window.location.host，也可以理解为“Domains, protocols and ports must match”）  </li>\n</ul>\n<h2 id=\"前端如何解决跨域问题\"><a href=\"#前端如何解决跨域问题\" class=\"headerlink\" title=\"前端如何解决跨域问题\"></a>前端如何解决跨域问题</h2><h3 id=\"1-document-domain-iframe-只有在主域相同的时候才能使用该方法\"><a href=\"#1-document-domain-iframe-只有在主域相同的时候才能使用该方法\" class=\"headerlink\" title=\"1.document.domain + iframe      (只有在主域相同的时候才能使用该方法)\"></a>1.document.domain + iframe      (只有在主域相同的时候才能使用该方法)</h3><h4 id=\"（1）在www-a-com-a-html中：\"><a href=\"#（1）在www-a-com-a-html中：\" class=\"headerlink\" title=\"（1）在www.a.com/a.html中：\"></a>（1）在www.a.com/a.html中：</h4><pre><code>document.domain = &apos;a.com&apos;;\nvar ifr = document.createElement(&apos;iframe&apos;);\nifr.src = &apos;http://www.script.a.com/b.html&apos;;\nifr.display = none;\ndocument.body.appendChild(ifr);\nifr.onload = function(){\nvar doc = ifr.contentDocument || ifr.contentWindow.document;\n//在这里操作doc，也就是b.html\nifr.onload = null;\n};  \n</code></pre><h4 id=\"（2）在www-script-a-com-b-html中：\"><a href=\"#（2）在www-script-a-com-b-html中：\" class=\"headerlink\" title=\"（2）在www.script.a.com/b.html中：\"></a>（2）在www.script.a.com/b.html中：</h4><pre><code>document.domain = &apos;a.com&apos;;  \n</code></pre><h3 id=\"2-动态创建script\"><a href=\"#2-动态创建script\" class=\"headerlink\" title=\"2.动态创建script\"></a>2.动态创建script</h3><pre><code>function loadScript(url, func) {\n  var head = document.head || document.getElementByTagName(&apos;head&apos;)[0];\n  var script = document.createElement(&apos;script&apos;);\n  script.src = url;\n\n  script.onload = script.onreadystatechange = function(){\nif(!this.readyState || this.readyState==&apos;loaded&apos; || this.readyState==&apos;complete&apos;){\n  func();\n  script.onload = script.onreadystatechange = null;\n}\n  };\n\n  head.insertBefore(script, 0);\n}\nwindow.baidu = {\n  sug: function(data){\nconsole.log(data);\n  }\n}\nloadScript(&apos;http://suggestion.baidu.com/su?wd=w&apos;,function(){console.log(&apos;loaded&apos;)});\n//我们请求的内容在哪里？\n//我们可以在chorme调试面板的source中看到script引入的内容  \n</code></pre><h3 id=\"3-location-hash-iframe\"><a href=\"#3-location-hash-iframe\" class=\"headerlink\" title=\"3. location.hash + iframe\"></a>3. location.hash + iframe</h3><p>原理是利用location.hash来进行传值。</p>\n<p>假设域名a.com下的文件cs1.html要和cnblogs.com域名下的cs2.html传递信息。  </p>\n<p>1) cs1.html首先创建自动创建一个隐藏的iframe，iframe的src指向cnblogs.com域名下的cs2.html页面  </p>\n<p>2) cs2.html响应请求后再将通过修改cs1.html的hash值来传递数据  </p>\n<p>3) 同时在cs1.html上加一个定时器，隔一段时间来判断location.hash的值有没有变化，一旦有变化则获取获取hash值  </p>\n<p>注：由于两个页面不在同一个域下IE、Chrome不允许修改parent.location.hash的值，所以要借助于a.com域名下的一个代理iframe  </p>\n<p>  先是a.com下的文件cs1.html文件：  </p>\n<pre><code>function startRequest(){\nvar ifr = document.createElement(&apos;iframe&apos;);\nifr.style.display = &apos;none&apos;;\nifr.src = &apos;http://www.cnblogs.com/lab/cscript/cs2.html#paramdo&apos;;\ndocument.body.appendChild(ifr);\n}\n\nfunction checkHash() {\ntry {\nvar data = location.hash ? location.hash.substring(1) : &apos;&apos;;\nif (console.log) {\nconsole.log(&apos;Now the data is &apos;+data);\n}\n} catch(e) {};\n}\nsetInterval(checkHash, 2000);  \n</code></pre><p>另一个域名下的 cs2.html：  </p>\n<pre><code>//模拟一个简单的参数处理操作\nswitch(location.hash){\ncase &apos;#paramdo&apos;:\ncallBack();\nbreak;\ncase &apos;#paramset&apos;:\n//do something……\nbreak;\n}\n\nfunction callBack(){\ntry {\nparent.location.hash = &apos;somedata&apos;;\n} catch (e) {\n// ie、chrome的安全机制无法修改parent.location.hash，\n// 所以要利用一个中间的cnblogs域下的代理iframe\nvar ifrproxy = document.createElement(&apos;iframe&apos;);\nifrproxy.style.display = &apos;none&apos;;\nifrproxy.src = &apos;http://a.com/test/cscript/cs3.html#somedata&apos;;// 注意该文件在&quot;a.com&quot;域下\ndocument.body.appendChild(ifrproxy);\n}\n}  \n</code></pre><p>a.com下的域名cs3.html：  </p>\n<pre><code>//因为parent.parent和自身属于同一个域，所以可以改变其location.hash的值\nparent.parent.location.hash = self.location.hash.substring(1);  \n</code></pre><h3 id=\"4-window-name-iframe\"><a href=\"#4-window-name-iframe\" class=\"headerlink\" title=\"4.window.name + iframe\"></a>4.window.name + iframe</h3><p>window.name 的美妙之处：name 值在不同的页面（甚至不同域名）加载后依旧存在，并且可以支持非常长的 name 值（2MB）。需要以下步骤：</p>\n<ul>\n<li>1）创建a.com/cs1.html</li>\n<li>2）创建a.com/proxy.html，并加入如下代码   </li>\n</ul>\n<blockquote>\n<pre><code>  &lt;script&gt;\n  function proxy(url, func){\nvar isFirst = true,\nifr = document.createElement(&apos;iframe&apos;),\nloadFunc = function(){\n  if(isFirst){\nifr.contentWindow.location = &apos;http://a.com/cs1.html&apos;;\nisFirst = false;\n  }else{\nfunc(ifr.contentWindow.name);\nifr.contentWindow.close();\ndocument.body.removeChild(ifr);\nifr.src = &apos;&apos;;\nifr = null;\n  }\n};\n\nifr.src = url;\nifr.style.display = &apos;none&apos;;\nif(ifr.attachEvent) ifr.attachEvent(&apos;onload&apos;, loadFunc);\nelse ifr.onload = loadFunc;\n\ndocument.body.appendChild(iframe);\n  }\n&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;script&gt;\nproxy(&apos;http://www.baidu.com/&apos;, function(data){\n  console.log(data);\n});\n  &lt;/script&gt;\n&lt;/body&gt;    \n</code></pre></blockquote>\n<ul>\n<li>3）在b.com/cs1.html中包含:</li>\n</ul>\n<blockquote>\n<pre><code>&lt;script&gt;\nwindow.name = &apos;要传送的内容&apos;;\n&lt;/script&gt; \n</code></pre></blockquote>\n<h3 id=\"5-postMessage（HTML5中的XMLHttpRequest-Level-2中的API）\"><a href=\"#5-postMessage（HTML5中的XMLHttpRequest-Level-2中的API）\" class=\"headerlink\" title=\"5.postMessage（HTML5中的XMLHttpRequest Level 2中的API）\"></a>5.postMessage（HTML5中的XMLHttpRequest Level 2中的API）</h3><p>1) a.com/index.html中的代码：  </p>\n<pre><code>&lt;iframe id=&quot;ifr&quot; src=&quot;b.com/index.html&quot;&gt;&lt;/iframe&gt;\n&lt;script type=&quot;text/javascript&quot;&gt;\nwindow.onload = function() {\nvar ifr = document.getElementById(&apos;ifr&apos;);\nvar targetOrigin = &apos;http://b.com&apos;;  // 若写成&apos;http://b.com/c/proxy.html&apos;效果一样\n// 若写成&apos;http://c.com&apos;就不会执行postMessage了\nifr.contentWindow.postMessage(&apos;I was there!&apos;, targetOrigin);\n};\n&lt;/script&gt;  \n</code></pre><p>2)b.com/index.html中的代码：  </p>\n<pre><code>&lt;script type=&quot;text/javascript&quot;&gt;\nwindow.addEventListener(&apos;message&apos;, function(event){\n// 通过origin属性判断消息来源地址\nif (event.origin == &apos;http://a.com&apos;) {\nalert(event.data);// 弹出&quot;I was there!&quot;\nalert(event.source);  // 对a.com、index.html中window对象的引用\n  // 但由于同源策略，这里event.source不可以访问window对象\n}\n}, false);\n&lt;/script&gt;  \n</code></pre><h3 id=\"6-JSONP\"><a href=\"#6-JSONP\" class=\"headerlink\" title=\"6.JSONP\"></a>6.JSONP</h3><p>JSONP包含两部分：回调函数和数据。</p>\n<p>回调函数是当响应到来时要放在当前页面被调用的函数。</p>\n<p>数据就是传入回调函数中的json数据，也就是回调函数的参数了。 </p>\n<pre><code>function handleResponse(response){\nconsole.log(&apos;The responsed data is: &apos;+response.data);\n}\nvar script = document.createElement(&apos;script&apos;);\nscript.src = &apos;http://www.baidu.com/json/?callback=handleResponse&apos;;\ndocument.body.insertBefore(script, document.body.firstChild);\n/*handleResonse({&quot;data&quot;: &quot;zhe&quot;})*/\n//原理如下：\n//当我们通过script标签请求时\n//后台就会根据相应的参数(json,handleResponse)\n//来生成相应的json数据(handleResponse({&quot;data&quot;: &quot;zhe&quot;}))\n//最后这个返回的json数据(代码)就会被放在当前js文件中被执行\n//至此跨域通信完成  \n</code></pre><h3 id=\"7-web-sockets\"><a href=\"#7-web-sockets\" class=\"headerlink\" title=\"7.web sockets\"></a>7.web sockets</h3><p>web sockets是一种浏览器的API，它的目标是在一个单独的持久连接上提供全双工、双向通信。(同源策略对web sockets不适用)</p>\n<p>web sockets原理：在JS创建了web socket之后，会有一个HTTP请求发送到浏览器以发起连接。取得服务器响应后，建立的连接会使用HTTP升级从HTTP协议交换为web sockt协议。<br>只有在支持web socket协议的服务器上才能正常工作。   </p>\n<pre><code>var socket = new WebSockt(&apos;ws://www.baidu.com&apos;);//http-&gt;ws; https-&gt;wss\nsocket.send(&apos;hello WebSockt&apos;);\nsocket.onmessage = function(event){\nvar data = event.data;\n}\n</code></pre>","excerpt":"","more":"<h2 id=\"什么是跨域\"><a href=\"#什么是跨域\" class=\"headerlink\" title=\"什么是跨域\"></a>什么是跨域</h2><p>跨域，指的是浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是浏览器对JavaScript施加的安全限制。   </p>\n<h2 id=\"同源策略\"><a href=\"#同源策略\" class=\"headerlink\" title=\"同源策略\"></a>同源策略</h2><p>所谓同源是指，域名，协议，端口均相同。例如：<br><a href=\"http://www.123.com/index.html\">http://www.123.com/index.html</a> 调用 <a href=\"http://www.123.com/server.PHP\">http://www.123.com/server.PHP</a> （<strong>非跨域</strong>）</p>\n<p><a href=\"http://www.123.com/index.html\">http://www.123.com/index.html</a> 调用 <a href=\"http://www.456.com/server.php\">http://www.456.com/server.php</a> （<strong>主域名不同:123/456，跨域</strong>）</p>\n<p><a href=\"http://abc.123.com/index.html\">http://abc.123.com/index.html</a> 调用 <a href=\"http://def.123.com/server.php\">http://def.123.com/server.php</a> （<strong>子域名不同:abc/def，跨域</strong>）</p>\n<p><a href=\"http://www.123.com:8080/index.html\">http://www.123.com:8080/index.html</a> 调用 <a href=\"http://www.123.com:8081/server.php\">http://www.123.com:8081/server.php</a> （<strong>端口不同:8080/8081，跨域</strong>）</p>\n<p><a href=\"http://www.123.com/index.html\">http://www.123.com/index.html</a> 调用 <a href=\"https://www.123.com/server.php\">https://www.123.com/server.php</a> （<strong>协议不同:http/https，跨域</strong>）</p>\n<p><strong>localhost和127.0.0.1虽然都指向本机，但也属于跨域。</strong><br>用一张表可以更明显地表示：<br><img src=\"http://onep1caa3.bkt.clouddn.com/2017.05.24.png\" alt=\"\"><br>需要特别注意的是：</p>\n<ul>\n<li>如果是协议和端口造成的跨域问题“前台”是无能为力的；</li>\n<li>在跨域问题上，域仅仅是通过“URL的首部”来识别而不会去尝试判断相同的ip地址对应着两个域或两个域是否在同一个ip上。（“URL的首部”指window.location.protocol +window.location.host，也可以理解为“Domains, protocols and ports must match”）  </li>\n</ul>\n<h2 id=\"前端如何解决跨域问题\"><a href=\"#前端如何解决跨域问题\" class=\"headerlink\" title=\"前端如何解决跨域问题\"></a>前端如何解决跨域问题</h2><h3 id=\"1-document-domain-iframe-只有在主域相同的时候才能使用该方法\"><a href=\"#1-document-domain-iframe-只有在主域相同的时候才能使用该方法\" class=\"headerlink\" title=\"1.document.domain + iframe      (只有在主域相同的时候才能使用该方法)\"></a>1.document.domain + iframe      (只有在主域相同的时候才能使用该方法)</h3><h4 id=\"（1）在www-a-com-a-html中：\"><a href=\"#（1）在www-a-com-a-html中：\" class=\"headerlink\" title=\"（1）在www.a.com/a.html中：\"></a>（1）在www.a.com/a.html中：</h4><pre><code>document.domain = &apos;a.com&apos;;\nvar ifr = document.createElement(&apos;iframe&apos;);\nifr.src = &apos;http://www.script.a.com/b.html&apos;;\nifr.display = none;\ndocument.body.appendChild(ifr);\nifr.onload = function(){\nvar doc = ifr.contentDocument || ifr.contentWindow.document;\n//在这里操作doc，也就是b.html\nifr.onload = null;\n};  \n</code></pre><h4 id=\"（2）在www-script-a-com-b-html中：\"><a href=\"#（2）在www-script-a-com-b-html中：\" class=\"headerlink\" title=\"（2）在www.script.a.com/b.html中：\"></a>（2）在www.script.a.com/b.html中：</h4><pre><code>document.domain = &apos;a.com&apos;;  \n</code></pre><h3 id=\"2-动态创建script\"><a href=\"#2-动态创建script\" class=\"headerlink\" title=\"2.动态创建script\"></a>2.动态创建script</h3><pre><code>function loadScript(url, func) {\n  var head = document.head || document.getElementByTagName(&apos;head&apos;)[0];\n  var script = document.createElement(&apos;script&apos;);\n  script.src = url;\n\n  script.onload = script.onreadystatechange = function(){\nif(!this.readyState || this.readyState==&apos;loaded&apos; || this.readyState==&apos;complete&apos;){\n  func();\n  script.onload = script.onreadystatechange = null;\n}\n  };\n\n  head.insertBefore(script, 0);\n}\nwindow.baidu = {\n  sug: function(data){\nconsole.log(data);\n  }\n}\nloadScript(&apos;http://suggestion.baidu.com/su?wd=w&apos;,function(){console.log(&apos;loaded&apos;)});\n//我们请求的内容在哪里？\n//我们可以在chorme调试面板的source中看到script引入的内容  \n</code></pre><h3 id=\"3-location-hash-iframe\"><a href=\"#3-location-hash-iframe\" class=\"headerlink\" title=\"3. location.hash + iframe\"></a>3. location.hash + iframe</h3><p>原理是利用location.hash来进行传值。</p>\n<p>假设域名a.com下的文件cs1.html要和cnblogs.com域名下的cs2.html传递信息。  </p>\n<p>1) cs1.html首先创建自动创建一个隐藏的iframe，iframe的src指向cnblogs.com域名下的cs2.html页面  </p>\n<p>2) cs2.html响应请求后再将通过修改cs1.html的hash值来传递数据  </p>\n<p>3) 同时在cs1.html上加一个定时器，隔一段时间来判断location.hash的值有没有变化，一旦有变化则获取获取hash值  </p>\n<p>注：由于两个页面不在同一个域下IE、Chrome不允许修改parent.location.hash的值，所以要借助于a.com域名下的一个代理iframe  </p>\n<p>  先是a.com下的文件cs1.html文件：  </p>\n<pre><code>function startRequest(){\nvar ifr = document.createElement(&apos;iframe&apos;);\nifr.style.display = &apos;none&apos;;\nifr.src = &apos;http://www.cnblogs.com/lab/cscript/cs2.html#paramdo&apos;;\ndocument.body.appendChild(ifr);\n}\n\nfunction checkHash() {\ntry {\nvar data = location.hash ? location.hash.substring(1) : &apos;&apos;;\nif (console.log) {\nconsole.log(&apos;Now the data is &apos;+data);\n}\n} catch(e) {};\n}\nsetInterval(checkHash, 2000);  \n</code></pre><p>另一个域名下的 cs2.html：  </p>\n<pre><code>//模拟一个简单的参数处理操作\nswitch(location.hash){\ncase &apos;#paramdo&apos;:\ncallBack();\nbreak;\ncase &apos;#paramset&apos;:\n//do something……\nbreak;\n}\n\nfunction callBack(){\ntry {\nparent.location.hash = &apos;somedata&apos;;\n} catch (e) {\n// ie、chrome的安全机制无法修改parent.location.hash，\n// 所以要利用一个中间的cnblogs域下的代理iframe\nvar ifrproxy = document.createElement(&apos;iframe&apos;);\nifrproxy.style.display = &apos;none&apos;;\nifrproxy.src = &apos;http://a.com/test/cscript/cs3.html#somedata&apos;;// 注意该文件在&quot;a.com&quot;域下\ndocument.body.appendChild(ifrproxy);\n}\n}  \n</code></pre><p>a.com下的域名cs3.html：  </p>\n<pre><code>//因为parent.parent和自身属于同一个域，所以可以改变其location.hash的值\nparent.parent.location.hash = self.location.hash.substring(1);  \n</code></pre><h3 id=\"4-window-name-iframe\"><a href=\"#4-window-name-iframe\" class=\"headerlink\" title=\"4.window.name + iframe\"></a>4.window.name + iframe</h3><p>window.name 的美妙之处：name 值在不同的页面（甚至不同域名）加载后依旧存在，并且可以支持非常长的 name 值（2MB）。需要以下步骤：</p>\n<ul>\n<li>1）创建a.com/cs1.html</li>\n<li>2）创建a.com/proxy.html，并加入如下代码   </li>\n</ul>\n<blockquote>\n<pre><code>  &lt;script&gt;\n  function proxy(url, func){\nvar isFirst = true,\nifr = document.createElement(&apos;iframe&apos;),\nloadFunc = function(){\n  if(isFirst){\nifr.contentWindow.location = &apos;http://a.com/cs1.html&apos;;\nisFirst = false;\n  }else{\nfunc(ifr.contentWindow.name);\nifr.contentWindow.close();\ndocument.body.removeChild(ifr);\nifr.src = &apos;&apos;;\nifr = null;\n  }\n};\n\nifr.src = url;\nifr.style.display = &apos;none&apos;;\nif(ifr.attachEvent) ifr.attachEvent(&apos;onload&apos;, loadFunc);\nelse ifr.onload = loadFunc;\n\ndocument.body.appendChild(iframe);\n  }\n&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;script&gt;\nproxy(&apos;http://www.baidu.com/&apos;, function(data){\n  console.log(data);\n});\n  &lt;/script&gt;\n&lt;/body&gt;    \n</code></pre></blockquote>\n<ul>\n<li>3）在b.com/cs1.html中包含:</li>\n</ul>\n<blockquote>\n<pre><code>&lt;script&gt;\nwindow.name = &apos;要传送的内容&apos;;\n&lt;/script&gt; \n</code></pre></blockquote>\n<h3 id=\"5-postMessage（HTML5中的XMLHttpRequest-Level-2中的API）\"><a href=\"#5-postMessage（HTML5中的XMLHttpRequest-Level-2中的API）\" class=\"headerlink\" title=\"5.postMessage（HTML5中的XMLHttpRequest Level 2中的API）\"></a>5.postMessage（HTML5中的XMLHttpRequest Level 2中的API）</h3><p>1) a.com/index.html中的代码：  </p>\n<pre><code>&lt;iframe id=&quot;ifr&quot; src=&quot;b.com/index.html&quot;&gt;&lt;/iframe&gt;\n&lt;script type=&quot;text/javascript&quot;&gt;\nwindow.onload = function() {\nvar ifr = document.getElementById(&apos;ifr&apos;);\nvar targetOrigin = &apos;http://b.com&apos;;  // 若写成&apos;http://b.com/c/proxy.html&apos;效果一样\n// 若写成&apos;http://c.com&apos;就不会执行postMessage了\nifr.contentWindow.postMessage(&apos;I was there!&apos;, targetOrigin);\n};\n&lt;/script&gt;  \n</code></pre><p>2)b.com/index.html中的代码：  </p>\n<pre><code>&lt;script type=&quot;text/javascript&quot;&gt;\nwindow.addEventListener(&apos;message&apos;, function(event){\n// 通过origin属性判断消息来源地址\nif (event.origin == &apos;http://a.com&apos;) {\nalert(event.data);// 弹出&quot;I was there!&quot;\nalert(event.source);  // 对a.com、index.html中window对象的引用\n  // 但由于同源策略，这里event.source不可以访问window对象\n}\n}, false);\n&lt;/script&gt;  \n</code></pre><h3 id=\"6-JSONP\"><a href=\"#6-JSONP\" class=\"headerlink\" title=\"6.JSONP\"></a>6.JSONP</h3><p>JSONP包含两部分：回调函数和数据。</p>\n<p>回调函数是当响应到来时要放在当前页面被调用的函数。</p>\n<p>数据就是传入回调函数中的json数据，也就是回调函数的参数了。 </p>\n<pre><code>function handleResponse(response){\nconsole.log(&apos;The responsed data is: &apos;+response.data);\n}\nvar script = document.createElement(&apos;script&apos;);\nscript.src = &apos;http://www.baidu.com/json/?callback=handleResponse&apos;;\ndocument.body.insertBefore(script, document.body.firstChild);\n/*handleResonse({&quot;data&quot;: &quot;zhe&quot;})*/\n//原理如下：\n//当我们通过script标签请求时\n//后台就会根据相应的参数(json,handleResponse)\n//来生成相应的json数据(handleResponse({&quot;data&quot;: &quot;zhe&quot;}))\n//最后这个返回的json数据(代码)就会被放在当前js文件中被执行\n//至此跨域通信完成  \n</code></pre><h3 id=\"7-web-sockets\"><a href=\"#7-web-sockets\" class=\"headerlink\" title=\"7.web sockets\"></a>7.web sockets</h3><p>web sockets是一种浏览器的API，它的目标是在一个单独的持久连接上提供全双工、双向通信。(同源策略对web sockets不适用)</p>\n<p>web sockets原理：在JS创建了web socket之后，会有一个HTTP请求发送到浏览器以发起连接。取得服务器响应后，建立的连接会使用HTTP升级从HTTP协议交换为web sockt协议。<br>只有在支持web socket协议的服务器上才能正常工作。   </p>\n<pre><code>var socket = new WebSockt(&apos;ws://www.baidu.com&apos;);//http-&gt;ws; https-&gt;wss\nsocket.send(&apos;hello WebSockt&apos;);\nsocket.onmessage = function(event){\nvar data = event.data;\n}\n</code></pre>"},{"title":"Linux常用命令","_content":"\n# Linux 命令\n\n## 文件管理\n\n`vi test.js`\n创建并打开一个文件: test.js\n`touch`\ntouch 的作用是更改一个文件的目录或者目录的时间,如果 touch 的文件不存在则会创建这个空文件.\n`echo \"abcd\" > 1.txt`\n创建 1.txt 并将 abcd 写入.\n\n### less/more/cat\n\n三种查看文件内容的工具.主要区别是:\ncat 是一次性显示整个文件的内容,还可以把多个文件连接起来显示.经常与重定向符号配合使用,适用于文件比较少的情况.\nmore/less 一般会用来显示超过一屏的内容,并且提供翻页功能.more 比 cat 强大,提供分页显示的功能,less 比 more 更强大,提供翻页,跳转,查找等命令,并且 more/less 都支持使用 \bspace/b 显示下一页,使用 f 显示上一页.\n在 less 中,按`h`可以进入帮助界面,提供丰富的帮助命令.\n\n### vi/vim\n\nvi/vim\b 是 Linux 下的文本编辑工具,在 vi/vim 的版本是选择上,原则是:**能使用 vim 就使用 vim,能用最新版就用最新版**\n\n#### 启动及关闭 vi/vim\n\n#####启动\nvi 打开 vi/vim\n`vi <file>` 打开 vi/vim 并加载文件`<file>`\n\n##### 退出\n\n`ZQ/:q!` 无条件退出\n`ZZ/:wq` 存盘并退出\n\n##### 保存部分文件\n\n`:m,nw <file>` 将 m 行到 n 行部分的内容保存到文件 `<file>` 中 ;\n:m,nw >> `<file>` 将 m 行到 n 行的内容添加到文件 `<file>` 的末尾\n\n#### 移动光标\n\n##### 字符\n\nh 左移一个字符\nl 右移一个字符\n\n##### 单词\n\n`w/W` 移动到下一单词的开头\n`b/B` 移动到上一单词的开头\n`e/E`移动到光标所在单词的末尾\n\n##### 行\n\nj 下移一行\nk 上移一行\n0(数字) 移动到当前行的开头\n^ 移动到当前行的第一个非空字符\n\\$ 移动到当前行末尾\n:n 移动到第 N 行\n\n##### 句子\n\n) 移动到当前句子的末尾\n( 移动到当前句子的 \b 开头\n\n##### 段落\n\n} 移动到当前段落的末尾\n{ 移动到当前段落的开头\n\n##### 屏\n\nH 移动到屏幕的第一行\nM 移动到屏幕中间一行\nL 移动到 \b 屏幕的最后一行\n\n##### 页\n\n`Ctrl-f` 向前滚动一页\n`Ctrl-b`向后滚动一页\n`Ctrl-u` 向前滚动半页\n`Ctrl-d` 向后滚动半页\n\n##### 文件\n\n`G` 移动到文件末尾\n`gg` 移动到文件开头\n`:0` 移动到文件第一行\n`:$` 移动到文件最后一行\n\n#### 文本编辑\n\n##### 字符\n\nx 删除光标位置的字符\nc 更改当前字符并进入插入模式\ns 替换光标位置的字符并进入插入模式\nr 替换光标位置的字符但不进入插入模式\ni 在当前位置的字符之前进入插入模式\na 在当前位置的字符之后进入插入模式\n\n##### 单词\n\ncw/cW 删除当前单词从光标开始的部分并进入插入模式\ncb/cB 删除当前单词从光标所在位置至单词开始的部分并进入插入模式\ndw/dW 删除当前单词从光标开始的部分但不进入插入模式\ndb/dB 删除当前单词从光标所在位置至单词开始的部分但不进入插入模式\n\n##### 行\n\ndd 删除当前行\nd0 删除从当前光标开始到行末的内容\nd\\$ 删除从当前光标开始到行末的内容\nI 在当前行的行首进入插入模式\nA 在当前行的行尾进入插入模式\no 在当前行下方另起一行进入插入模式\nO 在当前行上方另起一行进入插入模式\n\n##### 句子\n\nd) 删除当前句子从光标位置开始到句末的内容\nd( 删除当前句子从光标位置开始到句首的内容\n\n##### 段落\n\nd} 删除当前段落从光标位置开始到段末的内容\nd{ 删除当前段落从光标位置开始到段首的内容\n\n#### 文本编辑的高效命令\n\n##### 复制与粘贴\n\nyw 复制当前单词从光标开始的部分\nyy 复制光标所在行的所有字符\np 将最后一个删除或复制文本放在当前字符\nP 将最后一个删除或复制文本放在当前字符之前 配合操作数使用可快速拷贝编辑文本\n\n##### 撤销与重做\n\nu 撤消更改\nCtrl-R 重做更改\n\n##### 重复操作\n\n. 重复上次操作\n\n##### 交换相邻字符或行\n\nxp 交换光标位置的字符和它右边的字符\nddp 交换光标位置的行和它的下一行\n\n##### 大小写转换\n\n~ 将光标下的字母大小写反向转换\nguw 将光标所在的单词变为小写\nguw 将光标所在的单词变为小写\ngUw 将光标所在的单词变为大写\nguu 光标所在的行所有字符变为小写\ngUU 光标所在的行所有字符变为大写\ng~~ 光标所在的行所有字符大小写反向转换\n\n##### 取得外部输出\n\n`: r!<cmd>` 将命令`<cmd>`的输出结果插入到当前光标所在位置\n`:r <file>` 将文件`<file>` 读入到当前光标所在位置\n\n##### 排序\n\n`:1,$!sort` 将文件内的所有内容排序\n\n##### 加入行号\n\n:%!nl 在所有非空行前加入行号\n:%!nl -ba 在所有行前加入行号\n\n##### 缩进\n\n`>>` 右缩进（可配合操作数使用）\n`<<` 左缩进（可配合操作数使用）\n\n##### 自动补全\n\nctrl-p 自动补全\n\n##### 显示当前编辑文件名\n\nCtrl-g 显示当前编辑文件名及行数\n\n##### 显示字符 \b 内码\n\nga 显示光标所在字符的内码（包括十进制码，十六进制码以及八进制码）\n\n#### 文本检索与替换\n\n##### 搜索\n\n/ 在文件中向前搜索\n? 在文件中向后搜索\n\n##### 搜索下一个\n\nn 搜索下一个\nN 反向搜索下一个\n\n#### vi/vim 设置\n\n##### 查看当前设置的值\n\n`:set all` 查看 vi 或 Vim 中设置的所有选项的当前值\n`:set <option>?` 查看特定选项 `<option>` 的当前值\n\n##### 设置行号显示与否\n\n:set number 显示行号\n:set no number 取消行号显示\n\n##### 设置自动缩进\n\n:set autoindent 设置自动缩进\n:set no autoindent 取消自动缩进设置\n\n##### 设置缩进宽度\n\n:set shiftwidth=4 设置缩进宽度为 4\n\n##### 设置是否忽略大小写\n\n:set ignorecase 设置忽略大小\n:set no ignorecase 取消忽略大小设置\n\n##### 设置不可见字符显示与否\n\n:set list 显示不可见字符\n:set nolist 取消显示不可见字符设置\n\n## 删除操作\n\n语法: `rm[选项] dirname`\n选项中,常用的有这几种:\n\n- -i 删除前逐一询问确认;\n- -f 即使被删除的文件的属性是只读，也直接删除，无需逐一确认.\n- -r 将目录及其底下的文件/文件夹一并删除.\n\n例如: `rm -rf /user` 会将 `/user` 目录下的文件全部删除.\n\n## 文件传输 SCP\n>scp是secure copy的简写，用于在Linux下进行远程拷贝文件的命令，和它类似的命令有cp，不过cp只是在本机进行拷贝不能跨服务器，而且scp传输是加密的。可能会稍微影响一下速度。当你服务器硬盘变为只读 read only system时，用scp可以帮你把文件移出来。另外，scp还非常不占资源，不会提高多少系统负荷，在这一点上，rsync就远远不及它了。虽然 rsync比scp会快一点，但当小文件众多的情况下，rsync会导致硬盘I/O非常高，而scp基本不影响系统正常使用。\n### 命令格式\n    scp [参数] [原路径] [目标路径]\n### 命令功能\nscp是 secure copy的缩写, scp是linux系统下基于ssh登陆进行安全的远程文件拷贝命令。linux的scp命令可以在linux服务器之间复制文件和目录。\n### 命令参数\n-1  强制scp命令使用协议ssh1  \n\n-2  强制scp命令使用协议ssh2  \n\n-4  强制scp命令只使用IPv4寻址  \n\n-6  强制scp命令只使用IPv6寻址  \n\n-B  使用批处理模式（传输过程中不询问传输口令或短语）  \n\n-C  允许压缩。（将-C标志传递给ssh，从而打开压缩功能）  \n\n-p 保留原文件的修改时间，访问时间和访问权限。  \n\n-q  不显示传输进度条。  \n\n-r  递归复制整个目录。  \n\n-v 详细方式显示输出。scp和ssh(1)会显示出整个过程的调试信息。这些信息用于调试连接，验证和配置问题。   \n\n-c cipher  以cipher将数据传输进行加密，这个选项将直接传递给ssh。   \n\n-F ssh_config  指定一个替代的ssh配置文件，此参数直接传递给ssh。  \n\n-i identity_file  从指定文件中读取传输时使用的密钥文件，此参数直接传递给ssh。    \n\n-l limit  限定用户所能使用的带宽，以Kbit/s为单位。     \n\n-o ssh_option  如果习惯于使用ssh_config(5)中的参数传递方式，   \n\n-P port  注意是大写的P, port是指定数据传输用到的端口号   \n\n-S program  指定加密传输时所使用的程序。此程序必须能够理解ssh(1)的选项。\n\n\n### 使用实例\n#### 从本地服务器复制到远程服务器： \n##### 复制文件\n命令格式：  \n\n    scp local_file remote_username@remote_ip:remote_folder  \n\n或者  \n\n    scp local_file remote_username@remote_ip:remote_file  \n\n或者  \n\n    scp local_file remote_ip:remote_folder  \n\n或者  \n\n    scp local_file remote_ip:remote_file  \n\n第1,2个指定了用户名，命令执行后需要输入用户密码，第1个仅指定了远程的目录，文件名字不变，第2个指定了文件名  \n\n第3,4个没有指定用户名，命令执行后需要输入用户名和密码，第3个仅指定了远程的目录，文件名字不变，第4个指定了文件名   \n\n##### 复制目录\n命令格式：  \n\n    scp -r local_folder remote_username@remote_ip:remote_folder  \n\n或者  \n\n    scp -r local_folder remote_ip:remote_folder  \n\n第1个指定了用户名，命令执行后需要输入用户密码；  \n\n第2个没有指定用户名，命令执行后需要输入用户名和密码；\n#### 从远程服务器复制到本地服务器： \n从远程复制到本地的scp命令与上面的命令雷同，只要将从本地复制到远程的命令后面2个参数互换顺序就行了。\n\n\n","source":"_posts/2019.01.09.linuxCommand.md","raw":"---\ntitle: Linux常用命令\ntags: [Linux]\ncategories: 知识\n---\n\n# Linux 命令\n\n## 文件管理\n\n`vi test.js`\n创建并打开一个文件: test.js\n`touch`\ntouch 的作用是更改一个文件的目录或者目录的时间,如果 touch 的文件不存在则会创建这个空文件.\n`echo \"abcd\" > 1.txt`\n创建 1.txt 并将 abcd 写入.\n\n### less/more/cat\n\n三种查看文件内容的工具.主要区别是:\ncat 是一次性显示整个文件的内容,还可以把多个文件连接起来显示.经常与重定向符号配合使用,适用于文件比较少的情况.\nmore/less 一般会用来显示超过一屏的内容,并且提供翻页功能.more 比 cat 强大,提供分页显示的功能,less 比 more 更强大,提供翻页,跳转,查找等命令,并且 more/less 都支持使用 \bspace/b 显示下一页,使用 f 显示上一页.\n在 less 中,按`h`可以进入帮助界面,提供丰富的帮助命令.\n\n### vi/vim\n\nvi/vim\b 是 Linux 下的文本编辑工具,在 vi/vim 的版本是选择上,原则是:**能使用 vim 就使用 vim,能用最新版就用最新版**\n\n#### 启动及关闭 vi/vim\n\n#####启动\nvi 打开 vi/vim\n`vi <file>` 打开 vi/vim 并加载文件`<file>`\n\n##### 退出\n\n`ZQ/:q!` 无条件退出\n`ZZ/:wq` 存盘并退出\n\n##### 保存部分文件\n\n`:m,nw <file>` 将 m 行到 n 行部分的内容保存到文件 `<file>` 中 ;\n:m,nw >> `<file>` 将 m 行到 n 行的内容添加到文件 `<file>` 的末尾\n\n#### 移动光标\n\n##### 字符\n\nh 左移一个字符\nl 右移一个字符\n\n##### 单词\n\n`w/W` 移动到下一单词的开头\n`b/B` 移动到上一单词的开头\n`e/E`移动到光标所在单词的末尾\n\n##### 行\n\nj 下移一行\nk 上移一行\n0(数字) 移动到当前行的开头\n^ 移动到当前行的第一个非空字符\n\\$ 移动到当前行末尾\n:n 移动到第 N 行\n\n##### 句子\n\n) 移动到当前句子的末尾\n( 移动到当前句子的 \b 开头\n\n##### 段落\n\n} 移动到当前段落的末尾\n{ 移动到当前段落的开头\n\n##### 屏\n\nH 移动到屏幕的第一行\nM 移动到屏幕中间一行\nL 移动到 \b 屏幕的最后一行\n\n##### 页\n\n`Ctrl-f` 向前滚动一页\n`Ctrl-b`向后滚动一页\n`Ctrl-u` 向前滚动半页\n`Ctrl-d` 向后滚动半页\n\n##### 文件\n\n`G` 移动到文件末尾\n`gg` 移动到文件开头\n`:0` 移动到文件第一行\n`:$` 移动到文件最后一行\n\n#### 文本编辑\n\n##### 字符\n\nx 删除光标位置的字符\nc 更改当前字符并进入插入模式\ns 替换光标位置的字符并进入插入模式\nr 替换光标位置的字符但不进入插入模式\ni 在当前位置的字符之前进入插入模式\na 在当前位置的字符之后进入插入模式\n\n##### 单词\n\ncw/cW 删除当前单词从光标开始的部分并进入插入模式\ncb/cB 删除当前单词从光标所在位置至单词开始的部分并进入插入模式\ndw/dW 删除当前单词从光标开始的部分但不进入插入模式\ndb/dB 删除当前单词从光标所在位置至单词开始的部分但不进入插入模式\n\n##### 行\n\ndd 删除当前行\nd0 删除从当前光标开始到行末的内容\nd\\$ 删除从当前光标开始到行末的内容\nI 在当前行的行首进入插入模式\nA 在当前行的行尾进入插入模式\no 在当前行下方另起一行进入插入模式\nO 在当前行上方另起一行进入插入模式\n\n##### 句子\n\nd) 删除当前句子从光标位置开始到句末的内容\nd( 删除当前句子从光标位置开始到句首的内容\n\n##### 段落\n\nd} 删除当前段落从光标位置开始到段末的内容\nd{ 删除当前段落从光标位置开始到段首的内容\n\n#### 文本编辑的高效命令\n\n##### 复制与粘贴\n\nyw 复制当前单词从光标开始的部分\nyy 复制光标所在行的所有字符\np 将最后一个删除或复制文本放在当前字符\nP 将最后一个删除或复制文本放在当前字符之前 配合操作数使用可快速拷贝编辑文本\n\n##### 撤销与重做\n\nu 撤消更改\nCtrl-R 重做更改\n\n##### 重复操作\n\n. 重复上次操作\n\n##### 交换相邻字符或行\n\nxp 交换光标位置的字符和它右边的字符\nddp 交换光标位置的行和它的下一行\n\n##### 大小写转换\n\n~ 将光标下的字母大小写反向转换\nguw 将光标所在的单词变为小写\nguw 将光标所在的单词变为小写\ngUw 将光标所在的单词变为大写\nguu 光标所在的行所有字符变为小写\ngUU 光标所在的行所有字符变为大写\ng~~ 光标所在的行所有字符大小写反向转换\n\n##### 取得外部输出\n\n`: r!<cmd>` 将命令`<cmd>`的输出结果插入到当前光标所在位置\n`:r <file>` 将文件`<file>` 读入到当前光标所在位置\n\n##### 排序\n\n`:1,$!sort` 将文件内的所有内容排序\n\n##### 加入行号\n\n:%!nl 在所有非空行前加入行号\n:%!nl -ba 在所有行前加入行号\n\n##### 缩进\n\n`>>` 右缩进（可配合操作数使用）\n`<<` 左缩进（可配合操作数使用）\n\n##### 自动补全\n\nctrl-p 自动补全\n\n##### 显示当前编辑文件名\n\nCtrl-g 显示当前编辑文件名及行数\n\n##### 显示字符 \b 内码\n\nga 显示光标所在字符的内码（包括十进制码，十六进制码以及八进制码）\n\n#### 文本检索与替换\n\n##### 搜索\n\n/ 在文件中向前搜索\n? 在文件中向后搜索\n\n##### 搜索下一个\n\nn 搜索下一个\nN 反向搜索下一个\n\n#### vi/vim 设置\n\n##### 查看当前设置的值\n\n`:set all` 查看 vi 或 Vim 中设置的所有选项的当前值\n`:set <option>?` 查看特定选项 `<option>` 的当前值\n\n##### 设置行号显示与否\n\n:set number 显示行号\n:set no number 取消行号显示\n\n##### 设置自动缩进\n\n:set autoindent 设置自动缩进\n:set no autoindent 取消自动缩进设置\n\n##### 设置缩进宽度\n\n:set shiftwidth=4 设置缩进宽度为 4\n\n##### 设置是否忽略大小写\n\n:set ignorecase 设置忽略大小\n:set no ignorecase 取消忽略大小设置\n\n##### 设置不可见字符显示与否\n\n:set list 显示不可见字符\n:set nolist 取消显示不可见字符设置\n\n## 删除操作\n\n语法: `rm[选项] dirname`\n选项中,常用的有这几种:\n\n- -i 删除前逐一询问确认;\n- -f 即使被删除的文件的属性是只读，也直接删除，无需逐一确认.\n- -r 将目录及其底下的文件/文件夹一并删除.\n\n例如: `rm -rf /user` 会将 `/user` 目录下的文件全部删除.\n\n## 文件传输 SCP\n>scp是secure copy的简写，用于在Linux下进行远程拷贝文件的命令，和它类似的命令有cp，不过cp只是在本机进行拷贝不能跨服务器，而且scp传输是加密的。可能会稍微影响一下速度。当你服务器硬盘变为只读 read only system时，用scp可以帮你把文件移出来。另外，scp还非常不占资源，不会提高多少系统负荷，在这一点上，rsync就远远不及它了。虽然 rsync比scp会快一点，但当小文件众多的情况下，rsync会导致硬盘I/O非常高，而scp基本不影响系统正常使用。\n### 命令格式\n    scp [参数] [原路径] [目标路径]\n### 命令功能\nscp是 secure copy的缩写, scp是linux系统下基于ssh登陆进行安全的远程文件拷贝命令。linux的scp命令可以在linux服务器之间复制文件和目录。\n### 命令参数\n-1  强制scp命令使用协议ssh1  \n\n-2  强制scp命令使用协议ssh2  \n\n-4  强制scp命令只使用IPv4寻址  \n\n-6  强制scp命令只使用IPv6寻址  \n\n-B  使用批处理模式（传输过程中不询问传输口令或短语）  \n\n-C  允许压缩。（将-C标志传递给ssh，从而打开压缩功能）  \n\n-p 保留原文件的修改时间，访问时间和访问权限。  \n\n-q  不显示传输进度条。  \n\n-r  递归复制整个目录。  \n\n-v 详细方式显示输出。scp和ssh(1)会显示出整个过程的调试信息。这些信息用于调试连接，验证和配置问题。   \n\n-c cipher  以cipher将数据传输进行加密，这个选项将直接传递给ssh。   \n\n-F ssh_config  指定一个替代的ssh配置文件，此参数直接传递给ssh。  \n\n-i identity_file  从指定文件中读取传输时使用的密钥文件，此参数直接传递给ssh。    \n\n-l limit  限定用户所能使用的带宽，以Kbit/s为单位。     \n\n-o ssh_option  如果习惯于使用ssh_config(5)中的参数传递方式，   \n\n-P port  注意是大写的P, port是指定数据传输用到的端口号   \n\n-S program  指定加密传输时所使用的程序。此程序必须能够理解ssh(1)的选项。\n\n\n### 使用实例\n#### 从本地服务器复制到远程服务器： \n##### 复制文件\n命令格式：  \n\n    scp local_file remote_username@remote_ip:remote_folder  \n\n或者  \n\n    scp local_file remote_username@remote_ip:remote_file  \n\n或者  \n\n    scp local_file remote_ip:remote_folder  \n\n或者  \n\n    scp local_file remote_ip:remote_file  \n\n第1,2个指定了用户名，命令执行后需要输入用户密码，第1个仅指定了远程的目录，文件名字不变，第2个指定了文件名  \n\n第3,4个没有指定用户名，命令执行后需要输入用户名和密码，第3个仅指定了远程的目录，文件名字不变，第4个指定了文件名   \n\n##### 复制目录\n命令格式：  \n\n    scp -r local_folder remote_username@remote_ip:remote_folder  \n\n或者  \n\n    scp -r local_folder remote_ip:remote_folder  \n\n第1个指定了用户名，命令执行后需要输入用户密码；  \n\n第2个没有指定用户名，命令执行后需要输入用户名和密码；\n#### 从远程服务器复制到本地服务器： \n从远程复制到本地的scp命令与上面的命令雷同，只要将从本地复制到远程的命令后面2个参数互换顺序就行了。\n\n\n","slug":"2019.01.09.linuxCommand","published":1,"date":"2019-01-09T04:54:50.239Z","updated":"2019-05-28T08:05:15.985Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwvh25e7005hw39zbdg98me6","content":"<h1 id=\"Linux-命令\"><a href=\"#Linux-命令\" class=\"headerlink\" title=\"Linux 命令\"></a>Linux 命令</h1><h2 id=\"文件管理\"><a href=\"#文件管理\" class=\"headerlink\" title=\"文件管理\"></a>文件管理</h2><p><code>vi test.js</code><br>创建并打开一个文件: test.js<br><code>touch</code><br>touch 的作用是更改一个文件的目录或者目录的时间,如果 touch 的文件不存在则会创建这个空文件.<br><code>echo &quot;abcd&quot; &gt; 1.txt</code><br>创建 1.txt 并将 abcd 写入.</p>\n<h3 id=\"less-more-cat\"><a href=\"#less-more-cat\" class=\"headerlink\" title=\"less/more/cat\"></a>less/more/cat</h3><p>三种查看文件内容的工具.主要区别是:<br>cat 是一次性显示整个文件的内容,还可以把多个文件连接起来显示.经常与重定向符号配合使用,适用于文件比较少的情况.<br>more/less 一般会用来显示超过一屏的内容,并且提供翻页功能.more 比 cat 强大,提供分页显示的功能,less 比 more 更强大,提供翻页,跳转,查找等命令,并且 more/less 都支持使用 \bspace/b 显示下一页,使用 f 显示上一页.<br>在 less 中,按<code>h</code>可以进入帮助界面,提供丰富的帮助命令.</p>\n<h3 id=\"vi-vim\"><a href=\"#vi-vim\" class=\"headerlink\" title=\"vi/vim\"></a>vi/vim</h3><p>vi/vim\b 是 Linux 下的文本编辑工具,在 vi/vim 的版本是选择上,原则是:<strong>能使用 vim 就使用 vim,能用最新版就用最新版</strong></p>\n<h4 id=\"启动及关闭-vi-vim\"><a href=\"#启动及关闭-vi-vim\" class=\"headerlink\" title=\"启动及关闭 vi/vim\"></a>启动及关闭 vi/vim</h4><p>#####启动<br>vi 打开 vi/vim<br><code>vi &lt;file&gt;</code> 打开 vi/vim 并加载文件<code>&lt;file&gt;</code></p>\n<h5 id=\"退出\"><a href=\"#退出\" class=\"headerlink\" title=\"退出\"></a>退出</h5><p><code>ZQ/:q!</code> 无条件退出<br><code>ZZ/:wq</code> 存盘并退出</p>\n<h5 id=\"保存部分文件\"><a href=\"#保存部分文件\" class=\"headerlink\" title=\"保存部分文件\"></a>保存部分文件</h5><p><code>:m,nw &lt;file&gt;</code> 将 m 行到 n 行部分的内容保存到文件 <code>&lt;file&gt;</code> 中 ;<br>:m,nw &gt;&gt; <code>&lt;file&gt;</code> 将 m 行到 n 行的内容添加到文件 <code>&lt;file&gt;</code> 的末尾</p>\n<h4 id=\"移动光标\"><a href=\"#移动光标\" class=\"headerlink\" title=\"移动光标\"></a>移动光标</h4><h5 id=\"字符\"><a href=\"#字符\" class=\"headerlink\" title=\"字符\"></a>字符</h5><p>h 左移一个字符<br>l 右移一个字符</p>\n<h5 id=\"单词\"><a href=\"#单词\" class=\"headerlink\" title=\"单词\"></a>单词</h5><p><code>w/W</code> 移动到下一单词的开头<br><code>b/B</code> 移动到上一单词的开头<br><code>e/E</code>移动到光标所在单词的末尾</p>\n<h5 id=\"行\"><a href=\"#行\" class=\"headerlink\" title=\"行\"></a>行</h5><p>j 下移一行<br>k 上移一行<br>0(数字) 移动到当前行的开头<br>^ 移动到当前行的第一个非空字符<br>\\$ 移动到当前行末尾<br>:n 移动到第 N 行</p>\n<h5 id=\"句子\"><a href=\"#句子\" class=\"headerlink\" title=\"句子\"></a>句子</h5><p>) 移动到当前句子的末尾<br>( 移动到当前句子的 \b 开头</p>\n<h5 id=\"段落\"><a href=\"#段落\" class=\"headerlink\" title=\"段落\"></a>段落</h5><p>} 移动到当前段落的末尾<br>{ 移动到当前段落的开头</p>\n<h5 id=\"屏\"><a href=\"#屏\" class=\"headerlink\" title=\"屏\"></a>屏</h5><p>H 移动到屏幕的第一行<br>M 移动到屏幕中间一行<br>L 移动到 \b 屏幕的最后一行</p>\n<h5 id=\"页\"><a href=\"#页\" class=\"headerlink\" title=\"页\"></a>页</h5><p><code>Ctrl-f</code> 向前滚动一页<br><code>Ctrl-b</code>向后滚动一页<br><code>Ctrl-u</code> 向前滚动半页<br><code>Ctrl-d</code> 向后滚动半页</p>\n<h5 id=\"文件\"><a href=\"#文件\" class=\"headerlink\" title=\"文件\"></a>文件</h5><p><code>G</code> 移动到文件末尾<br><code>gg</code> 移动到文件开头<br><code>:0</code> 移动到文件第一行<br><code>:$</code> 移动到文件最后一行</p>\n<h4 id=\"文本编辑\"><a href=\"#文本编辑\" class=\"headerlink\" title=\"文本编辑\"></a>文本编辑</h4><h5 id=\"字符-1\"><a href=\"#字符-1\" class=\"headerlink\" title=\"字符\"></a>字符</h5><p>x 删除光标位置的字符<br>c 更改当前字符并进入插入模式<br>s 替换光标位置的字符并进入插入模式<br>r 替换光标位置的字符但不进入插入模式<br>i 在当前位置的字符之前进入插入模式<br>a 在当前位置的字符之后进入插入模式</p>\n<h5 id=\"单词-1\"><a href=\"#单词-1\" class=\"headerlink\" title=\"单词\"></a>单词</h5><p>cw/cW 删除当前单词从光标开始的部分并进入插入模式<br>cb/cB 删除当前单词从光标所在位置至单词开始的部分并进入插入模式<br>dw/dW 删除当前单词从光标开始的部分但不进入插入模式<br>db/dB 删除当前单词从光标所在位置至单词开始的部分但不进入插入模式</p>\n<h5 id=\"行-1\"><a href=\"#行-1\" class=\"headerlink\" title=\"行\"></a>行</h5><p>dd 删除当前行<br>d0 删除从当前光标开始到行末的内容<br>d\\$ 删除从当前光标开始到行末的内容<br>I 在当前行的行首进入插入模式<br>A 在当前行的行尾进入插入模式<br>o 在当前行下方另起一行进入插入模式<br>O 在当前行上方另起一行进入插入模式</p>\n<h5 id=\"句子-1\"><a href=\"#句子-1\" class=\"headerlink\" title=\"句子\"></a>句子</h5><p>d) 删除当前句子从光标位置开始到句末的内容<br>d( 删除当前句子从光标位置开始到句首的内容</p>\n<h5 id=\"段落-1\"><a href=\"#段落-1\" class=\"headerlink\" title=\"段落\"></a>段落</h5><p>d} 删除当前段落从光标位置开始到段末的内容<br>d{ 删除当前段落从光标位置开始到段首的内容</p>\n<h4 id=\"文本编辑的高效命令\"><a href=\"#文本编辑的高效命令\" class=\"headerlink\" title=\"文本编辑的高效命令\"></a>文本编辑的高效命令</h4><h5 id=\"复制与粘贴\"><a href=\"#复制与粘贴\" class=\"headerlink\" title=\"复制与粘贴\"></a>复制与粘贴</h5><p>yw 复制当前单词从光标开始的部分<br>yy 复制光标所在行的所有字符<br>p 将最后一个删除或复制文本放在当前字符<br>P 将最后一个删除或复制文本放在当前字符之前 配合操作数使用可快速拷贝编辑文本</p>\n<h5 id=\"撤销与重做\"><a href=\"#撤销与重做\" class=\"headerlink\" title=\"撤销与重做\"></a>撤销与重做</h5><p>u 撤消更改<br>Ctrl-R 重做更改</p>\n<h5 id=\"重复操作\"><a href=\"#重复操作\" class=\"headerlink\" title=\"重复操作\"></a>重复操作</h5><p>. 重复上次操作</p>\n<h5 id=\"交换相邻字符或行\"><a href=\"#交换相邻字符或行\" class=\"headerlink\" title=\"交换相邻字符或行\"></a>交换相邻字符或行</h5><p>xp 交换光标位置的字符和它右边的字符<br>ddp 交换光标位置的行和它的下一行</p>\n<h5 id=\"大小写转换\"><a href=\"#大小写转换\" class=\"headerlink\" title=\"大小写转换\"></a>大小写转换</h5><p>~ 将光标下的字母大小写反向转换<br>guw 将光标所在的单词变为小写<br>guw 将光标所在的单词变为小写<br>gUw 将光标所在的单词变为大写<br>guu 光标所在的行所有字符变为小写<br>gUU 光标所在的行所有字符变为大写<br>g~~ 光标所在的行所有字符大小写反向转换</p>\n<h5 id=\"取得外部输出\"><a href=\"#取得外部输出\" class=\"headerlink\" title=\"取得外部输出\"></a>取得外部输出</h5><p><code>: r!&lt;cmd&gt;</code> 将命令<code>&lt;cmd&gt;</code>的输出结果插入到当前光标所在位置<br><code>:r &lt;file&gt;</code> 将文件<code>&lt;file&gt;</code> 读入到当前光标所在位置</p>\n<h5 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h5><p><code>:1,$!sort</code> 将文件内的所有内容排序</p>\n<h5 id=\"加入行号\"><a href=\"#加入行号\" class=\"headerlink\" title=\"加入行号\"></a>加入行号</h5><p>:%!nl 在所有非空行前加入行号<br>:%!nl -ba 在所有行前加入行号</p>\n<h5 id=\"缩进\"><a href=\"#缩进\" class=\"headerlink\" title=\"缩进\"></a>缩进</h5><p><code>&gt;&gt;</code> 右缩进（可配合操作数使用）<br><code>&lt;&lt;</code> 左缩进（可配合操作数使用）</p>\n<h5 id=\"自动补全\"><a href=\"#自动补全\" class=\"headerlink\" title=\"自动补全\"></a>自动补全</h5><p>ctrl-p 自动补全</p>\n<h5 id=\"显示当前编辑文件名\"><a href=\"#显示当前编辑文件名\" class=\"headerlink\" title=\"显示当前编辑文件名\"></a>显示当前编辑文件名</h5><p>Ctrl-g 显示当前编辑文件名及行数</p>\n<h5 id=\"显示字符-内码\"><a href=\"#显示字符-内码\" class=\"headerlink\" title=\"显示字符 \b 内码\"></a>显示字符 \b 内码</h5><p>ga 显示光标所在字符的内码（包括十进制码，十六进制码以及八进制码）</p>\n<h4 id=\"文本检索与替换\"><a href=\"#文本检索与替换\" class=\"headerlink\" title=\"文本检索与替换\"></a>文本检索与替换</h4><h5 id=\"搜索\"><a href=\"#搜索\" class=\"headerlink\" title=\"搜索\"></a>搜索</h5><p>/ 在文件中向前搜索<br>? 在文件中向后搜索</p>\n<h5 id=\"搜索下一个\"><a href=\"#搜索下一个\" class=\"headerlink\" title=\"搜索下一个\"></a>搜索下一个</h5><p>n 搜索下一个<br>N 反向搜索下一个</p>\n<h4 id=\"vi-vim-设置\"><a href=\"#vi-vim-设置\" class=\"headerlink\" title=\"vi/vim 设置\"></a>vi/vim 设置</h4><h5 id=\"查看当前设置的值\"><a href=\"#查看当前设置的值\" class=\"headerlink\" title=\"查看当前设置的值\"></a>查看当前设置的值</h5><p><code>:set all</code> 查看 vi 或 Vim 中设置的所有选项的当前值<br><code>:set &lt;option&gt;?</code> 查看特定选项 <code>&lt;option&gt;</code> 的当前值</p>\n<h5 id=\"设置行号显示与否\"><a href=\"#设置行号显示与否\" class=\"headerlink\" title=\"设置行号显示与否\"></a>设置行号显示与否</h5><p>:set number 显示行号<br>:set no number 取消行号显示</p>\n<h5 id=\"设置自动缩进\"><a href=\"#设置自动缩进\" class=\"headerlink\" title=\"设置自动缩进\"></a>设置自动缩进</h5><p>:set autoindent 设置自动缩进<br>:set no autoindent 取消自动缩进设置</p>\n<h5 id=\"设置缩进宽度\"><a href=\"#设置缩进宽度\" class=\"headerlink\" title=\"设置缩进宽度\"></a>设置缩进宽度</h5><p>:set shiftwidth=4 设置缩进宽度为 4</p>\n<h5 id=\"设置是否忽略大小写\"><a href=\"#设置是否忽略大小写\" class=\"headerlink\" title=\"设置是否忽略大小写\"></a>设置是否忽略大小写</h5><p>:set ignorecase 设置忽略大小<br>:set no ignorecase 取消忽略大小设置</p>\n<h5 id=\"设置不可见字符显示与否\"><a href=\"#设置不可见字符显示与否\" class=\"headerlink\" title=\"设置不可见字符显示与否\"></a>设置不可见字符显示与否</h5><p>:set list 显示不可见字符<br>:set nolist 取消显示不可见字符设置</p>\n<h2 id=\"删除操作\"><a href=\"#删除操作\" class=\"headerlink\" title=\"删除操作\"></a>删除操作</h2><p>语法: <code>rm[选项] dirname</code><br>选项中,常用的有这几种:</p>\n<ul>\n<li>-i 删除前逐一询问确认;</li>\n<li>-f 即使被删除的文件的属性是只读，也直接删除，无需逐一确认.</li>\n<li>-r 将目录及其底下的文件/文件夹一并删除.</li>\n</ul>\n<p>例如: <code>rm -rf /user</code> 会将 <code>/user</code> 目录下的文件全部删除.</p>\n<h2 id=\"文件传输-SCP\"><a href=\"#文件传输-SCP\" class=\"headerlink\" title=\"文件传输 SCP\"></a>文件传输 SCP</h2><blockquote>\n<p>scp是secure copy的简写，用于在Linux下进行远程拷贝文件的命令，和它类似的命令有cp，不过cp只是在本机进行拷贝不能跨服务器，而且scp传输是加密的。可能会稍微影响一下速度。当你服务器硬盘变为只读 read only system时，用scp可以帮你把文件移出来。另外，scp还非常不占资源，不会提高多少系统负荷，在这一点上，rsync就远远不及它了。虽然 rsync比scp会快一点，但当小文件众多的情况下，rsync会导致硬盘I/O非常高，而scp基本不影响系统正常使用。</p>\n<h3 id=\"命令格式\"><a href=\"#命令格式\" class=\"headerlink\" title=\"命令格式\"></a>命令格式</h3><pre><code>scp [参数] [原路径] [目标路径]\n</code></pre><h3 id=\"命令功能\"><a href=\"#命令功能\" class=\"headerlink\" title=\"命令功能\"></a>命令功能</h3><p>scp是 secure copy的缩写, scp是linux系统下基于ssh登陆进行安全的远程文件拷贝命令。linux的scp命令可以在linux服务器之间复制文件和目录。</p>\n<h3 id=\"命令参数\"><a href=\"#命令参数\" class=\"headerlink\" title=\"命令参数\"></a>命令参数</h3><p>-1  强制scp命令使用协议ssh1  </p>\n</blockquote>\n<p>-2  强制scp命令使用协议ssh2  </p>\n<p>-4  强制scp命令只使用IPv4寻址  </p>\n<p>-6  强制scp命令只使用IPv6寻址  </p>\n<p>-B  使用批处理模式（传输过程中不询问传输口令或短语）  </p>\n<p>-C  允许压缩。（将-C标志传递给ssh，从而打开压缩功能）  </p>\n<p>-p 保留原文件的修改时间，访问时间和访问权限。  </p>\n<p>-q  不显示传输进度条。  </p>\n<p>-r  递归复制整个目录。  </p>\n<p>-v 详细方式显示输出。scp和ssh(1)会显示出整个过程的调试信息。这些信息用于调试连接，验证和配置问题。   </p>\n<p>-c cipher  以cipher将数据传输进行加密，这个选项将直接传递给ssh。   </p>\n<p>-F ssh_config  指定一个替代的ssh配置文件，此参数直接传递给ssh。  </p>\n<p>-i identity_file  从指定文件中读取传输时使用的密钥文件，此参数直接传递给ssh。    </p>\n<p>-l limit  限定用户所能使用的带宽，以Kbit/s为单位。     </p>\n<p>-o ssh_option  如果习惯于使用ssh_config(5)中的参数传递方式，   </p>\n<p>-P port  注意是大写的P, port是指定数据传输用到的端口号   </p>\n<p>-S program  指定加密传输时所使用的程序。此程序必须能够理解ssh(1)的选项。</p>\n<h3 id=\"使用实例\"><a href=\"#使用实例\" class=\"headerlink\" title=\"使用实例\"></a>使用实例</h3><h4 id=\"从本地服务器复制到远程服务器：\"><a href=\"#从本地服务器复制到远程服务器：\" class=\"headerlink\" title=\"从本地服务器复制到远程服务器：\"></a>从本地服务器复制到远程服务器：</h4><h5 id=\"复制文件\"><a href=\"#复制文件\" class=\"headerlink\" title=\"复制文件\"></a>复制文件</h5><p>命令格式：  </p>\n<pre><code>scp local_file remote_username@remote_ip:remote_folder  \n</code></pre><p>或者  </p>\n<pre><code>scp local_file remote_username@remote_ip:remote_file  \n</code></pre><p>或者  </p>\n<pre><code>scp local_file remote_ip:remote_folder  \n</code></pre><p>或者  </p>\n<pre><code>scp local_file remote_ip:remote_file  \n</code></pre><p>第1,2个指定了用户名，命令执行后需要输入用户密码，第1个仅指定了远程的目录，文件名字不变，第2个指定了文件名  </p>\n<p>第3,4个没有指定用户名，命令执行后需要输入用户名和密码，第3个仅指定了远程的目录，文件名字不变，第4个指定了文件名   </p>\n<h5 id=\"复制目录\"><a href=\"#复制目录\" class=\"headerlink\" title=\"复制目录\"></a>复制目录</h5><p>命令格式：  </p>\n<pre><code>scp -r local_folder remote_username@remote_ip:remote_folder  \n</code></pre><p>或者  </p>\n<pre><code>scp -r local_folder remote_ip:remote_folder  \n</code></pre><p>第1个指定了用户名，命令执行后需要输入用户密码；  </p>\n<p>第2个没有指定用户名，命令执行后需要输入用户名和密码；</p>\n<h4 id=\"从远程服务器复制到本地服务器：\"><a href=\"#从远程服务器复制到本地服务器：\" class=\"headerlink\" title=\"从远程服务器复制到本地服务器：\"></a>从远程服务器复制到本地服务器：</h4><p>从远程复制到本地的scp命令与上面的命令雷同，只要将从本地复制到远程的命令后面2个参数互换顺序就行了。</p>\n","excerpt":"","more":"<h1 id=\"Linux-命令\"><a href=\"#Linux-命令\" class=\"headerlink\" title=\"Linux 命令\"></a>Linux 命令</h1><h2 id=\"文件管理\"><a href=\"#文件管理\" class=\"headerlink\" title=\"文件管理\"></a>文件管理</h2><p><code>vi test.js</code><br>创建并打开一个文件: test.js<br><code>touch</code><br>touch 的作用是更改一个文件的目录或者目录的时间,如果 touch 的文件不存在则会创建这个空文件.<br><code>echo &quot;abcd&quot; &gt; 1.txt</code><br>创建 1.txt 并将 abcd 写入.</p>\n<h3 id=\"less-more-cat\"><a href=\"#less-more-cat\" class=\"headerlink\" title=\"less/more/cat\"></a>less/more/cat</h3><p>三种查看文件内容的工具.主要区别是:<br>cat 是一次性显示整个文件的内容,还可以把多个文件连接起来显示.经常与重定向符号配合使用,适用于文件比较少的情况.<br>more/less 一般会用来显示超过一屏的内容,并且提供翻页功能.more 比 cat 强大,提供分页显示的功能,less 比 more 更强大,提供翻页,跳转,查找等命令,并且 more/less 都支持使用 \bspace/b 显示下一页,使用 f 显示上一页.<br>在 less 中,按<code>h</code>可以进入帮助界面,提供丰富的帮助命令.</p>\n<h3 id=\"vi-vim\"><a href=\"#vi-vim\" class=\"headerlink\" title=\"vi/vim\"></a>vi/vim</h3><p>vi/vim\b 是 Linux 下的文本编辑工具,在 vi/vim 的版本是选择上,原则是:<strong>能使用 vim 就使用 vim,能用最新版就用最新版</strong></p>\n<h4 id=\"启动及关闭-vi-vim\"><a href=\"#启动及关闭-vi-vim\" class=\"headerlink\" title=\"启动及关闭 vi/vim\"></a>启动及关闭 vi/vim</h4><p>#####启动<br>vi 打开 vi/vim<br><code>vi &lt;file&gt;</code> 打开 vi/vim 并加载文件<code>&lt;file&gt;</code></p>\n<h5 id=\"退出\"><a href=\"#退出\" class=\"headerlink\" title=\"退出\"></a>退出</h5><p><code>ZQ/:q!</code> 无条件退出<br><code>ZZ/:wq</code> 存盘并退出</p>\n<h5 id=\"保存部分文件\"><a href=\"#保存部分文件\" class=\"headerlink\" title=\"保存部分文件\"></a>保存部分文件</h5><p><code>:m,nw &lt;file&gt;</code> 将 m 行到 n 行部分的内容保存到文件 <code>&lt;file&gt;</code> 中 ;<br>:m,nw &gt;&gt; <code>&lt;file&gt;</code> 将 m 行到 n 行的内容添加到文件 <code>&lt;file&gt;</code> 的末尾</p>\n<h4 id=\"移动光标\"><a href=\"#移动光标\" class=\"headerlink\" title=\"移动光标\"></a>移动光标</h4><h5 id=\"字符\"><a href=\"#字符\" class=\"headerlink\" title=\"字符\"></a>字符</h5><p>h 左移一个字符<br>l 右移一个字符</p>\n<h5 id=\"单词\"><a href=\"#单词\" class=\"headerlink\" title=\"单词\"></a>单词</h5><p><code>w/W</code> 移动到下一单词的开头<br><code>b/B</code> 移动到上一单词的开头<br><code>e/E</code>移动到光标所在单词的末尾</p>\n<h5 id=\"行\"><a href=\"#行\" class=\"headerlink\" title=\"行\"></a>行</h5><p>j 下移一行<br>k 上移一行<br>0(数字) 移动到当前行的开头<br>^ 移动到当前行的第一个非空字符<br>\\$ 移动到当前行末尾<br>:n 移动到第 N 行</p>\n<h5 id=\"句子\"><a href=\"#句子\" class=\"headerlink\" title=\"句子\"></a>句子</h5><p>) 移动到当前句子的末尾<br>( 移动到当前句子的 \b 开头</p>\n<h5 id=\"段落\"><a href=\"#段落\" class=\"headerlink\" title=\"段落\"></a>段落</h5><p>} 移动到当前段落的末尾<br>{ 移动到当前段落的开头</p>\n<h5 id=\"屏\"><a href=\"#屏\" class=\"headerlink\" title=\"屏\"></a>屏</h5><p>H 移动到屏幕的第一行<br>M 移动到屏幕中间一行<br>L 移动到 \b 屏幕的最后一行</p>\n<h5 id=\"页\"><a href=\"#页\" class=\"headerlink\" title=\"页\"></a>页</h5><p><code>Ctrl-f</code> 向前滚动一页<br><code>Ctrl-b</code>向后滚动一页<br><code>Ctrl-u</code> 向前滚动半页<br><code>Ctrl-d</code> 向后滚动半页</p>\n<h5 id=\"文件\"><a href=\"#文件\" class=\"headerlink\" title=\"文件\"></a>文件</h5><p><code>G</code> 移动到文件末尾<br><code>gg</code> 移动到文件开头<br><code>:0</code> 移动到文件第一行<br><code>:$</code> 移动到文件最后一行</p>\n<h4 id=\"文本编辑\"><a href=\"#文本编辑\" class=\"headerlink\" title=\"文本编辑\"></a>文本编辑</h4><h5 id=\"字符-1\"><a href=\"#字符-1\" class=\"headerlink\" title=\"字符\"></a>字符</h5><p>x 删除光标位置的字符<br>c 更改当前字符并进入插入模式<br>s 替换光标位置的字符并进入插入模式<br>r 替换光标位置的字符但不进入插入模式<br>i 在当前位置的字符之前进入插入模式<br>a 在当前位置的字符之后进入插入模式</p>\n<h5 id=\"单词-1\"><a href=\"#单词-1\" class=\"headerlink\" title=\"单词\"></a>单词</h5><p>cw/cW 删除当前单词从光标开始的部分并进入插入模式<br>cb/cB 删除当前单词从光标所在位置至单词开始的部分并进入插入模式<br>dw/dW 删除当前单词从光标开始的部分但不进入插入模式<br>db/dB 删除当前单词从光标所在位置至单词开始的部分但不进入插入模式</p>\n<h5 id=\"行-1\"><a href=\"#行-1\" class=\"headerlink\" title=\"行\"></a>行</h5><p>dd 删除当前行<br>d0 删除从当前光标开始到行末的内容<br>d\\$ 删除从当前光标开始到行末的内容<br>I 在当前行的行首进入插入模式<br>A 在当前行的行尾进入插入模式<br>o 在当前行下方另起一行进入插入模式<br>O 在当前行上方另起一行进入插入模式</p>\n<h5 id=\"句子-1\"><a href=\"#句子-1\" class=\"headerlink\" title=\"句子\"></a>句子</h5><p>d) 删除当前句子从光标位置开始到句末的内容<br>d( 删除当前句子从光标位置开始到句首的内容</p>\n<h5 id=\"段落-1\"><a href=\"#段落-1\" class=\"headerlink\" title=\"段落\"></a>段落</h5><p>d} 删除当前段落从光标位置开始到段末的内容<br>d{ 删除当前段落从光标位置开始到段首的内容</p>\n<h4 id=\"文本编辑的高效命令\"><a href=\"#文本编辑的高效命令\" class=\"headerlink\" title=\"文本编辑的高效命令\"></a>文本编辑的高效命令</h4><h5 id=\"复制与粘贴\"><a href=\"#复制与粘贴\" class=\"headerlink\" title=\"复制与粘贴\"></a>复制与粘贴</h5><p>yw 复制当前单词从光标开始的部分<br>yy 复制光标所在行的所有字符<br>p 将最后一个删除或复制文本放在当前字符<br>P 将最后一个删除或复制文本放在当前字符之前 配合操作数使用可快速拷贝编辑文本</p>\n<h5 id=\"撤销与重做\"><a href=\"#撤销与重做\" class=\"headerlink\" title=\"撤销与重做\"></a>撤销与重做</h5><p>u 撤消更改<br>Ctrl-R 重做更改</p>\n<h5 id=\"重复操作\"><a href=\"#重复操作\" class=\"headerlink\" title=\"重复操作\"></a>重复操作</h5><p>. 重复上次操作</p>\n<h5 id=\"交换相邻字符或行\"><a href=\"#交换相邻字符或行\" class=\"headerlink\" title=\"交换相邻字符或行\"></a>交换相邻字符或行</h5><p>xp 交换光标位置的字符和它右边的字符<br>ddp 交换光标位置的行和它的下一行</p>\n<h5 id=\"大小写转换\"><a href=\"#大小写转换\" class=\"headerlink\" title=\"大小写转换\"></a>大小写转换</h5><p>~ 将光标下的字母大小写反向转换<br>guw 将光标所在的单词变为小写<br>guw 将光标所在的单词变为小写<br>gUw 将光标所在的单词变为大写<br>guu 光标所在的行所有字符变为小写<br>gUU 光标所在的行所有字符变为大写<br>g~~ 光标所在的行所有字符大小写反向转换</p>\n<h5 id=\"取得外部输出\"><a href=\"#取得外部输出\" class=\"headerlink\" title=\"取得外部输出\"></a>取得外部输出</h5><p><code>: r!&lt;cmd&gt;</code> 将命令<code>&lt;cmd&gt;</code>的输出结果插入到当前光标所在位置<br><code>:r &lt;file&gt;</code> 将文件<code>&lt;file&gt;</code> 读入到当前光标所在位置</p>\n<h5 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h5><p><code>:1,$!sort</code> 将文件内的所有内容排序</p>\n<h5 id=\"加入行号\"><a href=\"#加入行号\" class=\"headerlink\" title=\"加入行号\"></a>加入行号</h5><p>:%!nl 在所有非空行前加入行号<br>:%!nl -ba 在所有行前加入行号</p>\n<h5 id=\"缩进\"><a href=\"#缩进\" class=\"headerlink\" title=\"缩进\"></a>缩进</h5><p><code>&gt;&gt;</code> 右缩进（可配合操作数使用）<br><code>&lt;&lt;</code> 左缩进（可配合操作数使用）</p>\n<h5 id=\"自动补全\"><a href=\"#自动补全\" class=\"headerlink\" title=\"自动补全\"></a>自动补全</h5><p>ctrl-p 自动补全</p>\n<h5 id=\"显示当前编辑文件名\"><a href=\"#显示当前编辑文件名\" class=\"headerlink\" title=\"显示当前编辑文件名\"></a>显示当前编辑文件名</h5><p>Ctrl-g 显示当前编辑文件名及行数</p>\n<h5 id=\"显示字符-内码\"><a href=\"#显示字符-内码\" class=\"headerlink\" title=\"显示字符 \b 内码\"></a>显示字符 \b 内码</h5><p>ga 显示光标所在字符的内码（包括十进制码，十六进制码以及八进制码）</p>\n<h4 id=\"文本检索与替换\"><a href=\"#文本检索与替换\" class=\"headerlink\" title=\"文本检索与替换\"></a>文本检索与替换</h4><h5 id=\"搜索\"><a href=\"#搜索\" class=\"headerlink\" title=\"搜索\"></a>搜索</h5><p>/ 在文件中向前搜索<br>? 在文件中向后搜索</p>\n<h5 id=\"搜索下一个\"><a href=\"#搜索下一个\" class=\"headerlink\" title=\"搜索下一个\"></a>搜索下一个</h5><p>n 搜索下一个<br>N 反向搜索下一个</p>\n<h4 id=\"vi-vim-设置\"><a href=\"#vi-vim-设置\" class=\"headerlink\" title=\"vi/vim 设置\"></a>vi/vim 设置</h4><h5 id=\"查看当前设置的值\"><a href=\"#查看当前设置的值\" class=\"headerlink\" title=\"查看当前设置的值\"></a>查看当前设置的值</h5><p><code>:set all</code> 查看 vi 或 Vim 中设置的所有选项的当前值<br><code>:set &lt;option&gt;?</code> 查看特定选项 <code>&lt;option&gt;</code> 的当前值</p>\n<h5 id=\"设置行号显示与否\"><a href=\"#设置行号显示与否\" class=\"headerlink\" title=\"设置行号显示与否\"></a>设置行号显示与否</h5><p>:set number 显示行号<br>:set no number 取消行号显示</p>\n<h5 id=\"设置自动缩进\"><a href=\"#设置自动缩进\" class=\"headerlink\" title=\"设置自动缩进\"></a>设置自动缩进</h5><p>:set autoindent 设置自动缩进<br>:set no autoindent 取消自动缩进设置</p>\n<h5 id=\"设置缩进宽度\"><a href=\"#设置缩进宽度\" class=\"headerlink\" title=\"设置缩进宽度\"></a>设置缩进宽度</h5><p>:set shiftwidth=4 设置缩进宽度为 4</p>\n<h5 id=\"设置是否忽略大小写\"><a href=\"#设置是否忽略大小写\" class=\"headerlink\" title=\"设置是否忽略大小写\"></a>设置是否忽略大小写</h5><p>:set ignorecase 设置忽略大小<br>:set no ignorecase 取消忽略大小设置</p>\n<h5 id=\"设置不可见字符显示与否\"><a href=\"#设置不可见字符显示与否\" class=\"headerlink\" title=\"设置不可见字符显示与否\"></a>设置不可见字符显示与否</h5><p>:set list 显示不可见字符<br>:set nolist 取消显示不可见字符设置</p>\n<h2 id=\"删除操作\"><a href=\"#删除操作\" class=\"headerlink\" title=\"删除操作\"></a>删除操作</h2><p>语法: <code>rm[选项] dirname</code><br>选项中,常用的有这几种:</p>\n<ul>\n<li>-i 删除前逐一询问确认;</li>\n<li>-f 即使被删除的文件的属性是只读，也直接删除，无需逐一确认.</li>\n<li>-r 将目录及其底下的文件/文件夹一并删除.</li>\n</ul>\n<p>例如: <code>rm -rf /user</code> 会将 <code>/user</code> 目录下的文件全部删除.</p>\n<h2 id=\"文件传输-SCP\"><a href=\"#文件传输-SCP\" class=\"headerlink\" title=\"文件传输 SCP\"></a>文件传输 SCP</h2><blockquote>\n<p>scp是secure copy的简写，用于在Linux下进行远程拷贝文件的命令，和它类似的命令有cp，不过cp只是在本机进行拷贝不能跨服务器，而且scp传输是加密的。可能会稍微影响一下速度。当你服务器硬盘变为只读 read only system时，用scp可以帮你把文件移出来。另外，scp还非常不占资源，不会提高多少系统负荷，在这一点上，rsync就远远不及它了。虽然 rsync比scp会快一点，但当小文件众多的情况下，rsync会导致硬盘I/O非常高，而scp基本不影响系统正常使用。</p>\n<h3 id=\"命令格式\"><a href=\"#命令格式\" class=\"headerlink\" title=\"命令格式\"></a>命令格式</h3><pre><code>scp [参数] [原路径] [目标路径]\n</code></pre><h3 id=\"命令功能\"><a href=\"#命令功能\" class=\"headerlink\" title=\"命令功能\"></a>命令功能</h3><p>scp是 secure copy的缩写, scp是linux系统下基于ssh登陆进行安全的远程文件拷贝命令。linux的scp命令可以在linux服务器之间复制文件和目录。</p>\n<h3 id=\"命令参数\"><a href=\"#命令参数\" class=\"headerlink\" title=\"命令参数\"></a>命令参数</h3><p>-1  强制scp命令使用协议ssh1  </p>\n</blockquote>\n<p>-2  强制scp命令使用协议ssh2  </p>\n<p>-4  强制scp命令只使用IPv4寻址  </p>\n<p>-6  强制scp命令只使用IPv6寻址  </p>\n<p>-B  使用批处理模式（传输过程中不询问传输口令或短语）  </p>\n<p>-C  允许压缩。（将-C标志传递给ssh，从而打开压缩功能）  </p>\n<p>-p 保留原文件的修改时间，访问时间和访问权限。  </p>\n<p>-q  不显示传输进度条。  </p>\n<p>-r  递归复制整个目录。  </p>\n<p>-v 详细方式显示输出。scp和ssh(1)会显示出整个过程的调试信息。这些信息用于调试连接，验证和配置问题。   </p>\n<p>-c cipher  以cipher将数据传输进行加密，这个选项将直接传递给ssh。   </p>\n<p>-F ssh_config  指定一个替代的ssh配置文件，此参数直接传递给ssh。  </p>\n<p>-i identity_file  从指定文件中读取传输时使用的密钥文件，此参数直接传递给ssh。    </p>\n<p>-l limit  限定用户所能使用的带宽，以Kbit/s为单位。     </p>\n<p>-o ssh_option  如果习惯于使用ssh_config(5)中的参数传递方式，   </p>\n<p>-P port  注意是大写的P, port是指定数据传输用到的端口号   </p>\n<p>-S program  指定加密传输时所使用的程序。此程序必须能够理解ssh(1)的选项。</p>\n<h3 id=\"使用实例\"><a href=\"#使用实例\" class=\"headerlink\" title=\"使用实例\"></a>使用实例</h3><h4 id=\"从本地服务器复制到远程服务器：\"><a href=\"#从本地服务器复制到远程服务器：\" class=\"headerlink\" title=\"从本地服务器复制到远程服务器：\"></a>从本地服务器复制到远程服务器：</h4><h5 id=\"复制文件\"><a href=\"#复制文件\" class=\"headerlink\" title=\"复制文件\"></a>复制文件</h5><p>命令格式：  </p>\n<pre><code>scp local_file remote_username@remote_ip:remote_folder  \n</code></pre><p>或者  </p>\n<pre><code>scp local_file remote_username@remote_ip:remote_file  \n</code></pre><p>或者  </p>\n<pre><code>scp local_file remote_ip:remote_folder  \n</code></pre><p>或者  </p>\n<pre><code>scp local_file remote_ip:remote_file  \n</code></pre><p>第1,2个指定了用户名，命令执行后需要输入用户密码，第1个仅指定了远程的目录，文件名字不变，第2个指定了文件名  </p>\n<p>第3,4个没有指定用户名，命令执行后需要输入用户名和密码，第3个仅指定了远程的目录，文件名字不变，第4个指定了文件名   </p>\n<h5 id=\"复制目录\"><a href=\"#复制目录\" class=\"headerlink\" title=\"复制目录\"></a>复制目录</h5><p>命令格式：  </p>\n<pre><code>scp -r local_folder remote_username@remote_ip:remote_folder  \n</code></pre><p>或者  </p>\n<pre><code>scp -r local_folder remote_ip:remote_folder  \n</code></pre><p>第1个指定了用户名，命令执行后需要输入用户密码；  </p>\n<p>第2个没有指定用户名，命令执行后需要输入用户名和密码；</p>\n<h4 id=\"从远程服务器复制到本地服务器：\"><a href=\"#从远程服务器复制到本地服务器：\" class=\"headerlink\" title=\"从远程服务器复制到本地服务器：\"></a>从远程服务器复制到本地服务器：</h4><p>从远程复制到本地的scp命令与上面的命令雷同，只要将从本地复制到远程的命令后面2个参数互换顺序就行了。</p>\n"},{"title":"初识 nginx","_content":"# 什么是 NGINX\n>Nginx 是一个免费的，开源的，高性能的HTTP服务器和反向代理，以及IMAP / POP3代理服务器。 Nginx 以其高性能，稳定性，丰富的功能，简单的配置和低资源消耗而闻名。很多高知名度的网站都使用 Nginx，如：Netflix，GitHub，SoundCloud，MaxCDN 等。\n\nNginx 有一个主线程（ master process）和几个工作线程（worker process）。主线程的目的是加载和验证配置文件、维护工作线程。\n\n工作线程处理实际的请求，Nginx 采用基于事件的模型和依赖操作系统的机制在工作线程之间高效地分发请求。工作线程的数量可配置，也可自动调整为服务器CPU的数量。\n\nNginx 及其模块的工作方式由配置文件确定。 默认情况下，配置文件名为 nginx.conf，放在 /usr/local/nginx/conf 、/etc/nginx 或者 /usr/local/etc/nginx 文件夹中。\n\n## nginx 的基本命令\n\n        nginx -s <signal>\n\n其中-s意思是向主进程发送信号，signal可以为以下四个中的一个:\n\n* stop — 快速关闭\n* quit — 优雅关闭\n* reload — 重新加载配置文件\n* reopen — 重新打开日志文件\n\n当运行nginx -s quit时，Nginx 会等待工作进程处理完成当前请求，然后将其关闭。当你修改配置文件后，并不会立即生效，而是等待重启或者收到nginx -s reload信号。\n\n当 Nginx 收到 nginx -s reload 信号后，首先检查配置文件的语法。语法正确后，主线程会开启新的工作线程并向旧的工作线程发送关闭信号，如果语法不正确，则主线程回滚变化并继续使用旧的配置。当工作进程收到主进程的关闭信号后，会在处理完当前请求之后退出。\n\n## 配置文件\n\nNginx 配置的核心是定义要处理的 URL 以及如何响应这些 URL 请求，即定义一系列的虚拟服务器（Virtual Servers）控制对来自特定域名或者 IP 的请求的处理。\n\n每一个虚拟服务器定义一系列的 location 控制处理特定的 URI 集合。每一个location定义了对映射到自己的请求的处理场景，可以返回一个文件或者代理此请求。\n\nNginx 由不同的模块组成，这些模块由配置文件中指定的指令控制。 指令分为简单指令和块指令。\n\n一个简单指令包含指令名称和指令参数，以空格分隔，以分号（;）结尾。 块指令与简单指令类似，但是由大括号（{和}）包围。 如果块指令大括号中包含其他指令，则称该指令为上下文（如： events, http, server 和 location）。\n\n配置文件中的放在上下文之外的指令默认放在主配置文件中（类似继承主配置文件）。 events 和 http 放置在主配置文件中，server 放置在http块指令中，location放置在server块指令中。\n\n配置文件的注释以 # 开始。\n\n例如: \n\n    events {\n        worker_connections  1024;\n    }\n    http {\n        include       mime.types;\n        default_type  application/octet-stream;\n        sendfile        on;\n        keepalive_timeout  65;\n        server {\n            listen       80;\n            server_name  localhost;\n            location ~ .*\\.(flv|mp3|mp4|ts)$ {\n                add_header Content-Disposition \"attachment; filename=$request_filename\";\n                root /replay/;\n                }\n            location / {\n                root   web/html/live;\n                index  index.html;\n                }\n            location /wap {\n                alias   /web/wap;\n                index  index.html;\n            }\t\n            error_page   500 502 503 504  /50x.html;\n            location = /50x.html {\n                root   html;\n            }\n        }\n\n\n\n## 静态内容\n\nWeb 服务器一个重要的功能是服务静态文件（图像或静态HTML页面）。例如，Nginx 可以很方便的让服务器从/data/www 获取 html 文件，从/data/images获取图片来返回给客户端，这只需要在http块指令中的server块指令中设置两个location块指令。\n\n首先，创建 /data/www 目录，并放入 index.html，创建 /data/images 目录并在其中放置一些图片。\n\n接下来，打开配置文件。 创建一个 server 块：\n\n    http {\n    server {\n    }\n}\n\n上面的 location 块指定 / 前缀与请求中的 URI 对比。对于匹配的请求，URI 将被添加到 root 指令中指定的路径，即 /data/www，以此形成本地文件系统的路径，如访问http://localhost/bog/welcome.html，对应服务器文件路径为/data/www/bog/welcome.html。 如果 URI 匹配多个 location 块，Nginx 采用最长前缀匹配原则（类似计算机网络里面的IP匹配）， 上面的 location 块前缀长度为 1，因此只有当所有其他 location 块匹配时，才使用该块。\n接下来，添加第二个位置块：\n\n    location /images/ {\n        root /data;\n    }\n它将匹配以/images/（/ 也匹配这样的请求，但具有较短的前缀）开始的请求。\n\nserver 块的最终配置如下：\n\n    server {\n        location / {\n            root /data/www;\n        }\n\n        location /images/ {\n            root /data;\n        }\n    }\n\n到目前为止，这已经是一个可以正常运行的服务器，它监听端口80，并且可以在本地计算机上访问 http://localhost/。 对于 /images/ 开头的请求，服务器将从 /data/images 目录发送文件。 如，对于 http://localhost/images/example.png 请求，nginx 将响应 /data/images/example.png文件。 如果不存在，nginx 将返回404。URI 不以 /images/ 开头的请求将映射到 /data/www 目录。 例如，对于 http://localhost/some/example.html 请求，nginx 将响应 /data/www/some/example.html 文件。\n\n## 代理服务器\n\n\nNginx 的一个常见应用是将其设置为代理服务器（Proxy Server），即接受客户端的请求并将其转发给代理服务器，再接受代理服务器发来的响应，将它们发送到客户端。\n\n比如我们可以用一个 Nginx 实例实现对图片文件的请求使用本地文件系统，而其他请求转发到代理服务器。\n\n首先，向 Nginx 的配置文件中添加一个 server 块来定义代理服务器：\n\n    server {\n        listen 8080;\n        root /data/up1;\n\n        location / {\n        }\n    }\n\n\n此服务器侦听端口8080，并将所有请求映射到本地文件系统上的 /data/up1 目录。 创建此目录并将 index.html 放入其中。 注意，root 指令放在 server 上下文中，这样 当 location 块中不含 root 指令时将使用所属 server 的 root 指令。\n\n接下来，使用上一节中的服务器配置，并将其修改为代理服务器配置。 在第一个位置块中，加上proxy_pass指令：\n\n    server {\n        location / {\n            # proxy_pass指令的参数为：协议+主机名+端口号\n            proxy_pass http://localhost:8080;\n        }\n\n        location /images/ {\n            root /data;\n        }\n    }\n修改第二个 匹配 /images/ 前缀的 location 块，使其与请求图像文件的扩展名相匹配：\n\n    location ~ \\.(gif|jpg|png)$ {\n        root /data/images;\n    }\n    \n该参数是一个正则表达式，匹配以.gif，.jpg或.png结尾的所有URI。 正则表达式应该以 ~ 开头。 相应的请求将映射到 /data/images 目录。\n\n当 Nginx 选择一个 location 块来处理请求时，它首先检查指定 location 块的前缀，记住具有最长前缀的 location 块，然后检查正则表达式。 如果与正则表达式匹配， Nginx 选择此 location 块，否则，选择先前记住的 location 块。\n\n代理服务器的最终配置如下：\n\n    server {\n        location / {\n            proxy_pass http://localhost:8080/;\n        }\n\n        location ~ \\.(gif|jpg|png)$ {\n            root /data/images;\n        }\n    }\n此服务器将过滤以.gif，.jpg或.png结尾的请求，并将它们映射到 /data/images 目录（通过向 root 指令的参数添加请求的URI），并将所有其他请求发送给上面配置的代理服务器。\n\n这样，图片和其他请求就可以使用不同的服务器来处理。","source":"_posts/2019.06.13.nginx.md","raw":"---\ntitle: 初识 nginx\ntags: [服务器]\ncategories: 技术\n---\n# 什么是 NGINX\n>Nginx 是一个免费的，开源的，高性能的HTTP服务器和反向代理，以及IMAP / POP3代理服务器。 Nginx 以其高性能，稳定性，丰富的功能，简单的配置和低资源消耗而闻名。很多高知名度的网站都使用 Nginx，如：Netflix，GitHub，SoundCloud，MaxCDN 等。\n\nNginx 有一个主线程（ master process）和几个工作线程（worker process）。主线程的目的是加载和验证配置文件、维护工作线程。\n\n工作线程处理实际的请求，Nginx 采用基于事件的模型和依赖操作系统的机制在工作线程之间高效地分发请求。工作线程的数量可配置，也可自动调整为服务器CPU的数量。\n\nNginx 及其模块的工作方式由配置文件确定。 默认情况下，配置文件名为 nginx.conf，放在 /usr/local/nginx/conf 、/etc/nginx 或者 /usr/local/etc/nginx 文件夹中。\n\n## nginx 的基本命令\n\n        nginx -s <signal>\n\n其中-s意思是向主进程发送信号，signal可以为以下四个中的一个:\n\n* stop — 快速关闭\n* quit — 优雅关闭\n* reload — 重新加载配置文件\n* reopen — 重新打开日志文件\n\n当运行nginx -s quit时，Nginx 会等待工作进程处理完成当前请求，然后将其关闭。当你修改配置文件后，并不会立即生效，而是等待重启或者收到nginx -s reload信号。\n\n当 Nginx 收到 nginx -s reload 信号后，首先检查配置文件的语法。语法正确后，主线程会开启新的工作线程并向旧的工作线程发送关闭信号，如果语法不正确，则主线程回滚变化并继续使用旧的配置。当工作进程收到主进程的关闭信号后，会在处理完当前请求之后退出。\n\n## 配置文件\n\nNginx 配置的核心是定义要处理的 URL 以及如何响应这些 URL 请求，即定义一系列的虚拟服务器（Virtual Servers）控制对来自特定域名或者 IP 的请求的处理。\n\n每一个虚拟服务器定义一系列的 location 控制处理特定的 URI 集合。每一个location定义了对映射到自己的请求的处理场景，可以返回一个文件或者代理此请求。\n\nNginx 由不同的模块组成，这些模块由配置文件中指定的指令控制。 指令分为简单指令和块指令。\n\n一个简单指令包含指令名称和指令参数，以空格分隔，以分号（;）结尾。 块指令与简单指令类似，但是由大括号（{和}）包围。 如果块指令大括号中包含其他指令，则称该指令为上下文（如： events, http, server 和 location）。\n\n配置文件中的放在上下文之外的指令默认放在主配置文件中（类似继承主配置文件）。 events 和 http 放置在主配置文件中，server 放置在http块指令中，location放置在server块指令中。\n\n配置文件的注释以 # 开始。\n\n例如: \n\n    events {\n        worker_connections  1024;\n    }\n    http {\n        include       mime.types;\n        default_type  application/octet-stream;\n        sendfile        on;\n        keepalive_timeout  65;\n        server {\n            listen       80;\n            server_name  localhost;\n            location ~ .*\\.(flv|mp3|mp4|ts)$ {\n                add_header Content-Disposition \"attachment; filename=$request_filename\";\n                root /replay/;\n                }\n            location / {\n                root   web/html/live;\n                index  index.html;\n                }\n            location /wap {\n                alias   /web/wap;\n                index  index.html;\n            }\t\n            error_page   500 502 503 504  /50x.html;\n            location = /50x.html {\n                root   html;\n            }\n        }\n\n\n\n## 静态内容\n\nWeb 服务器一个重要的功能是服务静态文件（图像或静态HTML页面）。例如，Nginx 可以很方便的让服务器从/data/www 获取 html 文件，从/data/images获取图片来返回给客户端，这只需要在http块指令中的server块指令中设置两个location块指令。\n\n首先，创建 /data/www 目录，并放入 index.html，创建 /data/images 目录并在其中放置一些图片。\n\n接下来，打开配置文件。 创建一个 server 块：\n\n    http {\n    server {\n    }\n}\n\n上面的 location 块指定 / 前缀与请求中的 URI 对比。对于匹配的请求，URI 将被添加到 root 指令中指定的路径，即 /data/www，以此形成本地文件系统的路径，如访问http://localhost/bog/welcome.html，对应服务器文件路径为/data/www/bog/welcome.html。 如果 URI 匹配多个 location 块，Nginx 采用最长前缀匹配原则（类似计算机网络里面的IP匹配）， 上面的 location 块前缀长度为 1，因此只有当所有其他 location 块匹配时，才使用该块。\n接下来，添加第二个位置块：\n\n    location /images/ {\n        root /data;\n    }\n它将匹配以/images/（/ 也匹配这样的请求，但具有较短的前缀）开始的请求。\n\nserver 块的最终配置如下：\n\n    server {\n        location / {\n            root /data/www;\n        }\n\n        location /images/ {\n            root /data;\n        }\n    }\n\n到目前为止，这已经是一个可以正常运行的服务器，它监听端口80，并且可以在本地计算机上访问 http://localhost/。 对于 /images/ 开头的请求，服务器将从 /data/images 目录发送文件。 如，对于 http://localhost/images/example.png 请求，nginx 将响应 /data/images/example.png文件。 如果不存在，nginx 将返回404。URI 不以 /images/ 开头的请求将映射到 /data/www 目录。 例如，对于 http://localhost/some/example.html 请求，nginx 将响应 /data/www/some/example.html 文件。\n\n## 代理服务器\n\n\nNginx 的一个常见应用是将其设置为代理服务器（Proxy Server），即接受客户端的请求并将其转发给代理服务器，再接受代理服务器发来的响应，将它们发送到客户端。\n\n比如我们可以用一个 Nginx 实例实现对图片文件的请求使用本地文件系统，而其他请求转发到代理服务器。\n\n首先，向 Nginx 的配置文件中添加一个 server 块来定义代理服务器：\n\n    server {\n        listen 8080;\n        root /data/up1;\n\n        location / {\n        }\n    }\n\n\n此服务器侦听端口8080，并将所有请求映射到本地文件系统上的 /data/up1 目录。 创建此目录并将 index.html 放入其中。 注意，root 指令放在 server 上下文中，这样 当 location 块中不含 root 指令时将使用所属 server 的 root 指令。\n\n接下来，使用上一节中的服务器配置，并将其修改为代理服务器配置。 在第一个位置块中，加上proxy_pass指令：\n\n    server {\n        location / {\n            # proxy_pass指令的参数为：协议+主机名+端口号\n            proxy_pass http://localhost:8080;\n        }\n\n        location /images/ {\n            root /data;\n        }\n    }\n修改第二个 匹配 /images/ 前缀的 location 块，使其与请求图像文件的扩展名相匹配：\n\n    location ~ \\.(gif|jpg|png)$ {\n        root /data/images;\n    }\n    \n该参数是一个正则表达式，匹配以.gif，.jpg或.png结尾的所有URI。 正则表达式应该以 ~ 开头。 相应的请求将映射到 /data/images 目录。\n\n当 Nginx 选择一个 location 块来处理请求时，它首先检查指定 location 块的前缀，记住具有最长前缀的 location 块，然后检查正则表达式。 如果与正则表达式匹配， Nginx 选择此 location 块，否则，选择先前记住的 location 块。\n\n代理服务器的最终配置如下：\n\n    server {\n        location / {\n            proxy_pass http://localhost:8080/;\n        }\n\n        location ~ \\.(gif|jpg|png)$ {\n            root /data/images;\n        }\n    }\n此服务器将过滤以.gif，.jpg或.png结尾的请求，并将它们映射到 /data/images 目录（通过向 root 指令的参数添加请求的URI），并将所有其他请求发送给上面配置的代理服务器。\n\n这样，图片和其他请求就可以使用不同的服务器来处理。","slug":"2019.06.13.nginx","published":1,"date":"2019-06-13T06:49:36.328Z","updated":"2019-06-14T02:02:23.723Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwvh25e9005lw39zfclgiuj7","content":"<h1 id=\"什么是-NGINX\"><a href=\"#什么是-NGINX\" class=\"headerlink\" title=\"什么是 NGINX\"></a>什么是 NGINX</h1><blockquote>\n<p>Nginx 是一个免费的，开源的，高性能的HTTP服务器和反向代理，以及IMAP / POP3代理服务器。 Nginx 以其高性能，稳定性，丰富的功能，简单的配置和低资源消耗而闻名。很多高知名度的网站都使用 Nginx，如：Netflix，GitHub，SoundCloud，MaxCDN 等。</p>\n</blockquote>\n<p>Nginx 有一个主线程（ master process）和几个工作线程（worker process）。主线程的目的是加载和验证配置文件、维护工作线程。</p>\n<p>工作线程处理实际的请求，Nginx 采用基于事件的模型和依赖操作系统的机制在工作线程之间高效地分发请求。工作线程的数量可配置，也可自动调整为服务器CPU的数量。</p>\n<p>Nginx 及其模块的工作方式由配置文件确定。 默认情况下，配置文件名为 nginx.conf，放在 /usr/local/nginx/conf 、/etc/nginx 或者 /usr/local/etc/nginx 文件夹中。</p>\n<h2 id=\"nginx-的基本命令\"><a href=\"#nginx-的基本命令\" class=\"headerlink\" title=\"nginx 的基本命令\"></a>nginx 的基本命令</h2><pre><code>nginx -s &lt;signal&gt;\n</code></pre><p>其中-s意思是向主进程发送信号，signal可以为以下四个中的一个:</p>\n<ul>\n<li>stop — 快速关闭</li>\n<li>quit — 优雅关闭</li>\n<li>reload — 重新加载配置文件</li>\n<li>reopen — 重新打开日志文件</li>\n</ul>\n<p>当运行nginx -s quit时，Nginx 会等待工作进程处理完成当前请求，然后将其关闭。当你修改配置文件后，并不会立即生效，而是等待重启或者收到nginx -s reload信号。</p>\n<p>当 Nginx 收到 nginx -s reload 信号后，首先检查配置文件的语法。语法正确后，主线程会开启新的工作线程并向旧的工作线程发送关闭信号，如果语法不正确，则主线程回滚变化并继续使用旧的配置。当工作进程收到主进程的关闭信号后，会在处理完当前请求之后退出。</p>\n<h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><p>Nginx 配置的核心是定义要处理的 URL 以及如何响应这些 URL 请求，即定义一系列的虚拟服务器（Virtual Servers）控制对来自特定域名或者 IP 的请求的处理。</p>\n<p>每一个虚拟服务器定义一系列的 location 控制处理特定的 URI 集合。每一个location定义了对映射到自己的请求的处理场景，可以返回一个文件或者代理此请求。</p>\n<p>Nginx 由不同的模块组成，这些模块由配置文件中指定的指令控制。 指令分为简单指令和块指令。</p>\n<p>一个简单指令包含指令名称和指令参数，以空格分隔，以分号（;）结尾。 块指令与简单指令类似，但是由大括号（{和}）包围。 如果块指令大括号中包含其他指令，则称该指令为上下文（如： events, http, server 和 location）。</p>\n<p>配置文件中的放在上下文之外的指令默认放在主配置文件中（类似继承主配置文件）。 events 和 http 放置在主配置文件中，server 放置在http块指令中，location放置在server块指令中。</p>\n<p>配置文件的注释以 # 开始。</p>\n<p>例如: </p>\n<pre><code>events {\n    worker_connections  1024;\n}\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n    sendfile        on;\n    keepalive_timeout  65;\n    server {\n        listen       80;\n        server_name  localhost;\n        location ~ .*\\.(flv|mp3|mp4|ts)$ {\n            add_header Content-Disposition &quot;attachment; filename=$request_filename&quot;;\n            root /replay/;\n            }\n        location / {\n            root   web/html/live;\n            index  index.html;\n            }\n        location /wap {\n            alias   /web/wap;\n            index  index.html;\n        }    \n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }\n</code></pre><h2 id=\"静态内容\"><a href=\"#静态内容\" class=\"headerlink\" title=\"静态内容\"></a>静态内容</h2><p>Web 服务器一个重要的功能是服务静态文件（图像或静态HTML页面）。例如，Nginx 可以很方便的让服务器从/data/www 获取 html 文件，从/data/images获取图片来返回给客户端，这只需要在http块指令中的server块指令中设置两个location块指令。</p>\n<p>首先，创建 /data/www 目录，并放入 index.html，创建 /data/images 目录并在其中放置一些图片。</p>\n<p>接下来，打开配置文件。 创建一个 server 块：</p>\n<pre><code>http {\nserver {\n}\n</code></pre><p>}</p>\n<p>上面的 location 块指定 / 前缀与请求中的 URI 对比。对于匹配的请求，URI 将被添加到 root 指令中指定的路径，即 /data/www，以此形成本地文件系统的路径，如访问<a href=\"http://localhost/bog/welcome.html，对应服务器文件路径为/data/www/bog/welcome.html。\" target=\"_blank\" rel=\"external\">http://localhost/bog/welcome.html，对应服务器文件路径为/data/www/bog/welcome.html。</a> 如果 URI 匹配多个 location 块，Nginx 采用最长前缀匹配原则（类似计算机网络里面的IP匹配）， 上面的 location 块前缀长度为 1，因此只有当所有其他 location 块匹配时，才使用该块。<br>接下来，添加第二个位置块：</p>\n<pre><code>location /images/ {\n    root /data;\n}\n</code></pre><p>它将匹配以/images/（/ 也匹配这样的请求，但具有较短的前缀）开始的请求。</p>\n<p>server 块的最终配置如下：</p>\n<pre><code>server {\n    location / {\n        root /data/www;\n    }\n\n    location /images/ {\n        root /data;\n    }\n}\n</code></pre><p>到目前为止，这已经是一个可以正常运行的服务器，它监听端口80，并且可以在本地计算机上访问 <a href=\"http://localhost/。\" target=\"_blank\" rel=\"external\">http://localhost/。</a> 对于 /images/ 开头的请求，服务器将从 /data/images 目录发送文件。 如，对于 <a href=\"http://localhost/images/example.png\" target=\"_blank\" rel=\"external\">http://localhost/images/example.png</a> 请求，nginx 将响应 /data/images/example.png文件。 如果不存在，nginx 将返回404。URI 不以 /images/ 开头的请求将映射到 /data/www 目录。 例如，对于 <a href=\"http://localhost/some/example.html\" target=\"_blank\" rel=\"external\">http://localhost/some/example.html</a> 请求，nginx 将响应 /data/www/some/example.html 文件。</p>\n<h2 id=\"代理服务器\"><a href=\"#代理服务器\" class=\"headerlink\" title=\"代理服务器\"></a>代理服务器</h2><p>Nginx 的一个常见应用是将其设置为代理服务器（Proxy Server），即接受客户端的请求并将其转发给代理服务器，再接受代理服务器发来的响应，将它们发送到客户端。</p>\n<p>比如我们可以用一个 Nginx 实例实现对图片文件的请求使用本地文件系统，而其他请求转发到代理服务器。</p>\n<p>首先，向 Nginx 的配置文件中添加一个 server 块来定义代理服务器：</p>\n<pre><code>server {\n    listen 8080;\n    root /data/up1;\n\n    location / {\n    }\n}\n</code></pre><p>此服务器侦听端口8080，并将所有请求映射到本地文件系统上的 /data/up1 目录。 创建此目录并将 index.html 放入其中。 注意，root 指令放在 server 上下文中，这样 当 location 块中不含 root 指令时将使用所属 server 的 root 指令。</p>\n<p>接下来，使用上一节中的服务器配置，并将其修改为代理服务器配置。 在第一个位置块中，加上proxy_pass指令：</p>\n<pre><code>server {\n    location / {\n        # proxy_pass指令的参数为：协议+主机名+端口号\n        proxy_pass http://localhost:8080;\n    }\n\n    location /images/ {\n        root /data;\n    }\n}\n</code></pre><p>修改第二个 匹配 /images/ 前缀的 location 块，使其与请求图像文件的扩展名相匹配：</p>\n<pre><code>location ~ \\.(gif|jpg|png)$ {\n    root /data/images;\n}\n</code></pre><p>该参数是一个正则表达式，匹配以.gif，.jpg或.png结尾的所有URI。 正则表达式应该以 ~ 开头。 相应的请求将映射到 /data/images 目录。</p>\n<p>当 Nginx 选择一个 location 块来处理请求时，它首先检查指定 location 块的前缀，记住具有最长前缀的 location 块，然后检查正则表达式。 如果与正则表达式匹配， Nginx 选择此 location 块，否则，选择先前记住的 location 块。</p>\n<p>代理服务器的最终配置如下：</p>\n<pre><code>server {\n    location / {\n        proxy_pass http://localhost:8080/;\n    }\n\n    location ~ \\.(gif|jpg|png)$ {\n        root /data/images;\n    }\n}\n</code></pre><p>此服务器将过滤以.gif，.jpg或.png结尾的请求，并将它们映射到 /data/images 目录（通过向 root 指令的参数添加请求的URI），并将所有其他请求发送给上面配置的代理服务器。</p>\n<p>这样，图片和其他请求就可以使用不同的服务器来处理。</p>\n","excerpt":"","more":"<h1 id=\"什么是-NGINX\"><a href=\"#什么是-NGINX\" class=\"headerlink\" title=\"什么是 NGINX\"></a>什么是 NGINX</h1><blockquote>\n<p>Nginx 是一个免费的，开源的，高性能的HTTP服务器和反向代理，以及IMAP / POP3代理服务器。 Nginx 以其高性能，稳定性，丰富的功能，简单的配置和低资源消耗而闻名。很多高知名度的网站都使用 Nginx，如：Netflix，GitHub，SoundCloud，MaxCDN 等。</p>\n</blockquote>\n<p>Nginx 有一个主线程（ master process）和几个工作线程（worker process）。主线程的目的是加载和验证配置文件、维护工作线程。</p>\n<p>工作线程处理实际的请求，Nginx 采用基于事件的模型和依赖操作系统的机制在工作线程之间高效地分发请求。工作线程的数量可配置，也可自动调整为服务器CPU的数量。</p>\n<p>Nginx 及其模块的工作方式由配置文件确定。 默认情况下，配置文件名为 nginx.conf，放在 /usr/local/nginx/conf 、/etc/nginx 或者 /usr/local/etc/nginx 文件夹中。</p>\n<h2 id=\"nginx-的基本命令\"><a href=\"#nginx-的基本命令\" class=\"headerlink\" title=\"nginx 的基本命令\"></a>nginx 的基本命令</h2><pre><code>nginx -s &lt;signal&gt;\n</code></pre><p>其中-s意思是向主进程发送信号，signal可以为以下四个中的一个:</p>\n<ul>\n<li>stop — 快速关闭</li>\n<li>quit — 优雅关闭</li>\n<li>reload — 重新加载配置文件</li>\n<li>reopen — 重新打开日志文件</li>\n</ul>\n<p>当运行nginx -s quit时，Nginx 会等待工作进程处理完成当前请求，然后将其关闭。当你修改配置文件后，并不会立即生效，而是等待重启或者收到nginx -s reload信号。</p>\n<p>当 Nginx 收到 nginx -s reload 信号后，首先检查配置文件的语法。语法正确后，主线程会开启新的工作线程并向旧的工作线程发送关闭信号，如果语法不正确，则主线程回滚变化并继续使用旧的配置。当工作进程收到主进程的关闭信号后，会在处理完当前请求之后退出。</p>\n<h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><p>Nginx 配置的核心是定义要处理的 URL 以及如何响应这些 URL 请求，即定义一系列的虚拟服务器（Virtual Servers）控制对来自特定域名或者 IP 的请求的处理。</p>\n<p>每一个虚拟服务器定义一系列的 location 控制处理特定的 URI 集合。每一个location定义了对映射到自己的请求的处理场景，可以返回一个文件或者代理此请求。</p>\n<p>Nginx 由不同的模块组成，这些模块由配置文件中指定的指令控制。 指令分为简单指令和块指令。</p>\n<p>一个简单指令包含指令名称和指令参数，以空格分隔，以分号（;）结尾。 块指令与简单指令类似，但是由大括号（{和}）包围。 如果块指令大括号中包含其他指令，则称该指令为上下文（如： events, http, server 和 location）。</p>\n<p>配置文件中的放在上下文之外的指令默认放在主配置文件中（类似继承主配置文件）。 events 和 http 放置在主配置文件中，server 放置在http块指令中，location放置在server块指令中。</p>\n<p>配置文件的注释以 # 开始。</p>\n<p>例如: </p>\n<pre><code>events {\n    worker_connections  1024;\n}\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n    sendfile        on;\n    keepalive_timeout  65;\n    server {\n        listen       80;\n        server_name  localhost;\n        location ~ .*\\.(flv|mp3|mp4|ts)$ {\n            add_header Content-Disposition &quot;attachment; filename=$request_filename&quot;;\n            root /replay/;\n            }\n        location / {\n            root   web/html/live;\n            index  index.html;\n            }\n        location /wap {\n            alias   /web/wap;\n            index  index.html;\n        }    \n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }\n</code></pre><h2 id=\"静态内容\"><a href=\"#静态内容\" class=\"headerlink\" title=\"静态内容\"></a>静态内容</h2><p>Web 服务器一个重要的功能是服务静态文件（图像或静态HTML页面）。例如，Nginx 可以很方便的让服务器从/data/www 获取 html 文件，从/data/images获取图片来返回给客户端，这只需要在http块指令中的server块指令中设置两个location块指令。</p>\n<p>首先，创建 /data/www 目录，并放入 index.html，创建 /data/images 目录并在其中放置一些图片。</p>\n<p>接下来，打开配置文件。 创建一个 server 块：</p>\n<pre><code>http {\nserver {\n}\n</code></pre><p>}</p>\n<p>上面的 location 块指定 / 前缀与请求中的 URI 对比。对于匹配的请求，URI 将被添加到 root 指令中指定的路径，即 /data/www，以此形成本地文件系统的路径，如访问<a href=\"http://localhost/bog/welcome.html，对应服务器文件路径为/data/www/bog/welcome.html。\">http://localhost/bog/welcome.html，对应服务器文件路径为/data/www/bog/welcome.html。</a> 如果 URI 匹配多个 location 块，Nginx 采用最长前缀匹配原则（类似计算机网络里面的IP匹配）， 上面的 location 块前缀长度为 1，因此只有当所有其他 location 块匹配时，才使用该块。<br>接下来，添加第二个位置块：</p>\n<pre><code>location /images/ {\n    root /data;\n}\n</code></pre><p>它将匹配以/images/（/ 也匹配这样的请求，但具有较短的前缀）开始的请求。</p>\n<p>server 块的最终配置如下：</p>\n<pre><code>server {\n    location / {\n        root /data/www;\n    }\n\n    location /images/ {\n        root /data;\n    }\n}\n</code></pre><p>到目前为止，这已经是一个可以正常运行的服务器，它监听端口80，并且可以在本地计算机上访问 <a href=\"http://localhost/。\">http://localhost/。</a> 对于 /images/ 开头的请求，服务器将从 /data/images 目录发送文件。 如，对于 <a href=\"http://localhost/images/example.png\">http://localhost/images/example.png</a> 请求，nginx 将响应 /data/images/example.png文件。 如果不存在，nginx 将返回404。URI 不以 /images/ 开头的请求将映射到 /data/www 目录。 例如，对于 <a href=\"http://localhost/some/example.html\">http://localhost/some/example.html</a> 请求，nginx 将响应 /data/www/some/example.html 文件。</p>\n<h2 id=\"代理服务器\"><a href=\"#代理服务器\" class=\"headerlink\" title=\"代理服务器\"></a>代理服务器</h2><p>Nginx 的一个常见应用是将其设置为代理服务器（Proxy Server），即接受客户端的请求并将其转发给代理服务器，再接受代理服务器发来的响应，将它们发送到客户端。</p>\n<p>比如我们可以用一个 Nginx 实例实现对图片文件的请求使用本地文件系统，而其他请求转发到代理服务器。</p>\n<p>首先，向 Nginx 的配置文件中添加一个 server 块来定义代理服务器：</p>\n<pre><code>server {\n    listen 8080;\n    root /data/up1;\n\n    location / {\n    }\n}\n</code></pre><p>此服务器侦听端口8080，并将所有请求映射到本地文件系统上的 /data/up1 目录。 创建此目录并将 index.html 放入其中。 注意，root 指令放在 server 上下文中，这样 当 location 块中不含 root 指令时将使用所属 server 的 root 指令。</p>\n<p>接下来，使用上一节中的服务器配置，并将其修改为代理服务器配置。 在第一个位置块中，加上proxy_pass指令：</p>\n<pre><code>server {\n    location / {\n        # proxy_pass指令的参数为：协议+主机名+端口号\n        proxy_pass http://localhost:8080;\n    }\n\n    location /images/ {\n        root /data;\n    }\n}\n</code></pre><p>修改第二个 匹配 /images/ 前缀的 location 块，使其与请求图像文件的扩展名相匹配：</p>\n<pre><code>location ~ \\.(gif|jpg|png)$ {\n    root /data/images;\n}\n</code></pre><p>该参数是一个正则表达式，匹配以.gif，.jpg或.png结尾的所有URI。 正则表达式应该以 ~ 开头。 相应的请求将映射到 /data/images 目录。</p>\n<p>当 Nginx 选择一个 location 块来处理请求时，它首先检查指定 location 块的前缀，记住具有最长前缀的 location 块，然后检查正则表达式。 如果与正则表达式匹配， Nginx 选择此 location 块，否则，选择先前记住的 location 块。</p>\n<p>代理服务器的最终配置如下：</p>\n<pre><code>server {\n    location / {\n        proxy_pass http://localhost:8080/;\n    }\n\n    location ~ \\.(gif|jpg|png)$ {\n        root /data/images;\n    }\n}\n</code></pre><p>此服务器将过滤以.gif，.jpg或.png结尾的请求，并将它们映射到 /data/images 目录（通过向 root 指令的参数添加请求的URI），并将所有其他请求发送给上面配置的代理服务器。</p>\n<p>这样，图片和其他请求就可以使用不同的服务器来处理。</p>\n"},{"title":"寂静之城","_content":"## 作者:马伯庸 \n\n\n\n\n----------\n   \nAnd in the naked light I saw ten thousand people, maybe more.\n\nPeople talking without speaking, people hearing without listening.\n\nPeople writing songs that voices never shared, no one dared disturb the\n\nsound of silence.\n\n--- The sound of silence\n\n美利坚合众国，2015年，纽约。\n\n当电话响起来的时候，阿瓦登正趴在电脑前面睡觉。电话铃声十分急促，尖锐，每一次振动都让他的耳膜难受好久。他揉了揉干涩的眼睛，十分不情愿地爬起来，觉得脑子沉滞无比。\n\n其实他的脑子一直就很沉滞，这种感受既然是生理上的也是心理上的。他身处的房间很狭窄，空气不很好，唯一的两扇窗户紧闭着——即使打开窗户也没用，外面的空气更加浑浊。这是一间大约只有三十平米的小屋子，屋子墙壁上泛黄的墙纸有好几处开始剥落，天花板上的水渍渗成奇怪的形状；一张老式的军绿色行军床摆在墙角，床腿用白漆写着编号；紧挨着行军床的是一张三合板制成的电脑桌，桌上摆着一台浅白色的电脑，机箱后面五颜六色的电线纠缠在一起，把它们自己打成一个古怪的死结，杂乱无章地蔓延到地板与墙角，仿佛常春藤一样。\n\n阿瓦登走到电话前，慢慢坐到地板上，目光呆滞地盯着电话，手却没有动。这部古怪的东西是老式的按键式电话，大概是十几年前的款式，这是阿瓦登有一次去费城出差时偶尔在一家杂货店里买到的；他拿回家以后稍微修理了一下，发现居然还能用，这让他当时小小地兴奋了一阵子。\n\n电话继续在响着，已经是第七声。阿瓦登意识到自己不得不去接听了。于是他弓下腰，用两个指头拈起电话，慢慢把电话放到耳边。\n\n“请说出你的网络编号？”话筒里传来的声音并不急噪，事实上它也不带其他任何的感情色彩，因为这是电脑合成的人工智能语音系统。\n\n“19842015”\n\n阿瓦登熟练地报出一连串数字，同时开始觉得胸有些更闷了。说实话他并不喜欢这些空洞的电子声音，他有时候想，假如打过电话来的是一位声音圆润的女性该多好。阿瓦登知道这是一种不切实际的幻想，不过这幻想会让他的身体得到几秒钟的舒缓。\n\n话筒里的声音仍旧在继续着。\n\n“关于你在十月四日提交的网络论坛用户注册申请已经被受理，经有关部门审查后确认资格无误，请在三日内持本人身份证件、网络使用许可证及相关文件前往办理登记手续，并领取用户名及密码。”\n\n“知道了，谢谢。”\n\n阿瓦登谨慎地选择词语，同时努力挤出一副满足的微笑，好象话筒的另一侧有人在看着自己一样。放下电话，阿瓦登先是茫然地盯着它看了大约两分钟，然后站起来活动一下手腕，坐回到电脑前面，缓慢地推动了一下鼠标。\n\n电脑屏幕“啪”地一声亮了起来，显示出一个登陆的界面，还有一行英文：“请输入你的网络编号和姓名。”阿瓦登将那八位数字敲进去，又输入了自己的名字，点击“登陆”。随即机箱的指示灯开始频繁地闪动起来，整个机器发出细微的噪音。\n\n每一个使用互联网的人都有一个网络编号，没有这个编号，就无法连接进互联网络。每一个编号都是独一无二的，每个人只有一个；这是使用者在网上的唯一代号，既不能修改，也不能取消。这些编号分别对应着使用者身份证上的名字，因此19842015就是阿瓦登，阿瓦登就是19842015。阿瓦登知道有些记忆力不好的人会把自己的编号印在衣服的后面，那看起来颇为滑稽，也容易引发一些不正当的联想。\n\n有关部门说使用网络实名制是为了规范网络秩序方便管理，杜绝因匿名使用网络而产生的一系列重大问题和混乱。阿瓦登不太清楚那一系列重大问题会是什么，他自己没试过用假名上网，他所认识的任何人里也不曾有人尝试过——事实上，从技术角度来说，他根本没办法匿名登陆互联网络，没有编号就没有权限上网，而编号则连接着他的详细档案，换句话说，没人能在网上隐藏自己。有关部门把这一切都考虑的很周详。\n\n“有关部门”，这是一个语意模糊、但却有着权威与震慑力的词组。它既是泛指，又是确指，其所涵盖的意义相当广泛。有时候，它指的是为阿瓦登颁发网络编号的美国联邦网络管理委员会；有时候它是将最新通告及法规发到阿瓦登EMAIL信箱的服务器；还有时候它是监察网络的FBI特属网络调查科；总之一句话，有关部门是无处不在，无职不司的，总会在适当的时候出现，给予指导、监控或者警告，无论你是在网上还是网下。\n\n简直就象是老大哥一样无微不至。\n\n电脑仍旧在持续运转着，阿瓦登知道这得花上一阵子。这台电脑是有关部门配发给他的，具体型号和配置阿瓦登并不清楚，机箱是被焊死的，无法打开。于是他拿出一小瓶清凉油，用右手小拇指的指甲挑出一点抹在自己的太阳穴，然后从脚下堆积如山的杂物里翻出一个塑料杯子，从桌子旁的饮水机里接了半杯蒸馏水，就着一片镇痛片一饮而尽。蒸馏水穿过喉咙和狭长的食道滑进胃里，空泛的味道让他有些恶心。\n\n音响里忽然传来一阵美国国歌的旋律，阿瓦登放下杯子，重新把目光投到电脑上去。这是已经连入互联网络的标志。屏幕上首先跳出来的是有关部门的通告，白底黑色四号字，里面陈述了使用互联网的意义以及最新的规章制度。\n\n“缔造健康的互联网络，美国万岁！”\n\n音响里传来激昂的男性呼声，阿瓦登不大情愿地跟着大声念了一遍。“缔造健康的互联网络，美国万岁！”\n\n这段呼号持续了三十秒钟，然后消失，取而代之的是写着“缔造健康的互联网络”标语的桌面背景。另外一个窗口慢慢浮上开，上面开列出几个选项：工作、娱乐、电子信箱和BBS论坛。其中BBS选项呈现灰色，说明这项功能还没有开通。\n\n整个操作系统简洁明了，这台电脑的浏览器没有地址输入栏，只是在收藏夹里有几个无法修改的的网站地址。理由很简单，这些网站都是健康向上的，假如其他站点和这些网站一样，那么只保留这些网站就够了；假如其他站点与这些网站不一样，那么就是不健康的，是低级趣味，不能保留。这是有关部门精心设计的，是为了公民的精神健康着想，生怕他们受到不良信息的侵染。\n\n阿瓦登首先点开了“工作”，一连串和他工作相关的站点列表与相关软件在电脑上显示出来。阿瓦登是一名程序员，他每天的工作就是根据上级的要求编写程序。这份工作很无聊，不过可以保证他有稳定的收入。他不知道自己的源代码会被用到哪里去，上级也从来没有跟他说过。\n\n他打算继续昨天的工作，但是很快发现自己很难继续下去。阿瓦登觉得今天的情绪比以前要烦躁，无法集中精神，大脑还是很呆滞，胸口仍旧发闷。他试图娱乐自己，但是他发现“娱乐”选项里只有纸牌与挖地雷，根据有关部门的说法，这是两个健康的游戏，没有暴力，没有色情，不会让人产生犯罪冲动，也不涉及任何政治色彩。据说美国境外也是有互联网络站点的，不过无法连上去，因为本国的互联网络自成格局，独立自主，普通人无法直接连接到国外——IE浏览器没有地址栏，就算知道地址也没有用处。\n\n“您有一封新邮件。”\n\n系统忽然跳出来提示，阿瓦登终于找到了可以暂停工作的理由，他很快移动鼠标到电子信箱的选项上，点开，很快一个新的界面出现了。\n\n“To: 19842015\n\nFrom：10045687\n\nSubject: 模块、已经、完成、当前、项目、是否、开始。”\n\n阿瓦登微微地叹了一口气，觉得有些失望。每一次他收到新的电子邮件，都希望能够有一次新鲜的刺激来撞击他日益迟钝的脑神经，每一次他都失望了。其实他早就知道这一点，只不过他觉得保持期待至少能够享受到几秒钟快感。就好象他期待着打电话过来的是一个圆润温柔的女性声音一样。不给自己一些渺茫的希望，阿瓦登觉得自己迟早会疯掉的。\n\n这封信很简短，但是内容很充实。19842015是阿瓦登的网络编号，而10045687则是他的一位同事的编号，这种工作性质的信件通常都以编号相称。信的内容是几个不连续的英文单词，这是有关部门所提倡的一种电子邮件书写方式，因为这样可以方便软件检查信件中是否含有敏感词汇。\n\n阿瓦登打开回信的页面，同时另开了一个窗口，打开一份名字叫做“网络健康语言词汇列表”的TXT文档。这是有关部门要求每一位网民所必须使用的词汇。当他们书写电子邮件或者使用论坛服务的时候，都得从这个词汇列表中寻找适合的名词、形容词、副词或者动词来表达自己想要说的话。一旦过滤软件发现网民使用了列表以外的词，那么这个词就会被自动屏蔽，取而代之的是“请使用健康语言”。\n\n“屏蔽”是个专有名词，被屏蔽的词将不允许再度被使用，无论是在书信里还是口头都不允许。讽刺的是，“屏蔽”一词本身也是被屏蔽的词汇之一。\n\n这个列表是经常更新的，每一次更新都会有几个词在列表上消失，于是阿瓦登不得不费劲脑汁寻找其他词语来代替那个被屏蔽掉的词语或者单字。比如在以前，“运动”这个词是可以使用的，但后来有关部门宣布这也是一个敏感词汇，阿瓦登只好使用“质点位移”来表达相同的意思。\n\n他对照着这份列表，很快就完成了一封文字风格与来信差不多的EMAIL——健康词汇表迫使人们不得不用最短的话来表达最多意思，而且要尽量减少不必要的修辞，所以这些信件就好象是那杯蒸馏水一样，淡而无味，阿瓦登有时候想，他早晚也会和这些水和信一样腐烂，因为这些信是他写的，水是他喝的。\n\n接下来阿瓦登启动检查软件先扫了一遍，确保自己没无意中加入什么敏感词汇。等这一切都完成后，他按下了发送键，邮件被送出去了。\n\n阿瓦登没有留下备份，因为他的机器里没有硬盘，也没有软驱、光驱或者USB接口。这个时代宽带技术已经得到了很大发展，应用软件可以集中在统一的一个服务器中，个人用户调用时的速度丝毫不会觉得迟滞。因此个人不需要硬盘，也不需要本地存储，他们在自己电脑里写的每一份文档、每一段程序、甚至每一个动作都会被自动传送到有关部门的公共服务器中，这样便于管理。换句话说，阿瓦登所使用的电脑，仅仅具备输入和输出两种功能。\n\n完成了这封信后，阿瓦登再度陷入了软绵绵的焦躁状态，这是一个连续工作了三天的程序员的正常反应。这种情绪很危险，因为它让人效率低下精神低迷，而且没有渠道发泄。“疲劳”、“烦躁”以及其他负面词汇都属于危险词汇，如果他写信给别人抱怨的话，那么对方收到的将会是一封写满“请使用健康语言”的EMAIL。\n\n这就是阿瓦登每天的生活，今天比昨天更糟糕，但应该比明天还稍微好一点。事实上这个叙述也很模糊，因为阿瓦登自己并不清楚什么是“好一点”，什么是“更糟糕”。“好”与“坏”是两个变量，而他的生活就是一个定量，只有一个常数叫“压抑”。\n\n阿瓦登推开鼠标，把脑袋向后仰去，长长地呼了一口气。（至少“呼”这个字还没有被屏蔽）这是空虚的表现，他想哼些歌，但却又不记得什么，转而吹了几下口哨，但那听起来与一只生了肺结核的狗差不多，只得做罢。有关部门象幽灵一样充斥在整个房间里，让他无法舒展自己的烦闷。就好象一个人在泥沼里挣扎，刚一张口就被灌入泥水，甚至无法大声呼救。\n\n他的头不安分地转了几转，眼神偶尔撇到了摆在地板上的老式电话机，他忽然想到还必须要去有关部门申请自己的BBS论坛浏览许可证。于是他关掉“工作”和“电子邮件”窗口，退出了网络登陆。阿瓦登在做这些事的时候毫不犹豫，他很高兴能够暂时摆脱互联网络，在那上面他只是一串枯燥的数字和一些“健康词汇”的综合体。\n\n阿瓦登找出一件破旧的黑色呢子大衣，那件大衣继承自他的父亲，袖口和领子已经磨损的很严重，个别地方有灰色的棉花露出来，但还是很耐寒。他把大衣套到身上，戴上一副墨绿色的护镜，用过滤口罩捂住嘴。他犹豫了一下，拿起“旁听者”别在耳朵上，然后走出家门去。\n\n纽约的街上人很少，在这个时代，互联网的普及率相当地高，大部分事务在网上就可以解决，有关部门并不提倡太多的户外活动。太多的户外活动会导致和其他人发生物理接触，而两个人发生物理接触后会发生什么事则很难控制。\n\n“旁听者”就是为了防止这种事而发生的，这是一种便携式的语言过滤器，当携带者说出敏感词汇的时候，它就会自动发出警报。每一位公民外出前都必须要携带这个装置，以便随时检讨自己的言语。当人们意识到旁听者存在的时候，他们往往会选择沉默，至少阿瓦登是如此。有关部门正逐步试图让网络和现实生活统一起来，一起“健康”。\n\n这时候正是11月份，寒风凛冽，天空漂浮着令人压抑的铅灰阴云，街道两旁的电线杆仿佛落光了叶子的枯树，行人们都把自己包裹在黑色或灰色的大衣里面，浓缩成空旷街道上的一个个黑点飞快移动着。一层若有若无的烟雾将整个纽约笼罩起来，不用过滤口罩在这样的空气里呼吸将会是一件很有挑战的事情。\n\n距离上一次离开家门已经有两个月了吧，阿瓦登站在公共汽车站的站牌下，不无感慨地想，周围的一切看起来很陌生，泛黄，而且干燥。那是上一次沙尘暴的痕迹。不过沙尘暴这个词也已经被屏蔽了，因此阿瓦登的脑海里只是闪过那么一下，思想很快就转移到别的事情上去了。\n\n站在阿瓦登旁边的是一个穿着蓝色制服的高个男人。他先是狐疑地看了阿瓦登一眼，看到后者沉默地沉在黑色大衣里，他的两只脚交替移动，缓慢地凑了过去，装做漫不经心对阿瓦登说：\n\n“烟，有吗？”\n\n男人说，每一个字都说的很清晰，而且词与词之间间隔也足够长。这“旁听者”还没有精密到能够完全捕捉到每一个人语速和语调的程度，因此有关部门要求每一位公民都要保持这种说话风格，以方面检测发言人是否使用了规定以外的词汇。\n\n阿瓦登转过头去，看了他一眼，舔舔自己干裂的嘴唇，回答说：\n\n“没有。”\n\n男人很失望，又一次不甘心地张开嘴。\n\n“酒，有吗？”\n\n“没有。”\n\n阿瓦登又重复了一次这个词，他也已经很久没有收到烟和酒了，也许是缺货的关系吧，这是常有的事。不过有一点很奇怪，“旁观者”这一次却没有发出警报。以阿瓦登的经验，以往一旦烟、酒或者其他生活必需品发生短缺现象，这个词就会暂时成为被屏蔽掉的敏感词汇，直到恢复供给为止。\n\n这个男人看起来很疲惫，红肿的眼睛是这个时代的人们普遍的特征，这是长时间挂在网上的关系。他的头发蓬乱，嘴边还留着青色的胡子碴，制服下的衬衣领口散发着刺鼻的霉味。能看的出，他也很久不曾到街上来了。\n\n阿瓦登这时候才注意到，他的耳朵上空荡荡的，没有挂着那个银灰色的小玩意“旁听者”，这实在是一件严重的事情。不携带“旁听者”外出，就意味着语言不会再被过滤，一些不健康的思想和言论就有可能孳生，因此有关部门相当严厉地规定公民上街必须携带旁听者。而这个男人的耳朵旁却什么也没有。阿瓦登暗暗吃惊，一时间不知道是该去提醒还是装做没看到。他暗自想，也许向有关部门举报会更好。\n\n这时候那个男人又朝他靠近了一点，眼神变的饥渴起来。阿瓦登心里一阵紧张，下意识地向后退去。这难道是一次抢劫？还是说他是个压抑太久的同性恋者？那个男人忽然扯住他的袖子，阿瓦登狼狈地挣扎却没有挣开。出乎他的意料，那个男人并没有进一步的动作，而是大吼一声，用一种阿瓦登已经不太习惯了的飞快语速向他倾泻起话语来。阿瓦登被这突如其来的爆发弄的莫名其妙，不知所措。\n\n“我只是想和你多几句话，就几句，我很久没有说过话了。我叫斯多葛，今年三十二岁，记得，是三十二岁。我一直梦想有一套在湖边的房子，有一副钓鱼竿和一条小艇；我讨厌网络，打倒网管；我妻子是个可恶的网络中毒者，她只会用枯燥乏味的话叫我的网络编号；这个城市就是一个大疯人院，里面大疯子管着小疯子，并且把所有没疯的人变的和他们同样疯狂；敏感词汇都去他X的，老*受够了……”\n\n男人的话仿佛一瓶摇晃了很久然后突然打开的罐装碳酸饮料，迅猛，爆裂，而且全无条理。阿瓦登惊愕地望着这个突然狂躁起来的家伙，却不知道如何应对；更可怕的是，他发现自己居然对他产生了一点同情，那种“同病相怜”式的同情。男人的话这时候已经从唠叨变成了纯粹谩骂，全部都是最直抒胸臆的那种。阿瓦登已经有五、六年不曾说过这些脏话，最后一次听到这些也是四年前。有关部门认为这都有碍精神文明，于是全部都屏蔽掉了。\n\n而现在这个男人就在公众场合对着他大吵大嚷，似乎要将被屏蔽掉的敏感词汇一口气全倒出来。他的目光和手势并不针对任何人，甚至也不针对阿瓦登，更象是在一个人在自说自话。阿瓦登的耳膜似乎不习惯这种分贝，开始有些隐隐做痛，他捂着耳朵，拿不定主意是干脆逃掉还是……这时候，远处街道出现两辆警车，一路闪着警灯直直冲着这座公共汽车站而来。\n\n警车开到站台旁时，男人仍旧在痛骂着。警车门开了，涌出了五、六名全副武装的联邦警察。他们扑过去将那个男子按在地上，用橡皮棍痛打。男人两条腿挣扎着，嘴里的语速更快了，骂出来的话也越来越难听。其中一名警察掏出一卷胶带，“嚓”地一声扯下一条向男人的嘴贴去。男人在嘴被胶带封住之前，突然提高嗓门，冲着警察痛快无比地喊了一句：“FUXKYOU, YOUSONOFBITCH！”阿瓦登看到他的表情由疯狂变成享受，面带着微笑，似乎完全陶醉在那一句话所带来的无上快感和解脱感中。\n\n联邦警察们七手八脚地将男人送进了警车，这时才有一名警察走到了阿瓦登的跟前。\n\n“他，是，你朋友？”\n\n“我，不，认识。”\n\n警察盯了他一阵，取下他耳朵上的“旁观者”查看记录，发现他并没有提及任何敏感词汇，于是重新给他戴回去，警告他说那名男子说的全部都是极度反动的词汇，要求他立刻忘掉，然后转身押着那男子离开了。\n\n阿瓦登松了一口气，其实刚才他有一瞬间涌现出一种冲动，也想在这空旷的街道上大喊一声“FUXKYOU, YOUSONOFBITCH”那一定很爽快，他心里想，因为那男子说出这句话的时候表情很享受。不过他也知道，这也是妄想的一种，“旁观者”紧帖在耳朵上的冰凉感觉时刻提醒着他。\n\n街上很快就恢复了冷清，十分钟后，一辆公共汽车慢吞吞地开进站里，锈迹斑斑的车门哗啦一声打开，一个电子女声响彻整个空荡荡的车厢：“请乘客注意文明用语，严格按照健康词汇发言。”\n\n阿瓦登把自己缩进大衣，压抑住自己异样的兴奋，决定继续保持沉默下去。\n\n大约过了一个小时，公共汽车到了目的地。从破碎的车窗玻璃里吹进来的寒风让阿瓦登脸上挂起一层暗灰色的霜气，面部被风中的沙砾和煤渣刮的生疼。他听到电子女声报出了站名，就站起身来，象一条狗一样抖抖身上的土，走下车去。\n\n车站对面就是阿瓦登要去的地方，那是有关部门负责受理BBS论坛申请的网络部。这是一间五层的大楼，正方形，全水泥混凝土结构，外表泛灰。如果没有那几个窗户的话，那么它的外貌将与水泥块没有任何区别：生硬、死气沉沉，让蚊子和蝙蝠都退避三舍。\n\nBBS论坛是一种奇特的东西，从理论上来讲它完全多余，BBS的功能完全可以由EMAIL新闻组来取代，后者更容易管理和审查。而且申请使用BBS论坛资格不是件容易的事，申请人必须要通过十几道手续和漫长的审查才能有浏览资格，浏览资格三个月才会被允许在指定论坛发布帖子，至于自己开设BBS则几乎是不可能。\n\n因此真正对BBS有兴趣的人少之有少。阿瓦登当初之所以决定申请BBS论坛资格，纯粹是因为他那种模糊但却顽强的怀旧心态，就好象他从杂货店里买的那部老式电话一样。他也不知道自己为什么会自找麻烦，也许是为了给生活带来些刺激，还是说为了强调自己和曾经旧时代的那么一点点联系，也许两者兼有之。\n\n阿瓦登恍惚记得在他小的时候，互联网与现在并不太一样。并不是指技术上的不同，而是一种人文的感觉。他希望能通过使用BBS论坛回想起一些当年的事情。\n\n阿瓦登走进网络部的大楼，大楼里和外面一样寒冷，而且阴森。走廊里没有路灯，蓝白色调的两侧墙壁贴满了千篇一律的网络规章条文与标语，冰冷的空气呼吸到肺里，让阿瓦登一阵痉挛。只有走廊尽头的小门缝隙里流泻出一丝光亮，小门的上面挂着一块牌子，上面写的是“网络部BBS论坛科。”\n\n一走进这间屋子，阿瓦登立刻感觉到一阵温洋洋的热气。屋子里的暖气（或者是空调）开的很大，让阿瓦登冻麻了的手脚和脸麻酥酥的，有些发痒，他不禁想伸出手去挠挠。\n\n“公民，请您站在原地不要动。”\n\n一个电子女声忽然从天花板上的喇叭里传来，阿瓦登触电似地把手放下，恭敬地站在原地不同。他借这个机会观察了一下这间屋子。这屋子准确来说应该是一个狭长形的大厅，一道拔地而起的大理石柜台象长城一样将房间割裂成两部分，柜台上还装着一排银白色的圆柱形栅栏，直接连到天花板。屋子里没有任何装饰，没有观赏植物，没有塑料鲜花，甚至没有长椅和饮水机。\n\n“缔造健康的互联网络，美国万岁。”\n\n阿瓦登跟着声音重复了一遍。\n\n“请前往八号窗口。”\n\n电子女声的语调很流畅，因为这是电脑制作出来的，因此没有敏感词汇的限制。\n\n阿瓦登转头看到在自己右手边的不远处，大理石柜台上的液晶屏幕显示着八号的字样。他走过去，拼命抬起头，因为柜台实在太高了，他只能勉强看到边缘，而无法看到柜台另一侧的情形。不过他能听到，一个人走到柜台对面，坐下去，并有翻动纸张与敲击键盘的声音。\n\n“请把文件放入盒子里。”\n\n柜台上的喇叭传来命令。出乎意料，这一次在喇叭里的声音却变了。虽然同样冷漠枯燥，但阿瓦登还是能分辨出它与电子女声的不同——这是一个真正的女性的声音。他惊讶地抬头望去，却什么都看不到，柜台太高了。\n\n“请把文件放入盒子里。”\n\n声音又重复了一次，语气里带着一丝烦躁，似乎对阿瓦登的迟钝很不满。\n\n“是的，这是真正的女声……”阿瓦登想，电子女声永远是彬彬有礼不带任何感情色彩的。他把相关的电子身份证、网络许可证、网络编号和敏感词汇犯罪记录等一系列个人资料卡片一起放进柜台外的一个小金属盒子里，然后把盒子插进柜台上一个同样大小的凹槽中，关好门。很快他听到“唰”的一声，他猜测这也许是对面的人——也许是个女人——将盒子抽出去的声音。\n\n“你申请BBS服务的目的是什么？”\n\n喇叭后的女声浸满了纯粹事务性的腔调。\n\n“为了、提高、互联网络、工作效率、为了、缔造、一个、健康、的网络、环境，更好地、为、祖国、做出、贡献。”\n\n阿瓦登一字一句地回答，心里知道这只是一道官方程序，只需要按标准回答就可以。\n\n对面很快就陷入沉默，大约过了十五分钟，喇叭再度响起。\n\n“最后手续确认，你已经获得BBS论坛浏览权。”\n\n“谢谢。”\n\n“砰”的一声，金属盒子从柜子里弹了出来，里面除了阿瓦登的证件以外还多了五张小尺寸光盘。\n\n“这是有关部门核发给你的BBS论坛统一用户名与密码，BBS论坛列表、互联网BBS论坛使用指南及相应法规、以及最新健康网络词汇列表。”\n\n阿瓦登向前踏了一步，从盒子里将这些东西一股脑全拿出来，揣进大衣的大兜里。那些东西其实是可以全部放在同一张光盘里的，不过有关部门认为每一张光盘装一份文件有助于用户理解这些文件的严肃性和重要性，并产生敬畏。\n\n他心里盼望着那个喇叭能再说两句。让他失望的是，对面传来的是一个人起身并且离开的声音，从脚步声的韵律判断，阿瓦登愈发相信这是一名女性。\n\n“手续办理完毕，请离开网络部回到自己的工作岗位上。”\n\n甜美空洞的电子女声从天花板上传来，阿瓦登厌恶地抽动鼻翼，拿手揉了揉，转身离开这间温暖的大厅，重新进入到寒冷的走廊。\n\n在回家的路上，阿瓦登蜷缩在公共汽车上一动不动，顺利申请到BBS的使用权让他有些虚无缥缈的兴奋。他闭着眼睛，找了一个合适的角度躲开破窗而入的寒风，右手在兜里不断摩挲那一系列光盘，还在怀念着那一个神秘的女声。\n\n如果能再一次听到该多好，他不能抑制自己这样的想法，同时用拇指的指肚在光盘上轻轻地摩擦，幻想这几张光盘也曾经被她的手触摸过。他兴奋的几乎也想破口大骂一句“FUXKYOU, YOUSONOFBITCH”，真奇怪，那名男子的骂声在他的记忆里根深蒂固，并时不时不自觉地滑到唇边。\n\n忽然，他的手指在光盘上发觉到一丝异常的感觉。阿瓦登下意识地朝四周望去，确认周围一个乘客也没有后，他小心翼翼地把光盘全拿出来，就着窗外的光亮仔细端详。\n\n阿瓦登很快注意到，在装有BBS论坛列表的光盘背面，被人用指甲轻轻地划了一道刮痕。这条刮痕很轻，如果不是阿瓦登仔细地抚摩光盘的话，是很难发觉到的。这条刮痕很奇特，是一条直线，而在这条直线末端的不远处，则是另外一条极短的刮痕，似乎刻意想弯成一个圆点。整体看上去就好象是一个叹号，或者倒过来说，象是字母i。\n\n很快他在其他四张光盘上也发现了类似的刮痕，它们造型都不同，但都似乎代表着某种符号。阿瓦登回想起喇叭里那个女声最后一句提到过的文件顺序，于是把这五张光盘按照BBS论坛统一用户名与密码、BBS论坛列表、互联网BBS论坛使用指南、相应法规、以及最新健康网络词汇列表的顺序排列好，接着依次把那五道刮痕用手指临摹到汽车窗户上。很快那些刮痕构成了一个英文单词：\n\ntitle\n\n题目？这是什么意思？\n\n阿瓦登看着这个单词莫名其妙，这究竟是纯属无意的痕迹，还是有人刻意为之？如果是有人刻意为之，他这么做的用意是什么？\n\n这时候汽车停住了，又有几名乘客走上车来。阿瓦登挪动一下身体，不让他们看到自己在车窗上写出来的字迹，然后装做打呵欠的样子抬起袖子，轻轻把那五个字母擦掉。\n\n阿瓦登暗自庆幸，如果他没有在现在发现这些光盘上的痕迹，那么以后就永远没有机会发觉了。按照规定，个人电脑是不允许使用任何存储存设备的，因此阿瓦登的电脑并没有光驱。他下一步所要做的是将这些光盘送交到管区网络安全部，由他们将光盘内资料登陆到服务器中，再转发给阿瓦登。这是为了防止个人私自在家里制造、阅读或者传播黄色或者反动信息，网络安全部发出的通告是这么解释的。联邦的网络警察经常会突入到个人家中进行临时检查，看用户是否非法拥有信息贮存设备，阿瓦登曾经亲眼见过一个邻居被警察带走，原因仅仅是因为他私自藏了一张光盘在家里——其实他只是打算拿那个当茶杯垫用。那个邻居再没回来过。\n\n无论这些符号代表的是什么意思，它都是一种全新的体验，这让阿瓦登感觉到兴奋。怀旧与渴望新奇是阿瓦登生活在这个时代的两根精神支柱，否则他会与这座城市一样变的僵硬，然后窒息而死。\n\n他先来到网络安全分部，将光盘交给那里的负责人，负责人反复地检查光盘和阿瓦登的表情，好象所有使用BBS论坛的人都不可信赖一样。末了负责人终于找不到什么破绽，只得将光盘收下，然后举起右手，阿瓦登和他一起高呼“缔造健康的互联网络”。这句话是唯一被允许可以连贯着被说出来的句子。\n\n回到家里，阿瓦登脱掉大衣，摘了过滤口罩，将旁观者扔到了行军床上，然后整个人也倒进枕头里。每次出去外面都会让他疲劳，这一半是因为他孱弱的肉体已经不大适合室外活动；另外一半原因是因为他必须花费大量的精力来应付旁观者。\n\n过了四十分钟，他才悠悠地醒过来，头还是和平常一样地疼，胸口还是一如既往地闷。胡乱吃了一点东西以后，阿瓦登爬到电脑桌前，打开电脑，按程序登陆上网络，习惯性地先检查了一遍信箱。\n\n信箱里有七、八封新的信件，其中两封是同事发来的事务信。另外五封则是网络安全部发给他的，内容就是他送交的那几张光盘。\n\n阿瓦登打开了包含有BBS论坛的用户名、密码和BBS论坛列表的两封信。他看到自己的论坛通用用户名叫做19842015，和自己的网络编号完全一样，不由得有些失望。他依稀记得在小的时候，BBS论坛的用户名是可以自己决定的，而且每一个论坛都可以不同，一个人在网上并不单只是一串枯燥数字。\n\n小时候的记忆往往是跟童话和幻想混杂在一起，未必与实际相符。现实中你只能使用有关部门指定的用户名和密码，理由很简单，用户名和密码内也可能含有敏感词汇。\n\n阿瓦登又打开了那份BBS列表，全部都是有关部门开设的官方论坛，没有私人的——事实上个人能够合法持有的电脑设备从技术上来说也无法架设新BBS——这些论坛的主题各有侧重点不同，但基本上是围绕着如何更好响应国家号召，缔造健康互联网络来说的。比如其中一个电脑技术论坛，主题就是如何更好地屏蔽掉敏感词汇。\n\n居然在这些论坛中还有一个是关于游戏的。里面正在讨论的是一个如何帮助别人使用健康词汇的网络游戏，玩家可以操纵一名小男孩在街上侦察，看是否有人使用了敏感词汇，小男孩可以选择上前指责或者通知警察，抓到的人越多，小男孩得到的褒奖就越高。\n\n阿瓦登随便打开了几个论坛，里面的人都彬彬有礼，说话很“健康”，就好象街上的那些行人一样。不，准确地说，比街上的气氛还要压抑。在街上的人也许还有机会保留一下自己的小动作，比如阿瓦登刚才在公共汽车上就偷偷地写了TITLE五个字母；而在网上论坛，人的最后的一点隐私也全被暴露出来，有关部门随时可以调看你的一切行动，无从遁形，这就是科学技术发展所带来的进步。\n\n一阵失落和失望袭上阿瓦登的心头，他合上眼睛，把鼠标甩开，重重地向后靠去。原来他天真地以为BBS论坛也许会少许宽松一些，现在看来甚至比现实中更叫人窒息，他感觉到自己好象陷入沉滞的电子淤泥之中，艰于呼吸。“FUXKYOU, YOUSONOFBITCH”再一次涌现到他的唇边，强烈无比，要化好大的力气才控制住。\n\n忽然，他又想到了那个神秘的title，那究竟是什么意思？那五张光盘里或许隐藏着什么？也许这跟title有关系？\n\n阿瓦登想到这里，把目光重新转向电脑屏幕，仔细去看网络安全部发来的五封信的title部分。五张光盘各隐藏着一个字母，凑到一起就是title，那么按照这个方式，那五封EMAIL的title凑到一起，就变成了一句话：去用户学习论坛。”\n\n阿瓦登记得刚才他确实看到其中一个论坛的名字叫做“用户学习”，于是他抱着姑且一试的心态连接到这个论坛去。他希望这并不是一个巧合。\n\n用户论坛是一个事务性论坛，里面是一些关于BBS用户资料的投诉帖和管理帖，斑竹的是一个叫19387465的人；发帖的人和回帖的人数量都很少，里面冷冷清清的。阿瓦登打开帖子列表，按照刚才的规律去搜寻每一个帖子的标题，并把它们综合到一起，很快他就得到了另外一句话：\n\n“每周日辛普森大楼5层B户。”\n\n又是一个谜团，阿瓦登想。但这却坚定了他的信心，这其中必定隐藏着玄机。光盘、EMAIL和BBS论坛，连续三次都可以通过首词组组合的方式得到暗示，绝非巧合。\n\n究竟是什么人会在有关部门的官方文件中隐藏着这样的信息呢？每周日在效率大楼5层B户又会发生什么事情呢？\n\n阿瓦登终于找到了久违的兴奋感，未知事物的新奇刺激着他麻木很久的神经。更重要的是，这种在有关部门正式文件中玩弄的文字技巧，叫他有一种喘息的快感，仿佛一个密不透风的铁面罩上几个透进空气的小孔。\n\n营造健康的互联网络。\n\nFUXKYOU, YOUSONOFBITCH。\n\n阿瓦登盯着屏幕上的桌面背景，用嘴唇比出了那句粗话的口型，并且比出了中指。\n\n在接下来的日子里，阿瓦登一直处于一种潜藏的兴奋状态，就象是一个摆出无辜表情嘴里却藏着糖果的小孩子，在大人转身过去之后露出狡黠的笑容，尽情享受心中藏有秘密的乐趣。\n\n日子一天一天地过去，健康词汇在列表里又少了几个，窗外的空气又浑浊了几分，这已经是生活的常态。阿瓦登自己已经开始拿网络健康词汇表当日历来用，划掉三个词就证明过了三天，划掉七个就证明过了一周，于是周日终于到来了。\n\n阿瓦登抵达辛普森大楼的时间是中午，暗示的句子里并没有指明时间，阿瓦登认为在中午前往应该是比较可以接受的。当穿着深绿军大衣，耳朵上别着旁观者的阿瓦登来到辛普森大楼的入口时，他的心开始忐忑不安地跳跃起来。他在上一星期设想了无数种可能发生的情景，而现在这个谜底就要揭晓了。无论在周日效率大楼会发生什么，也不会比现在的生活更加糟糕，阿瓦登心里想，所以他并不怎么害怕。\n\n他走进大楼内部，发现这里的人也很少，空旷的走廊里只听到他哒哒的脚步声与回音。一部老电梯里贴着“缔造美好网络家园”的广告，以及一个充满了正义感的男性头像海报，背景是星条旗，他在纸里用右手食指指向观看者，头上写着一行字是“公民，请使用健康词汇。”阿瓦登厌恶地转过身去，发现另外一侧也贴着同样的海报，避无可避。\n\n值得庆幸的是五楼很快就到了，电梯的门一开，对面的门上就赫然挂着B户的牌子。门是掉了漆的绿色，门框上还点了几滴墨水，一部简易的电子门铃挂在右上角。\n\n阿瓦登深深吸了一口气，伸手去按电纽。\n\n电铃响起，很快屋子里传来脚步声。阿瓦登觉得这脚步的韵律很熟悉，似乎是在哪里见到过。门“咔拉”一声被打开一半，一名年轻女子一手握着把手，把身体前倾望着阿瓦登，警惕地说：\n\n“你，找谁？”\n\n女子疑惑地问道。阿瓦登一下子就认出了她的声音，就是那个在网络部BBS论坛科柜台后面的女性。她很漂亮，穿着墨绿色绒线衫，头上梳着这时代流行的短发，皮肤特别的白，只有嘴唇能看到一些血色。\n\n看着女子的眼神，一瞬间阿瓦登不知道该说什么好，犹豫了一下，他举起右手，轻声回答说：“title。”\n\n阿瓦登不知道这句话能否奏效，也不知道自己是否真的找对了地方，但这是他唯一能想到的回答了。他紧张地望着那女子，假如那女子忽然报警，那么自己就会被抓起来仔细审问为什么无缘无故跑到陌生人家里。“肆意游走罪”只比“使用敏感词汇罪”轻那么一点。\n\n女子听到他这么说，脸上还是毫无表情，只是把头幅度很轻微地点了一下，右手谨慎地做了一个“进来”的手势。阿瓦登刚要张口，那女子严厉地瞪了他一眼，吓的他把话又吞回去了，乖乖地跟着她进了屋子。\n\n一进屋子，女子首先做的就是把门关好，然后拉起来一层铅灰色的门帘挡在门口。阿瓦登不安地眨着眼睛，趁她拉门帘的时候环顾四周。这屋子是标准的两室一厅，在厅里摆放的是一套双人沙发与一个茶几，茶几上居然还有几束红紫色的塑料花。靠墙是电脑桌和电脑，墙上挂着普通的白色日历，但被主人用粉红色的纸套了边，看起来颇为温馨。一盏粗笨的日光灯从天花板上垂下来，上面象是恶作剧一样挂了几缕绿色的电线，象是垂下藤蔓的葡萄架。阿瓦登注意到厅口的鞋架上有四双鞋，尺码不同，说明今天的客人并不只他一个。\n\n阿瓦登正踌躇不安，忽然女子从背后拍了拍他的肩膀，示意他朝里面走。于是两个人穿过客厅另一侧的短小回廊来到其中一间卧室。卧室上挂着同样质地的铅灰色帘子，女子伸手举起帘布，推开了门。阿瓦登迈了进去，首先映入眼帘的是三名面带微笑的人类，以及一间用真正的鲜花装点的房间。屋子里有很多旧日记忆里的古老物品，比如一幅印象派的油画、一尊乌干达木雕，甚至还有一个银烛台，唯独没有电脑。\n\n他正在迟疑，女子也进了屋子。她谨慎地拉好门帘关上门，将耳边的旁观者取下，回过身来对阿瓦登用曼妙的声音说道：\n\n“欢迎加入说话会！”\n\n“说话会？”\n\n出于习惯，阿瓦登并没有把这三个字说出口，因为他不确定是否“健康”，只是用眼神表示自己的疑惑。\n\n“在这里你可以随便说话，这个该死的东西不会起作用的。”女子把自己的旁观者晃了晃，那个小东西象死掉了一样，对女子句子里两个敏感词汇“随便”和“该死”充耳不闻。\n\n阿瓦登一下子想到上星期在公共汽车站前碰到的男子，如果他摘下旁观者，会不会也会落到同一境地呢？那女子见他犹豫不决，指了指门口的铅灰色门帘说：“放心好了，这里是可以屏蔽掉旁观者信号的，不会有人觉察到。”\n\n“你们，是什么，人，这，是，哪里？”\n\n阿瓦登一边摘下耳朵上的旁观者，一边小声说道，语调还是改不了那种有关部门规定的说话方式。\n\n“这里是说话会，是一个完全自由场所，在这里你可以畅所欲言，请不要拘束。”\n\n另外一个人起身对他说道，这是一名瘦高的中年男子，鼻梁上的眼镜非常地厚。\n\n阿瓦登嗫嚅着，却找不到发音的焦点，在四个人的注视下显得窘迫不堪，脸都要红起来。女子同情地看了他一眼：“可怜的家伙，不用太紧张，每一个刚到这里的人都是这样。慢慢就习惯了。”\n\n她把手搭到阿瓦登的肩上：“我们其实见过的，当然，我见过你，而你没见过我。”她一边说，一边将自己的头发解下来，原来她留的是一头齐肩的乌黑长发，头发披下来的一瞬间阿瓦登觉得她真的很美。\n\n“我……我记得你，记得你的声音。”阿瓦登终于说出了一句完整的话，虽然不够流畅。\n\n“是吗，那可太好了。”女子笑起来，拉着他的手，让他坐到沙发上，递给他一杯水。阿瓦登注意到这是一个款式古老的茶杯，上面还刻着花纹，杯子里的水带着浓郁的香气，阿瓦登尝了一点，那种甜丝丝的味道对喝惯纯净水的舌头来说刺激格外地大。让他觉得浑身一下子被注进了许多活力。\n\n“弄到这个可不容易，我们也不是每周都能喝到。”女子坐到他身边，两只乌黑的眼睛注视着他，“你是怎么知道这个集会的？”\n\n阿瓦登把发现光盘暗示的过程说了一遍，其他四个人都赞许地点了点头。“果然是个聪明人，脑筋还没被陈腐的空气腐蚀掉。”一个三十多岁的胖子称赞道，他的嗓门大的要命。那个戴眼镜的中年人把两只手交叉在一起，表示赞同。\n\n“这正是天生的说话会成员，聪明、敏锐，而且不甘屈从于沉默。”\n\n“那么。”胖子提议，“先让我们鼓掌欢迎说话会的新成员吧。”\n\n于是四个人鼓起掌来，小小的屋子里响起一片掌声。阿瓦登羞涩地举起杯子做回应，他还不太习惯这样的场面。等到掌声稍息，他抬起头怯生生地问道：\n\n“可以问个问题吗？说话会到底是什么？”\n\n带他进屋的女子伸出食指，在他鼻子前两公分的地方比了一比，解释道：\n\n“说话会，就是可以畅所欲言的集会。在这里你不必顾忌什么，说出任何你想说的东西。这里没有敏感词汇，也没有健康互联网络。这里是绝对自由的空间，你可以尽情释放你的灵魂，舒展你的身体，没有任何禁锢与束缚。”说着说着，她的声音变的高亢、奔放，里面饱含了许多早已经被屏蔽掉的词汇，阿瓦登不曾听到这样流畅连贯的话语很久了。\n\n“我们的宗旨就是，说话，就这么简单。”中年人扶扶眼镜，补充道。\n\n“可是，要说些什么呢？”阿瓦登又问道。\n\n“任何事情，你心里想的任何事情都可以说出来。”中年人露出宽和的笑容，“尤其是那些被美国政府限制的思想。”\n\n这可真是一个大胆的集会啊，这分明就是犯罪，阿瓦登心想，但他发觉自己却被这种犯罪慢慢地吸引住了。\n\n“当然，有件事我们会事先说明。说话会是危险的，每一个成员都冒着被有关部门拘捕的风险。联邦执法人员也随时可能破门而入，以非法集会以及非法使用不合法词语的名义把我们抓起来。你现在有权拒绝加入，并且离开。”\n\n阿瓦登听到女子的警告，心里一度犹豫起来。但一想到此刻离去的话，那么又要开始持续那种窒息的泥沼生活，他就难以压抑自己的烦闷。阿瓦登第一次发现，原来“说话”对他来说是一个致命的诱惑，他先前并不知道自己原来是如此地渴望着说话。\n\n“我不会离开的，我要加入你们，说话。”\n\n“那太好了。唔，那么不妨就从自我介绍开始吧。”女子高兴地说，同时站起身来，把右手搭到胸前，“从我开始。我的名字叫阿尔特弥斯，至于网络编号和身份证号码，让他们见鬼去吧！谁会去管那个！我有我自己的名字，我不是数字。”\n\n她的话让所有人包括阿瓦登都笑了起来。接着她继续说道：“不过，这其实只是一个假名，这是希腊神话里的女神。”\n\n“假名？”\n\n“是的，和我户籍本上的名字是不同的。”\n\n“可是，为什么？”\n\n“你不会对自己在档案里的名字厌倦吗？我想起一个自己喜欢的名字，哪怕只有一次机会也好，自己想叫什么就叫什么。在这个说话会里的每一个人都有一个自己喜欢的名字，我们彼此拿这个称呼。”\n\n阿瓦登若有所思地点点头，他很理解阿尔特弥斯的想法。事实上当他在使用网络论坛的时候，也希望能够自己取一个称心如意的名字，而不是被分配一个用户名。\n\n通过介绍，阿瓦登了解到阿尔特弥斯是网络部BBS论坛管理科的职员，今年23岁，未婚，最讨厌蟑螂和蜘蛛，喜欢缝纫与园艺，屋子里的花就是她偷偷从城市边缘摘回来的。\n\n接下来是那名中年人，他自我介绍说名字叫兰斯洛特，41岁，是城市电厂的一名工程师；兰斯洛特这名字出自英国的亚瑟王传说，是一名忠贞的骑士。他有自己的老婆和两个孩子，一男一女；男孩三岁，女孩四岁，他们最喜欢吃的就是柠檬味道的水果糖。说到这里，兰斯洛特说希望下次聚会能把他们也带了，孩子们正是学说话的时候，他想教给他们真正的说话。\n\n那个三十多岁的胖子是网络部的一名网管，叫瓦格纳。这个身份让阿瓦登吃惊不已，他的印象里网管都是些绷着脸全无表情的冷漠生物，但眼前的瓦格纳脸圆滚滚的，油光锃亮，嘴边两条翘起的小胡子神气十足。他喜欢的是雪茄和歌剧，利用网管的特权这两样东西都不难弄到。\n\n“这个能屏蔽掉信号的门帘就是他弄的。”阿尔特弥斯补充说，瓦格纳冲她做了个“乐意为您效劳”的手势，然后点燃了雪茄，把它放到嘴里，很快屋子里就笼罩起一片稀薄的烟雾。\n\n说话会的第四名成员是一位穿着黑色制服的女性，今年刚满三十。她的名字是杜拉丝，城市日报（那个时代的报纸已经全部都数字化了）的编辑，她比阿尔特弥斯还瘦，颧骨高高耸起，眼窝身陷，两片薄薄的嘴唇即使在最说话的时候也很少分开，看不到牙齿。爱好是饲养狗和猫，尽管她并没有养。\n\n“那么，到你了。”阿尔特弥斯对阿瓦登说。阿瓦登想了想，结结巴巴地把自己的情况说了一遍，当谈到自己的爱好时候，他一时间居然想不到自己喜好什么，似乎什么都没有，在那之前他甚至从来没想过。\n\n“那，你最想做的是什么事呢？”阿尔特弥斯把手再一次放在他肩上，诱导着问道。\n\n“真的什么都可以？”\n\n“什么都可以，在这里没有任何限制。”\n\n阿瓦登觉得自己终于找到机会了，他咳了一声，抓抓头，脱口而出一句响亮的叫喊：“FUXKYOU, YOUSONOFBITCH！”\n\n在一瞬间，在座的四个人都被他这句话震惊了。瓦格纳率先反应了过来，他先叼住雪茄，用力鼓掌，然后用右手把雪茄取下来，张嘴大声地赞叹道：“真棒，痛快，这简直是最完美的入会誓词。”\n\n“我宁可听十遍这样的脏话，也不想再去碰那个乏味的电子女声。”兰斯洛特也是一脸陶醉，毫不掩饰自己对电子女声的厌恶。而阿尔特弥斯和杜拉丝全都咯咯地笑起来，杜拉丝发现自己的笑容幅度大了一点，不好意思地把嘴掩住。阿瓦登觉得他们与其说是觉得新奇，不如说是在享受这句脏话所带来的对体制的蔑视与挑战。\n\n“那你叫希望自己叫什么名字呢？” 阿尔特弥斯歪着头问。\n\n“唔……王二。“ 阿瓦登沉吟了一下，回答说。这是一个中式的名字，他以前有一个中国人朋友，喜欢讲故事，故事里的主角名字总是叫王二。\n\n屋子里的气氛现在完全融洽了，大家都开始谈些比较自然的话题，每个人都摆出了最舒服的姿势，阿尔特弥斯不时拿起茶壶来为大家续水。阿瓦登紧张的心情逐渐放松下来，他感觉到自己的脑子前所未有地轻松。\n\n“你知道的。”阿尔特弥斯又给他倒了一杯甜水，“我们一直想把说话会保持在一定规模，平日是没有办法畅所欲言的，我们需要空间。麻烦的是，我们没办法公开征集会员，又不可能直接通过物理接触去寻找，那风险太大。于是兰斯洛特就设计了一套暗示系统，只有发现这些暗示的人才能知道本会的存在。”\n\n“这套系统考虑到的还不止是安全问题。”兰斯洛特把自己的眼镜摘下来仔细擦拭了一下，得意地说，“这其实也是一个会员资格验证。说话会所吸纳的成员，必须有智慧，有头脑，内心渴望激情，并且对自由有着渴望。”\n\n瓦格纳用两根指头夹着雪茄，在事先准备好的烟灰缸里弹了弹烟灰，大声说道：“据我的经验，申请BBS论坛服务的人，大多数都是为了怀旧，或者说渴望一些新鲜的东西，这样的人往往都怀有激情，认为BBS论坛也许能给他们一些与现实不一样的东西——当然，事实上并非如此，美国政府对BBS论坛的管理甚至严厉过电子邮件——这暗示着他们心里渴望解脱束缚。因此我们将暗示隐藏在申请BBS论坛的光盘之中，只有申请人才有机会接触到这些暗示。而只有那些有智慧、观察敏锐的人才会发觉到这些暗示的存在，并顺利解读出来，找到这里。”\n\n“归根到底，说话会也不过是一群渴望自由说话的秘密小团体罢了。”兰斯洛特笑道。\n\n“你是第二个找到说话会的人，第一个是杜拉丝小姐。”\n\n阿尔特弥斯告诉阿瓦登。阿瓦登敬佩地看了杜拉丝一眼，后者淡淡地回答道：“这没什么，这是我的工作，我的工作就是摆弄文字。”\n\n阿瓦登想到上一周在公共汽车站碰到的那个疯狂男子，于是把这件事讲给其他成员听。听完之后，兰斯洛特摇了摇头，从嘴唇里滑出一声叹息：\n\n“这样的事情我也是见过的，我的一个同事就是如此。所以说话会的存在是必要的，这是缓解压力的阀门。长时间的敏感词汇限制会让人都疯掉的，因为他们既无法思考又没办法表达。”\n\n“这正是美国政府有关部门所希望看到的，这样只有傻瓜能够存活下来，一个全是傻瓜的社会是稳定的。” 瓦格纳费力地把自己肥胖的身躯挪了一下位置，轻蔑地说。\n\n“你也是有关部门的一分子，瓦格纳先生。”阿尔特弥斯一边往茶杯里续了些热水，一边抬头轻声说道。\n\n“阿尔特弥斯小姐，我只是一个能比普通人多使用几个敏感词汇的普通人而已。”\n\n大家都笑了起来。阿瓦登从来没有见过这么多的人说这么多的话，这是前所未有的奇妙经验。他惊讶地发现自己居然很快就融进了这个小圈子里，隔阂与陌生感很快就消失了；同时消失的还有胸闷与头晕等习惯性的毛病。\n\n很快话题就从说话会本身扩展到了更加宽泛随意的话题，阿尔特弥斯唱支歌，兰斯洛特说了几个笑话，杜拉丝则给大家讲了美国南部诸州的风土人情；瓦格纳甚至还唱了一段歌剧，虽然阿瓦登一个字也听不懂，但他一点也不吝惜掌声。在这个城市的某一个被屏蔽掉的角落里，五个不甘沉默的人正在享受着在这个时代视为奢侈品的事情——说话。\n\n“王二，你可曾看过《1984》？”\n\n阿尔特弥斯忽然问道，她就靠着阿瓦登坐下，阿瓦登摇摇头，反问道：“这是网络编号的一段么？”\n\n“这是一本书的名字。”\n\n“书？”阿瓦登听到这个名词，头摇的更大了。这是个古老的名词，在这个电脑技术非常发达的时代，网络可以承载一切信息，任何人都可以在网上图书馆查到电子版；因此有关部门认为实体书籍变成了一种没有必要存在的浪费，实体书也就逐渐消亡了。瓦格纳对此的评论是：“有关部门喜欢电子书籍的心情是可以理解的，电子书籍的话，只需要FIND和REPLACE两个命令就可以消灭掉全部不健康词汇，替一本书消毒；而实体书籍的校对与修订却是件旷日持久的工作。”\n\n“这是一本伟大的书，是旧世界哲人们对我们这个时代的预言。”阿尔特弥斯认真地说。“它很早以前就洞察到了肉的束缚与解脱，灵的束缚与解脱，这是说话会的基石。”\n\n阿瓦登不无惊奇地发现他的网络编号开头恰好是这这本书名字：19842015。\n\n“那么，该怎么样才能看到呢？”阿瓦登盯着阿尔特弥斯乌黑色的眼睛问。\n\n“我们也无法找到纸质版，网络图书馆不可能存在这样的书。”兰斯洛特摇摇头，然后重新露出笑容，左手向着杜拉丝摆了个请的姿势，“但我们的杜拉丝小姐应该为她的记忆力而自豪，她在很早已经有幸阅读过这两本书，并且能够记得里面的大部分文字。”\n\n“太好了，然后她写下来了，对吗？”\n\n“那太危险，这时代持有实体书是个大罪过，也容易让说话会暴露。我们只是在每次聚会的时候请杜拉丝小姐为我们背诵。既然是说话会，那么把这两个故事讲出来不是更名符其实吗？”\n\n大家都安静下来，杜拉丝站起来走到屋子中央，其他四个人坐在旁边看着她。阿瓦登不经意地把手搂在阿尔特弥斯肩上，后者微微朝这边靠过来，女性头发的幽香“咝咝”地划过他的鼻子，让他的心里一阵荡漾。屋子里非常暖和，他分不清这是花香还是阿尔特弥斯的味道。\n\n杜拉丝的声音并不高，不过却很清晰有力；她的记忆力确实惊人，不仅记得情节，包括一些细节和句子都可以复述下来。杜拉丝讲到了朱丽亚假装摔倒，然后偷偷递给温斯顿一张写着“我爱你”的纸条，绘声绘色，这让听众们都听的入神了，阿尔特弥斯听的尤其认真，以至于都没有注意到阿瓦登一直注视着她。\n\n“1984的作者预见到了专制的进步，却没有预见到技术的进步。”瓦格纳在杜拉丝停下来喝水的时候发表自己的评论，阿瓦登觉得他与外貌不太相称，是个很有洞察力的技术官僚。\n\n“在大洋国人们还可以靠传递纸条来偷偷表达自己的想法，但是现在不一样了。美国政府有关部门把我们全赶到了网上，而在网络技术发达的今天，我们即使想发一条短信都会被系统或者网管看的一清二楚，无从遁形。现实里呢，还有旁观者在。”瓦格纳在腿上敲了敲雪茄根部，“一句话，技术是中性的，但技术的进步会让自在的世界更自在，集权的世界更加集权。”\n\n“这句话说的很有哲学家的味道哟。”阿尔特弥斯冲瓦格纳挤了挤眼睛，从抽屉里取来一把饼干和曲奇散发给大家。\n\n“就好象同样是0和1，有的人就能写出工具软件，有人却拿那个编出恶性病毒？”\n\n阿瓦登想到一个类似的比喻，瓦格纳听了以后满意地打了个响指。\n\n“很不错的比喻，王二，就是如此，真不愧是程序员。”\n\n谈话持续了不知道有多久，杜拉斯看了一眼墙壁上的挂钟，连忙提醒谈兴正浓的四个人时间快到了。说话会不能持续很长时间，旁听者被屏蔽的越久，暴露的危险就越大。\n\n“那么好吧，我们就抓紧最后半个小时来完成今天的活动。”\n\n阿尔特弥斯一边说着，一边将桌子上的空杯子收走。兰斯洛特和瓦格纳也都站起身来，活动一下已经有些酸疼的肩膀和腰，只有杜拉丝坐在位子上没有动。\n\n“活动？还有什么活动？”\n\n阿瓦登奇怪地问道，说话会除了说话还有其他活动？\n\n“唔，对啊，我们还有其他活动。”阿尔特弥斯撩起额前的长发，对他妩媚一笑：“我们还会和对方完全交流。”\n\n“完全交流？”\n\n“就是intercourse”\n\n“………………”阿瓦登一下子变的脸色苍白，呼吸急促起来，仿佛胃里被灌进去零下三十度的寒风，他几乎不相信自己的耳朵。\n\n“说话会有说话的自由，也有选择与谁上床的自由。”阿尔特弥斯毫不羞涩地说，“我们互相谈话，然后选择合适的人做爱，就象我们选择我们喜欢的词汇说话一样。”\n\n兰斯洛特看阿瓦登很窘迫，走过去拍拍他的肩膀，慢慢地说：“当然，我们不会强迫任何人，这完全是在自愿的基础上。今天我还要早点回去照顾小孩，你们人数正好合适。”\n\n阿瓦登的脸色涨红，热的仿佛夏季的电脑CPU，他甚至不敢多看阿尔特弥斯一眼。他憧憬过女性很长时间，但如此接近还是第一次。\n\n还要回家去照顾小孩子的兰斯洛特向大家道别后就先行离去了，阿尔特弥斯将房间留给瓦格纳与杜拉丝，然后带着惶恐不安的阿瓦登来到了另外一间房间。这间显然是阿尔特弥斯的卧室，屋子里很简单，但却收拾的十分干净，在床上枕头旁还摆着一个手制的布娃娃，床单和窗帘都是粉红色的。\n\n最初的是由阿尔特弥斯主动开始的，丝毫没心理准备的阿瓦登只是被动地任她摆布。经过了几轮挑逗，阿瓦登才逐渐放开，任由潜藏在自己心内的原始欲望奔流出来，那种期待听到圆润女声的青春憧憬本来只是苦闷生活的意淫，而在今天它加倍实现了。很快这种憧憬与他在现实中被压抑的郁闷合流，转化成了猛烈的冲动，让他一次又一次与阿尔特弥斯融为一体。阿瓦登不知道这种冲动和他想大声说出“FUXKYOU, YOUSONOFBITCH”冲动有什么不同，不过现在不是考虑这个的时候，他现在脑子里想的只有尽情地、全无束缚地让自己释放激情，完全没有任何束缚。\n\n强烈的刺激一波波地冲击着兴奋中枢，最终一阵快感浪潮在狂暴洋面扬起头来，达到了一个极高的顶端。阿瓦登在那一瞬间感觉到了前所未有的自由，那种轻盈无比的自由，以及因自由而生的快乐与疲惫。浑身是汗的他喘息着倒在了阿尔特弥斯身上，一阵舒畅的倦意如潮水般淹没了他的身体……\n\n……当他醒来的时候，发现阿尔特弥斯躺在自己身边，赤裸的身体好象一尊白玉雕像，睡姿恬美静谧。他侧过身子去，慵懒地打了个呵欠，然后阿尔特弥斯睁开了眼睛。\n\n“很舒服，对不对？”她问道。\n\n“是啊……”阿瓦登不知道该说什么好，他顿了顿，犹豫地说道：“你以前和兰斯洛特、瓦格纳他们也……呃，我是说，象刚才那样子过吗？”\n\n“是的。”阿尔特弥斯温柔地回答，她半支起胳膊，长发从肩膀披到了胸口。她的大方坦白反而让阿瓦登有些不知所措。屋子里出现了一段时间的沉默，然后阿尔特弥斯忽然开口问道：\n\n“还记得今天杜拉丝讲的那段故事吗？女主角偷偷递给男主角写着“我爱你”的纸条。”\n\n“唔，还记得。”阿瓦登回答，很高兴终于能从那个拙劣的话题摆脱出来了。\n\n“在有关部门的健康互联网络词汇列表里，没有爱这个字呢。在我们这个时代，我爱你也是一个敏感词汇，被屏蔽掉了。”阿尔特弥斯的眼神里似乎是感慨，又象是失落。\n\n“我爱你。”阿瓦登不禁脱口而出，他知道在这间屋子里可以说出任何自己想说的话，不必顾忌。\n\n“谢谢你。”\n\n阿尔特弥斯听到之后只是笑了笑，起身穿上衣服，催促阿瓦登时间差不多了。阿瓦登有些失望，因为她没有预期反应的热烈，仿佛他刚才说的只是有些无关紧要的东西。\n\n这时候杜拉丝和瓦格纳已经离开了，屋子里只剩他们两个人。阿尔特弥斯把他送到门口，将旁观者交给他，然后叮嘱他说：“记得在外面绝对不要提及说话会的任何事情或者任何人，我们在说话会以外的地方是完全不认识的。”\n\n“我记住了。”阿瓦登回答，然后转身要走。\n\n“王二。”\n\n阿尔特弥斯忽然叫道，阿瓦登连忙转身，还没等他反应过来，两片柔软温暖的嘴唇忽然贴到了他的双唇，然后是一个细切的声音在耳边响起：“谢谢你，我爱你。”\n\n阿瓦登觉得眼睛有些湿润，他戴上旁观者，推开门，重新步入到那一片令人窒息的世界中去，但他此时已与来时的心境大不相同。\n\n此后阿瓦登的精神面貌明显有了改善。他谨慎地享受着这种秘密集会的乐趣，并且乐在其中。每一周或者两周，他们五个人都会在周日秘密地举行说话会的活动，聊天，唱歌或者听杜拉丝讲1984的故事。阿瓦登同阿尔特弥斯又“完全交流”了几次，偶尔他也会跟杜拉丝“交流”。他有了两个身份，一个是现实中和网上的阿瓦登，编号19842015，还有一个是说话会里的王二。他很享受这个名字，觉得这就是自己另外的一个人生。\n\n有一次集会，他们谈到了敏感词汇的问题。阿瓦登记得很早的时候——他对这方面的记忆有点模糊——有关部门给出的是一份敏感词汇列表，由网站的内部管理人员秘密参考使用，他对如何演变成现在的局面大惑不解。那一天瓦格纳带了一瓶葡萄酒，兴致很高，于是索性给他们讲了讲“屏蔽”的进化史，身为网管的他经常可以接触到这些资料。\n\n在最开始美国政府只是单纯地屏蔽掉敏感词汇，但很快他们就发现这样的措施根本没有用处。很多人会采取在词组中夹杂符号或者数字的方式来绕开系统检查；于是有关部门不得不将这些近似敏感词汇也一一屏蔽掉。然而众所周知，数字与符号之间的组合方式是近乎无限的，只要你有想象力，就完全可以组合出一个新的词组而且不失掉他的原意。比如说“politic”这个词，就有“politi/c”、“政polit/ic”、“pol/itic”等近乎无限种表达方式。\n\n当有关部门意识到这个问题时，他们采取了新的策略。既然无法辨识词组，那么就用单词屏蔽。这一举措在一开始是奏效的，违规交谈的人显著减少，但很快人们就发现可以用同音字或者谐音的方式来继续表达自己的危险思想。即使有关部门封掉全部敏感词汇的同音字，也无济于事，思想活跃的美国人充分发挥了自己的想象力，使用隐喻，借代、类比、引申及其他修辞方法，或者将一个敏感词用数个不敏感的字来代替。人类的思维方式要比电脑开阔许多。电脑屏蔽掉一条路，他们还会有更多的路可以选择。\n\n这一场水面以下的角力看起来似乎是美国大众要取得胜利。这时候，一个具有逆向思维精神的人出现了。他的身份不明。有人说他是有关部门的主管；也有人说他是因过度使用敏感词汇而被捕的危险人士。无论他是谁，总之整个局面被扭转过来。他向有关部门建议，不再告诉大众禁止说什么，而是规定他们只能说什么，用什么方式去说。有关部门很快就心领神会，制订了新的规章制度：取消了敏感词汇列表，取而代之的是互联网络健康语言列表，并把这举措推广到了日常生活中的语言屏蔽系统中去。\n\n这一次，大众终于处于下风。以往他们与有关部门尽情地在网络与现实中捉着迷藏，而现在他们却被有关部门扼住了咽喉。这样一来，有关部门可以有效率地掌握住言论，因为整个语言的框架都被彻底控制了。在有限的空间内，大众几乎是无计可施。\n\n尽管如此，大众还是不屈不挠地将这场战争——或者说游戏——继续下去，他们挑选健康词汇列表中的合法字眼来表达不合法的意思：两个连续的“稳定”意思就是“反对”，“稳定”加“繁荣昌盛”则暗示“屏蔽”。美国政府不得不对这一动向保持着警惕，并日复一日地将更多的词汇从健康词汇列表里删掉，禁止大众使用。\n\n“当然，这场战争会持续下去的。只要世界上还存在着两个不同的字或者词组，那么就可以继续自由交流——你知道莫尔斯电码吧？”\n\n瓦格纳说到这里，拿起茶杯一饮而尽，满意地打了一个嗝。\n\n“可是，这场战争的代价就是语言的失落。表达能力会越来越贫乏，越来越淡而无味，人们会越来越倾向于沉默，这对有关部门反而是好事。”兰斯洛特摆出一副忧虑的表情，有节奏地用指关节敲击着桌面，“这样一来，岂不就等于是大众的自由意识将语言推向死亡的边缘？真讽刺啊。按照这个趋势，有关部门是不会败的，他们会笑到最后。”\n\n“不，不，笑这种情感他们是不会了解的。”瓦格纳淡淡地回答。\n\n“我倒是觉得，美国是一直处于恐惧的情感之中呢，生怕人们掌握了太多的词汇，表达出太多的思想，变的难以掌握。”阿尔特弥斯说完摆出一副她在上班期间冷若冰霜的呆板脸孔，学着僵硬的腔调喊了一句：“营造健康的网络环境，美国万岁！”\n\n杜拉丝、兰斯洛特与瓦格纳都哈哈大笑，唯一没笑的是王二（阿瓦登）。他对于兰斯洛特刚才的那句话始终耿耿于怀：大众与有关部门的对抗，其最终结局就是语言的消亡。那么他们现在这个小小的说话会，也只不过是在一列开向悬崖的列车里关上窗帘，享受坠毁前最后的宁静罢了。\n\n不过他没有说出口，因为这太煞风景了。阿瓦登不希望破坏说话会的气氛，这对他很重要。\n\n从说话会回到家里，阿瓦登躺在行军床上，双手枕着脑袋，陷入了沉思。自从加入说话会以后，他变的比以前更容易陷入思考。有时候他想的是这个社会、这个互联网络或者这座城市中存在的荒谬性；有时候他想的是自己的生活；还有时候他想的是阿尔特弥斯。他不知道是不是在一个压抑的世界里，人的情感会变的格外强烈，他现在陷入对阿尔特弥斯的迷恋无法自拔。阿瓦登一直很羡慕杜拉丝讲的《1984》里面的温斯顿，他和朱利亚有一间两个人独处的小屋，一个只属于他们两个人的小世界。\n\n他在与阿尔特弥斯“完全交流”的时候曾经吐露过自己的心声，阿尔特弥斯没有直接回答，而是表示两个人的关系无法再比说话会更近一步——维持现在的状态就已经是个人行为的极限，有关部门可不会一直打瞌睡。“我们只能把感情生活压缩在每周一次的说话会活动里，这已经很奢侈了。”她对他说，同时温柔地抚摩他的胸膛。“只有在说话会里，我们才是阿尔特弥斯和王二。而在其他时间里，你是19842015，而我是19387465。”\n\n对此，阿瓦登只能发出一声轻轻的叹息，确实他不该奢求更多。\n\n除了感情，发生变化的还有互联网络。自从加入说话会以后，阿瓦登逐渐发现互联网表面下潜藏的一些东西。正如瓦格纳在一次活动的时候指出，普罗大众与有关部门的战争从未结束，总会有思想和言论从严厉管制的缝隙中流泻出来。阿瓦登发现，在完全公式化的EMAIL与网络论坛中其实隐藏着不少耐人寻味的细节，就好象那个title一样，存在着各式各样的密码与隐藏寓意。这些东西出自不同人的手里，样式和破译方式都不同，阿瓦登不知道那些密码背后隐藏的是怎样的内容。不过有一点可以确知的是，说话会并不是唯一的一个地下集会，瓦格纳说的对，始终还是有人在试图用“健康”词汇表达“不健康”思想。\n\n讽刺的是，给阿瓦登感触最深的，是有关部门的管制。以往他只是模糊地感觉到自己被绑缚起来，现在他能清晰地看清这种束缚与压抑的脉络，以及加诸在自己身上的各种手段。在小小说话会中享受到的自在让他更加深刻地感受到在宽阔现实中的不自在。\n\n“FUXKYOU, YOUSONOFBITCH！”\n\n每一次的聚会，三位男士都会轻蔑地一起高喊这一句粗话。他们清楚这不会给有关部门带来什么不良影响，不过这确实很痛快。\n\n这一周，阿瓦登特别地忙碌，他的同事因为不明原因而被屏蔽掉了，这样一来整个项目就全压在了他一个人身上。这项目是为有关部分设计一种软件，用来控制大功率主动式“旁观者”的能源分配控制。软件很复杂，他不得不每天在电脑前工作十几个小时，只有在身体实在支撑不住的时候才停下来随便吃一点东西，喝一口纯净水，困了就躺在旁边的行军床上睡上一觉，爬起来继续工作。屋子里满是浑浊的烟味与袜子脏衣服的酸臭味，阿瓦登就在这种环境下蓬头垢面地敲着键盘，并不时揉揉满布血丝的眼睛。\n\n偏偏在这个时候屋子里的暖气坏掉了。洋灰色的暖气片从昨天开始就变的冰凉，不再有热水流动。阿瓦登检查了一下，发现并不是管道问题，而且邻居们也碰到同样的事，看来是供热系统出了问题。这一变故的正面影响是稍微淡化了屋子内的酸臭味，负面影响是整个屋子变的有如冰窖一样。紧闭的窗户和门能挡住寒风，却挡不住寒冷，低温让本来就寒酸的房间更笼罩上一层霜气。无论是那把木椅还是行军床都象是冷酷的冰雕，屋子里唯一还有些热气的就只剩下电脑。阿瓦登不得不披上所有的御寒衣物，蜷缩在床上，把电脑的散热口对准自己。\n\n有关部门宣布“供热”和“暖气”暂时也被列入敏感词汇，于是阿瓦登没办法写信向供热部门询问，只好静待，除了用来敲键盘的指头以外，尽量保持全身一动不动，以节约热量。在停止供暖后的第四天，暖气片里终于传来“哗啦哗啦”的声音，带着热气的水开始流动，屋子里恢复了温暖，“供热”和“暖气”又可以恢复使用了。于是EMAIL与网络论坛上全都是“庆祝有关部门恢复供应暖气，急人民之所急”的帖子，EMAIL新闻组里也全是类似主题。\n\n不过这对阿瓦登来说太晚了，他生了病，感冒，而且是重感冒。他面色苍白，全身软弱无力，头疼的象是被一枚达姆弹射入头部，只能躺在床上等医生。医生来到他家里，给他做了两三次点滴，喂了一些叫不上名字的药片，叫他静养。这一场病足足持续了数天，他不得不放弃参加这一星期的说话会，身体状况实在太差了，阿瓦登甚至怀疑自己搞不好会因此而死掉。\n\n阿瓦登躺在床上，心里懊悔不已，说话会是他唯一的乐趣，现在他却没办法参加。他把头蒙在被子里胡思乱想，瓦格纳这一次会带什么特别的东西来呢？兰斯洛特有没有把两个孩子也领过来？还有阿尔特弥斯，他没参加的话，她会和谁“完全交流”呢？瓦格纳还是兰斯洛特？他还想到了杜拉丝，上一次的聚会里，杜拉丝讲到了温斯顿在秘密幽会的屋子里对朱丽亚说“我们已经死了”，朱丽亚附和着说“我们已经死了”，这时候第三个声音说道“你们已经死了。”\n\n杜拉丝就讲到这里，就停住了。阿瓦登急切地想知道接下来发生了什么，第三个声音是谁，是党吗？温斯顿和朱丽亚是否会被捕，他们会有什么样的下场？不光是他，阿尔特弥斯也很希望知道后续情节的发展，不过她并没有去追问杜拉丝。\n\n“让这成为一个悬疑，这样接下来的一周我们的生活都会在期待的乐趣中度过。”她对阿瓦登说，然后两个人继续沉溺于intercourse的快乐。\n\n“也许他们都会死。”阿尔特弥斯在交流结束后，看着天花板说。\n\n“也许那只是奥布林的声音，他去探望他们。”阿瓦登安慰她道，但是他的心里也不确定。\n\n阿瓦登的病持续了十天，然后他终于痊愈了。他痊愈后的第一件事就是从床上爬起来，然后去看墙上的日历：这一天恰好是星期日，说话会活动的日子。阿瓦登已经缺席了一周，这已经令他如饥似渴，甚至做梦都在和他们一起喋喋不休地说着话——所幸他并没有说梦话的习惯，所以24小时工作的旁观者并没发出任何警报。\n\n阿瓦登简单地洗了一下脸，用一把有些生锈的剃刀沾着肥皂仔细地刮掉脸上粗硬的胡须，然后咕噜咕噜地刷了刷牙齿，用手和毛巾沾着热水将自己蓬起的乱发压下去。因为生病，有关部门发了一些补贴给他，其中包括两块羊角面包、两瓶姜汁啤酒和一份精制砂糖。他将这些东西都用塑料布仔细包好，揣到宽大的军大衣里，打算带到说话会上去与大家分享。\n\n今天的天气和往常一样地冷，阿瓦登把自己裹在大衣里，登上前往效率大楼的公共汽车。一路上车厢里的广播重复着“营造健康的互联网络”以及一些优秀网络用户的先进事迹；车厢前面的电子屏幕不断滚动显示着最新的健康词汇列表，一个旁观者自车顶垂下来睥睨着车内的每一个表情呆滞的人。阿瓦登坐在最后一排，望着窗外不断向后移动的建筑物与枯黄的树木发呆。\n\n车子很快就到达了辛普森大楼附近的车站，阿瓦登下了车，把手放到怀里摸了摸塑料布包着的食物，朝着大楼走去。他在半路无意中抬起头，忽然一阵冰冷的寒流刺入他的胸腔，迫使他停住了脚步。\n\n有什么地方不对劲！\n\n他看到了效率大楼的第五层阿尔特弥斯家的窗户发生了一些奇怪的变化。以前阿尔特弥斯家面向大街的窗户总是挂着粉红色的窗帘，而现在窗帘则被扯到了两边，窗户大开，用肉眼可以勉强看到窗玻璃和屋子里雪白的墙壁。假如今天有说话会的话，阿尔特弥斯绝对不会把有屏蔽效果的窗帘打开。而且打开窗户这件事也绝不寻常，在这个城市里的室外空气十分浑浊，几乎不会有人会去开窗换气。\n\n也就是说，今天并没有说话集会召开，而是发生了另外一些事情。阿瓦登望着那窗户，心情开始变的有些慌乱，他把手从兜里掏出来，叼起一支香烟，把身体靠在一根电线杆旁故做镇静，以免被行人怀疑。究竟说话会发生了什么，为什么这一周停办了呢？要知道，只要还有复数的成员能够出席，说话会就会一直办下去，难道说瓦格纳、兰斯洛特、杜拉丝和阿尔特弥斯同时无法出席？这种概率实在太小了。阿瓦登一边这样想着，一边向四周不安地张望。忽然他看到了一样东西，一个念头霎时占据了他的全部心灵，让他几乎眩晕过去。\n\n“说话会本周不会有了，以后也不会有了。”阿瓦登嘴唇默默地蠕动着，面如死灰。\n\n他看到在街道内侧一处不起眼的地方隐藏着一个类似雷达天线的东西，其造型很象是两个背部贴在一起的大碗。阿瓦登心里清楚这是什么东西：这正是他负责软件设计的大功率主动式“旁观者”，这造型他很熟悉。这装置可以主动发射电波去探测人们的声音，并检查其中是否存在敏感词汇。\n\n这样的装置居然就安放在阿尔特弥斯家附近，那么就等于说话会完全暴露在了有关部门的监控之下。主动式旁观者的强大刺探电波会轻易刺穿她家中的铅质窗帘，把所有成员的话原封不动地传到有关部门耳朵里。\n\n这是一个划时代的发明，这一技术的突破意味着有关部门可以不再被动地等待警报，可以主动出击去刺探人们在任何时间任何地点说的任何话语。阿瓦登可以想象接下来会发生什么，阿尔特弥斯他们的每一句话都被有关部门记录下来，会有机器统计出到底有多少违禁词汇被他们使用过；然后联邦警察会冲进她的屋子，将正在聚会的成员们都带走，只留下搜查过后空荡荡的房间和窗户。\n\n阿瓦登想到这里，心如刀绞，他一点也不为自己的侥幸逃脱而感到幸运。他的胃袋翻腾起来，一种恶心的感觉从胃里直接升到嘴边，让他想吐，却又不能吐——因为“呕”也是个敏感词汇；大病初愈的孱弱身躯无法承受这种打击，象害了风寒一样颤抖起来，几乎站立不住。\n\n他不敢继续朝前走去，仓皇地转过身去，登上另外一辆公共汽车，把嘴闭的更紧了。等阿瓦登回到自己家楼下，看到楼房附近另外一架新的主动式旁观者正在兴建中，漆黑的天线在半空舒展开来，仿佛一面巨大的蜘蛛网。看来有关部门已经着手在整个纽约市部署这种新兴高科技产品。\n\n他不敢驻足观看，低着头从那巨大装置旁边走过，一路不停地走回家，然后把自己的脸紧紧地压在枕头里，却不敢哭出声音来，连一句“FUXKYOU, YOUSONOFBITCH”都不能说。\n\n从那以后，阿瓦登的生活回到了普通状态——就是说和原来一样沉滞、压抑、欠缺激情，健康向上，缺乏低级趣味。兰斯洛特说过：“战争的结果就是，大众的自由意识会将语言推向死亡的边缘”，现在看来，他的预言是很准确的：说话会的覆灭，导致“说话”、“歌剧”、“完全”、“交流”几个词先后被剔除出了健康词汇列表，成为敏感词汇。\n\n另外，虽然阿拉伯数字还能用，但“1984”这一个数字组合也被屏蔽掉了，这让包括阿瓦登在内的程序员在编写程序时不得不谨慎地检查数字是否违规，这额外增加了很多工作量，让他更加疲惫。\n\n阿瓦登不是没有担心过，也许在某一天的深夜，他就会忽然接到一封EMAIL，让他留在家里不要动，不要试图在网络做任何动作；接着电话会响起，电子女声会把这一要求重复再重复，直到警察打开他家的大门，把他带去未知的地方，那里有未知的命运等待着他。《1984》后面的情节发展阿瓦登始终不知道，唯一知道的杜拉丝已经彻底失踪了，所以温斯顿和朱丽亚的结局始终是个谜；就好象兰斯洛特、瓦格纳、杜拉丝和阿尔特弥斯的结局一样，也不从得知。其实这两件事对于阿瓦登来说没什么本质性的区别，所以它们也可以看做是同一个谜。\n\n其实他最担心的，是阿尔特弥斯。每次想到这个名字，阿瓦登就难以抑制心中的郁闷。她究竟会怎么样，彻底被屏蔽掉吗？如果是那样，那么她在这世界上遗留下来的唯一痕迹，就是一个程序员记忆里的假名而已了。\n\n说话会消失后三个星期，仍旧风平浪静，没有任何人来找过阿瓦登，他也没收到过任何类似内容的EMAIL，阿瓦登一直在想，也许是他们没有吐露出自己的下落，也可能是因为他们根本不知道——他们认识的只是一个叫王二的程序员。这个城市里有数以千计的程序员，而王二是个假名。\n\n因此，生活一如既往地平静。不，确切地说，还是有一点不同的，那就是互联网络健康词汇列表：那上面的词组消失的速度比以前要快的快，每小时每分钟都有词与单字飞快地在名单上消失，阿瓦登不得不花上大量时间去更新列表，以跟紧当前形势。\n\n与词汇列表更新速度相对的，EMAIL和网络论坛上的东西越来越乏味。因为人们不得不用极有限的词去表达广泛的意思，大家都变得寡言少语。就连那些秘密的暗语和联系方式也少了许多；整个网络就象是前些天阿瓦登家里出了问题的暖气片一样：虽然名义上是给人带来温暖的东西，但却变的冰冷、僵硬，让人如坠冰窟。\n\n这一天，阿瓦登从电脑前抬起头来，他看了看窗外迷茫的灰色天空，胸口一阵抽搐，不由得痛苦地咳了一声。他拿起塑料杯，将杯子里的纯净水一饮而尽，杯子丢进同样是塑料质地的垃圾桶里，发出钝钝的撞击声，他觉得自己的脑子也是一团垃圾，举起手敲了敲，果然发出同样钝钝的撞击声。\n\n然后他拿起大衣，戴上墨绿色的护目镜，走出门去。阿瓦登没带便携式的旁观者，那东西已经不需要了，城市里到处都是主动式的旁观者，随时监听是否有违禁词汇的存在。整个纽约现在就象是互联网络一样，被有关部门营造成十分健康。\n\n阿瓦登这一次外出是有正当理由的，他决定去取消网络论坛服务，这服务已经用不着了，因为无论EMAIL，新闻组，BBS论坛还是其他什么现在全部都变成了一样的东西。\n\n从日历来说现在应该是春季，但外面还是很冷，高大的灰色建筑矗立在平地上，仿佛绝对零度下的石林。大团大团的风裹着黄沙与废气穿行其间，风沙无处不在，让人置身其中而难以摆脱。阿瓦登把手揣进兜里，脖子缩进领口，畏缩着向网络部的大楼走去。\n\n忽然，他停下了脚步，惊讶地站在原地无法动弹。他看到阿尔特弥斯正站在前面的路灯下，穿着黑色的制服。可是她的变化有多么大啊，面容象是老了十岁，满脸都是衰老的皱纹，年轻的活力荡然无存；她听到脚步声，转过头来，两个乌黑的大眼睛显得异常空洞，目光越过阿瓦登延伸到远方，没有一个明晰的焦点。\n\n阿瓦登万万没有想到会在这个时间这个地点碰到她，这让他已经沉寂已久的心灵泛起了几点火花，可惜他迟钝的神经已经无法表达出“激动”这一个简单的情感了。两个人互相对视了一阵，他终于木然走到她身边，张了张嘴唇，想对她说些什么。但是他掏出今天新发布的健康词汇列表，发现上面是一片空白——终于连最后一个词组也被有关部门屏蔽了。\n\n于是阿瓦登只好保持着沉默，默默地与面无表情的她擦肩而过，继续向前走去。他的身影逐渐融入同样安静的灰色人群之中，整个城市都显得寂静极了。","source":"_posts/2017.07.01.md","raw":"---\ntitle: 寂静之城\ncategories: 小说 \n---\n## 作者:马伯庸 \n\n\n\n\n----------\n   \nAnd in the naked light I saw ten thousand people, maybe more.\n\nPeople talking without speaking, people hearing without listening.\n\nPeople writing songs that voices never shared, no one dared disturb the\n\nsound of silence.\n\n--- The sound of silence\n\n美利坚合众国，2015年，纽约。\n\n当电话响起来的时候，阿瓦登正趴在电脑前面睡觉。电话铃声十分急促，尖锐，每一次振动都让他的耳膜难受好久。他揉了揉干涩的眼睛，十分不情愿地爬起来，觉得脑子沉滞无比。\n\n其实他的脑子一直就很沉滞，这种感受既然是生理上的也是心理上的。他身处的房间很狭窄，空气不很好，唯一的两扇窗户紧闭着——即使打开窗户也没用，外面的空气更加浑浊。这是一间大约只有三十平米的小屋子，屋子墙壁上泛黄的墙纸有好几处开始剥落，天花板上的水渍渗成奇怪的形状；一张老式的军绿色行军床摆在墙角，床腿用白漆写着编号；紧挨着行军床的是一张三合板制成的电脑桌，桌上摆着一台浅白色的电脑，机箱后面五颜六色的电线纠缠在一起，把它们自己打成一个古怪的死结，杂乱无章地蔓延到地板与墙角，仿佛常春藤一样。\n\n阿瓦登走到电话前，慢慢坐到地板上，目光呆滞地盯着电话，手却没有动。这部古怪的东西是老式的按键式电话，大概是十几年前的款式，这是阿瓦登有一次去费城出差时偶尔在一家杂货店里买到的；他拿回家以后稍微修理了一下，发现居然还能用，这让他当时小小地兴奋了一阵子。\n\n电话继续在响着，已经是第七声。阿瓦登意识到自己不得不去接听了。于是他弓下腰，用两个指头拈起电话，慢慢把电话放到耳边。\n\n“请说出你的网络编号？”话筒里传来的声音并不急噪，事实上它也不带其他任何的感情色彩，因为这是电脑合成的人工智能语音系统。\n\n“19842015”\n\n阿瓦登熟练地报出一连串数字，同时开始觉得胸有些更闷了。说实话他并不喜欢这些空洞的电子声音，他有时候想，假如打过电话来的是一位声音圆润的女性该多好。阿瓦登知道这是一种不切实际的幻想，不过这幻想会让他的身体得到几秒钟的舒缓。\n\n话筒里的声音仍旧在继续着。\n\n“关于你在十月四日提交的网络论坛用户注册申请已经被受理，经有关部门审查后确认资格无误，请在三日内持本人身份证件、网络使用许可证及相关文件前往办理登记手续，并领取用户名及密码。”\n\n“知道了，谢谢。”\n\n阿瓦登谨慎地选择词语，同时努力挤出一副满足的微笑，好象话筒的另一侧有人在看着自己一样。放下电话，阿瓦登先是茫然地盯着它看了大约两分钟，然后站起来活动一下手腕，坐回到电脑前面，缓慢地推动了一下鼠标。\n\n电脑屏幕“啪”地一声亮了起来，显示出一个登陆的界面，还有一行英文：“请输入你的网络编号和姓名。”阿瓦登将那八位数字敲进去，又输入了自己的名字，点击“登陆”。随即机箱的指示灯开始频繁地闪动起来，整个机器发出细微的噪音。\n\n每一个使用互联网的人都有一个网络编号，没有这个编号，就无法连接进互联网络。每一个编号都是独一无二的，每个人只有一个；这是使用者在网上的唯一代号，既不能修改，也不能取消。这些编号分别对应着使用者身份证上的名字，因此19842015就是阿瓦登，阿瓦登就是19842015。阿瓦登知道有些记忆力不好的人会把自己的编号印在衣服的后面，那看起来颇为滑稽，也容易引发一些不正当的联想。\n\n有关部门说使用网络实名制是为了规范网络秩序方便管理，杜绝因匿名使用网络而产生的一系列重大问题和混乱。阿瓦登不太清楚那一系列重大问题会是什么，他自己没试过用假名上网，他所认识的任何人里也不曾有人尝试过——事实上，从技术角度来说，他根本没办法匿名登陆互联网络，没有编号就没有权限上网，而编号则连接着他的详细档案，换句话说，没人能在网上隐藏自己。有关部门把这一切都考虑的很周详。\n\n“有关部门”，这是一个语意模糊、但却有着权威与震慑力的词组。它既是泛指，又是确指，其所涵盖的意义相当广泛。有时候，它指的是为阿瓦登颁发网络编号的美国联邦网络管理委员会；有时候它是将最新通告及法规发到阿瓦登EMAIL信箱的服务器；还有时候它是监察网络的FBI特属网络调查科；总之一句话，有关部门是无处不在，无职不司的，总会在适当的时候出现，给予指导、监控或者警告，无论你是在网上还是网下。\n\n简直就象是老大哥一样无微不至。\n\n电脑仍旧在持续运转着，阿瓦登知道这得花上一阵子。这台电脑是有关部门配发给他的，具体型号和配置阿瓦登并不清楚，机箱是被焊死的，无法打开。于是他拿出一小瓶清凉油，用右手小拇指的指甲挑出一点抹在自己的太阳穴，然后从脚下堆积如山的杂物里翻出一个塑料杯子，从桌子旁的饮水机里接了半杯蒸馏水，就着一片镇痛片一饮而尽。蒸馏水穿过喉咙和狭长的食道滑进胃里，空泛的味道让他有些恶心。\n\n音响里忽然传来一阵美国国歌的旋律，阿瓦登放下杯子，重新把目光投到电脑上去。这是已经连入互联网络的标志。屏幕上首先跳出来的是有关部门的通告，白底黑色四号字，里面陈述了使用互联网的意义以及最新的规章制度。\n\n“缔造健康的互联网络，美国万岁！”\n\n音响里传来激昂的男性呼声，阿瓦登不大情愿地跟着大声念了一遍。“缔造健康的互联网络，美国万岁！”\n\n这段呼号持续了三十秒钟，然后消失，取而代之的是写着“缔造健康的互联网络”标语的桌面背景。另外一个窗口慢慢浮上开，上面开列出几个选项：工作、娱乐、电子信箱和BBS论坛。其中BBS选项呈现灰色，说明这项功能还没有开通。\n\n整个操作系统简洁明了，这台电脑的浏览器没有地址输入栏，只是在收藏夹里有几个无法修改的的网站地址。理由很简单，这些网站都是健康向上的，假如其他站点和这些网站一样，那么只保留这些网站就够了；假如其他站点与这些网站不一样，那么就是不健康的，是低级趣味，不能保留。这是有关部门精心设计的，是为了公民的精神健康着想，生怕他们受到不良信息的侵染。\n\n阿瓦登首先点开了“工作”，一连串和他工作相关的站点列表与相关软件在电脑上显示出来。阿瓦登是一名程序员，他每天的工作就是根据上级的要求编写程序。这份工作很无聊，不过可以保证他有稳定的收入。他不知道自己的源代码会被用到哪里去，上级也从来没有跟他说过。\n\n他打算继续昨天的工作，但是很快发现自己很难继续下去。阿瓦登觉得今天的情绪比以前要烦躁，无法集中精神，大脑还是很呆滞，胸口仍旧发闷。他试图娱乐自己，但是他发现“娱乐”选项里只有纸牌与挖地雷，根据有关部门的说法，这是两个健康的游戏，没有暴力，没有色情，不会让人产生犯罪冲动，也不涉及任何政治色彩。据说美国境外也是有互联网络站点的，不过无法连上去，因为本国的互联网络自成格局，独立自主，普通人无法直接连接到国外——IE浏览器没有地址栏，就算知道地址也没有用处。\n\n“您有一封新邮件。”\n\n系统忽然跳出来提示，阿瓦登终于找到了可以暂停工作的理由，他很快移动鼠标到电子信箱的选项上，点开，很快一个新的界面出现了。\n\n“To: 19842015\n\nFrom：10045687\n\nSubject: 模块、已经、完成、当前、项目、是否、开始。”\n\n阿瓦登微微地叹了一口气，觉得有些失望。每一次他收到新的电子邮件，都希望能够有一次新鲜的刺激来撞击他日益迟钝的脑神经，每一次他都失望了。其实他早就知道这一点，只不过他觉得保持期待至少能够享受到几秒钟快感。就好象他期待着打电话过来的是一个圆润温柔的女性声音一样。不给自己一些渺茫的希望，阿瓦登觉得自己迟早会疯掉的。\n\n这封信很简短，但是内容很充实。19842015是阿瓦登的网络编号，而10045687则是他的一位同事的编号，这种工作性质的信件通常都以编号相称。信的内容是几个不连续的英文单词，这是有关部门所提倡的一种电子邮件书写方式，因为这样可以方便软件检查信件中是否含有敏感词汇。\n\n阿瓦登打开回信的页面，同时另开了一个窗口，打开一份名字叫做“网络健康语言词汇列表”的TXT文档。这是有关部门要求每一位网民所必须使用的词汇。当他们书写电子邮件或者使用论坛服务的时候，都得从这个词汇列表中寻找适合的名词、形容词、副词或者动词来表达自己想要说的话。一旦过滤软件发现网民使用了列表以外的词，那么这个词就会被自动屏蔽，取而代之的是“请使用健康语言”。\n\n“屏蔽”是个专有名词，被屏蔽的词将不允许再度被使用，无论是在书信里还是口头都不允许。讽刺的是，“屏蔽”一词本身也是被屏蔽的词汇之一。\n\n这个列表是经常更新的，每一次更新都会有几个词在列表上消失，于是阿瓦登不得不费劲脑汁寻找其他词语来代替那个被屏蔽掉的词语或者单字。比如在以前，“运动”这个词是可以使用的，但后来有关部门宣布这也是一个敏感词汇，阿瓦登只好使用“质点位移”来表达相同的意思。\n\n他对照着这份列表，很快就完成了一封文字风格与来信差不多的EMAIL——健康词汇表迫使人们不得不用最短的话来表达最多意思，而且要尽量减少不必要的修辞，所以这些信件就好象是那杯蒸馏水一样，淡而无味，阿瓦登有时候想，他早晚也会和这些水和信一样腐烂，因为这些信是他写的，水是他喝的。\n\n接下来阿瓦登启动检查软件先扫了一遍，确保自己没无意中加入什么敏感词汇。等这一切都完成后，他按下了发送键，邮件被送出去了。\n\n阿瓦登没有留下备份，因为他的机器里没有硬盘，也没有软驱、光驱或者USB接口。这个时代宽带技术已经得到了很大发展，应用软件可以集中在统一的一个服务器中，个人用户调用时的速度丝毫不会觉得迟滞。因此个人不需要硬盘，也不需要本地存储，他们在自己电脑里写的每一份文档、每一段程序、甚至每一个动作都会被自动传送到有关部门的公共服务器中，这样便于管理。换句话说，阿瓦登所使用的电脑，仅仅具备输入和输出两种功能。\n\n完成了这封信后，阿瓦登再度陷入了软绵绵的焦躁状态，这是一个连续工作了三天的程序员的正常反应。这种情绪很危险，因为它让人效率低下精神低迷，而且没有渠道发泄。“疲劳”、“烦躁”以及其他负面词汇都属于危险词汇，如果他写信给别人抱怨的话，那么对方收到的将会是一封写满“请使用健康语言”的EMAIL。\n\n这就是阿瓦登每天的生活，今天比昨天更糟糕，但应该比明天还稍微好一点。事实上这个叙述也很模糊，因为阿瓦登自己并不清楚什么是“好一点”，什么是“更糟糕”。“好”与“坏”是两个变量，而他的生活就是一个定量，只有一个常数叫“压抑”。\n\n阿瓦登推开鼠标，把脑袋向后仰去，长长地呼了一口气。（至少“呼”这个字还没有被屏蔽）这是空虚的表现，他想哼些歌，但却又不记得什么，转而吹了几下口哨，但那听起来与一只生了肺结核的狗差不多，只得做罢。有关部门象幽灵一样充斥在整个房间里，让他无法舒展自己的烦闷。就好象一个人在泥沼里挣扎，刚一张口就被灌入泥水，甚至无法大声呼救。\n\n他的头不安分地转了几转，眼神偶尔撇到了摆在地板上的老式电话机，他忽然想到还必须要去有关部门申请自己的BBS论坛浏览许可证。于是他关掉“工作”和“电子邮件”窗口，退出了网络登陆。阿瓦登在做这些事的时候毫不犹豫，他很高兴能够暂时摆脱互联网络，在那上面他只是一串枯燥的数字和一些“健康词汇”的综合体。\n\n阿瓦登找出一件破旧的黑色呢子大衣，那件大衣继承自他的父亲，袖口和领子已经磨损的很严重，个别地方有灰色的棉花露出来，但还是很耐寒。他把大衣套到身上，戴上一副墨绿色的护镜，用过滤口罩捂住嘴。他犹豫了一下，拿起“旁听者”别在耳朵上，然后走出家门去。\n\n纽约的街上人很少，在这个时代，互联网的普及率相当地高，大部分事务在网上就可以解决，有关部门并不提倡太多的户外活动。太多的户外活动会导致和其他人发生物理接触，而两个人发生物理接触后会发生什么事则很难控制。\n\n“旁听者”就是为了防止这种事而发生的，这是一种便携式的语言过滤器，当携带者说出敏感词汇的时候，它就会自动发出警报。每一位公民外出前都必须要携带这个装置，以便随时检讨自己的言语。当人们意识到旁听者存在的时候，他们往往会选择沉默，至少阿瓦登是如此。有关部门正逐步试图让网络和现实生活统一起来，一起“健康”。\n\n这时候正是11月份，寒风凛冽，天空漂浮着令人压抑的铅灰阴云，街道两旁的电线杆仿佛落光了叶子的枯树，行人们都把自己包裹在黑色或灰色的大衣里面，浓缩成空旷街道上的一个个黑点飞快移动着。一层若有若无的烟雾将整个纽约笼罩起来，不用过滤口罩在这样的空气里呼吸将会是一件很有挑战的事情。\n\n距离上一次离开家门已经有两个月了吧，阿瓦登站在公共汽车站的站牌下，不无感慨地想，周围的一切看起来很陌生，泛黄，而且干燥。那是上一次沙尘暴的痕迹。不过沙尘暴这个词也已经被屏蔽了，因此阿瓦登的脑海里只是闪过那么一下，思想很快就转移到别的事情上去了。\n\n站在阿瓦登旁边的是一个穿着蓝色制服的高个男人。他先是狐疑地看了阿瓦登一眼，看到后者沉默地沉在黑色大衣里，他的两只脚交替移动，缓慢地凑了过去，装做漫不经心对阿瓦登说：\n\n“烟，有吗？”\n\n男人说，每一个字都说的很清晰，而且词与词之间间隔也足够长。这“旁听者”还没有精密到能够完全捕捉到每一个人语速和语调的程度，因此有关部门要求每一位公民都要保持这种说话风格，以方面检测发言人是否使用了规定以外的词汇。\n\n阿瓦登转过头去，看了他一眼，舔舔自己干裂的嘴唇，回答说：\n\n“没有。”\n\n男人很失望，又一次不甘心地张开嘴。\n\n“酒，有吗？”\n\n“没有。”\n\n阿瓦登又重复了一次这个词，他也已经很久没有收到烟和酒了，也许是缺货的关系吧，这是常有的事。不过有一点很奇怪，“旁观者”这一次却没有发出警报。以阿瓦登的经验，以往一旦烟、酒或者其他生活必需品发生短缺现象，这个词就会暂时成为被屏蔽掉的敏感词汇，直到恢复供给为止。\n\n这个男人看起来很疲惫，红肿的眼睛是这个时代的人们普遍的特征，这是长时间挂在网上的关系。他的头发蓬乱，嘴边还留着青色的胡子碴，制服下的衬衣领口散发着刺鼻的霉味。能看的出，他也很久不曾到街上来了。\n\n阿瓦登这时候才注意到，他的耳朵上空荡荡的，没有挂着那个银灰色的小玩意“旁听者”，这实在是一件严重的事情。不携带“旁听者”外出，就意味着语言不会再被过滤，一些不健康的思想和言论就有可能孳生，因此有关部门相当严厉地规定公民上街必须携带旁听者。而这个男人的耳朵旁却什么也没有。阿瓦登暗暗吃惊，一时间不知道是该去提醒还是装做没看到。他暗自想，也许向有关部门举报会更好。\n\n这时候那个男人又朝他靠近了一点，眼神变的饥渴起来。阿瓦登心里一阵紧张，下意识地向后退去。这难道是一次抢劫？还是说他是个压抑太久的同性恋者？那个男人忽然扯住他的袖子，阿瓦登狼狈地挣扎却没有挣开。出乎他的意料，那个男人并没有进一步的动作，而是大吼一声，用一种阿瓦登已经不太习惯了的飞快语速向他倾泻起话语来。阿瓦登被这突如其来的爆发弄的莫名其妙，不知所措。\n\n“我只是想和你多几句话，就几句，我很久没有说过话了。我叫斯多葛，今年三十二岁，记得，是三十二岁。我一直梦想有一套在湖边的房子，有一副钓鱼竿和一条小艇；我讨厌网络，打倒网管；我妻子是个可恶的网络中毒者，她只会用枯燥乏味的话叫我的网络编号；这个城市就是一个大疯人院，里面大疯子管着小疯子，并且把所有没疯的人变的和他们同样疯狂；敏感词汇都去他X的，老*受够了……”\n\n男人的话仿佛一瓶摇晃了很久然后突然打开的罐装碳酸饮料，迅猛，爆裂，而且全无条理。阿瓦登惊愕地望着这个突然狂躁起来的家伙，却不知道如何应对；更可怕的是，他发现自己居然对他产生了一点同情，那种“同病相怜”式的同情。男人的话这时候已经从唠叨变成了纯粹谩骂，全部都是最直抒胸臆的那种。阿瓦登已经有五、六年不曾说过这些脏话，最后一次听到这些也是四年前。有关部门认为这都有碍精神文明，于是全部都屏蔽掉了。\n\n而现在这个男人就在公众场合对着他大吵大嚷，似乎要将被屏蔽掉的敏感词汇一口气全倒出来。他的目光和手势并不针对任何人，甚至也不针对阿瓦登，更象是在一个人在自说自话。阿瓦登的耳膜似乎不习惯这种分贝，开始有些隐隐做痛，他捂着耳朵，拿不定主意是干脆逃掉还是……这时候，远处街道出现两辆警车，一路闪着警灯直直冲着这座公共汽车站而来。\n\n警车开到站台旁时，男人仍旧在痛骂着。警车门开了，涌出了五、六名全副武装的联邦警察。他们扑过去将那个男子按在地上，用橡皮棍痛打。男人两条腿挣扎着，嘴里的语速更快了，骂出来的话也越来越难听。其中一名警察掏出一卷胶带，“嚓”地一声扯下一条向男人的嘴贴去。男人在嘴被胶带封住之前，突然提高嗓门，冲着警察痛快无比地喊了一句：“FUXKYOU, YOUSONOFBITCH！”阿瓦登看到他的表情由疯狂变成享受，面带着微笑，似乎完全陶醉在那一句话所带来的无上快感和解脱感中。\n\n联邦警察们七手八脚地将男人送进了警车，这时才有一名警察走到了阿瓦登的跟前。\n\n“他，是，你朋友？”\n\n“我，不，认识。”\n\n警察盯了他一阵，取下他耳朵上的“旁观者”查看记录，发现他并没有提及任何敏感词汇，于是重新给他戴回去，警告他说那名男子说的全部都是极度反动的词汇，要求他立刻忘掉，然后转身押着那男子离开了。\n\n阿瓦登松了一口气，其实刚才他有一瞬间涌现出一种冲动，也想在这空旷的街道上大喊一声“FUXKYOU, YOUSONOFBITCH”那一定很爽快，他心里想，因为那男子说出这句话的时候表情很享受。不过他也知道，这也是妄想的一种，“旁观者”紧帖在耳朵上的冰凉感觉时刻提醒着他。\n\n街上很快就恢复了冷清，十分钟后，一辆公共汽车慢吞吞地开进站里，锈迹斑斑的车门哗啦一声打开，一个电子女声响彻整个空荡荡的车厢：“请乘客注意文明用语，严格按照健康词汇发言。”\n\n阿瓦登把自己缩进大衣，压抑住自己异样的兴奋，决定继续保持沉默下去。\n\n大约过了一个小时，公共汽车到了目的地。从破碎的车窗玻璃里吹进来的寒风让阿瓦登脸上挂起一层暗灰色的霜气，面部被风中的沙砾和煤渣刮的生疼。他听到电子女声报出了站名，就站起身来，象一条狗一样抖抖身上的土，走下车去。\n\n车站对面就是阿瓦登要去的地方，那是有关部门负责受理BBS论坛申请的网络部。这是一间五层的大楼，正方形，全水泥混凝土结构，外表泛灰。如果没有那几个窗户的话，那么它的外貌将与水泥块没有任何区别：生硬、死气沉沉，让蚊子和蝙蝠都退避三舍。\n\nBBS论坛是一种奇特的东西，从理论上来讲它完全多余，BBS的功能完全可以由EMAIL新闻组来取代，后者更容易管理和审查。而且申请使用BBS论坛资格不是件容易的事，申请人必须要通过十几道手续和漫长的审查才能有浏览资格，浏览资格三个月才会被允许在指定论坛发布帖子，至于自己开设BBS则几乎是不可能。\n\n因此真正对BBS有兴趣的人少之有少。阿瓦登当初之所以决定申请BBS论坛资格，纯粹是因为他那种模糊但却顽强的怀旧心态，就好象他从杂货店里买的那部老式电话一样。他也不知道自己为什么会自找麻烦，也许是为了给生活带来些刺激，还是说为了强调自己和曾经旧时代的那么一点点联系，也许两者兼有之。\n\n阿瓦登恍惚记得在他小的时候，互联网与现在并不太一样。并不是指技术上的不同，而是一种人文的感觉。他希望能通过使用BBS论坛回想起一些当年的事情。\n\n阿瓦登走进网络部的大楼，大楼里和外面一样寒冷，而且阴森。走廊里没有路灯，蓝白色调的两侧墙壁贴满了千篇一律的网络规章条文与标语，冰冷的空气呼吸到肺里，让阿瓦登一阵痉挛。只有走廊尽头的小门缝隙里流泻出一丝光亮，小门的上面挂着一块牌子，上面写的是“网络部BBS论坛科。”\n\n一走进这间屋子，阿瓦登立刻感觉到一阵温洋洋的热气。屋子里的暖气（或者是空调）开的很大，让阿瓦登冻麻了的手脚和脸麻酥酥的，有些发痒，他不禁想伸出手去挠挠。\n\n“公民，请您站在原地不要动。”\n\n一个电子女声忽然从天花板上的喇叭里传来，阿瓦登触电似地把手放下，恭敬地站在原地不同。他借这个机会观察了一下这间屋子。这屋子准确来说应该是一个狭长形的大厅，一道拔地而起的大理石柜台象长城一样将房间割裂成两部分，柜台上还装着一排银白色的圆柱形栅栏，直接连到天花板。屋子里没有任何装饰，没有观赏植物，没有塑料鲜花，甚至没有长椅和饮水机。\n\n“缔造健康的互联网络，美国万岁。”\n\n阿瓦登跟着声音重复了一遍。\n\n“请前往八号窗口。”\n\n电子女声的语调很流畅，因为这是电脑制作出来的，因此没有敏感词汇的限制。\n\n阿瓦登转头看到在自己右手边的不远处，大理石柜台上的液晶屏幕显示着八号的字样。他走过去，拼命抬起头，因为柜台实在太高了，他只能勉强看到边缘，而无法看到柜台另一侧的情形。不过他能听到，一个人走到柜台对面，坐下去，并有翻动纸张与敲击键盘的声音。\n\n“请把文件放入盒子里。”\n\n柜台上的喇叭传来命令。出乎意料，这一次在喇叭里的声音却变了。虽然同样冷漠枯燥，但阿瓦登还是能分辨出它与电子女声的不同——这是一个真正的女性的声音。他惊讶地抬头望去，却什么都看不到，柜台太高了。\n\n“请把文件放入盒子里。”\n\n声音又重复了一次，语气里带着一丝烦躁，似乎对阿瓦登的迟钝很不满。\n\n“是的，这是真正的女声……”阿瓦登想，电子女声永远是彬彬有礼不带任何感情色彩的。他把相关的电子身份证、网络许可证、网络编号和敏感词汇犯罪记录等一系列个人资料卡片一起放进柜台外的一个小金属盒子里，然后把盒子插进柜台上一个同样大小的凹槽中，关好门。很快他听到“唰”的一声，他猜测这也许是对面的人——也许是个女人——将盒子抽出去的声音。\n\n“你申请BBS服务的目的是什么？”\n\n喇叭后的女声浸满了纯粹事务性的腔调。\n\n“为了、提高、互联网络、工作效率、为了、缔造、一个、健康、的网络、环境，更好地、为、祖国、做出、贡献。”\n\n阿瓦登一字一句地回答，心里知道这只是一道官方程序，只需要按标准回答就可以。\n\n对面很快就陷入沉默，大约过了十五分钟，喇叭再度响起。\n\n“最后手续确认，你已经获得BBS论坛浏览权。”\n\n“谢谢。”\n\n“砰”的一声，金属盒子从柜子里弹了出来，里面除了阿瓦登的证件以外还多了五张小尺寸光盘。\n\n“这是有关部门核发给你的BBS论坛统一用户名与密码，BBS论坛列表、互联网BBS论坛使用指南及相应法规、以及最新健康网络词汇列表。”\n\n阿瓦登向前踏了一步，从盒子里将这些东西一股脑全拿出来，揣进大衣的大兜里。那些东西其实是可以全部放在同一张光盘里的，不过有关部门认为每一张光盘装一份文件有助于用户理解这些文件的严肃性和重要性，并产生敬畏。\n\n他心里盼望着那个喇叭能再说两句。让他失望的是，对面传来的是一个人起身并且离开的声音，从脚步声的韵律判断，阿瓦登愈发相信这是一名女性。\n\n“手续办理完毕，请离开网络部回到自己的工作岗位上。”\n\n甜美空洞的电子女声从天花板上传来，阿瓦登厌恶地抽动鼻翼，拿手揉了揉，转身离开这间温暖的大厅，重新进入到寒冷的走廊。\n\n在回家的路上，阿瓦登蜷缩在公共汽车上一动不动，顺利申请到BBS的使用权让他有些虚无缥缈的兴奋。他闭着眼睛，找了一个合适的角度躲开破窗而入的寒风，右手在兜里不断摩挲那一系列光盘，还在怀念着那一个神秘的女声。\n\n如果能再一次听到该多好，他不能抑制自己这样的想法，同时用拇指的指肚在光盘上轻轻地摩擦，幻想这几张光盘也曾经被她的手触摸过。他兴奋的几乎也想破口大骂一句“FUXKYOU, YOUSONOFBITCH”，真奇怪，那名男子的骂声在他的记忆里根深蒂固，并时不时不自觉地滑到唇边。\n\n忽然，他的手指在光盘上发觉到一丝异常的感觉。阿瓦登下意识地朝四周望去，确认周围一个乘客也没有后，他小心翼翼地把光盘全拿出来，就着窗外的光亮仔细端详。\n\n阿瓦登很快注意到，在装有BBS论坛列表的光盘背面，被人用指甲轻轻地划了一道刮痕。这条刮痕很轻，如果不是阿瓦登仔细地抚摩光盘的话，是很难发觉到的。这条刮痕很奇特，是一条直线，而在这条直线末端的不远处，则是另外一条极短的刮痕，似乎刻意想弯成一个圆点。整体看上去就好象是一个叹号，或者倒过来说，象是字母i。\n\n很快他在其他四张光盘上也发现了类似的刮痕，它们造型都不同，但都似乎代表着某种符号。阿瓦登回想起喇叭里那个女声最后一句提到过的文件顺序，于是把这五张光盘按照BBS论坛统一用户名与密码、BBS论坛列表、互联网BBS论坛使用指南、相应法规、以及最新健康网络词汇列表的顺序排列好，接着依次把那五道刮痕用手指临摹到汽车窗户上。很快那些刮痕构成了一个英文单词：\n\ntitle\n\n题目？这是什么意思？\n\n阿瓦登看着这个单词莫名其妙，这究竟是纯属无意的痕迹，还是有人刻意为之？如果是有人刻意为之，他这么做的用意是什么？\n\n这时候汽车停住了，又有几名乘客走上车来。阿瓦登挪动一下身体，不让他们看到自己在车窗上写出来的字迹，然后装做打呵欠的样子抬起袖子，轻轻把那五个字母擦掉。\n\n阿瓦登暗自庆幸，如果他没有在现在发现这些光盘上的痕迹，那么以后就永远没有机会发觉了。按照规定，个人电脑是不允许使用任何存储存设备的，因此阿瓦登的电脑并没有光驱。他下一步所要做的是将这些光盘送交到管区网络安全部，由他们将光盘内资料登陆到服务器中，再转发给阿瓦登。这是为了防止个人私自在家里制造、阅读或者传播黄色或者反动信息，网络安全部发出的通告是这么解释的。联邦的网络警察经常会突入到个人家中进行临时检查，看用户是否非法拥有信息贮存设备，阿瓦登曾经亲眼见过一个邻居被警察带走，原因仅仅是因为他私自藏了一张光盘在家里——其实他只是打算拿那个当茶杯垫用。那个邻居再没回来过。\n\n无论这些符号代表的是什么意思，它都是一种全新的体验，这让阿瓦登感觉到兴奋。怀旧与渴望新奇是阿瓦登生活在这个时代的两根精神支柱，否则他会与这座城市一样变的僵硬，然后窒息而死。\n\n他先来到网络安全分部，将光盘交给那里的负责人，负责人反复地检查光盘和阿瓦登的表情，好象所有使用BBS论坛的人都不可信赖一样。末了负责人终于找不到什么破绽，只得将光盘收下，然后举起右手，阿瓦登和他一起高呼“缔造健康的互联网络”。这句话是唯一被允许可以连贯着被说出来的句子。\n\n回到家里，阿瓦登脱掉大衣，摘了过滤口罩，将旁观者扔到了行军床上，然后整个人也倒进枕头里。每次出去外面都会让他疲劳，这一半是因为他孱弱的肉体已经不大适合室外活动；另外一半原因是因为他必须花费大量的精力来应付旁观者。\n\n过了四十分钟，他才悠悠地醒过来，头还是和平常一样地疼，胸口还是一如既往地闷。胡乱吃了一点东西以后，阿瓦登爬到电脑桌前，打开电脑，按程序登陆上网络，习惯性地先检查了一遍信箱。\n\n信箱里有七、八封新的信件，其中两封是同事发来的事务信。另外五封则是网络安全部发给他的，内容就是他送交的那几张光盘。\n\n阿瓦登打开了包含有BBS论坛的用户名、密码和BBS论坛列表的两封信。他看到自己的论坛通用用户名叫做19842015，和自己的网络编号完全一样，不由得有些失望。他依稀记得在小的时候，BBS论坛的用户名是可以自己决定的，而且每一个论坛都可以不同，一个人在网上并不单只是一串枯燥数字。\n\n小时候的记忆往往是跟童话和幻想混杂在一起，未必与实际相符。现实中你只能使用有关部门指定的用户名和密码，理由很简单，用户名和密码内也可能含有敏感词汇。\n\n阿瓦登又打开了那份BBS列表，全部都是有关部门开设的官方论坛，没有私人的——事实上个人能够合法持有的电脑设备从技术上来说也无法架设新BBS——这些论坛的主题各有侧重点不同，但基本上是围绕着如何更好响应国家号召，缔造健康互联网络来说的。比如其中一个电脑技术论坛，主题就是如何更好地屏蔽掉敏感词汇。\n\n居然在这些论坛中还有一个是关于游戏的。里面正在讨论的是一个如何帮助别人使用健康词汇的网络游戏，玩家可以操纵一名小男孩在街上侦察，看是否有人使用了敏感词汇，小男孩可以选择上前指责或者通知警察，抓到的人越多，小男孩得到的褒奖就越高。\n\n阿瓦登随便打开了几个论坛，里面的人都彬彬有礼，说话很“健康”，就好象街上的那些行人一样。不，准确地说，比街上的气氛还要压抑。在街上的人也许还有机会保留一下自己的小动作，比如阿瓦登刚才在公共汽车上就偷偷地写了TITLE五个字母；而在网上论坛，人的最后的一点隐私也全被暴露出来，有关部门随时可以调看你的一切行动，无从遁形，这就是科学技术发展所带来的进步。\n\n一阵失落和失望袭上阿瓦登的心头，他合上眼睛，把鼠标甩开，重重地向后靠去。原来他天真地以为BBS论坛也许会少许宽松一些，现在看来甚至比现实中更叫人窒息，他感觉到自己好象陷入沉滞的电子淤泥之中，艰于呼吸。“FUXKYOU, YOUSONOFBITCH”再一次涌现到他的唇边，强烈无比，要化好大的力气才控制住。\n\n忽然，他又想到了那个神秘的title，那究竟是什么意思？那五张光盘里或许隐藏着什么？也许这跟title有关系？\n\n阿瓦登想到这里，把目光重新转向电脑屏幕，仔细去看网络安全部发来的五封信的title部分。五张光盘各隐藏着一个字母，凑到一起就是title，那么按照这个方式，那五封EMAIL的title凑到一起，就变成了一句话：去用户学习论坛。”\n\n阿瓦登记得刚才他确实看到其中一个论坛的名字叫做“用户学习”，于是他抱着姑且一试的心态连接到这个论坛去。他希望这并不是一个巧合。\n\n用户论坛是一个事务性论坛，里面是一些关于BBS用户资料的投诉帖和管理帖，斑竹的是一个叫19387465的人；发帖的人和回帖的人数量都很少，里面冷冷清清的。阿瓦登打开帖子列表，按照刚才的规律去搜寻每一个帖子的标题，并把它们综合到一起，很快他就得到了另外一句话：\n\n“每周日辛普森大楼5层B户。”\n\n又是一个谜团，阿瓦登想。但这却坚定了他的信心，这其中必定隐藏着玄机。光盘、EMAIL和BBS论坛，连续三次都可以通过首词组组合的方式得到暗示，绝非巧合。\n\n究竟是什么人会在有关部门的官方文件中隐藏着这样的信息呢？每周日在效率大楼5层B户又会发生什么事情呢？\n\n阿瓦登终于找到了久违的兴奋感，未知事物的新奇刺激着他麻木很久的神经。更重要的是，这种在有关部门正式文件中玩弄的文字技巧，叫他有一种喘息的快感，仿佛一个密不透风的铁面罩上几个透进空气的小孔。\n\n营造健康的互联网络。\n\nFUXKYOU, YOUSONOFBITCH。\n\n阿瓦登盯着屏幕上的桌面背景，用嘴唇比出了那句粗话的口型，并且比出了中指。\n\n在接下来的日子里，阿瓦登一直处于一种潜藏的兴奋状态，就象是一个摆出无辜表情嘴里却藏着糖果的小孩子，在大人转身过去之后露出狡黠的笑容，尽情享受心中藏有秘密的乐趣。\n\n日子一天一天地过去，健康词汇在列表里又少了几个，窗外的空气又浑浊了几分，这已经是生活的常态。阿瓦登自己已经开始拿网络健康词汇表当日历来用，划掉三个词就证明过了三天，划掉七个就证明过了一周，于是周日终于到来了。\n\n阿瓦登抵达辛普森大楼的时间是中午，暗示的句子里并没有指明时间，阿瓦登认为在中午前往应该是比较可以接受的。当穿着深绿军大衣，耳朵上别着旁观者的阿瓦登来到辛普森大楼的入口时，他的心开始忐忑不安地跳跃起来。他在上一星期设想了无数种可能发生的情景，而现在这个谜底就要揭晓了。无论在周日效率大楼会发生什么，也不会比现在的生活更加糟糕，阿瓦登心里想，所以他并不怎么害怕。\n\n他走进大楼内部，发现这里的人也很少，空旷的走廊里只听到他哒哒的脚步声与回音。一部老电梯里贴着“缔造美好网络家园”的广告，以及一个充满了正义感的男性头像海报，背景是星条旗，他在纸里用右手食指指向观看者，头上写着一行字是“公民，请使用健康词汇。”阿瓦登厌恶地转过身去，发现另外一侧也贴着同样的海报，避无可避。\n\n值得庆幸的是五楼很快就到了，电梯的门一开，对面的门上就赫然挂着B户的牌子。门是掉了漆的绿色，门框上还点了几滴墨水，一部简易的电子门铃挂在右上角。\n\n阿瓦登深深吸了一口气，伸手去按电纽。\n\n电铃响起，很快屋子里传来脚步声。阿瓦登觉得这脚步的韵律很熟悉，似乎是在哪里见到过。门“咔拉”一声被打开一半，一名年轻女子一手握着把手，把身体前倾望着阿瓦登，警惕地说：\n\n“你，找谁？”\n\n女子疑惑地问道。阿瓦登一下子就认出了她的声音，就是那个在网络部BBS论坛科柜台后面的女性。她很漂亮，穿着墨绿色绒线衫，头上梳着这时代流行的短发，皮肤特别的白，只有嘴唇能看到一些血色。\n\n看着女子的眼神，一瞬间阿瓦登不知道该说什么好，犹豫了一下，他举起右手，轻声回答说：“title。”\n\n阿瓦登不知道这句话能否奏效，也不知道自己是否真的找对了地方，但这是他唯一能想到的回答了。他紧张地望着那女子，假如那女子忽然报警，那么自己就会被抓起来仔细审问为什么无缘无故跑到陌生人家里。“肆意游走罪”只比“使用敏感词汇罪”轻那么一点。\n\n女子听到他这么说，脸上还是毫无表情，只是把头幅度很轻微地点了一下，右手谨慎地做了一个“进来”的手势。阿瓦登刚要张口，那女子严厉地瞪了他一眼，吓的他把话又吞回去了，乖乖地跟着她进了屋子。\n\n一进屋子，女子首先做的就是把门关好，然后拉起来一层铅灰色的门帘挡在门口。阿瓦登不安地眨着眼睛，趁她拉门帘的时候环顾四周。这屋子是标准的两室一厅，在厅里摆放的是一套双人沙发与一个茶几，茶几上居然还有几束红紫色的塑料花。靠墙是电脑桌和电脑，墙上挂着普通的白色日历，但被主人用粉红色的纸套了边，看起来颇为温馨。一盏粗笨的日光灯从天花板上垂下来，上面象是恶作剧一样挂了几缕绿色的电线，象是垂下藤蔓的葡萄架。阿瓦登注意到厅口的鞋架上有四双鞋，尺码不同，说明今天的客人并不只他一个。\n\n阿瓦登正踌躇不安，忽然女子从背后拍了拍他的肩膀，示意他朝里面走。于是两个人穿过客厅另一侧的短小回廊来到其中一间卧室。卧室上挂着同样质地的铅灰色帘子，女子伸手举起帘布，推开了门。阿瓦登迈了进去，首先映入眼帘的是三名面带微笑的人类，以及一间用真正的鲜花装点的房间。屋子里有很多旧日记忆里的古老物品，比如一幅印象派的油画、一尊乌干达木雕，甚至还有一个银烛台，唯独没有电脑。\n\n他正在迟疑，女子也进了屋子。她谨慎地拉好门帘关上门，将耳边的旁观者取下，回过身来对阿瓦登用曼妙的声音说道：\n\n“欢迎加入说话会！”\n\n“说话会？”\n\n出于习惯，阿瓦登并没有把这三个字说出口，因为他不确定是否“健康”，只是用眼神表示自己的疑惑。\n\n“在这里你可以随便说话，这个该死的东西不会起作用的。”女子把自己的旁观者晃了晃，那个小东西象死掉了一样，对女子句子里两个敏感词汇“随便”和“该死”充耳不闻。\n\n阿瓦登一下子想到上星期在公共汽车站前碰到的男子，如果他摘下旁观者，会不会也会落到同一境地呢？那女子见他犹豫不决，指了指门口的铅灰色门帘说：“放心好了，这里是可以屏蔽掉旁观者信号的，不会有人觉察到。”\n\n“你们，是什么，人，这，是，哪里？”\n\n阿瓦登一边摘下耳朵上的旁观者，一边小声说道，语调还是改不了那种有关部门规定的说话方式。\n\n“这里是说话会，是一个完全自由场所，在这里你可以畅所欲言，请不要拘束。”\n\n另外一个人起身对他说道，这是一名瘦高的中年男子，鼻梁上的眼镜非常地厚。\n\n阿瓦登嗫嚅着，却找不到发音的焦点，在四个人的注视下显得窘迫不堪，脸都要红起来。女子同情地看了他一眼：“可怜的家伙，不用太紧张，每一个刚到这里的人都是这样。慢慢就习惯了。”\n\n她把手搭到阿瓦登的肩上：“我们其实见过的，当然，我见过你，而你没见过我。”她一边说，一边将自己的头发解下来，原来她留的是一头齐肩的乌黑长发，头发披下来的一瞬间阿瓦登觉得她真的很美。\n\n“我……我记得你，记得你的声音。”阿瓦登终于说出了一句完整的话，虽然不够流畅。\n\n“是吗，那可太好了。”女子笑起来，拉着他的手，让他坐到沙发上，递给他一杯水。阿瓦登注意到这是一个款式古老的茶杯，上面还刻着花纹，杯子里的水带着浓郁的香气，阿瓦登尝了一点，那种甜丝丝的味道对喝惯纯净水的舌头来说刺激格外地大。让他觉得浑身一下子被注进了许多活力。\n\n“弄到这个可不容易，我们也不是每周都能喝到。”女子坐到他身边，两只乌黑的眼睛注视着他，“你是怎么知道这个集会的？”\n\n阿瓦登把发现光盘暗示的过程说了一遍，其他四个人都赞许地点了点头。“果然是个聪明人，脑筋还没被陈腐的空气腐蚀掉。”一个三十多岁的胖子称赞道，他的嗓门大的要命。那个戴眼镜的中年人把两只手交叉在一起，表示赞同。\n\n“这正是天生的说话会成员，聪明、敏锐，而且不甘屈从于沉默。”\n\n“那么。”胖子提议，“先让我们鼓掌欢迎说话会的新成员吧。”\n\n于是四个人鼓起掌来，小小的屋子里响起一片掌声。阿瓦登羞涩地举起杯子做回应，他还不太习惯这样的场面。等到掌声稍息，他抬起头怯生生地问道：\n\n“可以问个问题吗？说话会到底是什么？”\n\n带他进屋的女子伸出食指，在他鼻子前两公分的地方比了一比，解释道：\n\n“说话会，就是可以畅所欲言的集会。在这里你不必顾忌什么，说出任何你想说的东西。这里没有敏感词汇，也没有健康互联网络。这里是绝对自由的空间，你可以尽情释放你的灵魂，舒展你的身体，没有任何禁锢与束缚。”说着说着，她的声音变的高亢、奔放，里面饱含了许多早已经被屏蔽掉的词汇，阿瓦登不曾听到这样流畅连贯的话语很久了。\n\n“我们的宗旨就是，说话，就这么简单。”中年人扶扶眼镜，补充道。\n\n“可是，要说些什么呢？”阿瓦登又问道。\n\n“任何事情，你心里想的任何事情都可以说出来。”中年人露出宽和的笑容，“尤其是那些被美国政府限制的思想。”\n\n这可真是一个大胆的集会啊，这分明就是犯罪，阿瓦登心想，但他发觉自己却被这种犯罪慢慢地吸引住了。\n\n“当然，有件事我们会事先说明。说话会是危险的，每一个成员都冒着被有关部门拘捕的风险。联邦执法人员也随时可能破门而入，以非法集会以及非法使用不合法词语的名义把我们抓起来。你现在有权拒绝加入，并且离开。”\n\n阿瓦登听到女子的警告，心里一度犹豫起来。但一想到此刻离去的话，那么又要开始持续那种窒息的泥沼生活，他就难以压抑自己的烦闷。阿瓦登第一次发现，原来“说话”对他来说是一个致命的诱惑，他先前并不知道自己原来是如此地渴望着说话。\n\n“我不会离开的，我要加入你们，说话。”\n\n“那太好了。唔，那么不妨就从自我介绍开始吧。”女子高兴地说，同时站起身来，把右手搭到胸前，“从我开始。我的名字叫阿尔特弥斯，至于网络编号和身份证号码，让他们见鬼去吧！谁会去管那个！我有我自己的名字，我不是数字。”\n\n她的话让所有人包括阿瓦登都笑了起来。接着她继续说道：“不过，这其实只是一个假名，这是希腊神话里的女神。”\n\n“假名？”\n\n“是的，和我户籍本上的名字是不同的。”\n\n“可是，为什么？”\n\n“你不会对自己在档案里的名字厌倦吗？我想起一个自己喜欢的名字，哪怕只有一次机会也好，自己想叫什么就叫什么。在这个说话会里的每一个人都有一个自己喜欢的名字，我们彼此拿这个称呼。”\n\n阿瓦登若有所思地点点头，他很理解阿尔特弥斯的想法。事实上当他在使用网络论坛的时候，也希望能够自己取一个称心如意的名字，而不是被分配一个用户名。\n\n通过介绍，阿瓦登了解到阿尔特弥斯是网络部BBS论坛管理科的职员，今年23岁，未婚，最讨厌蟑螂和蜘蛛，喜欢缝纫与园艺，屋子里的花就是她偷偷从城市边缘摘回来的。\n\n接下来是那名中年人，他自我介绍说名字叫兰斯洛特，41岁，是城市电厂的一名工程师；兰斯洛特这名字出自英国的亚瑟王传说，是一名忠贞的骑士。他有自己的老婆和两个孩子，一男一女；男孩三岁，女孩四岁，他们最喜欢吃的就是柠檬味道的水果糖。说到这里，兰斯洛特说希望下次聚会能把他们也带了，孩子们正是学说话的时候，他想教给他们真正的说话。\n\n那个三十多岁的胖子是网络部的一名网管，叫瓦格纳。这个身份让阿瓦登吃惊不已，他的印象里网管都是些绷着脸全无表情的冷漠生物，但眼前的瓦格纳脸圆滚滚的，油光锃亮，嘴边两条翘起的小胡子神气十足。他喜欢的是雪茄和歌剧，利用网管的特权这两样东西都不难弄到。\n\n“这个能屏蔽掉信号的门帘就是他弄的。”阿尔特弥斯补充说，瓦格纳冲她做了个“乐意为您效劳”的手势，然后点燃了雪茄，把它放到嘴里，很快屋子里就笼罩起一片稀薄的烟雾。\n\n说话会的第四名成员是一位穿着黑色制服的女性，今年刚满三十。她的名字是杜拉丝，城市日报（那个时代的报纸已经全部都数字化了）的编辑，她比阿尔特弥斯还瘦，颧骨高高耸起，眼窝身陷，两片薄薄的嘴唇即使在最说话的时候也很少分开，看不到牙齿。爱好是饲养狗和猫，尽管她并没有养。\n\n“那么，到你了。”阿尔特弥斯对阿瓦登说。阿瓦登想了想，结结巴巴地把自己的情况说了一遍，当谈到自己的爱好时候，他一时间居然想不到自己喜好什么，似乎什么都没有，在那之前他甚至从来没想过。\n\n“那，你最想做的是什么事呢？”阿尔特弥斯把手再一次放在他肩上，诱导着问道。\n\n“真的什么都可以？”\n\n“什么都可以，在这里没有任何限制。”\n\n阿瓦登觉得自己终于找到机会了，他咳了一声，抓抓头，脱口而出一句响亮的叫喊：“FUXKYOU, YOUSONOFBITCH！”\n\n在一瞬间，在座的四个人都被他这句话震惊了。瓦格纳率先反应了过来，他先叼住雪茄，用力鼓掌，然后用右手把雪茄取下来，张嘴大声地赞叹道：“真棒，痛快，这简直是最完美的入会誓词。”\n\n“我宁可听十遍这样的脏话，也不想再去碰那个乏味的电子女声。”兰斯洛特也是一脸陶醉，毫不掩饰自己对电子女声的厌恶。而阿尔特弥斯和杜拉丝全都咯咯地笑起来，杜拉丝发现自己的笑容幅度大了一点，不好意思地把嘴掩住。阿瓦登觉得他们与其说是觉得新奇，不如说是在享受这句脏话所带来的对体制的蔑视与挑战。\n\n“那你叫希望自己叫什么名字呢？” 阿尔特弥斯歪着头问。\n\n“唔……王二。“ 阿瓦登沉吟了一下，回答说。这是一个中式的名字，他以前有一个中国人朋友，喜欢讲故事，故事里的主角名字总是叫王二。\n\n屋子里的气氛现在完全融洽了，大家都开始谈些比较自然的话题，每个人都摆出了最舒服的姿势，阿尔特弥斯不时拿起茶壶来为大家续水。阿瓦登紧张的心情逐渐放松下来，他感觉到自己的脑子前所未有地轻松。\n\n“你知道的。”阿尔特弥斯又给他倒了一杯甜水，“我们一直想把说话会保持在一定规模，平日是没有办法畅所欲言的，我们需要空间。麻烦的是，我们没办法公开征集会员，又不可能直接通过物理接触去寻找，那风险太大。于是兰斯洛特就设计了一套暗示系统，只有发现这些暗示的人才能知道本会的存在。”\n\n“这套系统考虑到的还不止是安全问题。”兰斯洛特把自己的眼镜摘下来仔细擦拭了一下，得意地说，“这其实也是一个会员资格验证。说话会所吸纳的成员，必须有智慧，有头脑，内心渴望激情，并且对自由有着渴望。”\n\n瓦格纳用两根指头夹着雪茄，在事先准备好的烟灰缸里弹了弹烟灰，大声说道：“据我的经验，申请BBS论坛服务的人，大多数都是为了怀旧，或者说渴望一些新鲜的东西，这样的人往往都怀有激情，认为BBS论坛也许能给他们一些与现实不一样的东西——当然，事实上并非如此，美国政府对BBS论坛的管理甚至严厉过电子邮件——这暗示着他们心里渴望解脱束缚。因此我们将暗示隐藏在申请BBS论坛的光盘之中，只有申请人才有机会接触到这些暗示。而只有那些有智慧、观察敏锐的人才会发觉到这些暗示的存在，并顺利解读出来，找到这里。”\n\n“归根到底，说话会也不过是一群渴望自由说话的秘密小团体罢了。”兰斯洛特笑道。\n\n“你是第二个找到说话会的人，第一个是杜拉丝小姐。”\n\n阿尔特弥斯告诉阿瓦登。阿瓦登敬佩地看了杜拉丝一眼，后者淡淡地回答道：“这没什么，这是我的工作，我的工作就是摆弄文字。”\n\n阿瓦登想到上一周在公共汽车站碰到的那个疯狂男子，于是把这件事讲给其他成员听。听完之后，兰斯洛特摇了摇头，从嘴唇里滑出一声叹息：\n\n“这样的事情我也是见过的，我的一个同事就是如此。所以说话会的存在是必要的，这是缓解压力的阀门。长时间的敏感词汇限制会让人都疯掉的，因为他们既无法思考又没办法表达。”\n\n“这正是美国政府有关部门所希望看到的，这样只有傻瓜能够存活下来，一个全是傻瓜的社会是稳定的。” 瓦格纳费力地把自己肥胖的身躯挪了一下位置，轻蔑地说。\n\n“你也是有关部门的一分子，瓦格纳先生。”阿尔特弥斯一边往茶杯里续了些热水，一边抬头轻声说道。\n\n“阿尔特弥斯小姐，我只是一个能比普通人多使用几个敏感词汇的普通人而已。”\n\n大家都笑了起来。阿瓦登从来没有见过这么多的人说这么多的话，这是前所未有的奇妙经验。他惊讶地发现自己居然很快就融进了这个小圈子里，隔阂与陌生感很快就消失了；同时消失的还有胸闷与头晕等习惯性的毛病。\n\n很快话题就从说话会本身扩展到了更加宽泛随意的话题，阿尔特弥斯唱支歌，兰斯洛特说了几个笑话，杜拉丝则给大家讲了美国南部诸州的风土人情；瓦格纳甚至还唱了一段歌剧，虽然阿瓦登一个字也听不懂，但他一点也不吝惜掌声。在这个城市的某一个被屏蔽掉的角落里，五个不甘沉默的人正在享受着在这个时代视为奢侈品的事情——说话。\n\n“王二，你可曾看过《1984》？”\n\n阿尔特弥斯忽然问道，她就靠着阿瓦登坐下，阿瓦登摇摇头，反问道：“这是网络编号的一段么？”\n\n“这是一本书的名字。”\n\n“书？”阿瓦登听到这个名词，头摇的更大了。这是个古老的名词，在这个电脑技术非常发达的时代，网络可以承载一切信息，任何人都可以在网上图书馆查到电子版；因此有关部门认为实体书籍变成了一种没有必要存在的浪费，实体书也就逐渐消亡了。瓦格纳对此的评论是：“有关部门喜欢电子书籍的心情是可以理解的，电子书籍的话，只需要FIND和REPLACE两个命令就可以消灭掉全部不健康词汇，替一本书消毒；而实体书籍的校对与修订却是件旷日持久的工作。”\n\n“这是一本伟大的书，是旧世界哲人们对我们这个时代的预言。”阿尔特弥斯认真地说。“它很早以前就洞察到了肉的束缚与解脱，灵的束缚与解脱，这是说话会的基石。”\n\n阿瓦登不无惊奇地发现他的网络编号开头恰好是这这本书名字：19842015。\n\n“那么，该怎么样才能看到呢？”阿瓦登盯着阿尔特弥斯乌黑色的眼睛问。\n\n“我们也无法找到纸质版，网络图书馆不可能存在这样的书。”兰斯洛特摇摇头，然后重新露出笑容，左手向着杜拉丝摆了个请的姿势，“但我们的杜拉丝小姐应该为她的记忆力而自豪，她在很早已经有幸阅读过这两本书，并且能够记得里面的大部分文字。”\n\n“太好了，然后她写下来了，对吗？”\n\n“那太危险，这时代持有实体书是个大罪过，也容易让说话会暴露。我们只是在每次聚会的时候请杜拉丝小姐为我们背诵。既然是说话会，那么把这两个故事讲出来不是更名符其实吗？”\n\n大家都安静下来，杜拉丝站起来走到屋子中央，其他四个人坐在旁边看着她。阿瓦登不经意地把手搂在阿尔特弥斯肩上，后者微微朝这边靠过来，女性头发的幽香“咝咝”地划过他的鼻子，让他的心里一阵荡漾。屋子里非常暖和，他分不清这是花香还是阿尔特弥斯的味道。\n\n杜拉丝的声音并不高，不过却很清晰有力；她的记忆力确实惊人，不仅记得情节，包括一些细节和句子都可以复述下来。杜拉丝讲到了朱丽亚假装摔倒，然后偷偷递给温斯顿一张写着“我爱你”的纸条，绘声绘色，这让听众们都听的入神了，阿尔特弥斯听的尤其认真，以至于都没有注意到阿瓦登一直注视着她。\n\n“1984的作者预见到了专制的进步，却没有预见到技术的进步。”瓦格纳在杜拉丝停下来喝水的时候发表自己的评论，阿瓦登觉得他与外貌不太相称，是个很有洞察力的技术官僚。\n\n“在大洋国人们还可以靠传递纸条来偷偷表达自己的想法，但是现在不一样了。美国政府有关部门把我们全赶到了网上，而在网络技术发达的今天，我们即使想发一条短信都会被系统或者网管看的一清二楚，无从遁形。现实里呢，还有旁观者在。”瓦格纳在腿上敲了敲雪茄根部，“一句话，技术是中性的，但技术的进步会让自在的世界更自在，集权的世界更加集权。”\n\n“这句话说的很有哲学家的味道哟。”阿尔特弥斯冲瓦格纳挤了挤眼睛，从抽屉里取来一把饼干和曲奇散发给大家。\n\n“就好象同样是0和1，有的人就能写出工具软件，有人却拿那个编出恶性病毒？”\n\n阿瓦登想到一个类似的比喻，瓦格纳听了以后满意地打了个响指。\n\n“很不错的比喻，王二，就是如此，真不愧是程序员。”\n\n谈话持续了不知道有多久，杜拉斯看了一眼墙壁上的挂钟，连忙提醒谈兴正浓的四个人时间快到了。说话会不能持续很长时间，旁听者被屏蔽的越久，暴露的危险就越大。\n\n“那么好吧，我们就抓紧最后半个小时来完成今天的活动。”\n\n阿尔特弥斯一边说着，一边将桌子上的空杯子收走。兰斯洛特和瓦格纳也都站起身来，活动一下已经有些酸疼的肩膀和腰，只有杜拉丝坐在位子上没有动。\n\n“活动？还有什么活动？”\n\n阿瓦登奇怪地问道，说话会除了说话还有其他活动？\n\n“唔，对啊，我们还有其他活动。”阿尔特弥斯撩起额前的长发，对他妩媚一笑：“我们还会和对方完全交流。”\n\n“完全交流？”\n\n“就是intercourse”\n\n“………………”阿瓦登一下子变的脸色苍白，呼吸急促起来，仿佛胃里被灌进去零下三十度的寒风，他几乎不相信自己的耳朵。\n\n“说话会有说话的自由，也有选择与谁上床的自由。”阿尔特弥斯毫不羞涩地说，“我们互相谈话，然后选择合适的人做爱，就象我们选择我们喜欢的词汇说话一样。”\n\n兰斯洛特看阿瓦登很窘迫，走过去拍拍他的肩膀，慢慢地说：“当然，我们不会强迫任何人，这完全是在自愿的基础上。今天我还要早点回去照顾小孩，你们人数正好合适。”\n\n阿瓦登的脸色涨红，热的仿佛夏季的电脑CPU，他甚至不敢多看阿尔特弥斯一眼。他憧憬过女性很长时间，但如此接近还是第一次。\n\n还要回家去照顾小孩子的兰斯洛特向大家道别后就先行离去了，阿尔特弥斯将房间留给瓦格纳与杜拉丝，然后带着惶恐不安的阿瓦登来到了另外一间房间。这间显然是阿尔特弥斯的卧室，屋子里很简单，但却收拾的十分干净，在床上枕头旁还摆着一个手制的布娃娃，床单和窗帘都是粉红色的。\n\n最初的是由阿尔特弥斯主动开始的，丝毫没心理准备的阿瓦登只是被动地任她摆布。经过了几轮挑逗，阿瓦登才逐渐放开，任由潜藏在自己心内的原始欲望奔流出来，那种期待听到圆润女声的青春憧憬本来只是苦闷生活的意淫，而在今天它加倍实现了。很快这种憧憬与他在现实中被压抑的郁闷合流，转化成了猛烈的冲动，让他一次又一次与阿尔特弥斯融为一体。阿瓦登不知道这种冲动和他想大声说出“FUXKYOU, YOUSONOFBITCH”冲动有什么不同，不过现在不是考虑这个的时候，他现在脑子里想的只有尽情地、全无束缚地让自己释放激情，完全没有任何束缚。\n\n强烈的刺激一波波地冲击着兴奋中枢，最终一阵快感浪潮在狂暴洋面扬起头来，达到了一个极高的顶端。阿瓦登在那一瞬间感觉到了前所未有的自由，那种轻盈无比的自由，以及因自由而生的快乐与疲惫。浑身是汗的他喘息着倒在了阿尔特弥斯身上，一阵舒畅的倦意如潮水般淹没了他的身体……\n\n……当他醒来的时候，发现阿尔特弥斯躺在自己身边，赤裸的身体好象一尊白玉雕像，睡姿恬美静谧。他侧过身子去，慵懒地打了个呵欠，然后阿尔特弥斯睁开了眼睛。\n\n“很舒服，对不对？”她问道。\n\n“是啊……”阿瓦登不知道该说什么好，他顿了顿，犹豫地说道：“你以前和兰斯洛特、瓦格纳他们也……呃，我是说，象刚才那样子过吗？”\n\n“是的。”阿尔特弥斯温柔地回答，她半支起胳膊，长发从肩膀披到了胸口。她的大方坦白反而让阿瓦登有些不知所措。屋子里出现了一段时间的沉默，然后阿尔特弥斯忽然开口问道：\n\n“还记得今天杜拉丝讲的那段故事吗？女主角偷偷递给男主角写着“我爱你”的纸条。”\n\n“唔，还记得。”阿瓦登回答，很高兴终于能从那个拙劣的话题摆脱出来了。\n\n“在有关部门的健康互联网络词汇列表里，没有爱这个字呢。在我们这个时代，我爱你也是一个敏感词汇，被屏蔽掉了。”阿尔特弥斯的眼神里似乎是感慨，又象是失落。\n\n“我爱你。”阿瓦登不禁脱口而出，他知道在这间屋子里可以说出任何自己想说的话，不必顾忌。\n\n“谢谢你。”\n\n阿尔特弥斯听到之后只是笑了笑，起身穿上衣服，催促阿瓦登时间差不多了。阿瓦登有些失望，因为她没有预期反应的热烈，仿佛他刚才说的只是有些无关紧要的东西。\n\n这时候杜拉丝和瓦格纳已经离开了，屋子里只剩他们两个人。阿尔特弥斯把他送到门口，将旁观者交给他，然后叮嘱他说：“记得在外面绝对不要提及说话会的任何事情或者任何人，我们在说话会以外的地方是完全不认识的。”\n\n“我记住了。”阿瓦登回答，然后转身要走。\n\n“王二。”\n\n阿尔特弥斯忽然叫道，阿瓦登连忙转身，还没等他反应过来，两片柔软温暖的嘴唇忽然贴到了他的双唇，然后是一个细切的声音在耳边响起：“谢谢你，我爱你。”\n\n阿瓦登觉得眼睛有些湿润，他戴上旁观者，推开门，重新步入到那一片令人窒息的世界中去，但他此时已与来时的心境大不相同。\n\n此后阿瓦登的精神面貌明显有了改善。他谨慎地享受着这种秘密集会的乐趣，并且乐在其中。每一周或者两周，他们五个人都会在周日秘密地举行说话会的活动，聊天，唱歌或者听杜拉丝讲1984的故事。阿瓦登同阿尔特弥斯又“完全交流”了几次，偶尔他也会跟杜拉丝“交流”。他有了两个身份，一个是现实中和网上的阿瓦登，编号19842015，还有一个是说话会里的王二。他很享受这个名字，觉得这就是自己另外的一个人生。\n\n有一次集会，他们谈到了敏感词汇的问题。阿瓦登记得很早的时候——他对这方面的记忆有点模糊——有关部门给出的是一份敏感词汇列表，由网站的内部管理人员秘密参考使用，他对如何演变成现在的局面大惑不解。那一天瓦格纳带了一瓶葡萄酒，兴致很高，于是索性给他们讲了讲“屏蔽”的进化史，身为网管的他经常可以接触到这些资料。\n\n在最开始美国政府只是单纯地屏蔽掉敏感词汇，但很快他们就发现这样的措施根本没有用处。很多人会采取在词组中夹杂符号或者数字的方式来绕开系统检查；于是有关部门不得不将这些近似敏感词汇也一一屏蔽掉。然而众所周知，数字与符号之间的组合方式是近乎无限的，只要你有想象力，就完全可以组合出一个新的词组而且不失掉他的原意。比如说“politic”这个词，就有“politi/c”、“政polit/ic”、“pol/itic”等近乎无限种表达方式。\n\n当有关部门意识到这个问题时，他们采取了新的策略。既然无法辨识词组，那么就用单词屏蔽。这一举措在一开始是奏效的，违规交谈的人显著减少，但很快人们就发现可以用同音字或者谐音的方式来继续表达自己的危险思想。即使有关部门封掉全部敏感词汇的同音字，也无济于事，思想活跃的美国人充分发挥了自己的想象力，使用隐喻，借代、类比、引申及其他修辞方法，或者将一个敏感词用数个不敏感的字来代替。人类的思维方式要比电脑开阔许多。电脑屏蔽掉一条路，他们还会有更多的路可以选择。\n\n这一场水面以下的角力看起来似乎是美国大众要取得胜利。这时候，一个具有逆向思维精神的人出现了。他的身份不明。有人说他是有关部门的主管；也有人说他是因过度使用敏感词汇而被捕的危险人士。无论他是谁，总之整个局面被扭转过来。他向有关部门建议，不再告诉大众禁止说什么，而是规定他们只能说什么，用什么方式去说。有关部门很快就心领神会，制订了新的规章制度：取消了敏感词汇列表，取而代之的是互联网络健康语言列表，并把这举措推广到了日常生活中的语言屏蔽系统中去。\n\n这一次，大众终于处于下风。以往他们与有关部门尽情地在网络与现实中捉着迷藏，而现在他们却被有关部门扼住了咽喉。这样一来，有关部门可以有效率地掌握住言论，因为整个语言的框架都被彻底控制了。在有限的空间内，大众几乎是无计可施。\n\n尽管如此，大众还是不屈不挠地将这场战争——或者说游戏——继续下去，他们挑选健康词汇列表中的合法字眼来表达不合法的意思：两个连续的“稳定”意思就是“反对”，“稳定”加“繁荣昌盛”则暗示“屏蔽”。美国政府不得不对这一动向保持着警惕，并日复一日地将更多的词汇从健康词汇列表里删掉，禁止大众使用。\n\n“当然，这场战争会持续下去的。只要世界上还存在着两个不同的字或者词组，那么就可以继续自由交流——你知道莫尔斯电码吧？”\n\n瓦格纳说到这里，拿起茶杯一饮而尽，满意地打了一个嗝。\n\n“可是，这场战争的代价就是语言的失落。表达能力会越来越贫乏，越来越淡而无味，人们会越来越倾向于沉默，这对有关部门反而是好事。”兰斯洛特摆出一副忧虑的表情，有节奏地用指关节敲击着桌面，“这样一来，岂不就等于是大众的自由意识将语言推向死亡的边缘？真讽刺啊。按照这个趋势，有关部门是不会败的，他们会笑到最后。”\n\n“不，不，笑这种情感他们是不会了解的。”瓦格纳淡淡地回答。\n\n“我倒是觉得，美国是一直处于恐惧的情感之中呢，生怕人们掌握了太多的词汇，表达出太多的思想，变的难以掌握。”阿尔特弥斯说完摆出一副她在上班期间冷若冰霜的呆板脸孔，学着僵硬的腔调喊了一句：“营造健康的网络环境，美国万岁！”\n\n杜拉丝、兰斯洛特与瓦格纳都哈哈大笑，唯一没笑的是王二（阿瓦登）。他对于兰斯洛特刚才的那句话始终耿耿于怀：大众与有关部门的对抗，其最终结局就是语言的消亡。那么他们现在这个小小的说话会，也只不过是在一列开向悬崖的列车里关上窗帘，享受坠毁前最后的宁静罢了。\n\n不过他没有说出口，因为这太煞风景了。阿瓦登不希望破坏说话会的气氛，这对他很重要。\n\n从说话会回到家里，阿瓦登躺在行军床上，双手枕着脑袋，陷入了沉思。自从加入说话会以后，他变的比以前更容易陷入思考。有时候他想的是这个社会、这个互联网络或者这座城市中存在的荒谬性；有时候他想的是自己的生活；还有时候他想的是阿尔特弥斯。他不知道是不是在一个压抑的世界里，人的情感会变的格外强烈，他现在陷入对阿尔特弥斯的迷恋无法自拔。阿瓦登一直很羡慕杜拉丝讲的《1984》里面的温斯顿，他和朱利亚有一间两个人独处的小屋，一个只属于他们两个人的小世界。\n\n他在与阿尔特弥斯“完全交流”的时候曾经吐露过自己的心声，阿尔特弥斯没有直接回答，而是表示两个人的关系无法再比说话会更近一步——维持现在的状态就已经是个人行为的极限，有关部门可不会一直打瞌睡。“我们只能把感情生活压缩在每周一次的说话会活动里，这已经很奢侈了。”她对他说，同时温柔地抚摩他的胸膛。“只有在说话会里，我们才是阿尔特弥斯和王二。而在其他时间里，你是19842015，而我是19387465。”\n\n对此，阿瓦登只能发出一声轻轻的叹息，确实他不该奢求更多。\n\n除了感情，发生变化的还有互联网络。自从加入说话会以后，阿瓦登逐渐发现互联网表面下潜藏的一些东西。正如瓦格纳在一次活动的时候指出，普罗大众与有关部门的战争从未结束，总会有思想和言论从严厉管制的缝隙中流泻出来。阿瓦登发现，在完全公式化的EMAIL与网络论坛中其实隐藏着不少耐人寻味的细节，就好象那个title一样，存在着各式各样的密码与隐藏寓意。这些东西出自不同人的手里，样式和破译方式都不同，阿瓦登不知道那些密码背后隐藏的是怎样的内容。不过有一点可以确知的是，说话会并不是唯一的一个地下集会，瓦格纳说的对，始终还是有人在试图用“健康”词汇表达“不健康”思想。\n\n讽刺的是，给阿瓦登感触最深的，是有关部门的管制。以往他只是模糊地感觉到自己被绑缚起来，现在他能清晰地看清这种束缚与压抑的脉络，以及加诸在自己身上的各种手段。在小小说话会中享受到的自在让他更加深刻地感受到在宽阔现实中的不自在。\n\n“FUXKYOU, YOUSONOFBITCH！”\n\n每一次的聚会，三位男士都会轻蔑地一起高喊这一句粗话。他们清楚这不会给有关部门带来什么不良影响，不过这确实很痛快。\n\n这一周，阿瓦登特别地忙碌，他的同事因为不明原因而被屏蔽掉了，这样一来整个项目就全压在了他一个人身上。这项目是为有关部分设计一种软件，用来控制大功率主动式“旁观者”的能源分配控制。软件很复杂，他不得不每天在电脑前工作十几个小时，只有在身体实在支撑不住的时候才停下来随便吃一点东西，喝一口纯净水，困了就躺在旁边的行军床上睡上一觉，爬起来继续工作。屋子里满是浑浊的烟味与袜子脏衣服的酸臭味，阿瓦登就在这种环境下蓬头垢面地敲着键盘，并不时揉揉满布血丝的眼睛。\n\n偏偏在这个时候屋子里的暖气坏掉了。洋灰色的暖气片从昨天开始就变的冰凉，不再有热水流动。阿瓦登检查了一下，发现并不是管道问题，而且邻居们也碰到同样的事，看来是供热系统出了问题。这一变故的正面影响是稍微淡化了屋子内的酸臭味，负面影响是整个屋子变的有如冰窖一样。紧闭的窗户和门能挡住寒风，却挡不住寒冷，低温让本来就寒酸的房间更笼罩上一层霜气。无论是那把木椅还是行军床都象是冷酷的冰雕，屋子里唯一还有些热气的就只剩下电脑。阿瓦登不得不披上所有的御寒衣物，蜷缩在床上，把电脑的散热口对准自己。\n\n有关部门宣布“供热”和“暖气”暂时也被列入敏感词汇，于是阿瓦登没办法写信向供热部门询问，只好静待，除了用来敲键盘的指头以外，尽量保持全身一动不动，以节约热量。在停止供暖后的第四天，暖气片里终于传来“哗啦哗啦”的声音，带着热气的水开始流动，屋子里恢复了温暖，“供热”和“暖气”又可以恢复使用了。于是EMAIL与网络论坛上全都是“庆祝有关部门恢复供应暖气，急人民之所急”的帖子，EMAIL新闻组里也全是类似主题。\n\n不过这对阿瓦登来说太晚了，他生了病，感冒，而且是重感冒。他面色苍白，全身软弱无力，头疼的象是被一枚达姆弹射入头部，只能躺在床上等医生。医生来到他家里，给他做了两三次点滴，喂了一些叫不上名字的药片，叫他静养。这一场病足足持续了数天，他不得不放弃参加这一星期的说话会，身体状况实在太差了，阿瓦登甚至怀疑自己搞不好会因此而死掉。\n\n阿瓦登躺在床上，心里懊悔不已，说话会是他唯一的乐趣，现在他却没办法参加。他把头蒙在被子里胡思乱想，瓦格纳这一次会带什么特别的东西来呢？兰斯洛特有没有把两个孩子也领过来？还有阿尔特弥斯，他没参加的话，她会和谁“完全交流”呢？瓦格纳还是兰斯洛特？他还想到了杜拉丝，上一次的聚会里，杜拉丝讲到了温斯顿在秘密幽会的屋子里对朱丽亚说“我们已经死了”，朱丽亚附和着说“我们已经死了”，这时候第三个声音说道“你们已经死了。”\n\n杜拉丝就讲到这里，就停住了。阿瓦登急切地想知道接下来发生了什么，第三个声音是谁，是党吗？温斯顿和朱丽亚是否会被捕，他们会有什么样的下场？不光是他，阿尔特弥斯也很希望知道后续情节的发展，不过她并没有去追问杜拉丝。\n\n“让这成为一个悬疑，这样接下来的一周我们的生活都会在期待的乐趣中度过。”她对阿瓦登说，然后两个人继续沉溺于intercourse的快乐。\n\n“也许他们都会死。”阿尔特弥斯在交流结束后，看着天花板说。\n\n“也许那只是奥布林的声音，他去探望他们。”阿瓦登安慰她道，但是他的心里也不确定。\n\n阿瓦登的病持续了十天，然后他终于痊愈了。他痊愈后的第一件事就是从床上爬起来，然后去看墙上的日历：这一天恰好是星期日，说话会活动的日子。阿瓦登已经缺席了一周，这已经令他如饥似渴，甚至做梦都在和他们一起喋喋不休地说着话——所幸他并没有说梦话的习惯，所以24小时工作的旁观者并没发出任何警报。\n\n阿瓦登简单地洗了一下脸，用一把有些生锈的剃刀沾着肥皂仔细地刮掉脸上粗硬的胡须，然后咕噜咕噜地刷了刷牙齿，用手和毛巾沾着热水将自己蓬起的乱发压下去。因为生病，有关部门发了一些补贴给他，其中包括两块羊角面包、两瓶姜汁啤酒和一份精制砂糖。他将这些东西都用塑料布仔细包好，揣到宽大的军大衣里，打算带到说话会上去与大家分享。\n\n今天的天气和往常一样地冷，阿瓦登把自己裹在大衣里，登上前往效率大楼的公共汽车。一路上车厢里的广播重复着“营造健康的互联网络”以及一些优秀网络用户的先进事迹；车厢前面的电子屏幕不断滚动显示着最新的健康词汇列表，一个旁观者自车顶垂下来睥睨着车内的每一个表情呆滞的人。阿瓦登坐在最后一排，望着窗外不断向后移动的建筑物与枯黄的树木发呆。\n\n车子很快就到达了辛普森大楼附近的车站，阿瓦登下了车，把手放到怀里摸了摸塑料布包着的食物，朝着大楼走去。他在半路无意中抬起头，忽然一阵冰冷的寒流刺入他的胸腔，迫使他停住了脚步。\n\n有什么地方不对劲！\n\n他看到了效率大楼的第五层阿尔特弥斯家的窗户发生了一些奇怪的变化。以前阿尔特弥斯家面向大街的窗户总是挂着粉红色的窗帘，而现在窗帘则被扯到了两边，窗户大开，用肉眼可以勉强看到窗玻璃和屋子里雪白的墙壁。假如今天有说话会的话，阿尔特弥斯绝对不会把有屏蔽效果的窗帘打开。而且打开窗户这件事也绝不寻常，在这个城市里的室外空气十分浑浊，几乎不会有人会去开窗换气。\n\n也就是说，今天并没有说话集会召开，而是发生了另外一些事情。阿瓦登望着那窗户，心情开始变的有些慌乱，他把手从兜里掏出来，叼起一支香烟，把身体靠在一根电线杆旁故做镇静，以免被行人怀疑。究竟说话会发生了什么，为什么这一周停办了呢？要知道，只要还有复数的成员能够出席，说话会就会一直办下去，难道说瓦格纳、兰斯洛特、杜拉丝和阿尔特弥斯同时无法出席？这种概率实在太小了。阿瓦登一边这样想着，一边向四周不安地张望。忽然他看到了一样东西，一个念头霎时占据了他的全部心灵，让他几乎眩晕过去。\n\n“说话会本周不会有了，以后也不会有了。”阿瓦登嘴唇默默地蠕动着，面如死灰。\n\n他看到在街道内侧一处不起眼的地方隐藏着一个类似雷达天线的东西，其造型很象是两个背部贴在一起的大碗。阿瓦登心里清楚这是什么东西：这正是他负责软件设计的大功率主动式“旁观者”，这造型他很熟悉。这装置可以主动发射电波去探测人们的声音，并检查其中是否存在敏感词汇。\n\n这样的装置居然就安放在阿尔特弥斯家附近，那么就等于说话会完全暴露在了有关部门的监控之下。主动式旁观者的强大刺探电波会轻易刺穿她家中的铅质窗帘，把所有成员的话原封不动地传到有关部门耳朵里。\n\n这是一个划时代的发明，这一技术的突破意味着有关部门可以不再被动地等待警报，可以主动出击去刺探人们在任何时间任何地点说的任何话语。阿瓦登可以想象接下来会发生什么，阿尔特弥斯他们的每一句话都被有关部门记录下来，会有机器统计出到底有多少违禁词汇被他们使用过；然后联邦警察会冲进她的屋子，将正在聚会的成员们都带走，只留下搜查过后空荡荡的房间和窗户。\n\n阿瓦登想到这里，心如刀绞，他一点也不为自己的侥幸逃脱而感到幸运。他的胃袋翻腾起来，一种恶心的感觉从胃里直接升到嘴边，让他想吐，却又不能吐——因为“呕”也是个敏感词汇；大病初愈的孱弱身躯无法承受这种打击，象害了风寒一样颤抖起来，几乎站立不住。\n\n他不敢继续朝前走去，仓皇地转过身去，登上另外一辆公共汽车，把嘴闭的更紧了。等阿瓦登回到自己家楼下，看到楼房附近另外一架新的主动式旁观者正在兴建中，漆黑的天线在半空舒展开来，仿佛一面巨大的蜘蛛网。看来有关部门已经着手在整个纽约市部署这种新兴高科技产品。\n\n他不敢驻足观看，低着头从那巨大装置旁边走过，一路不停地走回家，然后把自己的脸紧紧地压在枕头里，却不敢哭出声音来，连一句“FUXKYOU, YOUSONOFBITCH”都不能说。\n\n从那以后，阿瓦登的生活回到了普通状态——就是说和原来一样沉滞、压抑、欠缺激情，健康向上，缺乏低级趣味。兰斯洛特说过：“战争的结果就是，大众的自由意识会将语言推向死亡的边缘”，现在看来，他的预言是很准确的：说话会的覆灭，导致“说话”、“歌剧”、“完全”、“交流”几个词先后被剔除出了健康词汇列表，成为敏感词汇。\n\n另外，虽然阿拉伯数字还能用，但“1984”这一个数字组合也被屏蔽掉了，这让包括阿瓦登在内的程序员在编写程序时不得不谨慎地检查数字是否违规，这额外增加了很多工作量，让他更加疲惫。\n\n阿瓦登不是没有担心过，也许在某一天的深夜，他就会忽然接到一封EMAIL，让他留在家里不要动，不要试图在网络做任何动作；接着电话会响起，电子女声会把这一要求重复再重复，直到警察打开他家的大门，把他带去未知的地方，那里有未知的命运等待着他。《1984》后面的情节发展阿瓦登始终不知道，唯一知道的杜拉丝已经彻底失踪了，所以温斯顿和朱丽亚的结局始终是个谜；就好象兰斯洛特、瓦格纳、杜拉丝和阿尔特弥斯的结局一样，也不从得知。其实这两件事对于阿瓦登来说没什么本质性的区别，所以它们也可以看做是同一个谜。\n\n其实他最担心的，是阿尔特弥斯。每次想到这个名字，阿瓦登就难以抑制心中的郁闷。她究竟会怎么样，彻底被屏蔽掉吗？如果是那样，那么她在这世界上遗留下来的唯一痕迹，就是一个程序员记忆里的假名而已了。\n\n说话会消失后三个星期，仍旧风平浪静，没有任何人来找过阿瓦登，他也没收到过任何类似内容的EMAIL，阿瓦登一直在想，也许是他们没有吐露出自己的下落，也可能是因为他们根本不知道——他们认识的只是一个叫王二的程序员。这个城市里有数以千计的程序员，而王二是个假名。\n\n因此，生活一如既往地平静。不，确切地说，还是有一点不同的，那就是互联网络健康词汇列表：那上面的词组消失的速度比以前要快的快，每小时每分钟都有词与单字飞快地在名单上消失，阿瓦登不得不花上大量时间去更新列表，以跟紧当前形势。\n\n与词汇列表更新速度相对的，EMAIL和网络论坛上的东西越来越乏味。因为人们不得不用极有限的词去表达广泛的意思，大家都变得寡言少语。就连那些秘密的暗语和联系方式也少了许多；整个网络就象是前些天阿瓦登家里出了问题的暖气片一样：虽然名义上是给人带来温暖的东西，但却变的冰冷、僵硬，让人如坠冰窟。\n\n这一天，阿瓦登从电脑前抬起头来，他看了看窗外迷茫的灰色天空，胸口一阵抽搐，不由得痛苦地咳了一声。他拿起塑料杯，将杯子里的纯净水一饮而尽，杯子丢进同样是塑料质地的垃圾桶里，发出钝钝的撞击声，他觉得自己的脑子也是一团垃圾，举起手敲了敲，果然发出同样钝钝的撞击声。\n\n然后他拿起大衣，戴上墨绿色的护目镜，走出门去。阿瓦登没带便携式的旁观者，那东西已经不需要了，城市里到处都是主动式的旁观者，随时监听是否有违禁词汇的存在。整个纽约现在就象是互联网络一样，被有关部门营造成十分健康。\n\n阿瓦登这一次外出是有正当理由的，他决定去取消网络论坛服务，这服务已经用不着了，因为无论EMAIL，新闻组，BBS论坛还是其他什么现在全部都变成了一样的东西。\n\n从日历来说现在应该是春季，但外面还是很冷，高大的灰色建筑矗立在平地上，仿佛绝对零度下的石林。大团大团的风裹着黄沙与废气穿行其间，风沙无处不在，让人置身其中而难以摆脱。阿瓦登把手揣进兜里，脖子缩进领口，畏缩着向网络部的大楼走去。\n\n忽然，他停下了脚步，惊讶地站在原地无法动弹。他看到阿尔特弥斯正站在前面的路灯下，穿着黑色的制服。可是她的变化有多么大啊，面容象是老了十岁，满脸都是衰老的皱纹，年轻的活力荡然无存；她听到脚步声，转过头来，两个乌黑的大眼睛显得异常空洞，目光越过阿瓦登延伸到远方，没有一个明晰的焦点。\n\n阿瓦登万万没有想到会在这个时间这个地点碰到她，这让他已经沉寂已久的心灵泛起了几点火花，可惜他迟钝的神经已经无法表达出“激动”这一个简单的情感了。两个人互相对视了一阵，他终于木然走到她身边，张了张嘴唇，想对她说些什么。但是他掏出今天新发布的健康词汇列表，发现上面是一片空白——终于连最后一个词组也被有关部门屏蔽了。\n\n于是阿瓦登只好保持着沉默，默默地与面无表情的她擦肩而过，继续向前走去。他的身影逐渐融入同样安静的灰色人群之中，整个城市都显得寂静极了。","slug":"2017.07.01","published":1,"date":"2017-07-01T04:14:30.000Z","updated":"2017-07-01T04:14:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwvh25i30065w39zapb9hhf0","content":"<h2 id=\"作者-马伯庸\"><a href=\"#作者-马伯庸\" class=\"headerlink\" title=\"作者:马伯庸\"></a>作者:马伯庸</h2><hr>\n<p>And in the naked light I saw ten thousand people, maybe more.</p>\n<p>People talking without speaking, people hearing without listening.</p>\n<p>People writing songs that voices never shared, no one dared disturb the</p>\n<p>sound of silence.</p>\n<p>— The sound of silence</p>\n<p>美利坚合众国，2015年，纽约。</p>\n<p>当电话响起来的时候，阿瓦登正趴在电脑前面睡觉。电话铃声十分急促，尖锐，每一次振动都让他的耳膜难受好久。他揉了揉干涩的眼睛，十分不情愿地爬起来，觉得脑子沉滞无比。</p>\n<p>其实他的脑子一直就很沉滞，这种感受既然是生理上的也是心理上的。他身处的房间很狭窄，空气不很好，唯一的两扇窗户紧闭着——即使打开窗户也没用，外面的空气更加浑浊。这是一间大约只有三十平米的小屋子，屋子墙壁上泛黄的墙纸有好几处开始剥落，天花板上的水渍渗成奇怪的形状；一张老式的军绿色行军床摆在墙角，床腿用白漆写着编号；紧挨着行军床的是一张三合板制成的电脑桌，桌上摆着一台浅白色的电脑，机箱后面五颜六色的电线纠缠在一起，把它们自己打成一个古怪的死结，杂乱无章地蔓延到地板与墙角，仿佛常春藤一样。</p>\n<p>阿瓦登走到电话前，慢慢坐到地板上，目光呆滞地盯着电话，手却没有动。这部古怪的东西是老式的按键式电话，大概是十几年前的款式，这是阿瓦登有一次去费城出差时偶尔在一家杂货店里买到的；他拿回家以后稍微修理了一下，发现居然还能用，这让他当时小小地兴奋了一阵子。</p>\n<p>电话继续在响着，已经是第七声。阿瓦登意识到自己不得不去接听了。于是他弓下腰，用两个指头拈起电话，慢慢把电话放到耳边。</p>\n<p>“请说出你的网络编号？”话筒里传来的声音并不急噪，事实上它也不带其他任何的感情色彩，因为这是电脑合成的人工智能语音系统。</p>\n<p>“19842015”</p>\n<p>阿瓦登熟练地报出一连串数字，同时开始觉得胸有些更闷了。说实话他并不喜欢这些空洞的电子声音，他有时候想，假如打过电话来的是一位声音圆润的女性该多好。阿瓦登知道这是一种不切实际的幻想，不过这幻想会让他的身体得到几秒钟的舒缓。</p>\n<p>话筒里的声音仍旧在继续着。</p>\n<p>“关于你在十月四日提交的网络论坛用户注册申请已经被受理，经有关部门审查后确认资格无误，请在三日内持本人身份证件、网络使用许可证及相关文件前往办理登记手续，并领取用户名及密码。”</p>\n<p>“知道了，谢谢。”</p>\n<p>阿瓦登谨慎地选择词语，同时努力挤出一副满足的微笑，好象话筒的另一侧有人在看着自己一样。放下电话，阿瓦登先是茫然地盯着它看了大约两分钟，然后站起来活动一下手腕，坐回到电脑前面，缓慢地推动了一下鼠标。</p>\n<p>电脑屏幕“啪”地一声亮了起来，显示出一个登陆的界面，还有一行英文：“请输入你的网络编号和姓名。”阿瓦登将那八位数字敲进去，又输入了自己的名字，点击“登陆”。随即机箱的指示灯开始频繁地闪动起来，整个机器发出细微的噪音。</p>\n<p>每一个使用互联网的人都有一个网络编号，没有这个编号，就无法连接进互联网络。每一个编号都是独一无二的，每个人只有一个；这是使用者在网上的唯一代号，既不能修改，也不能取消。这些编号分别对应着使用者身份证上的名字，因此19842015就是阿瓦登，阿瓦登就是19842015。阿瓦登知道有些记忆力不好的人会把自己的编号印在衣服的后面，那看起来颇为滑稽，也容易引发一些不正当的联想。</p>\n<p>有关部门说使用网络实名制是为了规范网络秩序方便管理，杜绝因匿名使用网络而产生的一系列重大问题和混乱。阿瓦登不太清楚那一系列重大问题会是什么，他自己没试过用假名上网，他所认识的任何人里也不曾有人尝试过——事实上，从技术角度来说，他根本没办法匿名登陆互联网络，没有编号就没有权限上网，而编号则连接着他的详细档案，换句话说，没人能在网上隐藏自己。有关部门把这一切都考虑的很周详。</p>\n<p>“有关部门”，这是一个语意模糊、但却有着权威与震慑力的词组。它既是泛指，又是确指，其所涵盖的意义相当广泛。有时候，它指的是为阿瓦登颁发网络编号的美国联邦网络管理委员会；有时候它是将最新通告及法规发到阿瓦登EMAIL信箱的服务器；还有时候它是监察网络的FBI特属网络调查科；总之一句话，有关部门是无处不在，无职不司的，总会在适当的时候出现，给予指导、监控或者警告，无论你是在网上还是网下。</p>\n<p>简直就象是老大哥一样无微不至。</p>\n<p>电脑仍旧在持续运转着，阿瓦登知道这得花上一阵子。这台电脑是有关部门配发给他的，具体型号和配置阿瓦登并不清楚，机箱是被焊死的，无法打开。于是他拿出一小瓶清凉油，用右手小拇指的指甲挑出一点抹在自己的太阳穴，然后从脚下堆积如山的杂物里翻出一个塑料杯子，从桌子旁的饮水机里接了半杯蒸馏水，就着一片镇痛片一饮而尽。蒸馏水穿过喉咙和狭长的食道滑进胃里，空泛的味道让他有些恶心。</p>\n<p>音响里忽然传来一阵美国国歌的旋律，阿瓦登放下杯子，重新把目光投到电脑上去。这是已经连入互联网络的标志。屏幕上首先跳出来的是有关部门的通告，白底黑色四号字，里面陈述了使用互联网的意义以及最新的规章制度。</p>\n<p>“缔造健康的互联网络，美国万岁！”</p>\n<p>音响里传来激昂的男性呼声，阿瓦登不大情愿地跟着大声念了一遍。“缔造健康的互联网络，美国万岁！”</p>\n<p>这段呼号持续了三十秒钟，然后消失，取而代之的是写着“缔造健康的互联网络”标语的桌面背景。另外一个窗口慢慢浮上开，上面开列出几个选项：工作、娱乐、电子信箱和BBS论坛。其中BBS选项呈现灰色，说明这项功能还没有开通。</p>\n<p>整个操作系统简洁明了，这台电脑的浏览器没有地址输入栏，只是在收藏夹里有几个无法修改的的网站地址。理由很简单，这些网站都是健康向上的，假如其他站点和这些网站一样，那么只保留这些网站就够了；假如其他站点与这些网站不一样，那么就是不健康的，是低级趣味，不能保留。这是有关部门精心设计的，是为了公民的精神健康着想，生怕他们受到不良信息的侵染。</p>\n<p>阿瓦登首先点开了“工作”，一连串和他工作相关的站点列表与相关软件在电脑上显示出来。阿瓦登是一名程序员，他每天的工作就是根据上级的要求编写程序。这份工作很无聊，不过可以保证他有稳定的收入。他不知道自己的源代码会被用到哪里去，上级也从来没有跟他说过。</p>\n<p>他打算继续昨天的工作，但是很快发现自己很难继续下去。阿瓦登觉得今天的情绪比以前要烦躁，无法集中精神，大脑还是很呆滞，胸口仍旧发闷。他试图娱乐自己，但是他发现“娱乐”选项里只有纸牌与挖地雷，根据有关部门的说法，这是两个健康的游戏，没有暴力，没有色情，不会让人产生犯罪冲动，也不涉及任何政治色彩。据说美国境外也是有互联网络站点的，不过无法连上去，因为本国的互联网络自成格局，独立自主，普通人无法直接连接到国外——IE浏览器没有地址栏，就算知道地址也没有用处。</p>\n<p>“您有一封新邮件。”</p>\n<p>系统忽然跳出来提示，阿瓦登终于找到了可以暂停工作的理由，他很快移动鼠标到电子信箱的选项上，点开，很快一个新的界面出现了。</p>\n<p>“To: 19842015</p>\n<p>From：10045687</p>\n<p>Subject: 模块、已经、完成、当前、项目、是否、开始。”</p>\n<p>阿瓦登微微地叹了一口气，觉得有些失望。每一次他收到新的电子邮件，都希望能够有一次新鲜的刺激来撞击他日益迟钝的脑神经，每一次他都失望了。其实他早就知道这一点，只不过他觉得保持期待至少能够享受到几秒钟快感。就好象他期待着打电话过来的是一个圆润温柔的女性声音一样。不给自己一些渺茫的希望，阿瓦登觉得自己迟早会疯掉的。</p>\n<p>这封信很简短，但是内容很充实。19842015是阿瓦登的网络编号，而10045687则是他的一位同事的编号，这种工作性质的信件通常都以编号相称。信的内容是几个不连续的英文单词，这是有关部门所提倡的一种电子邮件书写方式，因为这样可以方便软件检查信件中是否含有敏感词汇。</p>\n<p>阿瓦登打开回信的页面，同时另开了一个窗口，打开一份名字叫做“网络健康语言词汇列表”的TXT文档。这是有关部门要求每一位网民所必须使用的词汇。当他们书写电子邮件或者使用论坛服务的时候，都得从这个词汇列表中寻找适合的名词、形容词、副词或者动词来表达自己想要说的话。一旦过滤软件发现网民使用了列表以外的词，那么这个词就会被自动屏蔽，取而代之的是“请使用健康语言”。</p>\n<p>“屏蔽”是个专有名词，被屏蔽的词将不允许再度被使用，无论是在书信里还是口头都不允许。讽刺的是，“屏蔽”一词本身也是被屏蔽的词汇之一。</p>\n<p>这个列表是经常更新的，每一次更新都会有几个词在列表上消失，于是阿瓦登不得不费劲脑汁寻找其他词语来代替那个被屏蔽掉的词语或者单字。比如在以前，“运动”这个词是可以使用的，但后来有关部门宣布这也是一个敏感词汇，阿瓦登只好使用“质点位移”来表达相同的意思。</p>\n<p>他对照着这份列表，很快就完成了一封文字风格与来信差不多的EMAIL——健康词汇表迫使人们不得不用最短的话来表达最多意思，而且要尽量减少不必要的修辞，所以这些信件就好象是那杯蒸馏水一样，淡而无味，阿瓦登有时候想，他早晚也会和这些水和信一样腐烂，因为这些信是他写的，水是他喝的。</p>\n<p>接下来阿瓦登启动检查软件先扫了一遍，确保自己没无意中加入什么敏感词汇。等这一切都完成后，他按下了发送键，邮件被送出去了。</p>\n<p>阿瓦登没有留下备份，因为他的机器里没有硬盘，也没有软驱、光驱或者USB接口。这个时代宽带技术已经得到了很大发展，应用软件可以集中在统一的一个服务器中，个人用户调用时的速度丝毫不会觉得迟滞。因此个人不需要硬盘，也不需要本地存储，他们在自己电脑里写的每一份文档、每一段程序、甚至每一个动作都会被自动传送到有关部门的公共服务器中，这样便于管理。换句话说，阿瓦登所使用的电脑，仅仅具备输入和输出两种功能。</p>\n<p>完成了这封信后，阿瓦登再度陷入了软绵绵的焦躁状态，这是一个连续工作了三天的程序员的正常反应。这种情绪很危险，因为它让人效率低下精神低迷，而且没有渠道发泄。“疲劳”、“烦躁”以及其他负面词汇都属于危险词汇，如果他写信给别人抱怨的话，那么对方收到的将会是一封写满“请使用健康语言”的EMAIL。</p>\n<p>这就是阿瓦登每天的生活，今天比昨天更糟糕，但应该比明天还稍微好一点。事实上这个叙述也很模糊，因为阿瓦登自己并不清楚什么是“好一点”，什么是“更糟糕”。“好”与“坏”是两个变量，而他的生活就是一个定量，只有一个常数叫“压抑”。</p>\n<p>阿瓦登推开鼠标，把脑袋向后仰去，长长地呼了一口气。（至少“呼”这个字还没有被屏蔽）这是空虚的表现，他想哼些歌，但却又不记得什么，转而吹了几下口哨，但那听起来与一只生了肺结核的狗差不多，只得做罢。有关部门象幽灵一样充斥在整个房间里，让他无法舒展自己的烦闷。就好象一个人在泥沼里挣扎，刚一张口就被灌入泥水，甚至无法大声呼救。</p>\n<p>他的头不安分地转了几转，眼神偶尔撇到了摆在地板上的老式电话机，他忽然想到还必须要去有关部门申请自己的BBS论坛浏览许可证。于是他关掉“工作”和“电子邮件”窗口，退出了网络登陆。阿瓦登在做这些事的时候毫不犹豫，他很高兴能够暂时摆脱互联网络，在那上面他只是一串枯燥的数字和一些“健康词汇”的综合体。</p>\n<p>阿瓦登找出一件破旧的黑色呢子大衣，那件大衣继承自他的父亲，袖口和领子已经磨损的很严重，个别地方有灰色的棉花露出来，但还是很耐寒。他把大衣套到身上，戴上一副墨绿色的护镜，用过滤口罩捂住嘴。他犹豫了一下，拿起“旁听者”别在耳朵上，然后走出家门去。</p>\n<p>纽约的街上人很少，在这个时代，互联网的普及率相当地高，大部分事务在网上就可以解决，有关部门并不提倡太多的户外活动。太多的户外活动会导致和其他人发生物理接触，而两个人发生物理接触后会发生什么事则很难控制。</p>\n<p>“旁听者”就是为了防止这种事而发生的，这是一种便携式的语言过滤器，当携带者说出敏感词汇的时候，它就会自动发出警报。每一位公民外出前都必须要携带这个装置，以便随时检讨自己的言语。当人们意识到旁听者存在的时候，他们往往会选择沉默，至少阿瓦登是如此。有关部门正逐步试图让网络和现实生活统一起来，一起“健康”。</p>\n<p>这时候正是11月份，寒风凛冽，天空漂浮着令人压抑的铅灰阴云，街道两旁的电线杆仿佛落光了叶子的枯树，行人们都把自己包裹在黑色或灰色的大衣里面，浓缩成空旷街道上的一个个黑点飞快移动着。一层若有若无的烟雾将整个纽约笼罩起来，不用过滤口罩在这样的空气里呼吸将会是一件很有挑战的事情。</p>\n<p>距离上一次离开家门已经有两个月了吧，阿瓦登站在公共汽车站的站牌下，不无感慨地想，周围的一切看起来很陌生，泛黄，而且干燥。那是上一次沙尘暴的痕迹。不过沙尘暴这个词也已经被屏蔽了，因此阿瓦登的脑海里只是闪过那么一下，思想很快就转移到别的事情上去了。</p>\n<p>站在阿瓦登旁边的是一个穿着蓝色制服的高个男人。他先是狐疑地看了阿瓦登一眼，看到后者沉默地沉在黑色大衣里，他的两只脚交替移动，缓慢地凑了过去，装做漫不经心对阿瓦登说：</p>\n<p>“烟，有吗？”</p>\n<p>男人说，每一个字都说的很清晰，而且词与词之间间隔也足够长。这“旁听者”还没有精密到能够完全捕捉到每一个人语速和语调的程度，因此有关部门要求每一位公民都要保持这种说话风格，以方面检测发言人是否使用了规定以外的词汇。</p>\n<p>阿瓦登转过头去，看了他一眼，舔舔自己干裂的嘴唇，回答说：</p>\n<p>“没有。”</p>\n<p>男人很失望，又一次不甘心地张开嘴。</p>\n<p>“酒，有吗？”</p>\n<p>“没有。”</p>\n<p>阿瓦登又重复了一次这个词，他也已经很久没有收到烟和酒了，也许是缺货的关系吧，这是常有的事。不过有一点很奇怪，“旁观者”这一次却没有发出警报。以阿瓦登的经验，以往一旦烟、酒或者其他生活必需品发生短缺现象，这个词就会暂时成为被屏蔽掉的敏感词汇，直到恢复供给为止。</p>\n<p>这个男人看起来很疲惫，红肿的眼睛是这个时代的人们普遍的特征，这是长时间挂在网上的关系。他的头发蓬乱，嘴边还留着青色的胡子碴，制服下的衬衣领口散发着刺鼻的霉味。能看的出，他也很久不曾到街上来了。</p>\n<p>阿瓦登这时候才注意到，他的耳朵上空荡荡的，没有挂着那个银灰色的小玩意“旁听者”，这实在是一件严重的事情。不携带“旁听者”外出，就意味着语言不会再被过滤，一些不健康的思想和言论就有可能孳生，因此有关部门相当严厉地规定公民上街必须携带旁听者。而这个男人的耳朵旁却什么也没有。阿瓦登暗暗吃惊，一时间不知道是该去提醒还是装做没看到。他暗自想，也许向有关部门举报会更好。</p>\n<p>这时候那个男人又朝他靠近了一点，眼神变的饥渴起来。阿瓦登心里一阵紧张，下意识地向后退去。这难道是一次抢劫？还是说他是个压抑太久的同性恋者？那个男人忽然扯住他的袖子，阿瓦登狼狈地挣扎却没有挣开。出乎他的意料，那个男人并没有进一步的动作，而是大吼一声，用一种阿瓦登已经不太习惯了的飞快语速向他倾泻起话语来。阿瓦登被这突如其来的爆发弄的莫名其妙，不知所措。</p>\n<p>“我只是想和你多几句话，就几句，我很久没有说过话了。我叫斯多葛，今年三十二岁，记得，是三十二岁。我一直梦想有一套在湖边的房子，有一副钓鱼竿和一条小艇；我讨厌网络，打倒网管；我妻子是个可恶的网络中毒者，她只会用枯燥乏味的话叫我的网络编号；这个城市就是一个大疯人院，里面大疯子管着小疯子，并且把所有没疯的人变的和他们同样疯狂；敏感词汇都去他X的，老*受够了……”</p>\n<p>男人的话仿佛一瓶摇晃了很久然后突然打开的罐装碳酸饮料，迅猛，爆裂，而且全无条理。阿瓦登惊愕地望着这个突然狂躁起来的家伙，却不知道如何应对；更可怕的是，他发现自己居然对他产生了一点同情，那种“同病相怜”式的同情。男人的话这时候已经从唠叨变成了纯粹谩骂，全部都是最直抒胸臆的那种。阿瓦登已经有五、六年不曾说过这些脏话，最后一次听到这些也是四年前。有关部门认为这都有碍精神文明，于是全部都屏蔽掉了。</p>\n<p>而现在这个男人就在公众场合对着他大吵大嚷，似乎要将被屏蔽掉的敏感词汇一口气全倒出来。他的目光和手势并不针对任何人，甚至也不针对阿瓦登，更象是在一个人在自说自话。阿瓦登的耳膜似乎不习惯这种分贝，开始有些隐隐做痛，他捂着耳朵，拿不定主意是干脆逃掉还是……这时候，远处街道出现两辆警车，一路闪着警灯直直冲着这座公共汽车站而来。</p>\n<p>警车开到站台旁时，男人仍旧在痛骂着。警车门开了，涌出了五、六名全副武装的联邦警察。他们扑过去将那个男子按在地上，用橡皮棍痛打。男人两条腿挣扎着，嘴里的语速更快了，骂出来的话也越来越难听。其中一名警察掏出一卷胶带，“嚓”地一声扯下一条向男人的嘴贴去。男人在嘴被胶带封住之前，突然提高嗓门，冲着警察痛快无比地喊了一句：“FUXKYOU, YOUSONOFBITCH！”阿瓦登看到他的表情由疯狂变成享受，面带着微笑，似乎完全陶醉在那一句话所带来的无上快感和解脱感中。</p>\n<p>联邦警察们七手八脚地将男人送进了警车，这时才有一名警察走到了阿瓦登的跟前。</p>\n<p>“他，是，你朋友？”</p>\n<p>“我，不，认识。”</p>\n<p>警察盯了他一阵，取下他耳朵上的“旁观者”查看记录，发现他并没有提及任何敏感词汇，于是重新给他戴回去，警告他说那名男子说的全部都是极度反动的词汇，要求他立刻忘掉，然后转身押着那男子离开了。</p>\n<p>阿瓦登松了一口气，其实刚才他有一瞬间涌现出一种冲动，也想在这空旷的街道上大喊一声“FUXKYOU, YOUSONOFBITCH”那一定很爽快，他心里想，因为那男子说出这句话的时候表情很享受。不过他也知道，这也是妄想的一种，“旁观者”紧帖在耳朵上的冰凉感觉时刻提醒着他。</p>\n<p>街上很快就恢复了冷清，十分钟后，一辆公共汽车慢吞吞地开进站里，锈迹斑斑的车门哗啦一声打开，一个电子女声响彻整个空荡荡的车厢：“请乘客注意文明用语，严格按照健康词汇发言。”</p>\n<p>阿瓦登把自己缩进大衣，压抑住自己异样的兴奋，决定继续保持沉默下去。</p>\n<p>大约过了一个小时，公共汽车到了目的地。从破碎的车窗玻璃里吹进来的寒风让阿瓦登脸上挂起一层暗灰色的霜气，面部被风中的沙砾和煤渣刮的生疼。他听到电子女声报出了站名，就站起身来，象一条狗一样抖抖身上的土，走下车去。</p>\n<p>车站对面就是阿瓦登要去的地方，那是有关部门负责受理BBS论坛申请的网络部。这是一间五层的大楼，正方形，全水泥混凝土结构，外表泛灰。如果没有那几个窗户的话，那么它的外貌将与水泥块没有任何区别：生硬、死气沉沉，让蚊子和蝙蝠都退避三舍。</p>\n<p>BBS论坛是一种奇特的东西，从理论上来讲它完全多余，BBS的功能完全可以由EMAIL新闻组来取代，后者更容易管理和审查。而且申请使用BBS论坛资格不是件容易的事，申请人必须要通过十几道手续和漫长的审查才能有浏览资格，浏览资格三个月才会被允许在指定论坛发布帖子，至于自己开设BBS则几乎是不可能。</p>\n<p>因此真正对BBS有兴趣的人少之有少。阿瓦登当初之所以决定申请BBS论坛资格，纯粹是因为他那种模糊但却顽强的怀旧心态，就好象他从杂货店里买的那部老式电话一样。他也不知道自己为什么会自找麻烦，也许是为了给生活带来些刺激，还是说为了强调自己和曾经旧时代的那么一点点联系，也许两者兼有之。</p>\n<p>阿瓦登恍惚记得在他小的时候，互联网与现在并不太一样。并不是指技术上的不同，而是一种人文的感觉。他希望能通过使用BBS论坛回想起一些当年的事情。</p>\n<p>阿瓦登走进网络部的大楼，大楼里和外面一样寒冷，而且阴森。走廊里没有路灯，蓝白色调的两侧墙壁贴满了千篇一律的网络规章条文与标语，冰冷的空气呼吸到肺里，让阿瓦登一阵痉挛。只有走廊尽头的小门缝隙里流泻出一丝光亮，小门的上面挂着一块牌子，上面写的是“网络部BBS论坛科。”</p>\n<p>一走进这间屋子，阿瓦登立刻感觉到一阵温洋洋的热气。屋子里的暖气（或者是空调）开的很大，让阿瓦登冻麻了的手脚和脸麻酥酥的，有些发痒，他不禁想伸出手去挠挠。</p>\n<p>“公民，请您站在原地不要动。”</p>\n<p>一个电子女声忽然从天花板上的喇叭里传来，阿瓦登触电似地把手放下，恭敬地站在原地不同。他借这个机会观察了一下这间屋子。这屋子准确来说应该是一个狭长形的大厅，一道拔地而起的大理石柜台象长城一样将房间割裂成两部分，柜台上还装着一排银白色的圆柱形栅栏，直接连到天花板。屋子里没有任何装饰，没有观赏植物，没有塑料鲜花，甚至没有长椅和饮水机。</p>\n<p>“缔造健康的互联网络，美国万岁。”</p>\n<p>阿瓦登跟着声音重复了一遍。</p>\n<p>“请前往八号窗口。”</p>\n<p>电子女声的语调很流畅，因为这是电脑制作出来的，因此没有敏感词汇的限制。</p>\n<p>阿瓦登转头看到在自己右手边的不远处，大理石柜台上的液晶屏幕显示着八号的字样。他走过去，拼命抬起头，因为柜台实在太高了，他只能勉强看到边缘，而无法看到柜台另一侧的情形。不过他能听到，一个人走到柜台对面，坐下去，并有翻动纸张与敲击键盘的声音。</p>\n<p>“请把文件放入盒子里。”</p>\n<p>柜台上的喇叭传来命令。出乎意料，这一次在喇叭里的声音却变了。虽然同样冷漠枯燥，但阿瓦登还是能分辨出它与电子女声的不同——这是一个真正的女性的声音。他惊讶地抬头望去，却什么都看不到，柜台太高了。</p>\n<p>“请把文件放入盒子里。”</p>\n<p>声音又重复了一次，语气里带着一丝烦躁，似乎对阿瓦登的迟钝很不满。</p>\n<p>“是的，这是真正的女声……”阿瓦登想，电子女声永远是彬彬有礼不带任何感情色彩的。他把相关的电子身份证、网络许可证、网络编号和敏感词汇犯罪记录等一系列个人资料卡片一起放进柜台外的一个小金属盒子里，然后把盒子插进柜台上一个同样大小的凹槽中，关好门。很快他听到“唰”的一声，他猜测这也许是对面的人——也许是个女人——将盒子抽出去的声音。</p>\n<p>“你申请BBS服务的目的是什么？”</p>\n<p>喇叭后的女声浸满了纯粹事务性的腔调。</p>\n<p>“为了、提高、互联网络、工作效率、为了、缔造、一个、健康、的网络、环境，更好地、为、祖国、做出、贡献。”</p>\n<p>阿瓦登一字一句地回答，心里知道这只是一道官方程序，只需要按标准回答就可以。</p>\n<p>对面很快就陷入沉默，大约过了十五分钟，喇叭再度响起。</p>\n<p>“最后手续确认，你已经获得BBS论坛浏览权。”</p>\n<p>“谢谢。”</p>\n<p>“砰”的一声，金属盒子从柜子里弹了出来，里面除了阿瓦登的证件以外还多了五张小尺寸光盘。</p>\n<p>“这是有关部门核发给你的BBS论坛统一用户名与密码，BBS论坛列表、互联网BBS论坛使用指南及相应法规、以及最新健康网络词汇列表。”</p>\n<p>阿瓦登向前踏了一步，从盒子里将这些东西一股脑全拿出来，揣进大衣的大兜里。那些东西其实是可以全部放在同一张光盘里的，不过有关部门认为每一张光盘装一份文件有助于用户理解这些文件的严肃性和重要性，并产生敬畏。</p>\n<p>他心里盼望着那个喇叭能再说两句。让他失望的是，对面传来的是一个人起身并且离开的声音，从脚步声的韵律判断，阿瓦登愈发相信这是一名女性。</p>\n<p>“手续办理完毕，请离开网络部回到自己的工作岗位上。”</p>\n<p>甜美空洞的电子女声从天花板上传来，阿瓦登厌恶地抽动鼻翼，拿手揉了揉，转身离开这间温暖的大厅，重新进入到寒冷的走廊。</p>\n<p>在回家的路上，阿瓦登蜷缩在公共汽车上一动不动，顺利申请到BBS的使用权让他有些虚无缥缈的兴奋。他闭着眼睛，找了一个合适的角度躲开破窗而入的寒风，右手在兜里不断摩挲那一系列光盘，还在怀念着那一个神秘的女声。</p>\n<p>如果能再一次听到该多好，他不能抑制自己这样的想法，同时用拇指的指肚在光盘上轻轻地摩擦，幻想这几张光盘也曾经被她的手触摸过。他兴奋的几乎也想破口大骂一句“FUXKYOU, YOUSONOFBITCH”，真奇怪，那名男子的骂声在他的记忆里根深蒂固，并时不时不自觉地滑到唇边。</p>\n<p>忽然，他的手指在光盘上发觉到一丝异常的感觉。阿瓦登下意识地朝四周望去，确认周围一个乘客也没有后，他小心翼翼地把光盘全拿出来，就着窗外的光亮仔细端详。</p>\n<p>阿瓦登很快注意到，在装有BBS论坛列表的光盘背面，被人用指甲轻轻地划了一道刮痕。这条刮痕很轻，如果不是阿瓦登仔细地抚摩光盘的话，是很难发觉到的。这条刮痕很奇特，是一条直线，而在这条直线末端的不远处，则是另外一条极短的刮痕，似乎刻意想弯成一个圆点。整体看上去就好象是一个叹号，或者倒过来说，象是字母i。</p>\n<p>很快他在其他四张光盘上也发现了类似的刮痕，它们造型都不同，但都似乎代表着某种符号。阿瓦登回想起喇叭里那个女声最后一句提到过的文件顺序，于是把这五张光盘按照BBS论坛统一用户名与密码、BBS论坛列表、互联网BBS论坛使用指南、相应法规、以及最新健康网络词汇列表的顺序排列好，接着依次把那五道刮痕用手指临摹到汽车窗户上。很快那些刮痕构成了一个英文单词：</p>\n<p>title</p>\n<p>题目？这是什么意思？</p>\n<p>阿瓦登看着这个单词莫名其妙，这究竟是纯属无意的痕迹，还是有人刻意为之？如果是有人刻意为之，他这么做的用意是什么？</p>\n<p>这时候汽车停住了，又有几名乘客走上车来。阿瓦登挪动一下身体，不让他们看到自己在车窗上写出来的字迹，然后装做打呵欠的样子抬起袖子，轻轻把那五个字母擦掉。</p>\n<p>阿瓦登暗自庆幸，如果他没有在现在发现这些光盘上的痕迹，那么以后就永远没有机会发觉了。按照规定，个人电脑是不允许使用任何存储存设备的，因此阿瓦登的电脑并没有光驱。他下一步所要做的是将这些光盘送交到管区网络安全部，由他们将光盘内资料登陆到服务器中，再转发给阿瓦登。这是为了防止个人私自在家里制造、阅读或者传播黄色或者反动信息，网络安全部发出的通告是这么解释的。联邦的网络警察经常会突入到个人家中进行临时检查，看用户是否非法拥有信息贮存设备，阿瓦登曾经亲眼见过一个邻居被警察带走，原因仅仅是因为他私自藏了一张光盘在家里——其实他只是打算拿那个当茶杯垫用。那个邻居再没回来过。</p>\n<p>无论这些符号代表的是什么意思，它都是一种全新的体验，这让阿瓦登感觉到兴奋。怀旧与渴望新奇是阿瓦登生活在这个时代的两根精神支柱，否则他会与这座城市一样变的僵硬，然后窒息而死。</p>\n<p>他先来到网络安全分部，将光盘交给那里的负责人，负责人反复地检查光盘和阿瓦登的表情，好象所有使用BBS论坛的人都不可信赖一样。末了负责人终于找不到什么破绽，只得将光盘收下，然后举起右手，阿瓦登和他一起高呼“缔造健康的互联网络”。这句话是唯一被允许可以连贯着被说出来的句子。</p>\n<p>回到家里，阿瓦登脱掉大衣，摘了过滤口罩，将旁观者扔到了行军床上，然后整个人也倒进枕头里。每次出去外面都会让他疲劳，这一半是因为他孱弱的肉体已经不大适合室外活动；另外一半原因是因为他必须花费大量的精力来应付旁观者。</p>\n<p>过了四十分钟，他才悠悠地醒过来，头还是和平常一样地疼，胸口还是一如既往地闷。胡乱吃了一点东西以后，阿瓦登爬到电脑桌前，打开电脑，按程序登陆上网络，习惯性地先检查了一遍信箱。</p>\n<p>信箱里有七、八封新的信件，其中两封是同事发来的事务信。另外五封则是网络安全部发给他的，内容就是他送交的那几张光盘。</p>\n<p>阿瓦登打开了包含有BBS论坛的用户名、密码和BBS论坛列表的两封信。他看到自己的论坛通用用户名叫做19842015，和自己的网络编号完全一样，不由得有些失望。他依稀记得在小的时候，BBS论坛的用户名是可以自己决定的，而且每一个论坛都可以不同，一个人在网上并不单只是一串枯燥数字。</p>\n<p>小时候的记忆往往是跟童话和幻想混杂在一起，未必与实际相符。现实中你只能使用有关部门指定的用户名和密码，理由很简单，用户名和密码内也可能含有敏感词汇。</p>\n<p>阿瓦登又打开了那份BBS列表，全部都是有关部门开设的官方论坛，没有私人的——事实上个人能够合法持有的电脑设备从技术上来说也无法架设新BBS——这些论坛的主题各有侧重点不同，但基本上是围绕着如何更好响应国家号召，缔造健康互联网络来说的。比如其中一个电脑技术论坛，主题就是如何更好地屏蔽掉敏感词汇。</p>\n<p>居然在这些论坛中还有一个是关于游戏的。里面正在讨论的是一个如何帮助别人使用健康词汇的网络游戏，玩家可以操纵一名小男孩在街上侦察，看是否有人使用了敏感词汇，小男孩可以选择上前指责或者通知警察，抓到的人越多，小男孩得到的褒奖就越高。</p>\n<p>阿瓦登随便打开了几个论坛，里面的人都彬彬有礼，说话很“健康”，就好象街上的那些行人一样。不，准确地说，比街上的气氛还要压抑。在街上的人也许还有机会保留一下自己的小动作，比如阿瓦登刚才在公共汽车上就偷偷地写了TITLE五个字母；而在网上论坛，人的最后的一点隐私也全被暴露出来，有关部门随时可以调看你的一切行动，无从遁形，这就是科学技术发展所带来的进步。</p>\n<p>一阵失落和失望袭上阿瓦登的心头，他合上眼睛，把鼠标甩开，重重地向后靠去。原来他天真地以为BBS论坛也许会少许宽松一些，现在看来甚至比现实中更叫人窒息，他感觉到自己好象陷入沉滞的电子淤泥之中，艰于呼吸。“FUXKYOU, YOUSONOFBITCH”再一次涌现到他的唇边，强烈无比，要化好大的力气才控制住。</p>\n<p>忽然，他又想到了那个神秘的title，那究竟是什么意思？那五张光盘里或许隐藏着什么？也许这跟title有关系？</p>\n<p>阿瓦登想到这里，把目光重新转向电脑屏幕，仔细去看网络安全部发来的五封信的title部分。五张光盘各隐藏着一个字母，凑到一起就是title，那么按照这个方式，那五封EMAIL的title凑到一起，就变成了一句话：去用户学习论坛。”</p>\n<p>阿瓦登记得刚才他确实看到其中一个论坛的名字叫做“用户学习”，于是他抱着姑且一试的心态连接到这个论坛去。他希望这并不是一个巧合。</p>\n<p>用户论坛是一个事务性论坛，里面是一些关于BBS用户资料的投诉帖和管理帖，斑竹的是一个叫19387465的人；发帖的人和回帖的人数量都很少，里面冷冷清清的。阿瓦登打开帖子列表，按照刚才的规律去搜寻每一个帖子的标题，并把它们综合到一起，很快他就得到了另外一句话：</p>\n<p>“每周日辛普森大楼5层B户。”</p>\n<p>又是一个谜团，阿瓦登想。但这却坚定了他的信心，这其中必定隐藏着玄机。光盘、EMAIL和BBS论坛，连续三次都可以通过首词组组合的方式得到暗示，绝非巧合。</p>\n<p>究竟是什么人会在有关部门的官方文件中隐藏着这样的信息呢？每周日在效率大楼5层B户又会发生什么事情呢？</p>\n<p>阿瓦登终于找到了久违的兴奋感，未知事物的新奇刺激着他麻木很久的神经。更重要的是，这种在有关部门正式文件中玩弄的文字技巧，叫他有一种喘息的快感，仿佛一个密不透风的铁面罩上几个透进空气的小孔。</p>\n<p>营造健康的互联网络。</p>\n<p>FUXKYOU, YOUSONOFBITCH。</p>\n<p>阿瓦登盯着屏幕上的桌面背景，用嘴唇比出了那句粗话的口型，并且比出了中指。</p>\n<p>在接下来的日子里，阿瓦登一直处于一种潜藏的兴奋状态，就象是一个摆出无辜表情嘴里却藏着糖果的小孩子，在大人转身过去之后露出狡黠的笑容，尽情享受心中藏有秘密的乐趣。</p>\n<p>日子一天一天地过去，健康词汇在列表里又少了几个，窗外的空气又浑浊了几分，这已经是生活的常态。阿瓦登自己已经开始拿网络健康词汇表当日历来用，划掉三个词就证明过了三天，划掉七个就证明过了一周，于是周日终于到来了。</p>\n<p>阿瓦登抵达辛普森大楼的时间是中午，暗示的句子里并没有指明时间，阿瓦登认为在中午前往应该是比较可以接受的。当穿着深绿军大衣，耳朵上别着旁观者的阿瓦登来到辛普森大楼的入口时，他的心开始忐忑不安地跳跃起来。他在上一星期设想了无数种可能发生的情景，而现在这个谜底就要揭晓了。无论在周日效率大楼会发生什么，也不会比现在的生活更加糟糕，阿瓦登心里想，所以他并不怎么害怕。</p>\n<p>他走进大楼内部，发现这里的人也很少，空旷的走廊里只听到他哒哒的脚步声与回音。一部老电梯里贴着“缔造美好网络家园”的广告，以及一个充满了正义感的男性头像海报，背景是星条旗，他在纸里用右手食指指向观看者，头上写着一行字是“公民，请使用健康词汇。”阿瓦登厌恶地转过身去，发现另外一侧也贴着同样的海报，避无可避。</p>\n<p>值得庆幸的是五楼很快就到了，电梯的门一开，对面的门上就赫然挂着B户的牌子。门是掉了漆的绿色，门框上还点了几滴墨水，一部简易的电子门铃挂在右上角。</p>\n<p>阿瓦登深深吸了一口气，伸手去按电纽。</p>\n<p>电铃响起，很快屋子里传来脚步声。阿瓦登觉得这脚步的韵律很熟悉，似乎是在哪里见到过。门“咔拉”一声被打开一半，一名年轻女子一手握着把手，把身体前倾望着阿瓦登，警惕地说：</p>\n<p>“你，找谁？”</p>\n<p>女子疑惑地问道。阿瓦登一下子就认出了她的声音，就是那个在网络部BBS论坛科柜台后面的女性。她很漂亮，穿着墨绿色绒线衫，头上梳着这时代流行的短发，皮肤特别的白，只有嘴唇能看到一些血色。</p>\n<p>看着女子的眼神，一瞬间阿瓦登不知道该说什么好，犹豫了一下，他举起右手，轻声回答说：“title。”</p>\n<p>阿瓦登不知道这句话能否奏效，也不知道自己是否真的找对了地方，但这是他唯一能想到的回答了。他紧张地望着那女子，假如那女子忽然报警，那么自己就会被抓起来仔细审问为什么无缘无故跑到陌生人家里。“肆意游走罪”只比“使用敏感词汇罪”轻那么一点。</p>\n<p>女子听到他这么说，脸上还是毫无表情，只是把头幅度很轻微地点了一下，右手谨慎地做了一个“进来”的手势。阿瓦登刚要张口，那女子严厉地瞪了他一眼，吓的他把话又吞回去了，乖乖地跟着她进了屋子。</p>\n<p>一进屋子，女子首先做的就是把门关好，然后拉起来一层铅灰色的门帘挡在门口。阿瓦登不安地眨着眼睛，趁她拉门帘的时候环顾四周。这屋子是标准的两室一厅，在厅里摆放的是一套双人沙发与一个茶几，茶几上居然还有几束红紫色的塑料花。靠墙是电脑桌和电脑，墙上挂着普通的白色日历，但被主人用粉红色的纸套了边，看起来颇为温馨。一盏粗笨的日光灯从天花板上垂下来，上面象是恶作剧一样挂了几缕绿色的电线，象是垂下藤蔓的葡萄架。阿瓦登注意到厅口的鞋架上有四双鞋，尺码不同，说明今天的客人并不只他一个。</p>\n<p>阿瓦登正踌躇不安，忽然女子从背后拍了拍他的肩膀，示意他朝里面走。于是两个人穿过客厅另一侧的短小回廊来到其中一间卧室。卧室上挂着同样质地的铅灰色帘子，女子伸手举起帘布，推开了门。阿瓦登迈了进去，首先映入眼帘的是三名面带微笑的人类，以及一间用真正的鲜花装点的房间。屋子里有很多旧日记忆里的古老物品，比如一幅印象派的油画、一尊乌干达木雕，甚至还有一个银烛台，唯独没有电脑。</p>\n<p>他正在迟疑，女子也进了屋子。她谨慎地拉好门帘关上门，将耳边的旁观者取下，回过身来对阿瓦登用曼妙的声音说道：</p>\n<p>“欢迎加入说话会！”</p>\n<p>“说话会？”</p>\n<p>出于习惯，阿瓦登并没有把这三个字说出口，因为他不确定是否“健康”，只是用眼神表示自己的疑惑。</p>\n<p>“在这里你可以随便说话，这个该死的东西不会起作用的。”女子把自己的旁观者晃了晃，那个小东西象死掉了一样，对女子句子里两个敏感词汇“随便”和“该死”充耳不闻。</p>\n<p>阿瓦登一下子想到上星期在公共汽车站前碰到的男子，如果他摘下旁观者，会不会也会落到同一境地呢？那女子见他犹豫不决，指了指门口的铅灰色门帘说：“放心好了，这里是可以屏蔽掉旁观者信号的，不会有人觉察到。”</p>\n<p>“你们，是什么，人，这，是，哪里？”</p>\n<p>阿瓦登一边摘下耳朵上的旁观者，一边小声说道，语调还是改不了那种有关部门规定的说话方式。</p>\n<p>“这里是说话会，是一个完全自由场所，在这里你可以畅所欲言，请不要拘束。”</p>\n<p>另外一个人起身对他说道，这是一名瘦高的中年男子，鼻梁上的眼镜非常地厚。</p>\n<p>阿瓦登嗫嚅着，却找不到发音的焦点，在四个人的注视下显得窘迫不堪，脸都要红起来。女子同情地看了他一眼：“可怜的家伙，不用太紧张，每一个刚到这里的人都是这样。慢慢就习惯了。”</p>\n<p>她把手搭到阿瓦登的肩上：“我们其实见过的，当然，我见过你，而你没见过我。”她一边说，一边将自己的头发解下来，原来她留的是一头齐肩的乌黑长发，头发披下来的一瞬间阿瓦登觉得她真的很美。</p>\n<p>“我……我记得你，记得你的声音。”阿瓦登终于说出了一句完整的话，虽然不够流畅。</p>\n<p>“是吗，那可太好了。”女子笑起来，拉着他的手，让他坐到沙发上，递给他一杯水。阿瓦登注意到这是一个款式古老的茶杯，上面还刻着花纹，杯子里的水带着浓郁的香气，阿瓦登尝了一点，那种甜丝丝的味道对喝惯纯净水的舌头来说刺激格外地大。让他觉得浑身一下子被注进了许多活力。</p>\n<p>“弄到这个可不容易，我们也不是每周都能喝到。”女子坐到他身边，两只乌黑的眼睛注视着他，“你是怎么知道这个集会的？”</p>\n<p>阿瓦登把发现光盘暗示的过程说了一遍，其他四个人都赞许地点了点头。“果然是个聪明人，脑筋还没被陈腐的空气腐蚀掉。”一个三十多岁的胖子称赞道，他的嗓门大的要命。那个戴眼镜的中年人把两只手交叉在一起，表示赞同。</p>\n<p>“这正是天生的说话会成员，聪明、敏锐，而且不甘屈从于沉默。”</p>\n<p>“那么。”胖子提议，“先让我们鼓掌欢迎说话会的新成员吧。”</p>\n<p>于是四个人鼓起掌来，小小的屋子里响起一片掌声。阿瓦登羞涩地举起杯子做回应，他还不太习惯这样的场面。等到掌声稍息，他抬起头怯生生地问道：</p>\n<p>“可以问个问题吗？说话会到底是什么？”</p>\n<p>带他进屋的女子伸出食指，在他鼻子前两公分的地方比了一比，解释道：</p>\n<p>“说话会，就是可以畅所欲言的集会。在这里你不必顾忌什么，说出任何你想说的东西。这里没有敏感词汇，也没有健康互联网络。这里是绝对自由的空间，你可以尽情释放你的灵魂，舒展你的身体，没有任何禁锢与束缚。”说着说着，她的声音变的高亢、奔放，里面饱含了许多早已经被屏蔽掉的词汇，阿瓦登不曾听到这样流畅连贯的话语很久了。</p>\n<p>“我们的宗旨就是，说话，就这么简单。”中年人扶扶眼镜，补充道。</p>\n<p>“可是，要说些什么呢？”阿瓦登又问道。</p>\n<p>“任何事情，你心里想的任何事情都可以说出来。”中年人露出宽和的笑容，“尤其是那些被美国政府限制的思想。”</p>\n<p>这可真是一个大胆的集会啊，这分明就是犯罪，阿瓦登心想，但他发觉自己却被这种犯罪慢慢地吸引住了。</p>\n<p>“当然，有件事我们会事先说明。说话会是危险的，每一个成员都冒着被有关部门拘捕的风险。联邦执法人员也随时可能破门而入，以非法集会以及非法使用不合法词语的名义把我们抓起来。你现在有权拒绝加入，并且离开。”</p>\n<p>阿瓦登听到女子的警告，心里一度犹豫起来。但一想到此刻离去的话，那么又要开始持续那种窒息的泥沼生活，他就难以压抑自己的烦闷。阿瓦登第一次发现，原来“说话”对他来说是一个致命的诱惑，他先前并不知道自己原来是如此地渴望着说话。</p>\n<p>“我不会离开的，我要加入你们，说话。”</p>\n<p>“那太好了。唔，那么不妨就从自我介绍开始吧。”女子高兴地说，同时站起身来，把右手搭到胸前，“从我开始。我的名字叫阿尔特弥斯，至于网络编号和身份证号码，让他们见鬼去吧！谁会去管那个！我有我自己的名字，我不是数字。”</p>\n<p>她的话让所有人包括阿瓦登都笑了起来。接着她继续说道：“不过，这其实只是一个假名，这是希腊神话里的女神。”</p>\n<p>“假名？”</p>\n<p>“是的，和我户籍本上的名字是不同的。”</p>\n<p>“可是，为什么？”</p>\n<p>“你不会对自己在档案里的名字厌倦吗？我想起一个自己喜欢的名字，哪怕只有一次机会也好，自己想叫什么就叫什么。在这个说话会里的每一个人都有一个自己喜欢的名字，我们彼此拿这个称呼。”</p>\n<p>阿瓦登若有所思地点点头，他很理解阿尔特弥斯的想法。事实上当他在使用网络论坛的时候，也希望能够自己取一个称心如意的名字，而不是被分配一个用户名。</p>\n<p>通过介绍，阿瓦登了解到阿尔特弥斯是网络部BBS论坛管理科的职员，今年23岁，未婚，最讨厌蟑螂和蜘蛛，喜欢缝纫与园艺，屋子里的花就是她偷偷从城市边缘摘回来的。</p>\n<p>接下来是那名中年人，他自我介绍说名字叫兰斯洛特，41岁，是城市电厂的一名工程师；兰斯洛特这名字出自英国的亚瑟王传说，是一名忠贞的骑士。他有自己的老婆和两个孩子，一男一女；男孩三岁，女孩四岁，他们最喜欢吃的就是柠檬味道的水果糖。说到这里，兰斯洛特说希望下次聚会能把他们也带了，孩子们正是学说话的时候，他想教给他们真正的说话。</p>\n<p>那个三十多岁的胖子是网络部的一名网管，叫瓦格纳。这个身份让阿瓦登吃惊不已，他的印象里网管都是些绷着脸全无表情的冷漠生物，但眼前的瓦格纳脸圆滚滚的，油光锃亮，嘴边两条翘起的小胡子神气十足。他喜欢的是雪茄和歌剧，利用网管的特权这两样东西都不难弄到。</p>\n<p>“这个能屏蔽掉信号的门帘就是他弄的。”阿尔特弥斯补充说，瓦格纳冲她做了个“乐意为您效劳”的手势，然后点燃了雪茄，把它放到嘴里，很快屋子里就笼罩起一片稀薄的烟雾。</p>\n<p>说话会的第四名成员是一位穿着黑色制服的女性，今年刚满三十。她的名字是杜拉丝，城市日报（那个时代的报纸已经全部都数字化了）的编辑，她比阿尔特弥斯还瘦，颧骨高高耸起，眼窝身陷，两片薄薄的嘴唇即使在最说话的时候也很少分开，看不到牙齿。爱好是饲养狗和猫，尽管她并没有养。</p>\n<p>“那么，到你了。”阿尔特弥斯对阿瓦登说。阿瓦登想了想，结结巴巴地把自己的情况说了一遍，当谈到自己的爱好时候，他一时间居然想不到自己喜好什么，似乎什么都没有，在那之前他甚至从来没想过。</p>\n<p>“那，你最想做的是什么事呢？”阿尔特弥斯把手再一次放在他肩上，诱导着问道。</p>\n<p>“真的什么都可以？”</p>\n<p>“什么都可以，在这里没有任何限制。”</p>\n<p>阿瓦登觉得自己终于找到机会了，他咳了一声，抓抓头，脱口而出一句响亮的叫喊：“FUXKYOU, YOUSONOFBITCH！”</p>\n<p>在一瞬间，在座的四个人都被他这句话震惊了。瓦格纳率先反应了过来，他先叼住雪茄，用力鼓掌，然后用右手把雪茄取下来，张嘴大声地赞叹道：“真棒，痛快，这简直是最完美的入会誓词。”</p>\n<p>“我宁可听十遍这样的脏话，也不想再去碰那个乏味的电子女声。”兰斯洛特也是一脸陶醉，毫不掩饰自己对电子女声的厌恶。而阿尔特弥斯和杜拉丝全都咯咯地笑起来，杜拉丝发现自己的笑容幅度大了一点，不好意思地把嘴掩住。阿瓦登觉得他们与其说是觉得新奇，不如说是在享受这句脏话所带来的对体制的蔑视与挑战。</p>\n<p>“那你叫希望自己叫什么名字呢？” 阿尔特弥斯歪着头问。</p>\n<p>“唔……王二。“ 阿瓦登沉吟了一下，回答说。这是一个中式的名字，他以前有一个中国人朋友，喜欢讲故事，故事里的主角名字总是叫王二。</p>\n<p>屋子里的气氛现在完全融洽了，大家都开始谈些比较自然的话题，每个人都摆出了最舒服的姿势，阿尔特弥斯不时拿起茶壶来为大家续水。阿瓦登紧张的心情逐渐放松下来，他感觉到自己的脑子前所未有地轻松。</p>\n<p>“你知道的。”阿尔特弥斯又给他倒了一杯甜水，“我们一直想把说话会保持在一定规模，平日是没有办法畅所欲言的，我们需要空间。麻烦的是，我们没办法公开征集会员，又不可能直接通过物理接触去寻找，那风险太大。于是兰斯洛特就设计了一套暗示系统，只有发现这些暗示的人才能知道本会的存在。”</p>\n<p>“这套系统考虑到的还不止是安全问题。”兰斯洛特把自己的眼镜摘下来仔细擦拭了一下，得意地说，“这其实也是一个会员资格验证。说话会所吸纳的成员，必须有智慧，有头脑，内心渴望激情，并且对自由有着渴望。”</p>\n<p>瓦格纳用两根指头夹着雪茄，在事先准备好的烟灰缸里弹了弹烟灰，大声说道：“据我的经验，申请BBS论坛服务的人，大多数都是为了怀旧，或者说渴望一些新鲜的东西，这样的人往往都怀有激情，认为BBS论坛也许能给他们一些与现实不一样的东西——当然，事实上并非如此，美国政府对BBS论坛的管理甚至严厉过电子邮件——这暗示着他们心里渴望解脱束缚。因此我们将暗示隐藏在申请BBS论坛的光盘之中，只有申请人才有机会接触到这些暗示。而只有那些有智慧、观察敏锐的人才会发觉到这些暗示的存在，并顺利解读出来，找到这里。”</p>\n<p>“归根到底，说话会也不过是一群渴望自由说话的秘密小团体罢了。”兰斯洛特笑道。</p>\n<p>“你是第二个找到说话会的人，第一个是杜拉丝小姐。”</p>\n<p>阿尔特弥斯告诉阿瓦登。阿瓦登敬佩地看了杜拉丝一眼，后者淡淡地回答道：“这没什么，这是我的工作，我的工作就是摆弄文字。”</p>\n<p>阿瓦登想到上一周在公共汽车站碰到的那个疯狂男子，于是把这件事讲给其他成员听。听完之后，兰斯洛特摇了摇头，从嘴唇里滑出一声叹息：</p>\n<p>“这样的事情我也是见过的，我的一个同事就是如此。所以说话会的存在是必要的，这是缓解压力的阀门。长时间的敏感词汇限制会让人都疯掉的，因为他们既无法思考又没办法表达。”</p>\n<p>“这正是美国政府有关部门所希望看到的，这样只有傻瓜能够存活下来，一个全是傻瓜的社会是稳定的。” 瓦格纳费力地把自己肥胖的身躯挪了一下位置，轻蔑地说。</p>\n<p>“你也是有关部门的一分子，瓦格纳先生。”阿尔特弥斯一边往茶杯里续了些热水，一边抬头轻声说道。</p>\n<p>“阿尔特弥斯小姐，我只是一个能比普通人多使用几个敏感词汇的普通人而已。”</p>\n<p>大家都笑了起来。阿瓦登从来没有见过这么多的人说这么多的话，这是前所未有的奇妙经验。他惊讶地发现自己居然很快就融进了这个小圈子里，隔阂与陌生感很快就消失了；同时消失的还有胸闷与头晕等习惯性的毛病。</p>\n<p>很快话题就从说话会本身扩展到了更加宽泛随意的话题，阿尔特弥斯唱支歌，兰斯洛特说了几个笑话，杜拉丝则给大家讲了美国南部诸州的风土人情；瓦格纳甚至还唱了一段歌剧，虽然阿瓦登一个字也听不懂，但他一点也不吝惜掌声。在这个城市的某一个被屏蔽掉的角落里，五个不甘沉默的人正在享受着在这个时代视为奢侈品的事情——说话。</p>\n<p>“王二，你可曾看过《1984》？”</p>\n<p>阿尔特弥斯忽然问道，她就靠着阿瓦登坐下，阿瓦登摇摇头，反问道：“这是网络编号的一段么？”</p>\n<p>“这是一本书的名字。”</p>\n<p>“书？”阿瓦登听到这个名词，头摇的更大了。这是个古老的名词，在这个电脑技术非常发达的时代，网络可以承载一切信息，任何人都可以在网上图书馆查到电子版；因此有关部门认为实体书籍变成了一种没有必要存在的浪费，实体书也就逐渐消亡了。瓦格纳对此的评论是：“有关部门喜欢电子书籍的心情是可以理解的，电子书籍的话，只需要FIND和REPLACE两个命令就可以消灭掉全部不健康词汇，替一本书消毒；而实体书籍的校对与修订却是件旷日持久的工作。”</p>\n<p>“这是一本伟大的书，是旧世界哲人们对我们这个时代的预言。”阿尔特弥斯认真地说。“它很早以前就洞察到了肉的束缚与解脱，灵的束缚与解脱，这是说话会的基石。”</p>\n<p>阿瓦登不无惊奇地发现他的网络编号开头恰好是这这本书名字：19842015。</p>\n<p>“那么，该怎么样才能看到呢？”阿瓦登盯着阿尔特弥斯乌黑色的眼睛问。</p>\n<p>“我们也无法找到纸质版，网络图书馆不可能存在这样的书。”兰斯洛特摇摇头，然后重新露出笑容，左手向着杜拉丝摆了个请的姿势，“但我们的杜拉丝小姐应该为她的记忆力而自豪，她在很早已经有幸阅读过这两本书，并且能够记得里面的大部分文字。”</p>\n<p>“太好了，然后她写下来了，对吗？”</p>\n<p>“那太危险，这时代持有实体书是个大罪过，也容易让说话会暴露。我们只是在每次聚会的时候请杜拉丝小姐为我们背诵。既然是说话会，那么把这两个故事讲出来不是更名符其实吗？”</p>\n<p>大家都安静下来，杜拉丝站起来走到屋子中央，其他四个人坐在旁边看着她。阿瓦登不经意地把手搂在阿尔特弥斯肩上，后者微微朝这边靠过来，女性头发的幽香“咝咝”地划过他的鼻子，让他的心里一阵荡漾。屋子里非常暖和，他分不清这是花香还是阿尔特弥斯的味道。</p>\n<p>杜拉丝的声音并不高，不过却很清晰有力；她的记忆力确实惊人，不仅记得情节，包括一些细节和句子都可以复述下来。杜拉丝讲到了朱丽亚假装摔倒，然后偷偷递给温斯顿一张写着“我爱你”的纸条，绘声绘色，这让听众们都听的入神了，阿尔特弥斯听的尤其认真，以至于都没有注意到阿瓦登一直注视着她。</p>\n<p>“1984的作者预见到了专制的进步，却没有预见到技术的进步。”瓦格纳在杜拉丝停下来喝水的时候发表自己的评论，阿瓦登觉得他与外貌不太相称，是个很有洞察力的技术官僚。</p>\n<p>“在大洋国人们还可以靠传递纸条来偷偷表达自己的想法，但是现在不一样了。美国政府有关部门把我们全赶到了网上，而在网络技术发达的今天，我们即使想发一条短信都会被系统或者网管看的一清二楚，无从遁形。现实里呢，还有旁观者在。”瓦格纳在腿上敲了敲雪茄根部，“一句话，技术是中性的，但技术的进步会让自在的世界更自在，集权的世界更加集权。”</p>\n<p>“这句话说的很有哲学家的味道哟。”阿尔特弥斯冲瓦格纳挤了挤眼睛，从抽屉里取来一把饼干和曲奇散发给大家。</p>\n<p>“就好象同样是0和1，有的人就能写出工具软件，有人却拿那个编出恶性病毒？”</p>\n<p>阿瓦登想到一个类似的比喻，瓦格纳听了以后满意地打了个响指。</p>\n<p>“很不错的比喻，王二，就是如此，真不愧是程序员。”</p>\n<p>谈话持续了不知道有多久，杜拉斯看了一眼墙壁上的挂钟，连忙提醒谈兴正浓的四个人时间快到了。说话会不能持续很长时间，旁听者被屏蔽的越久，暴露的危险就越大。</p>\n<p>“那么好吧，我们就抓紧最后半个小时来完成今天的活动。”</p>\n<p>阿尔特弥斯一边说着，一边将桌子上的空杯子收走。兰斯洛特和瓦格纳也都站起身来，活动一下已经有些酸疼的肩膀和腰，只有杜拉丝坐在位子上没有动。</p>\n<p>“活动？还有什么活动？”</p>\n<p>阿瓦登奇怪地问道，说话会除了说话还有其他活动？</p>\n<p>“唔，对啊，我们还有其他活动。”阿尔特弥斯撩起额前的长发，对他妩媚一笑：“我们还会和对方完全交流。”</p>\n<p>“完全交流？”</p>\n<p>“就是intercourse”</p>\n<p>“………………”阿瓦登一下子变的脸色苍白，呼吸急促起来，仿佛胃里被灌进去零下三十度的寒风，他几乎不相信自己的耳朵。</p>\n<p>“说话会有说话的自由，也有选择与谁上床的自由。”阿尔特弥斯毫不羞涩地说，“我们互相谈话，然后选择合适的人做爱，就象我们选择我们喜欢的词汇说话一样。”</p>\n<p>兰斯洛特看阿瓦登很窘迫，走过去拍拍他的肩膀，慢慢地说：“当然，我们不会强迫任何人，这完全是在自愿的基础上。今天我还要早点回去照顾小孩，你们人数正好合适。”</p>\n<p>阿瓦登的脸色涨红，热的仿佛夏季的电脑CPU，他甚至不敢多看阿尔特弥斯一眼。他憧憬过女性很长时间，但如此接近还是第一次。</p>\n<p>还要回家去照顾小孩子的兰斯洛特向大家道别后就先行离去了，阿尔特弥斯将房间留给瓦格纳与杜拉丝，然后带着惶恐不安的阿瓦登来到了另外一间房间。这间显然是阿尔特弥斯的卧室，屋子里很简单，但却收拾的十分干净，在床上枕头旁还摆着一个手制的布娃娃，床单和窗帘都是粉红色的。</p>\n<p>最初的是由阿尔特弥斯主动开始的，丝毫没心理准备的阿瓦登只是被动地任她摆布。经过了几轮挑逗，阿瓦登才逐渐放开，任由潜藏在自己心内的原始欲望奔流出来，那种期待听到圆润女声的青春憧憬本来只是苦闷生活的意淫，而在今天它加倍实现了。很快这种憧憬与他在现实中被压抑的郁闷合流，转化成了猛烈的冲动，让他一次又一次与阿尔特弥斯融为一体。阿瓦登不知道这种冲动和他想大声说出“FUXKYOU, YOUSONOFBITCH”冲动有什么不同，不过现在不是考虑这个的时候，他现在脑子里想的只有尽情地、全无束缚地让自己释放激情，完全没有任何束缚。</p>\n<p>强烈的刺激一波波地冲击着兴奋中枢，最终一阵快感浪潮在狂暴洋面扬起头来，达到了一个极高的顶端。阿瓦登在那一瞬间感觉到了前所未有的自由，那种轻盈无比的自由，以及因自由而生的快乐与疲惫。浑身是汗的他喘息着倒在了阿尔特弥斯身上，一阵舒畅的倦意如潮水般淹没了他的身体……</p>\n<p>……当他醒来的时候，发现阿尔特弥斯躺在自己身边，赤裸的身体好象一尊白玉雕像，睡姿恬美静谧。他侧过身子去，慵懒地打了个呵欠，然后阿尔特弥斯睁开了眼睛。</p>\n<p>“很舒服，对不对？”她问道。</p>\n<p>“是啊……”阿瓦登不知道该说什么好，他顿了顿，犹豫地说道：“你以前和兰斯洛特、瓦格纳他们也……呃，我是说，象刚才那样子过吗？”</p>\n<p>“是的。”阿尔特弥斯温柔地回答，她半支起胳膊，长发从肩膀披到了胸口。她的大方坦白反而让阿瓦登有些不知所措。屋子里出现了一段时间的沉默，然后阿尔特弥斯忽然开口问道：</p>\n<p>“还记得今天杜拉丝讲的那段故事吗？女主角偷偷递给男主角写着“我爱你”的纸条。”</p>\n<p>“唔，还记得。”阿瓦登回答，很高兴终于能从那个拙劣的话题摆脱出来了。</p>\n<p>“在有关部门的健康互联网络词汇列表里，没有爱这个字呢。在我们这个时代，我爱你也是一个敏感词汇，被屏蔽掉了。”阿尔特弥斯的眼神里似乎是感慨，又象是失落。</p>\n<p>“我爱你。”阿瓦登不禁脱口而出，他知道在这间屋子里可以说出任何自己想说的话，不必顾忌。</p>\n<p>“谢谢你。”</p>\n<p>阿尔特弥斯听到之后只是笑了笑，起身穿上衣服，催促阿瓦登时间差不多了。阿瓦登有些失望，因为她没有预期反应的热烈，仿佛他刚才说的只是有些无关紧要的东西。</p>\n<p>这时候杜拉丝和瓦格纳已经离开了，屋子里只剩他们两个人。阿尔特弥斯把他送到门口，将旁观者交给他，然后叮嘱他说：“记得在外面绝对不要提及说话会的任何事情或者任何人，我们在说话会以外的地方是完全不认识的。”</p>\n<p>“我记住了。”阿瓦登回答，然后转身要走。</p>\n<p>“王二。”</p>\n<p>阿尔特弥斯忽然叫道，阿瓦登连忙转身，还没等他反应过来，两片柔软温暖的嘴唇忽然贴到了他的双唇，然后是一个细切的声音在耳边响起：“谢谢你，我爱你。”</p>\n<p>阿瓦登觉得眼睛有些湿润，他戴上旁观者，推开门，重新步入到那一片令人窒息的世界中去，但他此时已与来时的心境大不相同。</p>\n<p>此后阿瓦登的精神面貌明显有了改善。他谨慎地享受着这种秘密集会的乐趣，并且乐在其中。每一周或者两周，他们五个人都会在周日秘密地举行说话会的活动，聊天，唱歌或者听杜拉丝讲1984的故事。阿瓦登同阿尔特弥斯又“完全交流”了几次，偶尔他也会跟杜拉丝“交流”。他有了两个身份，一个是现实中和网上的阿瓦登，编号19842015，还有一个是说话会里的王二。他很享受这个名字，觉得这就是自己另外的一个人生。</p>\n<p>有一次集会，他们谈到了敏感词汇的问题。阿瓦登记得很早的时候——他对这方面的记忆有点模糊——有关部门给出的是一份敏感词汇列表，由网站的内部管理人员秘密参考使用，他对如何演变成现在的局面大惑不解。那一天瓦格纳带了一瓶葡萄酒，兴致很高，于是索性给他们讲了讲“屏蔽”的进化史，身为网管的他经常可以接触到这些资料。</p>\n<p>在最开始美国政府只是单纯地屏蔽掉敏感词汇，但很快他们就发现这样的措施根本没有用处。很多人会采取在词组中夹杂符号或者数字的方式来绕开系统检查；于是有关部门不得不将这些近似敏感词汇也一一屏蔽掉。然而众所周知，数字与符号之间的组合方式是近乎无限的，只要你有想象力，就完全可以组合出一个新的词组而且不失掉他的原意。比如说“politic”这个词，就有“politi/c”、“政polit/ic”、“pol/itic”等近乎无限种表达方式。</p>\n<p>当有关部门意识到这个问题时，他们采取了新的策略。既然无法辨识词组，那么就用单词屏蔽。这一举措在一开始是奏效的，违规交谈的人显著减少，但很快人们就发现可以用同音字或者谐音的方式来继续表达自己的危险思想。即使有关部门封掉全部敏感词汇的同音字，也无济于事，思想活跃的美国人充分发挥了自己的想象力，使用隐喻，借代、类比、引申及其他修辞方法，或者将一个敏感词用数个不敏感的字来代替。人类的思维方式要比电脑开阔许多。电脑屏蔽掉一条路，他们还会有更多的路可以选择。</p>\n<p>这一场水面以下的角力看起来似乎是美国大众要取得胜利。这时候，一个具有逆向思维精神的人出现了。他的身份不明。有人说他是有关部门的主管；也有人说他是因过度使用敏感词汇而被捕的危险人士。无论他是谁，总之整个局面被扭转过来。他向有关部门建议，不再告诉大众禁止说什么，而是规定他们只能说什么，用什么方式去说。有关部门很快就心领神会，制订了新的规章制度：取消了敏感词汇列表，取而代之的是互联网络健康语言列表，并把这举措推广到了日常生活中的语言屏蔽系统中去。</p>\n<p>这一次，大众终于处于下风。以往他们与有关部门尽情地在网络与现实中捉着迷藏，而现在他们却被有关部门扼住了咽喉。这样一来，有关部门可以有效率地掌握住言论，因为整个语言的框架都被彻底控制了。在有限的空间内，大众几乎是无计可施。</p>\n<p>尽管如此，大众还是不屈不挠地将这场战争——或者说游戏——继续下去，他们挑选健康词汇列表中的合法字眼来表达不合法的意思：两个连续的“稳定”意思就是“反对”，“稳定”加“繁荣昌盛”则暗示“屏蔽”。美国政府不得不对这一动向保持着警惕，并日复一日地将更多的词汇从健康词汇列表里删掉，禁止大众使用。</p>\n<p>“当然，这场战争会持续下去的。只要世界上还存在着两个不同的字或者词组，那么就可以继续自由交流——你知道莫尔斯电码吧？”</p>\n<p>瓦格纳说到这里，拿起茶杯一饮而尽，满意地打了一个嗝。</p>\n<p>“可是，这场战争的代价就是语言的失落。表达能力会越来越贫乏，越来越淡而无味，人们会越来越倾向于沉默，这对有关部门反而是好事。”兰斯洛特摆出一副忧虑的表情，有节奏地用指关节敲击着桌面，“这样一来，岂不就等于是大众的自由意识将语言推向死亡的边缘？真讽刺啊。按照这个趋势，有关部门是不会败的，他们会笑到最后。”</p>\n<p>“不，不，笑这种情感他们是不会了解的。”瓦格纳淡淡地回答。</p>\n<p>“我倒是觉得，美国是一直处于恐惧的情感之中呢，生怕人们掌握了太多的词汇，表达出太多的思想，变的难以掌握。”阿尔特弥斯说完摆出一副她在上班期间冷若冰霜的呆板脸孔，学着僵硬的腔调喊了一句：“营造健康的网络环境，美国万岁！”</p>\n<p>杜拉丝、兰斯洛特与瓦格纳都哈哈大笑，唯一没笑的是王二（阿瓦登）。他对于兰斯洛特刚才的那句话始终耿耿于怀：大众与有关部门的对抗，其最终结局就是语言的消亡。那么他们现在这个小小的说话会，也只不过是在一列开向悬崖的列车里关上窗帘，享受坠毁前最后的宁静罢了。</p>\n<p>不过他没有说出口，因为这太煞风景了。阿瓦登不希望破坏说话会的气氛，这对他很重要。</p>\n<p>从说话会回到家里，阿瓦登躺在行军床上，双手枕着脑袋，陷入了沉思。自从加入说话会以后，他变的比以前更容易陷入思考。有时候他想的是这个社会、这个互联网络或者这座城市中存在的荒谬性；有时候他想的是自己的生活；还有时候他想的是阿尔特弥斯。他不知道是不是在一个压抑的世界里，人的情感会变的格外强烈，他现在陷入对阿尔特弥斯的迷恋无法自拔。阿瓦登一直很羡慕杜拉丝讲的《1984》里面的温斯顿，他和朱利亚有一间两个人独处的小屋，一个只属于他们两个人的小世界。</p>\n<p>他在与阿尔特弥斯“完全交流”的时候曾经吐露过自己的心声，阿尔特弥斯没有直接回答，而是表示两个人的关系无法再比说话会更近一步——维持现在的状态就已经是个人行为的极限，有关部门可不会一直打瞌睡。“我们只能把感情生活压缩在每周一次的说话会活动里，这已经很奢侈了。”她对他说，同时温柔地抚摩他的胸膛。“只有在说话会里，我们才是阿尔特弥斯和王二。而在其他时间里，你是19842015，而我是19387465。”</p>\n<p>对此，阿瓦登只能发出一声轻轻的叹息，确实他不该奢求更多。</p>\n<p>除了感情，发生变化的还有互联网络。自从加入说话会以后，阿瓦登逐渐发现互联网表面下潜藏的一些东西。正如瓦格纳在一次活动的时候指出，普罗大众与有关部门的战争从未结束，总会有思想和言论从严厉管制的缝隙中流泻出来。阿瓦登发现，在完全公式化的EMAIL与网络论坛中其实隐藏着不少耐人寻味的细节，就好象那个title一样，存在着各式各样的密码与隐藏寓意。这些东西出自不同人的手里，样式和破译方式都不同，阿瓦登不知道那些密码背后隐藏的是怎样的内容。不过有一点可以确知的是，说话会并不是唯一的一个地下集会，瓦格纳说的对，始终还是有人在试图用“健康”词汇表达“不健康”思想。</p>\n<p>讽刺的是，给阿瓦登感触最深的，是有关部门的管制。以往他只是模糊地感觉到自己被绑缚起来，现在他能清晰地看清这种束缚与压抑的脉络，以及加诸在自己身上的各种手段。在小小说话会中享受到的自在让他更加深刻地感受到在宽阔现实中的不自在。</p>\n<p>“FUXKYOU, YOUSONOFBITCH！”</p>\n<p>每一次的聚会，三位男士都会轻蔑地一起高喊这一句粗话。他们清楚这不会给有关部门带来什么不良影响，不过这确实很痛快。</p>\n<p>这一周，阿瓦登特别地忙碌，他的同事因为不明原因而被屏蔽掉了，这样一来整个项目就全压在了他一个人身上。这项目是为有关部分设计一种软件，用来控制大功率主动式“旁观者”的能源分配控制。软件很复杂，他不得不每天在电脑前工作十几个小时，只有在身体实在支撑不住的时候才停下来随便吃一点东西，喝一口纯净水，困了就躺在旁边的行军床上睡上一觉，爬起来继续工作。屋子里满是浑浊的烟味与袜子脏衣服的酸臭味，阿瓦登就在这种环境下蓬头垢面地敲着键盘，并不时揉揉满布血丝的眼睛。</p>\n<p>偏偏在这个时候屋子里的暖气坏掉了。洋灰色的暖气片从昨天开始就变的冰凉，不再有热水流动。阿瓦登检查了一下，发现并不是管道问题，而且邻居们也碰到同样的事，看来是供热系统出了问题。这一变故的正面影响是稍微淡化了屋子内的酸臭味，负面影响是整个屋子变的有如冰窖一样。紧闭的窗户和门能挡住寒风，却挡不住寒冷，低温让本来就寒酸的房间更笼罩上一层霜气。无论是那把木椅还是行军床都象是冷酷的冰雕，屋子里唯一还有些热气的就只剩下电脑。阿瓦登不得不披上所有的御寒衣物，蜷缩在床上，把电脑的散热口对准自己。</p>\n<p>有关部门宣布“供热”和“暖气”暂时也被列入敏感词汇，于是阿瓦登没办法写信向供热部门询问，只好静待，除了用来敲键盘的指头以外，尽量保持全身一动不动，以节约热量。在停止供暖后的第四天，暖气片里终于传来“哗啦哗啦”的声音，带着热气的水开始流动，屋子里恢复了温暖，“供热”和“暖气”又可以恢复使用了。于是EMAIL与网络论坛上全都是“庆祝有关部门恢复供应暖气，急人民之所急”的帖子，EMAIL新闻组里也全是类似主题。</p>\n<p>不过这对阿瓦登来说太晚了，他生了病，感冒，而且是重感冒。他面色苍白，全身软弱无力，头疼的象是被一枚达姆弹射入头部，只能躺在床上等医生。医生来到他家里，给他做了两三次点滴，喂了一些叫不上名字的药片，叫他静养。这一场病足足持续了数天，他不得不放弃参加这一星期的说话会，身体状况实在太差了，阿瓦登甚至怀疑自己搞不好会因此而死掉。</p>\n<p>阿瓦登躺在床上，心里懊悔不已，说话会是他唯一的乐趣，现在他却没办法参加。他把头蒙在被子里胡思乱想，瓦格纳这一次会带什么特别的东西来呢？兰斯洛特有没有把两个孩子也领过来？还有阿尔特弥斯，他没参加的话，她会和谁“完全交流”呢？瓦格纳还是兰斯洛特？他还想到了杜拉丝，上一次的聚会里，杜拉丝讲到了温斯顿在秘密幽会的屋子里对朱丽亚说“我们已经死了”，朱丽亚附和着说“我们已经死了”，这时候第三个声音说道“你们已经死了。”</p>\n<p>杜拉丝就讲到这里，就停住了。阿瓦登急切地想知道接下来发生了什么，第三个声音是谁，是党吗？温斯顿和朱丽亚是否会被捕，他们会有什么样的下场？不光是他，阿尔特弥斯也很希望知道后续情节的发展，不过她并没有去追问杜拉丝。</p>\n<p>“让这成为一个悬疑，这样接下来的一周我们的生活都会在期待的乐趣中度过。”她对阿瓦登说，然后两个人继续沉溺于intercourse的快乐。</p>\n<p>“也许他们都会死。”阿尔特弥斯在交流结束后，看着天花板说。</p>\n<p>“也许那只是奥布林的声音，他去探望他们。”阿瓦登安慰她道，但是他的心里也不确定。</p>\n<p>阿瓦登的病持续了十天，然后他终于痊愈了。他痊愈后的第一件事就是从床上爬起来，然后去看墙上的日历：这一天恰好是星期日，说话会活动的日子。阿瓦登已经缺席了一周，这已经令他如饥似渴，甚至做梦都在和他们一起喋喋不休地说着话——所幸他并没有说梦话的习惯，所以24小时工作的旁观者并没发出任何警报。</p>\n<p>阿瓦登简单地洗了一下脸，用一把有些生锈的剃刀沾着肥皂仔细地刮掉脸上粗硬的胡须，然后咕噜咕噜地刷了刷牙齿，用手和毛巾沾着热水将自己蓬起的乱发压下去。因为生病，有关部门发了一些补贴给他，其中包括两块羊角面包、两瓶姜汁啤酒和一份精制砂糖。他将这些东西都用塑料布仔细包好，揣到宽大的军大衣里，打算带到说话会上去与大家分享。</p>\n<p>今天的天气和往常一样地冷，阿瓦登把自己裹在大衣里，登上前往效率大楼的公共汽车。一路上车厢里的广播重复着“营造健康的互联网络”以及一些优秀网络用户的先进事迹；车厢前面的电子屏幕不断滚动显示着最新的健康词汇列表，一个旁观者自车顶垂下来睥睨着车内的每一个表情呆滞的人。阿瓦登坐在最后一排，望着窗外不断向后移动的建筑物与枯黄的树木发呆。</p>\n<p>车子很快就到达了辛普森大楼附近的车站，阿瓦登下了车，把手放到怀里摸了摸塑料布包着的食物，朝着大楼走去。他在半路无意中抬起头，忽然一阵冰冷的寒流刺入他的胸腔，迫使他停住了脚步。</p>\n<p>有什么地方不对劲！</p>\n<p>他看到了效率大楼的第五层阿尔特弥斯家的窗户发生了一些奇怪的变化。以前阿尔特弥斯家面向大街的窗户总是挂着粉红色的窗帘，而现在窗帘则被扯到了两边，窗户大开，用肉眼可以勉强看到窗玻璃和屋子里雪白的墙壁。假如今天有说话会的话，阿尔特弥斯绝对不会把有屏蔽效果的窗帘打开。而且打开窗户这件事也绝不寻常，在这个城市里的室外空气十分浑浊，几乎不会有人会去开窗换气。</p>\n<p>也就是说，今天并没有说话集会召开，而是发生了另外一些事情。阿瓦登望着那窗户，心情开始变的有些慌乱，他把手从兜里掏出来，叼起一支香烟，把身体靠在一根电线杆旁故做镇静，以免被行人怀疑。究竟说话会发生了什么，为什么这一周停办了呢？要知道，只要还有复数的成员能够出席，说话会就会一直办下去，难道说瓦格纳、兰斯洛特、杜拉丝和阿尔特弥斯同时无法出席？这种概率实在太小了。阿瓦登一边这样想着，一边向四周不安地张望。忽然他看到了一样东西，一个念头霎时占据了他的全部心灵，让他几乎眩晕过去。</p>\n<p>“说话会本周不会有了，以后也不会有了。”阿瓦登嘴唇默默地蠕动着，面如死灰。</p>\n<p>他看到在街道内侧一处不起眼的地方隐藏着一个类似雷达天线的东西，其造型很象是两个背部贴在一起的大碗。阿瓦登心里清楚这是什么东西：这正是他负责软件设计的大功率主动式“旁观者”，这造型他很熟悉。这装置可以主动发射电波去探测人们的声音，并检查其中是否存在敏感词汇。</p>\n<p>这样的装置居然就安放在阿尔特弥斯家附近，那么就等于说话会完全暴露在了有关部门的监控之下。主动式旁观者的强大刺探电波会轻易刺穿她家中的铅质窗帘，把所有成员的话原封不动地传到有关部门耳朵里。</p>\n<p>这是一个划时代的发明，这一技术的突破意味着有关部门可以不再被动地等待警报，可以主动出击去刺探人们在任何时间任何地点说的任何话语。阿瓦登可以想象接下来会发生什么，阿尔特弥斯他们的每一句话都被有关部门记录下来，会有机器统计出到底有多少违禁词汇被他们使用过；然后联邦警察会冲进她的屋子，将正在聚会的成员们都带走，只留下搜查过后空荡荡的房间和窗户。</p>\n<p>阿瓦登想到这里，心如刀绞，他一点也不为自己的侥幸逃脱而感到幸运。他的胃袋翻腾起来，一种恶心的感觉从胃里直接升到嘴边，让他想吐，却又不能吐——因为“呕”也是个敏感词汇；大病初愈的孱弱身躯无法承受这种打击，象害了风寒一样颤抖起来，几乎站立不住。</p>\n<p>他不敢继续朝前走去，仓皇地转过身去，登上另外一辆公共汽车，把嘴闭的更紧了。等阿瓦登回到自己家楼下，看到楼房附近另外一架新的主动式旁观者正在兴建中，漆黑的天线在半空舒展开来，仿佛一面巨大的蜘蛛网。看来有关部门已经着手在整个纽约市部署这种新兴高科技产品。</p>\n<p>他不敢驻足观看，低着头从那巨大装置旁边走过，一路不停地走回家，然后把自己的脸紧紧地压在枕头里，却不敢哭出声音来，连一句“FUXKYOU, YOUSONOFBITCH”都不能说。</p>\n<p>从那以后，阿瓦登的生活回到了普通状态——就是说和原来一样沉滞、压抑、欠缺激情，健康向上，缺乏低级趣味。兰斯洛特说过：“战争的结果就是，大众的自由意识会将语言推向死亡的边缘”，现在看来，他的预言是很准确的：说话会的覆灭，导致“说话”、“歌剧”、“完全”、“交流”几个词先后被剔除出了健康词汇列表，成为敏感词汇。</p>\n<p>另外，虽然阿拉伯数字还能用，但“1984”这一个数字组合也被屏蔽掉了，这让包括阿瓦登在内的程序员在编写程序时不得不谨慎地检查数字是否违规，这额外增加了很多工作量，让他更加疲惫。</p>\n<p>阿瓦登不是没有担心过，也许在某一天的深夜，他就会忽然接到一封EMAIL，让他留在家里不要动，不要试图在网络做任何动作；接着电话会响起，电子女声会把这一要求重复再重复，直到警察打开他家的大门，把他带去未知的地方，那里有未知的命运等待着他。《1984》后面的情节发展阿瓦登始终不知道，唯一知道的杜拉丝已经彻底失踪了，所以温斯顿和朱丽亚的结局始终是个谜；就好象兰斯洛特、瓦格纳、杜拉丝和阿尔特弥斯的结局一样，也不从得知。其实这两件事对于阿瓦登来说没什么本质性的区别，所以它们也可以看做是同一个谜。</p>\n<p>其实他最担心的，是阿尔特弥斯。每次想到这个名字，阿瓦登就难以抑制心中的郁闷。她究竟会怎么样，彻底被屏蔽掉吗？如果是那样，那么她在这世界上遗留下来的唯一痕迹，就是一个程序员记忆里的假名而已了。</p>\n<p>说话会消失后三个星期，仍旧风平浪静，没有任何人来找过阿瓦登，他也没收到过任何类似内容的EMAIL，阿瓦登一直在想，也许是他们没有吐露出自己的下落，也可能是因为他们根本不知道——他们认识的只是一个叫王二的程序员。这个城市里有数以千计的程序员，而王二是个假名。</p>\n<p>因此，生活一如既往地平静。不，确切地说，还是有一点不同的，那就是互联网络健康词汇列表：那上面的词组消失的速度比以前要快的快，每小时每分钟都有词与单字飞快地在名单上消失，阿瓦登不得不花上大量时间去更新列表，以跟紧当前形势。</p>\n<p>与词汇列表更新速度相对的，EMAIL和网络论坛上的东西越来越乏味。因为人们不得不用极有限的词去表达广泛的意思，大家都变得寡言少语。就连那些秘密的暗语和联系方式也少了许多；整个网络就象是前些天阿瓦登家里出了问题的暖气片一样：虽然名义上是给人带来温暖的东西，但却变的冰冷、僵硬，让人如坠冰窟。</p>\n<p>这一天，阿瓦登从电脑前抬起头来，他看了看窗外迷茫的灰色天空，胸口一阵抽搐，不由得痛苦地咳了一声。他拿起塑料杯，将杯子里的纯净水一饮而尽，杯子丢进同样是塑料质地的垃圾桶里，发出钝钝的撞击声，他觉得自己的脑子也是一团垃圾，举起手敲了敲，果然发出同样钝钝的撞击声。</p>\n<p>然后他拿起大衣，戴上墨绿色的护目镜，走出门去。阿瓦登没带便携式的旁观者，那东西已经不需要了，城市里到处都是主动式的旁观者，随时监听是否有违禁词汇的存在。整个纽约现在就象是互联网络一样，被有关部门营造成十分健康。</p>\n<p>阿瓦登这一次外出是有正当理由的，他决定去取消网络论坛服务，这服务已经用不着了，因为无论EMAIL，新闻组，BBS论坛还是其他什么现在全部都变成了一样的东西。</p>\n<p>从日历来说现在应该是春季，但外面还是很冷，高大的灰色建筑矗立在平地上，仿佛绝对零度下的石林。大团大团的风裹着黄沙与废气穿行其间，风沙无处不在，让人置身其中而难以摆脱。阿瓦登把手揣进兜里，脖子缩进领口，畏缩着向网络部的大楼走去。</p>\n<p>忽然，他停下了脚步，惊讶地站在原地无法动弹。他看到阿尔特弥斯正站在前面的路灯下，穿着黑色的制服。可是她的变化有多么大啊，面容象是老了十岁，满脸都是衰老的皱纹，年轻的活力荡然无存；她听到脚步声，转过头来，两个乌黑的大眼睛显得异常空洞，目光越过阿瓦登延伸到远方，没有一个明晰的焦点。</p>\n<p>阿瓦登万万没有想到会在这个时间这个地点碰到她，这让他已经沉寂已久的心灵泛起了几点火花，可惜他迟钝的神经已经无法表达出“激动”这一个简单的情感了。两个人互相对视了一阵，他终于木然走到她身边，张了张嘴唇，想对她说些什么。但是他掏出今天新发布的健康词汇列表，发现上面是一片空白——终于连最后一个词组也被有关部门屏蔽了。</p>\n<p>于是阿瓦登只好保持着沉默，默默地与面无表情的她擦肩而过，继续向前走去。他的身影逐渐融入同样安静的灰色人群之中，整个城市都显得寂静极了。</p>\n","excerpt":"","more":"<h2 id=\"作者-马伯庸\"><a href=\"#作者-马伯庸\" class=\"headerlink\" title=\"作者:马伯庸\"></a>作者:马伯庸</h2><hr>\n<p>And in the naked light I saw ten thousand people, maybe more.</p>\n<p>People talking without speaking, people hearing without listening.</p>\n<p>People writing songs that voices never shared, no one dared disturb the</p>\n<p>sound of silence.</p>\n<p>— The sound of silence</p>\n<p>美利坚合众国，2015年，纽约。</p>\n<p>当电话响起来的时候，阿瓦登正趴在电脑前面睡觉。电话铃声十分急促，尖锐，每一次振动都让他的耳膜难受好久。他揉了揉干涩的眼睛，十分不情愿地爬起来，觉得脑子沉滞无比。</p>\n<p>其实他的脑子一直就很沉滞，这种感受既然是生理上的也是心理上的。他身处的房间很狭窄，空气不很好，唯一的两扇窗户紧闭着——即使打开窗户也没用，外面的空气更加浑浊。这是一间大约只有三十平米的小屋子，屋子墙壁上泛黄的墙纸有好几处开始剥落，天花板上的水渍渗成奇怪的形状；一张老式的军绿色行军床摆在墙角，床腿用白漆写着编号；紧挨着行军床的是一张三合板制成的电脑桌，桌上摆着一台浅白色的电脑，机箱后面五颜六色的电线纠缠在一起，把它们自己打成一个古怪的死结，杂乱无章地蔓延到地板与墙角，仿佛常春藤一样。</p>\n<p>阿瓦登走到电话前，慢慢坐到地板上，目光呆滞地盯着电话，手却没有动。这部古怪的东西是老式的按键式电话，大概是十几年前的款式，这是阿瓦登有一次去费城出差时偶尔在一家杂货店里买到的；他拿回家以后稍微修理了一下，发现居然还能用，这让他当时小小地兴奋了一阵子。</p>\n<p>电话继续在响着，已经是第七声。阿瓦登意识到自己不得不去接听了。于是他弓下腰，用两个指头拈起电话，慢慢把电话放到耳边。</p>\n<p>“请说出你的网络编号？”话筒里传来的声音并不急噪，事实上它也不带其他任何的感情色彩，因为这是电脑合成的人工智能语音系统。</p>\n<p>“19842015”</p>\n<p>阿瓦登熟练地报出一连串数字，同时开始觉得胸有些更闷了。说实话他并不喜欢这些空洞的电子声音，他有时候想，假如打过电话来的是一位声音圆润的女性该多好。阿瓦登知道这是一种不切实际的幻想，不过这幻想会让他的身体得到几秒钟的舒缓。</p>\n<p>话筒里的声音仍旧在继续着。</p>\n<p>“关于你在十月四日提交的网络论坛用户注册申请已经被受理，经有关部门审查后确认资格无误，请在三日内持本人身份证件、网络使用许可证及相关文件前往办理登记手续，并领取用户名及密码。”</p>\n<p>“知道了，谢谢。”</p>\n<p>阿瓦登谨慎地选择词语，同时努力挤出一副满足的微笑，好象话筒的另一侧有人在看着自己一样。放下电话，阿瓦登先是茫然地盯着它看了大约两分钟，然后站起来活动一下手腕，坐回到电脑前面，缓慢地推动了一下鼠标。</p>\n<p>电脑屏幕“啪”地一声亮了起来，显示出一个登陆的界面，还有一行英文：“请输入你的网络编号和姓名。”阿瓦登将那八位数字敲进去，又输入了自己的名字，点击“登陆”。随即机箱的指示灯开始频繁地闪动起来，整个机器发出细微的噪音。</p>\n<p>每一个使用互联网的人都有一个网络编号，没有这个编号，就无法连接进互联网络。每一个编号都是独一无二的，每个人只有一个；这是使用者在网上的唯一代号，既不能修改，也不能取消。这些编号分别对应着使用者身份证上的名字，因此19842015就是阿瓦登，阿瓦登就是19842015。阿瓦登知道有些记忆力不好的人会把自己的编号印在衣服的后面，那看起来颇为滑稽，也容易引发一些不正当的联想。</p>\n<p>有关部门说使用网络实名制是为了规范网络秩序方便管理，杜绝因匿名使用网络而产生的一系列重大问题和混乱。阿瓦登不太清楚那一系列重大问题会是什么，他自己没试过用假名上网，他所认识的任何人里也不曾有人尝试过——事实上，从技术角度来说，他根本没办法匿名登陆互联网络，没有编号就没有权限上网，而编号则连接着他的详细档案，换句话说，没人能在网上隐藏自己。有关部门把这一切都考虑的很周详。</p>\n<p>“有关部门”，这是一个语意模糊、但却有着权威与震慑力的词组。它既是泛指，又是确指，其所涵盖的意义相当广泛。有时候，它指的是为阿瓦登颁发网络编号的美国联邦网络管理委员会；有时候它是将最新通告及法规发到阿瓦登EMAIL信箱的服务器；还有时候它是监察网络的FBI特属网络调查科；总之一句话，有关部门是无处不在，无职不司的，总会在适当的时候出现，给予指导、监控或者警告，无论你是在网上还是网下。</p>\n<p>简直就象是老大哥一样无微不至。</p>\n<p>电脑仍旧在持续运转着，阿瓦登知道这得花上一阵子。这台电脑是有关部门配发给他的，具体型号和配置阿瓦登并不清楚，机箱是被焊死的，无法打开。于是他拿出一小瓶清凉油，用右手小拇指的指甲挑出一点抹在自己的太阳穴，然后从脚下堆积如山的杂物里翻出一个塑料杯子，从桌子旁的饮水机里接了半杯蒸馏水，就着一片镇痛片一饮而尽。蒸馏水穿过喉咙和狭长的食道滑进胃里，空泛的味道让他有些恶心。</p>\n<p>音响里忽然传来一阵美国国歌的旋律，阿瓦登放下杯子，重新把目光投到电脑上去。这是已经连入互联网络的标志。屏幕上首先跳出来的是有关部门的通告，白底黑色四号字，里面陈述了使用互联网的意义以及最新的规章制度。</p>\n<p>“缔造健康的互联网络，美国万岁！”</p>\n<p>音响里传来激昂的男性呼声，阿瓦登不大情愿地跟着大声念了一遍。“缔造健康的互联网络，美国万岁！”</p>\n<p>这段呼号持续了三十秒钟，然后消失，取而代之的是写着“缔造健康的互联网络”标语的桌面背景。另外一个窗口慢慢浮上开，上面开列出几个选项：工作、娱乐、电子信箱和BBS论坛。其中BBS选项呈现灰色，说明这项功能还没有开通。</p>\n<p>整个操作系统简洁明了，这台电脑的浏览器没有地址输入栏，只是在收藏夹里有几个无法修改的的网站地址。理由很简单，这些网站都是健康向上的，假如其他站点和这些网站一样，那么只保留这些网站就够了；假如其他站点与这些网站不一样，那么就是不健康的，是低级趣味，不能保留。这是有关部门精心设计的，是为了公民的精神健康着想，生怕他们受到不良信息的侵染。</p>\n<p>阿瓦登首先点开了“工作”，一连串和他工作相关的站点列表与相关软件在电脑上显示出来。阿瓦登是一名程序员，他每天的工作就是根据上级的要求编写程序。这份工作很无聊，不过可以保证他有稳定的收入。他不知道自己的源代码会被用到哪里去，上级也从来没有跟他说过。</p>\n<p>他打算继续昨天的工作，但是很快发现自己很难继续下去。阿瓦登觉得今天的情绪比以前要烦躁，无法集中精神，大脑还是很呆滞，胸口仍旧发闷。他试图娱乐自己，但是他发现“娱乐”选项里只有纸牌与挖地雷，根据有关部门的说法，这是两个健康的游戏，没有暴力，没有色情，不会让人产生犯罪冲动，也不涉及任何政治色彩。据说美国境外也是有互联网络站点的，不过无法连上去，因为本国的互联网络自成格局，独立自主，普通人无法直接连接到国外——IE浏览器没有地址栏，就算知道地址也没有用处。</p>\n<p>“您有一封新邮件。”</p>\n<p>系统忽然跳出来提示，阿瓦登终于找到了可以暂停工作的理由，他很快移动鼠标到电子信箱的选项上，点开，很快一个新的界面出现了。</p>\n<p>“To: 19842015</p>\n<p>From：10045687</p>\n<p>Subject: 模块、已经、完成、当前、项目、是否、开始。”</p>\n<p>阿瓦登微微地叹了一口气，觉得有些失望。每一次他收到新的电子邮件，都希望能够有一次新鲜的刺激来撞击他日益迟钝的脑神经，每一次他都失望了。其实他早就知道这一点，只不过他觉得保持期待至少能够享受到几秒钟快感。就好象他期待着打电话过来的是一个圆润温柔的女性声音一样。不给自己一些渺茫的希望，阿瓦登觉得自己迟早会疯掉的。</p>\n<p>这封信很简短，但是内容很充实。19842015是阿瓦登的网络编号，而10045687则是他的一位同事的编号，这种工作性质的信件通常都以编号相称。信的内容是几个不连续的英文单词，这是有关部门所提倡的一种电子邮件书写方式，因为这样可以方便软件检查信件中是否含有敏感词汇。</p>\n<p>阿瓦登打开回信的页面，同时另开了一个窗口，打开一份名字叫做“网络健康语言词汇列表”的TXT文档。这是有关部门要求每一位网民所必须使用的词汇。当他们书写电子邮件或者使用论坛服务的时候，都得从这个词汇列表中寻找适合的名词、形容词、副词或者动词来表达自己想要说的话。一旦过滤软件发现网民使用了列表以外的词，那么这个词就会被自动屏蔽，取而代之的是“请使用健康语言”。</p>\n<p>“屏蔽”是个专有名词，被屏蔽的词将不允许再度被使用，无论是在书信里还是口头都不允许。讽刺的是，“屏蔽”一词本身也是被屏蔽的词汇之一。</p>\n<p>这个列表是经常更新的，每一次更新都会有几个词在列表上消失，于是阿瓦登不得不费劲脑汁寻找其他词语来代替那个被屏蔽掉的词语或者单字。比如在以前，“运动”这个词是可以使用的，但后来有关部门宣布这也是一个敏感词汇，阿瓦登只好使用“质点位移”来表达相同的意思。</p>\n<p>他对照着这份列表，很快就完成了一封文字风格与来信差不多的EMAIL——健康词汇表迫使人们不得不用最短的话来表达最多意思，而且要尽量减少不必要的修辞，所以这些信件就好象是那杯蒸馏水一样，淡而无味，阿瓦登有时候想，他早晚也会和这些水和信一样腐烂，因为这些信是他写的，水是他喝的。</p>\n<p>接下来阿瓦登启动检查软件先扫了一遍，确保自己没无意中加入什么敏感词汇。等这一切都完成后，他按下了发送键，邮件被送出去了。</p>\n<p>阿瓦登没有留下备份，因为他的机器里没有硬盘，也没有软驱、光驱或者USB接口。这个时代宽带技术已经得到了很大发展，应用软件可以集中在统一的一个服务器中，个人用户调用时的速度丝毫不会觉得迟滞。因此个人不需要硬盘，也不需要本地存储，他们在自己电脑里写的每一份文档、每一段程序、甚至每一个动作都会被自动传送到有关部门的公共服务器中，这样便于管理。换句话说，阿瓦登所使用的电脑，仅仅具备输入和输出两种功能。</p>\n<p>完成了这封信后，阿瓦登再度陷入了软绵绵的焦躁状态，这是一个连续工作了三天的程序员的正常反应。这种情绪很危险，因为它让人效率低下精神低迷，而且没有渠道发泄。“疲劳”、“烦躁”以及其他负面词汇都属于危险词汇，如果他写信给别人抱怨的话，那么对方收到的将会是一封写满“请使用健康语言”的EMAIL。</p>\n<p>这就是阿瓦登每天的生活，今天比昨天更糟糕，但应该比明天还稍微好一点。事实上这个叙述也很模糊，因为阿瓦登自己并不清楚什么是“好一点”，什么是“更糟糕”。“好”与“坏”是两个变量，而他的生活就是一个定量，只有一个常数叫“压抑”。</p>\n<p>阿瓦登推开鼠标，把脑袋向后仰去，长长地呼了一口气。（至少“呼”这个字还没有被屏蔽）这是空虚的表现，他想哼些歌，但却又不记得什么，转而吹了几下口哨，但那听起来与一只生了肺结核的狗差不多，只得做罢。有关部门象幽灵一样充斥在整个房间里，让他无法舒展自己的烦闷。就好象一个人在泥沼里挣扎，刚一张口就被灌入泥水，甚至无法大声呼救。</p>\n<p>他的头不安分地转了几转，眼神偶尔撇到了摆在地板上的老式电话机，他忽然想到还必须要去有关部门申请自己的BBS论坛浏览许可证。于是他关掉“工作”和“电子邮件”窗口，退出了网络登陆。阿瓦登在做这些事的时候毫不犹豫，他很高兴能够暂时摆脱互联网络，在那上面他只是一串枯燥的数字和一些“健康词汇”的综合体。</p>\n<p>阿瓦登找出一件破旧的黑色呢子大衣，那件大衣继承自他的父亲，袖口和领子已经磨损的很严重，个别地方有灰色的棉花露出来，但还是很耐寒。他把大衣套到身上，戴上一副墨绿色的护镜，用过滤口罩捂住嘴。他犹豫了一下，拿起“旁听者”别在耳朵上，然后走出家门去。</p>\n<p>纽约的街上人很少，在这个时代，互联网的普及率相当地高，大部分事务在网上就可以解决，有关部门并不提倡太多的户外活动。太多的户外活动会导致和其他人发生物理接触，而两个人发生物理接触后会发生什么事则很难控制。</p>\n<p>“旁听者”就是为了防止这种事而发生的，这是一种便携式的语言过滤器，当携带者说出敏感词汇的时候，它就会自动发出警报。每一位公民外出前都必须要携带这个装置，以便随时检讨自己的言语。当人们意识到旁听者存在的时候，他们往往会选择沉默，至少阿瓦登是如此。有关部门正逐步试图让网络和现实生活统一起来，一起“健康”。</p>\n<p>这时候正是11月份，寒风凛冽，天空漂浮着令人压抑的铅灰阴云，街道两旁的电线杆仿佛落光了叶子的枯树，行人们都把自己包裹在黑色或灰色的大衣里面，浓缩成空旷街道上的一个个黑点飞快移动着。一层若有若无的烟雾将整个纽约笼罩起来，不用过滤口罩在这样的空气里呼吸将会是一件很有挑战的事情。</p>\n<p>距离上一次离开家门已经有两个月了吧，阿瓦登站在公共汽车站的站牌下，不无感慨地想，周围的一切看起来很陌生，泛黄，而且干燥。那是上一次沙尘暴的痕迹。不过沙尘暴这个词也已经被屏蔽了，因此阿瓦登的脑海里只是闪过那么一下，思想很快就转移到别的事情上去了。</p>\n<p>站在阿瓦登旁边的是一个穿着蓝色制服的高个男人。他先是狐疑地看了阿瓦登一眼，看到后者沉默地沉在黑色大衣里，他的两只脚交替移动，缓慢地凑了过去，装做漫不经心对阿瓦登说：</p>\n<p>“烟，有吗？”</p>\n<p>男人说，每一个字都说的很清晰，而且词与词之间间隔也足够长。这“旁听者”还没有精密到能够完全捕捉到每一个人语速和语调的程度，因此有关部门要求每一位公民都要保持这种说话风格，以方面检测发言人是否使用了规定以外的词汇。</p>\n<p>阿瓦登转过头去，看了他一眼，舔舔自己干裂的嘴唇，回答说：</p>\n<p>“没有。”</p>\n<p>男人很失望，又一次不甘心地张开嘴。</p>\n<p>“酒，有吗？”</p>\n<p>“没有。”</p>\n<p>阿瓦登又重复了一次这个词，他也已经很久没有收到烟和酒了，也许是缺货的关系吧，这是常有的事。不过有一点很奇怪，“旁观者”这一次却没有发出警报。以阿瓦登的经验，以往一旦烟、酒或者其他生活必需品发生短缺现象，这个词就会暂时成为被屏蔽掉的敏感词汇，直到恢复供给为止。</p>\n<p>这个男人看起来很疲惫，红肿的眼睛是这个时代的人们普遍的特征，这是长时间挂在网上的关系。他的头发蓬乱，嘴边还留着青色的胡子碴，制服下的衬衣领口散发着刺鼻的霉味。能看的出，他也很久不曾到街上来了。</p>\n<p>阿瓦登这时候才注意到，他的耳朵上空荡荡的，没有挂着那个银灰色的小玩意“旁听者”，这实在是一件严重的事情。不携带“旁听者”外出，就意味着语言不会再被过滤，一些不健康的思想和言论就有可能孳生，因此有关部门相当严厉地规定公民上街必须携带旁听者。而这个男人的耳朵旁却什么也没有。阿瓦登暗暗吃惊，一时间不知道是该去提醒还是装做没看到。他暗自想，也许向有关部门举报会更好。</p>\n<p>这时候那个男人又朝他靠近了一点，眼神变的饥渴起来。阿瓦登心里一阵紧张，下意识地向后退去。这难道是一次抢劫？还是说他是个压抑太久的同性恋者？那个男人忽然扯住他的袖子，阿瓦登狼狈地挣扎却没有挣开。出乎他的意料，那个男人并没有进一步的动作，而是大吼一声，用一种阿瓦登已经不太习惯了的飞快语速向他倾泻起话语来。阿瓦登被这突如其来的爆发弄的莫名其妙，不知所措。</p>\n<p>“我只是想和你多几句话，就几句，我很久没有说过话了。我叫斯多葛，今年三十二岁，记得，是三十二岁。我一直梦想有一套在湖边的房子，有一副钓鱼竿和一条小艇；我讨厌网络，打倒网管；我妻子是个可恶的网络中毒者，她只会用枯燥乏味的话叫我的网络编号；这个城市就是一个大疯人院，里面大疯子管着小疯子，并且把所有没疯的人变的和他们同样疯狂；敏感词汇都去他X的，老*受够了……”</p>\n<p>男人的话仿佛一瓶摇晃了很久然后突然打开的罐装碳酸饮料，迅猛，爆裂，而且全无条理。阿瓦登惊愕地望着这个突然狂躁起来的家伙，却不知道如何应对；更可怕的是，他发现自己居然对他产生了一点同情，那种“同病相怜”式的同情。男人的话这时候已经从唠叨变成了纯粹谩骂，全部都是最直抒胸臆的那种。阿瓦登已经有五、六年不曾说过这些脏话，最后一次听到这些也是四年前。有关部门认为这都有碍精神文明，于是全部都屏蔽掉了。</p>\n<p>而现在这个男人就在公众场合对着他大吵大嚷，似乎要将被屏蔽掉的敏感词汇一口气全倒出来。他的目光和手势并不针对任何人，甚至也不针对阿瓦登，更象是在一个人在自说自话。阿瓦登的耳膜似乎不习惯这种分贝，开始有些隐隐做痛，他捂着耳朵，拿不定主意是干脆逃掉还是……这时候，远处街道出现两辆警车，一路闪着警灯直直冲着这座公共汽车站而来。</p>\n<p>警车开到站台旁时，男人仍旧在痛骂着。警车门开了，涌出了五、六名全副武装的联邦警察。他们扑过去将那个男子按在地上，用橡皮棍痛打。男人两条腿挣扎着，嘴里的语速更快了，骂出来的话也越来越难听。其中一名警察掏出一卷胶带，“嚓”地一声扯下一条向男人的嘴贴去。男人在嘴被胶带封住之前，突然提高嗓门，冲着警察痛快无比地喊了一句：“FUXKYOU, YOUSONOFBITCH！”阿瓦登看到他的表情由疯狂变成享受，面带着微笑，似乎完全陶醉在那一句话所带来的无上快感和解脱感中。</p>\n<p>联邦警察们七手八脚地将男人送进了警车，这时才有一名警察走到了阿瓦登的跟前。</p>\n<p>“他，是，你朋友？”</p>\n<p>“我，不，认识。”</p>\n<p>警察盯了他一阵，取下他耳朵上的“旁观者”查看记录，发现他并没有提及任何敏感词汇，于是重新给他戴回去，警告他说那名男子说的全部都是极度反动的词汇，要求他立刻忘掉，然后转身押着那男子离开了。</p>\n<p>阿瓦登松了一口气，其实刚才他有一瞬间涌现出一种冲动，也想在这空旷的街道上大喊一声“FUXKYOU, YOUSONOFBITCH”那一定很爽快，他心里想，因为那男子说出这句话的时候表情很享受。不过他也知道，这也是妄想的一种，“旁观者”紧帖在耳朵上的冰凉感觉时刻提醒着他。</p>\n<p>街上很快就恢复了冷清，十分钟后，一辆公共汽车慢吞吞地开进站里，锈迹斑斑的车门哗啦一声打开，一个电子女声响彻整个空荡荡的车厢：“请乘客注意文明用语，严格按照健康词汇发言。”</p>\n<p>阿瓦登把自己缩进大衣，压抑住自己异样的兴奋，决定继续保持沉默下去。</p>\n<p>大约过了一个小时，公共汽车到了目的地。从破碎的车窗玻璃里吹进来的寒风让阿瓦登脸上挂起一层暗灰色的霜气，面部被风中的沙砾和煤渣刮的生疼。他听到电子女声报出了站名，就站起身来，象一条狗一样抖抖身上的土，走下车去。</p>\n<p>车站对面就是阿瓦登要去的地方，那是有关部门负责受理BBS论坛申请的网络部。这是一间五层的大楼，正方形，全水泥混凝土结构，外表泛灰。如果没有那几个窗户的话，那么它的外貌将与水泥块没有任何区别：生硬、死气沉沉，让蚊子和蝙蝠都退避三舍。</p>\n<p>BBS论坛是一种奇特的东西，从理论上来讲它完全多余，BBS的功能完全可以由EMAIL新闻组来取代，后者更容易管理和审查。而且申请使用BBS论坛资格不是件容易的事，申请人必须要通过十几道手续和漫长的审查才能有浏览资格，浏览资格三个月才会被允许在指定论坛发布帖子，至于自己开设BBS则几乎是不可能。</p>\n<p>因此真正对BBS有兴趣的人少之有少。阿瓦登当初之所以决定申请BBS论坛资格，纯粹是因为他那种模糊但却顽强的怀旧心态，就好象他从杂货店里买的那部老式电话一样。他也不知道自己为什么会自找麻烦，也许是为了给生活带来些刺激，还是说为了强调自己和曾经旧时代的那么一点点联系，也许两者兼有之。</p>\n<p>阿瓦登恍惚记得在他小的时候，互联网与现在并不太一样。并不是指技术上的不同，而是一种人文的感觉。他希望能通过使用BBS论坛回想起一些当年的事情。</p>\n<p>阿瓦登走进网络部的大楼，大楼里和外面一样寒冷，而且阴森。走廊里没有路灯，蓝白色调的两侧墙壁贴满了千篇一律的网络规章条文与标语，冰冷的空气呼吸到肺里，让阿瓦登一阵痉挛。只有走廊尽头的小门缝隙里流泻出一丝光亮，小门的上面挂着一块牌子，上面写的是“网络部BBS论坛科。”</p>\n<p>一走进这间屋子，阿瓦登立刻感觉到一阵温洋洋的热气。屋子里的暖气（或者是空调）开的很大，让阿瓦登冻麻了的手脚和脸麻酥酥的，有些发痒，他不禁想伸出手去挠挠。</p>\n<p>“公民，请您站在原地不要动。”</p>\n<p>一个电子女声忽然从天花板上的喇叭里传来，阿瓦登触电似地把手放下，恭敬地站在原地不同。他借这个机会观察了一下这间屋子。这屋子准确来说应该是一个狭长形的大厅，一道拔地而起的大理石柜台象长城一样将房间割裂成两部分，柜台上还装着一排银白色的圆柱形栅栏，直接连到天花板。屋子里没有任何装饰，没有观赏植物，没有塑料鲜花，甚至没有长椅和饮水机。</p>\n<p>“缔造健康的互联网络，美国万岁。”</p>\n<p>阿瓦登跟着声音重复了一遍。</p>\n<p>“请前往八号窗口。”</p>\n<p>电子女声的语调很流畅，因为这是电脑制作出来的，因此没有敏感词汇的限制。</p>\n<p>阿瓦登转头看到在自己右手边的不远处，大理石柜台上的液晶屏幕显示着八号的字样。他走过去，拼命抬起头，因为柜台实在太高了，他只能勉强看到边缘，而无法看到柜台另一侧的情形。不过他能听到，一个人走到柜台对面，坐下去，并有翻动纸张与敲击键盘的声音。</p>\n<p>“请把文件放入盒子里。”</p>\n<p>柜台上的喇叭传来命令。出乎意料，这一次在喇叭里的声音却变了。虽然同样冷漠枯燥，但阿瓦登还是能分辨出它与电子女声的不同——这是一个真正的女性的声音。他惊讶地抬头望去，却什么都看不到，柜台太高了。</p>\n<p>“请把文件放入盒子里。”</p>\n<p>声音又重复了一次，语气里带着一丝烦躁，似乎对阿瓦登的迟钝很不满。</p>\n<p>“是的，这是真正的女声……”阿瓦登想，电子女声永远是彬彬有礼不带任何感情色彩的。他把相关的电子身份证、网络许可证、网络编号和敏感词汇犯罪记录等一系列个人资料卡片一起放进柜台外的一个小金属盒子里，然后把盒子插进柜台上一个同样大小的凹槽中，关好门。很快他听到“唰”的一声，他猜测这也许是对面的人——也许是个女人——将盒子抽出去的声音。</p>\n<p>“你申请BBS服务的目的是什么？”</p>\n<p>喇叭后的女声浸满了纯粹事务性的腔调。</p>\n<p>“为了、提高、互联网络、工作效率、为了、缔造、一个、健康、的网络、环境，更好地、为、祖国、做出、贡献。”</p>\n<p>阿瓦登一字一句地回答，心里知道这只是一道官方程序，只需要按标准回答就可以。</p>\n<p>对面很快就陷入沉默，大约过了十五分钟，喇叭再度响起。</p>\n<p>“最后手续确认，你已经获得BBS论坛浏览权。”</p>\n<p>“谢谢。”</p>\n<p>“砰”的一声，金属盒子从柜子里弹了出来，里面除了阿瓦登的证件以外还多了五张小尺寸光盘。</p>\n<p>“这是有关部门核发给你的BBS论坛统一用户名与密码，BBS论坛列表、互联网BBS论坛使用指南及相应法规、以及最新健康网络词汇列表。”</p>\n<p>阿瓦登向前踏了一步，从盒子里将这些东西一股脑全拿出来，揣进大衣的大兜里。那些东西其实是可以全部放在同一张光盘里的，不过有关部门认为每一张光盘装一份文件有助于用户理解这些文件的严肃性和重要性，并产生敬畏。</p>\n<p>他心里盼望着那个喇叭能再说两句。让他失望的是，对面传来的是一个人起身并且离开的声音，从脚步声的韵律判断，阿瓦登愈发相信这是一名女性。</p>\n<p>“手续办理完毕，请离开网络部回到自己的工作岗位上。”</p>\n<p>甜美空洞的电子女声从天花板上传来，阿瓦登厌恶地抽动鼻翼，拿手揉了揉，转身离开这间温暖的大厅，重新进入到寒冷的走廊。</p>\n<p>在回家的路上，阿瓦登蜷缩在公共汽车上一动不动，顺利申请到BBS的使用权让他有些虚无缥缈的兴奋。他闭着眼睛，找了一个合适的角度躲开破窗而入的寒风，右手在兜里不断摩挲那一系列光盘，还在怀念着那一个神秘的女声。</p>\n<p>如果能再一次听到该多好，他不能抑制自己这样的想法，同时用拇指的指肚在光盘上轻轻地摩擦，幻想这几张光盘也曾经被她的手触摸过。他兴奋的几乎也想破口大骂一句“FUXKYOU, YOUSONOFBITCH”，真奇怪，那名男子的骂声在他的记忆里根深蒂固，并时不时不自觉地滑到唇边。</p>\n<p>忽然，他的手指在光盘上发觉到一丝异常的感觉。阿瓦登下意识地朝四周望去，确认周围一个乘客也没有后，他小心翼翼地把光盘全拿出来，就着窗外的光亮仔细端详。</p>\n<p>阿瓦登很快注意到，在装有BBS论坛列表的光盘背面，被人用指甲轻轻地划了一道刮痕。这条刮痕很轻，如果不是阿瓦登仔细地抚摩光盘的话，是很难发觉到的。这条刮痕很奇特，是一条直线，而在这条直线末端的不远处，则是另外一条极短的刮痕，似乎刻意想弯成一个圆点。整体看上去就好象是一个叹号，或者倒过来说，象是字母i。</p>\n<p>很快他在其他四张光盘上也发现了类似的刮痕，它们造型都不同，但都似乎代表着某种符号。阿瓦登回想起喇叭里那个女声最后一句提到过的文件顺序，于是把这五张光盘按照BBS论坛统一用户名与密码、BBS论坛列表、互联网BBS论坛使用指南、相应法规、以及最新健康网络词汇列表的顺序排列好，接着依次把那五道刮痕用手指临摹到汽车窗户上。很快那些刮痕构成了一个英文单词：</p>\n<p>title</p>\n<p>题目？这是什么意思？</p>\n<p>阿瓦登看着这个单词莫名其妙，这究竟是纯属无意的痕迹，还是有人刻意为之？如果是有人刻意为之，他这么做的用意是什么？</p>\n<p>这时候汽车停住了，又有几名乘客走上车来。阿瓦登挪动一下身体，不让他们看到自己在车窗上写出来的字迹，然后装做打呵欠的样子抬起袖子，轻轻把那五个字母擦掉。</p>\n<p>阿瓦登暗自庆幸，如果他没有在现在发现这些光盘上的痕迹，那么以后就永远没有机会发觉了。按照规定，个人电脑是不允许使用任何存储存设备的，因此阿瓦登的电脑并没有光驱。他下一步所要做的是将这些光盘送交到管区网络安全部，由他们将光盘内资料登陆到服务器中，再转发给阿瓦登。这是为了防止个人私自在家里制造、阅读或者传播黄色或者反动信息，网络安全部发出的通告是这么解释的。联邦的网络警察经常会突入到个人家中进行临时检查，看用户是否非法拥有信息贮存设备，阿瓦登曾经亲眼见过一个邻居被警察带走，原因仅仅是因为他私自藏了一张光盘在家里——其实他只是打算拿那个当茶杯垫用。那个邻居再没回来过。</p>\n<p>无论这些符号代表的是什么意思，它都是一种全新的体验，这让阿瓦登感觉到兴奋。怀旧与渴望新奇是阿瓦登生活在这个时代的两根精神支柱，否则他会与这座城市一样变的僵硬，然后窒息而死。</p>\n<p>他先来到网络安全分部，将光盘交给那里的负责人，负责人反复地检查光盘和阿瓦登的表情，好象所有使用BBS论坛的人都不可信赖一样。末了负责人终于找不到什么破绽，只得将光盘收下，然后举起右手，阿瓦登和他一起高呼“缔造健康的互联网络”。这句话是唯一被允许可以连贯着被说出来的句子。</p>\n<p>回到家里，阿瓦登脱掉大衣，摘了过滤口罩，将旁观者扔到了行军床上，然后整个人也倒进枕头里。每次出去外面都会让他疲劳，这一半是因为他孱弱的肉体已经不大适合室外活动；另外一半原因是因为他必须花费大量的精力来应付旁观者。</p>\n<p>过了四十分钟，他才悠悠地醒过来，头还是和平常一样地疼，胸口还是一如既往地闷。胡乱吃了一点东西以后，阿瓦登爬到电脑桌前，打开电脑，按程序登陆上网络，习惯性地先检查了一遍信箱。</p>\n<p>信箱里有七、八封新的信件，其中两封是同事发来的事务信。另外五封则是网络安全部发给他的，内容就是他送交的那几张光盘。</p>\n<p>阿瓦登打开了包含有BBS论坛的用户名、密码和BBS论坛列表的两封信。他看到自己的论坛通用用户名叫做19842015，和自己的网络编号完全一样，不由得有些失望。他依稀记得在小的时候，BBS论坛的用户名是可以自己决定的，而且每一个论坛都可以不同，一个人在网上并不单只是一串枯燥数字。</p>\n<p>小时候的记忆往往是跟童话和幻想混杂在一起，未必与实际相符。现实中你只能使用有关部门指定的用户名和密码，理由很简单，用户名和密码内也可能含有敏感词汇。</p>\n<p>阿瓦登又打开了那份BBS列表，全部都是有关部门开设的官方论坛，没有私人的——事实上个人能够合法持有的电脑设备从技术上来说也无法架设新BBS——这些论坛的主题各有侧重点不同，但基本上是围绕着如何更好响应国家号召，缔造健康互联网络来说的。比如其中一个电脑技术论坛，主题就是如何更好地屏蔽掉敏感词汇。</p>\n<p>居然在这些论坛中还有一个是关于游戏的。里面正在讨论的是一个如何帮助别人使用健康词汇的网络游戏，玩家可以操纵一名小男孩在街上侦察，看是否有人使用了敏感词汇，小男孩可以选择上前指责或者通知警察，抓到的人越多，小男孩得到的褒奖就越高。</p>\n<p>阿瓦登随便打开了几个论坛，里面的人都彬彬有礼，说话很“健康”，就好象街上的那些行人一样。不，准确地说，比街上的气氛还要压抑。在街上的人也许还有机会保留一下自己的小动作，比如阿瓦登刚才在公共汽车上就偷偷地写了TITLE五个字母；而在网上论坛，人的最后的一点隐私也全被暴露出来，有关部门随时可以调看你的一切行动，无从遁形，这就是科学技术发展所带来的进步。</p>\n<p>一阵失落和失望袭上阿瓦登的心头，他合上眼睛，把鼠标甩开，重重地向后靠去。原来他天真地以为BBS论坛也许会少许宽松一些，现在看来甚至比现实中更叫人窒息，他感觉到自己好象陷入沉滞的电子淤泥之中，艰于呼吸。“FUXKYOU, YOUSONOFBITCH”再一次涌现到他的唇边，强烈无比，要化好大的力气才控制住。</p>\n<p>忽然，他又想到了那个神秘的title，那究竟是什么意思？那五张光盘里或许隐藏着什么？也许这跟title有关系？</p>\n<p>阿瓦登想到这里，把目光重新转向电脑屏幕，仔细去看网络安全部发来的五封信的title部分。五张光盘各隐藏着一个字母，凑到一起就是title，那么按照这个方式，那五封EMAIL的title凑到一起，就变成了一句话：去用户学习论坛。”</p>\n<p>阿瓦登记得刚才他确实看到其中一个论坛的名字叫做“用户学习”，于是他抱着姑且一试的心态连接到这个论坛去。他希望这并不是一个巧合。</p>\n<p>用户论坛是一个事务性论坛，里面是一些关于BBS用户资料的投诉帖和管理帖，斑竹的是一个叫19387465的人；发帖的人和回帖的人数量都很少，里面冷冷清清的。阿瓦登打开帖子列表，按照刚才的规律去搜寻每一个帖子的标题，并把它们综合到一起，很快他就得到了另外一句话：</p>\n<p>“每周日辛普森大楼5层B户。”</p>\n<p>又是一个谜团，阿瓦登想。但这却坚定了他的信心，这其中必定隐藏着玄机。光盘、EMAIL和BBS论坛，连续三次都可以通过首词组组合的方式得到暗示，绝非巧合。</p>\n<p>究竟是什么人会在有关部门的官方文件中隐藏着这样的信息呢？每周日在效率大楼5层B户又会发生什么事情呢？</p>\n<p>阿瓦登终于找到了久违的兴奋感，未知事物的新奇刺激着他麻木很久的神经。更重要的是，这种在有关部门正式文件中玩弄的文字技巧，叫他有一种喘息的快感，仿佛一个密不透风的铁面罩上几个透进空气的小孔。</p>\n<p>营造健康的互联网络。</p>\n<p>FUXKYOU, YOUSONOFBITCH。</p>\n<p>阿瓦登盯着屏幕上的桌面背景，用嘴唇比出了那句粗话的口型，并且比出了中指。</p>\n<p>在接下来的日子里，阿瓦登一直处于一种潜藏的兴奋状态，就象是一个摆出无辜表情嘴里却藏着糖果的小孩子，在大人转身过去之后露出狡黠的笑容，尽情享受心中藏有秘密的乐趣。</p>\n<p>日子一天一天地过去，健康词汇在列表里又少了几个，窗外的空气又浑浊了几分，这已经是生活的常态。阿瓦登自己已经开始拿网络健康词汇表当日历来用，划掉三个词就证明过了三天，划掉七个就证明过了一周，于是周日终于到来了。</p>\n<p>阿瓦登抵达辛普森大楼的时间是中午，暗示的句子里并没有指明时间，阿瓦登认为在中午前往应该是比较可以接受的。当穿着深绿军大衣，耳朵上别着旁观者的阿瓦登来到辛普森大楼的入口时，他的心开始忐忑不安地跳跃起来。他在上一星期设想了无数种可能发生的情景，而现在这个谜底就要揭晓了。无论在周日效率大楼会发生什么，也不会比现在的生活更加糟糕，阿瓦登心里想，所以他并不怎么害怕。</p>\n<p>他走进大楼内部，发现这里的人也很少，空旷的走廊里只听到他哒哒的脚步声与回音。一部老电梯里贴着“缔造美好网络家园”的广告，以及一个充满了正义感的男性头像海报，背景是星条旗，他在纸里用右手食指指向观看者，头上写着一行字是“公民，请使用健康词汇。”阿瓦登厌恶地转过身去，发现另外一侧也贴着同样的海报，避无可避。</p>\n<p>值得庆幸的是五楼很快就到了，电梯的门一开，对面的门上就赫然挂着B户的牌子。门是掉了漆的绿色，门框上还点了几滴墨水，一部简易的电子门铃挂在右上角。</p>\n<p>阿瓦登深深吸了一口气，伸手去按电纽。</p>\n<p>电铃响起，很快屋子里传来脚步声。阿瓦登觉得这脚步的韵律很熟悉，似乎是在哪里见到过。门“咔拉”一声被打开一半，一名年轻女子一手握着把手，把身体前倾望着阿瓦登，警惕地说：</p>\n<p>“你，找谁？”</p>\n<p>女子疑惑地问道。阿瓦登一下子就认出了她的声音，就是那个在网络部BBS论坛科柜台后面的女性。她很漂亮，穿着墨绿色绒线衫，头上梳着这时代流行的短发，皮肤特别的白，只有嘴唇能看到一些血色。</p>\n<p>看着女子的眼神，一瞬间阿瓦登不知道该说什么好，犹豫了一下，他举起右手，轻声回答说：“title。”</p>\n<p>阿瓦登不知道这句话能否奏效，也不知道自己是否真的找对了地方，但这是他唯一能想到的回答了。他紧张地望着那女子，假如那女子忽然报警，那么自己就会被抓起来仔细审问为什么无缘无故跑到陌生人家里。“肆意游走罪”只比“使用敏感词汇罪”轻那么一点。</p>\n<p>女子听到他这么说，脸上还是毫无表情，只是把头幅度很轻微地点了一下，右手谨慎地做了一个“进来”的手势。阿瓦登刚要张口，那女子严厉地瞪了他一眼，吓的他把话又吞回去了，乖乖地跟着她进了屋子。</p>\n<p>一进屋子，女子首先做的就是把门关好，然后拉起来一层铅灰色的门帘挡在门口。阿瓦登不安地眨着眼睛，趁她拉门帘的时候环顾四周。这屋子是标准的两室一厅，在厅里摆放的是一套双人沙发与一个茶几，茶几上居然还有几束红紫色的塑料花。靠墙是电脑桌和电脑，墙上挂着普通的白色日历，但被主人用粉红色的纸套了边，看起来颇为温馨。一盏粗笨的日光灯从天花板上垂下来，上面象是恶作剧一样挂了几缕绿色的电线，象是垂下藤蔓的葡萄架。阿瓦登注意到厅口的鞋架上有四双鞋，尺码不同，说明今天的客人并不只他一个。</p>\n<p>阿瓦登正踌躇不安，忽然女子从背后拍了拍他的肩膀，示意他朝里面走。于是两个人穿过客厅另一侧的短小回廊来到其中一间卧室。卧室上挂着同样质地的铅灰色帘子，女子伸手举起帘布，推开了门。阿瓦登迈了进去，首先映入眼帘的是三名面带微笑的人类，以及一间用真正的鲜花装点的房间。屋子里有很多旧日记忆里的古老物品，比如一幅印象派的油画、一尊乌干达木雕，甚至还有一个银烛台，唯独没有电脑。</p>\n<p>他正在迟疑，女子也进了屋子。她谨慎地拉好门帘关上门，将耳边的旁观者取下，回过身来对阿瓦登用曼妙的声音说道：</p>\n<p>“欢迎加入说话会！”</p>\n<p>“说话会？”</p>\n<p>出于习惯，阿瓦登并没有把这三个字说出口，因为他不确定是否“健康”，只是用眼神表示自己的疑惑。</p>\n<p>“在这里你可以随便说话，这个该死的东西不会起作用的。”女子把自己的旁观者晃了晃，那个小东西象死掉了一样，对女子句子里两个敏感词汇“随便”和“该死”充耳不闻。</p>\n<p>阿瓦登一下子想到上星期在公共汽车站前碰到的男子，如果他摘下旁观者，会不会也会落到同一境地呢？那女子见他犹豫不决，指了指门口的铅灰色门帘说：“放心好了，这里是可以屏蔽掉旁观者信号的，不会有人觉察到。”</p>\n<p>“你们，是什么，人，这，是，哪里？”</p>\n<p>阿瓦登一边摘下耳朵上的旁观者，一边小声说道，语调还是改不了那种有关部门规定的说话方式。</p>\n<p>“这里是说话会，是一个完全自由场所，在这里你可以畅所欲言，请不要拘束。”</p>\n<p>另外一个人起身对他说道，这是一名瘦高的中年男子，鼻梁上的眼镜非常地厚。</p>\n<p>阿瓦登嗫嚅着，却找不到发音的焦点，在四个人的注视下显得窘迫不堪，脸都要红起来。女子同情地看了他一眼：“可怜的家伙，不用太紧张，每一个刚到这里的人都是这样。慢慢就习惯了。”</p>\n<p>她把手搭到阿瓦登的肩上：“我们其实见过的，当然，我见过你，而你没见过我。”她一边说，一边将自己的头发解下来，原来她留的是一头齐肩的乌黑长发，头发披下来的一瞬间阿瓦登觉得她真的很美。</p>\n<p>“我……我记得你，记得你的声音。”阿瓦登终于说出了一句完整的话，虽然不够流畅。</p>\n<p>“是吗，那可太好了。”女子笑起来，拉着他的手，让他坐到沙发上，递给他一杯水。阿瓦登注意到这是一个款式古老的茶杯，上面还刻着花纹，杯子里的水带着浓郁的香气，阿瓦登尝了一点，那种甜丝丝的味道对喝惯纯净水的舌头来说刺激格外地大。让他觉得浑身一下子被注进了许多活力。</p>\n<p>“弄到这个可不容易，我们也不是每周都能喝到。”女子坐到他身边，两只乌黑的眼睛注视着他，“你是怎么知道这个集会的？”</p>\n<p>阿瓦登把发现光盘暗示的过程说了一遍，其他四个人都赞许地点了点头。“果然是个聪明人，脑筋还没被陈腐的空气腐蚀掉。”一个三十多岁的胖子称赞道，他的嗓门大的要命。那个戴眼镜的中年人把两只手交叉在一起，表示赞同。</p>\n<p>“这正是天生的说话会成员，聪明、敏锐，而且不甘屈从于沉默。”</p>\n<p>“那么。”胖子提议，“先让我们鼓掌欢迎说话会的新成员吧。”</p>\n<p>于是四个人鼓起掌来，小小的屋子里响起一片掌声。阿瓦登羞涩地举起杯子做回应，他还不太习惯这样的场面。等到掌声稍息，他抬起头怯生生地问道：</p>\n<p>“可以问个问题吗？说话会到底是什么？”</p>\n<p>带他进屋的女子伸出食指，在他鼻子前两公分的地方比了一比，解释道：</p>\n<p>“说话会，就是可以畅所欲言的集会。在这里你不必顾忌什么，说出任何你想说的东西。这里没有敏感词汇，也没有健康互联网络。这里是绝对自由的空间，你可以尽情释放你的灵魂，舒展你的身体，没有任何禁锢与束缚。”说着说着，她的声音变的高亢、奔放，里面饱含了许多早已经被屏蔽掉的词汇，阿瓦登不曾听到这样流畅连贯的话语很久了。</p>\n<p>“我们的宗旨就是，说话，就这么简单。”中年人扶扶眼镜，补充道。</p>\n<p>“可是，要说些什么呢？”阿瓦登又问道。</p>\n<p>“任何事情，你心里想的任何事情都可以说出来。”中年人露出宽和的笑容，“尤其是那些被美国政府限制的思想。”</p>\n<p>这可真是一个大胆的集会啊，这分明就是犯罪，阿瓦登心想，但他发觉自己却被这种犯罪慢慢地吸引住了。</p>\n<p>“当然，有件事我们会事先说明。说话会是危险的，每一个成员都冒着被有关部门拘捕的风险。联邦执法人员也随时可能破门而入，以非法集会以及非法使用不合法词语的名义把我们抓起来。你现在有权拒绝加入，并且离开。”</p>\n<p>阿瓦登听到女子的警告，心里一度犹豫起来。但一想到此刻离去的话，那么又要开始持续那种窒息的泥沼生活，他就难以压抑自己的烦闷。阿瓦登第一次发现，原来“说话”对他来说是一个致命的诱惑，他先前并不知道自己原来是如此地渴望着说话。</p>\n<p>“我不会离开的，我要加入你们，说话。”</p>\n<p>“那太好了。唔，那么不妨就从自我介绍开始吧。”女子高兴地说，同时站起身来，把右手搭到胸前，“从我开始。我的名字叫阿尔特弥斯，至于网络编号和身份证号码，让他们见鬼去吧！谁会去管那个！我有我自己的名字，我不是数字。”</p>\n<p>她的话让所有人包括阿瓦登都笑了起来。接着她继续说道：“不过，这其实只是一个假名，这是希腊神话里的女神。”</p>\n<p>“假名？”</p>\n<p>“是的，和我户籍本上的名字是不同的。”</p>\n<p>“可是，为什么？”</p>\n<p>“你不会对自己在档案里的名字厌倦吗？我想起一个自己喜欢的名字，哪怕只有一次机会也好，自己想叫什么就叫什么。在这个说话会里的每一个人都有一个自己喜欢的名字，我们彼此拿这个称呼。”</p>\n<p>阿瓦登若有所思地点点头，他很理解阿尔特弥斯的想法。事实上当他在使用网络论坛的时候，也希望能够自己取一个称心如意的名字，而不是被分配一个用户名。</p>\n<p>通过介绍，阿瓦登了解到阿尔特弥斯是网络部BBS论坛管理科的职员，今年23岁，未婚，最讨厌蟑螂和蜘蛛，喜欢缝纫与园艺，屋子里的花就是她偷偷从城市边缘摘回来的。</p>\n<p>接下来是那名中年人，他自我介绍说名字叫兰斯洛特，41岁，是城市电厂的一名工程师；兰斯洛特这名字出自英国的亚瑟王传说，是一名忠贞的骑士。他有自己的老婆和两个孩子，一男一女；男孩三岁，女孩四岁，他们最喜欢吃的就是柠檬味道的水果糖。说到这里，兰斯洛特说希望下次聚会能把他们也带了，孩子们正是学说话的时候，他想教给他们真正的说话。</p>\n<p>那个三十多岁的胖子是网络部的一名网管，叫瓦格纳。这个身份让阿瓦登吃惊不已，他的印象里网管都是些绷着脸全无表情的冷漠生物，但眼前的瓦格纳脸圆滚滚的，油光锃亮，嘴边两条翘起的小胡子神气十足。他喜欢的是雪茄和歌剧，利用网管的特权这两样东西都不难弄到。</p>\n<p>“这个能屏蔽掉信号的门帘就是他弄的。”阿尔特弥斯补充说，瓦格纳冲她做了个“乐意为您效劳”的手势，然后点燃了雪茄，把它放到嘴里，很快屋子里就笼罩起一片稀薄的烟雾。</p>\n<p>说话会的第四名成员是一位穿着黑色制服的女性，今年刚满三十。她的名字是杜拉丝，城市日报（那个时代的报纸已经全部都数字化了）的编辑，她比阿尔特弥斯还瘦，颧骨高高耸起，眼窝身陷，两片薄薄的嘴唇即使在最说话的时候也很少分开，看不到牙齿。爱好是饲养狗和猫，尽管她并没有养。</p>\n<p>“那么，到你了。”阿尔特弥斯对阿瓦登说。阿瓦登想了想，结结巴巴地把自己的情况说了一遍，当谈到自己的爱好时候，他一时间居然想不到自己喜好什么，似乎什么都没有，在那之前他甚至从来没想过。</p>\n<p>“那，你最想做的是什么事呢？”阿尔特弥斯把手再一次放在他肩上，诱导着问道。</p>\n<p>“真的什么都可以？”</p>\n<p>“什么都可以，在这里没有任何限制。”</p>\n<p>阿瓦登觉得自己终于找到机会了，他咳了一声，抓抓头，脱口而出一句响亮的叫喊：“FUXKYOU, YOUSONOFBITCH！”</p>\n<p>在一瞬间，在座的四个人都被他这句话震惊了。瓦格纳率先反应了过来，他先叼住雪茄，用力鼓掌，然后用右手把雪茄取下来，张嘴大声地赞叹道：“真棒，痛快，这简直是最完美的入会誓词。”</p>\n<p>“我宁可听十遍这样的脏话，也不想再去碰那个乏味的电子女声。”兰斯洛特也是一脸陶醉，毫不掩饰自己对电子女声的厌恶。而阿尔特弥斯和杜拉丝全都咯咯地笑起来，杜拉丝发现自己的笑容幅度大了一点，不好意思地把嘴掩住。阿瓦登觉得他们与其说是觉得新奇，不如说是在享受这句脏话所带来的对体制的蔑视与挑战。</p>\n<p>“那你叫希望自己叫什么名字呢？” 阿尔特弥斯歪着头问。</p>\n<p>“唔……王二。“ 阿瓦登沉吟了一下，回答说。这是一个中式的名字，他以前有一个中国人朋友，喜欢讲故事，故事里的主角名字总是叫王二。</p>\n<p>屋子里的气氛现在完全融洽了，大家都开始谈些比较自然的话题，每个人都摆出了最舒服的姿势，阿尔特弥斯不时拿起茶壶来为大家续水。阿瓦登紧张的心情逐渐放松下来，他感觉到自己的脑子前所未有地轻松。</p>\n<p>“你知道的。”阿尔特弥斯又给他倒了一杯甜水，“我们一直想把说话会保持在一定规模，平日是没有办法畅所欲言的，我们需要空间。麻烦的是，我们没办法公开征集会员，又不可能直接通过物理接触去寻找，那风险太大。于是兰斯洛特就设计了一套暗示系统，只有发现这些暗示的人才能知道本会的存在。”</p>\n<p>“这套系统考虑到的还不止是安全问题。”兰斯洛特把自己的眼镜摘下来仔细擦拭了一下，得意地说，“这其实也是一个会员资格验证。说话会所吸纳的成员，必须有智慧，有头脑，内心渴望激情，并且对自由有着渴望。”</p>\n<p>瓦格纳用两根指头夹着雪茄，在事先准备好的烟灰缸里弹了弹烟灰，大声说道：“据我的经验，申请BBS论坛服务的人，大多数都是为了怀旧，或者说渴望一些新鲜的东西，这样的人往往都怀有激情，认为BBS论坛也许能给他们一些与现实不一样的东西——当然，事实上并非如此，美国政府对BBS论坛的管理甚至严厉过电子邮件——这暗示着他们心里渴望解脱束缚。因此我们将暗示隐藏在申请BBS论坛的光盘之中，只有申请人才有机会接触到这些暗示。而只有那些有智慧、观察敏锐的人才会发觉到这些暗示的存在，并顺利解读出来，找到这里。”</p>\n<p>“归根到底，说话会也不过是一群渴望自由说话的秘密小团体罢了。”兰斯洛特笑道。</p>\n<p>“你是第二个找到说话会的人，第一个是杜拉丝小姐。”</p>\n<p>阿尔特弥斯告诉阿瓦登。阿瓦登敬佩地看了杜拉丝一眼，后者淡淡地回答道：“这没什么，这是我的工作，我的工作就是摆弄文字。”</p>\n<p>阿瓦登想到上一周在公共汽车站碰到的那个疯狂男子，于是把这件事讲给其他成员听。听完之后，兰斯洛特摇了摇头，从嘴唇里滑出一声叹息：</p>\n<p>“这样的事情我也是见过的，我的一个同事就是如此。所以说话会的存在是必要的，这是缓解压力的阀门。长时间的敏感词汇限制会让人都疯掉的，因为他们既无法思考又没办法表达。”</p>\n<p>“这正是美国政府有关部门所希望看到的，这样只有傻瓜能够存活下来，一个全是傻瓜的社会是稳定的。” 瓦格纳费力地把自己肥胖的身躯挪了一下位置，轻蔑地说。</p>\n<p>“你也是有关部门的一分子，瓦格纳先生。”阿尔特弥斯一边往茶杯里续了些热水，一边抬头轻声说道。</p>\n<p>“阿尔特弥斯小姐，我只是一个能比普通人多使用几个敏感词汇的普通人而已。”</p>\n<p>大家都笑了起来。阿瓦登从来没有见过这么多的人说这么多的话，这是前所未有的奇妙经验。他惊讶地发现自己居然很快就融进了这个小圈子里，隔阂与陌生感很快就消失了；同时消失的还有胸闷与头晕等习惯性的毛病。</p>\n<p>很快话题就从说话会本身扩展到了更加宽泛随意的话题，阿尔特弥斯唱支歌，兰斯洛特说了几个笑话，杜拉丝则给大家讲了美国南部诸州的风土人情；瓦格纳甚至还唱了一段歌剧，虽然阿瓦登一个字也听不懂，但他一点也不吝惜掌声。在这个城市的某一个被屏蔽掉的角落里，五个不甘沉默的人正在享受着在这个时代视为奢侈品的事情——说话。</p>\n<p>“王二，你可曾看过《1984》？”</p>\n<p>阿尔特弥斯忽然问道，她就靠着阿瓦登坐下，阿瓦登摇摇头，反问道：“这是网络编号的一段么？”</p>\n<p>“这是一本书的名字。”</p>\n<p>“书？”阿瓦登听到这个名词，头摇的更大了。这是个古老的名词，在这个电脑技术非常发达的时代，网络可以承载一切信息，任何人都可以在网上图书馆查到电子版；因此有关部门认为实体书籍变成了一种没有必要存在的浪费，实体书也就逐渐消亡了。瓦格纳对此的评论是：“有关部门喜欢电子书籍的心情是可以理解的，电子书籍的话，只需要FIND和REPLACE两个命令就可以消灭掉全部不健康词汇，替一本书消毒；而实体书籍的校对与修订却是件旷日持久的工作。”</p>\n<p>“这是一本伟大的书，是旧世界哲人们对我们这个时代的预言。”阿尔特弥斯认真地说。“它很早以前就洞察到了肉的束缚与解脱，灵的束缚与解脱，这是说话会的基石。”</p>\n<p>阿瓦登不无惊奇地发现他的网络编号开头恰好是这这本书名字：19842015。</p>\n<p>“那么，该怎么样才能看到呢？”阿瓦登盯着阿尔特弥斯乌黑色的眼睛问。</p>\n<p>“我们也无法找到纸质版，网络图书馆不可能存在这样的书。”兰斯洛特摇摇头，然后重新露出笑容，左手向着杜拉丝摆了个请的姿势，“但我们的杜拉丝小姐应该为她的记忆力而自豪，她在很早已经有幸阅读过这两本书，并且能够记得里面的大部分文字。”</p>\n<p>“太好了，然后她写下来了，对吗？”</p>\n<p>“那太危险，这时代持有实体书是个大罪过，也容易让说话会暴露。我们只是在每次聚会的时候请杜拉丝小姐为我们背诵。既然是说话会，那么把这两个故事讲出来不是更名符其实吗？”</p>\n<p>大家都安静下来，杜拉丝站起来走到屋子中央，其他四个人坐在旁边看着她。阿瓦登不经意地把手搂在阿尔特弥斯肩上，后者微微朝这边靠过来，女性头发的幽香“咝咝”地划过他的鼻子，让他的心里一阵荡漾。屋子里非常暖和，他分不清这是花香还是阿尔特弥斯的味道。</p>\n<p>杜拉丝的声音并不高，不过却很清晰有力；她的记忆力确实惊人，不仅记得情节，包括一些细节和句子都可以复述下来。杜拉丝讲到了朱丽亚假装摔倒，然后偷偷递给温斯顿一张写着“我爱你”的纸条，绘声绘色，这让听众们都听的入神了，阿尔特弥斯听的尤其认真，以至于都没有注意到阿瓦登一直注视着她。</p>\n<p>“1984的作者预见到了专制的进步，却没有预见到技术的进步。”瓦格纳在杜拉丝停下来喝水的时候发表自己的评论，阿瓦登觉得他与外貌不太相称，是个很有洞察力的技术官僚。</p>\n<p>“在大洋国人们还可以靠传递纸条来偷偷表达自己的想法，但是现在不一样了。美国政府有关部门把我们全赶到了网上，而在网络技术发达的今天，我们即使想发一条短信都会被系统或者网管看的一清二楚，无从遁形。现实里呢，还有旁观者在。”瓦格纳在腿上敲了敲雪茄根部，“一句话，技术是中性的，但技术的进步会让自在的世界更自在，集权的世界更加集权。”</p>\n<p>“这句话说的很有哲学家的味道哟。”阿尔特弥斯冲瓦格纳挤了挤眼睛，从抽屉里取来一把饼干和曲奇散发给大家。</p>\n<p>“就好象同样是0和1，有的人就能写出工具软件，有人却拿那个编出恶性病毒？”</p>\n<p>阿瓦登想到一个类似的比喻，瓦格纳听了以后满意地打了个响指。</p>\n<p>“很不错的比喻，王二，就是如此，真不愧是程序员。”</p>\n<p>谈话持续了不知道有多久，杜拉斯看了一眼墙壁上的挂钟，连忙提醒谈兴正浓的四个人时间快到了。说话会不能持续很长时间，旁听者被屏蔽的越久，暴露的危险就越大。</p>\n<p>“那么好吧，我们就抓紧最后半个小时来完成今天的活动。”</p>\n<p>阿尔特弥斯一边说着，一边将桌子上的空杯子收走。兰斯洛特和瓦格纳也都站起身来，活动一下已经有些酸疼的肩膀和腰，只有杜拉丝坐在位子上没有动。</p>\n<p>“活动？还有什么活动？”</p>\n<p>阿瓦登奇怪地问道，说话会除了说话还有其他活动？</p>\n<p>“唔，对啊，我们还有其他活动。”阿尔特弥斯撩起额前的长发，对他妩媚一笑：“我们还会和对方完全交流。”</p>\n<p>“完全交流？”</p>\n<p>“就是intercourse”</p>\n<p>“………………”阿瓦登一下子变的脸色苍白，呼吸急促起来，仿佛胃里被灌进去零下三十度的寒风，他几乎不相信自己的耳朵。</p>\n<p>“说话会有说话的自由，也有选择与谁上床的自由。”阿尔特弥斯毫不羞涩地说，“我们互相谈话，然后选择合适的人做爱，就象我们选择我们喜欢的词汇说话一样。”</p>\n<p>兰斯洛特看阿瓦登很窘迫，走过去拍拍他的肩膀，慢慢地说：“当然，我们不会强迫任何人，这完全是在自愿的基础上。今天我还要早点回去照顾小孩，你们人数正好合适。”</p>\n<p>阿瓦登的脸色涨红，热的仿佛夏季的电脑CPU，他甚至不敢多看阿尔特弥斯一眼。他憧憬过女性很长时间，但如此接近还是第一次。</p>\n<p>还要回家去照顾小孩子的兰斯洛特向大家道别后就先行离去了，阿尔特弥斯将房间留给瓦格纳与杜拉丝，然后带着惶恐不安的阿瓦登来到了另外一间房间。这间显然是阿尔特弥斯的卧室，屋子里很简单，但却收拾的十分干净，在床上枕头旁还摆着一个手制的布娃娃，床单和窗帘都是粉红色的。</p>\n<p>最初的是由阿尔特弥斯主动开始的，丝毫没心理准备的阿瓦登只是被动地任她摆布。经过了几轮挑逗，阿瓦登才逐渐放开，任由潜藏在自己心内的原始欲望奔流出来，那种期待听到圆润女声的青春憧憬本来只是苦闷生活的意淫，而在今天它加倍实现了。很快这种憧憬与他在现实中被压抑的郁闷合流，转化成了猛烈的冲动，让他一次又一次与阿尔特弥斯融为一体。阿瓦登不知道这种冲动和他想大声说出“FUXKYOU, YOUSONOFBITCH”冲动有什么不同，不过现在不是考虑这个的时候，他现在脑子里想的只有尽情地、全无束缚地让自己释放激情，完全没有任何束缚。</p>\n<p>强烈的刺激一波波地冲击着兴奋中枢，最终一阵快感浪潮在狂暴洋面扬起头来，达到了一个极高的顶端。阿瓦登在那一瞬间感觉到了前所未有的自由，那种轻盈无比的自由，以及因自由而生的快乐与疲惫。浑身是汗的他喘息着倒在了阿尔特弥斯身上，一阵舒畅的倦意如潮水般淹没了他的身体……</p>\n<p>……当他醒来的时候，发现阿尔特弥斯躺在自己身边，赤裸的身体好象一尊白玉雕像，睡姿恬美静谧。他侧过身子去，慵懒地打了个呵欠，然后阿尔特弥斯睁开了眼睛。</p>\n<p>“很舒服，对不对？”她问道。</p>\n<p>“是啊……”阿瓦登不知道该说什么好，他顿了顿，犹豫地说道：“你以前和兰斯洛特、瓦格纳他们也……呃，我是说，象刚才那样子过吗？”</p>\n<p>“是的。”阿尔特弥斯温柔地回答，她半支起胳膊，长发从肩膀披到了胸口。她的大方坦白反而让阿瓦登有些不知所措。屋子里出现了一段时间的沉默，然后阿尔特弥斯忽然开口问道：</p>\n<p>“还记得今天杜拉丝讲的那段故事吗？女主角偷偷递给男主角写着“我爱你”的纸条。”</p>\n<p>“唔，还记得。”阿瓦登回答，很高兴终于能从那个拙劣的话题摆脱出来了。</p>\n<p>“在有关部门的健康互联网络词汇列表里，没有爱这个字呢。在我们这个时代，我爱你也是一个敏感词汇，被屏蔽掉了。”阿尔特弥斯的眼神里似乎是感慨，又象是失落。</p>\n<p>“我爱你。”阿瓦登不禁脱口而出，他知道在这间屋子里可以说出任何自己想说的话，不必顾忌。</p>\n<p>“谢谢你。”</p>\n<p>阿尔特弥斯听到之后只是笑了笑，起身穿上衣服，催促阿瓦登时间差不多了。阿瓦登有些失望，因为她没有预期反应的热烈，仿佛他刚才说的只是有些无关紧要的东西。</p>\n<p>这时候杜拉丝和瓦格纳已经离开了，屋子里只剩他们两个人。阿尔特弥斯把他送到门口，将旁观者交给他，然后叮嘱他说：“记得在外面绝对不要提及说话会的任何事情或者任何人，我们在说话会以外的地方是完全不认识的。”</p>\n<p>“我记住了。”阿瓦登回答，然后转身要走。</p>\n<p>“王二。”</p>\n<p>阿尔特弥斯忽然叫道，阿瓦登连忙转身，还没等他反应过来，两片柔软温暖的嘴唇忽然贴到了他的双唇，然后是一个细切的声音在耳边响起：“谢谢你，我爱你。”</p>\n<p>阿瓦登觉得眼睛有些湿润，他戴上旁观者，推开门，重新步入到那一片令人窒息的世界中去，但他此时已与来时的心境大不相同。</p>\n<p>此后阿瓦登的精神面貌明显有了改善。他谨慎地享受着这种秘密集会的乐趣，并且乐在其中。每一周或者两周，他们五个人都会在周日秘密地举行说话会的活动，聊天，唱歌或者听杜拉丝讲1984的故事。阿瓦登同阿尔特弥斯又“完全交流”了几次，偶尔他也会跟杜拉丝“交流”。他有了两个身份，一个是现实中和网上的阿瓦登，编号19842015，还有一个是说话会里的王二。他很享受这个名字，觉得这就是自己另外的一个人生。</p>\n<p>有一次集会，他们谈到了敏感词汇的问题。阿瓦登记得很早的时候——他对这方面的记忆有点模糊——有关部门给出的是一份敏感词汇列表，由网站的内部管理人员秘密参考使用，他对如何演变成现在的局面大惑不解。那一天瓦格纳带了一瓶葡萄酒，兴致很高，于是索性给他们讲了讲“屏蔽”的进化史，身为网管的他经常可以接触到这些资料。</p>\n<p>在最开始美国政府只是单纯地屏蔽掉敏感词汇，但很快他们就发现这样的措施根本没有用处。很多人会采取在词组中夹杂符号或者数字的方式来绕开系统检查；于是有关部门不得不将这些近似敏感词汇也一一屏蔽掉。然而众所周知，数字与符号之间的组合方式是近乎无限的，只要你有想象力，就完全可以组合出一个新的词组而且不失掉他的原意。比如说“politic”这个词，就有“politi/c”、“政polit/ic”、“pol/itic”等近乎无限种表达方式。</p>\n<p>当有关部门意识到这个问题时，他们采取了新的策略。既然无法辨识词组，那么就用单词屏蔽。这一举措在一开始是奏效的，违规交谈的人显著减少，但很快人们就发现可以用同音字或者谐音的方式来继续表达自己的危险思想。即使有关部门封掉全部敏感词汇的同音字，也无济于事，思想活跃的美国人充分发挥了自己的想象力，使用隐喻，借代、类比、引申及其他修辞方法，或者将一个敏感词用数个不敏感的字来代替。人类的思维方式要比电脑开阔许多。电脑屏蔽掉一条路，他们还会有更多的路可以选择。</p>\n<p>这一场水面以下的角力看起来似乎是美国大众要取得胜利。这时候，一个具有逆向思维精神的人出现了。他的身份不明。有人说他是有关部门的主管；也有人说他是因过度使用敏感词汇而被捕的危险人士。无论他是谁，总之整个局面被扭转过来。他向有关部门建议，不再告诉大众禁止说什么，而是规定他们只能说什么，用什么方式去说。有关部门很快就心领神会，制订了新的规章制度：取消了敏感词汇列表，取而代之的是互联网络健康语言列表，并把这举措推广到了日常生活中的语言屏蔽系统中去。</p>\n<p>这一次，大众终于处于下风。以往他们与有关部门尽情地在网络与现实中捉着迷藏，而现在他们却被有关部门扼住了咽喉。这样一来，有关部门可以有效率地掌握住言论，因为整个语言的框架都被彻底控制了。在有限的空间内，大众几乎是无计可施。</p>\n<p>尽管如此，大众还是不屈不挠地将这场战争——或者说游戏——继续下去，他们挑选健康词汇列表中的合法字眼来表达不合法的意思：两个连续的“稳定”意思就是“反对”，“稳定”加“繁荣昌盛”则暗示“屏蔽”。美国政府不得不对这一动向保持着警惕，并日复一日地将更多的词汇从健康词汇列表里删掉，禁止大众使用。</p>\n<p>“当然，这场战争会持续下去的。只要世界上还存在着两个不同的字或者词组，那么就可以继续自由交流——你知道莫尔斯电码吧？”</p>\n<p>瓦格纳说到这里，拿起茶杯一饮而尽，满意地打了一个嗝。</p>\n<p>“可是，这场战争的代价就是语言的失落。表达能力会越来越贫乏，越来越淡而无味，人们会越来越倾向于沉默，这对有关部门反而是好事。”兰斯洛特摆出一副忧虑的表情，有节奏地用指关节敲击着桌面，“这样一来，岂不就等于是大众的自由意识将语言推向死亡的边缘？真讽刺啊。按照这个趋势，有关部门是不会败的，他们会笑到最后。”</p>\n<p>“不，不，笑这种情感他们是不会了解的。”瓦格纳淡淡地回答。</p>\n<p>“我倒是觉得，美国是一直处于恐惧的情感之中呢，生怕人们掌握了太多的词汇，表达出太多的思想，变的难以掌握。”阿尔特弥斯说完摆出一副她在上班期间冷若冰霜的呆板脸孔，学着僵硬的腔调喊了一句：“营造健康的网络环境，美国万岁！”</p>\n<p>杜拉丝、兰斯洛特与瓦格纳都哈哈大笑，唯一没笑的是王二（阿瓦登）。他对于兰斯洛特刚才的那句话始终耿耿于怀：大众与有关部门的对抗，其最终结局就是语言的消亡。那么他们现在这个小小的说话会，也只不过是在一列开向悬崖的列车里关上窗帘，享受坠毁前最后的宁静罢了。</p>\n<p>不过他没有说出口，因为这太煞风景了。阿瓦登不希望破坏说话会的气氛，这对他很重要。</p>\n<p>从说话会回到家里，阿瓦登躺在行军床上，双手枕着脑袋，陷入了沉思。自从加入说话会以后，他变的比以前更容易陷入思考。有时候他想的是这个社会、这个互联网络或者这座城市中存在的荒谬性；有时候他想的是自己的生活；还有时候他想的是阿尔特弥斯。他不知道是不是在一个压抑的世界里，人的情感会变的格外强烈，他现在陷入对阿尔特弥斯的迷恋无法自拔。阿瓦登一直很羡慕杜拉丝讲的《1984》里面的温斯顿，他和朱利亚有一间两个人独处的小屋，一个只属于他们两个人的小世界。</p>\n<p>他在与阿尔特弥斯“完全交流”的时候曾经吐露过自己的心声，阿尔特弥斯没有直接回答，而是表示两个人的关系无法再比说话会更近一步——维持现在的状态就已经是个人行为的极限，有关部门可不会一直打瞌睡。“我们只能把感情生活压缩在每周一次的说话会活动里，这已经很奢侈了。”她对他说，同时温柔地抚摩他的胸膛。“只有在说话会里，我们才是阿尔特弥斯和王二。而在其他时间里，你是19842015，而我是19387465。”</p>\n<p>对此，阿瓦登只能发出一声轻轻的叹息，确实他不该奢求更多。</p>\n<p>除了感情，发生变化的还有互联网络。自从加入说话会以后，阿瓦登逐渐发现互联网表面下潜藏的一些东西。正如瓦格纳在一次活动的时候指出，普罗大众与有关部门的战争从未结束，总会有思想和言论从严厉管制的缝隙中流泻出来。阿瓦登发现，在完全公式化的EMAIL与网络论坛中其实隐藏着不少耐人寻味的细节，就好象那个title一样，存在着各式各样的密码与隐藏寓意。这些东西出自不同人的手里，样式和破译方式都不同，阿瓦登不知道那些密码背后隐藏的是怎样的内容。不过有一点可以确知的是，说话会并不是唯一的一个地下集会，瓦格纳说的对，始终还是有人在试图用“健康”词汇表达“不健康”思想。</p>\n<p>讽刺的是，给阿瓦登感触最深的，是有关部门的管制。以往他只是模糊地感觉到自己被绑缚起来，现在他能清晰地看清这种束缚与压抑的脉络，以及加诸在自己身上的各种手段。在小小说话会中享受到的自在让他更加深刻地感受到在宽阔现实中的不自在。</p>\n<p>“FUXKYOU, YOUSONOFBITCH！”</p>\n<p>每一次的聚会，三位男士都会轻蔑地一起高喊这一句粗话。他们清楚这不会给有关部门带来什么不良影响，不过这确实很痛快。</p>\n<p>这一周，阿瓦登特别地忙碌，他的同事因为不明原因而被屏蔽掉了，这样一来整个项目就全压在了他一个人身上。这项目是为有关部分设计一种软件，用来控制大功率主动式“旁观者”的能源分配控制。软件很复杂，他不得不每天在电脑前工作十几个小时，只有在身体实在支撑不住的时候才停下来随便吃一点东西，喝一口纯净水，困了就躺在旁边的行军床上睡上一觉，爬起来继续工作。屋子里满是浑浊的烟味与袜子脏衣服的酸臭味，阿瓦登就在这种环境下蓬头垢面地敲着键盘，并不时揉揉满布血丝的眼睛。</p>\n<p>偏偏在这个时候屋子里的暖气坏掉了。洋灰色的暖气片从昨天开始就变的冰凉，不再有热水流动。阿瓦登检查了一下，发现并不是管道问题，而且邻居们也碰到同样的事，看来是供热系统出了问题。这一变故的正面影响是稍微淡化了屋子内的酸臭味，负面影响是整个屋子变的有如冰窖一样。紧闭的窗户和门能挡住寒风，却挡不住寒冷，低温让本来就寒酸的房间更笼罩上一层霜气。无论是那把木椅还是行军床都象是冷酷的冰雕，屋子里唯一还有些热气的就只剩下电脑。阿瓦登不得不披上所有的御寒衣物，蜷缩在床上，把电脑的散热口对准自己。</p>\n<p>有关部门宣布“供热”和“暖气”暂时也被列入敏感词汇，于是阿瓦登没办法写信向供热部门询问，只好静待，除了用来敲键盘的指头以外，尽量保持全身一动不动，以节约热量。在停止供暖后的第四天，暖气片里终于传来“哗啦哗啦”的声音，带着热气的水开始流动，屋子里恢复了温暖，“供热”和“暖气”又可以恢复使用了。于是EMAIL与网络论坛上全都是“庆祝有关部门恢复供应暖气，急人民之所急”的帖子，EMAIL新闻组里也全是类似主题。</p>\n<p>不过这对阿瓦登来说太晚了，他生了病，感冒，而且是重感冒。他面色苍白，全身软弱无力，头疼的象是被一枚达姆弹射入头部，只能躺在床上等医生。医生来到他家里，给他做了两三次点滴，喂了一些叫不上名字的药片，叫他静养。这一场病足足持续了数天，他不得不放弃参加这一星期的说话会，身体状况实在太差了，阿瓦登甚至怀疑自己搞不好会因此而死掉。</p>\n<p>阿瓦登躺在床上，心里懊悔不已，说话会是他唯一的乐趣，现在他却没办法参加。他把头蒙在被子里胡思乱想，瓦格纳这一次会带什么特别的东西来呢？兰斯洛特有没有把两个孩子也领过来？还有阿尔特弥斯，他没参加的话，她会和谁“完全交流”呢？瓦格纳还是兰斯洛特？他还想到了杜拉丝，上一次的聚会里，杜拉丝讲到了温斯顿在秘密幽会的屋子里对朱丽亚说“我们已经死了”，朱丽亚附和着说“我们已经死了”，这时候第三个声音说道“你们已经死了。”</p>\n<p>杜拉丝就讲到这里，就停住了。阿瓦登急切地想知道接下来发生了什么，第三个声音是谁，是党吗？温斯顿和朱丽亚是否会被捕，他们会有什么样的下场？不光是他，阿尔特弥斯也很希望知道后续情节的发展，不过她并没有去追问杜拉丝。</p>\n<p>“让这成为一个悬疑，这样接下来的一周我们的生活都会在期待的乐趣中度过。”她对阿瓦登说，然后两个人继续沉溺于intercourse的快乐。</p>\n<p>“也许他们都会死。”阿尔特弥斯在交流结束后，看着天花板说。</p>\n<p>“也许那只是奥布林的声音，他去探望他们。”阿瓦登安慰她道，但是他的心里也不确定。</p>\n<p>阿瓦登的病持续了十天，然后他终于痊愈了。他痊愈后的第一件事就是从床上爬起来，然后去看墙上的日历：这一天恰好是星期日，说话会活动的日子。阿瓦登已经缺席了一周，这已经令他如饥似渴，甚至做梦都在和他们一起喋喋不休地说着话——所幸他并没有说梦话的习惯，所以24小时工作的旁观者并没发出任何警报。</p>\n<p>阿瓦登简单地洗了一下脸，用一把有些生锈的剃刀沾着肥皂仔细地刮掉脸上粗硬的胡须，然后咕噜咕噜地刷了刷牙齿，用手和毛巾沾着热水将自己蓬起的乱发压下去。因为生病，有关部门发了一些补贴给他，其中包括两块羊角面包、两瓶姜汁啤酒和一份精制砂糖。他将这些东西都用塑料布仔细包好，揣到宽大的军大衣里，打算带到说话会上去与大家分享。</p>\n<p>今天的天气和往常一样地冷，阿瓦登把自己裹在大衣里，登上前往效率大楼的公共汽车。一路上车厢里的广播重复着“营造健康的互联网络”以及一些优秀网络用户的先进事迹；车厢前面的电子屏幕不断滚动显示着最新的健康词汇列表，一个旁观者自车顶垂下来睥睨着车内的每一个表情呆滞的人。阿瓦登坐在最后一排，望着窗外不断向后移动的建筑物与枯黄的树木发呆。</p>\n<p>车子很快就到达了辛普森大楼附近的车站，阿瓦登下了车，把手放到怀里摸了摸塑料布包着的食物，朝着大楼走去。他在半路无意中抬起头，忽然一阵冰冷的寒流刺入他的胸腔，迫使他停住了脚步。</p>\n<p>有什么地方不对劲！</p>\n<p>他看到了效率大楼的第五层阿尔特弥斯家的窗户发生了一些奇怪的变化。以前阿尔特弥斯家面向大街的窗户总是挂着粉红色的窗帘，而现在窗帘则被扯到了两边，窗户大开，用肉眼可以勉强看到窗玻璃和屋子里雪白的墙壁。假如今天有说话会的话，阿尔特弥斯绝对不会把有屏蔽效果的窗帘打开。而且打开窗户这件事也绝不寻常，在这个城市里的室外空气十分浑浊，几乎不会有人会去开窗换气。</p>\n<p>也就是说，今天并没有说话集会召开，而是发生了另外一些事情。阿瓦登望着那窗户，心情开始变的有些慌乱，他把手从兜里掏出来，叼起一支香烟，把身体靠在一根电线杆旁故做镇静，以免被行人怀疑。究竟说话会发生了什么，为什么这一周停办了呢？要知道，只要还有复数的成员能够出席，说话会就会一直办下去，难道说瓦格纳、兰斯洛特、杜拉丝和阿尔特弥斯同时无法出席？这种概率实在太小了。阿瓦登一边这样想着，一边向四周不安地张望。忽然他看到了一样东西，一个念头霎时占据了他的全部心灵，让他几乎眩晕过去。</p>\n<p>“说话会本周不会有了，以后也不会有了。”阿瓦登嘴唇默默地蠕动着，面如死灰。</p>\n<p>他看到在街道内侧一处不起眼的地方隐藏着一个类似雷达天线的东西，其造型很象是两个背部贴在一起的大碗。阿瓦登心里清楚这是什么东西：这正是他负责软件设计的大功率主动式“旁观者”，这造型他很熟悉。这装置可以主动发射电波去探测人们的声音，并检查其中是否存在敏感词汇。</p>\n<p>这样的装置居然就安放在阿尔特弥斯家附近，那么就等于说话会完全暴露在了有关部门的监控之下。主动式旁观者的强大刺探电波会轻易刺穿她家中的铅质窗帘，把所有成员的话原封不动地传到有关部门耳朵里。</p>\n<p>这是一个划时代的发明，这一技术的突破意味着有关部门可以不再被动地等待警报，可以主动出击去刺探人们在任何时间任何地点说的任何话语。阿瓦登可以想象接下来会发生什么，阿尔特弥斯他们的每一句话都被有关部门记录下来，会有机器统计出到底有多少违禁词汇被他们使用过；然后联邦警察会冲进她的屋子，将正在聚会的成员们都带走，只留下搜查过后空荡荡的房间和窗户。</p>\n<p>阿瓦登想到这里，心如刀绞，他一点也不为自己的侥幸逃脱而感到幸运。他的胃袋翻腾起来，一种恶心的感觉从胃里直接升到嘴边，让他想吐，却又不能吐——因为“呕”也是个敏感词汇；大病初愈的孱弱身躯无法承受这种打击，象害了风寒一样颤抖起来，几乎站立不住。</p>\n<p>他不敢继续朝前走去，仓皇地转过身去，登上另外一辆公共汽车，把嘴闭的更紧了。等阿瓦登回到自己家楼下，看到楼房附近另外一架新的主动式旁观者正在兴建中，漆黑的天线在半空舒展开来，仿佛一面巨大的蜘蛛网。看来有关部门已经着手在整个纽约市部署这种新兴高科技产品。</p>\n<p>他不敢驻足观看，低着头从那巨大装置旁边走过，一路不停地走回家，然后把自己的脸紧紧地压在枕头里，却不敢哭出声音来，连一句“FUXKYOU, YOUSONOFBITCH”都不能说。</p>\n<p>从那以后，阿瓦登的生活回到了普通状态——就是说和原来一样沉滞、压抑、欠缺激情，健康向上，缺乏低级趣味。兰斯洛特说过：“战争的结果就是，大众的自由意识会将语言推向死亡的边缘”，现在看来，他的预言是很准确的：说话会的覆灭，导致“说话”、“歌剧”、“完全”、“交流”几个词先后被剔除出了健康词汇列表，成为敏感词汇。</p>\n<p>另外，虽然阿拉伯数字还能用，但“1984”这一个数字组合也被屏蔽掉了，这让包括阿瓦登在内的程序员在编写程序时不得不谨慎地检查数字是否违规，这额外增加了很多工作量，让他更加疲惫。</p>\n<p>阿瓦登不是没有担心过，也许在某一天的深夜，他就会忽然接到一封EMAIL，让他留在家里不要动，不要试图在网络做任何动作；接着电话会响起，电子女声会把这一要求重复再重复，直到警察打开他家的大门，把他带去未知的地方，那里有未知的命运等待着他。《1984》后面的情节发展阿瓦登始终不知道，唯一知道的杜拉丝已经彻底失踪了，所以温斯顿和朱丽亚的结局始终是个谜；就好象兰斯洛特、瓦格纳、杜拉丝和阿尔特弥斯的结局一样，也不从得知。其实这两件事对于阿瓦登来说没什么本质性的区别，所以它们也可以看做是同一个谜。</p>\n<p>其实他最担心的，是阿尔特弥斯。每次想到这个名字，阿瓦登就难以抑制心中的郁闷。她究竟会怎么样，彻底被屏蔽掉吗？如果是那样，那么她在这世界上遗留下来的唯一痕迹，就是一个程序员记忆里的假名而已了。</p>\n<p>说话会消失后三个星期，仍旧风平浪静，没有任何人来找过阿瓦登，他也没收到过任何类似内容的EMAIL，阿瓦登一直在想，也许是他们没有吐露出自己的下落，也可能是因为他们根本不知道——他们认识的只是一个叫王二的程序员。这个城市里有数以千计的程序员，而王二是个假名。</p>\n<p>因此，生活一如既往地平静。不，确切地说，还是有一点不同的，那就是互联网络健康词汇列表：那上面的词组消失的速度比以前要快的快，每小时每分钟都有词与单字飞快地在名单上消失，阿瓦登不得不花上大量时间去更新列表，以跟紧当前形势。</p>\n<p>与词汇列表更新速度相对的，EMAIL和网络论坛上的东西越来越乏味。因为人们不得不用极有限的词去表达广泛的意思，大家都变得寡言少语。就连那些秘密的暗语和联系方式也少了许多；整个网络就象是前些天阿瓦登家里出了问题的暖气片一样：虽然名义上是给人带来温暖的东西，但却变的冰冷、僵硬，让人如坠冰窟。</p>\n<p>这一天，阿瓦登从电脑前抬起头来，他看了看窗外迷茫的灰色天空，胸口一阵抽搐，不由得痛苦地咳了一声。他拿起塑料杯，将杯子里的纯净水一饮而尽，杯子丢进同样是塑料质地的垃圾桶里，发出钝钝的撞击声，他觉得自己的脑子也是一团垃圾，举起手敲了敲，果然发出同样钝钝的撞击声。</p>\n<p>然后他拿起大衣，戴上墨绿色的护目镜，走出门去。阿瓦登没带便携式的旁观者，那东西已经不需要了，城市里到处都是主动式的旁观者，随时监听是否有违禁词汇的存在。整个纽约现在就象是互联网络一样，被有关部门营造成十分健康。</p>\n<p>阿瓦登这一次外出是有正当理由的，他决定去取消网络论坛服务，这服务已经用不着了，因为无论EMAIL，新闻组，BBS论坛还是其他什么现在全部都变成了一样的东西。</p>\n<p>从日历来说现在应该是春季，但外面还是很冷，高大的灰色建筑矗立在平地上，仿佛绝对零度下的石林。大团大团的风裹着黄沙与废气穿行其间，风沙无处不在，让人置身其中而难以摆脱。阿瓦登把手揣进兜里，脖子缩进领口，畏缩着向网络部的大楼走去。</p>\n<p>忽然，他停下了脚步，惊讶地站在原地无法动弹。他看到阿尔特弥斯正站在前面的路灯下，穿着黑色的制服。可是她的变化有多么大啊，面容象是老了十岁，满脸都是衰老的皱纹，年轻的活力荡然无存；她听到脚步声，转过头来，两个乌黑的大眼睛显得异常空洞，目光越过阿瓦登延伸到远方，没有一个明晰的焦点。</p>\n<p>阿瓦登万万没有想到会在这个时间这个地点碰到她，这让他已经沉寂已久的心灵泛起了几点火花，可惜他迟钝的神经已经无法表达出“激动”这一个简单的情感了。两个人互相对视了一阵，他终于木然走到她身边，张了张嘴唇，想对她说些什么。但是他掏出今天新发布的健康词汇列表，发现上面是一片空白——终于连最后一个词组也被有关部门屏蔽了。</p>\n<p>于是阿瓦登只好保持着沉默，默默地与面无表情的她擦肩而过，继续向前走去。他的身影逐渐融入同样安静的灰色人群之中，整个城市都显得寂静极了。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjwvh258p0000w39z9ddtnf5w","category_id":"cjwvh258u0004w39zeabzx8j2","_id":"cjwvh258z000ew39zlay4v9xg"},{"post_id":"cjwvh258x0009w39zovi32l1u","category_id":"cjwvh258u0004w39zeabzx8j2","_id":"cjwvh2591000jw39zcwmi4m20"},{"post_id":"cjwvh258z000dw39zmzk92fkm","category_id":"cjwvh258u0004w39zeabzx8j2","_id":"cjwvh2591000mw39zyyt4d5kx"},{"post_id":"cjwvh258t0002w39zdnmq9epy","category_id":"cjwvh258u0004w39zeabzx8j2","_id":"cjwvh2592000qw39zf0uuygdk"},{"post_id":"cjwvh2591000kw39z992g9klf","category_id":"cjwvh258u0004w39zeabzx8j2","_id":"cjwvh2593000sw39zdgz2kx0v"},{"post_id":"cjwvh258v0006w39za4djuuzs","category_id":"cjwvh2590000hw39zzomprla7","_id":"cjwvh2594000vw39zdut1otvu"},{"post_id":"cjwvh2591000nw39zyo125nvi","category_id":"cjwvh258u0004w39zeabzx8j2","_id":"cjwvh2594000zw39zxibh7znm"},{"post_id":"cjwvh2592000rw39zb9igczmr","category_id":"cjwvh258u0004w39zeabzx8j2","_id":"cjwvh25950012w39zoue1biau"},{"post_id":"cjwvh258w0008w39zdsp18zql","category_id":"cjwvh2590000hw39zzomprla7","_id":"cjwvh25960015w39zafanxhux"},{"post_id":"cjwvh2593000tw39zjqhv19be","category_id":"cjwvh258u0004w39zeabzx8j2","_id":"cjwvh25960018w39zfz4rzwci"},{"post_id":"cjwvh2594000xw39zzbeubf0h","category_id":"cjwvh258u0004w39zeabzx8j2","_id":"cjwvh2597001bw39zaw32ghel"},{"post_id":"cjwvh2590000gw39z5iclqyy2","category_id":"cjwvh2594000uw39zqs3wsgpm","_id":"cjwvh2597001dw39zqfpdzhkp"},{"post_id":"cjwvh25940010w39zauk3qm3x","category_id":"cjwvh2594000uw39zqs3wsgpm","_id":"cjwvh2598001hw39zh6bvph96"},{"post_id":"cjwvh25950013w39z2ilz28gp","category_id":"cjwvh258u0004w39zeabzx8j2","_id":"cjwvh2599001lw39zt9r15o3o"},{"post_id":"cjwvh25960017w39z34ap3vaz","category_id":"cjwvh258u0004w39zeabzx8j2","_id":"cjwvh259a001pw39z3jqi0n6x"},{"post_id":"cjwvh25960019w39zi4wfxg6a","category_id":"cjwvh258u0004w39zeabzx8j2","_id":"cjwvh259b001sw39z4xwvfcw8"},{"post_id":"cjwvh2597001cw39zk8xmnyfq","category_id":"cjwvh258u0004w39zeabzx8j2","_id":"cjwvh259d001vw39zzy1ccke6"},{"post_id":"cjwvh2599001iw39z6q7xumx5","category_id":"cjwvh258u0004w39zeabzx8j2","_id":"cjwvh259d001yw39z2swrzwtx"},{"post_id":"cjwvh2599001mw39zoyjx8h2h","category_id":"cjwvh258u0004w39zeabzx8j2","_id":"cjwvh259e0022w39z16yakbsf"},{"post_id":"cjwvh259a001qw39znvsrgho7","category_id":"cjwvh258u0004w39zeabzx8j2","_id":"cjwvh259f0024w39z7p9ll4oe"},{"post_id":"cjwvh2598001ew39z60zqigpu","category_id":"cjwvh2599001jw39zxq0l54gl","_id":"cjwvh259f0027w39zntd0tvci"},{"post_id":"cjwvh259b001tw39znjkw49h9","category_id":"cjwvh258u0004w39zeabzx8j2","_id":"cjwvh259g0029w39zbww336wh"},{"post_id":"cjwvh259d001ww39zte0sa48i","category_id":"cjwvh258u0004w39zeabzx8j2","_id":"cjwvh259h002bw39zvfnvahrd"},{"post_id":"cjwvh259e001zw39zp61mdu6y","category_id":"cjwvh258u0004w39zeabzx8j2","_id":"cjwvh259i002fw39zsbgi7tna"},{"post_id":"cjwvh259e0023w39zhxy5k7g2","category_id":"cjwvh258u0004w39zeabzx8j2","_id":"cjwvh259i002iw39zpoy95x8c"},{"post_id":"cjwvh259f0025w39zkpww5eb8","category_id":"cjwvh258u0004w39zeabzx8j2","_id":"cjwvh259j002mw39zfp3wxkpl"},{"post_id":"cjwvh259g0028w39zrkze88ik","category_id":"cjwvh258u0004w39zeabzx8j2","_id":"cjwvh259k002ow39zff7ghvlx"},{"post_id":"cjwvh259g002aw39zykr0esi8","category_id":"cjwvh258u0004w39zeabzx8j2","_id":"cjwvh259l002rw39ztma9zv4q"},{"post_id":"cjwvh259h002dw39z0kw6licr","category_id":"cjwvh2594000uw39zqs3wsgpm","_id":"cjwvh259m002uw39zsn5n4ta7"},{"post_id":"cjwvh259i002gw39zdrbkjbms","category_id":"cjwvh2594000uw39zqs3wsgpm","_id":"cjwvh259m002yw39z5v9c9b3i"},{"post_id":"cjwvh259j002jw39zss73f208","category_id":"cjwvh2594000uw39zqs3wsgpm","_id":"cjwvh259n0030w39z1kc257na"},{"post_id":"cjwvh259j002nw39zkc9g8pyj","category_id":"cjwvh2594000uw39zqs3wsgpm","_id":"cjwvh259o0033w39z1eps6aio"},{"post_id":"cjwvh259k002pw39zwlsqpdjl","category_id":"cjwvh2594000uw39zqs3wsgpm","_id":"cjwvh259o0036w39zgykre69l"},{"post_id":"cjwvh259l002tw39zpwejwoxh","category_id":"cjwvh2594000uw39zqs3wsgpm","_id":"cjwvh259p003aw39zy3p2vmcc"},{"post_id":"cjwvh259m002ww39zhryu91x5","category_id":"cjwvh2594000uw39zqs3wsgpm","_id":"cjwvh259p003cw39zulsgcmm5"},{"post_id":"cjwvh259n002zw39zw3ca6zm6","category_id":"cjwvh2594000uw39zqs3wsgpm","_id":"cjwvh259q003ew39zuravlcv1"},{"post_id":"cjwvh259n0031w39zk0ixnsh8","category_id":"cjwvh2594000uw39zqs3wsgpm","_id":"cjwvh259q003hw39zqbsfk1lf"},{"post_id":"cjwvh259o0034w39z70dq5ack","category_id":"cjwvh258u0004w39zeabzx8j2","_id":"cjwvh259q003iw39zwqrcp7r0"},{"post_id":"cjwvh259p0037w39z7bt9q784","category_id":"cjwvh258u0004w39zeabzx8j2","_id":"cjwvh259q003kw39zw73xp4x3"},{"post_id":"cjwvh25e10053w39zc3r7nxfz","category_id":"cjwvh2594000uw39zqs3wsgpm","_id":"cjwvh25e40059w39z9n2jjbjd"},{"post_id":"cjwvh25e30056w39zvfj9t99k","category_id":"cjwvh258u0004w39zeabzx8j2","_id":"cjwvh25e6005cw39z2zdhich1"},{"post_id":"cjwvh25e30057w39z3vsuxn2s","category_id":"cjwvh258u0004w39zeabzx8j2","_id":"cjwvh25e7005fw39zy6she0xh"},{"post_id":"cjwvh25dz0051w39z4rfr6ei3","category_id":"cjwvh25e20054w39zy9eyaqjm","_id":"cjwvh25e9005jw39z1zioi03t"},{"post_id":"cjwvh25e5005aw39zquccf8db","category_id":"cjwvh258u0004w39zeabzx8j2","_id":"cjwvh25e9005mw39zb5pohdj8"},{"post_id":"cjwvh25e6005ew39ztlfhse5x","category_id":"cjwvh258u0004w39zeabzx8j2","_id":"cjwvh25ea005pw39z5wz8ss92"},{"post_id":"cjwvh25e7005hw39zbdg98me6","category_id":"cjwvh258u0004w39zeabzx8j2","_id":"cjwvh25ea005qw39z8dlcvucp"},{"post_id":"cjwvh25e9005lw39zfclgiuj7","category_id":"cjwvh25ea005ow39zuob9l606","_id":"cjwvh25eb005uw39z6ps56kmw"},{"post_id":"cjwvh25i30065w39zapb9hhf0","category_id":"cjwvh25i40066w39z58q9q14b","_id":"cjwvh25i40067w39zgvb4qpzn"}],"PostTag":[{"post_id":"cjwvh258p0000w39z9ddtnf5w","tag_id":"cjwvh258v0005w39zgjvo34cx","_id":"cjwvh258y000cw39zdz1036nm"},{"post_id":"cjwvh258x0009w39zovi32l1u","tag_id":"cjwvh258v0005w39zgjvo34cx","_id":"cjwvh258z000fw39zthqw3lqa"},{"post_id":"cjwvh258t0002w39zdnmq9epy","tag_id":"cjwvh258x000bw39zc4bny4iu","_id":"cjwvh2591000lw39ze0pjgr5d"},{"post_id":"cjwvh258v0006w39za4djuuzs","tag_id":"cjwvh2591000iw39zo97v9svs","_id":"cjwvh2594000yw39zlm3rddrr"},{"post_id":"cjwvh258v0006w39za4djuuzs","tag_id":"cjwvh2592000pw39zznbq750y","_id":"cjwvh25950011w39zqti101ac"},{"post_id":"cjwvh258w0008w39zdsp18zql","tag_id":"cjwvh2594000ww39zsxas44g1","_id":"cjwvh25960016w39zqq5hj5b3"},{"post_id":"cjwvh2597001cw39zk8xmnyfq","tag_id":"cjwvh2591000iw39zo97v9svs","_id":"cjwvh2598001gw39z3ux9ygrb"},{"post_id":"cjwvh2597001cw39zk8xmnyfq","tag_id":"cjwvh2592000pw39zznbq750y","_id":"cjwvh2599001kw39zp9p5s3zq"},{"post_id":"cjwvh258z000dw39zmzk92fkm","tag_id":"cjwvh25950014w39z1798x328","_id":"cjwvh259a001ow39znu56bimo"},{"post_id":"cjwvh258z000dw39zmzk92fkm","tag_id":"cjwvh2594000ww39zsxas44g1","_id":"cjwvh259b001rw39zs7sdiwjq"},{"post_id":"cjwvh2590000gw39z5iclqyy2","tag_id":"cjwvh25950014w39z1798x328","_id":"cjwvh259d001xw39z0zmexqpe"},{"post_id":"cjwvh2590000gw39z5iclqyy2","tag_id":"cjwvh2594000ww39zsxas44g1","_id":"cjwvh259e0020w39z0isbj4qd"},{"post_id":"cjwvh2591000kw39z992g9klf","tag_id":"cjwvh25950014w39z1798x328","_id":"cjwvh259i002ew39zcidc3ikm"},{"post_id":"cjwvh2591000kw39z992g9klf","tag_id":"cjwvh259e0021w39zhchyxeu3","_id":"cjwvh259i002hw39zn676nj0p"},{"post_id":"cjwvh2591000kw39z992g9klf","tag_id":"cjwvh259f0026w39z444azh7y","_id":"cjwvh259j002lw39zz32r20g5"},{"post_id":"cjwvh2591000nw39zyo125nvi","tag_id":"cjwvh259h002cw39zb2i1tb6h","_id":"cjwvh259l002sw39zgj0x354q"},{"post_id":"cjwvh2591000nw39zyo125nvi","tag_id":"cjwvh2594000ww39zsxas44g1","_id":"cjwvh259m002vw39zfq21f2j3"},{"post_id":"cjwvh2592000rw39zb9igczmr","tag_id":"cjwvh259k002qw39z5t6513w3","_id":"cjwvh259o0035w39z366kc6bx"},{"post_id":"cjwvh2592000rw39zb9igczmr","tag_id":"cjwvh258v0005w39zgjvo34cx","_id":"cjwvh259p0038w39zpty5qz5n"},{"post_id":"cjwvh2592000rw39zb9igczmr","tag_id":"cjwvh259m002xw39zf9oy5zmh","_id":"cjwvh259p003bw39z5thg8x9e"},{"post_id":"cjwvh2593000tw39zjqhv19be","tag_id":"cjwvh25950014w39z1798x328","_id":"cjwvh259q003dw39zbd2oe4d3"},{"post_id":"cjwvh2594000xw39zzbeubf0h","tag_id":"cjwvh259p0039w39z5u6fax25","_id":"cjwvh259q003gw39zvkic21ij"},{"post_id":"cjwvh25940010w39zauk3qm3x","tag_id":"cjwvh259q003fw39z48q4tdgo","_id":"cjwvh259q003mw39zfzwqag1r"},{"post_id":"cjwvh25940010w39zauk3qm3x","tag_id":"cjwvh259q003jw39z02mfr7mx","_id":"cjwvh259q003nw39zvy9tvksy"},{"post_id":"cjwvh25950013w39z2ilz28gp","tag_id":"cjwvh259q003lw39znksuseh5","_id":"cjwvh259r003pw39zq2wy7cj6"},{"post_id":"cjwvh25960017w39z34ap3vaz","tag_id":"cjwvh259q003ow39z4pljq90j","_id":"cjwvh259r003rw39z1l44yhmx"},{"post_id":"cjwvh25960019w39zi4wfxg6a","tag_id":"cjwvh259r003qw39zhd645meo","_id":"cjwvh259r003tw39z4o231ghg"},{"post_id":"cjwvh2598001ew39z60zqigpu","tag_id":"cjwvh259r003sw39zrocacpkh","_id":"cjwvh259s003vw39zj7k4n3vj"},{"post_id":"cjwvh2599001iw39z6q7xumx5","tag_id":"cjwvh259r003uw39zv4llv4yf","_id":"cjwvh259s003xw39zmxwbo535"},{"post_id":"cjwvh2599001mw39zoyjx8h2h","tag_id":"cjwvh259s003ww39z0ga3bs4s","_id":"cjwvh259s003zw39z8jgw8p7c"},{"post_id":"cjwvh259a001qw39znvsrgho7","tag_id":"cjwvh259s003yw39zh414f32c","_id":"cjwvh259t0041w39z80tpwxc2"},{"post_id":"cjwvh259b001tw39znjkw49h9","tag_id":"cjwvh259q003ow39z4pljq90j","_id":"cjwvh259u0043w39zgk6cmdh7"},{"post_id":"cjwvh259d001ww39zte0sa48i","tag_id":"cjwvh259q003fw39z48q4tdgo","_id":"cjwvh259u0045w39zbisqe9mz"},{"post_id":"cjwvh259e001zw39zp61mdu6y","tag_id":"cjwvh259u0044w39zcolbg9rn","_id":"cjwvh259u0047w39zlxiizpj4"},{"post_id":"cjwvh259e0023w39zhxy5k7g2","tag_id":"cjwvh259u0046w39zl2o2dyf4","_id":"cjwvh259u0049w39zpf4mnpas"},{"post_id":"cjwvh259f0025w39zkpww5eb8","tag_id":"cjwvh259u0048w39zykypbix9","_id":"cjwvh259v004bw39znzzcgkoa"},{"post_id":"cjwvh259g0028w39zrkze88ik","tag_id":"cjwvh259u0048w39zykypbix9","_id":"cjwvh259v004dw39z2bkz59kv"},{"post_id":"cjwvh259g002aw39zykr0esi8","tag_id":"cjwvh259v004cw39zr9vzcutr","_id":"cjwvh259v004fw39zq8eggn1x"},{"post_id":"cjwvh259h002dw39z0kw6licr","tag_id":"cjwvh259v004ew39zfx3xzfsq","_id":"cjwvh259w004hw39ztpwwgyvw"},{"post_id":"cjwvh259i002gw39zdrbkjbms","tag_id":"cjwvh259v004gw39zd8ydj2of","_id":"cjwvh259w004jw39zk4zp5uga"},{"post_id":"cjwvh259j002jw39zss73f208","tag_id":"cjwvh259w004iw39zkpdqfnbe","_id":"cjwvh259w004lw39zuu1l0wue"},{"post_id":"cjwvh259j002nw39zkc9g8pyj","tag_id":"cjwvh259w004kw39zy7k9sowx","_id":"cjwvh259w004nw39zgq9vqsqv"},{"post_id":"cjwvh259k002pw39zwlsqpdjl","tag_id":"cjwvh259w004mw39zjei9f4b6","_id":"cjwvh259w004pw39zpvhlgp1d"},{"post_id":"cjwvh259l002tw39zpwejwoxh","tag_id":"cjwvh259w004ow39zc5crf46o","_id":"cjwvh259x004rw39zx8vq25lo"},{"post_id":"cjwvh259m002ww39zhryu91x5","tag_id":"cjwvh259x004qw39zkxvio5dw","_id":"cjwvh259x004tw39z60ixqhj0"},{"post_id":"cjwvh259n002zw39zw3ca6zm6","tag_id":"cjwvh259w004ow39zc5crf46o","_id":"cjwvh259x004vw39zwsr7xag1"},{"post_id":"cjwvh259n0031w39zk0ixnsh8","tag_id":"cjwvh259x004uw39ztlkvaode","_id":"cjwvh259y004xw39z73qighyq"},{"post_id":"cjwvh259o0034w39z70dq5ack","tag_id":"cjwvh259x004ww39zfiyshs95","_id":"cjwvh259y004zw39z6mj0hten"},{"post_id":"cjwvh259p0037w39z7bt9q784","tag_id":"cjwvh259y004yw39z0e1324gi","_id":"cjwvh259y0050w39zttvuaxsq"},{"post_id":"cjwvh25e30056w39zvfj9t99k","tag_id":"cjwvh2592000pw39zznbq750y","_id":"cjwvh25e40058w39z7mw58pt0"},{"post_id":"cjwvh25dz0051w39z4rfr6ei3","tag_id":"cjwvh25e20055w39zj9npfbju","_id":"cjwvh25e6005dw39zimmr3ctk"},{"post_id":"cjwvh25e5005aw39zquccf8db","tag_id":"cjwvh258v0005w39zgjvo34cx","_id":"cjwvh25e7005gw39zrw0xpnfe"},{"post_id":"cjwvh25e6005ew39ztlfhse5x","tag_id":"cjwvh258v0005w39zgjvo34cx","_id":"cjwvh25e9005kw39zo1xk2nmp"},{"post_id":"cjwvh25e10053w39zc3r7nxfz","tag_id":"cjwvh25e6005bw39zuo7fmc9v","_id":"cjwvh25eb005sw39z8vita60k"},{"post_id":"cjwvh25e10053w39zc3r7nxfz","tag_id":"cjwvh25e8005iw39z69pst4a1","_id":"cjwvh25eb005tw39zp07gqjh9"},{"post_id":"cjwvh25e10053w39zc3r7nxfz","tag_id":"cjwvh25ea005nw39zgmiikrzs","_id":"cjwvh25eb005ww39z7z59mqsf"},{"post_id":"cjwvh25e30057w39z3vsuxn2s","tag_id":"cjwvh25ea005rw39zrn53p9tg","_id":"cjwvh25ec005zw39zk3tbz90j"},{"post_id":"cjwvh25e30057w39z3vsuxn2s","tag_id":"cjwvh25eb005vw39zth8y66km","_id":"cjwvh25ec0060w39zshpt7nd9"},{"post_id":"cjwvh25e30057w39z3vsuxn2s","tag_id":"cjwvh25eb005xw39ztqjz0kty","_id":"cjwvh25ec0062w39zv8cjmg8y"},{"post_id":"cjwvh25e7005hw39zbdg98me6","tag_id":"cjwvh25eb005yw39ztxaqiq49","_id":"cjwvh25ec0063w39zv3egwqy3"},{"post_id":"cjwvh25e9005lw39zfclgiuj7","tag_id":"cjwvh25ec0061w39ziets7rku","_id":"cjwvh25ec0064w39zf9l7l6ea"}],"Tag":[{"name":"http","_id":"cjwvh258v0005w39zgjvo34cx"},{"name":"javascript","_id":"cjwvh258x000bw39zc4bny4iu"},{"name":"hexo","_id":"cjwvh2591000iw39zo97v9svs"},{"name":"git","_id":"cjwvh2592000pw39zznbq750y"},{"name":"bootstrap","_id":"cjwvh2594000ww39zsxas44g1"},{"name":"vue","_id":"cjwvh25950014w39z1798x328"},{"name":"ajax","_id":"cjwvh259e0021w39zhchyxeu3"},{"name":"jquery","_id":"cjwvh259f0026w39z444azh7y"},{"name":"jQuery","_id":"cjwvh259h002cw39zb2i1tb6h"},{"name":"dns","_id":"cjwvh259k002qw39z5t6513w3"},{"name":"tcp/ip","_id":"cjwvh259m002xw39zf9oy5zmh"},{"name":"dom","_id":"cjwvh259p0039w39z5u6fax25"},{"name":"css","_id":"cjwvh259q003fw39z48q4tdgo"},{"name":"box","_id":"cjwvh259q003jw39z02mfr7mx"},{"name":"SSR","_id":"cjwvh259q003lw39znksuseh5"},{"name":"CSS","_id":"cjwvh259q003ow39z4pljq90j"},{"name":"Semver","_id":"cjwvh259r003qw39zhd645meo"},{"name":"Plugin","_id":"cjwvh259r003sw39zrocacpkh"},{"name":"HTTP","_id":"cjwvh259r003uw39zv4llv4yf"},{"name":"portal","_id":"cjwvh259s003ww39z0ga3bs4s"},{"name":"ScrollWatch","_id":"cjwvh259s003yw39zh414f32c"},{"name":"浏览器","_id":"cjwvh259u0044w39zcolbg9rn"},{"name":"JS","_id":"cjwvh259u0046w39zl2o2dyf4"},{"name":"es6","_id":"cjwvh259u0048w39zykypbix9"},{"name":"webpack","_id":"cjwvh259v004cw39zr9vzcutr"},{"name":"NAS","_id":"cjwvh259v004ew39zfx3xzfsq"},{"name":"加密","_id":"cjwvh259v004gw39zd8ydj2of"},{"name":"翻墙","_id":"cjwvh259w004iw39zkpdqfnbe"},{"name":"JavaScript","_id":"cjwvh259w004kw39zy7k9sowx"},{"name":"mac","_id":"cjwvh259w004mw39zjei9f4b6"},{"name":"vscode","_id":"cjwvh259w004ow39zc5crf46o"},{"name":"steam","_id":"cjwvh259x004qw39zkxvio5dw"},{"name":"算法","_id":"cjwvh259x004uw39ztlkvaode"},{"name":"docker","_id":"cjwvh259x004ww39zfiyshs95"},{"name":"ES6","_id":"cjwvh259y004yw39z0e1324gi"},{"name":"workflow","_id":"cjwvh25e20055w39zj9npfbju"},{"name":"node.js","_id":"cjwvh25e6005bw39zuo7fmc9v"},{"name":"express","_id":"cjwvh25e8005iw39z69pst4a1"},{"name":"mysql","_id":"cjwvh25ea005nw39zgmiikrzs"},{"name":"HTML","_id":"cjwvh25ea005rw39zrn53p9tg"},{"name":"XML","_id":"cjwvh25eb005vw39zth8y66km"},{"name":"XHTML","_id":"cjwvh25eb005xw39ztqjz0kty"},{"name":"Linux","_id":"cjwvh25eb005yw39ztxaqiq49"},{"name":"服务器","_id":"cjwvh25ec0061w39ziets7rku"}]}}